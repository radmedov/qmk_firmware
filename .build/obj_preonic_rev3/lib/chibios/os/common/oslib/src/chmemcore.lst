   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"chmemcore.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._core_init,"ax",%progbits
  16              		.align	1
  17              		.global	_core_init
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	_core_init:
  24              	.LFB248:
  25              		.file 1 "lib/chibios/os/common/oslib/src/chmemcore.c"
   1:lib/chibios/os/common/oslib/src/chmemcore.c **** /*
   2:lib/chibios/os/common/oslib/src/chmemcore.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:lib/chibios/os/common/oslib/src/chmemcore.c **** 
   4:lib/chibios/os/common/oslib/src/chmemcore.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/common/oslib/src/chmemcore.c **** 
   6:lib/chibios/os/common/oslib/src/chmemcore.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/common/oslib/src/chmemcore.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/common/oslib/src/chmemcore.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/common/oslib/src/chmemcore.c ****     (at your option) any later version.
  10:lib/chibios/os/common/oslib/src/chmemcore.c **** 
  11:lib/chibios/os/common/oslib/src/chmemcore.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/common/oslib/src/chmemcore.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/common/oslib/src/chmemcore.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/common/oslib/src/chmemcore.c ****     GNU General Public License for more details.
  15:lib/chibios/os/common/oslib/src/chmemcore.c **** 
  16:lib/chibios/os/common/oslib/src/chmemcore.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/common/oslib/src/chmemcore.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/common/oslib/src/chmemcore.c **** */
  19:lib/chibios/os/common/oslib/src/chmemcore.c **** 
  20:lib/chibios/os/common/oslib/src/chmemcore.c **** /**
  21:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @file    chmemcore.c
  22:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @brief   Core memory manager code.
  23:lib/chibios/os/common/oslib/src/chmemcore.c ****  *
  24:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @addtogroup memcore
  25:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @details Core Memory Manager related APIs and services.
  26:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          <h2>Operation mode</h2>
  27:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          The core memory manager is a simplified allocator that only
  28:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          allows to allocate memory blocks without the possibility to
  29:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          free them.<br>
  30:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          This allocator is meant as a memory blocks provider for the
  31:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          other allocators such as:
  32:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          - C-Runtime allocator (through a compiler specific adapter module).
  33:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          - Heap allocator (see @ref heaps).
  34:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          - Memory pools allocator (see @ref pools).
  35:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          .
  36:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          By having a centralized memory provider the various allocators
  37:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          can coexist and share the main memory.<br>
  38:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          This allocator, alone, is also useful for very simple
  39:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          applications that just require a simple way to get memory
  40:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          blocks.
  41:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @pre     In order to use the core memory manager APIs the @p CH_CFG_USE_MEMCORE
  42:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          option must be enabled in @p chconf.h.
  43:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @note    Compatible with RT and NIL.
  44:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @{
  45:lib/chibios/os/common/oslib/src/chmemcore.c ****  */
  46:lib/chibios/os/common/oslib/src/chmemcore.c **** 
  47:lib/chibios/os/common/oslib/src/chmemcore.c **** #include "ch.h"
  48:lib/chibios/os/common/oslib/src/chmemcore.c **** 
  49:lib/chibios/os/common/oslib/src/chmemcore.c **** #if (CH_CFG_USE_MEMCORE == TRUE) || defined(__DOXYGEN__)
  50:lib/chibios/os/common/oslib/src/chmemcore.c **** 
  51:lib/chibios/os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  52:lib/chibios/os/common/oslib/src/chmemcore.c **** /* Module exported variables.                                                */
  53:lib/chibios/os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  54:lib/chibios/os/common/oslib/src/chmemcore.c **** 
  55:lib/chibios/os/common/oslib/src/chmemcore.c **** /**
  56:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @brief   Memory core descriptor.
  57:lib/chibios/os/common/oslib/src/chmemcore.c ****  */
  58:lib/chibios/os/common/oslib/src/chmemcore.c **** memcore_t ch_memcore;
  59:lib/chibios/os/common/oslib/src/chmemcore.c **** 
  60:lib/chibios/os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  61:lib/chibios/os/common/oslib/src/chmemcore.c **** /* Module local types.                                                       */
  62:lib/chibios/os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  63:lib/chibios/os/common/oslib/src/chmemcore.c **** 
  64:lib/chibios/os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  65:lib/chibios/os/common/oslib/src/chmemcore.c **** /* Module local variables.                                                   */
  66:lib/chibios/os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  67:lib/chibios/os/common/oslib/src/chmemcore.c **** 
  68:lib/chibios/os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  69:lib/chibios/os/common/oslib/src/chmemcore.c **** /* Module local functions.                                                   */
  70:lib/chibios/os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  71:lib/chibios/os/common/oslib/src/chmemcore.c **** 
  72:lib/chibios/os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  73:lib/chibios/os/common/oslib/src/chmemcore.c **** /* Module exported functions.                                                */
  74:lib/chibios/os/common/oslib/src/chmemcore.c **** /*===========================================================================*/
  75:lib/chibios/os/common/oslib/src/chmemcore.c **** 
  76:lib/chibios/os/common/oslib/src/chmemcore.c **** /**
  77:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @brief   Low level memory manager initialization.
  78:lib/chibios/os/common/oslib/src/chmemcore.c ****  *
  79:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @notapi
  80:lib/chibios/os/common/oslib/src/chmemcore.c ****  */
  81:lib/chibios/os/common/oslib/src/chmemcore.c **** void _core_init(void) {
  26              		.loc 1 81 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  82:lib/chibios/os/common/oslib/src/chmemcore.c **** #if CH_CFG_MEMCORE_SIZE == 0
  83:lib/chibios/os/common/oslib/src/chmemcore.c ****   extern uint8_t __heap_base__[];
  84:lib/chibios/os/common/oslib/src/chmemcore.c ****   extern uint8_t __heap_end__[];
  85:lib/chibios/os/common/oslib/src/chmemcore.c **** 
  86:lib/chibios/os/common/oslib/src/chmemcore.c ****   /*lint -save -e9033 [10.8] Required cast operations.*/
  87:lib/chibios/os/common/oslib/src/chmemcore.c ****   ch_memcore.nextmem = __heap_base__;
  31              		.loc 1 87 0
  32 0000 024B     		ldr	r3, .L2
  33 0002 034A     		ldr	r2, .L2+4
  34 0004 1A60     		str	r2, [r3]
  88:lib/chibios/os/common/oslib/src/chmemcore.c ****   ch_memcore.endmem  = __heap_end__;
  35              		.loc 1 88 0
  36 0006 034A     		ldr	r2, .L2+8
  37 0008 5A60     		str	r2, [r3, #4]
  89:lib/chibios/os/common/oslib/src/chmemcore.c ****   /*lint restore*/
  90:lib/chibios/os/common/oslib/src/chmemcore.c **** #else
  91:lib/chibios/os/common/oslib/src/chmemcore.c ****   static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];
  92:lib/chibios/os/common/oslib/src/chmemcore.c **** 
  93:lib/chibios/os/common/oslib/src/chmemcore.c ****   ch_memcore.nextmem = &static_heap[0];
  94:lib/chibios/os/common/oslib/src/chmemcore.c ****   ch_memcore.endmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
  95:lib/chibios/os/common/oslib/src/chmemcore.c **** #endif
  96:lib/chibios/os/common/oslib/src/chmemcore.c **** }
  38              		.loc 1 96 0
  39 000a 7047     		bx	lr
  40              	.L3:
  41              		.align	2
  42              	.L2:
  43 000c 00000000 		.word	.LANCHOR0
  44 0010 00000000 		.word	__heap_base__
  45 0014 00000000 		.word	__heap_end__
  46              		.cfi_endproc
  47              	.LFE248:
  49              		.section	.text.chCoreAllocAlignedWithOffsetI,"ax",%progbits
  50              		.align	1
  51              		.global	chCoreAllocAlignedWithOffsetI
  52              		.syntax unified
  53              		.thumb
  54              		.thumb_func
  55              		.fpu softvfp
  57              	chCoreAllocAlignedWithOffsetI:
  58              	.LFB249:
  97:lib/chibios/os/common/oslib/src/chmemcore.c **** 
  98:lib/chibios/os/common/oslib/src/chmemcore.c **** /**
  99:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @brief   Allocates a memory block.
 100:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @details This function allocates a block of @p offset + @p size bytes. The
 101:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          returned pointer has @p offset bytes before its address and
 102:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          @p size bytes after.
 103:lib/chibios/os/common/oslib/src/chmemcore.c ****  *
 104:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @param[in] size      the size of the block to be allocated.
 105:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @param[in] align     desired memory alignment
 106:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @param[in] offset    aligned pointer offset
 107:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @return              A pointer to the allocated memory block.
 108:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @retval NULL         allocation failed, core memory exhausted.
 109:lib/chibios/os/common/oslib/src/chmemcore.c ****  *
 110:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @iclass
 111:lib/chibios/os/common/oslib/src/chmemcore.c ****  */
 112:lib/chibios/os/common/oslib/src/chmemcore.c **** void *chCoreAllocAlignedWithOffsetI(size_t size,
 113:lib/chibios/os/common/oslib/src/chmemcore.c ****                                     unsigned align,
 114:lib/chibios/os/common/oslib/src/chmemcore.c ****                                     size_t offset) {
  59              		.loc 1 114 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              	.LVL0:
  64 0000 70B5     		push	{r4, r5, r6, lr}
  65              		.cfi_def_cfa_offset 16
  66              		.cfi_offset 4, -16
  67              		.cfi_offset 5, -12
  68              		.cfi_offset 6, -8
  69              		.cfi_offset 14, -4
 115:lib/chibios/os/common/oslib/src/chmemcore.c ****   uint8_t *p, *next;
 116:lib/chibios/os/common/oslib/src/chmemcore.c **** 
 117:lib/chibios/os/common/oslib/src/chmemcore.c ****   chDbgCheckClassI();
 118:lib/chibios/os/common/oslib/src/chmemcore.c ****   chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 119:lib/chibios/os/common/oslib/src/chmemcore.c **** 
 120:lib/chibios/os/common/oslib/src/chmemcore.c ****   size = MEM_ALIGN_NEXT(size, align);
 121:lib/chibios/os/common/oslib/src/chmemcore.c ****   p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  70              		.loc 1 121 0
  71 0002 0A4C     		ldr	r4, .L8
  72 0004 2568     		ldr	r5, [r4]
 120:lib/chibios/os/common/oslib/src/chmemcore.c ****   p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  73              		.loc 1 120 0
  74 0006 431E     		subs	r3, r0, #1
  75              		.loc 1 121 0
  76 0008 A818     		adds	r0, r5, r2
  77              	.LVL1:
  78 000a 0138     		subs	r0, r0, #1
 120:lib/chibios/os/common/oslib/src/chmemcore.c ****   p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  79              		.loc 1 120 0
  80 000c 4E42     		negs	r6, r1
  81 000e 0B44     		add	r3, r3, r1
  82              	.LVL2:
  83              		.loc 1 121 0
  84 0010 0844     		add	r0, r0, r1
  85 0012 3040     		ands	r0, r0, r6
  86              	.LVL3:
 120:lib/chibios/os/common/oslib/src/chmemcore.c ****   p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  87              		.loc 1 120 0
  88 0014 3340     		ands	r3, r3, r6
  89              	.LVL4:
 122:lib/chibios/os/common/oslib/src/chmemcore.c ****   next = p + size;
 123:lib/chibios/os/common/oslib/src/chmemcore.c **** 
 124:lib/chibios/os/common/oslib/src/chmemcore.c ****   /* Considering also the case where there is numeric overflow.*/
 125:lib/chibios/os/common/oslib/src/chmemcore.c ****   if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
  90              		.loc 1 125 0
  91 0016 6268     		ldr	r2, [r4, #4]
  92              	.LVL5:
 122:lib/chibios/os/common/oslib/src/chmemcore.c ****   next = p + size;
  93              		.loc 1 122 0
  94 0018 0344     		add	r3, r3, r0
  95              	.LVL6:
  96              		.loc 1 125 0
  97 001a 9A42     		cmp	r2, r3
  98 001c 03D3     		bcc	.L7
  99              		.loc 1 125 0 is_stmt 0 discriminator 1
 100 001e 9D42     		cmp	r5, r3
 101 0020 01D8     		bhi	.L7
 126:lib/chibios/os/common/oslib/src/chmemcore.c ****     return NULL;
 127:lib/chibios/os/common/oslib/src/chmemcore.c ****   }
 128:lib/chibios/os/common/oslib/src/chmemcore.c **** 
 129:lib/chibios/os/common/oslib/src/chmemcore.c ****   ch_memcore.nextmem = next;
 102              		.loc 1 129 0 is_stmt 1
 103 0022 2360     		str	r3, [r4]
 104              	.LVL7:
 105              	.L4:
 130:lib/chibios/os/common/oslib/src/chmemcore.c **** 
 131:lib/chibios/os/common/oslib/src/chmemcore.c ****   return p;
 132:lib/chibios/os/common/oslib/src/chmemcore.c **** }
 106              		.loc 1 132 0
 107 0024 70BD     		pop	{r4, r5, r6, pc}
 108              	.LVL8:
 109              	.L7:
 126:lib/chibios/os/common/oslib/src/chmemcore.c ****     return NULL;
 110              		.loc 1 126 0
 111 0026 0020     		movs	r0, #0
 112              	.LVL9:
 113 0028 FCE7     		b	.L4
 114              	.L9:
 115 002a 00BF     		.align	2
 116              	.L8:
 117 002c 00000000 		.word	.LANCHOR0
 118              		.cfi_endproc
 119              	.LFE249:
 121              		.section	.text.chCoreAllocAlignedWithOffset,"ax",%progbits
 122              		.align	1
 123              		.global	chCoreAllocAlignedWithOffset
 124              		.syntax unified
 125              		.thumb
 126              		.thumb_func
 127              		.fpu softvfp
 129              	chCoreAllocAlignedWithOffset:
 130              	.LFB250:
 133:lib/chibios/os/common/oslib/src/chmemcore.c **** 
 134:lib/chibios/os/common/oslib/src/chmemcore.c **** /**
 135:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @brief   Allocates a memory block.
 136:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @details This function allocates a block of @p offset + @p size bytes. The
 137:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          returned pointer has @p offset bytes before its address and
 138:lib/chibios/os/common/oslib/src/chmemcore.c ****  *          @p size bytes after.
 139:lib/chibios/os/common/oslib/src/chmemcore.c ****  *
 140:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @param[in] size      the size of the block to be allocated.
 141:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @param[in] align     desired memory alignment
 142:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @param[in] offset    aligned pointer offset
 143:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @return              A pointer to the allocated memory block.
 144:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @retval NULL         allocation failed, core memory exhausted.
 145:lib/chibios/os/common/oslib/src/chmemcore.c ****  *
 146:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @api
 147:lib/chibios/os/common/oslib/src/chmemcore.c ****  */
 148:lib/chibios/os/common/oslib/src/chmemcore.c **** void *chCoreAllocAlignedWithOffset(size_t size,
 149:lib/chibios/os/common/oslib/src/chmemcore.c ****                                    unsigned align,
 150:lib/chibios/os/common/oslib/src/chmemcore.c ****                                    size_t offset) {
 131              		.loc 1 150 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 0
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              	.LVL10:
 136 0000 08B5     		push	{r3, lr}
 137              		.cfi_def_cfa_offset 8
 138              		.cfi_offset 3, -8
 139              		.cfi_offset 14, -4
 140              	.LBB24:
 141              	.LBB25:
 142              	.LBB26:
 143              	.LBB27:
 144              		.file 2 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @version  V4.30
   5:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
   9:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    All rights reserved.
  10:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      specific prior written permission.
  20:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    *
  21:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  35:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  38:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #endif
  45:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  46:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  47:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   @{
  51:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  52:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  53:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  54:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  58:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  60:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  62:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  63:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  64:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  65:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  69:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  71:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  73:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  74:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  75:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  76:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Control Register value
  79:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  80:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  82:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
  83:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  84:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
  86:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  87:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  88:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  89:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  90:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  94:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  96:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  98:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  99:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 100:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 101:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 105:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 107:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 108:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 109:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 111:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 112:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 113:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 114:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 115:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               APSR Register value
 118:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 119:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 121:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 122:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 123:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 125:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 126:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 127:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 128:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 129:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 132:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 134:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 136:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 137:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 138:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 140:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 141:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 142:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 143:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 144:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               PSP Register value
 147:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 148:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 150:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 151:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 154:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 155:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 156:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 157:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 158:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 162:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 164:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 166:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 167:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 168:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 169:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               MSP Register value
 172:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 173:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 175:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 176:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 177:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 179:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 180:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 181:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 182:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 183:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 188:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 190:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 192:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 193:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 194:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 195:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 199:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 201:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 202:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 203:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 205:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 206:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 207:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 208:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 209:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 213:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 215:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 217:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 218:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 219:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 221:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 222:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 226:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 228:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 230:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 231:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 232:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 233:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 237:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 239:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 241:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 243:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 244:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 248:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 250:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 251:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 252:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 254:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 255:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 257:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 145              		.loc 2 264 0
 146 0002 2023     		movs	r3, #32
 147              		.syntax unified
 148              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 149 0004 83F31188 		MSR basepri, r3
 150              	@ 0 "" 2
 151              	.LVL11:
 152              		.thumb
 153              		.syntax unified
 154              	.LBE27:
 155              	.LBE26:
 156              	.LBE25:
 157              	.LBE24:
 151:lib/chibios/os/common/oslib/src/chmemcore.c ****   void *p;
 152:lib/chibios/os/common/oslib/src/chmemcore.c **** 
 153:lib/chibios/os/common/oslib/src/chmemcore.c ****   chSysLock();
 154:lib/chibios/os/common/oslib/src/chmemcore.c ****   p = chCoreAllocAlignedWithOffsetI(size, align, offset);
 158              		.loc 1 154 0
 159 0008 FFF7FEFF 		bl	chCoreAllocAlignedWithOffsetI
 160              	.LVL12:
 161              	.LBB28:
 162              	.LBB29:
 163              	.LBB30:
 164              	.LBB31:
 165              	.LBB32:
 166              		.loc 2 264 0
 167 000c 0023     		movs	r3, #0
 168              		.syntax unified
 169              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 170 000e 83F31188 		MSR basepri, r3
 171              	@ 0 "" 2
 172              	.LVL13:
 173              		.thumb
 174              		.syntax unified
 175              	.LBE32:
 176              	.LBE31:
 177              	.LBE30:
 178              	.LBE29:
 179              	.LBE28:
 155:lib/chibios/os/common/oslib/src/chmemcore.c ****   chSysUnlock();
 156:lib/chibios/os/common/oslib/src/chmemcore.c **** 
 157:lib/chibios/os/common/oslib/src/chmemcore.c ****   return p;
 158:lib/chibios/os/common/oslib/src/chmemcore.c **** }
 180              		.loc 1 158 0
 181 0012 08BD     		pop	{r3, pc}
 182              		.cfi_endproc
 183              	.LFE250:
 185              		.section	.text.chCoreGetStatusX,"ax",%progbits
 186              		.align	1
 187              		.global	chCoreGetStatusX
 188              		.syntax unified
 189              		.thumb
 190              		.thumb_func
 191              		.fpu softvfp
 193              	chCoreGetStatusX:
 194              	.LFB251:
 159:lib/chibios/os/common/oslib/src/chmemcore.c **** 
 160:lib/chibios/os/common/oslib/src/chmemcore.c **** /**
 161:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @brief   Core memory status.
 162:lib/chibios/os/common/oslib/src/chmemcore.c ****  *
 163:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @return              The size, in bytes, of the free core memory.
 164:lib/chibios/os/common/oslib/src/chmemcore.c ****  *
 165:lib/chibios/os/common/oslib/src/chmemcore.c ****  * @xclass
 166:lib/chibios/os/common/oslib/src/chmemcore.c ****  */
 167:lib/chibios/os/common/oslib/src/chmemcore.c **** size_t chCoreGetStatusX(void) {
 195              		.loc 1 167 0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199              		@ link register save eliminated.
 168:lib/chibios/os/common/oslib/src/chmemcore.c **** 
 169:lib/chibios/os/common/oslib/src/chmemcore.c ****   /*lint -save -e9033 [10.8] The cast is safe.*/
 170:lib/chibios/os/common/oslib/src/chmemcore.c ****   return (size_t)(ch_memcore.endmem - ch_memcore.nextmem);
 200              		.loc 1 170 0
 201 0000 024B     		ldr	r3, .L12
 202 0002 D3E90030 		ldrd	r3, r0, [r3]
 171:lib/chibios/os/common/oslib/src/chmemcore.c ****   /*lint -restore*/
 172:lib/chibios/os/common/oslib/src/chmemcore.c **** }
 203              		.loc 1 172 0
 204 0006 C01A     		subs	r0, r0, r3
 205 0008 7047     		bx	lr
 206              	.L13:
 207 000a 00BF     		.align	2
 208              	.L12:
 209 000c 00000000 		.word	.LANCHOR0
 210              		.cfi_endproc
 211              	.LFE251:
 213              		.global	ch_memcore
 214              		.section	.bss.ch_memcore,"aw",%nobits
 215              		.align	2
 216              		.set	.LANCHOR0,. + 0
 219              	ch_memcore:
 220 0000 00000000 		.space	8
 220      00000000 
 221              		.text
 222              	.Letext0:
 223              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 224              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 225              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 226              		.file 6 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 227              		.file 7 "./lib/chibios/os/rt/include/chsystypes.h"
 228              		.file 8 "./lib/chibios/os/rt/include/chschd.h"
 229              		.file 9 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 230              		.file 10 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 231              		.file 11 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 232              		.file 12 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 233              		.file 13 "./lib/chibios/os/rt/include/chtm.h"
 234              		.file 14 "./lib/chibios/os/rt/include/chsem.h"
 235              		.file 15 "./lib/chibios/os/rt/include/chmtx.h"
 236              		.file 16 "./lib/chibios/os/rt/include/chsys.h"
 237              		.file 17 "./lib/chibios/os/rt/include/chregistry.h"
 238              		.file 18 "./lib/chibios/os/common/oslib/include/chmemcore.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmemcore.c
/var/tmp//ccQyVa3h.s:16     .text._core_init:0000000000000000 $t
/var/tmp//ccQyVa3h.s:23     .text._core_init:0000000000000000 _core_init
/var/tmp//ccQyVa3h.s:43     .text._core_init:000000000000000c $d
/var/tmp//ccQyVa3h.s:50     .text.chCoreAllocAlignedWithOffsetI:0000000000000000 $t
/var/tmp//ccQyVa3h.s:57     .text.chCoreAllocAlignedWithOffsetI:0000000000000000 chCoreAllocAlignedWithOffsetI
/var/tmp//ccQyVa3h.s:117    .text.chCoreAllocAlignedWithOffsetI:000000000000002c $d
/var/tmp//ccQyVa3h.s:122    .text.chCoreAllocAlignedWithOffset:0000000000000000 $t
/var/tmp//ccQyVa3h.s:129    .text.chCoreAllocAlignedWithOffset:0000000000000000 chCoreAllocAlignedWithOffset
/var/tmp//ccQyVa3h.s:186    .text.chCoreGetStatusX:0000000000000000 $t
/var/tmp//ccQyVa3h.s:193    .text.chCoreGetStatusX:0000000000000000 chCoreGetStatusX
/var/tmp//ccQyVa3h.s:209    .text.chCoreGetStatusX:000000000000000c $d
/var/tmp//ccQyVa3h.s:219    .bss.ch_memcore:0000000000000000 ch_memcore
/var/tmp//ccQyVa3h.s:215    .bss.ch_memcore:0000000000000000 $d

UNDEFINED SYMBOLS
__heap_base__
__heap_end__
