   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"chmboxes.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.chMBObjectInit,"ax",%progbits
  16              		.align	1
  17              		.global	chMBObjectInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	chMBObjectInit:
  24              	.LFB248:
  25              		.file 1 "lib/chibios/os/common/oslib/src/chmboxes.c"
   1:lib/chibios/os/common/oslib/src/chmboxes.c **** /*
   2:lib/chibios/os/common/oslib/src/chmboxes.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:lib/chibios/os/common/oslib/src/chmboxes.c **** 
   4:lib/chibios/os/common/oslib/src/chmboxes.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/common/oslib/src/chmboxes.c **** 
   6:lib/chibios/os/common/oslib/src/chmboxes.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/common/oslib/src/chmboxes.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/common/oslib/src/chmboxes.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/common/oslib/src/chmboxes.c ****     (at your option) any later version.
  10:lib/chibios/os/common/oslib/src/chmboxes.c **** 
  11:lib/chibios/os/common/oslib/src/chmboxes.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/common/oslib/src/chmboxes.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/common/oslib/src/chmboxes.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/common/oslib/src/chmboxes.c ****     GNU General Public License for more details.
  15:lib/chibios/os/common/oslib/src/chmboxes.c **** 
  16:lib/chibios/os/common/oslib/src/chmboxes.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/common/oslib/src/chmboxes.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/common/oslib/src/chmboxes.c **** */
  19:lib/chibios/os/common/oslib/src/chmboxes.c **** 
  20:lib/chibios/os/common/oslib/src/chmboxes.c **** /**
  21:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @file    chmboxes.c
  22:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @brief   Mailboxes code.
  23:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
  24:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @addtogroup mailboxes
  25:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @details Asynchronous messages.
  26:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          <h2>Operation mode</h2>
  27:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          A mailbox is an asynchronous communication mechanism.<br>
  28:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          Operations defined for mailboxes:
  29:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          - <b>Post</b>: Posts a message on the mailbox in FIFO order.
  30:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          - <b>Post Ahead</b>: Posts a message on the mailbox with urgent
  31:lib/chibios/os/common/oslib/src/chmboxes.c ****  *            priority.
  32:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          - <b>Fetch</b>: A message is fetched from the mailbox and removed
  33:lib/chibios/os/common/oslib/src/chmboxes.c ****  *            from the queue.
  34:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          - <b>Reset</b>: The mailbox is emptied and all the stored messages
  35:lib/chibios/os/common/oslib/src/chmboxes.c ****  *            are lost.
  36:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          .
  37:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          A message is a variable of type msg_t that is guaranteed to have
  38:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          the same size of and be compatible with (data) pointers (anyway an
  39:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          explicit cast is needed).
  40:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          If larger messages need to be exchanged then a pointer to a
  41:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          structure can be posted in the mailbox but the posting side has
  42:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          no predefined way to know when the message has been processed. A
  43:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          possible approach is to allocate memory (from a memory pool for
  44:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          example) from the posting side and free it on the fetching side.
  45:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          Another approach is to set a "done" flag into the structure pointed
  46:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          by the message.
  47:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @pre     In order to use the mailboxes APIs the @p CH_CFG_USE_MAILBOXES
  48:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          option must be enabled in @p chconf.h.
  49:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @note    Compatible with RT and NIL.
  50:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @{
  51:lib/chibios/os/common/oslib/src/chmboxes.c ****  */
  52:lib/chibios/os/common/oslib/src/chmboxes.c **** 
  53:lib/chibios/os/common/oslib/src/chmboxes.c **** #include "ch.h"
  54:lib/chibios/os/common/oslib/src/chmboxes.c **** 
  55:lib/chibios/os/common/oslib/src/chmboxes.c **** #if (CH_CFG_USE_MAILBOXES == TRUE) || defined(__DOXYGEN__)
  56:lib/chibios/os/common/oslib/src/chmboxes.c **** 
  57:lib/chibios/os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  58:lib/chibios/os/common/oslib/src/chmboxes.c **** /* Module exported variables.                                                */
  59:lib/chibios/os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  60:lib/chibios/os/common/oslib/src/chmboxes.c **** 
  61:lib/chibios/os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  62:lib/chibios/os/common/oslib/src/chmboxes.c **** /* Module local types.                                                       */
  63:lib/chibios/os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  64:lib/chibios/os/common/oslib/src/chmboxes.c **** 
  65:lib/chibios/os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  66:lib/chibios/os/common/oslib/src/chmboxes.c **** /* Module local variables.                                                   */
  67:lib/chibios/os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  68:lib/chibios/os/common/oslib/src/chmboxes.c **** 
  69:lib/chibios/os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  70:lib/chibios/os/common/oslib/src/chmboxes.c **** /* Module local functions.                                                   */
  71:lib/chibios/os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  72:lib/chibios/os/common/oslib/src/chmboxes.c **** 
  73:lib/chibios/os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  74:lib/chibios/os/common/oslib/src/chmboxes.c **** /* Module exported functions.                                                */
  75:lib/chibios/os/common/oslib/src/chmboxes.c **** /*===========================================================================*/
  76:lib/chibios/os/common/oslib/src/chmboxes.c **** 
  77:lib/chibios/os/common/oslib/src/chmboxes.c **** /**
  78:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @brief   Initializes a @p mailbox_t object.
  79:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
  80:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[out] mbp      the pointer to the @p mailbox_t structure to be
  81:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      initialized
  82:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] buf       pointer to the messages buffer as an array of @p msg_t
  83:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] n         number of elements in the buffer array
  84:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
  85:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @init
  86:lib/chibios/os/common/oslib/src/chmboxes.c ****  */
  87:lib/chibios/os/common/oslib/src/chmboxes.c **** void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n) {
  26              		.loc 1 87 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  88:lib/chibios/os/common/oslib/src/chmboxes.c **** 
  89:lib/chibios/os/common/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (cnt_t)0));
  90:lib/chibios/os/common/oslib/src/chmboxes.c **** 
  91:lib/chibios/os/common/oslib/src/chmboxes.c ****   mbp->buffer = buf;
  92:lib/chibios/os/common/oslib/src/chmboxes.c ****   mbp->rdptr  = buf;
  93:lib/chibios/os/common/oslib/src/chmboxes.c ****   mbp->wrptr  = buf;
  94:lib/chibios/os/common/oslib/src/chmboxes.c ****   mbp->top    = &buf[n];
  95:lib/chibios/os/common/oslib/src/chmboxes.c ****   mbp->cnt    = (cnt_t)0;
  32              		.loc 1 95 0
  33 0000 0023     		movs	r3, #0
  34 0002 0361     		str	r3, [r0, #16]
  96:lib/chibios/os/common/oslib/src/chmboxes.c ****   mbp->reset  = false;
  35              		.loc 1 96 0
  36 0004 0375     		strb	r3, [r0, #20]
  97:lib/chibios/os/common/oslib/src/chmboxes.c ****   chThdQueueObjectInit(&mbp->qw);
  37              		.loc 1 97 0
  38 0006 00F11803 		add	r3, r0, #24
  39              	.LVL1:
  94:lib/chibios/os/common/oslib/src/chmboxes.c ****   mbp->cnt    = (cnt_t)0;
  40              		.loc 1 94 0
  41 000a 01EB8202 		add	r2, r1, r2, lsl #2
  42              	.LVL2:
  43              	.LBB74:
  44              	.LBB75:
  45              	.LBB76:
  46              		.file 2 "./lib/chibios/os/rt/include/chschd.h"
   1:./lib/chibios/os/rt/include/chschd.h **** /*
   2:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chschd.h **** 
   4:./lib/chibios/os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chschd.h **** 
   6:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chschd.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chschd.h **** 
  11:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chschd.h **** 
  16:./lib/chibios/os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chschd.h **** */
  19:./lib/chibios/os/rt/include/chschd.h **** 
  20:./lib/chibios/os/rt/include/chschd.h **** /**
  21:./lib/chibios/os/rt/include/chschd.h ****  * @file    chschd.h
  22:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:./lib/chibios/os/rt/include/chschd.h ****  *
  24:./lib/chibios/os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:./lib/chibios/os/rt/include/chschd.h ****  * @{
  26:./lib/chibios/os/rt/include/chschd.h ****  */
  27:./lib/chibios/os/rt/include/chschd.h **** 
  28:./lib/chibios/os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:./lib/chibios/os/rt/include/chschd.h **** #define CHSCHD_H
  30:./lib/chibios/os/rt/include/chschd.h **** 
  31:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chschd.h **** 
  35:./lib/chibios/os/rt/include/chschd.h **** /**
  36:./lib/chibios/os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:./lib/chibios/os/rt/include/chschd.h ****  * @{
  38:./lib/chibios/os/rt/include/chschd.h ****  */
  39:./lib/chibios/os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:./lib/chibios/os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  42:./lib/chibios/os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  44:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  45:./lib/chibios/os/rt/include/chschd.h **** 
  46:./lib/chibios/os/rt/include/chschd.h **** /**
  47:./lib/chibios/os/rt/include/chschd.h ****  * @name    Priority constants
  48:./lib/chibios/os/rt/include/chschd.h ****  * @{
  49:./lib/chibios/os/rt/include/chschd.h ****  */
  50:./lib/chibios/os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:./lib/chibios/os/rt/include/chschd.h ****                                                  priority.                  */
  52:./lib/chibios/os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:./lib/chibios/os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:./lib/chibios/os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:./lib/chibios/os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  57:./lib/chibios/os/rt/include/chschd.h **** 
  58:./lib/chibios/os/rt/include/chschd.h **** /**
  59:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread states
  60:./lib/chibios/os/rt/include/chschd.h ****  * @{
  61:./lib/chibios/os/rt/include/chschd.h ****  */
  62:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:./lib/chibios/os/rt/include/chschd.h ****                                                   ready list.               */
  64:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:./lib/chibios/os/rt/include/chschd.h ****                                                   in queue.                 */
  77:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:./lib/chibios/os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:./lib/chibios/os/rt/include/chschd.h ****                                                   message.                  */
  81:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:./lib/chibios/os/rt/include/chschd.h **** 
  83:./lib/chibios/os/rt/include/chschd.h **** /**
  84:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:./lib/chibios/os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:./lib/chibios/os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:./lib/chibios/os/rt/include/chschd.h ****  */
  88:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:./lib/chibios/os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:./lib/chibios/os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:./lib/chibios/os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  93:./lib/chibios/os/rt/include/chschd.h **** 
  94:./lib/chibios/os/rt/include/chschd.h **** /**
  95:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:./lib/chibios/os/rt/include/chschd.h ****  * @{
  97:./lib/chibios/os/rt/include/chschd.h ****  */
  98:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:./lib/chibios/os/rt/include/chschd.h ****                                                  mask.                      */
 100:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:./lib/chibios/os/rt/include/chschd.h ****                                                  flag.                      */
 107:./lib/chibios/os/rt/include/chschd.h **** /** @} */
 108:./lib/chibios/os/rt/include/chschd.h **** 
 109:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 110:./lib/chibios/os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 112:./lib/chibios/os/rt/include/chschd.h **** 
 113:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 114:./lib/chibios/os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 116:./lib/chibios/os/rt/include/chschd.h **** 
 117:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_ENTER_HOOK)
 118:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_ENTER_HOOK not defined in chconf.h"
 119:./lib/chibios/os/rt/include/chschd.h **** #endif
 120:./lib/chibios/os/rt/include/chschd.h **** 
 121:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LEAVE_HOOK)
 122:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LEAVE_HOOK not defined in chconf.h"
 123:./lib/chibios/os/rt/include/chschd.h **** #endif
 124:./lib/chibios/os/rt/include/chschd.h **** 
 125:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LOOP_HOOK)
 126:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LOOP_HOOK not defined in chconf.h"
 127:./lib/chibios/os/rt/include/chschd.h **** #endif
 128:./lib/chibios/os/rt/include/chschd.h **** 
 129:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 130:./lib/chibios/os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 131:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 132:./lib/chibios/os/rt/include/chschd.h **** 
 133:./lib/chibios/os/rt/include/chschd.h **** /**
 134:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 135:./lib/chibios/os/rt/include/chschd.h ****  */
 136:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_list {
 137:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 138:./lib/chibios/os/rt/include/chschd.h **** };
 139:./lib/chibios/os/rt/include/chschd.h **** 
 140:./lib/chibios/os/rt/include/chschd.h **** /**
 141:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 142:./lib/chibios/os/rt/include/chschd.h ****  */
 143:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_queue {
 144:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 145:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 146:./lib/chibios/os/rt/include/chschd.h **** };
 147:./lib/chibios/os/rt/include/chschd.h **** 
 148:./lib/chibios/os/rt/include/chschd.h **** /**
 149:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 150:./lib/chibios/os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 151:./lib/chibios/os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 152:./lib/chibios/os/rt/include/chschd.h ****  *          by shrinking this structure.
 153:./lib/chibios/os/rt/include/chschd.h ****  */
 154:./lib/chibios/os/rt/include/chschd.h **** struct ch_thread {
 155:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 156:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 157:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 158:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 159:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 160:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 161:./lib/chibios/os/rt/include/chschd.h **** #endif
 162:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 163:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 164:./lib/chibios/os/rt/include/chschd.h ****   /**
 165:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 166:./lib/chibios/os/rt/include/chschd.h ****    */
 167:./lib/chibios/os/rt/include/chschd.h ****   const char            *name;
 168:./lib/chibios/os/rt/include/chschd.h **** #endif
 169:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 170:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 171:./lib/chibios/os/rt/include/chschd.h ****   /**
 172:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Working area base address.
 173:./lib/chibios/os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 174:./lib/chibios/os/rt/include/chschd.h ****    *          dynamic threading.
 175:./lib/chibios/os/rt/include/chschd.h ****    */
 176:./lib/chibios/os/rt/include/chschd.h ****   stkalign_t            *wabase;
 177:./lib/chibios/os/rt/include/chschd.h **** #endif
 178:./lib/chibios/os/rt/include/chschd.h ****   /**
 179:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Current thread state.
 180:./lib/chibios/os/rt/include/chschd.h ****    */
 181:./lib/chibios/os/rt/include/chschd.h ****   tstate_t              state;
 182:./lib/chibios/os/rt/include/chschd.h ****   /**
 183:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Various thread flags.
 184:./lib/chibios/os/rt/include/chschd.h ****    */
 185:./lib/chibios/os/rt/include/chschd.h ****   tmode_t               flags;
 186:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 187:./lib/chibios/os/rt/include/chschd.h ****   /**
 188:./lib/chibios/os/rt/include/chschd.h ****    * @brief   References to this thread.
 189:./lib/chibios/os/rt/include/chschd.h ****    */
 190:./lib/chibios/os/rt/include/chschd.h ****   trefs_t               refs;
 191:./lib/chibios/os/rt/include/chschd.h **** #endif
 192:./lib/chibios/os/rt/include/chschd.h ****   /**
 193:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 194:./lib/chibios/os/rt/include/chschd.h ****    */
 195:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 196:./lib/chibios/os/rt/include/chschd.h ****   tslices_t             preempt;
 197:./lib/chibios/os/rt/include/chschd.h **** #endif
 198:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 199:./lib/chibios/os/rt/include/chschd.h ****   /**
 200:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 201:./lib/chibios/os/rt/include/chschd.h ****    * @note    This field can overflow.
 202:./lib/chibios/os/rt/include/chschd.h ****    */
 203:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    time;
 204:./lib/chibios/os/rt/include/chschd.h **** #endif
 205:./lib/chibios/os/rt/include/chschd.h ****   /**
 206:./lib/chibios/os/rt/include/chschd.h ****    * @brief   State-specific fields.
 207:./lib/chibios/os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 208:./lib/chibios/os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 209:./lib/chibios/os/rt/include/chschd.h ****    */
 210:./lib/chibios/os/rt/include/chschd.h ****   union {
 211:./lib/chibios/os/rt/include/chschd.h ****     /**
 212:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 213:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 214:./lib/chibios/os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 215:./lib/chibios/os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 216:./lib/chibios/os/rt/include/chschd.h ****      */
 217:./lib/chibios/os/rt/include/chschd.h ****     msg_t               rdymsg;
 218:./lib/chibios/os/rt/include/chschd.h ****     /**
 219:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread exit code.
 220:./lib/chibios/os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 221:./lib/chibios/os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 222:./lib/chibios/os/rt/include/chschd.h ****      *          this thread.
 223:./lib/chibios/os/rt/include/chschd.h ****      */
 224:./lib/chibios/os/rt/include/chschd.h ****     msg_t               exitcode;
 225:./lib/chibios/os/rt/include/chschd.h ****     /**
 226:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 227:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 228:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 229:./lib/chibios/os/rt/include/chschd.h ****      *          states.
 230:./lib/chibios/os/rt/include/chschd.h ****      */
 231:./lib/chibios/os/rt/include/chschd.h ****     void                *wtobjp;
 232:./lib/chibios/os/rt/include/chschd.h ****     /**
 233:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 234:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 235:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 236:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 237:./lib/chibios/os/rt/include/chschd.h ****      */
 238:./lib/chibios/os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 239:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 240:./lib/chibios/os/rt/include/chschd.h ****     /**
 241:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread sent message.
 242:./lib/chibios/os/rt/include/chschd.h ****      */
 243:./lib/chibios/os/rt/include/chschd.h ****     msg_t               sentmsg;
 244:./lib/chibios/os/rt/include/chschd.h **** #endif
 245:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 246:./lib/chibios/os/rt/include/chschd.h ****     /**
 247:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 248:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 249:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 250:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 251:./lib/chibios/os/rt/include/chschd.h ****      */
 252:./lib/chibios/os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 253:./lib/chibios/os/rt/include/chschd.h **** #endif
 254:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 255:./lib/chibios/os/rt/include/chschd.h ****     /**
 256:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 257:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 258:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 259:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 260:./lib/chibios/os/rt/include/chschd.h ****      */
 261:./lib/chibios/os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 262:./lib/chibios/os/rt/include/chschd.h **** #endif
 263:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 264:./lib/chibios/os/rt/include/chschd.h ****     /**
 265:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 266:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 267:./lib/chibios/os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 268:./lib/chibios/os/rt/include/chschd.h ****      */
 269:./lib/chibios/os/rt/include/chschd.h ****     eventmask_t         ewmask;
 270:./lib/chibios/os/rt/include/chschd.h **** #endif
 271:./lib/chibios/os/rt/include/chschd.h ****   }                     u;
 272:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 273:./lib/chibios/os/rt/include/chschd.h ****   /**
 274:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 275:./lib/chibios/os/rt/include/chschd.h ****    */
 276:./lib/chibios/os/rt/include/chschd.h ****   threads_list_t        waiting;
 277:./lib/chibios/os/rt/include/chschd.h **** #endif
 278:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chschd.h ****   /**
 280:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Messages queue.
 281:./lib/chibios/os/rt/include/chschd.h ****    */
 282:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 283:./lib/chibios/os/rt/include/chschd.h **** #endif
 284:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 285:./lib/chibios/os/rt/include/chschd.h ****   /**
 286:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pending events mask.
 287:./lib/chibios/os/rt/include/chschd.h ****    */
 288:./lib/chibios/os/rt/include/chschd.h ****   eventmask_t           epending;
 289:./lib/chibios/os/rt/include/chschd.h **** #endif
 290:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 291:./lib/chibios/os/rt/include/chschd.h ****   /**
 292:./lib/chibios/os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 293:./lib/chibios/os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 294:./lib/chibios/os/rt/include/chschd.h ****    */
 295:./lib/chibios/os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 296:./lib/chibios/os/rt/include/chschd.h ****   /**
 297:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 298:./lib/chibios/os/rt/include/chschd.h ****    */
 299:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               realprio;
 300:./lib/chibios/os/rt/include/chschd.h **** #endif
 301:./lib/chibios/os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 302:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 303:./lib/chibios/os/rt/include/chschd.h ****   /**
 304:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 305:./lib/chibios/os/rt/include/chschd.h ****    */
 306:./lib/chibios/os/rt/include/chschd.h ****   void                  *mpool;
 307:./lib/chibios/os/rt/include/chschd.h **** #endif
 308:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 309:./lib/chibios/os/rt/include/chschd.h ****   /**
 310:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread statistics.
 311:./lib/chibios/os/rt/include/chschd.h ****    */
 312:./lib/chibios/os/rt/include/chschd.h ****   time_measurement_t    stats;
 313:./lib/chibios/os/rt/include/chschd.h **** #endif
 314:./lib/chibios/os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 315:./lib/chibios/os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 316:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 317:./lib/chibios/os/rt/include/chschd.h **** #endif
 318:./lib/chibios/os/rt/include/chschd.h **** };
 319:./lib/chibios/os/rt/include/chschd.h **** 
 320:./lib/chibios/os/rt/include/chschd.h **** /**
 321:./lib/chibios/os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 322:./lib/chibios/os/rt/include/chschd.h ****  *
 323:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 324:./lib/chibios/os/rt/include/chschd.h ****  */
 325:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timer {
 326:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 327:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 328:./lib/chibios/os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Time delta before timeout.  */
 329:./lib/chibios/os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 330:./lib/chibios/os/rt/include/chschd.h ****                                                 pointer.                    */
 331:./lib/chibios/os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 332:./lib/chibios/os/rt/include/chschd.h ****                                                 parameter.                  */
 333:./lib/chibios/os/rt/include/chschd.h **** };
 334:./lib/chibios/os/rt/include/chschd.h **** 
 335:./lib/chibios/os/rt/include/chschd.h **** /**
 336:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 337:./lib/chibios/os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 338:./lib/chibios/os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 339:./lib/chibios/os/rt/include/chschd.h ****  *          timer is often used in the code.
 340:./lib/chibios/os/rt/include/chschd.h ****  */
 341:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 342:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 343:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 344:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 345:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 346:./lib/chibios/os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Must be initialized to -1.  */
 347:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 348:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 349:./lib/chibios/os/rt/include/chschd.h **** #endif
 350:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 351:./lib/chibios/os/rt/include/chschd.h ****   /**
 352:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 353:./lib/chibios/os/rt/include/chschd.h ****    */
 354:./lib/chibios/os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 355:./lib/chibios/os/rt/include/chschd.h ****                                                 tick event.                 */
 356:./lib/chibios/os/rt/include/chschd.h **** #endif
 357:./lib/chibios/os/rt/include/chschd.h **** };
 358:./lib/chibios/os/rt/include/chschd.h **** 
 359:./lib/chibios/os/rt/include/chschd.h **** /**
 360:./lib/chibios/os/rt/include/chschd.h ****  * @extends threads_queue_t
 361:./lib/chibios/os/rt/include/chschd.h ****  */
 362:./lib/chibios/os/rt/include/chschd.h **** struct ch_ready_list {
 363:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 364:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 365:./lib/chibios/os/rt/include/chschd.h ****                                                 initialized to zero.        */
 366:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 367:./lib/chibios/os/rt/include/chschd.h ****                                                 offsets.                    */
 368:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 369:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 370:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 371:./lib/chibios/os/rt/include/chschd.h **** #endif
 372:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 373:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 374:./lib/chibios/os/rt/include/chschd.h ****                                                 thread.                     */
 375:./lib/chibios/os/rt/include/chschd.h **** };
 376:./lib/chibios/os/rt/include/chschd.h **** 
 377:./lib/chibios/os/rt/include/chschd.h **** /**
 378:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System debug data structure.
 379:./lib/chibios/os/rt/include/chschd.h ****  */
 380:./lib/chibios/os/rt/include/chschd.h **** struct ch_system_debug {
 381:./lib/chibios/os/rt/include/chschd.h ****   /**
 382:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 383:./lib/chibios/os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 384:./lib/chibios/os/rt/include/chschd.h ****    *          written once and then the system is halted.
 385:./lib/chibios/os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 386:./lib/chibios/os/rt/include/chschd.h ****    *          field itself is declared volatile.
 387:./lib/chibios/os/rt/include/chschd.h ****    */
 388:./lib/chibios/os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 389:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 390:./lib/chibios/os/rt/include/chschd.h ****   /**
 391:./lib/chibios/os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 392:./lib/chibios/os/rt/include/chschd.h ****    */
 393:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 394:./lib/chibios/os/rt/include/chschd.h ****   /**
 395:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 396:./lib/chibios/os/rt/include/chschd.h ****    */
 397:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 398:./lib/chibios/os/rt/include/chschd.h **** #endif
 399:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 400:./lib/chibios/os/rt/include/chschd.h ****   /**
 401:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 402:./lib/chibios/os/rt/include/chschd.h ****    */
 403:./lib/chibios/os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 404:./lib/chibios/os/rt/include/chschd.h **** #endif
 405:./lib/chibios/os/rt/include/chschd.h **** };
 406:./lib/chibios/os/rt/include/chschd.h **** 
 407:./lib/chibios/os/rt/include/chschd.h **** /**
 408:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System data structure.
 409:./lib/chibios/os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 410:./lib/chibios/os/rt/include/chschd.h ****  *          stacks.
 411:./lib/chibios/os/rt/include/chschd.h ****  */
 412:./lib/chibios/os/rt/include/chschd.h **** struct ch_system {
 413:./lib/chibios/os/rt/include/chschd.h ****   /**
 414:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Ready list header.
 415:./lib/chibios/os/rt/include/chschd.h ****    */
 416:./lib/chibios/os/rt/include/chschd.h ****   ready_list_t          rlist;
 417:./lib/chibios/os/rt/include/chschd.h ****   /**
 418:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 419:./lib/chibios/os/rt/include/chschd.h ****    */
 420:./lib/chibios/os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 421:./lib/chibios/os/rt/include/chschd.h ****   /**
 422:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System debug.
 423:./lib/chibios/os/rt/include/chschd.h ****    */
 424:./lib/chibios/os/rt/include/chschd.h ****   system_debug_t        dbg;
 425:./lib/chibios/os/rt/include/chschd.h ****   /**
 426:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 427:./lib/chibios/os/rt/include/chschd.h ****    */
 428:./lib/chibios/os/rt/include/chschd.h ****   thread_t              mainthread;
 429:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 430:./lib/chibios/os/rt/include/chschd.h ****   /**
 431:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 432:./lib/chibios/os/rt/include/chschd.h ****    */
 433:./lib/chibios/os/rt/include/chschd.h ****   tm_calibration_t      tm;
 434:./lib/chibios/os/rt/include/chschd.h **** #endif
 435:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 436:./lib/chibios/os/rt/include/chschd.h ****   /**
 437:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 438:./lib/chibios/os/rt/include/chschd.h ****    */
 439:./lib/chibios/os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 440:./lib/chibios/os/rt/include/chschd.h **** #endif
 441:./lib/chibios/os/rt/include/chschd.h **** };
 442:./lib/chibios/os/rt/include/chschd.h **** 
 443:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 444:./lib/chibios/os/rt/include/chschd.h **** /* Module macros.                                                            */
 445:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 446:./lib/chibios/os/rt/include/chschd.h **** 
 447:./lib/chibios/os/rt/include/chschd.h **** /**
 448:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 449:./lib/chibios/os/rt/include/chschd.h ****  *
 450:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 451:./lib/chibios/os/rt/include/chschd.h ****  */
 452:./lib/chibios/os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 453:./lib/chibios/os/rt/include/chschd.h **** 
 454:./lib/chibios/os/rt/include/chschd.h **** /**
 455:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 456:./lib/chibios/os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 457:./lib/chibios/os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 458:./lib/chibios/os/rt/include/chschd.h ****  */
 459:./lib/chibios/os/rt/include/chschd.h **** #define currp ch.rlist.current
 460:./lib/chibios/os/rt/include/chschd.h **** 
 461:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 462:./lib/chibios/os/rt/include/chschd.h **** /* External declarations.                                                    */
 463:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 464:./lib/chibios/os/rt/include/chschd.h **** 
 465:./lib/chibios/os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 466:./lib/chibios/os/rt/include/chschd.h **** extern ch_system_t ch;
 467:./lib/chibios/os/rt/include/chschd.h **** #endif
 468:./lib/chibios/os/rt/include/chschd.h **** 
 469:./lib/chibios/os/rt/include/chschd.h **** /*
 470:./lib/chibios/os/rt/include/chschd.h ****  * Scheduler APIs.
 471:./lib/chibios/os/rt/include/chschd.h ****  */
 472:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 473:./lib/chibios/os/rt/include/chschd.h **** extern "C" {
 474:./lib/chibios/os/rt/include/chschd.h **** #endif
 475:./lib/chibios/os/rt/include/chschd.h ****   void _scheduler_init(void);
 476:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 477:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 478:./lib/chibios/os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 479:./lib/chibios/os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time);
 480:./lib/chibios/os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 481:./lib/chibios/os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 482:./lib/chibios/os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 483:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 484:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 485:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 486:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 487:./lib/chibios/os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 488:./lib/chibios/os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 489:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 490:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 491:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 492:./lib/chibios/os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 493:./lib/chibios/os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 494:./lib/chibios/os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 495:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 496:./lib/chibios/os/rt/include/chschd.h **** }
 497:./lib/chibios/os/rt/include/chschd.h **** #endif
 498:./lib/chibios/os/rt/include/chschd.h **** 
 499:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 500:./lib/chibios/os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 501:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 502:./lib/chibios/os/rt/include/chschd.h **** 
 503:./lib/chibios/os/rt/include/chschd.h **** /**
 504:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 505:./lib/chibios/os/rt/include/chschd.h ****  *
 506:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 507:./lib/chibios/os/rt/include/chschd.h ****  *
 508:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 509:./lib/chibios/os/rt/include/chschd.h ****  */
 510:./lib/chibios/os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 511:./lib/chibios/os/rt/include/chschd.h **** 
 512:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 513:./lib/chibios/os/rt/include/chschd.h **** }
 514:./lib/chibios/os/rt/include/chschd.h **** 
 515:./lib/chibios/os/rt/include/chschd.h **** /**
 516:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 517:./lib/chibios/os/rt/include/chschd.h ****  *
 518:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 519:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 520:./lib/chibios/os/rt/include/chschd.h ****  *
 521:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 522:./lib/chibios/os/rt/include/chschd.h ****  */
 523:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 524:./lib/chibios/os/rt/include/chschd.h **** 
 525:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 526:./lib/chibios/os/rt/include/chschd.h **** }
 527:./lib/chibios/os/rt/include/chschd.h **** 
 528:./lib/chibios/os/rt/include/chschd.h **** /**
 529:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 530:./lib/chibios/os/rt/include/chschd.h ****  *
 531:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 532:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 533:./lib/chibios/os/rt/include/chschd.h ****  *
 534:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 535:./lib/chibios/os/rt/include/chschd.h ****  */
 536:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 537:./lib/chibios/os/rt/include/chschd.h **** 
 538:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 539:./lib/chibios/os/rt/include/chschd.h **** }
 540:./lib/chibios/os/rt/include/chschd.h **** 
 541:./lib/chibios/os/rt/include/chschd.h **** /**
 542:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 543:./lib/chibios/os/rt/include/chschd.h ****  *
 544:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 545:./lib/chibios/os/rt/include/chschd.h ****  *
 546:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 547:./lib/chibios/os/rt/include/chschd.h ****  */
 548:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 549:./lib/chibios/os/rt/include/chschd.h **** 
 550:./lib/chibios/os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
 551:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  47              		.loc 2 551 0
  48 000e C0E90633 		strd	r3, r3, [r0, #24]
  49              	.LVL3:
  50              	.LBE76:
  51              	.LBE75:
  52              	.LBE74:
  98:lib/chibios/os/common/oslib/src/chmboxes.c ****   chThdQueueObjectInit(&mbp->qr);
  53              		.loc 1 98 0
  54 0012 00F12003 		add	r3, r0, #32
  55              	.LVL4:
  91:lib/chibios/os/common/oslib/src/chmboxes.c ****   mbp->rdptr  = buf;
  56              		.loc 1 91 0
  57 0016 0160     		str	r1, [r0]
  93:lib/chibios/os/common/oslib/src/chmboxes.c ****   mbp->top    = &buf[n];
  58              		.loc 1 93 0
  59 0018 C0E90211 		strd	r1, r1, [r0, #8]
  94:lib/chibios/os/common/oslib/src/chmboxes.c ****   mbp->cnt    = (cnt_t)0;
  60              		.loc 1 94 0
  61 001c 4260     		str	r2, [r0, #4]
  62              	.LBB77:
  63              	.LBB78:
  64              	.LBB79:
  65              		.loc 2 551 0
  66 001e C0E90833 		strd	r3, r3, [r0, #32]
  67              	.LVL5:
  68              	.LBE79:
  69              	.LBE78:
  70              	.LBE77:
  99:lib/chibios/os/common/oslib/src/chmboxes.c **** }
  71              		.loc 1 99 0
  72 0022 7047     		bx	lr
  73              		.cfi_endproc
  74              	.LFE248:
  76              		.section	.text.chMBResetI,"ax",%progbits
  77              		.align	1
  78              		.global	chMBResetI
  79              		.syntax unified
  80              		.thumb
  81              		.thumb_func
  82              		.fpu softvfp
  84              	chMBResetI:
  85              	.LFB250:
 100:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 101:lib/chibios/os/common/oslib/src/chmboxes.c **** /**
 102:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @brief   Resets a @p mailbox_t object.
 103:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @details All the waiting threads are resumed with status @p MSG_RESET and
 104:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          the queued messages are lost.
 105:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @post    The mailbox is in reset state, all operations will fail and
 106:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          return @p MSG reset until the mailbox is enabled again using
 107:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          @p chMBResumeX().
 108:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 109:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 110:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 111:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @api
 112:lib/chibios/os/common/oslib/src/chmboxes.c ****  */
 113:lib/chibios/os/common/oslib/src/chmboxes.c **** void chMBReset(mailbox_t *mbp) {
 114:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 115:lib/chibios/os/common/oslib/src/chmboxes.c ****   chSysLock();
 116:lib/chibios/os/common/oslib/src/chmboxes.c ****   chMBResetI(mbp);
 117:lib/chibios/os/common/oslib/src/chmboxes.c ****   chSchRescheduleS();
 118:lib/chibios/os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 119:lib/chibios/os/common/oslib/src/chmboxes.c **** }
 120:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 121:lib/chibios/os/common/oslib/src/chmboxes.c **** /**
 122:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @brief   Resets a @p mailbox_t object.
 123:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @details All the waiting threads are resumed with status @p MSG_RESET and
 124:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          the queued messages are lost.
 125:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @post    The mailbox is in reset state, all operations will fail and
 126:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          return @p MSG reset until the mailbox is enabled again using
 127:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          @p chMBResumeX().
 128:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 129:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 130:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 131:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @api
 132:lib/chibios/os/common/oslib/src/chmboxes.c ****  */
 133:lib/chibios/os/common/oslib/src/chmboxes.c **** void chMBResetI(mailbox_t *mbp) {
  86              		.loc 1 133 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              	.LVL6:
  91 0000 10B5     		push	{r4, lr}
  92              		.cfi_def_cfa_offset 8
  93              		.cfi_offset 4, -8
  94              		.cfi_offset 14, -4
 134:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 135:lib/chibios/os/common/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 136:lib/chibios/os/common/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 137:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 138:lib/chibios/os/common/oslib/src/chmboxes.c ****   mbp->wrptr = mbp->buffer;
  95              		.loc 1 138 0
  96 0002 0368     		ldr	r3, [r0]
 139:lib/chibios/os/common/oslib/src/chmboxes.c ****   mbp->rdptr = mbp->buffer;
  97              		.loc 1 139 0
  98 0004 C0E90233 		strd	r3, r3, [r0, #8]
 140:lib/chibios/os/common/oslib/src/chmboxes.c ****   mbp->cnt   = (cnt_t)0;
  99              		.loc 1 140 0
 100 0008 0023     		movs	r3, #0
 101 000a 0361     		str	r3, [r0, #16]
 141:lib/chibios/os/common/oslib/src/chmboxes.c ****   mbp->reset = true;
 102              		.loc 1 141 0
 103 000c 0123     		movs	r3, #1
 133:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 104              		.loc 1 133 0
 105 000e 0446     		mov	r4, r0
 106              		.loc 1 141 0
 107 0010 0375     		strb	r3, [r0, #20]
 142:lib/chibios/os/common/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qw, MSG_RESET);
 108              		.loc 1 142 0
 109 0012 6FF00101 		mvn	r1, #1
 110 0016 1830     		adds	r0, r0, #24
 111              	.LVL7:
 112 0018 FFF7FEFF 		bl	chThdDequeueAllI
 113              	.LVL8:
 143:lib/chibios/os/common/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qr, MSG_RESET);
 114              		.loc 1 143 0
 115 001c 04F12000 		add	r0, r4, #32
 116 0020 6FF00101 		mvn	r1, #1
 144:lib/chibios/os/common/oslib/src/chmboxes.c **** }
 117              		.loc 1 144 0
 118 0024 BDE81040 		pop	{r4, lr}
 119              		.cfi_restore 14
 120              		.cfi_restore 4
 121              		.cfi_def_cfa_offset 0
 122              	.LVL9:
 143:lib/chibios/os/common/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qr, MSG_RESET);
 123              		.loc 1 143 0
 124 0028 FFF7FEBF 		b	chThdDequeueAllI
 125              	.LVL10:
 126              		.cfi_endproc
 127              	.LFE250:
 129              		.section	.text.chMBReset,"ax",%progbits
 130              		.align	1
 131              		.global	chMBReset
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 135              		.fpu softvfp
 137              	chMBReset:
 138              	.LFB249:
 113:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 139              		.loc 1 113 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              	.LVL11:
 144 0000 08B5     		push	{r3, lr}
 145              		.cfi_def_cfa_offset 8
 146              		.cfi_offset 3, -8
 147              		.cfi_offset 14, -4
 148              	.LBB80:
 149              	.LBB81:
 150              	.LBB82:
 151              	.LBB83:
 152              		.file 3 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @version  V4.30
   5:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
   9:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    All rights reserved.
  10:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      specific prior written permission.
  20:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    *
  21:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  35:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  38:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #endif
  45:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  46:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  47:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   @{
  51:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  52:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  53:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  54:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  58:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  60:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  62:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  63:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  64:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  65:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  69:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  71:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  73:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  74:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  75:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  76:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Control Register value
  79:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  80:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  82:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
  83:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  84:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
  86:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  87:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  88:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  89:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  90:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  94:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  96:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  98:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  99:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 100:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 101:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 105:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 107:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 108:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 109:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 111:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 112:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 113:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 114:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 115:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               APSR Register value
 118:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 119:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 121:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 122:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 123:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 125:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 126:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 127:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 128:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 129:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 132:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 134:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 136:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 137:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 138:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 140:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 141:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 142:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 143:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 144:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               PSP Register value
 147:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 148:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 150:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 151:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 154:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 155:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 156:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 157:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 158:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 162:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 164:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 166:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 167:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 168:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 169:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               MSP Register value
 172:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 173:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 175:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 176:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 177:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 179:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 180:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 181:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 182:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 183:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 188:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 190:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 192:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 193:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 194:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 195:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 199:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 201:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 202:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 203:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 205:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 206:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 207:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 208:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 209:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 213:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 215:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 217:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 218:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 219:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 221:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 222:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 226:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 228:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 230:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 231:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 232:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 233:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 237:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 239:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 241:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 243:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 244:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 248:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 250:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 251:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 252:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 254:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 255:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 257:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 153              		.loc 3 264 0
 154 0002 2023     		movs	r3, #32
 155              		.syntax unified
 156              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 157 0004 83F31188 		MSR basepri, r3
 158              	@ 0 "" 2
 159              	.LVL12:
 160              		.thumb
 161              		.syntax unified
 162              	.LBE83:
 163              	.LBE82:
 164              	.LBE81:
 165              	.LBE80:
 116:lib/chibios/os/common/oslib/src/chmboxes.c ****   chSchRescheduleS();
 166              		.loc 1 116 0
 167 0008 FFF7FEFF 		bl	chMBResetI
 168              	.LVL13:
 117:lib/chibios/os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 169              		.loc 1 117 0
 170 000c FFF7FEFF 		bl	chSchRescheduleS
 171              	.LVL14:
 172              	.LBB84:
 173              	.LBB85:
 174              	.LBB86:
 175              	.LBB87:
 176              	.LBB88:
 177              		.loc 3 264 0
 178 0010 0023     		movs	r3, #0
 179              		.syntax unified
 180              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 181 0012 83F31188 		MSR basepri, r3
 182              	@ 0 "" 2
 183              	.LVL15:
 184              		.thumb
 185              		.syntax unified
 186              	.LBE88:
 187              	.LBE87:
 188              	.LBE86:
 189              	.LBE85:
 190              	.LBE84:
 119:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 191              		.loc 1 119 0
 192 0016 08BD     		pop	{r3, pc}
 193              		.cfi_endproc
 194              	.LFE249:
 196              		.section	.text.chMBPostS,"ax",%progbits
 197              		.align	1
 198              		.global	chMBPostS
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu softvfp
 204              	chMBPostS:
 205              	.LFB252:
 145:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 146:lib/chibios/os/common/oslib/src/chmboxes.c **** /**
 147:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 148:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 149:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 150:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 151:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 152:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 153:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 154:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 155:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 156:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 157:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      .
 158:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 159:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 160:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 161:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 162:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 163:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @api
 164:lib/chibios/os/common/oslib/src/chmboxes.c ****  */
 165:lib/chibios/os/common/oslib/src/chmboxes.c **** msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 166:lib/chibios/os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 167:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 168:lib/chibios/os/common/oslib/src/chmboxes.c ****   chSysLock();
 169:lib/chibios/os/common/oslib/src/chmboxes.c ****   rdymsg = chMBPostS(mbp, msg, timeout);
 170:lib/chibios/os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 171:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 172:lib/chibios/os/common/oslib/src/chmboxes.c ****   return rdymsg;
 173:lib/chibios/os/common/oslib/src/chmboxes.c **** }
 174:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 175:lib/chibios/os/common/oslib/src/chmboxes.c **** /**
 176:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 177:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 178:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 179:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 180:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 181:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 182:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 183:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 184:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 185:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 186:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      .
 187:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 188:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 189:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 190:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 191:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 192:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @sclass
 193:lib/chibios/os/common/oslib/src/chmboxes.c ****  */
 194:lib/chibios/os/common/oslib/src/chmboxes.c **** msg_t chMBPostS(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 206              		.loc 1 194 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210              	.LVL16:
 211 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 212              		.cfi_def_cfa_offset 24
 213              		.cfi_offset 3, -24
 214              		.cfi_offset 4, -20
 215              		.cfi_offset 5, -16
 216              		.cfi_offset 6, -12
 217              		.cfi_offset 7, -8
 218              		.cfi_offset 14, -4
 219              		.loc 1 194 0
 220 0002 0446     		mov	r4, r0
 221 0004 0D46     		mov	r5, r1
 222 0006 1746     		mov	r7, r2
 195:lib/chibios/os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 196:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 197:lib/chibios/os/common/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 198:lib/chibios/os/common/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 199:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 200:lib/chibios/os/common/oslib/src/chmboxes.c ****   do {
 201:lib/chibios/os/common/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 202:lib/chibios/os/common/oslib/src/chmboxes.c ****     if (mbp->reset) {
 203:lib/chibios/os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 204:lib/chibios/os/common/oslib/src/chmboxes.c ****     }
 205:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 206:lib/chibios/os/common/oslib/src/chmboxes.c ****     /* Is there a free message slot in queue? if so then post.*/
 207:lib/chibios/os/common/oslib/src/chmboxes.c ****     if (chMBGetFreeCountI(mbp) > (cnt_t)0) {
 208:lib/chibios/os/common/oslib/src/chmboxes.c ****       *mbp->wrptr++ = msg;
 209:lib/chibios/os/common/oslib/src/chmboxes.c ****       if (mbp->wrptr >= mbp->top) {
 210:lib/chibios/os/common/oslib/src/chmboxes.c ****         mbp->wrptr = mbp->buffer;
 211:lib/chibios/os/common/oslib/src/chmboxes.c ****       }
 212:lib/chibios/os/common/oslib/src/chmboxes.c ****       mbp->cnt++;
 213:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 214:lib/chibios/os/common/oslib/src/chmboxes.c ****       /* If there is a reader waiting then makes it ready.*/
 215:lib/chibios/os/common/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qr, MSG_OK);
 216:lib/chibios/os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 217:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 218:lib/chibios/os/common/oslib/src/chmboxes.c ****       return MSG_OK;
 219:lib/chibios/os/common/oslib/src/chmboxes.c ****     }
 220:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 221:lib/chibios/os/common/oslib/src/chmboxes.c ****     /* No space in the queue, waiting for a slot to become available.*/
 222:lib/chibios/os/common/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 223              		.loc 1 222 0
 224 0008 00F11806 		add	r6, r0, #24
 225              	.LVL17:
 226              	.L8:
 202:lib/chibios/os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 227              		.loc 1 202 0
 228 000c 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 229 000e 0BBB     		cbnz	r3, .L9
 230              	.LVL18:
 231              	.LBB95:
 232              	.LBB96:
 233              	.LBB97:
 234              	.LBB98:
 235              		.file 4 "./lib/chibios/os/common/oslib/include/chmboxes.h"
   1:./lib/chibios/os/common/oslib/include/chmboxes.h **** /*
   2:./lib/chibios/os/common/oslib/include/chmboxes.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
   4:./lib/chibios/os/common/oslib/include/chmboxes.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
   6:./lib/chibios/os/common/oslib/include/chmboxes.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/oslib/include/chmboxes.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/oslib/include/chmboxes.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/oslib/include/chmboxes.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
  11:./lib/chibios/os/common/oslib/include/chmboxes.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/oslib/include/chmboxes.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/oslib/include/chmboxes.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/oslib/include/chmboxes.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
  16:./lib/chibios/os/common/oslib/include/chmboxes.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/oslib/include/chmboxes.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/oslib/include/chmboxes.h **** */
  19:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
  20:./lib/chibios/os/common/oslib/include/chmboxes.h **** /**
  21:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @file    chmboxes.h
  22:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @brief   Mailboxes macros and structures.
  23:./lib/chibios/os/common/oslib/include/chmboxes.h ****  *
  24:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @addtogroup mailboxes
  25:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @{
  26:./lib/chibios/os/common/oslib/include/chmboxes.h ****  */
  27:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
  28:./lib/chibios/os/common/oslib/include/chmboxes.h **** #ifndef CHMBOXES_H
  29:./lib/chibios/os/common/oslib/include/chmboxes.h **** #define CHMBOXES_H
  30:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
  31:./lib/chibios/os/common/oslib/include/chmboxes.h **** #if (CH_CFG_USE_MAILBOXES == TRUE) || defined(__DOXYGEN__)
  32:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
  33:./lib/chibios/os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/oslib/include/chmboxes.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  36:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
  37:./lib/chibios/os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  38:./lib/chibios/os/common/oslib/include/chmboxes.h **** /* Module pre-compile time settings.                                         */
  39:./lib/chibios/os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  40:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
  41:./lib/chibios/os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  42:./lib/chibios/os/common/oslib/include/chmboxes.h **** /* Derived constants and error checks.                                       */
  43:./lib/chibios/os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  44:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
  45:./lib/chibios/os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  46:./lib/chibios/os/common/oslib/include/chmboxes.h **** /* Module data structures and types.                                         */
  47:./lib/chibios/os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  48:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
  49:./lib/chibios/os/common/oslib/include/chmboxes.h **** /**
  50:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @brief   Structure representing a mailbox object.
  51:./lib/chibios/os/common/oslib/include/chmboxes.h ****  */
  52:./lib/chibios/os/common/oslib/include/chmboxes.h **** typedef struct {
  53:./lib/chibios/os/common/oslib/include/chmboxes.h ****   msg_t                 *buffer;        /**< @brief Pointer to the mailbox
  54:./lib/chibios/os/common/oslib/include/chmboxes.h ****                                                     buffer.                 */
  55:./lib/chibios/os/common/oslib/include/chmboxes.h ****   msg_t                 *top;           /**< @brief Pointer to the location
  56:./lib/chibios/os/common/oslib/include/chmboxes.h ****                                                     after the buffer.       */
  57:./lib/chibios/os/common/oslib/include/chmboxes.h ****   msg_t                 *wrptr;         /**< @brief Write pointer.          */
  58:./lib/chibios/os/common/oslib/include/chmboxes.h ****   msg_t                 *rdptr;         /**< @brief Read pointer.           */
  59:./lib/chibios/os/common/oslib/include/chmboxes.h ****   cnt_t                 cnt;            /**< @brief Messages in queue.      */
  60:./lib/chibios/os/common/oslib/include/chmboxes.h ****   bool                  reset;          /**< @brief True in reset state.    */
  61:./lib/chibios/os/common/oslib/include/chmboxes.h ****   threads_queue_t       qw;             /**< @brief Queued writers.         */
  62:./lib/chibios/os/common/oslib/include/chmboxes.h ****   threads_queue_t       qr;             /**< @brief Queued readers.         */
  63:./lib/chibios/os/common/oslib/include/chmboxes.h **** } mailbox_t;
  64:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
  65:./lib/chibios/os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  66:./lib/chibios/os/common/oslib/include/chmboxes.h **** /* Module macros.                                                            */
  67:./lib/chibios/os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
  68:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
  69:./lib/chibios/os/common/oslib/include/chmboxes.h **** /**
  70:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @brief   Data part of a static mailbox initializer.
  71:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @details This macro should be used when statically initializing a
  72:./lib/chibios/os/common/oslib/include/chmboxes.h ****  *          mailbox that is part of a bigger structure.
  73:./lib/chibios/os/common/oslib/include/chmboxes.h ****  *
  74:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @param[in] name      the name of the mailbox variable
  75:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @param[in] buffer    pointer to the mailbox buffer array of @p msg_t
  76:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @param[in] size      number of @p msg_t elements in the buffer array
  77:./lib/chibios/os/common/oslib/include/chmboxes.h ****  */
  78:./lib/chibios/os/common/oslib/include/chmboxes.h **** #define _MAILBOX_DATA(name, buffer, size) {                                 \
  79:./lib/chibios/os/common/oslib/include/chmboxes.h ****   (msg_t *)(buffer),                                                        \
  80:./lib/chibios/os/common/oslib/include/chmboxes.h ****   (msg_t *)(buffer) + size,                                                 \
  81:./lib/chibios/os/common/oslib/include/chmboxes.h ****   (msg_t *)(buffer),                                                        \
  82:./lib/chibios/os/common/oslib/include/chmboxes.h ****   (msg_t *)(buffer),                                                        \
  83:./lib/chibios/os/common/oslib/include/chmboxes.h ****   (cnt_t)0,                                                                 \
  84:./lib/chibios/os/common/oslib/include/chmboxes.h ****   false,                                                                    \
  85:./lib/chibios/os/common/oslib/include/chmboxes.h ****   _THREADS_QUEUE_DATA(name.qw),                                             \
  86:./lib/chibios/os/common/oslib/include/chmboxes.h ****   _THREADS_QUEUE_DATA(name.qr),                                             \
  87:./lib/chibios/os/common/oslib/include/chmboxes.h **** }
  88:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
  89:./lib/chibios/os/common/oslib/include/chmboxes.h **** /**
  90:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @brief   Static mailbox initializer.
  91:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @details Statically initialized mailboxes require no explicit
  92:./lib/chibios/os/common/oslib/include/chmboxes.h ****  *          initialization using @p chMBObjectInit().
  93:./lib/chibios/os/common/oslib/include/chmboxes.h ****  *
  94:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @param[in] name      the name of the mailbox variable
  95:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @param[in] buffer    pointer to the mailbox buffer array of @p msg_t
  96:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @param[in] size      number of @p msg_t elements in the buffer array
  97:./lib/chibios/os/common/oslib/include/chmboxes.h ****  */
  98:./lib/chibios/os/common/oslib/include/chmboxes.h **** #define MAILBOX_DECL(name, buffer, size)                                    \
  99:./lib/chibios/os/common/oslib/include/chmboxes.h ****   mailbox_t name = _MAILBOX_DATA(name, buffer, size)
 100:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
 101:./lib/chibios/os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
 102:./lib/chibios/os/common/oslib/include/chmboxes.h **** /* External declarations.                                                    */
 103:./lib/chibios/os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
 104:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
 105:./lib/chibios/os/common/oslib/include/chmboxes.h **** #ifdef __cplusplus
 106:./lib/chibios/os/common/oslib/include/chmboxes.h **** extern "C" {
 107:./lib/chibios/os/common/oslib/include/chmboxes.h **** #endif
 108:./lib/chibios/os/common/oslib/include/chmboxes.h ****   void chMBObjectInit(mailbox_t *mbp, msg_t *buf, cnt_t n);
 109:./lib/chibios/os/common/oslib/include/chmboxes.h ****   void chMBReset(mailbox_t *mbp);
 110:./lib/chibios/os/common/oslib/include/chmboxes.h ****   void chMBResetI(mailbox_t *mbp);
 111:./lib/chibios/os/common/oslib/include/chmboxes.h ****   msg_t chMBPost(mailbox_t *mbp, msg_t msg, systime_t timeout);
 112:./lib/chibios/os/common/oslib/include/chmboxes.h ****   msg_t chMBPostS(mailbox_t *mbp, msg_t msg, systime_t timeout);
 113:./lib/chibios/os/common/oslib/include/chmboxes.h ****   msg_t chMBPostI(mailbox_t *mbp, msg_t msg);
 114:./lib/chibios/os/common/oslib/include/chmboxes.h ****   msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t timeout);
 115:./lib/chibios/os/common/oslib/include/chmboxes.h ****   msg_t chMBPostAheadS(mailbox_t *mbp, msg_t msg, systime_t timeout);
 116:./lib/chibios/os/common/oslib/include/chmboxes.h ****   msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg);
 117:./lib/chibios/os/common/oslib/include/chmboxes.h ****   msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t timeout);
 118:./lib/chibios/os/common/oslib/include/chmboxes.h ****   msg_t chMBFetchS(mailbox_t *mbp, msg_t *msgp, systime_t timeout);
 119:./lib/chibios/os/common/oslib/include/chmboxes.h ****   msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp);
 120:./lib/chibios/os/common/oslib/include/chmboxes.h **** #ifdef __cplusplus
 121:./lib/chibios/os/common/oslib/include/chmboxes.h **** }
 122:./lib/chibios/os/common/oslib/include/chmboxes.h **** #endif
 123:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
 124:./lib/chibios/os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
 125:./lib/chibios/os/common/oslib/include/chmboxes.h **** /* Module inline functions.                                                  */
 126:./lib/chibios/os/common/oslib/include/chmboxes.h **** /*===========================================================================*/
 127:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
 128:./lib/chibios/os/common/oslib/include/chmboxes.h **** /**
 129:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @brief   Returns the mailbox buffer size as number of messages.
 130:./lib/chibios/os/common/oslib/include/chmboxes.h ****  *
 131:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @param[in] mbp       the pointer to an initialized mailbox_t object
 132:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @return              The size of the mailbox.
 133:./lib/chibios/os/common/oslib/include/chmboxes.h ****  *
 134:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @iclass
 135:./lib/chibios/os/common/oslib/include/chmboxes.h ****  */
 136:./lib/chibios/os/common/oslib/include/chmboxes.h **** static inline cnt_t chMBGetSizeI(const mailbox_t *mbp) {
 137:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
 138:./lib/chibios/os/common/oslib/include/chmboxes.h ****   /*lint -save -e9033 [10.8] Perfectly safe pointers
 139:./lib/chibios/os/common/oslib/include/chmboxes.h ****     arithmetic.*/
 140:./lib/chibios/os/common/oslib/include/chmboxes.h ****   return (cnt_t)(mbp->top - mbp->buffer);
 236              		.loc 4 140 0
 237 0010 D4E90010 		ldrd	r1, r0, [r4]
 238              	.LVL19:
 239              	.LBE98:
 240              	.LBE97:
 141:./lib/chibios/os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 142:./lib/chibios/os/common/oslib/include/chmboxes.h **** }
 143:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
 144:./lib/chibios/os/common/oslib/include/chmboxes.h **** /**
 145:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @brief   Returns the number of used message slots into a mailbox.
 146:./lib/chibios/os/common/oslib/include/chmboxes.h ****  *
 147:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @param[in] mbp       the pointer to an initialized mailbox_t object
 148:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @return              The number of queued messages.
 149:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @retval QUEUE_RESET  if the queue is in reset state.
 150:./lib/chibios/os/common/oslib/include/chmboxes.h ****  *
 151:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @iclass
 152:./lib/chibios/os/common/oslib/include/chmboxes.h ****  */
 153:./lib/chibios/os/common/oslib/include/chmboxes.h **** static inline cnt_t chMBGetUsedCountI(const mailbox_t *mbp) {
 154:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
 155:./lib/chibios/os/common/oslib/include/chmboxes.h ****   chDbgCheckClassI();
 156:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
 157:./lib/chibios/os/common/oslib/include/chmboxes.h ****   return mbp->cnt;
 158:./lib/chibios/os/common/oslib/include/chmboxes.h **** }
 159:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
 160:./lib/chibios/os/common/oslib/include/chmboxes.h **** /**
 161:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @brief   Returns the number of free message slots into a mailbox.
 162:./lib/chibios/os/common/oslib/include/chmboxes.h ****  *
 163:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @param[in] mbp       the pointer to an initialized mailbox_t object
 164:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @return              The number of empty message slots.
 165:./lib/chibios/os/common/oslib/include/chmboxes.h ****  *
 166:./lib/chibios/os/common/oslib/include/chmboxes.h ****  * @iclass
 167:./lib/chibios/os/common/oslib/include/chmboxes.h ****  */
 168:./lib/chibios/os/common/oslib/include/chmboxes.h **** static inline cnt_t chMBGetFreeCountI(const mailbox_t *mbp) {
 169:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
 170:./lib/chibios/os/common/oslib/include/chmboxes.h ****   chDbgCheckClassI();
 171:./lib/chibios/os/common/oslib/include/chmboxes.h **** 
 172:./lib/chibios/os/common/oslib/include/chmboxes.h ****   return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 241              		.loc 4 172 0
 242 0014 2369     		ldr	r3, [r4, #16]
 243              	.LBB100:
 244              	.LBB99:
 140:./lib/chibios/os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 245              		.loc 4 140 0
 246 0016 421A     		subs	r2, r0, r1
 247              	.LBE99:
 248              	.LBE100:
 249              		.loc 4 172 0
 250 0018 C3EBA203 		rsb	r3, r3, r2, asr #2
 251              	.LBE96:
 252              	.LBE95:
 207:lib/chibios/os/common/oslib/src/chmboxes.c ****       *mbp->wrptr++ = msg;
 253              		.loc 1 207 0
 254 001c 002B     		cmp	r3, #0
 255 001e 12DD     		ble	.L6
 256              	.LVL20:
 257              	.LBB101:
 258              	.LBB102:
 208:lib/chibios/os/common/oslib/src/chmboxes.c ****       if (mbp->wrptr >= mbp->top) {
 259              		.loc 1 208 0
 260 0020 A268     		ldr	r2, [r4, #8]
 261 0022 131D     		adds	r3, r2, #4
 262 0024 A360     		str	r3, [r4, #8]
 263 0026 1560     		str	r5, [r2]
 209:lib/chibios/os/common/oslib/src/chmboxes.c ****         mbp->wrptr = mbp->buffer;
 264              		.loc 1 209 0
 265 0028 9842     		cmp	r0, r3
 212:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 266              		.loc 1 212 0
 267 002a 2369     		ldr	r3, [r4, #16]
 210:lib/chibios/os/common/oslib/src/chmboxes.c ****       }
 268              		.loc 1 210 0
 269 002c 98BF     		it	ls
 270 002e A160     		strls	r1, [r4, #8]
 212:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 271              		.loc 1 212 0
 272 0030 0133     		adds	r3, r3, #1
 215:lib/chibios/os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 273              		.loc 1 215 0
 274 0032 04F12000 		add	r0, r4, #32
 212:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 275              		.loc 1 212 0
 276 0036 2361     		str	r3, [r4, #16]
 215:lib/chibios/os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 277              		.loc 1 215 0
 278 0038 0021     		movs	r1, #0
 279 003a FFF7FEFF 		bl	chThdDequeueNextI
 280              	.LVL21:
 216:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 281              		.loc 1 216 0
 282 003e FFF7FEFF 		bl	chSchRescheduleS
 283              	.LVL22:
 284 0042 0020     		movs	r0, #0
 285              	.LVL23:
 286              	.L4:
 287              	.LBE102:
 288              	.LBE101:
 223:lib/chibios/os/common/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 224:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 225:lib/chibios/os/common/oslib/src/chmboxes.c ****   return rdymsg;
 226:lib/chibios/os/common/oslib/src/chmboxes.c **** }
 289              		.loc 1 226 0
 290 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 291              	.LVL24:
 292              	.L6:
 222:lib/chibios/os/common/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 293              		.loc 1 222 0
 294 0046 3946     		mov	r1, r7
 295 0048 3046     		mov	r0, r6
 296 004a FFF7FEFF 		bl	chThdEnqueueTimeoutS
 297              	.LVL25:
 223:lib/chibios/os/common/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 298              		.loc 1 223 0
 299 004e 0028     		cmp	r0, #0
 300 0050 DCD0     		beq	.L8
 301 0052 F7E7     		b	.L4
 302              	.LVL26:
 303              	.L9:
 203:lib/chibios/os/common/oslib/src/chmboxes.c ****     }
 304              		.loc 1 203 0
 305 0054 6FF00100 		mvn	r0, #1
 306 0058 F4E7     		b	.L4
 307              		.cfi_endproc
 308              	.LFE252:
 310              		.section	.text.chMBPost,"ax",%progbits
 311              		.align	1
 312              		.global	chMBPost
 313              		.syntax unified
 314              		.thumb
 315              		.thumb_func
 316              		.fpu softvfp
 318              	chMBPost:
 319              	.LFB251:
 165:lib/chibios/os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 320              		.loc 1 165 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324              	.LVL27:
 325 0000 08B5     		push	{r3, lr}
 326              		.cfi_def_cfa_offset 8
 327              		.cfi_offset 3, -8
 328              		.cfi_offset 14, -4
 329              	.LBB103:
 330              	.LBB104:
 331              	.LBB105:
 332              	.LBB106:
 333              		.loc 3 264 0
 334 0002 2023     		movs	r3, #32
 335              		.syntax unified
 336              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 337 0004 83F31188 		MSR basepri, r3
 338              	@ 0 "" 2
 339              	.LVL28:
 340              		.thumb
 341              		.syntax unified
 342              	.LBE106:
 343              	.LBE105:
 344              	.LBE104:
 345              	.LBE103:
 169:lib/chibios/os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 346              		.loc 1 169 0
 347 0008 FFF7FEFF 		bl	chMBPostS
 348              	.LVL29:
 349              	.LBB107:
 350              	.LBB108:
 351              	.LBB109:
 352              	.LBB110:
 353              	.LBB111:
 354              		.loc 3 264 0
 355 000c 0023     		movs	r3, #0
 356              		.syntax unified
 357              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 358 000e 83F31188 		MSR basepri, r3
 359              	@ 0 "" 2
 360              	.LVL30:
 361              		.thumb
 362              		.syntax unified
 363              	.LBE111:
 364              	.LBE110:
 365              	.LBE109:
 366              	.LBE108:
 367              	.LBE107:
 173:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 368              		.loc 1 173 0
 369 0012 08BD     		pop	{r3, pc}
 370              		.cfi_endproc
 371              	.LFE251:
 373              		.section	.text.chMBPostI,"ax",%progbits
 374              		.align	1
 375              		.global	chMBPostI
 376              		.syntax unified
 377              		.thumb
 378              		.thumb_func
 379              		.fpu softvfp
 381              	chMBPostI:
 382              	.LFB253:
 227:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 228:lib/chibios/os/common/oslib/src/chmboxes.c **** /**
 229:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 230:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 231:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          condition if the queue is full.
 232:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 233:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 234:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 235:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 236:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 237:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 238:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 239:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      posted.
 240:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 241:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @iclass
 242:lib/chibios/os/common/oslib/src/chmboxes.c ****  */
 243:lib/chibios/os/common/oslib/src/chmboxes.c **** msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 383              		.loc 1 243 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387              	.LVL31:
 388 0000 38B5     		push	{r3, r4, r5, lr}
 389              		.cfi_def_cfa_offset 16
 390              		.cfi_offset 3, -16
 391              		.cfi_offset 4, -12
 392              		.cfi_offset 5, -8
 393              		.cfi_offset 14, -4
 244:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 245:lib/chibios/os/common/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 246:lib/chibios/os/common/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 247:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 248:lib/chibios/os/common/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 249:lib/chibios/os/common/oslib/src/chmboxes.c ****   if (mbp->reset) {
 394              		.loc 1 249 0
 395 0002 037D     		ldrb	r3, [r0, #20]	@ zero_extendqisi2
 396 0004 BBB9     		cbnz	r3, .L16
 397              	.LVL32:
 398              	.LBB116:
 399              	.LBB117:
 400              	.LBB118:
 401              	.LBB119:
 140:./lib/chibios/os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 402              		.loc 4 140 0
 403 0006 D0E90024 		ldrd	r2, r4, [r0]
 404              	.LVL33:
 405              	.LBE119:
 406              	.LBE118:
 407              		.loc 4 172 0
 408 000a 0369     		ldr	r3, [r0, #16]
 409              	.LBB121:
 410              	.LBB120:
 140:./lib/chibios/os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 411              		.loc 4 140 0
 412 000c A51A     		subs	r5, r4, r2
 413              	.LBE120:
 414              	.LBE121:
 415              		.loc 4 172 0
 416 000e C3EBA503 		rsb	r3, r3, r5, asr #2
 417              	.LBE117:
 418              	.LBE116:
 250:lib/chibios/os/common/oslib/src/chmboxes.c ****     return MSG_RESET;
 251:lib/chibios/os/common/oslib/src/chmboxes.c ****   }
 252:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 253:lib/chibios/os/common/oslib/src/chmboxes.c ****   /* Is there a free message slot in queue? if so then post.*/
 254:lib/chibios/os/common/oslib/src/chmboxes.c ****   if (chMBGetFreeCountI(mbp) > (cnt_t)0) {
 419              		.loc 1 254 0
 420 0012 002B     		cmp	r3, #0
 421 0014 12DD     		ble	.L17
 255:lib/chibios/os/common/oslib/src/chmboxes.c ****     *mbp->wrptr++ = msg;
 422              		.loc 1 255 0
 423 0016 8568     		ldr	r5, [r0, #8]
 424 0018 2B1D     		adds	r3, r5, #4
 425 001a 8360     		str	r3, [r0, #8]
 426 001c 2960     		str	r1, [r5]
 256:lib/chibios/os/common/oslib/src/chmboxes.c ****     if (mbp->wrptr >= mbp->top) {
 427              		.loc 1 256 0
 428 001e A342     		cmp	r3, r4
 257:lib/chibios/os/common/oslib/src/chmboxes.c ****       mbp->wrptr = mbp->buffer;
 258:lib/chibios/os/common/oslib/src/chmboxes.c ****     }
 259:lib/chibios/os/common/oslib/src/chmboxes.c ****     mbp->cnt++;
 429              		.loc 1 259 0
 430 0020 0369     		ldr	r3, [r0, #16]
 257:lib/chibios/os/common/oslib/src/chmboxes.c ****       mbp->wrptr = mbp->buffer;
 431              		.loc 1 257 0
 432 0022 28BF     		it	cs
 433 0024 8260     		strcs	r2, [r0, #8]
 434              		.loc 1 259 0
 435 0026 0133     		adds	r3, r3, #1
 436 0028 0361     		str	r3, [r0, #16]
 260:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 261:lib/chibios/os/common/oslib/src/chmboxes.c ****     /* If there is a reader waiting then makes it ready.*/
 262:lib/chibios/os/common/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qr, MSG_OK);
 437              		.loc 1 262 0
 438 002a 0021     		movs	r1, #0
 439              	.LVL34:
 440 002c 2030     		adds	r0, r0, #32
 441              	.LVL35:
 442 002e FFF7FEFF 		bl	chThdDequeueNextI
 443              	.LVL36:
 263:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 264:lib/chibios/os/common/oslib/src/chmboxes.c ****     return MSG_OK;
 444              		.loc 1 264 0
 445 0032 0020     		movs	r0, #0
 446              	.LVL37:
 447              	.L13:
 265:lib/chibios/os/common/oslib/src/chmboxes.c ****   }
 266:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 267:lib/chibios/os/common/oslib/src/chmboxes.c ****   /* No space, immediate timeout.*/
 268:lib/chibios/os/common/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 269:lib/chibios/os/common/oslib/src/chmboxes.c **** }
 448              		.loc 1 269 0
 449 0034 38BD     		pop	{r3, r4, r5, pc}
 450              	.LVL38:
 451              	.L16:
 250:lib/chibios/os/common/oslib/src/chmboxes.c ****   }
 452              		.loc 1 250 0
 453 0036 6FF00100 		mvn	r0, #1
 454              	.LVL39:
 455 003a FBE7     		b	.L13
 456              	.LVL40:
 457              	.L17:
 268:lib/chibios/os/common/oslib/src/chmboxes.c **** }
 458              		.loc 1 268 0
 459 003c 4FF0FF30 		mov	r0, #-1
 460              	.LVL41:
 461 0040 F8E7     		b	.L13
 462              		.cfi_endproc
 463              	.LFE253:
 465              		.section	.text.chMBPostAheadS,"ax",%progbits
 466              		.align	1
 467              		.global	chMBPostAheadS
 468              		.syntax unified
 469              		.thumb
 470              		.thumb_func
 471              		.fpu softvfp
 473              	chMBPostAheadS:
 474              	.LFB255:
 270:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 271:lib/chibios/os/common/oslib/src/chmboxes.c **** /**
 272:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 273:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 274:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 275:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 276:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 277:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 278:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 279:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 280:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 281:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 282:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      .
 283:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 284:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 285:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 286:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 287:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 288:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @api
 289:lib/chibios/os/common/oslib/src/chmboxes.c ****  */
 290:lib/chibios/os/common/oslib/src/chmboxes.c **** msg_t chMBPostAhead(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 291:lib/chibios/os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 292:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 293:lib/chibios/os/common/oslib/src/chmboxes.c ****   chSysLock();
 294:lib/chibios/os/common/oslib/src/chmboxes.c ****   rdymsg = chMBPostAheadS(mbp, msg, timeout);
 295:lib/chibios/os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 296:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 297:lib/chibios/os/common/oslib/src/chmboxes.c ****   return rdymsg;
 298:lib/chibios/os/common/oslib/src/chmboxes.c **** }
 299:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 300:lib/chibios/os/common/oslib/src/chmboxes.c **** /**
 301:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 302:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 303:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 304:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 305:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 306:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 307:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 308:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 309:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 310:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 311:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      .
 312:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 313:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 314:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 315:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 316:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 317:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @sclass
 318:lib/chibios/os/common/oslib/src/chmboxes.c ****  */
 319:lib/chibios/os/common/oslib/src/chmboxes.c **** msg_t chMBPostAheadS(mailbox_t *mbp, msg_t msg, systime_t timeout) {
 475              		.loc 1 319 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              	.LVL42:
 480 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 481              		.cfi_def_cfa_offset 24
 482              		.cfi_offset 3, -24
 483              		.cfi_offset 4, -20
 484              		.cfi_offset 5, -16
 485              		.cfi_offset 6, -12
 486              		.cfi_offset 7, -8
 487              		.cfi_offset 14, -4
 488              		.loc 1 319 0
 489 0002 0446     		mov	r4, r0
 490 0004 0D46     		mov	r5, r1
 491 0006 1746     		mov	r7, r2
 320:lib/chibios/os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 321:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 322:lib/chibios/os/common/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 323:lib/chibios/os/common/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 324:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 325:lib/chibios/os/common/oslib/src/chmboxes.c ****   do {
 326:lib/chibios/os/common/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 327:lib/chibios/os/common/oslib/src/chmboxes.c ****     if (mbp->reset) {
 328:lib/chibios/os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 329:lib/chibios/os/common/oslib/src/chmboxes.c ****     }
 330:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 331:lib/chibios/os/common/oslib/src/chmboxes.c ****     /* Is there a free message slot in queue? if so then post.*/
 332:lib/chibios/os/common/oslib/src/chmboxes.c ****     if (chMBGetFreeCountI(mbp) > (cnt_t)0) {
 333:lib/chibios/os/common/oslib/src/chmboxes.c ****       if (--mbp->rdptr < mbp->buffer) {
 334:lib/chibios/os/common/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->top - 1;
 335:lib/chibios/os/common/oslib/src/chmboxes.c ****       }
 336:lib/chibios/os/common/oslib/src/chmboxes.c ****       *mbp->rdptr = msg;
 337:lib/chibios/os/common/oslib/src/chmboxes.c ****       mbp->cnt++;
 338:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 339:lib/chibios/os/common/oslib/src/chmboxes.c ****       /* If there is a reader waiting then makes it ready.*/
 340:lib/chibios/os/common/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qr, MSG_OK);
 341:lib/chibios/os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 342:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 343:lib/chibios/os/common/oslib/src/chmboxes.c ****       return MSG_OK;
 344:lib/chibios/os/common/oslib/src/chmboxes.c ****     }
 345:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 346:lib/chibios/os/common/oslib/src/chmboxes.c ****     /* No space in the queue, waiting for a slot to become available.*/
 347:lib/chibios/os/common/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 492              		.loc 1 347 0
 493 0008 00F11806 		add	r6, r0, #24
 494              	.LVL43:
 495              	.L23:
 327:lib/chibios/os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 496              		.loc 1 327 0
 497 000c 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 498 000e 1BBB     		cbnz	r3, .L24
 499              	.LVL44:
 500              	.LBB128:
 501              	.LBB129:
 502              	.LBB130:
 503              	.LBB131:
 140:./lib/chibios/os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 504              		.loc 4 140 0
 505 0010 D4E90003 		ldrd	r0, r3, [r4]
 506              	.LVL45:
 507              	.LBE131:
 508              	.LBE130:
 509              		.loc 4 172 0
 510 0014 2169     		ldr	r1, [r4, #16]
 511              	.LBB133:
 512              	.LBB132:
 140:./lib/chibios/os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 513              		.loc 4 140 0
 514 0016 1A1A     		subs	r2, r3, r0
 515              	.LBE132:
 516              	.LBE133:
 517              		.loc 4 172 0
 518 0018 C1EBA201 		rsb	r1, r1, r2, asr #2
 519              	.LBE129:
 520              	.LBE128:
 332:lib/chibios/os/common/oslib/src/chmboxes.c ****       if (--mbp->rdptr < mbp->buffer) {
 521              		.loc 1 332 0
 522 001c 0029     		cmp	r1, #0
 523 001e 14DD     		ble	.L20
 524              	.LVL46:
 525              	.LBB134:
 526              	.LBB135:
 333:lib/chibios/os/common/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->top - 1;
 527              		.loc 1 333 0
 528 0020 E268     		ldr	r2, [r4, #12]
 529 0022 043A     		subs	r2, r2, #4
 530 0024 9042     		cmp	r0, r2
 334:lib/chibios/os/common/oslib/src/chmboxes.c ****       }
 531              		.loc 1 334 0
 532 0026 8ABF     		itet	hi
 533 0028 043B     		subhi	r3, r3, #4
 333:lib/chibios/os/common/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->top - 1;
 534              		.loc 1 333 0
 535 002a E260     		strls	r2, [r4, #12]
 334:lib/chibios/os/common/oslib/src/chmboxes.c ****       }
 536              		.loc 1 334 0
 537 002c E360     		strhi	r3, [r4, #12]
 336:lib/chibios/os/common/oslib/src/chmboxes.c ****       mbp->cnt++;
 538              		.loc 1 336 0
 539 002e E368     		ldr	r3, [r4, #12]
 540 0030 1D60     		str	r5, [r3]
 337:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 541              		.loc 1 337 0
 542 0032 2369     		ldr	r3, [r4, #16]
 543 0034 0133     		adds	r3, r3, #1
 340:lib/chibios/os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 544              		.loc 1 340 0
 545 0036 04F12000 		add	r0, r4, #32
 337:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 546              		.loc 1 337 0
 547 003a 2361     		str	r3, [r4, #16]
 340:lib/chibios/os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 548              		.loc 1 340 0
 549 003c 0021     		movs	r1, #0
 550 003e FFF7FEFF 		bl	chThdDequeueNextI
 551              	.LVL47:
 341:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 552              		.loc 1 341 0
 553 0042 FFF7FEFF 		bl	chSchRescheduleS
 554              	.LVL48:
 555 0046 0020     		movs	r0, #0
 556              	.LVL49:
 557              	.L18:
 558              	.LBE135:
 559              	.LBE134:
 348:lib/chibios/os/common/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 349:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 350:lib/chibios/os/common/oslib/src/chmboxes.c ****   return rdymsg;
 351:lib/chibios/os/common/oslib/src/chmboxes.c **** }
 560              		.loc 1 351 0
 561 0048 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 562              	.LVL50:
 563              	.L20:
 347:lib/chibios/os/common/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 564              		.loc 1 347 0
 565 004a 3946     		mov	r1, r7
 566 004c 3046     		mov	r0, r6
 567 004e FFF7FEFF 		bl	chThdEnqueueTimeoutS
 568              	.LVL51:
 348:lib/chibios/os/common/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 569              		.loc 1 348 0
 570 0052 0028     		cmp	r0, #0
 571 0054 DAD0     		beq	.L23
 572 0056 F7E7     		b	.L18
 573              	.LVL52:
 574              	.L24:
 328:lib/chibios/os/common/oslib/src/chmboxes.c ****     }
 575              		.loc 1 328 0
 576 0058 6FF00100 		mvn	r0, #1
 577 005c F4E7     		b	.L18
 578              		.cfi_endproc
 579              	.LFE255:
 581              		.section	.text.chMBPostAhead,"ax",%progbits
 582              		.align	1
 583              		.global	chMBPostAhead
 584              		.syntax unified
 585              		.thumb
 586              		.thumb_func
 587              		.fpu softvfp
 589              	chMBPostAhead:
 590              	.LFB254:
 290:lib/chibios/os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 591              		.loc 1 290 0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 0
 594              		@ frame_needed = 0, uses_anonymous_args = 0
 595              	.LVL53:
 596 0000 08B5     		push	{r3, lr}
 597              		.cfi_def_cfa_offset 8
 598              		.cfi_offset 3, -8
 599              		.cfi_offset 14, -4
 600              	.LBB136:
 601              	.LBB137:
 602              	.LBB138:
 603              	.LBB139:
 604              		.loc 3 264 0
 605 0002 2023     		movs	r3, #32
 606              		.syntax unified
 607              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 608 0004 83F31188 		MSR basepri, r3
 609              	@ 0 "" 2
 610              	.LVL54:
 611              		.thumb
 612              		.syntax unified
 613              	.LBE139:
 614              	.LBE138:
 615              	.LBE137:
 616              	.LBE136:
 294:lib/chibios/os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 617              		.loc 1 294 0
 618 0008 FFF7FEFF 		bl	chMBPostAheadS
 619              	.LVL55:
 620              	.LBB140:
 621              	.LBB141:
 622              	.LBB142:
 623              	.LBB143:
 624              	.LBB144:
 625              		.loc 3 264 0
 626 000c 0023     		movs	r3, #0
 627              		.syntax unified
 628              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 629 000e 83F31188 		MSR basepri, r3
 630              	@ 0 "" 2
 631              	.LVL56:
 632              		.thumb
 633              		.syntax unified
 634              	.LBE144:
 635              	.LBE143:
 636              	.LBE142:
 637              	.LBE141:
 638              	.LBE140:
 298:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 639              		.loc 1 298 0
 640 0012 08BD     		pop	{r3, pc}
 641              		.cfi_endproc
 642              	.LFE254:
 644              		.section	.text.chMBPostAheadI,"ax",%progbits
 645              		.align	1
 646              		.global	chMBPostAheadI
 647              		.syntax unified
 648              		.thumb
 649              		.thumb_func
 650              		.fpu softvfp
 652              	chMBPostAheadI:
 653              	.LFB256:
 352:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 353:lib/chibios/os/common/oslib/src/chmboxes.c **** /**
 354:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 355:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 356:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          condition if the queue is full.
 357:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 358:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 359:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] msg       the message to be posted on the mailbox
 360:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 361:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 362:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 363:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 364:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      posted.
 365:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 366:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @iclass
 367:lib/chibios/os/common/oslib/src/chmboxes.c ****  */
 368:lib/chibios/os/common/oslib/src/chmboxes.c **** msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 654              		.loc 1 368 0
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 0
 657              		@ frame_needed = 0, uses_anonymous_args = 0
 658              	.LVL57:
 659 0000 38B5     		push	{r3, r4, r5, lr}
 660              		.cfi_def_cfa_offset 16
 661              		.cfi_offset 3, -16
 662              		.cfi_offset 4, -12
 663              		.cfi_offset 5, -8
 664              		.cfi_offset 14, -4
 369:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 370:lib/chibios/os/common/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 371:lib/chibios/os/common/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 372:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 373:lib/chibios/os/common/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 374:lib/chibios/os/common/oslib/src/chmboxes.c ****   if (mbp->reset) {
 665              		.loc 1 374 0
 666 0002 037D     		ldrb	r3, [r0, #20]	@ zero_extendqisi2
 667 0004 CBB9     		cbnz	r3, .L32
 668              	.LVL58:
 669              	.LBB149:
 670              	.LBB150:
 671              	.LBB151:
 672              	.LBB152:
 140:./lib/chibios/os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 673              		.loc 4 140 0
 674 0006 D0E90043 		ldrd	r4, r3, [r0]
 675              	.LVL59:
 676              	.LBE152:
 677              	.LBE151:
 678              		.loc 4 172 0
 679 000a 0269     		ldr	r2, [r0, #16]
 680              	.LBB154:
 681              	.LBB153:
 140:./lib/chibios/os/common/oslib/include/chmboxes.h ****   /*lint -restore*/
 682              		.loc 4 140 0
 683 000c 1D1B     		subs	r5, r3, r4
 684              	.LBE153:
 685              	.LBE154:
 686              		.loc 4 172 0
 687 000e C2EBA502 		rsb	r2, r2, r5, asr #2
 688              	.LBE150:
 689              	.LBE149:
 375:lib/chibios/os/common/oslib/src/chmboxes.c ****     return MSG_RESET;
 376:lib/chibios/os/common/oslib/src/chmboxes.c ****   }
 377:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 378:lib/chibios/os/common/oslib/src/chmboxes.c ****   /* Is there a free message slot in queue? if so then post.*/
 379:lib/chibios/os/common/oslib/src/chmboxes.c ****   if (chMBGetFreeCountI(mbp) > (cnt_t)0) {
 690              		.loc 1 379 0
 691 0012 002A     		cmp	r2, #0
 692 0014 14DD     		ble	.L33
 380:lib/chibios/os/common/oslib/src/chmboxes.c ****     if (--mbp->rdptr < mbp->buffer) {
 693              		.loc 1 380 0
 694 0016 C268     		ldr	r2, [r0, #12]
 695 0018 043A     		subs	r2, r2, #4
 696 001a A242     		cmp	r2, r4
 381:lib/chibios/os/common/oslib/src/chmboxes.c ****       mbp->rdptr = mbp->top - 1;
 697              		.loc 1 381 0
 698 001c 36BF     		itet	cc
 699 001e 043B     		subcc	r3, r3, #4
 380:lib/chibios/os/common/oslib/src/chmboxes.c ****     if (--mbp->rdptr < mbp->buffer) {
 700              		.loc 1 380 0
 701 0020 C260     		strcs	r2, [r0, #12]
 702              		.loc 1 381 0
 703 0022 C360     		strcc	r3, [r0, #12]
 382:lib/chibios/os/common/oslib/src/chmboxes.c ****     }
 383:lib/chibios/os/common/oslib/src/chmboxes.c ****     *mbp->rdptr = msg;
 704              		.loc 1 383 0
 705 0024 C368     		ldr	r3, [r0, #12]
 706 0026 1960     		str	r1, [r3]
 384:lib/chibios/os/common/oslib/src/chmboxes.c ****     mbp->cnt++;
 707              		.loc 1 384 0
 708 0028 0369     		ldr	r3, [r0, #16]
 709 002a 0133     		adds	r3, r3, #1
 710 002c 0361     		str	r3, [r0, #16]
 385:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 386:lib/chibios/os/common/oslib/src/chmboxes.c ****     /* If there is a reader waiting then makes it ready.*/
 387:lib/chibios/os/common/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qr, MSG_OK);
 711              		.loc 1 387 0
 712 002e 0021     		movs	r1, #0
 713              	.LVL60:
 714 0030 2030     		adds	r0, r0, #32
 715              	.LVL61:
 716 0032 FFF7FEFF 		bl	chThdDequeueNextI
 717              	.LVL62:
 388:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 389:lib/chibios/os/common/oslib/src/chmboxes.c ****     return MSG_OK;
 718              		.loc 1 389 0
 719 0036 0020     		movs	r0, #0
 720              	.LVL63:
 721              	.L28:
 390:lib/chibios/os/common/oslib/src/chmboxes.c ****   }
 391:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 392:lib/chibios/os/common/oslib/src/chmboxes.c ****   /* No space, immediate timeout.*/
 393:lib/chibios/os/common/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 394:lib/chibios/os/common/oslib/src/chmboxes.c **** }
 722              		.loc 1 394 0
 723 0038 38BD     		pop	{r3, r4, r5, pc}
 724              	.LVL64:
 725              	.L32:
 375:lib/chibios/os/common/oslib/src/chmboxes.c ****   }
 726              		.loc 1 375 0
 727 003a 6FF00100 		mvn	r0, #1
 728              	.LVL65:
 729 003e FBE7     		b	.L28
 730              	.LVL66:
 731              	.L33:
 393:lib/chibios/os/common/oslib/src/chmboxes.c **** }
 732              		.loc 1 393 0
 733 0040 4FF0FF30 		mov	r0, #-1
 734              	.LVL67:
 735 0044 F8E7     		b	.L28
 736              		.cfi_endproc
 737              	.LFE256:
 739              		.section	.text.chMBFetchS,"ax",%progbits
 740              		.align	1
 741              		.global	chMBFetchS
 742              		.syntax unified
 743              		.thumb
 744              		.thumb_func
 745              		.fpu softvfp
 747              	chMBFetchS:
 748              	.LFB258:
 395:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 396:lib/chibios/os/common/oslib/src/chmboxes.c **** /**
 397:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 398:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a message is posted in the mailbox
 399:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          or the specified time runs out.
 400:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 401:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 402:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 403:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 404:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 405:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 406:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 407:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      .
 408:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 409:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 410:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 411:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 412:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 413:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @api
 414:lib/chibios/os/common/oslib/src/chmboxes.c ****  */
 415:lib/chibios/os/common/oslib/src/chmboxes.c **** msg_t chMBFetch(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
 416:lib/chibios/os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 417:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 418:lib/chibios/os/common/oslib/src/chmboxes.c ****   chSysLock();
 419:lib/chibios/os/common/oslib/src/chmboxes.c ****   rdymsg = chMBFetchS(mbp, msgp, timeout);
 420:lib/chibios/os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 421:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 422:lib/chibios/os/common/oslib/src/chmboxes.c ****   return rdymsg;
 423:lib/chibios/os/common/oslib/src/chmboxes.c **** }
 424:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 425:lib/chibios/os/common/oslib/src/chmboxes.c **** /**
 426:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 427:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a message is posted in the mailbox
 428:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          or the specified time runs out.
 429:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 430:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 431:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 432:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 433:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 434:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 435:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 436:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      .
 437:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 438:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 439:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 440:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 441:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 442:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @sclass
 443:lib/chibios/os/common/oslib/src/chmboxes.c ****  */
 444:lib/chibios/os/common/oslib/src/chmboxes.c **** msg_t chMBFetchS(mailbox_t *mbp, msg_t *msgp, systime_t timeout) {
 749              		.loc 1 444 0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 0
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 753              	.LVL68:
 754 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 755              		.cfi_def_cfa_offset 24
 756              		.cfi_offset 3, -24
 757              		.cfi_offset 4, -20
 758              		.cfi_offset 5, -16
 759              		.cfi_offset 6, -12
 760              		.cfi_offset 7, -8
 761              		.cfi_offset 14, -4
 762              		.loc 1 444 0
 763 0002 0446     		mov	r4, r0
 764 0004 0F46     		mov	r7, r1
 765 0006 1646     		mov	r6, r2
 445:lib/chibios/os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 446:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 447:lib/chibios/os/common/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 448:lib/chibios/os/common/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (msgp != NULL));
 449:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 450:lib/chibios/os/common/oslib/src/chmboxes.c ****   do {
 451:lib/chibios/os/common/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 452:lib/chibios/os/common/oslib/src/chmboxes.c ****     if (mbp->reset) {
 453:lib/chibios/os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 454:lib/chibios/os/common/oslib/src/chmboxes.c ****     }
 455:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 456:lib/chibios/os/common/oslib/src/chmboxes.c ****     /* Is there a message in queue? if so then fetch.*/
 457:lib/chibios/os/common/oslib/src/chmboxes.c ****     if (chMBGetUsedCountI(mbp) > (cnt_t)0) {
 458:lib/chibios/os/common/oslib/src/chmboxes.c ****       *msgp = *mbp->rdptr++;
 459:lib/chibios/os/common/oslib/src/chmboxes.c ****       if (mbp->rdptr >= mbp->top) {
 460:lib/chibios/os/common/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->buffer;
 461:lib/chibios/os/common/oslib/src/chmboxes.c ****       }
 462:lib/chibios/os/common/oslib/src/chmboxes.c ****       mbp->cnt--;
 463:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 464:lib/chibios/os/common/oslib/src/chmboxes.c ****       /* If there is a writer waiting then makes it ready.*/
 465:lib/chibios/os/common/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qw, MSG_OK);
 466:lib/chibios/os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 467:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 468:lib/chibios/os/common/oslib/src/chmboxes.c ****       return MSG_OK;
 469:lib/chibios/os/common/oslib/src/chmboxes.c ****     }
 470:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 471:lib/chibios/os/common/oslib/src/chmboxes.c ****     /* No message in the queue, waiting for a message to become available.*/
 472:lib/chibios/os/common/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 766              		.loc 1 472 0
 767 0008 00F12005 		add	r5, r0, #32
 768              	.LVL69:
 769              	.L38:
 452:lib/chibios/os/common/oslib/src/chmboxes.c ****       return MSG_RESET;
 770              		.loc 1 452 0
 771 000c 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 772 000e FBB9     		cbnz	r3, .L39
 773              	.LVL70:
 457:lib/chibios/os/common/oslib/src/chmboxes.c ****       *msgp = *mbp->rdptr++;
 774              		.loc 1 457 0
 775 0010 2369     		ldr	r3, [r4, #16]
 776 0012 002B     		cmp	r3, #0
 777 0014 15DD     		ble	.L36
 778              	.LVL71:
 779              	.LBB159:
 780              	.LBB160:
 458:lib/chibios/os/common/oslib/src/chmboxes.c ****       if (mbp->rdptr >= mbp->top) {
 781              		.loc 1 458 0
 782 0016 E268     		ldr	r2, [r4, #12]
 783 0018 131D     		adds	r3, r2, #4
 784 001a 1268     		ldr	r2, [r2]
 785 001c E360     		str	r3, [r4, #12]
 786 001e 3A60     		str	r2, [r7]
 459:lib/chibios/os/common/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->buffer;
 787              		.loc 1 459 0
 788 0020 6268     		ldr	r2, [r4, #4]
 789 0022 9342     		cmp	r3, r2
 460:lib/chibios/os/common/oslib/src/chmboxes.c ****       }
 790              		.loc 1 460 0
 791 0024 24BF     		itt	cs
 792 0026 2368     		ldrcs	r3, [r4]
 793 0028 E360     		strcs	r3, [r4, #12]
 462:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 794              		.loc 1 462 0
 795 002a 2369     		ldr	r3, [r4, #16]
 796 002c 013B     		subs	r3, r3, #1
 465:lib/chibios/os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 797              		.loc 1 465 0
 798 002e 04F11800 		add	r0, r4, #24
 462:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 799              		.loc 1 462 0
 800 0032 2361     		str	r3, [r4, #16]
 465:lib/chibios/os/common/oslib/src/chmboxes.c ****       chSchRescheduleS();
 801              		.loc 1 465 0
 802 0034 0021     		movs	r1, #0
 803 0036 FFF7FEFF 		bl	chThdDequeueNextI
 804              	.LVL72:
 466:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 805              		.loc 1 466 0
 806 003a FFF7FEFF 		bl	chSchRescheduleS
 807              	.LVL73:
 808 003e 0020     		movs	r0, #0
 809              	.LVL74:
 810              	.L34:
 811              	.LBE160:
 812              	.LBE159:
 473:lib/chibios/os/common/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 474:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 475:lib/chibios/os/common/oslib/src/chmboxes.c ****   return rdymsg;
 476:lib/chibios/os/common/oslib/src/chmboxes.c **** }
 813              		.loc 1 476 0
 814 0040 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 815              	.LVL75:
 816              	.L36:
 472:lib/chibios/os/common/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 817              		.loc 1 472 0
 818 0042 3146     		mov	r1, r6
 819 0044 2846     		mov	r0, r5
 820 0046 FFF7FEFF 		bl	chThdEnqueueTimeoutS
 821              	.LVL76:
 473:lib/chibios/os/common/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 822              		.loc 1 473 0
 823 004a 0028     		cmp	r0, #0
 824 004c DED0     		beq	.L38
 825 004e F7E7     		b	.L34
 826              	.LVL77:
 827              	.L39:
 453:lib/chibios/os/common/oslib/src/chmboxes.c ****     }
 828              		.loc 1 453 0
 829 0050 6FF00100 		mvn	r0, #1
 830 0054 F4E7     		b	.L34
 831              		.cfi_endproc
 832              	.LFE258:
 834              		.section	.text.chMBFetch,"ax",%progbits
 835              		.align	1
 836              		.global	chMBFetch
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 840              		.fpu softvfp
 842              	chMBFetch:
 843              	.LFB257:
 415:lib/chibios/os/common/oslib/src/chmboxes.c ****   msg_t rdymsg;
 844              		.loc 1 415 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 0
 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848              	.LVL78:
 849 0000 08B5     		push	{r3, lr}
 850              		.cfi_def_cfa_offset 8
 851              		.cfi_offset 3, -8
 852              		.cfi_offset 14, -4
 853              	.LBB161:
 854              	.LBB162:
 855              	.LBB163:
 856              	.LBB164:
 857              		.loc 3 264 0
 858 0002 2023     		movs	r3, #32
 859              		.syntax unified
 860              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 861 0004 83F31188 		MSR basepri, r3
 862              	@ 0 "" 2
 863              	.LVL79:
 864              		.thumb
 865              		.syntax unified
 866              	.LBE164:
 867              	.LBE163:
 868              	.LBE162:
 869              	.LBE161:
 419:lib/chibios/os/common/oslib/src/chmboxes.c ****   chSysUnlock();
 870              		.loc 1 419 0
 871 0008 FFF7FEFF 		bl	chMBFetchS
 872              	.LVL80:
 873              	.LBB165:
 874              	.LBB166:
 875              	.LBB167:
 876              	.LBB168:
 877              	.LBB169:
 878              		.loc 3 264 0
 879 000c 0023     		movs	r3, #0
 880              		.syntax unified
 881              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 882 000e 83F31188 		MSR basepri, r3
 883              	@ 0 "" 2
 884              	.LVL81:
 885              		.thumb
 886              		.syntax unified
 887              	.LBE169:
 888              	.LBE168:
 889              	.LBE167:
 890              	.LBE166:
 891              	.LBE165:
 423:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 892              		.loc 1 423 0
 893 0012 08BD     		pop	{r3, pc}
 894              		.cfi_endproc
 895              	.LFE257:
 897              		.section	.text.chMBFetchI,"ax",%progbits
 898              		.align	1
 899              		.global	chMBFetchI
 900              		.syntax unified
 901              		.thumb
 902              		.thumb_func
 903              		.fpu softvfp
 905              	chMBFetchI:
 906              	.LFB259:
 477:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 478:lib/chibios/os/common/oslib/src/chmboxes.c **** /**
 479:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 480:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 481:lib/chibios/os/common/oslib/src/chmboxes.c ****  *          condition if the queue is empty.
 482:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 483:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 484:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 485:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @return              The operation status.
 486:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 487:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 488:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 489:lib/chibios/os/common/oslib/src/chmboxes.c ****  *                      fetched.
 490:lib/chibios/os/common/oslib/src/chmboxes.c ****  *
 491:lib/chibios/os/common/oslib/src/chmboxes.c ****  * @iclass
 492:lib/chibios/os/common/oslib/src/chmboxes.c ****  */
 493:lib/chibios/os/common/oslib/src/chmboxes.c **** msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 907              		.loc 1 493 0
 908              		.cfi_startproc
 909              		@ args = 0, pretend = 0, frame = 0
 910              		@ frame_needed = 0, uses_anonymous_args = 0
 911              	.LVL82:
 912 0000 08B5     		push	{r3, lr}
 913              		.cfi_def_cfa_offset 8
 914              		.cfi_offset 3, -8
 915              		.cfi_offset 14, -4
 494:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 495:lib/chibios/os/common/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 496:lib/chibios/os/common/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (msgp != NULL));
 497:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 498:lib/chibios/os/common/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 499:lib/chibios/os/common/oslib/src/chmboxes.c ****   if (mbp->reset) {
 916              		.loc 1 499 0
 917 0002 037D     		ldrb	r3, [r0, #20]	@ zero_extendqisi2
 918 0004 ABB9     		cbnz	r3, .L46
 919              	.LVL83:
 500:lib/chibios/os/common/oslib/src/chmboxes.c ****     return MSG_RESET;
 501:lib/chibios/os/common/oslib/src/chmboxes.c ****   }
 502:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 503:lib/chibios/os/common/oslib/src/chmboxes.c ****   /* Is there a message in queue? if so then fetch.*/
 504:lib/chibios/os/common/oslib/src/chmboxes.c ****   if (chMBGetUsedCountI(mbp) > (cnt_t)0) {
 920              		.loc 1 504 0
 921 0006 0369     		ldr	r3, [r0, #16]
 922 0008 002B     		cmp	r3, #0
 923 000a 15DD     		ble	.L47
 505:lib/chibios/os/common/oslib/src/chmboxes.c ****     *msgp = *mbp->rdptr++;
 924              		.loc 1 505 0
 925 000c C268     		ldr	r2, [r0, #12]
 926 000e 131D     		adds	r3, r2, #4
 927 0010 1268     		ldr	r2, [r2]
 928 0012 C360     		str	r3, [r0, #12]
 929 0014 0A60     		str	r2, [r1]
 506:lib/chibios/os/common/oslib/src/chmboxes.c ****     if (mbp->rdptr >= mbp->top) {
 930              		.loc 1 506 0
 931 0016 4268     		ldr	r2, [r0, #4]
 932 0018 9342     		cmp	r3, r2
 507:lib/chibios/os/common/oslib/src/chmboxes.c ****       mbp->rdptr = mbp->buffer;
 933              		.loc 1 507 0
 934 001a 24BF     		itt	cs
 935 001c 0368     		ldrcs	r3, [r0]
 936 001e C360     		strcs	r3, [r0, #12]
 508:lib/chibios/os/common/oslib/src/chmboxes.c ****     }
 509:lib/chibios/os/common/oslib/src/chmboxes.c ****     mbp->cnt--;
 937              		.loc 1 509 0
 938 0020 0369     		ldr	r3, [r0, #16]
 939 0022 013B     		subs	r3, r3, #1
 940 0024 0361     		str	r3, [r0, #16]
 510:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 511:lib/chibios/os/common/oslib/src/chmboxes.c ****     /* If there is a writer waiting then makes it ready.*/
 512:lib/chibios/os/common/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qw, MSG_OK);
 941              		.loc 1 512 0
 942 0026 0021     		movs	r1, #0
 943              	.LVL84:
 944 0028 1830     		adds	r0, r0, #24
 945              	.LVL85:
 946 002a FFF7FEFF 		bl	chThdDequeueNextI
 947              	.LVL86:
 513:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 514:lib/chibios/os/common/oslib/src/chmboxes.c ****     return MSG_OK;
 948              		.loc 1 514 0
 949 002e 0020     		movs	r0, #0
 950              	.LVL87:
 951              	.L43:
 515:lib/chibios/os/common/oslib/src/chmboxes.c ****   }
 516:lib/chibios/os/common/oslib/src/chmboxes.c **** 
 517:lib/chibios/os/common/oslib/src/chmboxes.c ****   /* No message, immediate timeout.*/
 518:lib/chibios/os/common/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 519:lib/chibios/os/common/oslib/src/chmboxes.c **** }
 952              		.loc 1 519 0
 953 0030 08BD     		pop	{r3, pc}
 954              	.LVL88:
 955              	.L46:
 500:lib/chibios/os/common/oslib/src/chmboxes.c ****   }
 956              		.loc 1 500 0
 957 0032 6FF00100 		mvn	r0, #1
 958              	.LVL89:
 959 0036 FBE7     		b	.L43
 960              	.LVL90:
 961              	.L47:
 518:lib/chibios/os/common/oslib/src/chmboxes.c **** }
 962              		.loc 1 518 0
 963 0038 4FF0FF30 		mov	r0, #-1
 964              	.LVL91:
 965 003c F8E7     		b	.L43
 966              		.cfi_endproc
 967              	.LFE259:
 969              		.text
 970              	.Letext0:
 971              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 972              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 973              		.file 7 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 974              		.file 8 "./lib/chibios/os/rt/include/chsystypes.h"
 975              		.file 9 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 976              		.file 10 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 977              		.file 11 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 978              		.file 12 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 979              		.file 13 "./lib/chibios/os/rt/include/chtm.h"
 980              		.file 14 "./lib/chibios/os/rt/include/chsem.h"
 981              		.file 15 "./lib/chibios/os/rt/include/chmtx.h"
 982              		.file 16 "./lib/chibios/os/rt/include/chsys.h"
 983              		.file 17 "./lib/chibios/os/rt/include/chregistry.h"
 984              		.file 18 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 985              		.file 19 "./lib/chibios/os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmboxes.c
/var/tmp//cc292Sve.s:16     .text.chMBObjectInit:0000000000000000 $t
/var/tmp//cc292Sve.s:23     .text.chMBObjectInit:0000000000000000 chMBObjectInit
/var/tmp//cc292Sve.s:77     .text.chMBResetI:0000000000000000 $t
/var/tmp//cc292Sve.s:84     .text.chMBResetI:0000000000000000 chMBResetI
/var/tmp//cc292Sve.s:130    .text.chMBReset:0000000000000000 $t
/var/tmp//cc292Sve.s:137    .text.chMBReset:0000000000000000 chMBReset
/var/tmp//cc292Sve.s:197    .text.chMBPostS:0000000000000000 $t
/var/tmp//cc292Sve.s:204    .text.chMBPostS:0000000000000000 chMBPostS
/var/tmp//cc292Sve.s:311    .text.chMBPost:0000000000000000 $t
/var/tmp//cc292Sve.s:318    .text.chMBPost:0000000000000000 chMBPost
/var/tmp//cc292Sve.s:374    .text.chMBPostI:0000000000000000 $t
/var/tmp//cc292Sve.s:381    .text.chMBPostI:0000000000000000 chMBPostI
/var/tmp//cc292Sve.s:466    .text.chMBPostAheadS:0000000000000000 $t
/var/tmp//cc292Sve.s:473    .text.chMBPostAheadS:0000000000000000 chMBPostAheadS
/var/tmp//cc292Sve.s:582    .text.chMBPostAhead:0000000000000000 $t
/var/tmp//cc292Sve.s:589    .text.chMBPostAhead:0000000000000000 chMBPostAhead
/var/tmp//cc292Sve.s:645    .text.chMBPostAheadI:0000000000000000 $t
/var/tmp//cc292Sve.s:652    .text.chMBPostAheadI:0000000000000000 chMBPostAheadI
/var/tmp//cc292Sve.s:740    .text.chMBFetchS:0000000000000000 $t
/var/tmp//cc292Sve.s:747    .text.chMBFetchS:0000000000000000 chMBFetchS
/var/tmp//cc292Sve.s:835    .text.chMBFetch:0000000000000000 $t
/var/tmp//cc292Sve.s:842    .text.chMBFetch:0000000000000000 chMBFetch
/var/tmp//cc292Sve.s:898    .text.chMBFetchI:0000000000000000 $t
/var/tmp//cc292Sve.s:905    .text.chMBFetchI:0000000000000000 chMBFetchI

UNDEFINED SYMBOLS
chThdDequeueAllI
chSchRescheduleS
chThdDequeueNextI
chThdEnqueueTimeoutS
