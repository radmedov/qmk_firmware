   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"chmempools.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.chPoolObjectInit,"ax",%progbits
  16              		.align	1
  17              		.global	chPoolObjectInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	chPoolObjectInit:
  24              	.LFB248:
  25              		.file 1 "lib/chibios/os/common/oslib/src/chmempools.c"
   1:lib/chibios/os/common/oslib/src/chmempools.c **** /*
   2:lib/chibios/os/common/oslib/src/chmempools.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:lib/chibios/os/common/oslib/src/chmempools.c **** 
   4:lib/chibios/os/common/oslib/src/chmempools.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/common/oslib/src/chmempools.c **** 
   6:lib/chibios/os/common/oslib/src/chmempools.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/common/oslib/src/chmempools.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/common/oslib/src/chmempools.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/common/oslib/src/chmempools.c ****     (at your option) any later version.
  10:lib/chibios/os/common/oslib/src/chmempools.c **** 
  11:lib/chibios/os/common/oslib/src/chmempools.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/common/oslib/src/chmempools.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/common/oslib/src/chmempools.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/common/oslib/src/chmempools.c ****     GNU General Public License for more details.
  15:lib/chibios/os/common/oslib/src/chmempools.c **** 
  16:lib/chibios/os/common/oslib/src/chmempools.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/common/oslib/src/chmempools.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/common/oslib/src/chmempools.c **** */
  19:lib/chibios/os/common/oslib/src/chmempools.c **** 
  20:lib/chibios/os/common/oslib/src/chmempools.c **** /**
  21:lib/chibios/os/common/oslib/src/chmempools.c ****  * @file    chmempools.c
  22:lib/chibios/os/common/oslib/src/chmempools.c ****  * @brief   Memory Pools code.
  23:lib/chibios/os/common/oslib/src/chmempools.c ****  *
  24:lib/chibios/os/common/oslib/src/chmempools.c ****  * @addtogroup pools
  25:lib/chibios/os/common/oslib/src/chmempools.c ****  * @details Memory Pools related APIs and services.
  26:lib/chibios/os/common/oslib/src/chmempools.c ****  *          <h2>Operation mode</h2>
  27:lib/chibios/os/common/oslib/src/chmempools.c ****  *          The Memory Pools APIs allow to allocate/free fixed size objects in
  28:lib/chibios/os/common/oslib/src/chmempools.c ****  *          <b>constant time</b> and reliably without memory fragmentation
  29:lib/chibios/os/common/oslib/src/chmempools.c ****  *          problems.<br>
  30:lib/chibios/os/common/oslib/src/chmempools.c ****  *          Memory Pools do not enforce any alignment constraint on the
  31:lib/chibios/os/common/oslib/src/chmempools.c ****  *          contained object however the objects must be properly aligned
  32:lib/chibios/os/common/oslib/src/chmempools.c ****  *          to contain a pointer to void.
  33:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     In order to use the memory pools APIs the @p CH_CFG_USE_MEMPOOLS option
  34:lib/chibios/os/common/oslib/src/chmempools.c ****  *          must be enabled in @p chconf.h.
  35:lib/chibios/os/common/oslib/src/chmempools.c ****  * @note    Compatible with RT and NIL.
  36:lib/chibios/os/common/oslib/src/chmempools.c ****  * @{
  37:lib/chibios/os/common/oslib/src/chmempools.c ****  */
  38:lib/chibios/os/common/oslib/src/chmempools.c **** 
  39:lib/chibios/os/common/oslib/src/chmempools.c **** #include "ch.h"
  40:lib/chibios/os/common/oslib/src/chmempools.c **** 
  41:lib/chibios/os/common/oslib/src/chmempools.c **** #if (CH_CFG_USE_MEMPOOLS == TRUE) || defined(__DOXYGEN__)
  42:lib/chibios/os/common/oslib/src/chmempools.c **** 
  43:lib/chibios/os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  44:lib/chibios/os/common/oslib/src/chmempools.c **** /* Module exported variables.                                                */
  45:lib/chibios/os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  46:lib/chibios/os/common/oslib/src/chmempools.c **** 
  47:lib/chibios/os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  48:lib/chibios/os/common/oslib/src/chmempools.c **** /* Module local types.                                                       */
  49:lib/chibios/os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  50:lib/chibios/os/common/oslib/src/chmempools.c **** 
  51:lib/chibios/os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  52:lib/chibios/os/common/oslib/src/chmempools.c **** /* Module local variables.                                                   */
  53:lib/chibios/os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  54:lib/chibios/os/common/oslib/src/chmempools.c **** 
  55:lib/chibios/os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  56:lib/chibios/os/common/oslib/src/chmempools.c **** /* Module local functions.                                                   */
  57:lib/chibios/os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  58:lib/chibios/os/common/oslib/src/chmempools.c **** 
  59:lib/chibios/os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  60:lib/chibios/os/common/oslib/src/chmempools.c **** /* Module exported functions.                                                */
  61:lib/chibios/os/common/oslib/src/chmempools.c **** /*===========================================================================*/
  62:lib/chibios/os/common/oslib/src/chmempools.c **** 
  63:lib/chibios/os/common/oslib/src/chmempools.c **** /**
  64:lib/chibios/os/common/oslib/src/chmempools.c ****  * @brief   Initializes an empty memory pool.
  65:lib/chibios/os/common/oslib/src/chmempools.c ****  *
  66:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[out] mp       pointer to a @p memory_pool_t structure
  67:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] size      the size of the objects contained in this memory pool,
  68:lib/chibios/os/common/oslib/src/chmempools.c ****  *                      the minimum accepted size is the size of a pointer to
  69:lib/chibios/os/common/oslib/src/chmempools.c ****  *                      void.
  70:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] provider  memory provider function for the memory pool or
  71:lib/chibios/os/common/oslib/src/chmempools.c ****  *                      @p NULL if the pool is not allowed to grow
  72:lib/chibios/os/common/oslib/src/chmempools.c ****  *                      automatically
  73:lib/chibios/os/common/oslib/src/chmempools.c ****  *
  74:lib/chibios/os/common/oslib/src/chmempools.c ****  * @init
  75:lib/chibios/os/common/oslib/src/chmempools.c ****  */
  76:lib/chibios/os/common/oslib/src/chmempools.c **** void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider) {
  26              		.loc 1 76 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  77:lib/chibios/os/common/oslib/src/chmempools.c **** 
  78:lib/chibios/os/common/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) && (size >= sizeof(void *)));
  79:lib/chibios/os/common/oslib/src/chmempools.c **** 
  80:lib/chibios/os/common/oslib/src/chmempools.c ****   mp->next = NULL;
  32              		.loc 1 80 0
  33 0000 0023     		movs	r3, #0
  81:lib/chibios/os/common/oslib/src/chmempools.c ****   mp->object_size = size;
  34              		.loc 1 81 0
  35 0002 C0E90031 		strd	r3, r1, [r0]
  82:lib/chibios/os/common/oslib/src/chmempools.c ****   mp->provider = provider;
  36              		.loc 1 82 0
  37 0006 8260     		str	r2, [r0, #8]
  83:lib/chibios/os/common/oslib/src/chmempools.c **** }
  38              		.loc 1 83 0
  39 0008 7047     		bx	lr
  40              		.cfi_endproc
  41              	.LFE248:
  43              		.section	.text.chPoolAllocI,"ax",%progbits
  44              		.align	1
  45              		.global	chPoolAllocI
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu softvfp
  51              	chPoolAllocI:
  52              	.LFB250:
  84:lib/chibios/os/common/oslib/src/chmempools.c **** 
  85:lib/chibios/os/common/oslib/src/chmempools.c **** /**
  86:lib/chibios/os/common/oslib/src/chmempools.c ****  * @brief   Loads a memory pool with an array of static objects.
  87:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The memory pool must be already been initialized.
  88:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The array elements must be of the right size for the specified
  89:lib/chibios/os/common/oslib/src/chmempools.c ****  *          memory pool.
  90:lib/chibios/os/common/oslib/src/chmempools.c ****  * @post    The memory pool contains the elements of the input array.
  91:lib/chibios/os/common/oslib/src/chmempools.c ****  *
  92:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
  93:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] p         pointer to the array first element
  94:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] n         number of elements in the array
  95:lib/chibios/os/common/oslib/src/chmempools.c ****  *
  96:lib/chibios/os/common/oslib/src/chmempools.c ****  * @api
  97:lib/chibios/os/common/oslib/src/chmempools.c ****  */
  98:lib/chibios/os/common/oslib/src/chmempools.c **** void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n) {
  99:lib/chibios/os/common/oslib/src/chmempools.c **** 
 100:lib/chibios/os/common/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) && (n != 0U));
 101:lib/chibios/os/common/oslib/src/chmempools.c **** 
 102:lib/chibios/os/common/oslib/src/chmempools.c ****   while (n != 0U) {
 103:lib/chibios/os/common/oslib/src/chmempools.c ****     chPoolAdd(mp, p);
 104:lib/chibios/os/common/oslib/src/chmempools.c ****     /*lint -save -e9087 [11.3] Safe cast.*/
 105:lib/chibios/os/common/oslib/src/chmempools.c ****     p = (void *)(((uint8_t *)p) + mp->object_size);
 106:lib/chibios/os/common/oslib/src/chmempools.c ****     /*lint -restore*/
 107:lib/chibios/os/common/oslib/src/chmempools.c ****     n--;
 108:lib/chibios/os/common/oslib/src/chmempools.c ****   }
 109:lib/chibios/os/common/oslib/src/chmempools.c **** }
 110:lib/chibios/os/common/oslib/src/chmempools.c **** 
 111:lib/chibios/os/common/oslib/src/chmempools.c **** /**
 112:lib/chibios/os/common/oslib/src/chmempools.c ****  * @brief   Allocates an object from a memory pool.
 113:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The memory pool must be already been initialized.
 114:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 115:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 116:lib/chibios/os/common/oslib/src/chmempools.c ****  * @return              The pointer to the allocated object.
 117:lib/chibios/os/common/oslib/src/chmempools.c ****  * @retval NULL         if pool is empty.
 118:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 119:lib/chibios/os/common/oslib/src/chmempools.c ****  * @iclass
 120:lib/chibios/os/common/oslib/src/chmempools.c ****  */
 121:lib/chibios/os/common/oslib/src/chmempools.c **** void *chPoolAllocI(memory_pool_t *mp) {
  53              		.loc 1 121 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.LVL1:
  59              		.loc 1 121 0
  60 0000 0346     		mov	r3, r0
 122:lib/chibios/os/common/oslib/src/chmempools.c ****   void *objp;
 123:lib/chibios/os/common/oslib/src/chmempools.c **** 
 124:lib/chibios/os/common/oslib/src/chmempools.c ****   chDbgCheckClassI();
 125:lib/chibios/os/common/oslib/src/chmempools.c ****   chDbgCheck(mp != NULL);
 126:lib/chibios/os/common/oslib/src/chmempools.c **** 
 127:lib/chibios/os/common/oslib/src/chmempools.c ****   objp = mp->next;
  61              		.loc 1 127 0
  62 0002 0068     		ldr	r0, [r0]
  63              	.LVL2:
 128:lib/chibios/os/common/oslib/src/chmempools.c ****   /*lint -save -e9013 [15.7] There is no else because it is not needed.*/
 129:lib/chibios/os/common/oslib/src/chmempools.c ****   if (objp != NULL) {
  64              		.loc 1 129 0
  65 0004 10B1     		cbz	r0, .L3
 130:lib/chibios/os/common/oslib/src/chmempools.c ****     mp->next = mp->next->next;
  66              		.loc 1 130 0
  67 0006 0268     		ldr	r2, [r0]
  68 0008 1A60     		str	r2, [r3]
  69 000a 7047     		bx	lr
  70              	.L3:
  71              	.LVL3:
  72              	.LBB66:
  73              	.LBB67:
 131:lib/chibios/os/common/oslib/src/chmempools.c ****   }
 132:lib/chibios/os/common/oslib/src/chmempools.c ****   else if (mp->provider != NULL) {
  74              		.loc 1 132 0
  75 000c 9A68     		ldr	r2, [r3, #8]
  76 000e 12B1     		cbz	r2, .L2
 133:lib/chibios/os/common/oslib/src/chmempools.c ****     objp = mp->provider(mp->object_size, PORT_NATURAL_ALIGN); /* TODO: Alignment is not properly ha
  77              		.loc 1 133 0
  78 0010 0421     		movs	r1, #4
  79 0012 5868     		ldr	r0, [r3, #4]
  80              	.LVL4:
  81 0014 1047     		bx	r2
  82              	.LVL5:
  83              	.L2:
  84              	.LBE67:
  85              	.LBE66:
 134:lib/chibios/os/common/oslib/src/chmempools.c ****   }
 135:lib/chibios/os/common/oslib/src/chmempools.c ****   /*lint -restore*/
 136:lib/chibios/os/common/oslib/src/chmempools.c **** 
 137:lib/chibios/os/common/oslib/src/chmempools.c ****   return objp;
 138:lib/chibios/os/common/oslib/src/chmempools.c **** }
  86              		.loc 1 138 0
  87 0016 7047     		bx	lr
  88              		.cfi_endproc
  89              	.LFE250:
  91              		.section	.text.chPoolAlloc,"ax",%progbits
  92              		.align	1
  93              		.global	chPoolAlloc
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  97              		.fpu softvfp
  99              	chPoolAlloc:
 100              	.LFB251:
 139:lib/chibios/os/common/oslib/src/chmempools.c **** 
 140:lib/chibios/os/common/oslib/src/chmempools.c **** /**
 141:lib/chibios/os/common/oslib/src/chmempools.c ****  * @brief   Allocates an object from a memory pool.
 142:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The memory pool must be already been initialized.
 143:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 144:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 145:lib/chibios/os/common/oslib/src/chmempools.c ****  * @return              The pointer to the allocated object.
 146:lib/chibios/os/common/oslib/src/chmempools.c ****  * @retval NULL         if pool is empty.
 147:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 148:lib/chibios/os/common/oslib/src/chmempools.c ****  * @api
 149:lib/chibios/os/common/oslib/src/chmempools.c ****  */
 150:lib/chibios/os/common/oslib/src/chmempools.c **** void *chPoolAlloc(memory_pool_t *mp) {
 101              		.loc 1 150 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              	.LVL6:
 106 0000 08B5     		push	{r3, lr}
 107              		.cfi_def_cfa_offset 8
 108              		.cfi_offset 3, -8
 109              		.cfi_offset 14, -4
 110              	.LBB68:
 111              	.LBB69:
 112              	.LBB70:
 113              	.LBB71:
 114              		.file 2 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @version  V4.30
   5:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
   9:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    All rights reserved.
  10:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      specific prior written permission.
  20:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    *
  21:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  35:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  38:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #endif
  45:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  46:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  47:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   @{
  51:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  52:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  53:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  54:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  58:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  60:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  62:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  63:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  64:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  65:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  69:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  71:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  73:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  74:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  75:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  76:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Control Register value
  79:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  80:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  82:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
  83:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  84:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
  86:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  87:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  88:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  89:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  90:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  94:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  96:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  98:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  99:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 100:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 101:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 105:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 107:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 108:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 109:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 111:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 112:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 113:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 114:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 115:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               APSR Register value
 118:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 119:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 121:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 122:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 123:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 125:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 126:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 127:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 128:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 129:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 132:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 134:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 136:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 137:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 138:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 140:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 141:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 142:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 143:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 144:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               PSP Register value
 147:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 148:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 150:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 151:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 154:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 155:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 156:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 157:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 158:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 162:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 164:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 166:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 167:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 168:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 169:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               MSP Register value
 172:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 173:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 175:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 176:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 177:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 179:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 180:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 181:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 182:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 183:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 188:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 190:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 192:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 193:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 194:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 195:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 199:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 201:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 202:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 203:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 205:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 206:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 207:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 208:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 209:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 213:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 215:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 217:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 218:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 219:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 221:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 222:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 226:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 228:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 230:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 231:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 232:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 233:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 237:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 239:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 241:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 243:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 244:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 248:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 250:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 251:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 252:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 254:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 255:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 257:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 115              		.loc 2 264 0
 116 0002 2023     		movs	r3, #32
 117              		.syntax unified
 118              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 119 0004 83F31188 		MSR basepri, r3
 120              	@ 0 "" 2
 121              	.LVL7:
 122              		.thumb
 123              		.syntax unified
 124              	.LBE71:
 125              	.LBE70:
 126              	.LBE69:
 127              	.LBE68:
 151:lib/chibios/os/common/oslib/src/chmempools.c ****   void *objp;
 152:lib/chibios/os/common/oslib/src/chmempools.c **** 
 153:lib/chibios/os/common/oslib/src/chmempools.c ****   chSysLock();
 154:lib/chibios/os/common/oslib/src/chmempools.c ****   objp = chPoolAllocI(mp);
 128              		.loc 1 154 0
 129 0008 FFF7FEFF 		bl	chPoolAllocI
 130              	.LVL8:
 131              	.LBB72:
 132              	.LBB73:
 133              	.LBB74:
 134              	.LBB75:
 135              	.LBB76:
 136              		.loc 2 264 0
 137 000c 0023     		movs	r3, #0
 138              		.syntax unified
 139              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 140 000e 83F31188 		MSR basepri, r3
 141              	@ 0 "" 2
 142              	.LVL9:
 143              		.thumb
 144              		.syntax unified
 145              	.LBE76:
 146              	.LBE75:
 147              	.LBE74:
 148              	.LBE73:
 149              	.LBE72:
 155:lib/chibios/os/common/oslib/src/chmempools.c ****   chSysUnlock();
 156:lib/chibios/os/common/oslib/src/chmempools.c **** 
 157:lib/chibios/os/common/oslib/src/chmempools.c ****   return objp;
 158:lib/chibios/os/common/oslib/src/chmempools.c **** }
 150              		.loc 1 158 0
 151 0012 08BD     		pop	{r3, pc}
 152              		.cfi_endproc
 153              	.LFE251:
 155              		.section	.text.chPoolFreeI,"ax",%progbits
 156              		.align	1
 157              		.global	chPoolFreeI
 158              		.syntax unified
 159              		.thumb
 160              		.thumb_func
 161              		.fpu softvfp
 163              	chPoolFreeI:
 164              	.LFB252:
 159:lib/chibios/os/common/oslib/src/chmempools.c **** 
 160:lib/chibios/os/common/oslib/src/chmempools.c **** /**
 161:lib/chibios/os/common/oslib/src/chmempools.c ****  * @brief   Releases an object into a memory pool.
 162:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The memory pool must be already been initialized.
 163:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The freed object must be of the right size for the specified
 164:lib/chibios/os/common/oslib/src/chmempools.c ****  *          memory pool.
 165:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The added object must be properly aligned.
 166:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 167:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 168:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] objp      the pointer to the object to be released
 169:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 170:lib/chibios/os/common/oslib/src/chmempools.c ****  * @iclass
 171:lib/chibios/os/common/oslib/src/chmempools.c ****  */
 172:lib/chibios/os/common/oslib/src/chmempools.c **** void chPoolFreeI(memory_pool_t *mp, void *objp) {
 165              		.loc 1 172 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169              		@ link register save eliminated.
 170              	.LVL10:
 173:lib/chibios/os/common/oslib/src/chmempools.c ****   struct pool_header *php = objp;
 174:lib/chibios/os/common/oslib/src/chmempools.c **** 
 175:lib/chibios/os/common/oslib/src/chmempools.c ****   chDbgCheckClassI();
 176:lib/chibios/os/common/oslib/src/chmempools.c ****   chDbgCheck((mp != NULL) && (objp != NULL));
 177:lib/chibios/os/common/oslib/src/chmempools.c **** 
 178:lib/chibios/os/common/oslib/src/chmempools.c ****   php->next = mp->next;
 171              		.loc 1 178 0
 172 0000 0368     		ldr	r3, [r0]
 173 0002 0B60     		str	r3, [r1]
 179:lib/chibios/os/common/oslib/src/chmempools.c ****   mp->next = php;
 174              		.loc 1 179 0
 175 0004 0160     		str	r1, [r0]
 180:lib/chibios/os/common/oslib/src/chmempools.c **** }
 176              		.loc 1 180 0
 177 0006 7047     		bx	lr
 178              		.cfi_endproc
 179              	.LFE252:
 181              		.section	.text.chPoolFree,"ax",%progbits
 182              		.align	1
 183              		.global	chPoolFree
 184              		.syntax unified
 185              		.thumb
 186              		.thumb_func
 187              		.fpu softvfp
 189              	chPoolFree:
 190              	.LFB253:
 181:lib/chibios/os/common/oslib/src/chmempools.c **** 
 182:lib/chibios/os/common/oslib/src/chmempools.c **** /**
 183:lib/chibios/os/common/oslib/src/chmempools.c ****  * @brief   Releases an object into a memory pool.
 184:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The memory pool must be already been initialized.
 185:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The freed object must be of the right size for the specified
 186:lib/chibios/os/common/oslib/src/chmempools.c ****  *          memory pool.
 187:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The added object must be properly aligned.
 188:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 189:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 190:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] objp      the pointer to the object to be released
 191:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 192:lib/chibios/os/common/oslib/src/chmempools.c ****  * @api
 193:lib/chibios/os/common/oslib/src/chmempools.c ****  */
 194:lib/chibios/os/common/oslib/src/chmempools.c **** void chPoolFree(memory_pool_t *mp, void *objp) {
 191              		.loc 1 194 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 196              	.LVL11:
 197              	.LBB77:
 198              	.LBB78:
 199              	.LBB79:
 200              	.LBB80:
 201              		.loc 2 264 0
 202 0000 2023     		movs	r3, #32
 203              		.syntax unified
 204              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 205 0002 83F31188 		MSR basepri, r3
 206              	@ 0 "" 2
 207              	.LVL12:
 208              		.thumb
 209              		.syntax unified
 210              	.LBE80:
 211              	.LBE79:
 212              	.LBE78:
 213              	.LBE77:
 214              	.LBB81:
 215              	.LBB82:
 178:lib/chibios/os/common/oslib/src/chmempools.c ****   mp->next = php;
 216              		.loc 1 178 0
 217 0006 0368     		ldr	r3, [r0]
 218 0008 0B60     		str	r3, [r1]
 179:lib/chibios/os/common/oslib/src/chmempools.c **** }
 219              		.loc 1 179 0
 220 000a 0160     		str	r1, [r0]
 221              	.LVL13:
 222              	.LBE82:
 223              	.LBE81:
 224              	.LBB83:
 225              	.LBB84:
 226              	.LBB85:
 227              	.LBB86:
 228              	.LBB87:
 229              		.loc 2 264 0
 230 000c 0023     		movs	r3, #0
 231              		.syntax unified
 232              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 233 000e 83F31188 		MSR basepri, r3
 234              	@ 0 "" 2
 235              	.LVL14:
 236              		.thumb
 237              		.syntax unified
 238              	.LBE87:
 239              	.LBE86:
 240              	.LBE85:
 241              	.LBE84:
 242              	.LBE83:
 195:lib/chibios/os/common/oslib/src/chmempools.c **** 
 196:lib/chibios/os/common/oslib/src/chmempools.c ****   chSysLock();
 197:lib/chibios/os/common/oslib/src/chmempools.c ****   chPoolFreeI(mp, objp);
 198:lib/chibios/os/common/oslib/src/chmempools.c ****   chSysUnlock();
 199:lib/chibios/os/common/oslib/src/chmempools.c **** }
 243              		.loc 1 199 0
 244 0012 7047     		bx	lr
 245              		.cfi_endproc
 246              	.LFE253:
 248              		.section	.text.chPoolLoadArray,"ax",%progbits
 249              		.align	1
 250              		.global	chPoolLoadArray
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 254              		.fpu softvfp
 256              	chPoolLoadArray:
 257              	.LFB249:
  98:lib/chibios/os/common/oslib/src/chmempools.c **** 
 258              		.loc 1 98 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              	.LVL15:
 263 0000 38B5     		push	{r3, r4, r5, lr}
 264              		.cfi_def_cfa_offset 16
 265              		.cfi_offset 3, -16
 266              		.cfi_offset 4, -12
 267              		.cfi_offset 5, -8
 268              		.cfi_offset 14, -4
 269 0002 0546     		mov	r5, r0
 270 0004 0C46     		mov	r4, r1
 271              	.LVL16:
 272              	.L12:
 102:lib/chibios/os/common/oslib/src/chmempools.c ****     chPoolAdd(mp, p);
 273              		.loc 1 102 0
 274 0006 02B9     		cbnz	r2, .L13
 109:lib/chibios/os/common/oslib/src/chmempools.c **** 
 275              		.loc 1 109 0
 276 0008 38BD     		pop	{r3, r4, r5, pc}
 277              	.LVL17:
 278              	.L13:
 279              	.LBB88:
 280              	.LBB89:
 281              		.file 3 "./lib/chibios/os/common/oslib/include/chmempools.h"
   1:./lib/chibios/os/common/oslib/include/chmempools.h **** /*
   2:./lib/chibios/os/common/oslib/include/chmempools.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:./lib/chibios/os/common/oslib/include/chmempools.h **** 
   4:./lib/chibios/os/common/oslib/include/chmempools.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/common/oslib/include/chmempools.h **** 
   6:./lib/chibios/os/common/oslib/include/chmempools.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/common/oslib/include/chmempools.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/common/oslib/include/chmempools.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/common/oslib/include/chmempools.h ****     (at your option) any later version.
  10:./lib/chibios/os/common/oslib/include/chmempools.h **** 
  11:./lib/chibios/os/common/oslib/include/chmempools.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/common/oslib/include/chmempools.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/common/oslib/include/chmempools.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/common/oslib/include/chmempools.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/common/oslib/include/chmempools.h **** 
  16:./lib/chibios/os/common/oslib/include/chmempools.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/common/oslib/include/chmempools.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/common/oslib/include/chmempools.h **** */
  19:./lib/chibios/os/common/oslib/include/chmempools.h **** 
  20:./lib/chibios/os/common/oslib/include/chmempools.h **** /**
  21:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @file    chmempools.h
  22:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @brief   Memory Pools macros and structures.
  23:./lib/chibios/os/common/oslib/include/chmempools.h ****  *
  24:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @addtogroup pools
  25:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @{
  26:./lib/chibios/os/common/oslib/include/chmempools.h ****  */
  27:./lib/chibios/os/common/oslib/include/chmempools.h **** 
  28:./lib/chibios/os/common/oslib/include/chmempools.h **** #ifndef CHMEMPOOLS_H
  29:./lib/chibios/os/common/oslib/include/chmempools.h **** #define CHMEMPOOLS_H
  30:./lib/chibios/os/common/oslib/include/chmempools.h **** 
  31:./lib/chibios/os/common/oslib/include/chmempools.h **** #if (CH_CFG_USE_MEMPOOLS == TRUE) || defined(__DOXYGEN__)
  32:./lib/chibios/os/common/oslib/include/chmempools.h **** 
  33:./lib/chibios/os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  34:./lib/chibios/os/common/oslib/include/chmempools.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  36:./lib/chibios/os/common/oslib/include/chmempools.h **** 
  37:./lib/chibios/os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  38:./lib/chibios/os/common/oslib/include/chmempools.h **** /* Module pre-compile time settings.                                         */
  39:./lib/chibios/os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  40:./lib/chibios/os/common/oslib/include/chmempools.h **** 
  41:./lib/chibios/os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  42:./lib/chibios/os/common/oslib/include/chmempools.h **** /* Derived constants and error checks.                                       */
  43:./lib/chibios/os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  44:./lib/chibios/os/common/oslib/include/chmempools.h **** 
  45:./lib/chibios/os/common/oslib/include/chmempools.h **** #if CH_CFG_USE_MEMCORE == FALSE
  46:./lib/chibios/os/common/oslib/include/chmempools.h **** #error "CH_CFG_USE_MEMPOOLS requires CH_CFG_USE_MEMCORE"
  47:./lib/chibios/os/common/oslib/include/chmempools.h **** #endif
  48:./lib/chibios/os/common/oslib/include/chmempools.h **** 
  49:./lib/chibios/os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  50:./lib/chibios/os/common/oslib/include/chmempools.h **** /* Module data structures and types.                                         */
  51:./lib/chibios/os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  52:./lib/chibios/os/common/oslib/include/chmempools.h **** 
  53:./lib/chibios/os/common/oslib/include/chmempools.h **** /**
  54:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @brief   Memory pool free object header.
  55:./lib/chibios/os/common/oslib/include/chmempools.h ****  */
  56:./lib/chibios/os/common/oslib/include/chmempools.h **** struct pool_header {
  57:./lib/chibios/os/common/oslib/include/chmempools.h ****   struct pool_header    *next;          /**< @brief Pointer to the next pool
  58:./lib/chibios/os/common/oslib/include/chmempools.h ****                                                     header in the list.     */
  59:./lib/chibios/os/common/oslib/include/chmempools.h **** };
  60:./lib/chibios/os/common/oslib/include/chmempools.h **** 
  61:./lib/chibios/os/common/oslib/include/chmempools.h **** /**
  62:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @brief   Memory pool descriptor.
  63:./lib/chibios/os/common/oslib/include/chmempools.h ****  */
  64:./lib/chibios/os/common/oslib/include/chmempools.h **** typedef struct {
  65:./lib/chibios/os/common/oslib/include/chmempools.h ****   struct pool_header    *next;          /**< @brief Pointer to the header.  */
  66:./lib/chibios/os/common/oslib/include/chmempools.h ****   size_t                object_size;    /**< @brief Memory pool objects
  67:./lib/chibios/os/common/oslib/include/chmempools.h ****                                                     size.                   */
  68:./lib/chibios/os/common/oslib/include/chmempools.h ****   memgetfunc_t          provider;       /**< @brief Memory blocks provider
  69:./lib/chibios/os/common/oslib/include/chmempools.h ****                                                     for this pool.          */
  70:./lib/chibios/os/common/oslib/include/chmempools.h **** } memory_pool_t;
  71:./lib/chibios/os/common/oslib/include/chmempools.h **** 
  72:./lib/chibios/os/common/oslib/include/chmempools.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
  73:./lib/chibios/os/common/oslib/include/chmempools.h **** /**
  74:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @brief   Guarded memory pool descriptor.
  75:./lib/chibios/os/common/oslib/include/chmempools.h ****  */
  76:./lib/chibios/os/common/oslib/include/chmempools.h **** typedef struct {
  77:./lib/chibios/os/common/oslib/include/chmempools.h ****   semaphore_t           sem;            /**< @brief Counter semaphore guarding
  78:./lib/chibios/os/common/oslib/include/chmempools.h ****                                                     the memory pool.        */
  79:./lib/chibios/os/common/oslib/include/chmempools.h ****   memory_pool_t         pool;           /**< @brief The memory pool itself. */
  80:./lib/chibios/os/common/oslib/include/chmempools.h **** } guarded_memory_pool_t;
  81:./lib/chibios/os/common/oslib/include/chmempools.h **** #endif /* CH_CFG_USE_SEMAPHORES == TRUE */
  82:./lib/chibios/os/common/oslib/include/chmempools.h **** 
  83:./lib/chibios/os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  84:./lib/chibios/os/common/oslib/include/chmempools.h **** /* Module macros.                                                            */
  85:./lib/chibios/os/common/oslib/include/chmempools.h **** /*===========================================================================*/
  86:./lib/chibios/os/common/oslib/include/chmempools.h **** 
  87:./lib/chibios/os/common/oslib/include/chmempools.h **** /**
  88:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @brief   Data part of a static memory pool initializer.
  89:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @details This macro should be used when statically initializing a
  90:./lib/chibios/os/common/oslib/include/chmempools.h ****  *          memory pool that is part of a bigger structure.
  91:./lib/chibios/os/common/oslib/include/chmempools.h ****  *
  92:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @param[in] name      the name of the memory pool variable
  93:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @param[in] size      size of the memory pool contained objects
  94:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @param[in] provider  memory provider function for the memory pool
  95:./lib/chibios/os/common/oslib/include/chmempools.h ****  */
  96:./lib/chibios/os/common/oslib/include/chmempools.h **** #define _MEMORYPOOL_DATA(name, size, provider)                              \
  97:./lib/chibios/os/common/oslib/include/chmempools.h ****   {NULL, size, provider}
  98:./lib/chibios/os/common/oslib/include/chmempools.h **** 
  99:./lib/chibios/os/common/oslib/include/chmempools.h **** /**
 100:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @brief   Static memory pool initializer.
 101:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @details Statically initialized memory pools require no explicit
 102:./lib/chibios/os/common/oslib/include/chmempools.h ****  *          initialization using @p chPoolInit().
 103:./lib/chibios/os/common/oslib/include/chmempools.h ****  *
 104:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @param[in] name      the name of the memory pool variable
 105:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @param[in] size      size of the memory pool contained objects
 106:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @param[in] provider  memory provider function for the memory pool or @p NULL
 107:./lib/chibios/os/common/oslib/include/chmempools.h ****  *                      if the pool is not allowed to grow automatically
 108:./lib/chibios/os/common/oslib/include/chmempools.h ****  */
 109:./lib/chibios/os/common/oslib/include/chmempools.h **** #define MEMORYPOOL_DECL(name, size, provider)                               \
 110:./lib/chibios/os/common/oslib/include/chmempools.h ****   memory_pool_t name = _MEMORYPOOL_DATA(name, size, provider)
 111:./lib/chibios/os/common/oslib/include/chmempools.h **** 
 112:./lib/chibios/os/common/oslib/include/chmempools.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 113:./lib/chibios/os/common/oslib/include/chmempools.h **** /**
 114:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @brief   Data part of a static guarded memory pool initializer.
 115:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @details This macro should be used when statically initializing a
 116:./lib/chibios/os/common/oslib/include/chmempools.h ****  *          memory pool that is part of a bigger structure.
 117:./lib/chibios/os/common/oslib/include/chmempools.h ****  *
 118:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @param[in] name      the name of the memory pool variable
 119:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @param[in] size      size of the memory pool contained objects
 120:./lib/chibios/os/common/oslib/include/chmempools.h ****  */
 121:./lib/chibios/os/common/oslib/include/chmempools.h **** #define _GUARDEDMEMORYPOOL_DATA(name, size) {                               \
 122:./lib/chibios/os/common/oslib/include/chmempools.h ****   _SEMAPHORE_DATA(name.sem, (cnt_t)0),                                      \
 123:./lib/chibios/os/common/oslib/include/chmempools.h ****   _MEMORYPOOL_DATA(NULL, size, NULL)                                        \
 124:./lib/chibios/os/common/oslib/include/chmempools.h **** }
 125:./lib/chibios/os/common/oslib/include/chmempools.h **** 
 126:./lib/chibios/os/common/oslib/include/chmempools.h **** /**
 127:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @brief   Static guarded memory pool initializer.
 128:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @details Statically initialized guarded memory pools require no explicit
 129:./lib/chibios/os/common/oslib/include/chmempools.h ****  *          initialization using @p chGuardedPoolInit().
 130:./lib/chibios/os/common/oslib/include/chmempools.h ****  *
 131:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @param[in] name      the name of the guarded memory pool variable
 132:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @param[in] size      size of the memory pool contained objects
 133:./lib/chibios/os/common/oslib/include/chmempools.h ****  */
 134:./lib/chibios/os/common/oslib/include/chmempools.h **** #define GUARDEDMEMORYPOOL_DECL(name, size)                                  \
 135:./lib/chibios/os/common/oslib/include/chmempools.h ****   guarded_memory_pool_t name = _GUARDEDMEMORYPOOL_DATA(name, size)
 136:./lib/chibios/os/common/oslib/include/chmempools.h **** #endif /* CH_CFG_USE_SEMAPHORES == TRUE */
 137:./lib/chibios/os/common/oslib/include/chmempools.h **** 
 138:./lib/chibios/os/common/oslib/include/chmempools.h **** /*===========================================================================*/
 139:./lib/chibios/os/common/oslib/include/chmempools.h **** /* External declarations.                                                    */
 140:./lib/chibios/os/common/oslib/include/chmempools.h **** /*===========================================================================*/
 141:./lib/chibios/os/common/oslib/include/chmempools.h **** 
 142:./lib/chibios/os/common/oslib/include/chmempools.h **** #ifdef __cplusplus
 143:./lib/chibios/os/common/oslib/include/chmempools.h **** extern "C" {
 144:./lib/chibios/os/common/oslib/include/chmempools.h **** #endif
 145:./lib/chibios/os/common/oslib/include/chmempools.h ****   void chPoolObjectInit(memory_pool_t *mp, size_t size, memgetfunc_t provider);
 146:./lib/chibios/os/common/oslib/include/chmempools.h ****   void chPoolLoadArray(memory_pool_t *mp, void *p, size_t n);
 147:./lib/chibios/os/common/oslib/include/chmempools.h ****   void *chPoolAllocI(memory_pool_t *mp);
 148:./lib/chibios/os/common/oslib/include/chmempools.h ****   void *chPoolAlloc(memory_pool_t *mp);
 149:./lib/chibios/os/common/oslib/include/chmempools.h ****   void chPoolFreeI(memory_pool_t *mp, void *objp);
 150:./lib/chibios/os/common/oslib/include/chmempools.h ****   void chPoolFree(memory_pool_t *mp, void *objp);
 151:./lib/chibios/os/common/oslib/include/chmempools.h **** #if CH_CFG_USE_SEMAPHORES == TRUE
 152:./lib/chibios/os/common/oslib/include/chmempools.h ****   void chGuardedPoolObjectInit(guarded_memory_pool_t *gmp, size_t size);
 153:./lib/chibios/os/common/oslib/include/chmempools.h ****   void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n);
 154:./lib/chibios/os/common/oslib/include/chmempools.h ****   void *chGuardedPoolAllocTimeoutS(guarded_memory_pool_t *gmp,
 155:./lib/chibios/os/common/oslib/include/chmempools.h ****                                    systime_t timeout);
 156:./lib/chibios/os/common/oslib/include/chmempools.h ****   void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 157:./lib/chibios/os/common/oslib/include/chmempools.h ****                                   systime_t timeout);
 158:./lib/chibios/os/common/oslib/include/chmempools.h ****   void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp);
 159:./lib/chibios/os/common/oslib/include/chmempools.h ****   void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp);
 160:./lib/chibios/os/common/oslib/include/chmempools.h **** #endif
 161:./lib/chibios/os/common/oslib/include/chmempools.h **** #ifdef __cplusplus
 162:./lib/chibios/os/common/oslib/include/chmempools.h **** }
 163:./lib/chibios/os/common/oslib/include/chmempools.h **** #endif
 164:./lib/chibios/os/common/oslib/include/chmempools.h **** 
 165:./lib/chibios/os/common/oslib/include/chmempools.h **** /*===========================================================================*/
 166:./lib/chibios/os/common/oslib/include/chmempools.h **** /* Module inline functions.                                                  */
 167:./lib/chibios/os/common/oslib/include/chmempools.h **** /*===========================================================================*/
 168:./lib/chibios/os/common/oslib/include/chmempools.h **** 
 169:./lib/chibios/os/common/oslib/include/chmempools.h **** /**
 170:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @brief   Adds an object to a memory pool.
 171:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @pre     The memory pool must be already been initialized.
 172:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @pre     The added object must be of the right size for the specified
 173:./lib/chibios/os/common/oslib/include/chmempools.h ****  *          memory pool.
 174:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @pre     The added object must be memory aligned to the size of
 175:./lib/chibios/os/common/oslib/include/chmempools.h ****  *          @p stkalign_t type.
 176:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @note    This function is just an alias for @p chPoolFree() and has been
 177:./lib/chibios/os/common/oslib/include/chmempools.h ****  *          added for clarity.
 178:./lib/chibios/os/common/oslib/include/chmempools.h ****  *
 179:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 180:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @param[in] objp      the pointer to the object to be added
 181:./lib/chibios/os/common/oslib/include/chmempools.h ****  *
 182:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @api
 183:./lib/chibios/os/common/oslib/include/chmempools.h ****  */
 184:./lib/chibios/os/common/oslib/include/chmempools.h **** static inline void chPoolAdd(memory_pool_t *mp, void *objp) {
 185:./lib/chibios/os/common/oslib/include/chmempools.h **** 
 186:./lib/chibios/os/common/oslib/include/chmempools.h ****   chPoolFree(mp, objp);
 282              		.loc 3 186 0
 283 000a 2146     		mov	r1, r4
 284 000c 2846     		mov	r0, r5
 285              	.LVL18:
 286 000e FFF7FEFF 		bl	chPoolFree
 287              	.LVL19:
 288              	.LBE89:
 289              	.LBE88:
 105:lib/chibios/os/common/oslib/src/chmempools.c ****     /*lint -restore*/
 290              		.loc 1 105 0
 291 0012 6B68     		ldr	r3, [r5, #4]
 107:lib/chibios/os/common/oslib/src/chmempools.c ****   }
 292              		.loc 1 107 0
 293 0014 013A     		subs	r2, r2, #1
 294              	.LVL20:
 105:lib/chibios/os/common/oslib/src/chmempools.c ****     /*lint -restore*/
 295              		.loc 1 105 0
 296 0016 1C44     		add	r4, r4, r3
 297              	.LVL21:
 298 0018 F5E7     		b	.L12
 299              		.cfi_endproc
 300              	.LFE249:
 302              		.section	.text.chGuardedPoolObjectInit,"ax",%progbits
 303              		.align	1
 304              		.global	chGuardedPoolObjectInit
 305              		.syntax unified
 306              		.thumb
 307              		.thumb_func
 308              		.fpu softvfp
 310              	chGuardedPoolObjectInit:
 311              	.LFB254:
 200:lib/chibios/os/common/oslib/src/chmempools.c **** 
 201:lib/chibios/os/common/oslib/src/chmempools.c **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 202:lib/chibios/os/common/oslib/src/chmempools.c **** /**
 203:lib/chibios/os/common/oslib/src/chmempools.c ****  * @brief   Initializes an empty guarded memory pool.
 204:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 205:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[out] gmp      pointer to a @p guarded_memory_pool_t structure
 206:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] size      the size of the objects contained in this guarded
 207:lib/chibios/os/common/oslib/src/chmempools.c ****  *                      memory pool, the minimum accepted size is the size
 208:lib/chibios/os/common/oslib/src/chmempools.c ****  *                      of a pointer to void.
 209:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 210:lib/chibios/os/common/oslib/src/chmempools.c ****  * @init
 211:lib/chibios/os/common/oslib/src/chmempools.c ****  */
 212:lib/chibios/os/common/oslib/src/chmempools.c **** void chGuardedPoolObjectInit(guarded_memory_pool_t *gmp, size_t size) {
 312              		.loc 1 212 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316              		@ link register save eliminated.
 317              	.LVL22:
 318              	.LBB90:
 319              	.LBB91:
  80:lib/chibios/os/common/oslib/src/chmempools.c ****   mp->object_size = size;
 320              		.loc 1 80 0
 321 0000 0023     		movs	r3, #0
  81:lib/chibios/os/common/oslib/src/chmempools.c ****   mp->provider = provider;
 322              		.loc 1 81 0
 323 0002 C0E90331 		strd	r3, r1, [r0, #12]
  82:lib/chibios/os/common/oslib/src/chmempools.c **** }
 324              		.loc 1 82 0
 325 0006 4361     		str	r3, [r0, #20]
 326              	.LVL23:
 327              	.LBE91:
 328              	.LBE90:
 213:lib/chibios/os/common/oslib/src/chmempools.c **** 
 214:lib/chibios/os/common/oslib/src/chmempools.c ****   chPoolObjectInit(&gmp->pool, size, NULL);
 215:lib/chibios/os/common/oslib/src/chmempools.c ****   chSemObjectInit(&gmp->sem, (cnt_t)0);
 329              		.loc 1 215 0
 330 0008 1946     		mov	r1, r3
 331              	.LVL24:
 332 000a FFF7FEBF 		b	chSemObjectInit
 333              	.LVL25:
 334              		.cfi_endproc
 335              	.LFE254:
 337              		.section	.text.chGuardedPoolAllocTimeoutS,"ax",%progbits
 338              		.align	1
 339              		.global	chGuardedPoolAllocTimeoutS
 340              		.syntax unified
 341              		.thumb
 342              		.thumb_func
 343              		.fpu softvfp
 345              	chGuardedPoolAllocTimeoutS:
 346              	.LFB256:
 216:lib/chibios/os/common/oslib/src/chmempools.c **** }
 217:lib/chibios/os/common/oslib/src/chmempools.c **** 
 218:lib/chibios/os/common/oslib/src/chmempools.c **** /**
 219:lib/chibios/os/common/oslib/src/chmempools.c ****  * @brief   Loads a guarded memory pool with an array of static objects.
 220:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must be already been initialized.
 221:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The array elements must be of the right size for the specified
 222:lib/chibios/os/common/oslib/src/chmempools.c ****  *          guarded memory pool.
 223:lib/chibios/os/common/oslib/src/chmempools.c ****  * @post    The guarded memory pool contains the elements of the input array.
 224:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 225:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 226:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] p         pointer to the array first element
 227:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] n         number of elements in the array
 228:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 229:lib/chibios/os/common/oslib/src/chmempools.c ****  * @api
 230:lib/chibios/os/common/oslib/src/chmempools.c ****  */
 231:lib/chibios/os/common/oslib/src/chmempools.c **** void chGuardedPoolLoadArray(guarded_memory_pool_t *gmp, void *p, size_t n) {
 232:lib/chibios/os/common/oslib/src/chmempools.c **** 
 233:lib/chibios/os/common/oslib/src/chmempools.c ****   chDbgCheck((gmp != NULL) && (n != 0U));
 234:lib/chibios/os/common/oslib/src/chmempools.c **** 
 235:lib/chibios/os/common/oslib/src/chmempools.c ****   while (n != 0U) {
 236:lib/chibios/os/common/oslib/src/chmempools.c ****     chGuardedPoolAdd(gmp, p);
 237:lib/chibios/os/common/oslib/src/chmempools.c ****     /*lint -save -e9087 [11.3] Safe cast.*/
 238:lib/chibios/os/common/oslib/src/chmempools.c ****     p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 239:lib/chibios/os/common/oslib/src/chmempools.c ****     /*lint -restore*/
 240:lib/chibios/os/common/oslib/src/chmempools.c ****     n--;
 241:lib/chibios/os/common/oslib/src/chmempools.c ****   }
 242:lib/chibios/os/common/oslib/src/chmempools.c **** }
 243:lib/chibios/os/common/oslib/src/chmempools.c **** 
 244:lib/chibios/os/common/oslib/src/chmempools.c **** /**
 245:lib/chibios/os/common/oslib/src/chmempools.c ****  * @brief   Allocates an object from a guarded memory pool.
 246:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must be already been initialized.
 247:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 248:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 249:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 250:lib/chibios/os/common/oslib/src/chmempools.c ****  *                      the following special values are allowed:
 251:lib/chibios/os/common/oslib/src/chmempools.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 252:lib/chibios/os/common/oslib/src/chmempools.c ****  *                      - @a TIME_INFINITE no timeout.
 253:lib/chibios/os/common/oslib/src/chmempools.c ****  *                      .
 254:lib/chibios/os/common/oslib/src/chmempools.c ****  * @return              The pointer to the allocated object.
 255:lib/chibios/os/common/oslib/src/chmempools.c ****  * @retval NULL         if the operation timed out.
 256:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 257:lib/chibios/os/common/oslib/src/chmempools.c ****  * @sclass
 258:lib/chibios/os/common/oslib/src/chmempools.c ****  */
 259:lib/chibios/os/common/oslib/src/chmempools.c **** void *chGuardedPoolAllocTimeoutS(guarded_memory_pool_t *gmp,
 260:lib/chibios/os/common/oslib/src/chmempools.c ****                                  systime_t timeout) {
 347              		.loc 1 260 0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 0
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 351              	.LVL26:
 352 0000 10B5     		push	{r4, lr}
 353              		.cfi_def_cfa_offset 8
 354              		.cfi_offset 4, -8
 355              		.cfi_offset 14, -4
 356              		.loc 1 260 0
 357 0002 0446     		mov	r4, r0
 261:lib/chibios/os/common/oslib/src/chmempools.c ****   msg_t msg;
 262:lib/chibios/os/common/oslib/src/chmempools.c **** 
 263:lib/chibios/os/common/oslib/src/chmempools.c ****   msg = chSemWaitTimeoutS(&gmp->sem, timeout);
 358              		.loc 1 263 0
 359 0004 FFF7FEFF 		bl	chSemWaitTimeoutS
 360              	.LVL27:
 264:lib/chibios/os/common/oslib/src/chmempools.c ****   if (msg != MSG_OK) {
 361              		.loc 1 264 0
 362 0008 28B9     		cbnz	r0, .L16
 265:lib/chibios/os/common/oslib/src/chmempools.c ****     return NULL;
 266:lib/chibios/os/common/oslib/src/chmempools.c ****   }
 267:lib/chibios/os/common/oslib/src/chmempools.c **** 
 268:lib/chibios/os/common/oslib/src/chmempools.c ****   return chPoolAllocI(&gmp->pool);
 363              		.loc 1 268 0
 364 000a 04F10C00 		add	r0, r4, #12
 365              	.LVL28:
 269:lib/chibios/os/common/oslib/src/chmempools.c **** }
 366              		.loc 1 269 0
 367 000e BDE81040 		pop	{r4, lr}
 368              		.cfi_remember_state
 369              		.cfi_restore 14
 370              		.cfi_restore 4
 371              		.cfi_def_cfa_offset 0
 372              	.LVL29:
 268:lib/chibios/os/common/oslib/src/chmempools.c **** }
 373              		.loc 1 268 0
 374 0012 FFF7FEBF 		b	chPoolAllocI
 375              	.LVL30:
 376              	.L16:
 377              		.cfi_restore_state
 378              		.loc 1 269 0
 379 0016 0020     		movs	r0, #0
 380              	.LVL31:
 381 0018 10BD     		pop	{r4, pc}
 382              		.cfi_endproc
 383              	.LFE256:
 385              		.section	.text.chGuardedPoolAllocTimeout,"ax",%progbits
 386              		.align	1
 387              		.global	chGuardedPoolAllocTimeout
 388              		.syntax unified
 389              		.thumb
 390              		.thumb_func
 391              		.fpu softvfp
 393              	chGuardedPoolAllocTimeout:
 394              	.LFB257:
 270:lib/chibios/os/common/oslib/src/chmempools.c **** 
 271:lib/chibios/os/common/oslib/src/chmempools.c **** /**
 272:lib/chibios/os/common/oslib/src/chmempools.c ****  * @brief   Allocates an object from a guarded memory pool.
 273:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must be already been initialized.
 274:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 275:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 276:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 277:lib/chibios/os/common/oslib/src/chmempools.c ****  *                      the following special values are allowed:
 278:lib/chibios/os/common/oslib/src/chmempools.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 279:lib/chibios/os/common/oslib/src/chmempools.c ****  *                      - @a TIME_INFINITE no timeout.
 280:lib/chibios/os/common/oslib/src/chmempools.c ****  *                      .
 281:lib/chibios/os/common/oslib/src/chmempools.c ****  * @return              The pointer to the allocated object.
 282:lib/chibios/os/common/oslib/src/chmempools.c ****  * @retval NULL         if the operation timed out.
 283:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 284:lib/chibios/os/common/oslib/src/chmempools.c ****  * @api
 285:lib/chibios/os/common/oslib/src/chmempools.c ****  */
 286:lib/chibios/os/common/oslib/src/chmempools.c **** void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
 287:lib/chibios/os/common/oslib/src/chmempools.c ****                                 systime_t timeout) {
 395              		.loc 1 287 0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 0
 398              		@ frame_needed = 0, uses_anonymous_args = 0
 399              	.LVL32:
 400 0000 08B5     		push	{r3, lr}
 401              		.cfi_def_cfa_offset 8
 402              		.cfi_offset 3, -8
 403              		.cfi_offset 14, -4
 404              	.LBB92:
 405              	.LBB93:
 406              	.LBB94:
 407              	.LBB95:
 408              		.loc 2 264 0
 409 0002 2023     		movs	r3, #32
 410              		.syntax unified
 411              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 412 0004 83F31188 		MSR basepri, r3
 413              	@ 0 "" 2
 414              	.LVL33:
 415              		.thumb
 416              		.syntax unified
 417              	.LBE95:
 418              	.LBE94:
 419              	.LBE93:
 420              	.LBE92:
 288:lib/chibios/os/common/oslib/src/chmempools.c ****   void *p;
 289:lib/chibios/os/common/oslib/src/chmempools.c **** 
 290:lib/chibios/os/common/oslib/src/chmempools.c ****   chSysLock();
 291:lib/chibios/os/common/oslib/src/chmempools.c ****   p = chGuardedPoolAllocTimeoutS(gmp, timeout);
 421              		.loc 1 291 0
 422 0008 FFF7FEFF 		bl	chGuardedPoolAllocTimeoutS
 423              	.LVL34:
 424              	.LBB96:
 425              	.LBB97:
 426              	.LBB98:
 427              	.LBB99:
 428              	.LBB100:
 429              		.loc 2 264 0
 430 000c 0023     		movs	r3, #0
 431              		.syntax unified
 432              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 433 000e 83F31188 		MSR basepri, r3
 434              	@ 0 "" 2
 435              	.LVL35:
 436              		.thumb
 437              		.syntax unified
 438              	.LBE100:
 439              	.LBE99:
 440              	.LBE98:
 441              	.LBE97:
 442              	.LBE96:
 292:lib/chibios/os/common/oslib/src/chmempools.c ****   chSysUnlock();
 293:lib/chibios/os/common/oslib/src/chmempools.c **** 
 294:lib/chibios/os/common/oslib/src/chmempools.c ****   return p;
 295:lib/chibios/os/common/oslib/src/chmempools.c **** }
 443              		.loc 1 295 0
 444 0012 08BD     		pop	{r3, pc}
 445              		.cfi_endproc
 446              	.LFE257:
 448              		.section	.text.chGuardedPoolFreeI,"ax",%progbits
 449              		.align	1
 450              		.global	chGuardedPoolFreeI
 451              		.syntax unified
 452              		.thumb
 453              		.thumb_func
 454              		.fpu softvfp
 456              	chGuardedPoolFreeI:
 457              	.LFB258:
 296:lib/chibios/os/common/oslib/src/chmempools.c **** 
 297:lib/chibios/os/common/oslib/src/chmempools.c **** /**
 298:lib/chibios/os/common/oslib/src/chmempools.c ****  * @brief   Releases an object into a guarded memory pool.
 299:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must be already been initialized.
 300:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The freed object must be of the right size for the specified
 301:lib/chibios/os/common/oslib/src/chmempools.c ****  *          guarded memory pool.
 302:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The added object must be properly aligned.
 303:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 304:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 305:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] objp      the pointer to the object to be released
 306:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 307:lib/chibios/os/common/oslib/src/chmempools.c ****  * @iclass
 308:lib/chibios/os/common/oslib/src/chmempools.c ****  */
 309:lib/chibios/os/common/oslib/src/chmempools.c **** void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {
 458              		.loc 1 309 0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 0
 461              		@ frame_needed = 0, uses_anonymous_args = 0
 462              		@ link register save eliminated.
 463              	.LVL36:
 464              	.LBB101:
 465              	.LBB102:
 178:lib/chibios/os/common/oslib/src/chmempools.c ****   mp->next = php;
 466              		.loc 1 178 0
 467 0000 C268     		ldr	r2, [r0, #12]
 468 0002 0A60     		str	r2, [r1]
 179:lib/chibios/os/common/oslib/src/chmempools.c **** }
 469              		.loc 1 179 0
 470 0004 C160     		str	r1, [r0, #12]
 471              	.LVL37:
 472              	.LBE102:
 473              	.LBE101:
 310:lib/chibios/os/common/oslib/src/chmempools.c **** 
 311:lib/chibios/os/common/oslib/src/chmempools.c ****   chPoolFreeI(&gmp->pool, objp);
 312:lib/chibios/os/common/oslib/src/chmempools.c ****   chSemSignalI(&gmp->sem);
 474              		.loc 1 312 0
 475 0006 FFF7FEBF 		b	chSemSignalI
 476              	.LVL38:
 477              		.cfi_endproc
 478              	.LFE258:
 480              		.section	.text.chGuardedPoolFree,"ax",%progbits
 481              		.align	1
 482              		.global	chGuardedPoolFree
 483              		.syntax unified
 484              		.thumb
 485              		.thumb_func
 486              		.fpu softvfp
 488              	chGuardedPoolFree:
 489              	.LFB259:
 313:lib/chibios/os/common/oslib/src/chmempools.c **** }
 314:lib/chibios/os/common/oslib/src/chmempools.c **** 
 315:lib/chibios/os/common/oslib/src/chmempools.c **** /**
 316:lib/chibios/os/common/oslib/src/chmempools.c ****  * @brief   Releases an object into a guarded memory pool.
 317:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The guarded memory pool must be already been initialized.
 318:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The freed object must be of the right size for the specified
 319:lib/chibios/os/common/oslib/src/chmempools.c ****  *          guarded memory pool.
 320:lib/chibios/os/common/oslib/src/chmempools.c ****  * @pre     The added object must be properly aligned.
 321:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 322:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 323:lib/chibios/os/common/oslib/src/chmempools.c ****  * @param[in] objp      the pointer to the object to be released
 324:lib/chibios/os/common/oslib/src/chmempools.c ****  *
 325:lib/chibios/os/common/oslib/src/chmempools.c ****  * @api
 326:lib/chibios/os/common/oslib/src/chmempools.c ****  */
 327:lib/chibios/os/common/oslib/src/chmempools.c **** void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {
 490              		.loc 1 327 0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              	.LVL39:
 495 0000 08B5     		push	{r3, lr}
 496              		.cfi_def_cfa_offset 8
 497              		.cfi_offset 3, -8
 498              		.cfi_offset 14, -4
 499              	.LBB103:
 500              	.LBB104:
 501              	.LBB105:
 502              	.LBB106:
 503              		.loc 2 264 0
 504 0002 2023     		movs	r3, #32
 505              		.syntax unified
 506              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 507 0004 83F31188 		MSR basepri, r3
 508              	@ 0 "" 2
 509              	.LVL40:
 510              		.thumb
 511              		.syntax unified
 512              	.LBE106:
 513              	.LBE105:
 514              	.LBE104:
 515              	.LBE103:
 328:lib/chibios/os/common/oslib/src/chmempools.c **** 
 329:lib/chibios/os/common/oslib/src/chmempools.c ****   chSysLock();
 330:lib/chibios/os/common/oslib/src/chmempools.c ****   chGuardedPoolFreeI(gmp, objp);
 516              		.loc 1 330 0
 517 0008 FFF7FEFF 		bl	chGuardedPoolFreeI
 518              	.LVL41:
 331:lib/chibios/os/common/oslib/src/chmempools.c ****   chSchRescheduleS();
 519              		.loc 1 331 0
 520 000c FFF7FEFF 		bl	chSchRescheduleS
 521              	.LVL42:
 522              	.LBB107:
 523              	.LBB108:
 524              	.LBB109:
 525              	.LBB110:
 526              	.LBB111:
 527              		.loc 2 264 0
 528 0010 0023     		movs	r3, #0
 529              		.syntax unified
 530              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 531 0012 83F31188 		MSR basepri, r3
 532              	@ 0 "" 2
 533              	.LVL43:
 534              		.thumb
 535              		.syntax unified
 536              	.LBE111:
 537              	.LBE110:
 538              	.LBE109:
 539              	.LBE108:
 540              	.LBE107:
 332:lib/chibios/os/common/oslib/src/chmempools.c ****   chSysUnlock();
 333:lib/chibios/os/common/oslib/src/chmempools.c **** }
 541              		.loc 1 333 0
 542 0016 08BD     		pop	{r3, pc}
 543              		.cfi_endproc
 544              	.LFE259:
 546              		.section	.text.chGuardedPoolLoadArray,"ax",%progbits
 547              		.align	1
 548              		.global	chGuardedPoolLoadArray
 549              		.syntax unified
 550              		.thumb
 551              		.thumb_func
 552              		.fpu softvfp
 554              	chGuardedPoolLoadArray:
 555              	.LFB255:
 231:lib/chibios/os/common/oslib/src/chmempools.c **** 
 556              		.loc 1 231 0
 557              		.cfi_startproc
 558              		@ args = 0, pretend = 0, frame = 0
 559              		@ frame_needed = 0, uses_anonymous_args = 0
 560              	.LVL44:
 561 0000 70B5     		push	{r4, r5, r6, lr}
 562              		.cfi_def_cfa_offset 16
 563              		.cfi_offset 4, -16
 564              		.cfi_offset 5, -12
 565              		.cfi_offset 6, -8
 566              		.cfi_offset 14, -4
 567 0002 0646     		mov	r6, r0
 568 0004 0D46     		mov	r5, r1
 569 0006 1446     		mov	r4, r2
 570              	.LVL45:
 571              	.L21:
 235:lib/chibios/os/common/oslib/src/chmempools.c ****     chGuardedPoolAdd(gmp, p);
 572              		.loc 1 235 0
 573 0008 04B9     		cbnz	r4, .L22
 242:lib/chibios/os/common/oslib/src/chmempools.c **** 
 574              		.loc 1 242 0
 575 000a 70BD     		pop	{r4, r5, r6, pc}
 576              	.LVL46:
 577              	.L22:
 578              	.LBB112:
 579              	.LBB113:
 187:./lib/chibios/os/common/oslib/include/chmempools.h **** }
 188:./lib/chibios/os/common/oslib/include/chmempools.h **** 
 189:./lib/chibios/os/common/oslib/include/chmempools.h **** /**
 190:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @brief   Adds an object to a memory pool.
 191:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @pre     The memory pool must be already been initialized.
 192:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @pre     The added object must be of the right size for the specified
 193:./lib/chibios/os/common/oslib/include/chmempools.h ****  *          memory pool.
 194:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @pre     The added object must be memory aligned to the size of
 195:./lib/chibios/os/common/oslib/include/chmempools.h ****  *          @p stkalign_t type.
 196:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @note    This function is just an alias for @p chPoolFreeI() and has been
 197:./lib/chibios/os/common/oslib/include/chmempools.h ****  *          added for clarity.
 198:./lib/chibios/os/common/oslib/include/chmempools.h ****  *
 199:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @param[in] mp        pointer to a @p memory_pool_t structure
 200:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @param[in] objp      the pointer to the object to be added
 201:./lib/chibios/os/common/oslib/include/chmempools.h ****  *
 202:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @iclass
 203:./lib/chibios/os/common/oslib/include/chmempools.h ****  */
 204:./lib/chibios/os/common/oslib/include/chmempools.h **** static inline void chPoolAddI(memory_pool_t *mp, void *objp) {
 205:./lib/chibios/os/common/oslib/include/chmempools.h **** 
 206:./lib/chibios/os/common/oslib/include/chmempools.h ****   chDbgCheckClassI();
 207:./lib/chibios/os/common/oslib/include/chmempools.h **** 
 208:./lib/chibios/os/common/oslib/include/chmempools.h ****   chPoolFreeI(mp, objp);
 209:./lib/chibios/os/common/oslib/include/chmempools.h **** }
 210:./lib/chibios/os/common/oslib/include/chmempools.h **** 
 211:./lib/chibios/os/common/oslib/include/chmempools.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 212:./lib/chibios/os/common/oslib/include/chmempools.h **** /**
 213:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @brief   Adds an object to a guarded memory pool.
 214:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @pre     The guarded memory pool must be already been initialized.
 215:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @pre     The added object must be of the right size for the specified
 216:./lib/chibios/os/common/oslib/include/chmempools.h ****  *          guarded memory pool.
 217:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @pre     The added object must be properly aligned.
 218:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @note    This function is just an alias for @p chGuardedPoolFree() and
 219:./lib/chibios/os/common/oslib/include/chmempools.h ****  *          has been added for clarity.
 220:./lib/chibios/os/common/oslib/include/chmempools.h ****  *
 221:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @param[in] gmp       pointer to a @p guarded_memory_pool_t structure
 222:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @param[in] objp      the pointer to the object to be added
 223:./lib/chibios/os/common/oslib/include/chmempools.h ****  *
 224:./lib/chibios/os/common/oslib/include/chmempools.h ****  * @api
 225:./lib/chibios/os/common/oslib/include/chmempools.h ****  */
 226:./lib/chibios/os/common/oslib/include/chmempools.h **** static inline void chGuardedPoolAdd(guarded_memory_pool_t *gmp, void *objp) {
 227:./lib/chibios/os/common/oslib/include/chmempools.h **** 
 228:./lib/chibios/os/common/oslib/include/chmempools.h ****   chGuardedPoolFree(gmp, objp);
 580              		.loc 3 228 0
 581 000c 2946     		mov	r1, r5
 582 000e 3046     		mov	r0, r6
 583 0010 FFF7FEFF 		bl	chGuardedPoolFree
 584              	.LVL47:
 585              	.LBE113:
 586              	.LBE112:
 238:lib/chibios/os/common/oslib/src/chmempools.c ****     /*lint -restore*/
 587              		.loc 1 238 0
 588 0014 3369     		ldr	r3, [r6, #16]
 240:lib/chibios/os/common/oslib/src/chmempools.c ****   }
 589              		.loc 1 240 0
 590 0016 013C     		subs	r4, r4, #1
 591              	.LVL48:
 238:lib/chibios/os/common/oslib/src/chmempools.c ****     /*lint -restore*/
 592              		.loc 1 238 0
 593 0018 1D44     		add	r5, r5, r3
 594              	.LVL49:
 595 001a F5E7     		b	.L21
 596              		.cfi_endproc
 597              	.LFE255:
 599              		.text
 600              	.Letext0:
 601              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 602              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 603              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 604              		.file 7 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 605              		.file 8 "./lib/chibios/os/rt/include/chsystypes.h"
 606              		.file 9 "./lib/chibios/os/rt/include/chschd.h"
 607              		.file 10 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 608              		.file 11 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 609              		.file 12 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 610              		.file 13 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 611              		.file 14 "./lib/chibios/os/rt/include/chtm.h"
 612              		.file 15 "./lib/chibios/os/rt/include/chsem.h"
 613              		.file 16 "./lib/chibios/os/rt/include/chmtx.h"
 614              		.file 17 "./lib/chibios/os/rt/include/chsys.h"
 615              		.file 18 "./lib/chibios/os/rt/include/chregistry.h"
 616              		.file 19 "./lib/chibios/os/common/oslib/include/chmemcore.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmempools.c
/var/tmp//ccQ0GYgV.s:16     .text.chPoolObjectInit:0000000000000000 $t
/var/tmp//ccQ0GYgV.s:23     .text.chPoolObjectInit:0000000000000000 chPoolObjectInit
/var/tmp//ccQ0GYgV.s:44     .text.chPoolAllocI:0000000000000000 $t
/var/tmp//ccQ0GYgV.s:51     .text.chPoolAllocI:0000000000000000 chPoolAllocI
/var/tmp//ccQ0GYgV.s:92     .text.chPoolAlloc:0000000000000000 $t
/var/tmp//ccQ0GYgV.s:99     .text.chPoolAlloc:0000000000000000 chPoolAlloc
/var/tmp//ccQ0GYgV.s:156    .text.chPoolFreeI:0000000000000000 $t
/var/tmp//ccQ0GYgV.s:163    .text.chPoolFreeI:0000000000000000 chPoolFreeI
/var/tmp//ccQ0GYgV.s:182    .text.chPoolFree:0000000000000000 $t
/var/tmp//ccQ0GYgV.s:189    .text.chPoolFree:0000000000000000 chPoolFree
/var/tmp//ccQ0GYgV.s:249    .text.chPoolLoadArray:0000000000000000 $t
/var/tmp//ccQ0GYgV.s:256    .text.chPoolLoadArray:0000000000000000 chPoolLoadArray
/var/tmp//ccQ0GYgV.s:303    .text.chGuardedPoolObjectInit:0000000000000000 $t
/var/tmp//ccQ0GYgV.s:310    .text.chGuardedPoolObjectInit:0000000000000000 chGuardedPoolObjectInit
/var/tmp//ccQ0GYgV.s:338    .text.chGuardedPoolAllocTimeoutS:0000000000000000 $t
/var/tmp//ccQ0GYgV.s:345    .text.chGuardedPoolAllocTimeoutS:0000000000000000 chGuardedPoolAllocTimeoutS
/var/tmp//ccQ0GYgV.s:386    .text.chGuardedPoolAllocTimeout:0000000000000000 $t
/var/tmp//ccQ0GYgV.s:393    .text.chGuardedPoolAllocTimeout:0000000000000000 chGuardedPoolAllocTimeout
/var/tmp//ccQ0GYgV.s:449    .text.chGuardedPoolFreeI:0000000000000000 $t
/var/tmp//ccQ0GYgV.s:456    .text.chGuardedPoolFreeI:0000000000000000 chGuardedPoolFreeI
/var/tmp//ccQ0GYgV.s:481    .text.chGuardedPoolFree:0000000000000000 $t
/var/tmp//ccQ0GYgV.s:488    .text.chGuardedPoolFree:0000000000000000 chGuardedPoolFree
/var/tmp//ccQ0GYgV.s:547    .text.chGuardedPoolLoadArray:0000000000000000 $t
/var/tmp//ccQ0GYgV.s:554    .text.chGuardedPoolLoadArray:0000000000000000 chGuardedPoolLoadArray

UNDEFINED SYMBOLS
chSemObjectInit
chSemWaitTimeoutS
chSemSignalI
chSchRescheduleS
