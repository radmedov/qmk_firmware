   1              	# 1 "lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S"
   1              	/*
   0              	
   0              	
   1              	/* Address for jumping to bootloader on STM32 chips. */
   1              	/*
   2              	Copyright 2012 Jun Wako <wakojun@gmail.com>
   3              	
   4              	This program is free software: you can redistribute it and/or modify
   5              	it under the terms of the GNU General Public License as published by
   6              	the Free Software Foundation, either version 2 of the License, or
   7              	(at your option) any later version.
   8              	
   9              	This program is distributed in the hope that it will be useful,
  10              	but WITHOUT ANY WARRANTY; without even the implied warranty of
  11              	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12              	GNU General Public License for more details.
  13              	
  14              	You should have received a copy of the GNU General Public License
  15              	along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16              	*/
  17              	
  18              	#ifndef CONFIG_H
  19              	#define CONFIG_H
  20              	
  21              	#include "config_common.h"
   1              	/* Copyright 2015-2018 Jack Humbert
   2              	 *
   3              	 * This program is free software: you can redistribute it and/or modify
   4              	 * it under the terms of the GNU General Public License as published by
   5              	 * the Free Software Foundation, either version 2 of the License, or
   6              	 * (at your option) any later version.
   7              	 *
   8              	 * This program is distributed in the hope that it will be useful,
   9              	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10              	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11              	 * GNU General Public License for more details.
  12              	 *
  13              	 * You should have received a copy of the GNU General Public License
  14              	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15              	 */
  16              	
  17              	#pragma once
  18              	
  19              	/* diode directions */
  20              	#define COL2ROW 0
  21              	#define ROW2COL 1
  22              	#define CUSTOM_MATRIX 2 /* Disables built-in matrix scanning code */
  23              	
  24              	// useful for direct pin mapping
  25              	#define NO_PIN (~0)
  26              	
  27              	#ifdef __AVR__
  28              	#    ifndef __ASSEMBLER__
  29              	#        include <avr/io.h>
  30              	#    endif
  31              	#    define PORT_SHIFTER 4  // this may be 4 for all AVR chips
  32              	
  33              	// If you want to add more to this list, reference the PINx definitions in these header
  34              	// files: https://github.com/vancegroup-mirrors/avr-libc/tree/master/avr-libc/include/avr
  35              	
  36              	#    if defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__)
  37              	#        define ADDRESS_BASE 0x00
  38              	#        define PINB_ADDRESS 0x3
  39              	#        define PINC_ADDRESS 0x6
  40              	#        define PIND_ADDRESS 0x9
  41              	#        define PINE_ADDRESS 0xC
  42              	#        define PINF_ADDRESS 0xF
  43              	#    elif defined(__AVR_ATmega32U2__) || defined(__AVR_ATmega16U2__)
  44              	#        define ADDRESS_BASE 0x00
  45              	#        define PINB_ADDRESS 0x3
  46              	#        define PINC_ADDRESS 0x6
  47              	#        define PIND_ADDRESS 0x9
  48              	#    elif defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__)
  49              	#        define ADDRESS_BASE 0x00
  50              	#        define PINA_ADDRESS 0x0
  51              	#        define PINB_ADDRESS 0x3
  52              	#        define PINC_ADDRESS 0x6
  53              	#        define PIND_ADDRESS 0x9
  54              	#        define PINE_ADDRESS 0xC
  55              	#        define PINF_ADDRESS 0xF
  56              	#    elif defined(__AVR_ATmega32A__)
  57              	#        define ADDRESS_BASE 0x10
  58              	#        define PIND_ADDRESS 0x0
  59              	#        define PINC_ADDRESS 0x3
  60              	#        define PINB_ADDRESS 0x6
  61              	#        define PINA_ADDRESS 0x9
  62              	#    elif defined(__AVR_ATmega328P__)
  63              	#        define ADDRESS_BASE 0x00
  64              	#        define PINB_ADDRESS 0x3
  65              	#        define PINC_ADDRESS 0x6
  66              	#        define PIND_ADDRESS 0x9
  67              	#    else
  68              	#        error "Pins are not defined"
  69              	#    endif
  70              	
  71              	/* I/O pins */
  72              	#    define PINDEF(port, pin) ((PIN##port##_ADDRESS << PORT_SHIFTER) | pin)
  73              	
  74              	#    ifdef PORTA
  75              	#        define A0 PINDEF(A, 0)
  76              	#        define A1 PINDEF(A, 1)
  77              	#        define A2 PINDEF(A, 2)
  78              	#        define A3 PINDEF(A, 3)
  79              	#        define A4 PINDEF(A, 4)
  80              	#        define A5 PINDEF(A, 5)
  81              	#        define A6 PINDEF(A, 6)
  82              	#        define A7 PINDEF(A, 7)
  83              	#    endif
  84              	#    ifdef PORTB
  85              	#        define B0 PINDEF(B, 0)
  86              	#        define B1 PINDEF(B, 1)
  87              	#        define B2 PINDEF(B, 2)
  88              	#        define B3 PINDEF(B, 3)
  89              	#        define B4 PINDEF(B, 4)
  90              	#        define B5 PINDEF(B, 5)
  91              	#        define B6 PINDEF(B, 6)
  92              	#        define B7 PINDEF(B, 7)
  93              	#    endif
  94              	#    ifdef PORTC
  95              	#        define C0 PINDEF(C, 0)
  96              	#        define C1 PINDEF(C, 1)
  97              	#        define C2 PINDEF(C, 2)
  98              	#        define C3 PINDEF(C, 3)
  99              	#        define C4 PINDEF(C, 4)
 100              	#        define C5 PINDEF(C, 5)
 101              	#        define C6 PINDEF(C, 6)
 102              	#        define C7 PINDEF(C, 7)
 103              	#    endif
 104              	#    ifdef PORTD
 105              	#        define D0 PINDEF(D, 0)
 106              	#        define D1 PINDEF(D, 1)
 107              	#        define D2 PINDEF(D, 2)
 108              	#        define D3 PINDEF(D, 3)
 109              	#        define D4 PINDEF(D, 4)
 110              	#        define D5 PINDEF(D, 5)
 111              	#        define D6 PINDEF(D, 6)
 112              	#        define D7 PINDEF(D, 7)
 113              	#    endif
 114              	#    ifdef PORTE
 115              	#        define E0 PINDEF(E, 0)
 116              	#        define E1 PINDEF(E, 1)
 117              	#        define E2 PINDEF(E, 2)
 118              	#        define E3 PINDEF(E, 3)
 119              	#        define E4 PINDEF(E, 4)
 120              	#        define E5 PINDEF(E, 5)
 121              	#        define E6 PINDEF(E, 6)
 122              	#        define E7 PINDEF(E, 7)
 123              	#    endif
 124              	#    ifdef PORTF
 125              	#        define F0 PINDEF(F, 0)
 126              	#        define F1 PINDEF(F, 1)
 127              	#        define F2 PINDEF(F, 2)
 128              	#        define F3 PINDEF(F, 3)
 129              	#        define F4 PINDEF(F, 4)
 130              	#        define F5 PINDEF(F, 5)
 131              	#        define F6 PINDEF(F, 6)
 132              	#        define F7 PINDEF(F, 7)
 133              	#    endif
 134              	
 135              	#    ifndef __ASSEMBLER__
 136              	#        define _PIN_ADDRESS(p, offset) _SFR_IO8(ADDRESS_BASE + (p >> PORT_SHIFTER) + offset)
 137              	// Port X Input Pins Address
 138              	#        define PINx_ADDRESS(p) _PIN_ADDRESS(p, 0)
 139              	// Port X Data Direction Register,  0:input 1:output
 140              	#        define DDRx_ADDRESS(p) _PIN_ADDRESS(p, 1)
 141              	// Port X Data Register
 142              	#        define PORTx_ADDRESS(p) _PIN_ADDRESS(p, 2)
 143              	#    endif
 144              	
 145              	#elif defined(PROTOCOL_CHIBIOS)
 146              	// Defines mapping for Proton C replacement
 147              	#    ifdef CONVERT_TO_PROTON_C
 148              	// Left side (front)
 149              	#        define D3 PAL_LINE(GPIOA, 9)
 150              	#        define D2 PAL_LINE(GPIOA, 10)
 151              	//      GND
 152              	//      GND
 153              	#        define D1 PAL_LINE(GPIOB, 7)
 154              	#        define D0 PAL_LINE(GPIOB, 6)
 155              	#        define D4 PAL_LINE(GPIOB, 5)
 156              	#        define C6 PAL_LINE(GPIOB, 4)
 157              	#        define D7 PAL_LINE(GPIOB, 3)
 158              	#        define E6 PAL_LINE(GPIOB, 2)
 159              	#        define B4 PAL_LINE(GPIOB, 1)
 160              	#        define B5 PAL_LINE(GPIOB, 0)
 161              	
 162              	// Right side (front)
 163              	//      RAW
 164              	//      GND
 165              	//      RESET
 166              	//      VCC
 167              	#        define F4 PAL_LINE(GPIOA, 2)
 168              	#        define F5 PAL_LINE(GPIOA, 1)
 169              	#        define F6 PAL_LINE(GPIOA, 0)
 170              	#        define F7 PAL_LINE(GPIOB, 8)
 171              	#        define B1 PAL_LINE(GPIOB, 13)
 172              	#        define B3 PAL_LINE(GPIOB, 14)
 173              	#        define B2 PAL_LINE(GPIOB, 15)
 174              	#        define B6 PAL_LINE(GPIOB, 9)
 175              	
 176              	// LEDs (only D5/C13 uses an actual LED)
 177              	#        ifdef CONVERT_TO_PROTON_C_RXLED
 178              	#            define D5 PAL_LINE(GPIOC, 13)
 179              	#            define B0 PAL_LINE(GPIOC, 13)
 180              	#        else
 181              	#            define D5 PAL_LINE(GPIOC, 13)
 182              	#            define B0 PAL_LINE(GPIOC, 14)
 183              	#        endif
 184              	#    else
 185              	#        define A0 PAL_LINE(GPIOA, 0)
 186              	#        define A1 PAL_LINE(GPIOA, 1)
 187              	#        define A2 PAL_LINE(GPIOA, 2)
 188              	#        define A3 PAL_LINE(GPIOA, 3)
 189              	#        define A4 PAL_LINE(GPIOA, 4)
 190              	#        define A5 PAL_LINE(GPIOA, 5)
 191              	#        define A6 PAL_LINE(GPIOA, 6)
 192              	#        define A7 PAL_LINE(GPIOA, 7)
 193              	#        define A8 PAL_LINE(GPIOA, 8)
 194              	#        define A9 PAL_LINE(GPIOA, 9)
 195              	#        define A10 PAL_LINE(GPIOA, 10)
 196              	#        define A11 PAL_LINE(GPIOA, 11)
 197              	#        define A12 PAL_LINE(GPIOA, 12)
 198              	#        define A13 PAL_LINE(GPIOA, 13)
 199              	#        define A14 PAL_LINE(GPIOA, 14)
 200              	#        define A15 PAL_LINE(GPIOA, 15)
 201              	#        define B0 PAL_LINE(GPIOB, 0)
 202              	#        define B1 PAL_LINE(GPIOB, 1)
 203              	#        define B2 PAL_LINE(GPIOB, 2)
 204              	#        define B3 PAL_LINE(GPIOB, 3)
 205              	#        define B4 PAL_LINE(GPIOB, 4)
 206              	#        define B5 PAL_LINE(GPIOB, 5)
 207              	#        define B6 PAL_LINE(GPIOB, 6)
 208              	#        define B7 PAL_LINE(GPIOB, 7)
 209              	#        define B8 PAL_LINE(GPIOB, 8)
 210              	#        define B9 PAL_LINE(GPIOB, 9)
 211              	#        define B10 PAL_LINE(GPIOB, 10)
 212              	#        define B11 PAL_LINE(GPIOB, 11)
 213              	#        define B12 PAL_LINE(GPIOB, 12)
 214              	#        define B13 PAL_LINE(GPIOB, 13)
 215              	#        define B14 PAL_LINE(GPIOB, 14)
 216              	#        define B15 PAL_LINE(GPIOB, 15)
 217              	#        define B16 PAL_LINE(GPIOB, 16)
 218              	#        define B17 PAL_LINE(GPIOB, 17)
 219              	#        define C0 PAL_LINE(GPIOC, 0)
 220              	#        define C1 PAL_LINE(GPIOC, 1)
 221              	#        define C2 PAL_LINE(GPIOC, 2)
 222              	#        define C3 PAL_LINE(GPIOC, 3)
 223              	#        define C4 PAL_LINE(GPIOC, 4)
 224              	#        define C5 PAL_LINE(GPIOC, 5)
 225              	#        define C6 PAL_LINE(GPIOC, 6)
 226              	#        define C7 PAL_LINE(GPIOC, 7)
 227              	#        define C8 PAL_LINE(GPIOC, 8)
 228              	#        define C9 PAL_LINE(GPIOC, 9)
 229              	#        define C10 PAL_LINE(GPIOC, 10)
 230              	#        define C11 PAL_LINE(GPIOC, 11)
 231              	#        define C12 PAL_LINE(GPIOC, 12)
 232              	#        define C13 PAL_LINE(GPIOC, 13)
 233              	#        define C14 PAL_LINE(GPIOC, 14)
 234              	#        define C15 PAL_LINE(GPIOC, 15)
 235              	#        define D0 PAL_LINE(GPIOD, 0)
 236              	#        define D1 PAL_LINE(GPIOD, 1)
 237              	#        define D2 PAL_LINE(GPIOD, 2)
 238              	#        define D3 PAL_LINE(GPIOD, 3)
 239              	#        define D4 PAL_LINE(GPIOD, 4)
 240              	#        define D5 PAL_LINE(GPIOD, 5)
 241              	#        define D6 PAL_LINE(GPIOD, 6)
 242              	#        define D7 PAL_LINE(GPIOD, 7)
 243              	#        define D8 PAL_LINE(GPIOD, 8)
 244              	#        define D9 PAL_LINE(GPIOD, 9)
 245              	#        define D10 PAL_LINE(GPIOD, 10)
 246              	#        define D11 PAL_LINE(GPIOD, 11)
 247              	#        define D12 PAL_LINE(GPIOD, 12)
 248              	#        define D13 PAL_LINE(GPIOD, 13)
 249              	#        define D14 PAL_LINE(GPIOD, 14)
 250              	#        define D15 PAL_LINE(GPIOD, 15)
 251              	#        define E0 PAL_LINE(GPIOE, 0)
 252              	#        define E1 PAL_LINE(GPIOE, 1)
 253              	#        define E2 PAL_LINE(GPIOE, 2)
 254              	#        define E3 PAL_LINE(GPIOE, 3)
 255              	#        define E4 PAL_LINE(GPIOE, 4)
 256              	#        define E5 PAL_LINE(GPIOE, 5)
 257              	#        define E6 PAL_LINE(GPIOE, 6)
 258              	#        define E7 PAL_LINE(GPIOE, 7)
 259              	#        define E8 PAL_LINE(GPIOE, 8)
 260              	#        define E9 PAL_LINE(GPIOE, 9)
 261              	#        define E10 PAL_LINE(GPIOE, 10)
 262              	#        define E11 PAL_LINE(GPIOE, 11)
 263              	#        define E12 PAL_LINE(GPIOE, 12)
 264              	#        define E13 PAL_LINE(GPIOE, 13)
 265              	#        define E14 PAL_LINE(GPIOE, 14)
 266              	#        define E15 PAL_LINE(GPIOE, 15)
 267              	#        define F0 PAL_LINE(GPIOF, 0)
 268              	#        define F1 PAL_LINE(GPIOF, 1)
 269              	#        define F2 PAL_LINE(GPIOF, 2)
 270              	#        define F3 PAL_LINE(GPIOF, 3)
 271              	#        define F4 PAL_LINE(GPIOF, 4)
 272              	#        define F5 PAL_LINE(GPIOF, 5)
 273              	#        define F6 PAL_LINE(GPIOF, 6)
 274              	#        define F7 PAL_LINE(GPIOF, 7)
 275              	#        define F8 PAL_LINE(GPIOF, 8)
 276              	#        define F9 PAL_LINE(GPIOF, 9)
 277              	#        define F10 PAL_LINE(GPIOF, 10)
 278              	#        define F11 PAL_LINE(GPIOF, 11)
 279              	#        define F12 PAL_LINE(GPIOF, 12)
 280              	#        define F13 PAL_LINE(GPIOF, 13)
 281              	#        define F14 PAL_LINE(GPIOF, 14)
 282              	#        define F15 PAL_LINE(GPIOF, 15)
 283              	#    endif
 284              	#endif
 285              	
 286              	/* USART configuration */
 287              	#ifdef BLUETOOTH_ENABLE
 288              	#    ifdef __AVR_ATmega32U4__
 289              	#        define SERIAL_UART_BAUD 9600
 290              	#        define SERIAL_UART_DATA UDR1
 291              	#        define SERIAL_UART_UBRR (F_CPU / (16UL * SERIAL_UART_BAUD) - 1)
 292              	#        define SERIAL_UART_RXD_VECT USART1_RX_vect
 293              	#        define SERIAL_UART_TXD_READY (UCSR1A & _BV(UDRE1))
 294              	#        define SERIAL_UART_INIT()                  \
 295              	            do {                                    \
 296              	                /* baud rate */                     \
 297              	                UBRR1L = SERIAL_UART_UBRR;          \
 298              	                /* baud rate */                     \
 299              	                UBRR1H = SERIAL_UART_UBRR >> 8;     \
 300              	                /* enable TX */                     \
 301              	                UCSR1B = _BV(TXEN1);                \
 302              	                /* 8-bit data */                    \
 303              	                UCSR1C = _BV(UCSZ11) | _BV(UCSZ10); \
 304              	                sei();                              \
 305              	            } while (0)
 306              	#    else
 307              	#        error "USART configuration is needed."
 308              	#    endif
 309              	#endif
 310              	
 311              	#define API_SYSEX_MAX_SIZE 32
 312              	
 313              	#include "song_list.h"
   1              	/* Any song or sound without a license explicitly stated is:
   2              	 *
   3              	 * Copyright 2016 Jack Humbert
   4              	 * Copyright 2017 Zach White
   5              	 *
   6              	 * This program is free software: you can redistribute it and/or modify
   7              	 * it under the terms of the GNU General Public License as published by
   8              	 * the Free Software Foundation, either version 2 of the License, or
   9              	 * (at your option) any later version.
  10              	 *
  11              	 * This program is distributed in the hope that it will be useful,
  12              	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13              	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14              	 * GNU General Public License for more details.
  15              	 *
  16              	 * You should have received a copy of the GNU General Public License
  17              	 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18              	 */
  19              	#pragma once
  20              	
  21              	#include "musical_notes.h"
   1              	/* Copyright 2016 Jack Humbert
  22              	
  22              	
   1              	/*
   2              	    ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3              	
   4              	    Licensed under the Apache License, Version 2.0 (the "License");
   5              	    you may not use this file except in compliance with the License.
   6              	    You may obtain a copy of the License at
   7              	
   8              	        http://www.apache.org/licenses/LICENSE-2.0
   9              	
  10              	    Unless required by applicable law or agreed to in writing, software
  11              	    distributed under the License is distributed on an "AS IS" BASIS,
  12              	    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13              	    See the License for the specific language governing permissions and
  14              	    limitations under the License.
  15              	*/
  16              	
  17              	/**
  18              	 * @file    crt0_v7m.S
  19              	 * @brief   Generic ARMv7-M (Cortex-M3/M4/M7) startup file for ChibiOS.
  20              	 *
  21              	 * @addtogroup ARMCMx_GCC_STARTUP_V7M
  22              	 * @{
  23              	 */
  24              	
  25              	/*===========================================================================*/
  26              	/* Module constants.                                                         */
  27              	/*===========================================================================*/
  28              	
  29              	#if !defined(FALSE) || defined(__DOXYGEN__)
  30              	#define FALSE                               0
  31              	#endif
  32              	
  33              	#if !defined(TRUE) || defined(__DOXYGEN__)
  34              	#define TRUE                                1
  35              	#endif
  36              	
  37              	#define CONTROL_MODE_PRIVILEGED             0
  38              	#define CONTROL_MODE_UNPRIVILEGED           1
  39              	#define CONTROL_USE_MSP                     0
  40              	#define CONTROL_USE_PSP                     2
  41              	#define CONTROL_FPCA                        4
  42              	
  43              	#define FPCCR_ASPEN                         (1 << 31)
  44              	#define FPCCR_LSPEN                         (1 << 30)
  45              	
  46              	#define SCB_VTOR                            0xE000ED08
  47              	#define SCB_CPACR                           0xE000ED88
  48              	#define SCB_FPCCR                           0xE000EF34
  49              	#define SCB_FPDSCR                          0xE000EF3C
  50              	
  51              	/*===========================================================================*/
  52              	/* Module pre-compile time settings.                                         */
  53              	/*===========================================================================*/
  54              	
  55              	/**
  56              	 * @brief   VTOR special register initialization.
  57              	 * @details VTOR is initialized to point to the vectors table.
  58              	 */
  59              	#if !defined(CRT0_VTOR_INIT) || defined(__DOXYGEN__)
  60              	#define CRT0_VTOR_INIT                      TRUE
  61              	#endif
  62              	
  63              	/**
  64              	 * @brief   FPU initialization switch.
  65              	 */
  66              	#if !defined(CRT0_INIT_FPU) || defined(__DOXYGEN__)
  67              	#if defined(CORTEX_USE_FPU) || defined(__DOXYGEN__)
  68              	#define CRT0_INIT_FPU                       CORTEX_USE_FPU
  69              	#else
  70              	#define CRT0_INIT_FPU                       FALSE
  71              	#endif
  72              	#endif
  73              	
  74              	/**
  75              	 * @brief   Control special register initialization value.
  76              	 * @details The system is setup to run in privileged mode using the PSP
  77              	 *          stack (dual stack mode).
  78              	 */
  79              	#if !defined(CRT0_CONTROL_INIT) || defined(__DOXYGEN__)
  80              	#define CRT0_CONTROL_INIT                   (CONTROL_USE_PSP |              \
  81              	                                             CONTROL_MODE_PRIVILEGED)
  82              	#endif
  83              	
  84              	/**
  85              	 * @brief   Core initialization switch.
  86              	 */
  87              	#if !defined(CRT0_INIT_CORE) || defined(__DOXYGEN__)
  88              	#define CRT0_INIT_CORE                      TRUE
  89              	#endif
  90              	
  91              	/**
  92              	 * @brief   Stack segments initialization switch.
  93              	 */
  94              	#if !defined(CRT0_STACKS_FILL_PATTERN) || defined(__DOXYGEN__)
  95              	#define CRT0_STACKS_FILL_PATTERN            0x55555555
  96              	#endif
  97              	
  98              	/**
  99              	 * @brief   Stack segments initialization switch.
 100              	 */
 101              	#if !defined(CRT0_INIT_STACKS) || defined(__DOXYGEN__)
 102              	#define CRT0_INIT_STACKS                    TRUE
 103              	#endif
 104              	
 105              	/**
 106              	 * @brief   DATA segment initialization switch.
 107              	 */
 108              	#if !defined(CRT0_INIT_DATA) || defined(__DOXYGEN__)
 109              	#define CRT0_INIT_DATA                      TRUE
 110              	#endif
 111              	
 112              	/**
 113              	 * @brief   BSS segment initialization switch.
 114              	 */
 115              	#if !defined(CRT0_INIT_BSS) || defined(__DOXYGEN__)
 116              	#define CRT0_INIT_BSS                       TRUE
 117              	#endif
 118              	
 119              	/**
 120              	 * @brief   RAM areas initialization switch.
 121              	 */
 122              	#if !defined(CRT0_INIT_RAM_AREAS) || defined(__DOXYGEN__)
 123              	#define CRT0_INIT_RAM_AREAS                 TRUE
 124              	#endif
 125              	
 126              	/**
 127              	 * @brief   Constructors invocation switch.
 128              	 */
 129              	#if !defined(CRT0_CALL_CONSTRUCTORS) || defined(__DOXYGEN__)
 130              	#define CRT0_CALL_CONSTRUCTORS              TRUE
 131              	#endif
 132              	
 133              	/**
 134              	 * @brief   Destructors invocation switch.
 135              	 */
 136              	#if !defined(CRT0_CALL_DESTRUCTORS) || defined(__DOXYGEN__)
 137              	#define CRT0_CALL_DESTRUCTORS               TRUE
 138              	#endif
 139              	
 140              	/**
 141              	 * @brief   FPU FPCCR register initialization value.
 142              	 * @note    Only used if @p CRT0_INIT_FPU is equal to @p TRUE.
 143              	 */
 144              	#if !defined(CRT0_FPCCR_INIT) || defined(__DOXYGEN__)
 145              	#define CRT0_FPCCR_INIT                     (FPCCR_ASPEN | FPCCR_LSPEN)
 146              	#endif
 147              	
 148              	/**
 149              	 * @brief   CPACR register initialization value.
 150              	 * @note    Only used if @p CRT0_INIT_FPU is equal to @p TRUE.
 151              	 */
 152              	#if !defined(CRT0_CPACR_INIT) || defined(__DOXYGEN__)
 153              	#define CRT0_CPACR_INIT                     0x00F00000
 154              	#endif
 155              	
 156              	/*===========================================================================*/
 157              	/* Code section.                                                             */
 158              	/*===========================================================================*/
 159              	
 160              	#if !defined(__DOXYGEN__)
 161              	
 162              	                .syntax unified
 163              	                .cpu    cortex-m3
 164              	#if CRT0_INIT_FPU == TRUE
 165              	                .fpu    fpv4-sp-d16
 166              	#else
 167              	                .fpu    softvfp
 168              	#endif
 169              	
 170              	                .thumb
 171              	                .text
 172              	
 173              	/*
 174              	 * Reset handler.
 175              	 */
 176              	                .align  2
 177              	                .thumb_func
 178              	                .global Reset_Handler
 179              	Reset_Handler:
 180              	                /* Interrupts are globally masked initially.*/
 181:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 cpsid   i
 182              	
 183:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S **** #if CRT0_FORCE_MSP_INIT == TRUE
 184:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 /* MSP stack pointers initialization.*/
 185:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r0, =__main_stack_end__
 186:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 msr     MSP, r0
 187:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S **** #endif
 188:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S **** 
 189:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 /* PSP stack pointers initialization.*/
 190:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r0, =__process_stack_end__
 191:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 msr     PSP, r0
 192              	
 193              	#if CRT0_VTOR_INIT == TRUE
 194:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r0, =_vectors
 195:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movw    r1, #SCB_VTOR & 0xFFFF
 196:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movt    r1, #SCB_VTOR >> 16
 197:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 str     r0, [r1]
 198              	#endif
 199              	
 200              	#if CRT0_INIT_FPU == TRUE
 201              	                /* FPU FPCCR initialization.*/
 202:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 203:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movt    r0, #CRT0_FPCCR_INIT >> 16
 204:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movw    r1, #SCB_FPCCR & 0xFFFF
 205:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movt    r1, #SCB_FPCCR >> 16
 206:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 str     r0, [r1]
 207:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 dsb
 208:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 isb
 209              	
 210              	                /* CPACR initialization.*/
 211:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 212:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movt    r0, #CRT0_CPACR_INIT >> 16
 213:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movw    r1, #SCB_CPACR & 0xFFFF
 214:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movt    r1, #SCB_CPACR >> 16
 215:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 str     r0, [r1]
 216:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 dsb
 217:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 isb
 218              	
 219              	                /* FPU FPSCR initially cleared.*/
 220:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 mov     r0, #0
 221:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 vmsr    FPSCR, r0
 222              	
 223              	                /* FPU FPDSCR initially cleared.*/
 224:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movw    r1, #SCB_FPDSCR & 0xFFFF
 225:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movt    r1, #SCB_FPDSCR >> 16
 226:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 str     r0, [r1]
 227              	
 228              	                /* Enforcing FPCA bit in the CONTROL register.*/
 229:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 230              	
 231              	#else
 232              	                movs    r0, #CRT0_CONTROL_INIT
 233              	#endif
 234              	
 235              	                /* CONTROL register initialization as configured.*/
 236:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 msr     CONTROL, r0
 237:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 isb
 238              	
 239              	#if CRT0_INIT_CORE == TRUE
 240              	                /* Core initialization.*/
 241:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 bl      __core_init
 242              	#endif
 243              	
 244              	                /* Early initialization.*/
 245:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 bl      __early_init
 246              	
 247              	#if CRT0_INIT_STACKS == TRUE
 248:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r0, =CRT0_STACKS_FILL_PATTERN
 249              	                /* Main Stack initialization. Note, it assumes that the
 250              	                   stack size is a multiple of 4 so the linker file must
 251              	                   ensure this.*/
 252:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r1, =__main_stack_base__
 253:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r2, =__main_stack_end__
 254              	msloop:
 255:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 cmp     r1, r2
 256:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 itt     lo
 257:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 strlo   r0, [r1], #4
 258:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 blo     msloop
 259              	
 260              	                /* Process Stack initialization. Note, it assumes that the
 261              	                   stack size is a multiple of 4 so the linker file must
 262              	                   ensure this.*/
 263:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r1, =__process_stack_base__
 264:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r2, =__process_stack_end__
 265              	psloop:
 266:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 cmp     r1, r2
 267:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 itt     lo
 268:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 strlo   r0, [r1], #4
 269:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 blo     psloop
 270              	#endif
 271              	
 272              	#if CRT0_INIT_DATA == TRUE
 273              	                /* Data initialization. Note, it assumes that the DATA size
 274              	                  is a multiple of 4 so the linker file must ensure this.*/
 275:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r1, =_textdata_start
 276:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r2, =_data_start
 277:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r3, =_data_end
 278              	dloop:
 279:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 cmp     r2, r3
 280:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ittt    lo
 281:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldrlo   r0, [r1], #4
 282:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 strlo   r0, [r2], #4
 283:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 blo     dloop
 284              	#endif
 285              	
 286              	#if CRT0_INIT_BSS == TRUE
 287              	                /* BSS initialization. Note, it assumes that the DATA size
 288              	                  is a multiple of 4 so the linker file must ensure this.*/
 289:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 movs    r0, #0
 290:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r1, =_bss_start
 291:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r2, =_bss_end
 292              	bloop:
 293:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 cmp     r1, r2
 294:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 itt     lo
 295:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 strlo   r0, [r1], #4
 296:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 blo     bloop
 297              	#endif
 298              	
 299              	#if CRT0_INIT_RAM_AREAS == TRUE
 300              	                /* RAM areas initialization.*/
 301:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 bl      __init_ram_areas
 302              	#endif
 303              	
 304              	                /* Late initialization..*/
 305:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 bl      __late_init
 306              	
 307              	#if CRT0_CALL_CONSTRUCTORS == TRUE
 308              	                /* Constructors invocation.*/
 309:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r4, =__init_array_start
 310:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r5, =__init_array_end
 311              	initloop:
 312:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 cmp     r4, r5
 313:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 bge     endinitloop
 314:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r1, [r4], #4
 315:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 blx     r1
 316:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 b       initloop
 317              	endinitloop:
 318              	#endif
 319              	
 320              	                /* Main program invocation, r0 contains the returned value.*/
 321:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 bl      main
 322              	
 323              	#if CRT0_CALL_DESTRUCTORS == TRUE
 324              	                /* Destructors invocation.*/
 325:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r4, =__fini_array_start
 326:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r5, =__fini_array_end
 327              	finiloop:
 328:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 cmp     r4, r5
 329:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 bge     endfiniloop
 330:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 ldr     r1, [r4], #4
 331:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 blx     r1
 332:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 b       finiloop
 333              	endfiniloop:
 334              	#endif
 335              	
 336              	                /* Branching to the defined exit handler.*/
 337:lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S ****                 b       __default_exit
DEFINED SYMBOLS
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:176    .text:0000000000000000 $t
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:179    .text:0000000000000000 Reset_Handler
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:254    .text:0000000000000074 msloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:265    .text:0000000000000082 psloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:278    .text:0000000000000092 dloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:292    .text:00000000000000a6 bloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:311    .text:00000000000000bc initloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:317    .text:00000000000000c8 endinitloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:327    .text:00000000000000d0 finiloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:333    .text:00000000000000dc endfiniloop
lib/chibios/os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:337    .text:00000000000000e0 $d

UNDEFINED SYMBOLS
__process_stack_end__
_vectors
__core_init
__early_init
__main_stack_base__
__main_stack_end__
__process_stack_base__
_textdata_start
_data_start
_data_end
_bss_start
_bss_end
__init_ram_areas
__late_init
__init_array_start
__init_array_end
main
__fini_array_start
__fini_array_end
__default_exit
