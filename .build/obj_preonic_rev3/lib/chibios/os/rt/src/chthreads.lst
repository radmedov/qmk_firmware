   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"chthreads.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._thread_init,"ax",%progbits
  16              		.align	1
  17              		.global	_thread_init
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	_thread_init:
  24              	.LFB248:
  25              		.file 1 "lib/chibios/os/rt/src/chthreads.c"
   1:lib/chibios/os/rt/src/chthreads.c **** /*
   2:lib/chibios/os/rt/src/chthreads.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:lib/chibios/os/rt/src/chthreads.c **** 
   4:lib/chibios/os/rt/src/chthreads.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/rt/src/chthreads.c **** 
   6:lib/chibios/os/rt/src/chthreads.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/rt/src/chthreads.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/rt/src/chthreads.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/rt/src/chthreads.c ****     (at your option) any later version.
  10:lib/chibios/os/rt/src/chthreads.c **** 
  11:lib/chibios/os/rt/src/chthreads.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/rt/src/chthreads.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/rt/src/chthreads.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/rt/src/chthreads.c ****     GNU General Public License for more details.
  15:lib/chibios/os/rt/src/chthreads.c **** 
  16:lib/chibios/os/rt/src/chthreads.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/rt/src/chthreads.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/rt/src/chthreads.c **** */
  19:lib/chibios/os/rt/src/chthreads.c **** 
  20:lib/chibios/os/rt/src/chthreads.c **** /**
  21:lib/chibios/os/rt/src/chthreads.c ****  * @file    chthreads.c
  22:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Threads code.
  23:lib/chibios/os/rt/src/chthreads.c ****  *
  24:lib/chibios/os/rt/src/chthreads.c ****  * @addtogroup threads
  25:lib/chibios/os/rt/src/chthreads.c ****  * @details Threads related APIs and services.
  26:lib/chibios/os/rt/src/chthreads.c ****  *          <h2>Operation mode</h2>
  27:lib/chibios/os/rt/src/chthreads.c ****  *          A thread is an abstraction of an independent instructions flow.
  28:lib/chibios/os/rt/src/chthreads.c ****  *          In ChibiOS/RT a thread is represented by a "C" function owning
  29:lib/chibios/os/rt/src/chthreads.c ****  *          a processor context, state informations and a dedicated stack
  30:lib/chibios/os/rt/src/chthreads.c ****  *          area. In this scenario static variables are shared among all
  31:lib/chibios/os/rt/src/chthreads.c ****  *          threads while automatic variables are local to the thread.<br>
  32:lib/chibios/os/rt/src/chthreads.c ****  *          Operations defined for threads:
  33:lib/chibios/os/rt/src/chthreads.c ****  *          - <b>Create</b>, a thread is started on the specified thread
  34:lib/chibios/os/rt/src/chthreads.c ****  *            function. This operation is available in multiple variants,
  35:lib/chibios/os/rt/src/chthreads.c ****  *            both static and dynamic.
  36:lib/chibios/os/rt/src/chthreads.c ****  *          - <b>Exit</b>, a thread terminates by returning from its top
  37:lib/chibios/os/rt/src/chthreads.c ****  *            level function or invoking a specific API, the thread can
  38:lib/chibios/os/rt/src/chthreads.c ****  *            return a value that can be retrieved by other threads.
  39:lib/chibios/os/rt/src/chthreads.c ****  *          - <b>Wait</b>, a thread waits for the termination of another
  40:lib/chibios/os/rt/src/chthreads.c ****  *            thread and retrieves its return value.
  41:lib/chibios/os/rt/src/chthreads.c ****  *          - <b>Resume</b>, a thread created in suspended state is started.
  42:lib/chibios/os/rt/src/chthreads.c ****  *          - <b>Sleep</b>, the execution of a thread is suspended for the
  43:lib/chibios/os/rt/src/chthreads.c ****  *            specified amount of time or the specified future absolute time
  44:lib/chibios/os/rt/src/chthreads.c ****  *            is reached.
  45:lib/chibios/os/rt/src/chthreads.c ****  *          - <b>SetPriority</b>, a thread changes its own priority level.
  46:lib/chibios/os/rt/src/chthreads.c ****  *          - <b>Yield</b>, a thread voluntarily renounces to its time slot.
  47:lib/chibios/os/rt/src/chthreads.c ****  *          .
  48:lib/chibios/os/rt/src/chthreads.c ****  * @{
  49:lib/chibios/os/rt/src/chthreads.c ****  */
  50:lib/chibios/os/rt/src/chthreads.c **** 
  51:lib/chibios/os/rt/src/chthreads.c **** #include "ch.h"
  52:lib/chibios/os/rt/src/chthreads.c **** 
  53:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  54:lib/chibios/os/rt/src/chthreads.c **** /* Module local definitions.                                                 */
  55:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  56:lib/chibios/os/rt/src/chthreads.c **** 
  57:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  58:lib/chibios/os/rt/src/chthreads.c **** /* Module exported variables.                                                */
  59:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  60:lib/chibios/os/rt/src/chthreads.c **** 
  61:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  62:lib/chibios/os/rt/src/chthreads.c **** /* Module local types.                                                       */
  63:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  64:lib/chibios/os/rt/src/chthreads.c **** 
  65:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  66:lib/chibios/os/rt/src/chthreads.c **** /* Module local variables.                                                   */
  67:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  68:lib/chibios/os/rt/src/chthreads.c **** 
  69:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  70:lib/chibios/os/rt/src/chthreads.c **** /* Module local functions.                                                   */
  71:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  72:lib/chibios/os/rt/src/chthreads.c **** 
  73:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  74:lib/chibios/os/rt/src/chthreads.c **** /* Module exported functions.                                                */
  75:lib/chibios/os/rt/src/chthreads.c **** /*===========================================================================*/
  76:lib/chibios/os/rt/src/chthreads.c **** 
  77:lib/chibios/os/rt/src/chthreads.c **** /**
  78:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Initializes a thread structure.
  79:lib/chibios/os/rt/src/chthreads.c ****  * @note    This is an internal functions, do not use it in application code.
  80:lib/chibios/os/rt/src/chthreads.c ****  *
  81:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
  82:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] name      thread name
  83:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] prio      the priority level for the new thread
  84:lib/chibios/os/rt/src/chthreads.c ****  * @return              The same thread pointer passed as parameter.
  85:lib/chibios/os/rt/src/chthreads.c ****  *
  86:lib/chibios/os/rt/src/chthreads.c ****  * @notapi
  87:lib/chibios/os/rt/src/chthreads.c ****  */
  88:lib/chibios/os/rt/src/chthreads.c **** thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {
  26              		.loc 1 88 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  89:lib/chibios/os/rt/src/chthreads.c **** 
  90:lib/chibios/os/rt/src/chthreads.c ****   tp->prio      = prio;
  32              		.loc 1 90 0
  33 0000 8260     		str	r2, [r0, #8]
  91:lib/chibios/os/rt/src/chthreads.c ****   tp->state     = CH_STATE_WTSTART;
  92:lib/chibios/os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
  93:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
  94:lib/chibios/os/rt/src/chthreads.c ****   tp->preempt   = (tslices_t)CH_CFG_TIME_QUANTUM;
  95:lib/chibios/os/rt/src/chthreads.c **** #endif
  96:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_MUTEXES == TRUE
  97:lib/chibios/os/rt/src/chthreads.c ****   tp->realprio  = prio;
  34              		.loc 1 97 0
  35 0002 C263     		str	r2, [r0, #60]
  98:lib/chibios/os/rt/src/chthreads.c ****   tp->mtxlist   = NULL;
  36              		.loc 1 98 0
  37 0004 0022     		movs	r2, #0
  38              	.LVL1:
  99:lib/chibios/os/rt/src/chthreads.c **** #endif
 100:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_EVENTS == TRUE
 101:lib/chibios/os/rt/src/chthreads.c ****   tp->epending  = (eventmask_t)0;
  39              		.loc 1 101 0
  40 0006 C0E90D22 		strd	r2, r2, [r0, #52]
  91:lib/chibios/os/rt/src/chthreads.c ****   tp->flags     = CH_FLAG_MODE_STATIC;
  41              		.loc 1 91 0
  42 000a 0222     		movs	r2, #2
  43 000c 0284     		strh	r2, [r0, #32]	@ movhi
  92:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
  44              		.loc 1 92 0
  45 000e 0122     		movs	r2, #1
  46 0010 80F82220 		strb	r2, [r0, #34]
 102:lib/chibios/os/rt/src/chthreads.c **** #endif
 103:lib/chibios/os/rt/src/chthreads.c **** #if CH_DBG_THREADS_PROFILING == TRUE
 104:lib/chibios/os/rt/src/chthreads.c ****   tp->time      = (systime_t)0;
 105:lib/chibios/os/rt/src/chthreads.c **** #endif
 106:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 107:lib/chibios/os/rt/src/chthreads.c ****   tp->refs      = (trefs_t)1;
 108:lib/chibios/os/rt/src/chthreads.c ****   tp->name      = name;
 109:lib/chibios/os/rt/src/chthreads.c ****   REG_INSERT(tp);
  47              		.loc 1 109 0
  48 0014 074A     		ldr	r2, .L2
 108:lib/chibios/os/rt/src/chthreads.c ****   REG_INSERT(tp);
  49              		.loc 1 108 0
  50 0016 8161     		str	r1, [r0, #24]
  51              		.loc 1 109 0
  52 0018 5169     		ldr	r1, [r2, #20]
  53              	.LVL2:
  54 001a 0261     		str	r2, [r0, #16]
  55 001c 4161     		str	r1, [r0, #20]
  56 001e 0861     		str	r0, [r1, #16]
  57 0020 5061     		str	r0, [r2, #20]
  58              	.LVL3:
 110:lib/chibios/os/rt/src/chthreads.c **** #else
 111:lib/chibios/os/rt/src/chthreads.c ****   (void)name;
 112:lib/chibios/os/rt/src/chthreads.c **** #endif
 113:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_WAITEXIT == TRUE
 114:lib/chibios/os/rt/src/chthreads.c ****   list_init(&tp->waiting);
  59              		.loc 1 114 0
  60 0022 00F12802 		add	r2, r0, #40
  61              	.LVL4:
  62              	.LBB228:
  63              	.LBB229:
  64              		.file 2 "./lib/chibios/os/rt/include/chschd.h"
   1:./lib/chibios/os/rt/include/chschd.h **** /*
   2:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chschd.h **** 
   4:./lib/chibios/os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chschd.h **** 
   6:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chschd.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chschd.h **** 
  11:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chschd.h **** 
  16:./lib/chibios/os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chschd.h **** */
  19:./lib/chibios/os/rt/include/chschd.h **** 
  20:./lib/chibios/os/rt/include/chschd.h **** /**
  21:./lib/chibios/os/rt/include/chschd.h ****  * @file    chschd.h
  22:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:./lib/chibios/os/rt/include/chschd.h ****  *
  24:./lib/chibios/os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:./lib/chibios/os/rt/include/chschd.h ****  * @{
  26:./lib/chibios/os/rt/include/chschd.h ****  */
  27:./lib/chibios/os/rt/include/chschd.h **** 
  28:./lib/chibios/os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:./lib/chibios/os/rt/include/chschd.h **** #define CHSCHD_H
  30:./lib/chibios/os/rt/include/chschd.h **** 
  31:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chschd.h **** 
  35:./lib/chibios/os/rt/include/chschd.h **** /**
  36:./lib/chibios/os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:./lib/chibios/os/rt/include/chschd.h ****  * @{
  38:./lib/chibios/os/rt/include/chschd.h ****  */
  39:./lib/chibios/os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:./lib/chibios/os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  42:./lib/chibios/os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  44:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  45:./lib/chibios/os/rt/include/chschd.h **** 
  46:./lib/chibios/os/rt/include/chschd.h **** /**
  47:./lib/chibios/os/rt/include/chschd.h ****  * @name    Priority constants
  48:./lib/chibios/os/rt/include/chschd.h ****  * @{
  49:./lib/chibios/os/rt/include/chschd.h ****  */
  50:./lib/chibios/os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:./lib/chibios/os/rt/include/chschd.h ****                                                  priority.                  */
  52:./lib/chibios/os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:./lib/chibios/os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:./lib/chibios/os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:./lib/chibios/os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  57:./lib/chibios/os/rt/include/chschd.h **** 
  58:./lib/chibios/os/rt/include/chschd.h **** /**
  59:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread states
  60:./lib/chibios/os/rt/include/chschd.h ****  * @{
  61:./lib/chibios/os/rt/include/chschd.h ****  */
  62:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:./lib/chibios/os/rt/include/chschd.h ****                                                   ready list.               */
  64:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:./lib/chibios/os/rt/include/chschd.h ****                                                   in queue.                 */
  77:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:./lib/chibios/os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:./lib/chibios/os/rt/include/chschd.h ****                                                   message.                  */
  81:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:./lib/chibios/os/rt/include/chschd.h **** 
  83:./lib/chibios/os/rt/include/chschd.h **** /**
  84:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:./lib/chibios/os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:./lib/chibios/os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:./lib/chibios/os/rt/include/chschd.h ****  */
  88:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:./lib/chibios/os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:./lib/chibios/os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:./lib/chibios/os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  93:./lib/chibios/os/rt/include/chschd.h **** 
  94:./lib/chibios/os/rt/include/chschd.h **** /**
  95:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:./lib/chibios/os/rt/include/chschd.h ****  * @{
  97:./lib/chibios/os/rt/include/chschd.h ****  */
  98:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:./lib/chibios/os/rt/include/chschd.h ****                                                  mask.                      */
 100:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:./lib/chibios/os/rt/include/chschd.h ****                                                  flag.                      */
 107:./lib/chibios/os/rt/include/chschd.h **** /** @} */
 108:./lib/chibios/os/rt/include/chschd.h **** 
 109:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 110:./lib/chibios/os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 112:./lib/chibios/os/rt/include/chschd.h **** 
 113:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 114:./lib/chibios/os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 116:./lib/chibios/os/rt/include/chschd.h **** 
 117:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_ENTER_HOOK)
 118:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_ENTER_HOOK not defined in chconf.h"
 119:./lib/chibios/os/rt/include/chschd.h **** #endif
 120:./lib/chibios/os/rt/include/chschd.h **** 
 121:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LEAVE_HOOK)
 122:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LEAVE_HOOK not defined in chconf.h"
 123:./lib/chibios/os/rt/include/chschd.h **** #endif
 124:./lib/chibios/os/rt/include/chschd.h **** 
 125:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LOOP_HOOK)
 126:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LOOP_HOOK not defined in chconf.h"
 127:./lib/chibios/os/rt/include/chschd.h **** #endif
 128:./lib/chibios/os/rt/include/chschd.h **** 
 129:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 130:./lib/chibios/os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 131:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 132:./lib/chibios/os/rt/include/chschd.h **** 
 133:./lib/chibios/os/rt/include/chschd.h **** /**
 134:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 135:./lib/chibios/os/rt/include/chschd.h ****  */
 136:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_list {
 137:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 138:./lib/chibios/os/rt/include/chschd.h **** };
 139:./lib/chibios/os/rt/include/chschd.h **** 
 140:./lib/chibios/os/rt/include/chschd.h **** /**
 141:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 142:./lib/chibios/os/rt/include/chschd.h ****  */
 143:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_queue {
 144:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 145:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 146:./lib/chibios/os/rt/include/chschd.h **** };
 147:./lib/chibios/os/rt/include/chschd.h **** 
 148:./lib/chibios/os/rt/include/chschd.h **** /**
 149:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 150:./lib/chibios/os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 151:./lib/chibios/os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 152:./lib/chibios/os/rt/include/chschd.h ****  *          by shrinking this structure.
 153:./lib/chibios/os/rt/include/chschd.h ****  */
 154:./lib/chibios/os/rt/include/chschd.h **** struct ch_thread {
 155:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 156:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 157:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 158:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 159:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 160:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 161:./lib/chibios/os/rt/include/chschd.h **** #endif
 162:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 163:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 164:./lib/chibios/os/rt/include/chschd.h ****   /**
 165:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 166:./lib/chibios/os/rt/include/chschd.h ****    */
 167:./lib/chibios/os/rt/include/chschd.h ****   const char            *name;
 168:./lib/chibios/os/rt/include/chschd.h **** #endif
 169:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 170:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 171:./lib/chibios/os/rt/include/chschd.h ****   /**
 172:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Working area base address.
 173:./lib/chibios/os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 174:./lib/chibios/os/rt/include/chschd.h ****    *          dynamic threading.
 175:./lib/chibios/os/rt/include/chschd.h ****    */
 176:./lib/chibios/os/rt/include/chschd.h ****   stkalign_t            *wabase;
 177:./lib/chibios/os/rt/include/chschd.h **** #endif
 178:./lib/chibios/os/rt/include/chschd.h ****   /**
 179:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Current thread state.
 180:./lib/chibios/os/rt/include/chschd.h ****    */
 181:./lib/chibios/os/rt/include/chschd.h ****   tstate_t              state;
 182:./lib/chibios/os/rt/include/chschd.h ****   /**
 183:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Various thread flags.
 184:./lib/chibios/os/rt/include/chschd.h ****    */
 185:./lib/chibios/os/rt/include/chschd.h ****   tmode_t               flags;
 186:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 187:./lib/chibios/os/rt/include/chschd.h ****   /**
 188:./lib/chibios/os/rt/include/chschd.h ****    * @brief   References to this thread.
 189:./lib/chibios/os/rt/include/chschd.h ****    */
 190:./lib/chibios/os/rt/include/chschd.h ****   trefs_t               refs;
 191:./lib/chibios/os/rt/include/chschd.h **** #endif
 192:./lib/chibios/os/rt/include/chschd.h ****   /**
 193:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 194:./lib/chibios/os/rt/include/chschd.h ****    */
 195:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 196:./lib/chibios/os/rt/include/chschd.h ****   tslices_t             preempt;
 197:./lib/chibios/os/rt/include/chschd.h **** #endif
 198:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 199:./lib/chibios/os/rt/include/chschd.h ****   /**
 200:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 201:./lib/chibios/os/rt/include/chschd.h ****    * @note    This field can overflow.
 202:./lib/chibios/os/rt/include/chschd.h ****    */
 203:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    time;
 204:./lib/chibios/os/rt/include/chschd.h **** #endif
 205:./lib/chibios/os/rt/include/chschd.h ****   /**
 206:./lib/chibios/os/rt/include/chschd.h ****    * @brief   State-specific fields.
 207:./lib/chibios/os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 208:./lib/chibios/os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 209:./lib/chibios/os/rt/include/chschd.h ****    */
 210:./lib/chibios/os/rt/include/chschd.h ****   union {
 211:./lib/chibios/os/rt/include/chschd.h ****     /**
 212:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 213:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 214:./lib/chibios/os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 215:./lib/chibios/os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 216:./lib/chibios/os/rt/include/chschd.h ****      */
 217:./lib/chibios/os/rt/include/chschd.h ****     msg_t               rdymsg;
 218:./lib/chibios/os/rt/include/chschd.h ****     /**
 219:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread exit code.
 220:./lib/chibios/os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 221:./lib/chibios/os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 222:./lib/chibios/os/rt/include/chschd.h ****      *          this thread.
 223:./lib/chibios/os/rt/include/chschd.h ****      */
 224:./lib/chibios/os/rt/include/chschd.h ****     msg_t               exitcode;
 225:./lib/chibios/os/rt/include/chschd.h ****     /**
 226:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 227:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 228:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 229:./lib/chibios/os/rt/include/chschd.h ****      *          states.
 230:./lib/chibios/os/rt/include/chschd.h ****      */
 231:./lib/chibios/os/rt/include/chschd.h ****     void                *wtobjp;
 232:./lib/chibios/os/rt/include/chschd.h ****     /**
 233:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 234:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 235:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 236:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 237:./lib/chibios/os/rt/include/chschd.h ****      */
 238:./lib/chibios/os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 239:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 240:./lib/chibios/os/rt/include/chschd.h ****     /**
 241:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread sent message.
 242:./lib/chibios/os/rt/include/chschd.h ****      */
 243:./lib/chibios/os/rt/include/chschd.h ****     msg_t               sentmsg;
 244:./lib/chibios/os/rt/include/chschd.h **** #endif
 245:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 246:./lib/chibios/os/rt/include/chschd.h ****     /**
 247:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 248:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 249:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 250:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 251:./lib/chibios/os/rt/include/chschd.h ****      */
 252:./lib/chibios/os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 253:./lib/chibios/os/rt/include/chschd.h **** #endif
 254:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 255:./lib/chibios/os/rt/include/chschd.h ****     /**
 256:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 257:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 258:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 259:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 260:./lib/chibios/os/rt/include/chschd.h ****      */
 261:./lib/chibios/os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 262:./lib/chibios/os/rt/include/chschd.h **** #endif
 263:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 264:./lib/chibios/os/rt/include/chschd.h ****     /**
 265:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 266:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 267:./lib/chibios/os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 268:./lib/chibios/os/rt/include/chschd.h ****      */
 269:./lib/chibios/os/rt/include/chschd.h ****     eventmask_t         ewmask;
 270:./lib/chibios/os/rt/include/chschd.h **** #endif
 271:./lib/chibios/os/rt/include/chschd.h ****   }                     u;
 272:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 273:./lib/chibios/os/rt/include/chschd.h ****   /**
 274:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 275:./lib/chibios/os/rt/include/chschd.h ****    */
 276:./lib/chibios/os/rt/include/chschd.h ****   threads_list_t        waiting;
 277:./lib/chibios/os/rt/include/chschd.h **** #endif
 278:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chschd.h ****   /**
 280:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Messages queue.
 281:./lib/chibios/os/rt/include/chschd.h ****    */
 282:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 283:./lib/chibios/os/rt/include/chschd.h **** #endif
 284:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 285:./lib/chibios/os/rt/include/chschd.h ****   /**
 286:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pending events mask.
 287:./lib/chibios/os/rt/include/chschd.h ****    */
 288:./lib/chibios/os/rt/include/chschd.h ****   eventmask_t           epending;
 289:./lib/chibios/os/rt/include/chschd.h **** #endif
 290:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 291:./lib/chibios/os/rt/include/chschd.h ****   /**
 292:./lib/chibios/os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 293:./lib/chibios/os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 294:./lib/chibios/os/rt/include/chschd.h ****    */
 295:./lib/chibios/os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 296:./lib/chibios/os/rt/include/chschd.h ****   /**
 297:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 298:./lib/chibios/os/rt/include/chschd.h ****    */
 299:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               realprio;
 300:./lib/chibios/os/rt/include/chschd.h **** #endif
 301:./lib/chibios/os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 302:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 303:./lib/chibios/os/rt/include/chschd.h ****   /**
 304:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 305:./lib/chibios/os/rt/include/chschd.h ****    */
 306:./lib/chibios/os/rt/include/chschd.h ****   void                  *mpool;
 307:./lib/chibios/os/rt/include/chschd.h **** #endif
 308:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 309:./lib/chibios/os/rt/include/chschd.h ****   /**
 310:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread statistics.
 311:./lib/chibios/os/rt/include/chschd.h ****    */
 312:./lib/chibios/os/rt/include/chschd.h ****   time_measurement_t    stats;
 313:./lib/chibios/os/rt/include/chschd.h **** #endif
 314:./lib/chibios/os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 315:./lib/chibios/os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 316:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 317:./lib/chibios/os/rt/include/chschd.h **** #endif
 318:./lib/chibios/os/rt/include/chschd.h **** };
 319:./lib/chibios/os/rt/include/chschd.h **** 
 320:./lib/chibios/os/rt/include/chschd.h **** /**
 321:./lib/chibios/os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 322:./lib/chibios/os/rt/include/chschd.h ****  *
 323:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 324:./lib/chibios/os/rt/include/chschd.h ****  */
 325:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timer {
 326:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 327:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 328:./lib/chibios/os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Time delta before timeout.  */
 329:./lib/chibios/os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 330:./lib/chibios/os/rt/include/chschd.h ****                                                 pointer.                    */
 331:./lib/chibios/os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 332:./lib/chibios/os/rt/include/chschd.h ****                                                 parameter.                  */
 333:./lib/chibios/os/rt/include/chschd.h **** };
 334:./lib/chibios/os/rt/include/chschd.h **** 
 335:./lib/chibios/os/rt/include/chschd.h **** /**
 336:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 337:./lib/chibios/os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 338:./lib/chibios/os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 339:./lib/chibios/os/rt/include/chschd.h ****  *          timer is often used in the code.
 340:./lib/chibios/os/rt/include/chschd.h ****  */
 341:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 342:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 343:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 344:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 345:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 346:./lib/chibios/os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Must be initialized to -1.  */
 347:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 348:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 349:./lib/chibios/os/rt/include/chschd.h **** #endif
 350:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 351:./lib/chibios/os/rt/include/chschd.h ****   /**
 352:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 353:./lib/chibios/os/rt/include/chschd.h ****    */
 354:./lib/chibios/os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 355:./lib/chibios/os/rt/include/chschd.h ****                                                 tick event.                 */
 356:./lib/chibios/os/rt/include/chschd.h **** #endif
 357:./lib/chibios/os/rt/include/chschd.h **** };
 358:./lib/chibios/os/rt/include/chschd.h **** 
 359:./lib/chibios/os/rt/include/chschd.h **** /**
 360:./lib/chibios/os/rt/include/chschd.h ****  * @extends threads_queue_t
 361:./lib/chibios/os/rt/include/chschd.h ****  */
 362:./lib/chibios/os/rt/include/chschd.h **** struct ch_ready_list {
 363:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 364:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 365:./lib/chibios/os/rt/include/chschd.h ****                                                 initialized to zero.        */
 366:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 367:./lib/chibios/os/rt/include/chschd.h ****                                                 offsets.                    */
 368:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 369:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 370:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 371:./lib/chibios/os/rt/include/chschd.h **** #endif
 372:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 373:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 374:./lib/chibios/os/rt/include/chschd.h ****                                                 thread.                     */
 375:./lib/chibios/os/rt/include/chschd.h **** };
 376:./lib/chibios/os/rt/include/chschd.h **** 
 377:./lib/chibios/os/rt/include/chschd.h **** /**
 378:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System debug data structure.
 379:./lib/chibios/os/rt/include/chschd.h ****  */
 380:./lib/chibios/os/rt/include/chschd.h **** struct ch_system_debug {
 381:./lib/chibios/os/rt/include/chschd.h ****   /**
 382:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 383:./lib/chibios/os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 384:./lib/chibios/os/rt/include/chschd.h ****    *          written once and then the system is halted.
 385:./lib/chibios/os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 386:./lib/chibios/os/rt/include/chschd.h ****    *          field itself is declared volatile.
 387:./lib/chibios/os/rt/include/chschd.h ****    */
 388:./lib/chibios/os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 389:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 390:./lib/chibios/os/rt/include/chschd.h ****   /**
 391:./lib/chibios/os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 392:./lib/chibios/os/rt/include/chschd.h ****    */
 393:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 394:./lib/chibios/os/rt/include/chschd.h ****   /**
 395:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 396:./lib/chibios/os/rt/include/chschd.h ****    */
 397:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 398:./lib/chibios/os/rt/include/chschd.h **** #endif
 399:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 400:./lib/chibios/os/rt/include/chschd.h ****   /**
 401:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 402:./lib/chibios/os/rt/include/chschd.h ****    */
 403:./lib/chibios/os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 404:./lib/chibios/os/rt/include/chschd.h **** #endif
 405:./lib/chibios/os/rt/include/chschd.h **** };
 406:./lib/chibios/os/rt/include/chschd.h **** 
 407:./lib/chibios/os/rt/include/chschd.h **** /**
 408:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System data structure.
 409:./lib/chibios/os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 410:./lib/chibios/os/rt/include/chschd.h ****  *          stacks.
 411:./lib/chibios/os/rt/include/chschd.h ****  */
 412:./lib/chibios/os/rt/include/chschd.h **** struct ch_system {
 413:./lib/chibios/os/rt/include/chschd.h ****   /**
 414:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Ready list header.
 415:./lib/chibios/os/rt/include/chschd.h ****    */
 416:./lib/chibios/os/rt/include/chschd.h ****   ready_list_t          rlist;
 417:./lib/chibios/os/rt/include/chschd.h ****   /**
 418:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 419:./lib/chibios/os/rt/include/chschd.h ****    */
 420:./lib/chibios/os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 421:./lib/chibios/os/rt/include/chschd.h ****   /**
 422:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System debug.
 423:./lib/chibios/os/rt/include/chschd.h ****    */
 424:./lib/chibios/os/rt/include/chschd.h ****   system_debug_t        dbg;
 425:./lib/chibios/os/rt/include/chschd.h ****   /**
 426:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 427:./lib/chibios/os/rt/include/chschd.h ****    */
 428:./lib/chibios/os/rt/include/chschd.h ****   thread_t              mainthread;
 429:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 430:./lib/chibios/os/rt/include/chschd.h ****   /**
 431:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 432:./lib/chibios/os/rt/include/chschd.h ****    */
 433:./lib/chibios/os/rt/include/chschd.h ****   tm_calibration_t      tm;
 434:./lib/chibios/os/rt/include/chschd.h **** #endif
 435:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 436:./lib/chibios/os/rt/include/chschd.h ****   /**
 437:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 438:./lib/chibios/os/rt/include/chschd.h ****    */
 439:./lib/chibios/os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 440:./lib/chibios/os/rt/include/chschd.h **** #endif
 441:./lib/chibios/os/rt/include/chschd.h **** };
 442:./lib/chibios/os/rt/include/chschd.h **** 
 443:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 444:./lib/chibios/os/rt/include/chschd.h **** /* Module macros.                                                            */
 445:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 446:./lib/chibios/os/rt/include/chschd.h **** 
 447:./lib/chibios/os/rt/include/chschd.h **** /**
 448:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 449:./lib/chibios/os/rt/include/chschd.h ****  *
 450:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 451:./lib/chibios/os/rt/include/chschd.h ****  */
 452:./lib/chibios/os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 453:./lib/chibios/os/rt/include/chschd.h **** 
 454:./lib/chibios/os/rt/include/chschd.h **** /**
 455:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 456:./lib/chibios/os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 457:./lib/chibios/os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 458:./lib/chibios/os/rt/include/chschd.h ****  */
 459:./lib/chibios/os/rt/include/chschd.h **** #define currp ch.rlist.current
 460:./lib/chibios/os/rt/include/chschd.h **** 
 461:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 462:./lib/chibios/os/rt/include/chschd.h **** /* External declarations.                                                    */
 463:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 464:./lib/chibios/os/rt/include/chschd.h **** 
 465:./lib/chibios/os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 466:./lib/chibios/os/rt/include/chschd.h **** extern ch_system_t ch;
 467:./lib/chibios/os/rt/include/chschd.h **** #endif
 468:./lib/chibios/os/rt/include/chschd.h **** 
 469:./lib/chibios/os/rt/include/chschd.h **** /*
 470:./lib/chibios/os/rt/include/chschd.h ****  * Scheduler APIs.
 471:./lib/chibios/os/rt/include/chschd.h ****  */
 472:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 473:./lib/chibios/os/rt/include/chschd.h **** extern "C" {
 474:./lib/chibios/os/rt/include/chschd.h **** #endif
 475:./lib/chibios/os/rt/include/chschd.h ****   void _scheduler_init(void);
 476:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 477:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 478:./lib/chibios/os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 479:./lib/chibios/os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time);
 480:./lib/chibios/os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 481:./lib/chibios/os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 482:./lib/chibios/os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 483:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 484:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 485:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 486:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 487:./lib/chibios/os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 488:./lib/chibios/os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 489:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 490:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 491:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 492:./lib/chibios/os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 493:./lib/chibios/os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 494:./lib/chibios/os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 495:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 496:./lib/chibios/os/rt/include/chschd.h **** }
 497:./lib/chibios/os/rt/include/chschd.h **** #endif
 498:./lib/chibios/os/rt/include/chschd.h **** 
 499:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 500:./lib/chibios/os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 501:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 502:./lib/chibios/os/rt/include/chschd.h **** 
 503:./lib/chibios/os/rt/include/chschd.h **** /**
 504:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 505:./lib/chibios/os/rt/include/chschd.h ****  *
 506:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 507:./lib/chibios/os/rt/include/chschd.h ****  *
 508:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 509:./lib/chibios/os/rt/include/chschd.h ****  */
 510:./lib/chibios/os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 511:./lib/chibios/os/rt/include/chschd.h **** 
 512:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
  65              		.loc 2 512 0
  66 0026 8262     		str	r2, [r0, #40]
  67              	.LVL5:
  68              	.LBE229:
  69              	.LBE228:
 115:lib/chibios/os/rt/src/chthreads.c **** #endif
 116:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_MESSAGES == TRUE
 117:lib/chibios/os/rt/src/chthreads.c ****   queue_init(&tp->msgqueue);
  70              		.loc 1 117 0
  71 0028 00F12C02 		add	r2, r0, #44
  72              	.LVL6:
  73              	.LBB230:
  74              	.LBB231:
 513:./lib/chibios/os/rt/include/chschd.h **** }
 514:./lib/chibios/os/rt/include/chschd.h **** 
 515:./lib/chibios/os/rt/include/chschd.h **** /**
 516:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 517:./lib/chibios/os/rt/include/chschd.h ****  *
 518:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 519:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 520:./lib/chibios/os/rt/include/chschd.h ****  *
 521:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 522:./lib/chibios/os/rt/include/chschd.h ****  */
 523:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 524:./lib/chibios/os/rt/include/chschd.h **** 
 525:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 526:./lib/chibios/os/rt/include/chschd.h **** }
 527:./lib/chibios/os/rt/include/chschd.h **** 
 528:./lib/chibios/os/rt/include/chschd.h **** /**
 529:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 530:./lib/chibios/os/rt/include/chschd.h ****  *
 531:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 532:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 533:./lib/chibios/os/rt/include/chschd.h ****  *
 534:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 535:./lib/chibios/os/rt/include/chschd.h ****  */
 536:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 537:./lib/chibios/os/rt/include/chschd.h **** 
 538:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 539:./lib/chibios/os/rt/include/chschd.h **** }
 540:./lib/chibios/os/rt/include/chschd.h **** 
 541:./lib/chibios/os/rt/include/chschd.h **** /**
 542:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 543:./lib/chibios/os/rt/include/chschd.h ****  *
 544:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 545:./lib/chibios/os/rt/include/chschd.h ****  *
 546:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 547:./lib/chibios/os/rt/include/chschd.h ****  */
 548:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 549:./lib/chibios/os/rt/include/chschd.h **** 
 550:./lib/chibios/os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
 551:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  75              		.loc 2 551 0
  76 002c C0E90B22 		strd	r2, r2, [r0, #44]
  77              	.LVL7:
  78              	.LBE231:
  79              	.LBE230:
 118:lib/chibios/os/rt/src/chthreads.c **** #endif
 119:lib/chibios/os/rt/src/chthreads.c **** #if CH_DBG_STATISTICS == TRUE
 120:lib/chibios/os/rt/src/chthreads.c ****   chTMObjectInit(&tp->stats);
 121:lib/chibios/os/rt/src/chthreads.c **** #endif
 122:lib/chibios/os/rt/src/chthreads.c ****   CH_CFG_THREAD_INIT_HOOK(tp);
 123:lib/chibios/os/rt/src/chthreads.c ****   return tp;
 124:lib/chibios/os/rt/src/chthreads.c **** }
  80              		.loc 1 124 0
  81 0030 7047     		bx	lr
  82              	.L3:
  83 0032 00BF     		.align	2
  84              	.L2:
  85 0034 00000000 		.word	ch
  86              		.cfi_endproc
  87              	.LFE248:
  89              		.section	.text.chThdCreateSuspendedI,"ax",%progbits
  90              		.align	1
  91              		.global	chThdCreateSuspendedI
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.fpu softvfp
  97              	chThdCreateSuspendedI:
  98              	.LFB249:
 125:lib/chibios/os/rt/src/chthreads.c **** 
 126:lib/chibios/os/rt/src/chthreads.c **** #if (CH_DBG_FILL_THREADS == TRUE) || defined(__DOXYGEN__)
 127:lib/chibios/os/rt/src/chthreads.c **** /**
 128:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Memory fill utility.
 129:lib/chibios/os/rt/src/chthreads.c ****  *
 130:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] startp    first address to fill
 131:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] endp      last address to fill +1
 132:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] v         filler value
 133:lib/chibios/os/rt/src/chthreads.c ****  *
 134:lib/chibios/os/rt/src/chthreads.c ****  * @notapi
 135:lib/chibios/os/rt/src/chthreads.c ****  */
 136:lib/chibios/os/rt/src/chthreads.c **** void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {
 137:lib/chibios/os/rt/src/chthreads.c **** 
 138:lib/chibios/os/rt/src/chthreads.c ****   while (startp < endp) {
 139:lib/chibios/os/rt/src/chthreads.c ****     *startp++ = v;
 140:lib/chibios/os/rt/src/chthreads.c ****   }
 141:lib/chibios/os/rt/src/chthreads.c **** }
 142:lib/chibios/os/rt/src/chthreads.c **** #endif /* CH_DBG_FILL_THREADS */
 143:lib/chibios/os/rt/src/chthreads.c **** 
 144:lib/chibios/os/rt/src/chthreads.c **** /**
 145:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 146:lib/chibios/os/rt/src/chthreads.c ****  * @details The new thread is initialized but not inserted in the ready list,
 147:lib/chibios/os/rt/src/chthreads.c ****  *          the initial state is @p CH_STATE_WTSTART.
 148:lib/chibios/os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 149:lib/chibios/os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 150:lib/chibios/os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 151:lib/chibios/os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 152:lib/chibios/os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 153:lib/chibios/os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 154:lib/chibios/os/rt/src/chthreads.c ****  *          depending on the execution context.
 155:lib/chibios/os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 156:lib/chibios/os/rt/src/chthreads.c ****  *          returning from its main function.
 157:lib/chibios/os/rt/src/chthreads.c ****  * @note    Threads created using this function do not obey to the
 158:lib/chibios/os/rt/src/chthreads.c ****  *          @p CH_DBG_FILL_THREADS debug option because it would keep
 159:lib/chibios/os/rt/src/chthreads.c ****  *          the kernel locked for too much time.
 160:lib/chibios/os/rt/src/chthreads.c ****  *
 161:lib/chibios/os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 162:lib/chibios/os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 163:lib/chibios/os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 164:lib/chibios/os/rt/src/chthreads.c ****  *
 165:lib/chibios/os/rt/src/chthreads.c ****  * @iclass
 166:lib/chibios/os/rt/src/chthreads.c ****  */
 167:lib/chibios/os/rt/src/chthreads.c **** thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
  99              		.loc 1 167 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104              	.LVL8:
 168:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp;
 169:lib/chibios/os/rt/src/chthreads.c **** 
 170:lib/chibios/os/rt/src/chthreads.c ****   chDbgCheckClassI();
 171:lib/chibios/os/rt/src/chthreads.c ****   chDbgCheck(tdp != NULL);
 172:lib/chibios/os/rt/src/chthreads.c ****   chDbgCheck(MEM_IS_ALIGNED(tdp->wbase, PORT_WORKING_AREA_ALIGN) &&
 173:lib/chibios/os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(tdp->wend, PORT_STACK_ALIGN) &&
 174:lib/chibios/os/rt/src/chthreads.c ****              (tdp->wend > tdp->wbase) &&
 175:lib/chibios/os/rt/src/chthreads.c ****              (((size_t)tdp->wend - (size_t)tdp->wbase) >= THD_WORKING_AREA_SIZE(0)));
 176:lib/chibios/os/rt/src/chthreads.c ****   chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));
 177:lib/chibios/os/rt/src/chthreads.c **** 
 178:lib/chibios/os/rt/src/chthreads.c ****   /* The thread structure is laid out in the upper part of the thread
 179:lib/chibios/os/rt/src/chthreads.c ****      workspace. The thread position structure is aligned to the required
 180:lib/chibios/os/rt/src/chthreads.c ****      stack alignment because it represents the stack top.*/
 181:lib/chibios/os/rt/src/chthreads.c ****   tp = (thread_t *)((uint8_t *)tdp->wend -
 182:lib/chibios/os/rt/src/chthreads.c ****                     MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));
 183:lib/chibios/os/rt/src/chthreads.c **** 
 184:lib/chibios/os/rt/src/chthreads.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
 185:lib/chibios/os/rt/src/chthreads.c ****   /* Stack boundary.*/
 186:lib/chibios/os/rt/src/chthreads.c ****   tp->wabase = tdp->wbase;
 105              		.loc 1 186 0
 106 0000 D0E90123 		ldrd	r2, r3, [r0, #4]
 107 0004 43F82C2C 		str	r2, [r3, #-44]
 187:lib/chibios/os/rt/src/chthreads.c **** #endif
 188:lib/chibios/os/rt/src/chthreads.c **** 
 189:lib/chibios/os/rt/src/chthreads.c ****   /* Setting up the port-dependent part of the working area.*/
 190:lib/chibios/os/rt/src/chthreads.c ****   PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 108              		.loc 1 190 0
 109 0008 A3F1AC02 		sub	r2, r3, #172
 110 000c 43F83C2C 		str	r2, [r3, #-60]
 111 0010 0269     		ldr	r2, [r0, #16]
 112 0012 43F86C2C 		str	r2, [r3, #-108]
 113 0016 4269     		ldr	r2, [r0, #20]
 114 0018 43F8682C 		str	r2, [r3, #-104]
 115 001c 044A     		ldr	r2, .L5
 116 001e 43F84C2C 		str	r2, [r3, #-76]
 191:lib/chibios/os/rt/src/chthreads.c **** 
 192:lib/chibios/os/rt/src/chthreads.c ****   /* The driver object is initialized but not started.*/
 193:lib/chibios/os/rt/src/chthreads.c ****   return _thread_init(tp, tdp->name, tdp->prio);
 117              		.loc 1 193 0
 118 0022 0168     		ldr	r1, [r0]
 119 0024 C268     		ldr	r2, [r0, #12]
 120 0026 A3F14800 		sub	r0, r3, #72
 121              	.LVL9:
 122 002a FFF7FEBF 		b	_thread_init
 123              	.LVL10:
 124              	.L6:
 125 002e 00BF     		.align	2
 126              	.L5:
 127 0030 00000000 		.word	_port_thread_start
 128              		.cfi_endproc
 129              	.LFE249:
 131              		.section	.text.chThdCreateSuspended,"ax",%progbits
 132              		.align	1
 133              		.global	chThdCreateSuspended
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 137              		.fpu softvfp
 139              	chThdCreateSuspended:
 140              	.LFB250:
 194:lib/chibios/os/rt/src/chthreads.c **** }
 195:lib/chibios/os/rt/src/chthreads.c **** 
 196:lib/chibios/os/rt/src/chthreads.c **** /**
 197:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 198:lib/chibios/os/rt/src/chthreads.c ****  * @details The new thread is initialized but not inserted in the ready list,
 199:lib/chibios/os/rt/src/chthreads.c ****  *          the initial state is @p CH_STATE_WTSTART.
 200:lib/chibios/os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 201:lib/chibios/os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 202:lib/chibios/os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 203:lib/chibios/os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 204:lib/chibios/os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 205:lib/chibios/os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 206:lib/chibios/os/rt/src/chthreads.c ****  *          depending on the execution context.
 207:lib/chibios/os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 208:lib/chibios/os/rt/src/chthreads.c ****  *          returning from its main function.
 209:lib/chibios/os/rt/src/chthreads.c ****  *
 210:lib/chibios/os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 211:lib/chibios/os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 212:lib/chibios/os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 213:lib/chibios/os/rt/src/chthreads.c ****  *
 214:lib/chibios/os/rt/src/chthreads.c ****  * @api
 215:lib/chibios/os/rt/src/chthreads.c ****  */
 216:lib/chibios/os/rt/src/chthreads.c **** thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp) {
 141              		.loc 1 216 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              	.LVL11:
 146 0000 08B5     		push	{r3, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 3, -8
 149              		.cfi_offset 14, -4
 150              	.LBB232:
 151              	.LBB233:
 152              	.LBB234:
 153              	.LBB235:
 154              		.file 3 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @version  V4.30
   5:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
   9:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    All rights reserved.
  10:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      specific prior written permission.
  20:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    *
  21:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  35:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  38:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #endif
  45:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  46:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  47:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   @{
  51:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  52:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  53:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  54:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  58:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  60:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  62:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  63:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  64:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  65:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  69:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  71:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  73:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  74:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  75:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  76:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Control Register value
  79:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  80:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  82:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
  83:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  84:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
  86:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  87:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  88:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  89:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  90:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  94:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  96:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  98:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  99:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 100:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 101:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 105:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 107:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 108:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 109:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 111:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 112:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 113:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 114:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 115:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               APSR Register value
 118:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 119:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 121:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 122:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 123:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 125:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 126:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 127:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 128:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 129:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 132:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 134:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 136:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 137:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 138:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 140:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 141:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 142:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 143:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 144:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               PSP Register value
 147:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 148:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 150:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 151:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 154:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 155:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 156:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 157:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 158:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 162:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 164:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 166:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 167:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 168:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 169:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               MSP Register value
 172:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 173:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 175:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 176:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 177:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 179:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 180:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 181:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 182:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 183:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 188:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 190:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 192:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 193:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 194:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 195:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 199:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 201:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 202:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 203:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 205:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 206:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 207:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 208:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 209:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 213:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 215:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 217:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 218:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 219:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 221:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 222:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 226:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 228:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 230:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 231:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 232:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 233:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 237:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 239:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 241:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 243:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 244:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 248:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 250:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 251:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 252:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 254:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 255:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 257:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 155              		.loc 3 264 0
 156 0002 2023     		movs	r3, #32
 157              		.syntax unified
 158              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 159 0004 83F31188 		MSR basepri, r3
 160              	@ 0 "" 2
 161              	.LVL12:
 162              		.thumb
 163              		.syntax unified
 164              	.LBE235:
 165              	.LBE234:
 166              	.LBE233:
 167              	.LBE232:
 217:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp;
 218:lib/chibios/os/rt/src/chthreads.c **** 
 219:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 220:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 221:lib/chibios/os/rt/src/chthreads.c ****               "working area in use");
 222:lib/chibios/os/rt/src/chthreads.c **** #endif
 223:lib/chibios/os/rt/src/chthreads.c **** 
 224:lib/chibios/os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 225:lib/chibios/os/rt/src/chthreads.c ****   _thread_memfill((uint8_t *)tdp->wbase,
 226:lib/chibios/os/rt/src/chthreads.c ****                   (uint8_t *)tdp->wend,
 227:lib/chibios/os/rt/src/chthreads.c ****                   CH_DBG_STACK_FILL_VALUE);
 228:lib/chibios/os/rt/src/chthreads.c **** #endif
 229:lib/chibios/os/rt/src/chthreads.c **** 
 230:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 231:lib/chibios/os/rt/src/chthreads.c ****   tp = chThdCreateSuspendedI(tdp);
 168              		.loc 1 231 0
 169 0008 FFF7FEFF 		bl	chThdCreateSuspendedI
 170              	.LVL13:
 171              	.LBB236:
 172              	.LBB237:
 173              	.LBB238:
 174              	.LBB239:
 175              	.LBB240:
 176              		.loc 3 264 0
 177 000c 0023     		movs	r3, #0
 178              		.syntax unified
 179              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 180 000e 83F31188 		MSR basepri, r3
 181              	@ 0 "" 2
 182              	.LVL14:
 183              		.thumb
 184              		.syntax unified
 185              	.LBE240:
 186              	.LBE239:
 187              	.LBE238:
 188              	.LBE237:
 189              	.LBE236:
 232:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 233:lib/chibios/os/rt/src/chthreads.c **** 
 234:lib/chibios/os/rt/src/chthreads.c ****   return tp;
 235:lib/chibios/os/rt/src/chthreads.c **** }
 190              		.loc 1 235 0
 191 0012 08BD     		pop	{r3, pc}
 192              		.cfi_endproc
 193              	.LFE250:
 195              		.section	.text.chThdCreateI,"ax",%progbits
 196              		.align	1
 197              		.global	chThdCreateI
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu softvfp
 203              	chThdCreateI:
 204              	.LFB251:
 236:lib/chibios/os/rt/src/chthreads.c **** 
 237:lib/chibios/os/rt/src/chthreads.c **** /**
 238:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 239:lib/chibios/os/rt/src/chthreads.c ****  * @details The new thread is initialized and make ready to execute.
 240:lib/chibios/os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 241:lib/chibios/os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 242:lib/chibios/os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 243:lib/chibios/os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 244:lib/chibios/os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 245:lib/chibios/os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 246:lib/chibios/os/rt/src/chthreads.c ****  *          depending on the execution context.
 247:lib/chibios/os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 248:lib/chibios/os/rt/src/chthreads.c ****  *          returning from its main function.
 249:lib/chibios/os/rt/src/chthreads.c ****  * @note    Threads created using this function do not obey to the
 250:lib/chibios/os/rt/src/chthreads.c ****  *          @p CH_DBG_FILL_THREADS debug option because it would keep
 251:lib/chibios/os/rt/src/chthreads.c ****  *          the kernel locked for too much time.
 252:lib/chibios/os/rt/src/chthreads.c ****  *
 253:lib/chibios/os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 254:lib/chibios/os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 255:lib/chibios/os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 256:lib/chibios/os/rt/src/chthreads.c ****  *
 257:lib/chibios/os/rt/src/chthreads.c ****  * @iclass
 258:lib/chibios/os/rt/src/chthreads.c ****  */
 259:lib/chibios/os/rt/src/chthreads.c **** thread_t *chThdCreateI(const thread_descriptor_t *tdp) {
 205              		.loc 1 259 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              	.LVL15:
 210 0000 08B5     		push	{r3, lr}
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 3, -8
 213              		.cfi_offset 14, -4
 260:lib/chibios/os/rt/src/chthreads.c **** 
 261:lib/chibios/os/rt/src/chthreads.c ****   return chSchReadyI(chThdCreateSuspendedI(tdp));
 214              		.loc 1 261 0
 215 0002 FFF7FEFF 		bl	chThdCreateSuspendedI
 216              	.LVL16:
 262:lib/chibios/os/rt/src/chthreads.c **** }
 217              		.loc 1 262 0
 218 0006 BDE80840 		pop	{r3, lr}
 219              		.cfi_restore 14
 220              		.cfi_restore 3
 221              		.cfi_def_cfa_offset 0
 261:lib/chibios/os/rt/src/chthreads.c **** }
 222              		.loc 1 261 0
 223 000a FFF7FEBF 		b	chSchReadyI
 224              	.LVL17:
 225              		.cfi_endproc
 226              	.LFE251:
 228              		.section	.text.chThdCreate,"ax",%progbits
 229              		.align	1
 230              		.global	chThdCreate
 231              		.syntax unified
 232              		.thumb
 233              		.thumb_func
 234              		.fpu softvfp
 236              	chThdCreate:
 237              	.LFB252:
 263:lib/chibios/os/rt/src/chthreads.c **** 
 264:lib/chibios/os/rt/src/chthreads.c **** /**
 265:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 266:lib/chibios/os/rt/src/chthreads.c ****  * @details The new thread is initialized and make ready to execute.
 267:lib/chibios/os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 268:lib/chibios/os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 269:lib/chibios/os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 270:lib/chibios/os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 271:lib/chibios/os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 272:lib/chibios/os/rt/src/chthreads.c ****  *          returning from its main function.
 273:lib/chibios/os/rt/src/chthreads.c ****  *
 274:lib/chibios/os/rt/src/chthreads.c ****  * @param[out] tdp      pointer to the thread descriptor
 275:lib/chibios/os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 276:lib/chibios/os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 277:lib/chibios/os/rt/src/chthreads.c ****  *
 278:lib/chibios/os/rt/src/chthreads.c ****  * @iclass
 279:lib/chibios/os/rt/src/chthreads.c ****  */
 280:lib/chibios/os/rt/src/chthreads.c **** thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 238              		.loc 1 280 0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242              	.LVL18:
 243 0000 10B5     		push	{r4, lr}
 244              		.cfi_def_cfa_offset 8
 245              		.cfi_offset 4, -8
 246              		.cfi_offset 14, -4
 247              	.LBB241:
 248              	.LBB242:
 249              	.LBB243:
 250              	.LBB244:
 251              		.loc 3 264 0
 252 0002 2023     		movs	r3, #32
 253              		.syntax unified
 254              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 255 0004 83F31188 		MSR basepri, r3
 256              	@ 0 "" 2
 257              	.LVL19:
 258              		.thumb
 259              		.syntax unified
 260              	.LBE244:
 261              	.LBE243:
 262              	.LBE242:
 263              	.LBE241:
 281:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp;
 282:lib/chibios/os/rt/src/chthreads.c **** 
 283:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 284:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 285:lib/chibios/os/rt/src/chthreads.c ****               "working area in use");
 286:lib/chibios/os/rt/src/chthreads.c **** #endif
 287:lib/chibios/os/rt/src/chthreads.c **** 
 288:lib/chibios/os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 289:lib/chibios/os/rt/src/chthreads.c ****   _thread_memfill((uint8_t *)tdp->wbase,
 290:lib/chibios/os/rt/src/chthreads.c ****                   (uint8_t *)tdp->wend,
 291:lib/chibios/os/rt/src/chthreads.c ****                   CH_DBG_STACK_FILL_VALUE);
 292:lib/chibios/os/rt/src/chthreads.c **** #endif
 293:lib/chibios/os/rt/src/chthreads.c **** 
 294:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 295:lib/chibios/os/rt/src/chthreads.c ****   tp = chThdCreateSuspendedI(tdp);
 264              		.loc 1 295 0
 265 0008 FFF7FEFF 		bl	chThdCreateSuspendedI
 266              	.LVL20:
 296:lib/chibios/os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 267              		.loc 1 296 0
 268 000c 0021     		movs	r1, #0
 295:lib/chibios/os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 269              		.loc 1 295 0
 270 000e 0446     		mov	r4, r0
 271              	.LVL21:
 272              		.loc 1 296 0
 273 0010 FFF7FEFF 		bl	chSchWakeupS
 274              	.LVL22:
 275              	.LBB245:
 276              	.LBB246:
 277              	.LBB247:
 278              	.LBB248:
 279              	.LBB249:
 280              		.loc 3 264 0
 281 0014 0023     		movs	r3, #0
 282              		.syntax unified
 283              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 284 0016 83F31188 		MSR basepri, r3
 285              	@ 0 "" 2
 286              	.LVL23:
 287              		.thumb
 288              		.syntax unified
 289              	.LBE249:
 290              	.LBE248:
 291              	.LBE247:
 292              	.LBE246:
 293              	.LBE245:
 297:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 298:lib/chibios/os/rt/src/chthreads.c **** 
 299:lib/chibios/os/rt/src/chthreads.c ****   return tp;
 300:lib/chibios/os/rt/src/chthreads.c **** }
 294              		.loc 1 300 0
 295 001a 2046     		mov	r0, r4
 296 001c 10BD     		pop	{r4, pc}
 297              		.cfi_endproc
 298              	.LFE252:
 300              		.section	.text.chThdCreateStatic,"ax",%progbits
 301              		.align	1
 302              		.global	chThdCreateStatic
 303              		.syntax unified
 304              		.thumb
 305              		.thumb_func
 306              		.fpu softvfp
 308              	chThdCreateStatic:
 309              	.LFB253:
 301:lib/chibios/os/rt/src/chthreads.c **** 
 302:lib/chibios/os/rt/src/chthreads.c **** /**
 303:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Creates a new thread into a static memory area.
 304:lib/chibios/os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 305:lib/chibios/os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 306:lib/chibios/os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 307:lib/chibios/os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 308:lib/chibios/os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 309:lib/chibios/os/rt/src/chthreads.c ****  *          returning from its main function.
 310:lib/chibios/os/rt/src/chthreads.c ****  *
 311:lib/chibios/os/rt/src/chthreads.c ****  * @param[out] wsp      pointer to a working area dedicated to the thread stack
 312:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] size      size of the working area
 313:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] prio      the priority level for the new thread
 314:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] pf        the thread function
 315:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] arg       an argument passed to the thread function. It can be
 316:lib/chibios/os/rt/src/chthreads.c ****  *                      @p NULL.
 317:lib/chibios/os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 318:lib/chibios/os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 319:lib/chibios/os/rt/src/chthreads.c ****  *
 320:lib/chibios/os/rt/src/chthreads.c ****  * @api
 321:lib/chibios/os/rt/src/chthreads.c ****  */
 322:lib/chibios/os/rt/src/chthreads.c **** thread_t *chThdCreateStatic(void *wsp, size_t size,
 323:lib/chibios/os/rt/src/chthreads.c ****                             tprio_t prio, tfunc_t pf, void *arg) {
 310              		.loc 1 323 0
 311              		.cfi_startproc
 312              		@ args = 4, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              	.LVL24:
 315 0000 10B5     		push	{r4, lr}
 316              		.cfi_def_cfa_offset 8
 317              		.cfi_offset 4, -8
 318              		.cfi_offset 14, -4
 319              		.loc 1 323 0
 320 0002 0446     		mov	r4, r0
 321              	.LBB250:
 322              	.LBB251:
 323              	.LBB252:
 324              	.LBB253:
 325              		.loc 3 264 0
 326 0004 2020     		movs	r0, #32
 327              	.LVL25:
 328              		.syntax unified
 329              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 330 0006 80F31188 		MSR basepri, r0
 331              	@ 0 "" 2
 332              	.LVL26:
 333              		.thumb
 334              		.syntax unified
 335              	.LBE253:
 336              	.LBE252:
 337              	.LBE251:
 338              	.LBE250:
 324:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp;
 325:lib/chibios/os/rt/src/chthreads.c **** 
 326:lib/chibios/os/rt/src/chthreads.c ****   chDbgCheck((wsp != NULL) &&
 327:lib/chibios/os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(wsp, PORT_WORKING_AREA_ALIGN) &&
 328:lib/chibios/os/rt/src/chthreads.c ****              (size >= THD_WORKING_AREA_SIZE(0)) &&
 329:lib/chibios/os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(size, PORT_STACK_ALIGN) &&
 330:lib/chibios/os/rt/src/chthreads.c ****              (prio <= HIGHPRIO) && (pf != NULL));
 331:lib/chibios/os/rt/src/chthreads.c **** 
 332:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 333:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 334:lib/chibios/os/rt/src/chthreads.c ****               "working area in use");
 335:lib/chibios/os/rt/src/chthreads.c **** #endif
 336:lib/chibios/os/rt/src/chthreads.c **** 
 337:lib/chibios/os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 338:lib/chibios/os/rt/src/chthreads.c ****   _thread_memfill((uint8_t *)wsp,
 339:lib/chibios/os/rt/src/chthreads.c ****                   (uint8_t *)wsp + size,
 340:lib/chibios/os/rt/src/chthreads.c ****                   CH_DBG_STACK_FILL_VALUE);
 341:lib/chibios/os/rt/src/chthreads.c **** #endif
 342:lib/chibios/os/rt/src/chthreads.c **** 
 343:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 344:lib/chibios/os/rt/src/chthreads.c **** 
 345:lib/chibios/os/rt/src/chthreads.c ****   /* The thread structure is laid out in the upper part of the thread
 346:lib/chibios/os/rt/src/chthreads.c ****      workspace. The thread position structure is aligned to the required
 347:lib/chibios/os/rt/src/chthreads.c ****      stack alignment because it represents the stack top.*/
 348:lib/chibios/os/rt/src/chthreads.c ****   tp = (thread_t *)((uint8_t *)wsp + size -
 339              		.loc 1 348 0
 340 000a 4839     		subs	r1, r1, #72
 341              	.LVL27:
 342 000c 6018     		adds	r0, r4, r1
 343              	.LVL28:
 349:lib/chibios/os/rt/src/chthreads.c ****                     MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));
 350:lib/chibios/os/rt/src/chthreads.c **** 
 351:lib/chibios/os/rt/src/chthreads.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
 352:lib/chibios/os/rt/src/chthreads.c ****   /* Stack boundary.*/
 353:lib/chibios/os/rt/src/chthreads.c ****   tp->wabase = (stkalign_t *)wsp;
 354:lib/chibios/os/rt/src/chthreads.c **** #endif
 355:lib/chibios/os/rt/src/chthreads.c **** 
 356:lib/chibios/os/rt/src/chthreads.c ****   /* Setting up the port-dependent part of the working area.*/
 357:lib/chibios/os/rt/src/chthreads.c ****   PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 344              		.loc 1 357 0
 345 000e A0F16401 		sub	r1, r0, #100
 346              	.LVL29:
 347 0012 40F8243C 		str	r3, [r0, #-36]
 348 0016 029B     		ldr	r3, [sp, #8]
 349              	.LVL30:
 350 0018 40F8203C 		str	r3, [r0, #-32]
 351 001c 084B     		ldr	r3, .L11
 352 001e 40F8043C 		str	r3, [r0, #-4]
 353:lib/chibios/os/rt/src/chthreads.c **** #endif
 353              		.loc 1 353 0
 354 0022 C461     		str	r4, [r0, #28]
 355              		.loc 1 357 0
 356 0024 C160     		str	r1, [r0, #12]
 358:lib/chibios/os/rt/src/chthreads.c **** 
 359:lib/chibios/os/rt/src/chthreads.c ****   tp = _thread_init(tp, "noname", prio);
 357              		.loc 1 359 0
 358 0026 0749     		ldr	r1, .L11+4
 359 0028 FFF7FEFF 		bl	_thread_init
 360              	.LVL31:
 360:lib/chibios/os/rt/src/chthreads.c **** 
 361:lib/chibios/os/rt/src/chthreads.c ****   /* Starting the thread immediately.*/
 362:lib/chibios/os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 361              		.loc 1 362 0
 362 002c 0021     		movs	r1, #0
 359:lib/chibios/os/rt/src/chthreads.c **** 
 363              		.loc 1 359 0
 364 002e 0446     		mov	r4, r0
 365              	.LVL32:
 366              		.loc 1 362 0
 367 0030 FFF7FEFF 		bl	chSchWakeupS
 368              	.LVL33:
 369              	.LBB254:
 370              	.LBB255:
 371              	.LBB256:
 372              	.LBB257:
 373              	.LBB258:
 374              		.loc 3 264 0
 375 0034 0023     		movs	r3, #0
 376              		.syntax unified
 377              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 378 0036 83F31188 		MSR basepri, r3
 379              	@ 0 "" 2
 380              	.LVL34:
 381              		.thumb
 382              		.syntax unified
 383              	.LBE258:
 384              	.LBE257:
 385              	.LBE256:
 386              	.LBE255:
 387              	.LBE254:
 363:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 364:lib/chibios/os/rt/src/chthreads.c **** 
 365:lib/chibios/os/rt/src/chthreads.c ****   return tp;
 366:lib/chibios/os/rt/src/chthreads.c **** }
 388              		.loc 1 366 0
 389 003a 2046     		mov	r0, r4
 390 003c 10BD     		pop	{r4, pc}
 391              	.LVL35:
 392              	.L12:
 393 003e 00BF     		.align	2
 394              	.L11:
 395 0040 00000000 		.word	_port_thread_start
 396 0044 00000000 		.word	.LC0
 397              		.cfi_endproc
 398              	.LFE253:
 400              		.section	.text.chThdStart,"ax",%progbits
 401              		.align	1
 402              		.global	chThdStart
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 406              		.fpu softvfp
 408              	chThdStart:
 409              	.LFB254:
 367:lib/chibios/os/rt/src/chthreads.c **** 
 368:lib/chibios/os/rt/src/chthreads.c **** /**
 369:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Resumes a thread created with @p chThdCreateI().
 370:lib/chibios/os/rt/src/chthreads.c ****  *
 371:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 372:lib/chibios/os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 373:lib/chibios/os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 374:lib/chibios/os/rt/src/chthreads.c ****  *
 375:lib/chibios/os/rt/src/chthreads.c ****  * @api
 376:lib/chibios/os/rt/src/chthreads.c ****  */
 377:lib/chibios/os/rt/src/chthreads.c **** thread_t *chThdStart(thread_t *tp) {
 410              		.loc 1 377 0
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 0
 413              		@ frame_needed = 0, uses_anonymous_args = 0
 414              	.LVL36:
 415 0000 10B5     		push	{r4, lr}
 416              		.cfi_def_cfa_offset 8
 417              		.cfi_offset 4, -8
 418              		.cfi_offset 14, -4
 419              	.LBB259:
 420              	.LBB260:
 421              	.LBB261:
 422              	.LBB262:
 423              		.loc 3 264 0
 424 0002 2023     		movs	r3, #32
 425              	.LBE262:
 426              	.LBE261:
 427              	.LBE260:
 428              	.LBE259:
 429              		.loc 1 377 0
 430 0004 0446     		mov	r4, r0
 431              	.LBB266:
 432              	.LBB265:
 433              	.LBB264:
 434              	.LBB263:
 435              		.loc 3 264 0
 436              		.syntax unified
 437              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 438 0006 83F31188 		MSR basepri, r3
 439              	@ 0 "" 2
 440              	.LVL37:
 441              		.thumb
 442              		.syntax unified
 443              	.LBE263:
 444              	.LBE264:
 445              	.LBE265:
 446              	.LBE266:
 378:lib/chibios/os/rt/src/chthreads.c **** 
 379:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 380:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 381:lib/chibios/os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 447              		.loc 1 381 0
 448 000a 0021     		movs	r1, #0
 449 000c FFF7FEFF 		bl	chSchWakeupS
 450              	.LVL38:
 451              	.LBB267:
 452              	.LBB268:
 453              	.LBB269:
 454              	.LBB270:
 455              	.LBB271:
 456              		.loc 3 264 0
 457 0010 0023     		movs	r3, #0
 458              		.syntax unified
 459              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 460 0012 83F31188 		MSR basepri, r3
 461              	@ 0 "" 2
 462              	.LVL39:
 463              		.thumb
 464              		.syntax unified
 465              	.LBE271:
 466              	.LBE270:
 467              	.LBE269:
 468              	.LBE268:
 469              	.LBE267:
 382:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 383:lib/chibios/os/rt/src/chthreads.c **** 
 384:lib/chibios/os/rt/src/chthreads.c ****   return tp;
 385:lib/chibios/os/rt/src/chthreads.c **** }
 470              		.loc 1 385 0
 471 0016 2046     		mov	r0, r4
 472 0018 10BD     		pop	{r4, pc}
 473              		.cfi_endproc
 474              	.LFE254:
 476              		.section	.text.chThdAddRef,"ax",%progbits
 477              		.align	1
 478              		.global	chThdAddRef
 479              		.syntax unified
 480              		.thumb
 481              		.thumb_func
 482              		.fpu softvfp
 484              	chThdAddRef:
 485              	.LFB255:
 386:lib/chibios/os/rt/src/chthreads.c **** 
 387:lib/chibios/os/rt/src/chthreads.c **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 388:lib/chibios/os/rt/src/chthreads.c **** /**
 389:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Adds a reference to a thread object.
 390:lib/chibios/os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_DYNAMIC must be enabled in
 391:lib/chibios/os/rt/src/chthreads.c ****  *          order to use this function.
 392:lib/chibios/os/rt/src/chthreads.c ****  *
 393:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 394:lib/chibios/os/rt/src/chthreads.c ****  * @return              The same thread pointer passed as parameter
 395:lib/chibios/os/rt/src/chthreads.c ****  *                      representing the new reference.
 396:lib/chibios/os/rt/src/chthreads.c ****  *
 397:lib/chibios/os/rt/src/chthreads.c ****  * @api
 398:lib/chibios/os/rt/src/chthreads.c ****  */
 399:lib/chibios/os/rt/src/chthreads.c **** thread_t *chThdAddRef(thread_t *tp) {
 486              		.loc 1 399 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490              		@ link register save eliminated.
 491              	.LVL40:
 492              	.LBB272:
 493              	.LBB273:
 494              	.LBB274:
 495              	.LBB275:
 496              		.loc 3 264 0
 497 0000 2023     		movs	r3, #32
 498              		.syntax unified
 499              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 500 0002 83F31188 		MSR basepri, r3
 501              	@ 0 "" 2
 502              	.LVL41:
 503              		.thumb
 504              		.syntax unified
 505              	.LBE275:
 506              	.LBE274:
 507              	.LBE273:
 508              	.LBE272:
 400:lib/chibios/os/rt/src/chthreads.c **** 
 401:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 402:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(tp->refs < (trefs_t)255, "too many references");
 403:lib/chibios/os/rt/src/chthreads.c ****   tp->refs++;
 509              		.loc 1 403 0
 510 0006 90F82230 		ldrb	r3, [r0, #34]	@ zero_extendqisi2
 511 000a 0133     		adds	r3, r3, #1
 512 000c 80F82230 		strb	r3, [r0, #34]
 513              	.LVL42:
 514              	.LBB276:
 515              	.LBB277:
 516              	.LBB278:
 517              	.LBB279:
 518              	.LBB280:
 519              		.loc 3 264 0
 520 0010 0023     		movs	r3, #0
 521              		.syntax unified
 522              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 523 0012 83F31188 		MSR basepri, r3
 524              	@ 0 "" 2
 525              	.LVL43:
 526              		.thumb
 527              		.syntax unified
 528              	.LBE280:
 529              	.LBE279:
 530              	.LBE278:
 531              	.LBE277:
 532              	.LBE276:
 404:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 405:lib/chibios/os/rt/src/chthreads.c **** 
 406:lib/chibios/os/rt/src/chthreads.c ****   return tp;
 407:lib/chibios/os/rt/src/chthreads.c **** }
 533              		.loc 1 407 0
 534 0016 7047     		bx	lr
 535              		.cfi_endproc
 536              	.LFE255:
 538              		.section	.text.chThdRelease,"ax",%progbits
 539              		.align	1
 540              		.global	chThdRelease
 541              		.syntax unified
 542              		.thumb
 543              		.thumb_func
 544              		.fpu softvfp
 546              	chThdRelease:
 547              	.LFB256:
 408:lib/chibios/os/rt/src/chthreads.c **** 
 409:lib/chibios/os/rt/src/chthreads.c **** /**
 410:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Releases a reference to a thread object.
 411:lib/chibios/os/rt/src/chthreads.c ****  * @details If the references counter reaches zero <b>and</b> the thread
 412:lib/chibios/os/rt/src/chthreads.c ****  *          is in the @p CH_STATE_FINAL state then the thread's memory is
 413:lib/chibios/os/rt/src/chthreads.c ****  *          returned to the proper allocator and the thread is removed
 414:lib/chibios/os/rt/src/chthreads.c ****  *          from the registry.<br>
 415:lib/chibios/os/rt/src/chthreads.c ****  *          Threads whose counter reaches zero and are still active become
 416:lib/chibios/os/rt/src/chthreads.c ****  *          "detached" and will be removed from registry on termination.
 417:lib/chibios/os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_DYNAMIC must be enabled in
 418:lib/chibios/os/rt/src/chthreads.c ****  *          order to use this function.
 419:lib/chibios/os/rt/src/chthreads.c ****  * @note    Static threads are not affected.
 420:lib/chibios/os/rt/src/chthreads.c ****  *
 421:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 422:lib/chibios/os/rt/src/chthreads.c ****  *
 423:lib/chibios/os/rt/src/chthreads.c ****  * @api
 424:lib/chibios/os/rt/src/chthreads.c ****  */
 425:lib/chibios/os/rt/src/chthreads.c **** void chThdRelease(thread_t *tp) {
 548              		.loc 1 425 0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 552              		@ link register save eliminated.
 553              	.LVL44:
 554              	.LBB315:
 555              	.LBB316:
 556              	.LBB317:
 557              	.LBB318:
 558              		.loc 3 264 0
 559 0000 2023     		movs	r3, #32
 560              		.syntax unified
 561              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 562 0002 83F31188 		MSR basepri, r3
 563              	@ 0 "" 2
 564              	.LVL45:
 565              		.thumb
 566              		.syntax unified
 567              	.LBE318:
 568              	.LBE317:
 569              	.LBE316:
 570              	.LBE315:
 426:lib/chibios/os/rt/src/chthreads.c **** 
 427:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 428:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 429:lib/chibios/os/rt/src/chthreads.c ****   tp->refs--;
 571              		.loc 1 429 0
 572 0006 90F82230 		ldrb	r3, [r0, #34]	@ zero_extendqisi2
 573 000a 013B     		subs	r3, r3, #1
 574 000c 80F82230 		strb	r3, [r0, #34]
 430:lib/chibios/os/rt/src/chthreads.c **** 
 431:lib/chibios/os/rt/src/chthreads.c ****   /* If the references counter reaches zero and the thread is in its
 432:lib/chibios/os/rt/src/chthreads.c ****      terminated state then the memory can be returned to the proper
 433:lib/chibios/os/rt/src/chthreads.c ****      allocator.*/
 434:lib/chibios/os/rt/src/chthreads.c ****   if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 575              		.loc 1 434 0
 576 0010 036A     		ldr	r3, [r0, #32]
 577 0012 03F0FF13 		and	r3, r3, #16711935
 578 0016 0F2B     		cmp	r3, #15
 579 0018 17D1     		bne	.L16
 435:lib/chibios/os/rt/src/chthreads.c ****     REG_REMOVE(tp);
 580              		.loc 1 435 0
 581 001a D0E90423 		ldrd	r2, r3, [r0, #16]
 582 001e 1A61     		str	r2, [r3, #16]
 583 0020 0269     		ldr	r2, [r0, #16]
 584 0022 5361     		str	r3, [r2, #20]
 585              	.LVL46:
 586              	.LBB319:
 587              	.LBB320:
 588              	.LBB321:
 589              	.LBB322:
 590              	.LBB323:
 591              		.loc 3 264 0
 592 0024 0023     		movs	r3, #0
 593              		.syntax unified
 594              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 595 0026 83F31188 		MSR basepri, r3
 596              	@ 0 "" 2
 597              	.LVL47:
 598              		.thumb
 599              		.syntax unified
 600              	.LBE323:
 601              	.LBE322:
 602              	.LBE321:
 603              	.LBE320:
 604              	.LBE319:
 436:lib/chibios/os/rt/src/chthreads.c ****     chSysUnlock();
 437:lib/chibios/os/rt/src/chthreads.c **** 
 438:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 439:lib/chibios/os/rt/src/chthreads.c ****     switch (tp->flags & CH_FLAG_MODE_MASK) {
 605              		.loc 1 439 0
 606 002a 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 607 002e 03F00303 		and	r3, r3, #3
 608 0032 012B     		cmp	r3, #1
 609 0034 02D0     		beq	.L18
 610 0036 022B     		cmp	r3, #2
 611 0038 03D0     		beq	.L19
 612 003a 7047     		bx	lr
 613              	.L18:
 614              	.LVL48:
 440:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_HEAP == TRUE
 441:lib/chibios/os/rt/src/chthreads.c ****     case CH_FLAG_MODE_HEAP:
 442:lib/chibios/os/rt/src/chthreads.c ****       chHeapFree(chThdGetWorkingAreaX(tp));
 615              		.loc 1 442 0
 616 003c C069     		ldr	r0, [r0, #28]
 617              	.LVL49:
 618 003e FFF7FEBF 		b	chHeapFree
 619              	.LVL50:
 620              	.L19:
 621              	.LBB324:
 622              	.LBB325:
 443:lib/chibios/os/rt/src/chthreads.c ****       break;
 444:lib/chibios/os/rt/src/chthreads.c **** #endif
 445:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_MEMPOOLS == TRUE
 446:lib/chibios/os/rt/src/chthreads.c ****     case CH_FLAG_MODE_MPOOL:
 447:lib/chibios/os/rt/src/chthreads.c ****       chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 623              		.loc 1 447 0
 624 0042 C169     		ldr	r1, [r0, #28]
 625 0044 006C     		ldr	r0, [r0, #64]
 626              	.LVL51:
 627 0046 FFF7FEBF 		b	chPoolFree
 628              	.LVL52:
 629              	.L16:
 630              	.LBE325:
 631              	.LBE324:
 632              	.LBB326:
 633              	.LBB327:
 634              	.LBB328:
 635              	.LBB329:
 636              	.LBB330:
 637              		.loc 3 264 0
 638 004a 0023     		movs	r3, #0
 639              		.syntax unified
 640              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 641 004c 83F31188 		MSR basepri, r3
 642              	@ 0 "" 2
 643              	.LVL53:
 644              		.thumb
 645              		.syntax unified
 646              	.LBE330:
 647              	.LBE329:
 648              	.LBE328:
 649              	.LBE327:
 650              	.LBE326:
 448:lib/chibios/os/rt/src/chthreads.c ****       break;
 449:lib/chibios/os/rt/src/chthreads.c **** #endif
 450:lib/chibios/os/rt/src/chthreads.c ****     default:
 451:lib/chibios/os/rt/src/chthreads.c ****       /* Nothing else to do for static threads.*/
 452:lib/chibios/os/rt/src/chthreads.c ****       break;
 453:lib/chibios/os/rt/src/chthreads.c ****     }
 454:lib/chibios/os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_DYNAMIC == TRUE */
 455:lib/chibios/os/rt/src/chthreads.c ****     return;
 456:lib/chibios/os/rt/src/chthreads.c ****   }
 457:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 458:lib/chibios/os/rt/src/chthreads.c **** }
 651              		.loc 1 458 0
 652 0050 7047     		bx	lr
 653              		.cfi_endproc
 654              	.LFE256:
 656              		.section	.text.chThdExitS,"ax",%progbits
 657              		.align	1
 658              		.global	chThdExitS
 659              		.syntax unified
 660              		.thumb
 661              		.thumb_func
 662              		.fpu softvfp
 664              	chThdExitS:
 665              	.LFB258:
 459:lib/chibios/os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_REGISTRY == TRUE */
 460:lib/chibios/os/rt/src/chthreads.c **** 
 461:lib/chibios/os/rt/src/chthreads.c **** /**
 462:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Terminates the current thread.
 463:lib/chibios/os/rt/src/chthreads.c ****  * @details The thread goes in the @p CH_STATE_FINAL state holding the
 464:lib/chibios/os/rt/src/chthreads.c ****  *          specified exit status code, other threads can retrieve the
 465:lib/chibios/os/rt/src/chthreads.c ****  *          exit status code by invoking the function @p chThdWait().
 466:lib/chibios/os/rt/src/chthreads.c ****  * @post    Eventual code after this function will never be executed,
 467:lib/chibios/os/rt/src/chthreads.c ****  *          this function never returns. The compiler has no way to
 468:lib/chibios/os/rt/src/chthreads.c ****  *          know this so do not assume that the compiler would remove
 469:lib/chibios/os/rt/src/chthreads.c ****  *          the dead code.
 470:lib/chibios/os/rt/src/chthreads.c ****  *
 471:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] msg       thread exit code
 472:lib/chibios/os/rt/src/chthreads.c ****  *
 473:lib/chibios/os/rt/src/chthreads.c ****  * @api
 474:lib/chibios/os/rt/src/chthreads.c ****  */
 475:lib/chibios/os/rt/src/chthreads.c **** void chThdExit(msg_t msg) {
 476:lib/chibios/os/rt/src/chthreads.c **** 
 477:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 478:lib/chibios/os/rt/src/chthreads.c ****   chThdExitS(msg);
 479:lib/chibios/os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 480:lib/chibios/os/rt/src/chthreads.c **** }
 481:lib/chibios/os/rt/src/chthreads.c **** 
 482:lib/chibios/os/rt/src/chthreads.c **** /**
 483:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Terminates the current thread.
 484:lib/chibios/os/rt/src/chthreads.c ****  * @details The thread goes in the @p CH_STATE_FINAL state holding the
 485:lib/chibios/os/rt/src/chthreads.c ****  *          specified exit status code, other threads can retrieve the
 486:lib/chibios/os/rt/src/chthreads.c ****  *          exit status code by invoking the function @p chThdWait().
 487:lib/chibios/os/rt/src/chthreads.c ****  * @post    Exiting a non-static thread that does not have references
 488:lib/chibios/os/rt/src/chthreads.c ****  *          (detached) causes the thread to remain in the registry.
 489:lib/chibios/os/rt/src/chthreads.c ****  *          It can only be removed by performing a registry scan operation.
 490:lib/chibios/os/rt/src/chthreads.c ****  * @post    Eventual code after this function will never be executed,
 491:lib/chibios/os/rt/src/chthreads.c ****  *          this function never returns. The compiler has no way to
 492:lib/chibios/os/rt/src/chthreads.c ****  *          know this so do not assume that the compiler would remove
 493:lib/chibios/os/rt/src/chthreads.c ****  *          the dead code.
 494:lib/chibios/os/rt/src/chthreads.c ****  *
 495:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] msg       thread exit code
 496:lib/chibios/os/rt/src/chthreads.c ****  *
 497:lib/chibios/os/rt/src/chthreads.c ****  * @sclass
 498:lib/chibios/os/rt/src/chthreads.c ****  */
 499:lib/chibios/os/rt/src/chthreads.c **** void chThdExitS(msg_t msg) {
 666              		.loc 1 499 0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 0
 669              		@ frame_needed = 0, uses_anonymous_args = 0
 670              	.LVL54:
 671 0000 38B5     		push	{r3, r4, r5, lr}
 672              		.cfi_def_cfa_offset 16
 673              		.cfi_offset 3, -16
 674              		.cfi_offset 4, -12
 675              		.cfi_offset 5, -8
 676              		.cfi_offset 14, -4
 500:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp = currp;
 677              		.loc 1 500 0
 678 0002 0F4B     		ldr	r3, .L24
 679 0004 9C69     		ldr	r4, [r3, #24]
 680              	.LVL55:
 501:lib/chibios/os/rt/src/chthreads.c **** 
 502:lib/chibios/os/rt/src/chthreads.c ****   /* Storing exit message.*/
 503:lib/chibios/os/rt/src/chthreads.c ****   tp->u.exitcode = msg;
 681              		.loc 1 503 0
 682 0006 6062     		str	r0, [r4, #36]
 504:lib/chibios/os/rt/src/chthreads.c **** 
 505:lib/chibios/os/rt/src/chthreads.c ****   /* Exit handler hook.*/
 506:lib/chibios/os/rt/src/chthreads.c ****   CH_CFG_THREAD_EXIT_HOOK(tp);
 507:lib/chibios/os/rt/src/chthreads.c **** 
 508:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_WAITEXIT == TRUE
 509:lib/chibios/os/rt/src/chthreads.c ****   /* Waking up any waiting thread.*/
 510:lib/chibios/os/rt/src/chthreads.c ****   while (list_notempty(&tp->waiting)) {
 683              		.loc 1 510 0
 684 0008 04F12805 		add	r5, r4, #40
 685              	.LVL56:
 686              	.L21:
 687              	.LBB331:
 688              	.LBB332:
 538:./lib/chibios/os/rt/include/chschd.h **** }
 689              		.loc 2 538 0
 690 000c A06A     		ldr	r0, [r4, #40]
 691              	.LVL57:
 692              	.LBE332:
 693              	.LBE331:
 694              		.loc 1 510 0
 695 000e A842     		cmp	r0, r5
 696 0010 10D1     		bne	.L22
 511:lib/chibios/os/rt/src/chthreads.c ****     (void) chSchReadyI(list_remove(&tp->waiting));
 512:lib/chibios/os/rt/src/chthreads.c ****   }
 513:lib/chibios/os/rt/src/chthreads.c **** #endif
 514:lib/chibios/os/rt/src/chthreads.c **** 
 515:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 516:lib/chibios/os/rt/src/chthreads.c ****   /* Static threads with no references are immediately removed from the
 517:lib/chibios/os/rt/src/chthreads.c ****      registry because there is no memory to recover.*/
 518:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 519:lib/chibios/os/rt/src/chthreads.c ****   if ((tp->refs == (trefs_t)0) &&
 697              		.loc 1 519 0
 698 0012 94F82230 		ldrb	r3, [r4, #34]	@ zero_extendqisi2
 699 0016 43B9     		cbnz	r3, .L23
 700              		.loc 1 519 0 is_stmt 0 discriminator 1
 701 0018 94F82130 		ldrb	r3, [r4, #33]	@ zero_extendqisi2
 702 001c 9B07     		lsls	r3, r3, #30
 520:lib/chibios/os/rt/src/chthreads.c ****       ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 521:lib/chibios/os/rt/src/chthreads.c ****     REG_REMOVE(tp);
 703              		.loc 1 521 0 is_stmt 1 discriminator 1
 704 001e 01BF     		itttt	eq
 705 0020 D4E90423 		ldrdeq	r2, r3, [r4, #16]
 706 0024 1A61     		streq	r2, [r3, #16]
 707 0026 2269     		ldreq	r2, [r4, #16]
 708 0028 5361     		streq	r3, [r2, #20]
 709              	.L23:
 522:lib/chibios/os/rt/src/chthreads.c ****   }
 523:lib/chibios/os/rt/src/chthreads.c **** #else
 524:lib/chibios/os/rt/src/chthreads.c ****   if (tp->refs == (trefs_t)0) {
 525:lib/chibios/os/rt/src/chthreads.c ****     REG_REMOVE(tp);
 526:lib/chibios/os/rt/src/chthreads.c ****   }
 527:lib/chibios/os/rt/src/chthreads.c **** #endif
 528:lib/chibios/os/rt/src/chthreads.c **** #endif
 529:lib/chibios/os/rt/src/chthreads.c **** 
 530:lib/chibios/os/rt/src/chthreads.c ****   /* Going into final state.*/
 531:lib/chibios/os/rt/src/chthreads.c ****   chSchGoSleepS(CH_STATE_FINAL);
 710              		.loc 1 531 0
 711 002a 0F20     		movs	r0, #15
 532:lib/chibios/os/rt/src/chthreads.c **** 
 533:lib/chibios/os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 534:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(false, "zombies apocalypse");
 535:lib/chibios/os/rt/src/chthreads.c **** }
 712              		.loc 1 535 0
 713 002c BDE83840 		pop	{r3, r4, r5, lr}
 714              		.cfi_remember_state
 715              		.cfi_restore 14
 716              		.cfi_restore 5
 717              		.cfi_restore 4
 718              		.cfi_restore 3
 719              		.cfi_def_cfa_offset 0
 720              	.LVL58:
 531:lib/chibios/os/rt/src/chthreads.c **** 
 721              		.loc 1 531 0
 722 0030 FFF7FEBF 		b	chSchGoSleepS
 723              	.LVL59:
 724              	.L22:
 725              		.cfi_restore_state
 726              	.LBB333:
 727              	.LBB334:
 552:./lib/chibios/os/rt/include/chschd.h **** }
 553:./lib/chibios/os/rt/include/chschd.h **** 
 554:./lib/chibios/os/rt/include/chschd.h **** /**
 555:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is empty.
 556:./lib/chibios/os/rt/include/chschd.h ****  *
 557:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 558:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the queue.
 559:./lib/chibios/os/rt/include/chschd.h ****  *
 560:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 561:./lib/chibios/os/rt/include/chschd.h ****  */
 562:./lib/chibios/os/rt/include/chschd.h **** static inline bool queue_isempty(const threads_queue_t *tqp) {
 563:./lib/chibios/os/rt/include/chschd.h **** 
 564:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tqp->next == (const thread_t *)tqp);
 565:./lib/chibios/os/rt/include/chschd.h **** }
 566:./lib/chibios/os/rt/include/chschd.h **** 
 567:./lib/chibios/os/rt/include/chschd.h **** /**
 568:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is not empty.
 569:./lib/chibios/os/rt/include/chschd.h ****  *
 570:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 571:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the queue.
 572:./lib/chibios/os/rt/include/chschd.h ****  *
 573:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 574:./lib/chibios/os/rt/include/chschd.h ****  */
 575:./lib/chibios/os/rt/include/chschd.h **** static inline bool queue_notempty(const threads_queue_t *tqp) {
 576:./lib/chibios/os/rt/include/chschd.h **** 
 577:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tqp->next != (const thread_t *)tqp);
 578:./lib/chibios/os/rt/include/chschd.h **** }
 579:./lib/chibios/os/rt/include/chschd.h **** 
 580:./lib/chibios/os/rt/include/chschd.h **** /* If the performance code path has been chosen then all the following
 581:./lib/chibios/os/rt/include/chschd.h ****    functions are inlined into the various kernel modules.*/
 582:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == TRUE
 583:./lib/chibios/os/rt/include/chschd.h **** static inline void list_insert(thread_t *tp, threads_list_t *tlp) {
 584:./lib/chibios/os/rt/include/chschd.h **** 
 585:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next = tlp->next;
 586:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = tp;
 587:./lib/chibios/os/rt/include/chschd.h **** }
 588:./lib/chibios/os/rt/include/chschd.h **** 
 589:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *list_remove(threads_list_t *tlp) {
 590:./lib/chibios/os/rt/include/chschd.h **** 
 591:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tlp->next;
 592:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = tp->queue.next;
 728              		.loc 2 592 0
 729 0034 0368     		ldr	r3, [r0]
 730 0036 A362     		str	r3, [r4, #40]
 731              	.LVL60:
 732              	.LBE334:
 733              	.LBE333:
 511:lib/chibios/os/rt/src/chthreads.c ****   }
 734              		.loc 1 511 0
 735 0038 FFF7FEFF 		bl	chSchReadyI
 736              	.LVL61:
 737 003c E6E7     		b	.L21
 738              	.L25:
 739 003e 00BF     		.align	2
 740              	.L24:
 741 0040 00000000 		.word	ch
 742              		.cfi_endproc
 743              	.LFE258:
 745              		.section	.text.chThdExit,"ax",%progbits
 746              		.align	1
 747              		.global	chThdExit
 748              		.syntax unified
 749              		.thumb
 750              		.thumb_func
 751              		.fpu softvfp
 753              	chThdExit:
 754              	.LFB257:
 475:lib/chibios/os/rt/src/chthreads.c **** 
 755              		.loc 1 475 0
 756              		.cfi_startproc
 757              		@ args = 0, pretend = 0, frame = 0
 758              		@ frame_needed = 0, uses_anonymous_args = 0
 759              		@ link register save eliminated.
 760              	.LVL62:
 761              	.LBB335:
 762              	.LBB336:
 763              	.LBB337:
 764              	.LBB338:
 765              		.loc 3 264 0
 766 0000 2023     		movs	r3, #32
 767              		.syntax unified
 768              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 769 0002 83F31188 		MSR basepri, r3
 770              	@ 0 "" 2
 771              	.LVL63:
 772              		.thumb
 773              		.syntax unified
 774              	.LBE338:
 775              	.LBE337:
 776              	.LBE336:
 777              	.LBE335:
 478:lib/chibios/os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 778              		.loc 1 478 0
 779 0006 FFF7FEBF 		b	chThdExitS
 780              	.LVL64:
 781              		.cfi_endproc
 782              	.LFE257:
 784              		.section	.text.chThdWait,"ax",%progbits
 785              		.align	1
 786              		.global	chThdWait
 787              		.syntax unified
 788              		.thumb
 789              		.thumb_func
 790              		.fpu softvfp
 792              	chThdWait:
 793              	.LFB259:
 536:lib/chibios/os/rt/src/chthreads.c **** 
 537:lib/chibios/os/rt/src/chthreads.c **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 538:lib/chibios/os/rt/src/chthreads.c **** /**
 539:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Blocks the execution of the invoking thread until the specified
 540:lib/chibios/os/rt/src/chthreads.c ****  *          thread terminates then the exit code is returned.
 541:lib/chibios/os/rt/src/chthreads.c ****  * @details This function waits for the specified thread to terminate then
 542:lib/chibios/os/rt/src/chthreads.c ****  *          decrements its reference counter, if the counter reaches zero then
 543:lib/chibios/os/rt/src/chthreads.c ****  *          the thread working area is returned to the proper allocator and
 544:lib/chibios/os/rt/src/chthreads.c ****  *          the thread is removed from registry.
 545:lib/chibios/os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_WAITEXIT must be enabled in
 546:lib/chibios/os/rt/src/chthreads.c ****  *          order to use this function.
 547:lib/chibios/os/rt/src/chthreads.c ****  * @post    Enabling @p chThdWait() requires 2-4 (depending on the
 548:lib/chibios/os/rt/src/chthreads.c ****  *          architecture) extra bytes in the @p thread_t structure.
 549:lib/chibios/os/rt/src/chthreads.c ****  * @note    If @p CH_CFG_USE_DYNAMIC is not specified this function just waits
 550:lib/chibios/os/rt/src/chthreads.c ****  *          for the thread termination, no memory allocators are involved.
 551:lib/chibios/os/rt/src/chthreads.c ****  *
 552:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 553:lib/chibios/os/rt/src/chthreads.c ****  * @return              The exit code from the terminated thread.
 554:lib/chibios/os/rt/src/chthreads.c ****  *
 555:lib/chibios/os/rt/src/chthreads.c ****  * @api
 556:lib/chibios/os/rt/src/chthreads.c ****  */
 557:lib/chibios/os/rt/src/chthreads.c **** msg_t chThdWait(thread_t *tp) {
 794              		.loc 1 557 0
 795              		.cfi_startproc
 796              		@ args = 0, pretend = 0, frame = 0
 797              		@ frame_needed = 0, uses_anonymous_args = 0
 798              	.LVL65:
 799 0000 38B5     		push	{r3, r4, r5, lr}
 800              		.cfi_def_cfa_offset 16
 801              		.cfi_offset 3, -16
 802              		.cfi_offset 4, -12
 803              		.cfi_offset 5, -8
 804              		.cfi_offset 14, -4
 805              		.loc 1 557 0
 806 0002 0446     		mov	r4, r0
 807              	.LBB339:
 808              	.LBB340:
 809              	.LBB341:
 810              	.LBB342:
 811              		.loc 3 264 0
 812 0004 2023     		movs	r3, #32
 813              		.syntax unified
 814              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 815 0006 83F31188 		MSR basepri, r3
 816              	@ 0 "" 2
 817              	.LVL66:
 818              		.thumb
 819              		.syntax unified
 820              	.LBE342:
 821              	.LBE341:
 822              	.LBE340:
 823              	.LBE339:
 558:lib/chibios/os/rt/src/chthreads.c ****   msg_t msg;
 559:lib/chibios/os/rt/src/chthreads.c **** 
 560:lib/chibios/os/rt/src/chthreads.c ****   chDbgCheck(tp != NULL);
 561:lib/chibios/os/rt/src/chthreads.c **** 
 562:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 563:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(tp != currp, "waiting self");
 564:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 565:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(tp->refs > (trefs_t)0, "no references");
 566:lib/chibios/os/rt/src/chthreads.c **** #endif
 567:lib/chibios/os/rt/src/chthreads.c **** 
 568:lib/chibios/os/rt/src/chthreads.c ****   if (tp->state != CH_STATE_FINAL) {
 824              		.loc 1 568 0
 825 000a 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 826 000e 0F2B     		cmp	r3, #15
 827 0010 07D0     		beq	.L28
 569:lib/chibios/os/rt/src/chthreads.c ****     list_insert(currp, &tp->waiting);
 828              		.loc 1 569 0
 829 0012 084B     		ldr	r3, .L32
 830              	.LBB343:
 831              	.LBB344:
 585:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = tp;
 832              		.loc 2 585 0
 833 0014 826A     		ldr	r2, [r0, #40]
 834              	.LBE344:
 835              	.LBE343:
 836              		.loc 1 569 0
 837 0016 9B69     		ldr	r3, [r3, #24]
 838              	.LVL67:
 839              	.LBB346:
 840              	.LBB345:
 585:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = tp;
 841              		.loc 2 585 0
 842 0018 1A60     		str	r2, [r3]
 586:./lib/chibios/os/rt/include/chschd.h **** }
 843              		.loc 2 586 0
 844 001a 8362     		str	r3, [r0, #40]
 845              	.LVL68:
 846              	.LBE345:
 847              	.LBE346:
 570:lib/chibios/os/rt/src/chthreads.c ****     chSchGoSleepS(CH_STATE_WTEXIT);
 848              		.loc 1 570 0
 849 001c 0920     		movs	r0, #9
 850              	.LVL69:
 851 001e FFF7FEFF 		bl	chSchGoSleepS
 852              	.LVL70:
 853              	.L28:
 571:lib/chibios/os/rt/src/chthreads.c ****   }
 572:lib/chibios/os/rt/src/chthreads.c ****   msg = tp->u.exitcode;
 854              		.loc 1 572 0
 855 0022 656A     		ldr	r5, [r4, #36]
 856              	.LVL71:
 857              	.LBB347:
 858              	.LBB348:
 859              	.LBB349:
 860              	.LBB350:
 861              	.LBB351:
 862              		.loc 3 264 0
 863 0024 0023     		movs	r3, #0
 864              		.syntax unified
 865              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 866 0026 83F31188 		MSR basepri, r3
 867              	@ 0 "" 2
 868              	.LVL72:
 869              		.thumb
 870              		.syntax unified
 871              	.LBE351:
 872              	.LBE350:
 873              	.LBE349:
 874              	.LBE348:
 875              	.LBE347:
 573:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 574:lib/chibios/os/rt/src/chthreads.c **** 
 575:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 576:lib/chibios/os/rt/src/chthreads.c ****   /* Releasing a reference to the thread.*/
 577:lib/chibios/os/rt/src/chthreads.c ****   chThdRelease(tp);
 876              		.loc 1 577 0
 877 002a 2046     		mov	r0, r4
 878 002c FFF7FEFF 		bl	chThdRelease
 879              	.LVL73:
 578:lib/chibios/os/rt/src/chthreads.c **** #endif
 579:lib/chibios/os/rt/src/chthreads.c **** 
 580:lib/chibios/os/rt/src/chthreads.c ****   return msg;
 581:lib/chibios/os/rt/src/chthreads.c **** }
 880              		.loc 1 581 0
 881 0030 2846     		mov	r0, r5
 882 0032 38BD     		pop	{r3, r4, r5, pc}
 883              	.LVL74:
 884              	.L33:
 885              		.align	2
 886              	.L32:
 887 0034 00000000 		.word	ch
 888              		.cfi_endproc
 889              	.LFE259:
 891              		.section	.text.chThdSetPriority,"ax",%progbits
 892              		.align	1
 893              		.global	chThdSetPriority
 894              		.syntax unified
 895              		.thumb
 896              		.thumb_func
 897              		.fpu softvfp
 899              	chThdSetPriority:
 900              	.LFB260:
 582:lib/chibios/os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_WAITEXIT */
 583:lib/chibios/os/rt/src/chthreads.c **** 
 584:lib/chibios/os/rt/src/chthreads.c **** /**
 585:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Changes the running thread priority level then reschedules if
 586:lib/chibios/os/rt/src/chthreads.c ****  *          necessary.
 587:lib/chibios/os/rt/src/chthreads.c ****  * @note    The function returns the real thread priority regardless of the
 588:lib/chibios/os/rt/src/chthreads.c ****  *          current priority that could be higher than the real priority
 589:lib/chibios/os/rt/src/chthreads.c ****  *          because the priority inheritance mechanism.
 590:lib/chibios/os/rt/src/chthreads.c ****  *
 591:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] newprio   the new priority level of the running thread
 592:lib/chibios/os/rt/src/chthreads.c ****  * @return              The old priority level.
 593:lib/chibios/os/rt/src/chthreads.c ****  *
 594:lib/chibios/os/rt/src/chthreads.c ****  * @api
 595:lib/chibios/os/rt/src/chthreads.c ****  */
 596:lib/chibios/os/rt/src/chthreads.c **** tprio_t chThdSetPriority(tprio_t newprio) {
 901              		.loc 1 596 0
 902              		.cfi_startproc
 903              		@ args = 0, pretend = 0, frame = 0
 904              		@ frame_needed = 0, uses_anonymous_args = 0
 905              	.LVL75:
 906 0000 10B5     		push	{r4, lr}
 907              		.cfi_def_cfa_offset 8
 908              		.cfi_offset 4, -8
 909              		.cfi_offset 14, -4
 910              	.LBB352:
 911              	.LBB353:
 912              	.LBB354:
 913              	.LBB355:
 914              		.loc 3 264 0
 915 0002 2023     		movs	r3, #32
 916              		.syntax unified
 917              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 918 0004 83F31188 		MSR basepri, r3
 919              	@ 0 "" 2
 920              	.LVL76:
 921              		.thumb
 922              		.syntax unified
 923              	.LBE355:
 924              	.LBE354:
 925              	.LBE353:
 926              	.LBE352:
 597:lib/chibios/os/rt/src/chthreads.c ****   tprio_t oldprio;
 598:lib/chibios/os/rt/src/chthreads.c **** 
 599:lib/chibios/os/rt/src/chthreads.c ****   chDbgCheck(newprio <= HIGHPRIO);
 600:lib/chibios/os/rt/src/chthreads.c **** 
 601:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 602:lib/chibios/os/rt/src/chthreads.c **** #if CH_CFG_USE_MUTEXES == TRUE
 603:lib/chibios/os/rt/src/chthreads.c ****   oldprio = currp->realprio;
 927              		.loc 1 603 0
 928 0008 084B     		ldr	r3, .L37
 929 000a 9B69     		ldr	r3, [r3, #24]
 930 000c DC6B     		ldr	r4, [r3, #60]
 931              	.LVL77:
 604:lib/chibios/os/rt/src/chthreads.c ****   if ((currp->prio == currp->realprio) || (newprio > currp->prio)) {
 932              		.loc 1 604 0
 933 000e 9968     		ldr	r1, [r3, #8]
 934 0010 A142     		cmp	r1, r4
 935 0012 01D0     		beq	.L35
 936              		.loc 1 604 0 is_stmt 0 discriminator 1
 937 0014 8142     		cmp	r1, r0
 938 0016 00D2     		bcs	.L36
 939              	.L35:
 605:lib/chibios/os/rt/src/chthreads.c ****     currp->prio = newprio;
 940              		.loc 1 605 0 is_stmt 1
 941 0018 9860     		str	r0, [r3, #8]
 942              	.L36:
 606:lib/chibios/os/rt/src/chthreads.c ****   }
 607:lib/chibios/os/rt/src/chthreads.c ****   currp->realprio = newprio;
 943              		.loc 1 607 0
 944 001a D863     		str	r0, [r3, #60]
 608:lib/chibios/os/rt/src/chthreads.c **** #else
 609:lib/chibios/os/rt/src/chthreads.c ****   oldprio = currp->prio;
 610:lib/chibios/os/rt/src/chthreads.c ****   currp->prio = newprio;
 611:lib/chibios/os/rt/src/chthreads.c **** #endif
 612:lib/chibios/os/rt/src/chthreads.c ****   chSchRescheduleS();
 945              		.loc 1 612 0
 946 001c FFF7FEFF 		bl	chSchRescheduleS
 947              	.LVL78:
 948              	.LBB356:
 949              	.LBB357:
 950              	.LBB358:
 951              	.LBB359:
 952              	.LBB360:
 953              		.loc 3 264 0
 954 0020 0023     		movs	r3, #0
 955              		.syntax unified
 956              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 957 0022 83F31188 		MSR basepri, r3
 958              	@ 0 "" 2
 959              	.LVL79:
 960              		.thumb
 961              		.syntax unified
 962              	.LBE360:
 963              	.LBE359:
 964              	.LBE358:
 965              	.LBE357:
 966              	.LBE356:
 613:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 614:lib/chibios/os/rt/src/chthreads.c **** 
 615:lib/chibios/os/rt/src/chthreads.c ****   return oldprio;
 616:lib/chibios/os/rt/src/chthreads.c **** }
 967              		.loc 1 616 0
 968 0026 2046     		mov	r0, r4
 969 0028 10BD     		pop	{r4, pc}
 970              	.LVL80:
 971              	.L38:
 972 002a 00BF     		.align	2
 973              	.L37:
 974 002c 00000000 		.word	ch
 975              		.cfi_endproc
 976              	.LFE260:
 978              		.section	.text.chThdTerminate,"ax",%progbits
 979              		.align	1
 980              		.global	chThdTerminate
 981              		.syntax unified
 982              		.thumb
 983              		.thumb_func
 984              		.fpu softvfp
 986              	chThdTerminate:
 987              	.LFB261:
 617:lib/chibios/os/rt/src/chthreads.c **** 
 618:lib/chibios/os/rt/src/chthreads.c **** /**
 619:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Requests a thread termination.
 620:lib/chibios/os/rt/src/chthreads.c ****  * @pre     The target thread must be written to invoke periodically
 621:lib/chibios/os/rt/src/chthreads.c ****  *          @p chThdShouldTerminate() and terminate cleanly if it returns
 622:lib/chibios/os/rt/src/chthreads.c ****  *          @p true.
 623:lib/chibios/os/rt/src/chthreads.c ****  * @post    The specified thread will terminate after detecting the termination
 624:lib/chibios/os/rt/src/chthreads.c ****  *          condition.
 625:lib/chibios/os/rt/src/chthreads.c ****  *
 626:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 627:lib/chibios/os/rt/src/chthreads.c ****  *
 628:lib/chibios/os/rt/src/chthreads.c ****  * @api
 629:lib/chibios/os/rt/src/chthreads.c ****  */
 630:lib/chibios/os/rt/src/chthreads.c **** void chThdTerminate(thread_t *tp) {
 988              		.loc 1 630 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 0
 991              		@ frame_needed = 0, uses_anonymous_args = 0
 992              		@ link register save eliminated.
 993              	.LVL81:
 994              	.LBB361:
 995              	.LBB362:
 996              	.LBB363:
 997              	.LBB364:
 998              		.loc 3 264 0
 999 0000 2023     		movs	r3, #32
 1000              		.syntax unified
 1001              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1002 0002 83F31188 		MSR basepri, r3
 1003              	@ 0 "" 2
 1004              	.LVL82:
 1005              		.thumb
 1006              		.syntax unified
 1007              	.LBE364:
 1008              	.LBE363:
 1009              	.LBE362:
 1010              	.LBE361:
 631:lib/chibios/os/rt/src/chthreads.c **** 
 632:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 633:lib/chibios/os/rt/src/chthreads.c ****   tp->flags |= CH_FLAG_TERMINATE;
 1011              		.loc 1 633 0
 1012 0006 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 1013 000a 43F00403 		orr	r3, r3, #4
 1014 000e 80F82130 		strb	r3, [r0, #33]
 1015              	.LVL83:
 1016              	.LBB365:
 1017              	.LBB366:
 1018              	.LBB367:
 1019              	.LBB368:
 1020              	.LBB369:
 1021              		.loc 3 264 0
 1022 0012 0023     		movs	r3, #0
 1023              		.syntax unified
 1024              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1025 0014 83F31188 		MSR basepri, r3
 1026              	@ 0 "" 2
 1027              	.LVL84:
 1028              		.thumb
 1029              		.syntax unified
 1030              	.LBE369:
 1031              	.LBE368:
 1032              	.LBE367:
 1033              	.LBE366:
 1034              	.LBE365:
 634:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 635:lib/chibios/os/rt/src/chthreads.c **** }
 1035              		.loc 1 635 0
 1036 0018 7047     		bx	lr
 1037              		.cfi_endproc
 1038              	.LFE261:
 1040              		.section	.text.chThdSleep,"ax",%progbits
 1041              		.align	1
 1042              		.global	chThdSleep
 1043              		.syntax unified
 1044              		.thumb
 1045              		.thumb_func
 1046              		.fpu softvfp
 1048              	chThdSleep:
 1049              	.LFB262:
 636:lib/chibios/os/rt/src/chthreads.c **** 
 637:lib/chibios/os/rt/src/chthreads.c **** /**
 638:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread for the specified time.
 639:lib/chibios/os/rt/src/chthreads.c ****  *
 640:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] time      the delay in system ticks, the special values are
 641:lib/chibios/os/rt/src/chthreads.c ****  *                      handled as follow:
 642:lib/chibios/os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 643:lib/chibios/os/rt/src/chthreads.c ****  *                        state.
 644:lib/chibios/os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 645:lib/chibios/os/rt/src/chthreads.c ****  *                      .
 646:lib/chibios/os/rt/src/chthreads.c ****  *
 647:lib/chibios/os/rt/src/chthreads.c ****  * @api
 648:lib/chibios/os/rt/src/chthreads.c ****  */
 649:lib/chibios/os/rt/src/chthreads.c **** void chThdSleep(systime_t time) {
 1050              		.loc 1 649 0
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 0
 1053              		@ frame_needed = 0, uses_anonymous_args = 0
 1054              	.LVL85:
 1055 0000 08B5     		push	{r3, lr}
 1056              		.cfi_def_cfa_offset 8
 1057              		.cfi_offset 3, -8
 1058              		.cfi_offset 14, -4
 1059              		.loc 1 649 0
 1060 0002 0146     		mov	r1, r0
 1061              	.LBB381:
 1062              	.LBB382:
 1063              	.LBB383:
 1064              	.LBB384:
 1065              		.loc 3 264 0
 1066 0004 2023     		movs	r3, #32
 1067              		.syntax unified
 1068              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1069 0006 83F31188 		MSR basepri, r3
 1070              	@ 0 "" 2
 1071              	.LVL86:
 1072              		.thumb
 1073              		.syntax unified
 1074              	.LBE384:
 1075              	.LBE383:
 1076              	.LBE382:
 1077              	.LBE381:
 1078              	.LBB385:
 1079              	.LBB386:
 1080              		.file 4 "./lib/chibios/os/rt/include/chthreads.h"
   1:./lib/chibios/os/rt/include/chthreads.h **** /*
   2:./lib/chibios/os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chthreads.h **** 
   4:./lib/chibios/os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chthreads.h **** 
   6:./lib/chibios/os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chthreads.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chthreads.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chthreads.h **** 
  11:./lib/chibios/os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chthreads.h **** 
  16:./lib/chibios/os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chthreads.h **** */
  19:./lib/chibios/os/rt/include/chthreads.h **** 
  20:./lib/chibios/os/rt/include/chthreads.h **** /**
  21:./lib/chibios/os/rt/include/chthreads.h ****  * @file    chthreads.h
  22:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:./lib/chibios/os/rt/include/chthreads.h ****  *
  24:./lib/chibios/os/rt/include/chthreads.h ****  * @addtogroup threads
  25:./lib/chibios/os/rt/include/chthreads.h ****  * @{
  26:./lib/chibios/os/rt/include/chthreads.h ****  */
  27:./lib/chibios/os/rt/include/chthreads.h **** 
  28:./lib/chibios/os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:./lib/chibios/os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:./lib/chibios/os/rt/include/chthreads.h **** 
  31:./lib/chibios/os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:./lib/chibios/os/rt/include/chthreads.h **** 
  33:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chthreads.h **** 
  37:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  38:./lib/chibios/os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  40:./lib/chibios/os/rt/include/chthreads.h **** 
  41:./lib/chibios/os/rt/include/chthreads.h **** #if !defined(CH_CFG_THREAD_EXTRA_FIELDS)
  42:./lib/chibios/os/rt/include/chthreads.h **** #error "CH_CFG_THREAD_EXTRA_FIELDS not defined in chconf.h"
  43:./lib/chibios/os/rt/include/chthreads.h **** #endif
  44:./lib/chibios/os/rt/include/chthreads.h **** 
  45:./lib/chibios/os/rt/include/chthreads.h **** #if !defined(CH_CFG_THREAD_INIT_HOOK)
  46:./lib/chibios/os/rt/include/chthreads.h **** #error "CH_CFG_THREAD_INIT_HOOK not defined in chconf.h"
  47:./lib/chibios/os/rt/include/chthreads.h **** #endif
  48:./lib/chibios/os/rt/include/chthreads.h **** 
  49:./lib/chibios/os/rt/include/chthreads.h **** #if !defined(CH_CFG_THREAD_EXIT_HOOK)
  50:./lib/chibios/os/rt/include/chthreads.h **** #error "CH_CFG_THREAD_EXIT_HOOK not defined in chconf.h"
  51:./lib/chibios/os/rt/include/chthreads.h **** #endif
  52:./lib/chibios/os/rt/include/chthreads.h **** 
  53:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  54:./lib/chibios/os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  55:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  56:./lib/chibios/os/rt/include/chthreads.h **** 
  57:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  58:./lib/chibios/os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  59:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  60:./lib/chibios/os/rt/include/chthreads.h **** 
  61:./lib/chibios/os/rt/include/chthreads.h **** /**
  62:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Thread function.
  63:./lib/chibios/os/rt/include/chthreads.h ****  */
  64:./lib/chibios/os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  65:./lib/chibios/os/rt/include/chthreads.h **** 
  66:./lib/chibios/os/rt/include/chthreads.h **** /**
  67:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  68:./lib/chibios/os/rt/include/chthreads.h ****  */
  69:./lib/chibios/os/rt/include/chthreads.h **** typedef struct {
  70:./lib/chibios/os/rt/include/chthreads.h ****   /**
  71:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   Thread name.
  72:./lib/chibios/os/rt/include/chthreads.h ****    */
  73:./lib/chibios/os/rt/include/chthreads.h ****   const char        *name;
  74:./lib/chibios/os/rt/include/chthreads.h ****   /**
  75:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  76:./lib/chibios/os/rt/include/chthreads.h ****    */
  77:./lib/chibios/os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  78:./lib/chibios/os/rt/include/chthreads.h ****   /**
  79:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   End of the working area.
  80:./lib/chibios/os/rt/include/chthreads.h ****    */
  81:./lib/chibios/os/rt/include/chthreads.h ****   stkalign_t        *wend;
  82:./lib/chibios/os/rt/include/chthreads.h ****   /**
  83:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   Thread priority.
  84:./lib/chibios/os/rt/include/chthreads.h ****    */
  85:./lib/chibios/os/rt/include/chthreads.h ****   tprio_t           prio;
  86:./lib/chibios/os/rt/include/chthreads.h ****   /**
  87:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  88:./lib/chibios/os/rt/include/chthreads.h ****    */
  89:./lib/chibios/os/rt/include/chthreads.h ****   tfunc_t           funcp;
  90:./lib/chibios/os/rt/include/chthreads.h ****   /**
  91:./lib/chibios/os/rt/include/chthreads.h ****    * @brief   Thread argument.
  92:./lib/chibios/os/rt/include/chthreads.h ****    */
  93:./lib/chibios/os/rt/include/chthreads.h ****   void              *arg;
  94:./lib/chibios/os/rt/include/chthreads.h **** } thread_descriptor_t;
  95:./lib/chibios/os/rt/include/chthreads.h **** 
  96:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  97:./lib/chibios/os/rt/include/chthreads.h **** /* Module macros.                                                            */
  98:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
  99:./lib/chibios/os/rt/include/chthreads.h **** 
 100:./lib/chibios/os/rt/include/chthreads.h **** /**
 101:./lib/chibios/os/rt/include/chthreads.h ****  * @name    Threads queues
 102:./lib/chibios/os/rt/include/chthreads.h ****  */
 103:./lib/chibios/os/rt/include/chthreads.h **** /**
 104:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
 105:./lib/chibios/os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
 106:./lib/chibios/os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
 107:./lib/chibios/os/rt/include/chthreads.h ****  *
 108:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 109:./lib/chibios/os/rt/include/chthreads.h ****  */
 110:./lib/chibios/os/rt/include/chthreads.h **** #define _THREADS_QUEUE_DATA(name) {(thread_t *)&name, (thread_t *)&name}
 111:./lib/chibios/os/rt/include/chthreads.h **** 
 112:./lib/chibios/os/rt/include/chthreads.h **** /**
 113:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 114:./lib/chibios/os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 115:./lib/chibios/os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 116:./lib/chibios/os/rt/include/chthreads.h ****  *
 117:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] name      the name of the threads queue variable
 118:./lib/chibios/os/rt/include/chthreads.h ****  */
 119:./lib/chibios/os/rt/include/chthreads.h **** #define _THREADS_QUEUE_DECL(name)                                           \
 120:./lib/chibios/os/rt/include/chthreads.h ****   threads_queue_t name = _THREADS_QUEUE_DATA(name)
 121:./lib/chibios/os/rt/include/chthreads.h **** /** @} */
 122:./lib/chibios/os/rt/include/chthreads.h **** 
 123:./lib/chibios/os/rt/include/chthreads.h **** /**
 124:./lib/chibios/os/rt/include/chthreads.h ****  * @name    Working Areas
 125:./lib/chibios/os/rt/include/chthreads.h ****  */
 126:./lib/chibios/os/rt/include/chthreads.h **** /**
 127:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 128:./lib/chibios/os/rt/include/chthreads.h ****  *
 129:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 130:./lib/chibios/os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 131:./lib/chibios/os/rt/include/chthreads.h ****  *
 132:./lib/chibios/os/rt/include/chthreads.h ****  * @api
 133:./lib/chibios/os/rt/include/chthreads.h ****  */
 134:./lib/chibios/os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 135:./lib/chibios/os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 136:./lib/chibios/os/rt/include/chthreads.h **** 
 137:./lib/chibios/os/rt/include/chthreads.h **** /**
 138:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 139:./lib/chibios/os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 140:./lib/chibios/os/rt/include/chthreads.h ****  *          aligned as both position and size.
 141:./lib/chibios/os/rt/include/chthreads.h ****  *
 142:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 143:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 144:./lib/chibios/os/rt/include/chthreads.h ****  *
 145:./lib/chibios/os/rt/include/chthreads.h ****  * @api
 146:./lib/chibios/os/rt/include/chthreads.h ****  */
 147:./lib/chibios/os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 148:./lib/chibios/os/rt/include/chthreads.h **** 
 149:./lib/chibios/os/rt/include/chthreads.h **** /**
 150:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 151:./lib/chibios/os/rt/include/chthreads.h ****  *
 152:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 153:./lib/chibios/os/rt/include/chthreads.h ****  */
 154:./lib/chibios/os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 155:./lib/chibios/os/rt/include/chthreads.h **** 
 156:./lib/chibios/os/rt/include/chthreads.h **** /**
 157:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 158:./lib/chibios/os/rt/include/chthreads.h ****  *
 159:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 160:./lib/chibios/os/rt/include/chthreads.h ****  */
 161:./lib/chibios/os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 162:./lib/chibios/os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 163:./lib/chibios/os/rt/include/chthreads.h **** /** @} */
 164:./lib/chibios/os/rt/include/chthreads.h **** 
 165:./lib/chibios/os/rt/include/chthreads.h **** /**
 166:./lib/chibios/os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 167:./lib/chibios/os/rt/include/chthreads.h ****  */
 168:./lib/chibios/os/rt/include/chthreads.h **** /**
 169:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 170:./lib/chibios/os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 171:./lib/chibios/os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 172:./lib/chibios/os/rt/include/chthreads.h ****  */
 173:./lib/chibios/os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 174:./lib/chibios/os/rt/include/chthreads.h **** /** @} */
 175:./lib/chibios/os/rt/include/chthreads.h **** 
 176:./lib/chibios/os/rt/include/chthreads.h **** /**
 177:./lib/chibios/os/rt/include/chthreads.h ****  * @name    Macro Functions
 178:./lib/chibios/os/rt/include/chthreads.h ****  * @{
 179:./lib/chibios/os/rt/include/chthreads.h ****  */
 180:./lib/chibios/os/rt/include/chthreads.h **** /**
 181:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 182:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 183:./lib/chibios/os/rt/include/chthreads.h ****  *          system tick clock.
 184:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 185:./lib/chibios/os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 186:./lib/chibios/os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 187:./lib/chibios/os/rt/include/chthreads.h ****  *          converted.
 188:./lib/chibios/os/rt/include/chthreads.h ****  *
 189:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 190:./lib/chibios/os/rt/include/chthreads.h ****  *
 191:./lib/chibios/os/rt/include/chthreads.h ****  * @api
 192:./lib/chibios/os/rt/include/chthreads.h ****  */
 193:./lib/chibios/os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(S2ST(sec))
 194:./lib/chibios/os/rt/include/chthreads.h **** 
 195:./lib/chibios/os/rt/include/chthreads.h **** /**
 196:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 197:./lib/chibios/os/rt/include/chthreads.h ****  *          milliseconds.
 198:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 199:./lib/chibios/os/rt/include/chthreads.h ****  *          system tick clock.
 200:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 201:./lib/chibios/os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 202:./lib/chibios/os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 203:./lib/chibios/os/rt/include/chthreads.h ****  *          converted.
 204:./lib/chibios/os/rt/include/chthreads.h ****  *
 205:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 206:./lib/chibios/os/rt/include/chthreads.h ****  *
 207:./lib/chibios/os/rt/include/chthreads.h ****  * @api
 208:./lib/chibios/os/rt/include/chthreads.h ****  */
 209:./lib/chibios/os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(MS2ST(msec))
 210:./lib/chibios/os/rt/include/chthreads.h **** 
 211:./lib/chibios/os/rt/include/chthreads.h **** /**
 212:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 213:./lib/chibios/os/rt/include/chthreads.h ****  *          microseconds.
 214:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 215:./lib/chibios/os/rt/include/chthreads.h ****  *          system tick clock.
 216:./lib/chibios/os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 217:./lib/chibios/os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 218:./lib/chibios/os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 219:./lib/chibios/os/rt/include/chthreads.h ****  *          converted.
 220:./lib/chibios/os/rt/include/chthreads.h ****  *
 221:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 222:./lib/chibios/os/rt/include/chthreads.h ****  *
 223:./lib/chibios/os/rt/include/chthreads.h ****  * @api
 224:./lib/chibios/os/rt/include/chthreads.h ****  */
 225:./lib/chibios/os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(US2ST(usec))
 226:./lib/chibios/os/rt/include/chthreads.h **** /** @} */
 227:./lib/chibios/os/rt/include/chthreads.h **** 
 228:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
 229:./lib/chibios/os/rt/include/chthreads.h **** /* External declarations.                                                    */
 230:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
 231:./lib/chibios/os/rt/include/chthreads.h **** 
 232:./lib/chibios/os/rt/include/chthreads.h **** #ifdef __cplusplus
 233:./lib/chibios/os/rt/include/chthreads.h **** extern "C" {
 234:./lib/chibios/os/rt/include/chthreads.h **** #endif
 235:./lib/chibios/os/rt/include/chthreads.h ****    thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio);
 236:./lib/chibios/os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 237:./lib/chibios/os/rt/include/chthreads.h ****   void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v);
 238:./lib/chibios/os/rt/include/chthreads.h **** #endif
 239:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 240:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 241:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 242:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 243:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 244:./lib/chibios/os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 245:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 246:./lib/chibios/os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 247:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 248:./lib/chibios/os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 249:./lib/chibios/os/rt/include/chthreads.h **** #endif
 250:./lib/chibios/os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 251:./lib/chibios/os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 252:./lib/chibios/os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 253:./lib/chibios/os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 254:./lib/chibios/os/rt/include/chthreads.h **** #endif
 255:./lib/chibios/os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 256:./lib/chibios/os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 257:./lib/chibios/os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 258:./lib/chibios/os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, systime_t timeout);
 259:./lib/chibios/os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 260:./lib/chibios/os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 261:./lib/chibios/os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 262:./lib/chibios/os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout);
 263:./lib/chibios/os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 264:./lib/chibios/os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 265:./lib/chibios/os/rt/include/chthreads.h ****   void chThdSleep(systime_t time);
 266:./lib/chibios/os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 267:./lib/chibios/os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 268:./lib/chibios/os/rt/include/chthreads.h ****   void chThdYield(void);
 269:./lib/chibios/os/rt/include/chthreads.h **** #ifdef __cplusplus
 270:./lib/chibios/os/rt/include/chthreads.h **** }
 271:./lib/chibios/os/rt/include/chthreads.h **** #endif
 272:./lib/chibios/os/rt/include/chthreads.h **** 
 273:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
 274:./lib/chibios/os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 275:./lib/chibios/os/rt/include/chthreads.h **** /*===========================================================================*/
 276:./lib/chibios/os/rt/include/chthreads.h **** 
 277:./lib/chibios/os/rt/include/chthreads.h ****  /**
 278:./lib/chibios/os/rt/include/chthreads.h ****   * @brief   Returns a pointer to the current @p thread_t.
 279:./lib/chibios/os/rt/include/chthreads.h ****   *
 280:./lib/chibios/os/rt/include/chthreads.h ****   * @return             A pointer to the current thread.
 281:./lib/chibios/os/rt/include/chthreads.h ****   *
 282:./lib/chibios/os/rt/include/chthreads.h ****   * @xclass
 283:./lib/chibios/os/rt/include/chthreads.h ****   */
 284:./lib/chibios/os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 285:./lib/chibios/os/rt/include/chthreads.h **** 
 286:./lib/chibios/os/rt/include/chthreads.h ****   return ch.rlist.current;
 287:./lib/chibios/os/rt/include/chthreads.h **** }
 288:./lib/chibios/os/rt/include/chthreads.h **** 
 289:./lib/chibios/os/rt/include/chthreads.h **** /**
 290:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Returns the current thread priority.
 291:./lib/chibios/os/rt/include/chthreads.h ****  * @note    Can be invoked in any context.
 292:./lib/chibios/os/rt/include/chthreads.h ****  *
 293:./lib/chibios/os/rt/include/chthreads.h ****  * @return              The current thread priority.
 294:./lib/chibios/os/rt/include/chthreads.h ****  *
 295:./lib/chibios/os/rt/include/chthreads.h ****  * @xclass
 296:./lib/chibios/os/rt/include/chthreads.h ****  */
 297:./lib/chibios/os/rt/include/chthreads.h **** static inline tprio_t chThdGetPriorityX(void) {
 298:./lib/chibios/os/rt/include/chthreads.h **** 
 299:./lib/chibios/os/rt/include/chthreads.h ****   return chThdGetSelfX()->prio;
 300:./lib/chibios/os/rt/include/chthreads.h **** }
 301:./lib/chibios/os/rt/include/chthreads.h **** 
 302:./lib/chibios/os/rt/include/chthreads.h **** /**
 303:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Returns the number of ticks consumed by the specified thread.
 304:./lib/chibios/os/rt/include/chthreads.h ****  * @note    This function is only available when the
 305:./lib/chibios/os/rt/include/chthreads.h ****  *          @p CH_DBG_THREADS_PROFILING configuration option is enabled.
 306:./lib/chibios/os/rt/include/chthreads.h ****  *
 307:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 308:./lib/chibios/os/rt/include/chthreads.h ****  * @return              The number of consumed system ticks.
 309:./lib/chibios/os/rt/include/chthreads.h ****  *
 310:./lib/chibios/os/rt/include/chthreads.h ****  * @xclass
 311:./lib/chibios/os/rt/include/chthreads.h ****  */
 312:./lib/chibios/os/rt/include/chthreads.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 313:./lib/chibios/os/rt/include/chthreads.h **** static inline systime_t chThdGetTicksX(thread_t *tp) {
 314:./lib/chibios/os/rt/include/chthreads.h **** 
 315:./lib/chibios/os/rt/include/chthreads.h ****   return tp->time;
 316:./lib/chibios/os/rt/include/chthreads.h **** }
 317:./lib/chibios/os/rt/include/chthreads.h **** #endif
 318:./lib/chibios/os/rt/include/chthreads.h **** 
 319:./lib/chibios/os/rt/include/chthreads.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 320:./lib/chibios/os/rt/include/chthreads.h ****     defined(__DOXYGEN__)
 321:./lib/chibios/os/rt/include/chthreads.h **** /**
 322:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Returns the working area base of the specified thread.
 323:./lib/chibios/os/rt/include/chthreads.h ****  *
 324:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 325:./lib/chibios/os/rt/include/chthreads.h ****  * @return              The working area base pointer.
 326:./lib/chibios/os/rt/include/chthreads.h ****  *
 327:./lib/chibios/os/rt/include/chthreads.h ****  * @xclass
 328:./lib/chibios/os/rt/include/chthreads.h ****  */
 329:./lib/chibios/os/rt/include/chthreads.h **** static inline stkalign_t *chThdGetWorkingAreaX(thread_t *tp) {
 330:./lib/chibios/os/rt/include/chthreads.h **** 
 331:./lib/chibios/os/rt/include/chthreads.h ****   return tp->wabase;
 332:./lib/chibios/os/rt/include/chthreads.h **** }
 333:./lib/chibios/os/rt/include/chthreads.h **** #endif /* CH_DBG_ENABLE_STACK_CHECK == TRUE */
 334:./lib/chibios/os/rt/include/chthreads.h **** 
 335:./lib/chibios/os/rt/include/chthreads.h **** /**
 336:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Verifies if the specified thread is in the @p CH_STATE_FINAL state.
 337:./lib/chibios/os/rt/include/chthreads.h ****  *
 338:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 339:./lib/chibios/os/rt/include/chthreads.h ****  * @retval true         thread terminated.
 340:./lib/chibios/os/rt/include/chthreads.h ****  * @retval false        thread not terminated.
 341:./lib/chibios/os/rt/include/chthreads.h ****  *
 342:./lib/chibios/os/rt/include/chthreads.h ****  * @xclass
 343:./lib/chibios/os/rt/include/chthreads.h ****  */
 344:./lib/chibios/os/rt/include/chthreads.h **** static inline bool chThdTerminatedX(thread_t *tp) {
 345:./lib/chibios/os/rt/include/chthreads.h **** 
 346:./lib/chibios/os/rt/include/chthreads.h ****   return (bool)(tp->state == CH_STATE_FINAL);
 347:./lib/chibios/os/rt/include/chthreads.h **** }
 348:./lib/chibios/os/rt/include/chthreads.h **** 
 349:./lib/chibios/os/rt/include/chthreads.h **** /**
 350:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Verifies if the current thread has a termination request pending.
 351:./lib/chibios/os/rt/include/chthreads.h ****  *
 352:./lib/chibios/os/rt/include/chthreads.h ****  * @retval true         termination request pending.
 353:./lib/chibios/os/rt/include/chthreads.h ****  * @retval false        termination request not pending.
 354:./lib/chibios/os/rt/include/chthreads.h ****  *
 355:./lib/chibios/os/rt/include/chthreads.h ****  * @xclass
 356:./lib/chibios/os/rt/include/chthreads.h ****  */
 357:./lib/chibios/os/rt/include/chthreads.h **** static inline bool chThdShouldTerminateX(void) {
 358:./lib/chibios/os/rt/include/chthreads.h **** 
 359:./lib/chibios/os/rt/include/chthreads.h ****   return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 360:./lib/chibios/os/rt/include/chthreads.h **** }
 361:./lib/chibios/os/rt/include/chthreads.h **** 
 362:./lib/chibios/os/rt/include/chthreads.h **** /**
 363:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Resumes a thread created with @p chThdCreateI().
 364:./lib/chibios/os/rt/include/chthreads.h ****  *
 365:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 366:./lib/chibios/os/rt/include/chthreads.h ****  * @return              The pointer to the @p thread_t structure allocated for
 367:./lib/chibios/os/rt/include/chthreads.h ****  *                      the thread into the working space area.
 368:./lib/chibios/os/rt/include/chthreads.h ****  *
 369:./lib/chibios/os/rt/include/chthreads.h ****  * @iclass
 370:./lib/chibios/os/rt/include/chthreads.h ****  */
 371:./lib/chibios/os/rt/include/chthreads.h **** static inline thread_t *chThdStartI(thread_t *tp) {
 372:./lib/chibios/os/rt/include/chthreads.h **** 
 373:./lib/chibios/os/rt/include/chthreads.h ****   chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 374:./lib/chibios/os/rt/include/chthreads.h **** 
 375:./lib/chibios/os/rt/include/chthreads.h ****   return chSchReadyI(tp);
 376:./lib/chibios/os/rt/include/chthreads.h **** }
 377:./lib/chibios/os/rt/include/chthreads.h **** 
 378:./lib/chibios/os/rt/include/chthreads.h **** /**
 379:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Suspends the invoking thread for the specified time.
 380:./lib/chibios/os/rt/include/chthreads.h ****  *
 381:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] time      the delay in system ticks, the special values are
 382:./lib/chibios/os/rt/include/chthreads.h ****  *                      handled as follow:
 383:./lib/chibios/os/rt/include/chthreads.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 384:./lib/chibios/os/rt/include/chthreads.h ****  *                        state.
 385:./lib/chibios/os/rt/include/chthreads.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 386:./lib/chibios/os/rt/include/chthreads.h ****  *                      .
 387:./lib/chibios/os/rt/include/chthreads.h ****  *
 388:./lib/chibios/os/rt/include/chthreads.h ****  * @sclass
 389:./lib/chibios/os/rt/include/chthreads.h ****  */
 390:./lib/chibios/os/rt/include/chthreads.h **** static inline void chThdSleepS(systime_t time) {
 391:./lib/chibios/os/rt/include/chthreads.h **** 
 392:./lib/chibios/os/rt/include/chthreads.h ****   chDbgCheck(time != TIME_IMMEDIATE);
 393:./lib/chibios/os/rt/include/chthreads.h **** 
 394:./lib/chibios/os/rt/include/chthreads.h ****   (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 1081              		.loc 4 394 0
 1082 000a 0820     		movs	r0, #8
 1083              	.LVL87:
 1084 000c FFF7FEFF 		bl	chSchGoSleepTimeoutS
 1085              	.LVL88:
 1086              	.LBE386:
 1087              	.LBE385:
 1088              	.LBB387:
 1089              	.LBB388:
 1090              	.LBB389:
 1091              	.LBB390:
 1092              	.LBB391:
 1093              		.loc 3 264 0
 1094 0010 0023     		movs	r3, #0
 1095              		.syntax unified
 1096              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1097 0012 83F31188 		MSR basepri, r3
 1098              	@ 0 "" 2
 1099              	.LVL89:
 1100              		.thumb
 1101              		.syntax unified
 1102              	.LBE391:
 1103              	.LBE390:
 1104              	.LBE389:
 1105              	.LBE388:
 1106              	.LBE387:
 650:lib/chibios/os/rt/src/chthreads.c **** 
 651:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 652:lib/chibios/os/rt/src/chthreads.c ****   chThdSleepS(time);
 653:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 654:lib/chibios/os/rt/src/chthreads.c **** }
 1107              		.loc 1 654 0
 1108 0016 08BD     		pop	{r3, pc}
 1109              		.cfi_endproc
 1110              	.LFE262:
 1112              		.section	.text.chThdSleepUntil,"ax",%progbits
 1113              		.align	1
 1114              		.global	chThdSleepUntil
 1115              		.syntax unified
 1116              		.thumb
 1117              		.thumb_func
 1118              		.fpu softvfp
 1120              	chThdSleepUntil:
 1121              	.LFB263:
 655:lib/chibios/os/rt/src/chthreads.c **** 
 656:lib/chibios/os/rt/src/chthreads.c **** /**
 657:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread until the system time arrives to the
 658:lib/chibios/os/rt/src/chthreads.c ****  *          specified value.
 659:lib/chibios/os/rt/src/chthreads.c ****  * @note    The function has no concept of "past", all specifiable times
 660:lib/chibios/os/rt/src/chthreads.c ****  *          are in the future, this means that if you call this function
 661:lib/chibios/os/rt/src/chthreads.c ****  *          exceeding your calculated intervals then the function will
 662:lib/chibios/os/rt/src/chthreads.c ****  *          return in a far future time, not immediately.
 663:lib/chibios/os/rt/src/chthreads.c ****  * @see     chThdSleepUntilWindowed()
 664:lib/chibios/os/rt/src/chthreads.c ****  *
 665:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] time      absolute system time
 666:lib/chibios/os/rt/src/chthreads.c ****  *
 667:lib/chibios/os/rt/src/chthreads.c ****  * @api
 668:lib/chibios/os/rt/src/chthreads.c ****  */
 669:lib/chibios/os/rt/src/chthreads.c **** void chThdSleepUntil(systime_t time) {
 1122              		.loc 1 669 0
 1123              		.cfi_startproc
 1124              		@ args = 0, pretend = 0, frame = 0
 1125              		@ frame_needed = 0, uses_anonymous_args = 0
 1126              	.LVL90:
 1127 0000 08B5     		push	{r3, lr}
 1128              		.cfi_def_cfa_offset 8
 1129              		.cfi_offset 3, -8
 1130              		.cfi_offset 14, -4
 1131              	.LBB407:
 1132              	.LBB408:
 1133              	.LBB409:
 1134              	.LBB410:
 1135              		.loc 3 264 0
 1136 0002 2023     		movs	r3, #32
 1137              		.syntax unified
 1138              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1139 0004 83F31188 		MSR basepri, r3
 1140              	@ 0 "" 2
 1141              	.LVL91:
 1142              		.thumb
 1143              		.syntax unified
 1144              	.LBE410:
 1145              	.LBE409:
 1146              	.LBE408:
 1147              	.LBE407:
 1148              	.LBB411:
 1149              	.LBB412:
 1150              	.LBB413:
 1151              	.LBB414:
 1152              		.file 5 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h"
   1:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*
   2:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
   4:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     you may not use this file except in compliance with the License.
   6:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     You may obtain a copy of the License at
   7:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
   8:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  10:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     Unless required by applicable law or agreed to in writing, software
  11:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     See the License for the specific language governing permissions and
  14:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     limitations under the License.
  15:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** */
  16:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  17:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  18:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @file    TIMv1/hal_st_lld.h
  19:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   ST Driver subsystem low level driver header.
  20:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @details This header is designed to be include-able without having to
  21:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *          include other files from the HAL.
  22:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *
  23:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @addtogroup ST
  24:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @{
  25:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  26:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  27:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #ifndef HAL_ST_LLD_H
  28:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define HAL_ST_LLD_H
  29:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  30:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #include "mcuconf.h"
  31:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #include "stm32_registry.h"
  32:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #include "stm32_tim.h"
  33:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  34:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  35:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver constants.                                                         */
  36:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  37:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  38:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  39:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver pre-compile time settings.                                         */
  40:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  41:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  42:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  43:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @name    Configuration options
  44:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @{
  45:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  46:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  47:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   SysTick timer IRQ priority.
  48:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  49:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !defined(STM32_ST_IRQ_PRIORITY) || defined(__DOXYGEN__)
  50:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_IRQ_PRIORITY               8
  51:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  52:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  53:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  54:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   TIMx unit (by number) to be used for free running operations.
  55:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @note    You must select a 32 bits timer if a 32 bits @p systick_t type
  56:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *          is required.
  57:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @note    Timers 2, 3, 4 and 5 are supported.
  58:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  59:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !defined(STM32_ST_USE_TIMER) || defined(__DOXYGEN__)
  60:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_USE_TIMER                  2
  61:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  62:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /** @} */
  63:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  64:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  65:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Derived constants and error checks.                                       */
  66:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  67:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  68:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if STM32_ST_USE_TIMER == 2
  69:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM2
  70:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM2 not present"
  71:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  72:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM2
  73:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  74:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 3
  75:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM3
  76:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM3 not present"
  77:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  78:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM3
  79:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  80:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 4
  81:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM4
  82:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM4 not present"
  83:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  84:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM4
  85:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  86:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 5
  87:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM5
  88:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM5 not present"
  89:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  90:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM5
  91:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  92:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 21
  93:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM21
  94:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM21 not present"
  95:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  96:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM21
  97:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  98:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 22
  99:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM22
 100:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM22 not present"
 101:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 102:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM22
 103:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 104:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #else
 105:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "STM32_ST_USE_TIMER specifies an unsupported timer"
 106:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 107:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 108:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 109:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver data structures and types.                                         */
 110:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 111:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 112:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 113:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver macros.                                                            */
 114:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 115:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 116:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 117:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* External declarations.                                                    */
 118:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 119:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 120:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
 121:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** extern "C" {
 122:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 123:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****   void st_lld_init(void);
 124:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
 125:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** }
 126:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 127:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 128:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 129:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver inline functions.                                                  */
 130:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 131:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 132:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
 133:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   Returns the time counter value.
 134:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *
 135:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @return              The counter value.
 136:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *
 137:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @notapi
 138:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
 139:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** static inline systime_t st_lld_get_counter(void) {
 140:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 141:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****   return (systime_t)STM32_ST_TIM->CNT;
 1153              		.loc 5 141 0
 1154 0008 4FF08043 		mov	r3, #1073741824
 1155 000c 596A     		ldr	r1, [r3, #36]
 1156              	.LVL92:
 1157              	.LBE414:
 1158              	.LBE413:
 1159              	.LBE412:
 1160              	.LBE411:
 670:lib/chibios/os/rt/src/chthreads.c **** 
 671:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 672:lib/chibios/os/rt/src/chthreads.c ****   time -= chVTGetSystemTimeX();
 673:lib/chibios/os/rt/src/chthreads.c ****   if (time > (systime_t)0) {
 1161              		.loc 1 673 0
 1162 000e 411A     		subs	r1, r0, r1
 1163              	.LVL93:
 1164 0010 02D0     		beq	.L42
 1165              	.LVL94:
 1166              	.LBB415:
 1167              	.LBB416:
 1168              		.loc 4 394 0
 1169 0012 0820     		movs	r0, #8
 1170 0014 FFF7FEFF 		bl	chSchGoSleepTimeoutS
 1171              	.LVL95:
 1172              	.L42:
 1173              	.LBE416:
 1174              	.LBE415:
 1175              	.LBB417:
 1176              	.LBB418:
 1177              	.LBB419:
 1178              	.LBB420:
 1179              	.LBB421:
 1180              		.loc 3 264 0
 1181 0018 0023     		movs	r3, #0
 1182              		.syntax unified
 1183              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1184 001a 83F31188 		MSR basepri, r3
 1185              	@ 0 "" 2
 1186              	.LVL96:
 1187              		.thumb
 1188              		.syntax unified
 1189              	.LBE421:
 1190              	.LBE420:
 1191              	.LBE419:
 1192              	.LBE418:
 1193              	.LBE417:
 674:lib/chibios/os/rt/src/chthreads.c ****     chThdSleepS(time);
 675:lib/chibios/os/rt/src/chthreads.c ****   }
 676:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 677:lib/chibios/os/rt/src/chthreads.c **** }
 1194              		.loc 1 677 0
 1195 001e 08BD     		pop	{r3, pc}
 1196              		.cfi_endproc
 1197              	.LFE263:
 1199              		.section	.text.chThdSleepUntilWindowed,"ax",%progbits
 1200              		.align	1
 1201              		.global	chThdSleepUntilWindowed
 1202              		.syntax unified
 1203              		.thumb
 1204              		.thumb_func
 1205              		.fpu softvfp
 1207              	chThdSleepUntilWindowed:
 1208              	.LFB264:
 678:lib/chibios/os/rt/src/chthreads.c **** 
 679:lib/chibios/os/rt/src/chthreads.c **** /**
 680:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread until the system time arrives to the
 681:lib/chibios/os/rt/src/chthreads.c ****  *          specified value.
 682:lib/chibios/os/rt/src/chthreads.c ****  * @note    The system time is assumed to be between @p prev and @p time
 683:lib/chibios/os/rt/src/chthreads.c ****  *          else the call is assumed to have been called outside the
 684:lib/chibios/os/rt/src/chthreads.c ****  *          allowed time interval, in this case no sleep is performed.
 685:lib/chibios/os/rt/src/chthreads.c ****  * @see     chThdSleepUntil()
 686:lib/chibios/os/rt/src/chthreads.c ****  *
 687:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] prev      absolute system time of the previous deadline
 688:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] next      absolute system time of the next deadline
 689:lib/chibios/os/rt/src/chthreads.c ****  * @return              the @p next parameter
 690:lib/chibios/os/rt/src/chthreads.c ****  *
 691:lib/chibios/os/rt/src/chthreads.c ****  * @api
 692:lib/chibios/os/rt/src/chthreads.c ****  */
 693:lib/chibios/os/rt/src/chthreads.c **** systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next) {
 1209              		.loc 1 693 0
 1210              		.cfi_startproc
 1211              		@ args = 0, pretend = 0, frame = 0
 1212              		@ frame_needed = 0, uses_anonymous_args = 0
 1213              	.LVL97:
 1214 0000 10B5     		push	{r4, lr}
 1215              		.cfi_def_cfa_offset 8
 1216              		.cfi_offset 4, -8
 1217              		.cfi_offset 14, -4
 1218              	.LBB439:
 1219              	.LBB440:
 1220              	.LBB441:
 1221              	.LBB442:
 1222              		.loc 3 264 0
 1223 0002 2023     		movs	r3, #32
 1224              	.LBE442:
 1225              	.LBE441:
 1226              	.LBE440:
 1227              	.LBE439:
 1228              		.loc 1 693 0
 1229 0004 0C46     		mov	r4, r1
 1230              	.LBB446:
 1231              	.LBB445:
 1232              	.LBB444:
 1233              	.LBB443:
 1234              		.loc 3 264 0
 1235              		.syntax unified
 1236              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1237 0006 83F31188 		MSR basepri, r3
 1238              	@ 0 "" 2
 1239              	.LVL98:
 1240              		.thumb
 1241              		.syntax unified
 1242              	.LBE443:
 1243              	.LBE444:
 1244              	.LBE445:
 1245              	.LBE446:
 1246              	.LBB447:
 1247              	.LBB448:
 1248              	.LBB449:
 1249              	.LBB450:
 1250              		.loc 5 141 0
 1251 000a 4FF08043 		mov	r3, #1073741824
 1252 000e 596A     		ldr	r1, [r3, #36]
 1253              	.LVL99:
 1254              	.LBE450:
 1255              	.LBE449:
 1256              	.LBE448:
 1257              	.LBE447:
 1258              	.LBB451:
 1259              	.LBB452:
 1260              		.file 6 "./lib/chibios/os/rt/include/chvt.h"
   1:./lib/chibios/os/rt/include/chvt.h **** /*
   2:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chvt.h **** 
   4:./lib/chibios/os/rt/include/chvt.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chvt.h **** 
   6:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chvt.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chvt.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chvt.h **** 
  11:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chvt.h **** 
  16:./lib/chibios/os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chvt.h **** */
  19:./lib/chibios/os/rt/include/chvt.h **** 
  20:./lib/chibios/os/rt/include/chvt.h **** /**
  21:./lib/chibios/os/rt/include/chvt.h ****  * @file    chvt.h
  22:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:./lib/chibios/os/rt/include/chvt.h ****  *
  24:./lib/chibios/os/rt/include/chvt.h ****  * @addtogroup time
  25:./lib/chibios/os/rt/include/chvt.h ****  * @{
  26:./lib/chibios/os/rt/include/chvt.h ****  */
  27:./lib/chibios/os/rt/include/chvt.h **** 
  28:./lib/chibios/os/rt/include/chvt.h **** #ifndef CHVT_H
  29:./lib/chibios/os/rt/include/chvt.h **** #define CHVT_H
  30:./lib/chibios/os/rt/include/chvt.h **** 
  31:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chvt.h **** 
  35:./lib/chibios/os/rt/include/chvt.h **** /**
  36:./lib/chibios/os/rt/include/chvt.h ****  * @name    Special time constants
  37:./lib/chibios/os/rt/include/chvt.h ****  * @{
  38:./lib/chibios/os/rt/include/chvt.h ****  */
  39:./lib/chibios/os/rt/include/chvt.h **** /**
  40:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Zero time specification for some functions with a timeout
  41:./lib/chibios/os/rt/include/chvt.h ****  *          specification.
  42:./lib/chibios/os/rt/include/chvt.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  43:./lib/chibios/os/rt/include/chvt.h ****  *          see the specific function documentation.
  44:./lib/chibios/os/rt/include/chvt.h ****  */
  45:./lib/chibios/os/rt/include/chvt.h **** #define TIME_IMMEDIATE  ((systime_t)0)
  46:./lib/chibios/os/rt/include/chvt.h **** 
  47:./lib/chibios/os/rt/include/chvt.h **** /**
  48:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Infinite time specification for all functions with a timeout
  49:./lib/chibios/os/rt/include/chvt.h ****  *          specification.
  50:./lib/chibios/os/rt/include/chvt.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  51:./lib/chibios/os/rt/include/chvt.h ****  *          see the specific function documentation.
  52:./lib/chibios/os/rt/include/chvt.h ****  */
  53:./lib/chibios/os/rt/include/chvt.h **** #define TIME_INFINITE   ((systime_t)-1)
  54:./lib/chibios/os/rt/include/chvt.h **** 
  55:./lib/chibios/os/rt/include/chvt.h **** /**
  56:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Maximum time constant.
  57:./lib/chibios/os/rt/include/chvt.h ****  */
  58:./lib/chibios/os/rt/include/chvt.h **** #define TIME_MAXIMUM    ((systime_t)-2)
  59:./lib/chibios/os/rt/include/chvt.h **** /** @} */
  60:./lib/chibios/os/rt/include/chvt.h **** 
  61:./lib/chibios/os/rt/include/chvt.h **** /**
  62:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Maximum unsigned integer.
  63:./lib/chibios/os/rt/include/chvt.h ****  */
  64:./lib/chibios/os/rt/include/chvt.h **** #define __UINT_MAX      ((unsigned int)-1)
  65:./lib/chibios/os/rt/include/chvt.h **** 
  66:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  67:./lib/chibios/os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  68:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  69:./lib/chibios/os/rt/include/chvt.h **** 
  70:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  71:./lib/chibios/os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  72:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  73:./lib/chibios/os/rt/include/chvt.h **** 
  74:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32)
  75:./lib/chibios/os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16 or 32"
  76:./lib/chibios/os/rt/include/chvt.h **** #endif
  77:./lib/chibios/os/rt/include/chvt.h **** 
  78:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_FREQUENCY <= 0
  79:./lib/chibios/os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be greater than zero"
  80:./lib/chibios/os/rt/include/chvt.h **** #endif
  81:./lib/chibios/os/rt/include/chvt.h **** 
  82:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  83:./lib/chibios/os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  84:./lib/chibios/os/rt/include/chvt.h ****        "be zero or greater than one"
  85:./lib/chibios/os/rt/include/chvt.h **** #endif
  86:./lib/chibios/os/rt/include/chvt.h **** 
  87:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  88:./lib/chibios/os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  89:./lib/chibios/os/rt/include/chvt.h **** #endif
  90:./lib/chibios/os/rt/include/chvt.h **** 
  91:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  92:./lib/chibios/os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  93:./lib/chibios/os/rt/include/chvt.h **** #endif
  94:./lib/chibios/os/rt/include/chvt.h **** 
  95:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  96:./lib/chibios/os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  97:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  98:./lib/chibios/os/rt/include/chvt.h **** 
  99:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 100:./lib/chibios/os/rt/include/chvt.h **** /* Module macros.                                                            */
 101:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 102:./lib/chibios/os/rt/include/chvt.h **** 
 103:./lib/chibios/os/rt/include/chvt.h **** /**
 104:./lib/chibios/os/rt/include/chvt.h ****  * @name    Fast time conversion utilities
 105:./lib/chibios/os/rt/include/chvt.h ****  * @{
 106:./lib/chibios/os/rt/include/chvt.h ****  */
 107:./lib/chibios/os/rt/include/chvt.h **** /**
 108:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Seconds to system ticks.
 109:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from seconds to system ticks number.
 110:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 111:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 112:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 113:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 114:./lib/chibios/os/rt/include/chvt.h ****  *
 115:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] sec       number of seconds
 116:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 117:./lib/chibios/os/rt/include/chvt.h ****  *
 118:./lib/chibios/os/rt/include/chvt.h ****  * @api
 119:./lib/chibios/os/rt/include/chvt.h ****  */
 120:./lib/chibios/os/rt/include/chvt.h **** #define S2ST(sec)                                                           \
 121:./lib/chibios/os/rt/include/chvt.h ****   ((systime_t)((uint32_t)(sec) * (uint32_t)CH_CFG_ST_FREQUENCY))
 122:./lib/chibios/os/rt/include/chvt.h **** 
 123:./lib/chibios/os/rt/include/chvt.h **** /**
 124:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Milliseconds to system ticks.
 125:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from milliseconds to system ticks number.
 126:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 127:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 128:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 129:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 130:./lib/chibios/os/rt/include/chvt.h ****  *
 131:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] msec      number of milliseconds
 132:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 133:./lib/chibios/os/rt/include/chvt.h ****  *
 134:./lib/chibios/os/rt/include/chvt.h ****  * @api
 135:./lib/chibios/os/rt/include/chvt.h ****  */
 136:./lib/chibios/os/rt/include/chvt.h **** #define MS2ST(msec)                                                         \
 137:./lib/chibios/os/rt/include/chvt.h ****   ((systime_t)(((((uint32_t)(msec)) *                                       \
 138:./lib/chibios/os/rt/include/chvt.h ****                  ((uint32_t)CH_CFG_ST_FREQUENCY)) + 999UL) / 1000UL))
 139:./lib/chibios/os/rt/include/chvt.h **** 
 140:./lib/chibios/os/rt/include/chvt.h **** /**
 141:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Microseconds to system ticks.
 142:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from microseconds to system ticks number.
 143:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 144:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 145:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 146:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 147:./lib/chibios/os/rt/include/chvt.h ****  *
 148:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] usec      number of microseconds
 149:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 150:./lib/chibios/os/rt/include/chvt.h ****  *
 151:./lib/chibios/os/rt/include/chvt.h ****  * @api
 152:./lib/chibios/os/rt/include/chvt.h ****  */
 153:./lib/chibios/os/rt/include/chvt.h **** #define US2ST(usec)                                                         \
 154:./lib/chibios/os/rt/include/chvt.h ****   ((systime_t)(((((uint32_t)(usec)) *                                       \
 155:./lib/chibios/os/rt/include/chvt.h ****                  ((uint32_t)CH_CFG_ST_FREQUENCY)) + 999999UL) / 1000000UL))
 156:./lib/chibios/os/rt/include/chvt.h **** 
 157:./lib/chibios/os/rt/include/chvt.h **** /**
 158:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to seconds.
 159:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to seconds.
 160:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next second boundary.
 161:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 162:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 163:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 164:./lib/chibios/os/rt/include/chvt.h ****  *
 165:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 166:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of seconds.
 167:./lib/chibios/os/rt/include/chvt.h ****  *
 168:./lib/chibios/os/rt/include/chvt.h ****  * @api
 169:./lib/chibios/os/rt/include/chvt.h ****  */
 170:./lib/chibios/os/rt/include/chvt.h **** #define ST2S(n) (((n) + CH_CFG_ST_FREQUENCY - 1UL) / CH_CFG_ST_FREQUENCY)
 171:./lib/chibios/os/rt/include/chvt.h **** 
 172:./lib/chibios/os/rt/include/chvt.h **** /**
 173:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to milliseconds.
 174:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to milliseconds.
 175:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next millisecond boundary.
 176:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 177:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 178:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 179:./lib/chibios/os/rt/include/chvt.h ****  *
 180:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 181:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of milliseconds.
 182:./lib/chibios/os/rt/include/chvt.h ****  *
 183:./lib/chibios/os/rt/include/chvt.h ****  * @api
 184:./lib/chibios/os/rt/include/chvt.h ****  */
 185:./lib/chibios/os/rt/include/chvt.h **** #define ST2MS(n) (((n) * 1000UL + CH_CFG_ST_FREQUENCY - 1UL) /              \
 186:./lib/chibios/os/rt/include/chvt.h ****                   CH_CFG_ST_FREQUENCY)
 187:./lib/chibios/os/rt/include/chvt.h **** 
 188:./lib/chibios/os/rt/include/chvt.h **** /**
 189:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to microseconds.
 190:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to microseconds.
 191:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next microsecond boundary.
 192:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 193:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 194:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 195:./lib/chibios/os/rt/include/chvt.h ****  *
 196:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 197:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of microseconds.
 198:./lib/chibios/os/rt/include/chvt.h ****  *
 199:./lib/chibios/os/rt/include/chvt.h ****  * @api
 200:./lib/chibios/os/rt/include/chvt.h ****  */
 201:./lib/chibios/os/rt/include/chvt.h **** #define ST2US(n) (((n) * 1000000UL + CH_CFG_ST_FREQUENCY - 1UL) /           \
 202:./lib/chibios/os/rt/include/chvt.h ****                   CH_CFG_ST_FREQUENCY)
 203:./lib/chibios/os/rt/include/chvt.h **** /** @} */
 204:./lib/chibios/os/rt/include/chvt.h **** 
 205:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 206:./lib/chibios/os/rt/include/chvt.h **** /* External declarations.                                                    */
 207:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 208:./lib/chibios/os/rt/include/chvt.h **** 
 209:./lib/chibios/os/rt/include/chvt.h **** /*
 210:./lib/chibios/os/rt/include/chvt.h ****  * Virtual Timers APIs.
 211:./lib/chibios/os/rt/include/chvt.h ****  */
 212:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
 213:./lib/chibios/os/rt/include/chvt.h **** extern "C" {
 214:./lib/chibios/os/rt/include/chvt.h **** #endif
 215:./lib/chibios/os/rt/include/chvt.h ****   void _vt_init(void);
 216:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
 217:./lib/chibios/os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
 218:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
 219:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
 220:./lib/chibios/os/rt/include/chvt.h **** }
 221:./lib/chibios/os/rt/include/chvt.h **** #endif
 222:./lib/chibios/os/rt/include/chvt.h **** 
 223:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 224:./lib/chibios/os/rt/include/chvt.h **** /* Module inline functions.                                                  */
 225:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 226:./lib/chibios/os/rt/include/chvt.h **** 
 227:./lib/chibios/os/rt/include/chvt.h **** /**
 228:./lib/chibios/os/rt/include/chvt.h ****  * @name    Secure time conversion utilities
 229:./lib/chibios/os/rt/include/chvt.h ****  * @{
 230:./lib/chibios/os/rt/include/chvt.h ****  */
 231:./lib/chibios/os/rt/include/chvt.h **** /**
 232:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Seconds to system ticks.
 233:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from seconds to system ticks number.
 234:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 235:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 236:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 237:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 238:./lib/chibios/os/rt/include/chvt.h ****  *
 239:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] sec       number of seconds
 240:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 241:./lib/chibios/os/rt/include/chvt.h ****  *
 242:./lib/chibios/os/rt/include/chvt.h ****  * @api
 243:./lib/chibios/os/rt/include/chvt.h ****  */
 244:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t LL_S2ST(unsigned int sec) {
 245:./lib/chibios/os/rt/include/chvt.h ****   uint64_t ticks = (uint64_t)sec * (uint64_t)CH_CFG_ST_FREQUENCY;
 246:./lib/chibios/os/rt/include/chvt.h **** 
 247:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(ticks <= (uint64_t)TIME_MAXIMUM, "conversion overflow");
 248:./lib/chibios/os/rt/include/chvt.h **** 
 249:./lib/chibios/os/rt/include/chvt.h ****   return (systime_t)ticks;
 250:./lib/chibios/os/rt/include/chvt.h **** }
 251:./lib/chibios/os/rt/include/chvt.h **** 
 252:./lib/chibios/os/rt/include/chvt.h **** /**
 253:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Milliseconds to system ticks.
 254:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from milliseconds to system ticks number.
 255:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 256:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 257:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 258:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 259:./lib/chibios/os/rt/include/chvt.h ****  *
 260:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] msec      number of milliseconds
 261:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 262:./lib/chibios/os/rt/include/chvt.h ****  *
 263:./lib/chibios/os/rt/include/chvt.h ****  * @api
 264:./lib/chibios/os/rt/include/chvt.h ****  */
 265:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t LL_MS2ST(unsigned int msec) {
 266:./lib/chibios/os/rt/include/chvt.h ****   uint64_t ticks = (((uint64_t)msec * (uint64_t)CH_CFG_ST_FREQUENCY) + 999ULL)
 267:./lib/chibios/os/rt/include/chvt.h ****                    / 1000ULL;
 268:./lib/chibios/os/rt/include/chvt.h **** 
 269:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(ticks <= (uint64_t)TIME_MAXIMUM, "conversion overflow");
 270:./lib/chibios/os/rt/include/chvt.h **** 
 271:./lib/chibios/os/rt/include/chvt.h ****   return (systime_t)ticks;
 272:./lib/chibios/os/rt/include/chvt.h **** }
 273:./lib/chibios/os/rt/include/chvt.h **** 
 274:./lib/chibios/os/rt/include/chvt.h **** /**
 275:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Microseconds to system ticks.
 276:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from microseconds to system ticks number.
 277:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 278:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 279:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 280:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 281:./lib/chibios/os/rt/include/chvt.h ****  *
 282:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] usec      number of microseconds
 283:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 284:./lib/chibios/os/rt/include/chvt.h ****  *
 285:./lib/chibios/os/rt/include/chvt.h ****  * @api
 286:./lib/chibios/os/rt/include/chvt.h ****  */
 287:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t LL_US2ST(unsigned int usec) {
 288:./lib/chibios/os/rt/include/chvt.h ****   uint64_t ticks = (((uint64_t)usec * (uint64_t)CH_CFG_ST_FREQUENCY) + 999999ULL)
 289:./lib/chibios/os/rt/include/chvt.h ****                    / 1000000ULL;
 290:./lib/chibios/os/rt/include/chvt.h **** 
 291:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(ticks <= (uint64_t)TIME_MAXIMUM, "conversion overflow");
 292:./lib/chibios/os/rt/include/chvt.h **** 
 293:./lib/chibios/os/rt/include/chvt.h ****   return (systime_t)ticks;
 294:./lib/chibios/os/rt/include/chvt.h **** }
 295:./lib/chibios/os/rt/include/chvt.h **** 
 296:./lib/chibios/os/rt/include/chvt.h **** /**
 297:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to seconds.
 298:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to seconds.
 299:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next second boundary.
 300:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 301:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 302:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 303:./lib/chibios/os/rt/include/chvt.h ****  *
 304:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 305:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of seconds.
 306:./lib/chibios/os/rt/include/chvt.h ****  *
 307:./lib/chibios/os/rt/include/chvt.h ****  * @api
 308:./lib/chibios/os/rt/include/chvt.h ****  */
 309:./lib/chibios/os/rt/include/chvt.h **** static inline unsigned int LL_ST2S(systime_t n) {
 310:./lib/chibios/os/rt/include/chvt.h ****   uint64_t sec = ((uint64_t)n + (uint64_t)CH_CFG_ST_FREQUENCY - 1ULL)
 311:./lib/chibios/os/rt/include/chvt.h ****                  / (uint64_t)CH_CFG_ST_FREQUENCY;
 312:./lib/chibios/os/rt/include/chvt.h **** 
 313:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(sec < (uint64_t)__UINT_MAX, "conversion overflow");
 314:./lib/chibios/os/rt/include/chvt.h **** 
 315:./lib/chibios/os/rt/include/chvt.h ****   return (unsigned int)sec;
 316:./lib/chibios/os/rt/include/chvt.h **** }
 317:./lib/chibios/os/rt/include/chvt.h **** 
 318:./lib/chibios/os/rt/include/chvt.h **** /**
 319:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to milliseconds.
 320:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to milliseconds.
 321:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next millisecond boundary.
 322:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 323:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 324:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 325:./lib/chibios/os/rt/include/chvt.h ****  *
 326:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 327:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of milliseconds.
 328:./lib/chibios/os/rt/include/chvt.h ****  *
 329:./lib/chibios/os/rt/include/chvt.h ****  * @api
 330:./lib/chibios/os/rt/include/chvt.h ****  */
 331:./lib/chibios/os/rt/include/chvt.h **** static inline unsigned int LL_ST2MS(systime_t n) {
 332:./lib/chibios/os/rt/include/chvt.h ****   uint64_t msec = (((uint64_t)n * 1000ULL) + (uint64_t)CH_CFG_ST_FREQUENCY - 1ULL)
 333:./lib/chibios/os/rt/include/chvt.h ****                    / (uint64_t)CH_CFG_ST_FREQUENCY;
 334:./lib/chibios/os/rt/include/chvt.h **** 
 335:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(msec < (uint64_t)__UINT_MAX, "conversion overflow");
 336:./lib/chibios/os/rt/include/chvt.h **** 
 337:./lib/chibios/os/rt/include/chvt.h ****   return (unsigned int)msec;
 338:./lib/chibios/os/rt/include/chvt.h **** }
 339:./lib/chibios/os/rt/include/chvt.h **** 
 340:./lib/chibios/os/rt/include/chvt.h **** /**
 341:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to microseconds.
 342:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to microseconds.
 343:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next microsecond boundary.
 344:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 345:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 346:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 347:./lib/chibios/os/rt/include/chvt.h ****  *
 348:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 349:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of microseconds.
 350:./lib/chibios/os/rt/include/chvt.h ****  *
 351:./lib/chibios/os/rt/include/chvt.h ****  * @api
 352:./lib/chibios/os/rt/include/chvt.h ****  */
 353:./lib/chibios/os/rt/include/chvt.h **** static inline unsigned int LL_ST2US(systime_t n) {
 354:./lib/chibios/os/rt/include/chvt.h ****   uint64_t usec = (((uint64_t)n * 1000000ULL) + (uint64_t)CH_CFG_ST_FREQUENCY - 1ULL)
 355:./lib/chibios/os/rt/include/chvt.h ****                    / (uint64_t)CH_CFG_ST_FREQUENCY;
 356:./lib/chibios/os/rt/include/chvt.h **** 
 357:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(usec < (uint64_t)__UINT_MAX, "conversion overflow");
 358:./lib/chibios/os/rt/include/chvt.h **** 
 359:./lib/chibios/os/rt/include/chvt.h ****   return (unsigned int)usec;
 360:./lib/chibios/os/rt/include/chvt.h **** }
 361:./lib/chibios/os/rt/include/chvt.h **** /** @} */
 362:./lib/chibios/os/rt/include/chvt.h **** 
 363:./lib/chibios/os/rt/include/chvt.h **** /**
 364:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
 365:./lib/chibios/os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
 366:./lib/chibios/os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
 367:./lib/chibios/os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
 368:./lib/chibios/os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
 369:./lib/chibios/os/rt/include/chvt.h ****  *
 370:./lib/chibios/os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
 371:./lib/chibios/os/rt/include/chvt.h ****  *
 372:./lib/chibios/os/rt/include/chvt.h ****  * @init
 373:./lib/chibios/os/rt/include/chvt.h ****  */
 374:./lib/chibios/os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
 375:./lib/chibios/os/rt/include/chvt.h **** 
 376:./lib/chibios/os/rt/include/chvt.h ****   vtp->func = NULL;
 377:./lib/chibios/os/rt/include/chvt.h **** }
 378:./lib/chibios/os/rt/include/chvt.h **** 
 379:./lib/chibios/os/rt/include/chvt.h **** /**
 380:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Current system time.
 381:./lib/chibios/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 382:./lib/chibios/os/rt/include/chvt.h ****  *          invocation.
 383:./lib/chibios/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 384:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 385:./lib/chibios/os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 386:./lib/chibios/os/rt/include/chvt.h ****  *          @p systime_t size.
 387:./lib/chibios/os/rt/include/chvt.h ****  *
 388:./lib/chibios/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 389:./lib/chibios/os/rt/include/chvt.h ****  *
 390:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 391:./lib/chibios/os/rt/include/chvt.h ****  */
 392:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 393:./lib/chibios/os/rt/include/chvt.h **** 
 394:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 395:./lib/chibios/os/rt/include/chvt.h ****   return ch.vtlist.systime;
 396:./lib/chibios/os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 397:./lib/chibios/os/rt/include/chvt.h ****   return port_timer_get_time();
 398:./lib/chibios/os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 399:./lib/chibios/os/rt/include/chvt.h **** }
 400:./lib/chibios/os/rt/include/chvt.h **** 
 401:./lib/chibios/os/rt/include/chvt.h **** /**
 402:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Current system time.
 403:./lib/chibios/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 404:./lib/chibios/os/rt/include/chvt.h ****  *          invocation.
 405:./lib/chibios/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 406:./lib/chibios/os/rt/include/chvt.h ****  *
 407:./lib/chibios/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 408:./lib/chibios/os/rt/include/chvt.h ****  *
 409:./lib/chibios/os/rt/include/chvt.h ****  * @api
 410:./lib/chibios/os/rt/include/chvt.h ****  */
 411:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 412:./lib/chibios/os/rt/include/chvt.h ****   systime_t systime;
 413:./lib/chibios/os/rt/include/chvt.h **** 
 414:./lib/chibios/os/rt/include/chvt.h ****   chSysLock();
 415:./lib/chibios/os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 416:./lib/chibios/os/rt/include/chvt.h ****   chSysUnlock();
 417:./lib/chibios/os/rt/include/chvt.h **** 
 418:./lib/chibios/os/rt/include/chvt.h ****   return systime;
 419:./lib/chibios/os/rt/include/chvt.h **** }
 420:./lib/chibios/os/rt/include/chvt.h **** 
 421:./lib/chibios/os/rt/include/chvt.h **** /**
 422:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 423:./lib/chibios/os/rt/include/chvt.h ****  *
 424:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     start time
 425:./lib/chibios/os/rt/include/chvt.h ****  * @return              The elapsed time.
 426:./lib/chibios/os/rt/include/chvt.h ****  *
 427:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 428:./lib/chibios/os/rt/include/chvt.h ****  */
 429:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTTimeElapsedSinceX(systime_t start) {
 430:./lib/chibios/os/rt/include/chvt.h **** 
 431:./lib/chibios/os/rt/include/chvt.h ****   return chVTGetSystemTimeX() - start;
 432:./lib/chibios/os/rt/include/chvt.h **** }
 433:./lib/chibios/os/rt/include/chvt.h **** 
 434:./lib/chibios/os/rt/include/chvt.h **** /**
 435:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Checks if the specified time is within the specified time window.
 436:./lib/chibios/os/rt/include/chvt.h ****  * @note    When start==end then the function returns always true because the
 437:./lib/chibios/os/rt/include/chvt.h ****  *          whole time range is specified.
 438:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function can be called from any context.
 439:./lib/chibios/os/rt/include/chvt.h ****  *
 440:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] time      the time to be verified
 441:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 442:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 443:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 444:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 445:./lib/chibios/os/rt/include/chvt.h ****  *
 446:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 447:./lib/chibios/os/rt/include/chvt.h ****  */
 448:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsTimeWithinX(systime_t time,
 449:./lib/chibios/os/rt/include/chvt.h ****                                      systime_t start,
 450:./lib/chibios/os/rt/include/chvt.h ****                                      systime_t end) {
 451:./lib/chibios/os/rt/include/chvt.h **** 
 452:./lib/chibios/os/rt/include/chvt.h ****   return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 1261              		.loc 6 452 0
 1262 0010 0B1A     		subs	r3, r1, r0
 1263 0012 201A     		subs	r0, r4, r0
 1264              	.LVL100:
 1265              	.LBE452:
 1266              	.LBE451:
 694:lib/chibios/os/rt/src/chthreads.c ****   systime_t time;
 695:lib/chibios/os/rt/src/chthreads.c **** 
 696:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 697:lib/chibios/os/rt/src/chthreads.c ****   time = chVTGetSystemTimeX();
 698:lib/chibios/os/rt/src/chthreads.c ****   if (chVTIsTimeWithinX(time, prev, next)) {
 1267              		.loc 1 698 0
 1268 0014 8342     		cmp	r3, r0
 1269 0016 03D2     		bcs	.L47
 1270              	.LVL101:
 1271              	.LBB453:
 1272              	.LBB454:
 1273              		.loc 4 394 0
 1274 0018 611A     		subs	r1, r4, r1
 1275              	.LVL102:
 1276 001a 0820     		movs	r0, #8
 1277 001c FFF7FEFF 		bl	chSchGoSleepTimeoutS
 1278              	.LVL103:
 1279              	.L47:
 1280              	.LBE454:
 1281              	.LBE453:
 1282              	.LBB455:
 1283              	.LBB456:
 1284              	.LBB457:
 1285              	.LBB458:
 1286              	.LBB459:
 1287              		.loc 3 264 0
 1288 0020 0023     		movs	r3, #0
 1289              		.syntax unified
 1290              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1291 0022 83F31188 		MSR basepri, r3
 1292              	@ 0 "" 2
 1293              	.LVL104:
 1294              		.thumb
 1295              		.syntax unified
 1296              	.LBE459:
 1297              	.LBE458:
 1298              	.LBE457:
 1299              	.LBE456:
 1300              	.LBE455:
 699:lib/chibios/os/rt/src/chthreads.c ****     chThdSleepS(next - time);
 700:lib/chibios/os/rt/src/chthreads.c ****   }
 701:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 702:lib/chibios/os/rt/src/chthreads.c **** 
 703:lib/chibios/os/rt/src/chthreads.c ****   return next;
 704:lib/chibios/os/rt/src/chthreads.c **** }
 1301              		.loc 1 704 0
 1302 0026 2046     		mov	r0, r4
 1303 0028 10BD     		pop	{r4, pc}
 1304              		.cfi_endproc
 1305              	.LFE264:
 1307              		.section	.text.chThdYield,"ax",%progbits
 1308              		.align	1
 1309              		.global	chThdYield
 1310              		.syntax unified
 1311              		.thumb
 1312              		.thumb_func
 1313              		.fpu softvfp
 1315              	chThdYield:
 1316              	.LFB265:
 705:lib/chibios/os/rt/src/chthreads.c **** 
 706:lib/chibios/os/rt/src/chthreads.c **** /**
 707:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Yields the time slot.
 708:lib/chibios/os/rt/src/chthreads.c ****  * @details Yields the CPU control to the next thread in the ready list with
 709:lib/chibios/os/rt/src/chthreads.c ****  *          equal priority, if any.
 710:lib/chibios/os/rt/src/chthreads.c ****  *
 711:lib/chibios/os/rt/src/chthreads.c ****  * @api
 712:lib/chibios/os/rt/src/chthreads.c ****  */
 713:lib/chibios/os/rt/src/chthreads.c **** void chThdYield(void) {
 1317              		.loc 1 713 0
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 0
 1320              		@ frame_needed = 0, uses_anonymous_args = 0
 1321              	.LVL105:
 1322 0000 08B5     		push	{r3, lr}
 1323              		.cfi_def_cfa_offset 8
 1324              		.cfi_offset 3, -8
 1325              		.cfi_offset 14, -4
 1326              	.LBB473:
 1327              	.LBB474:
 1328              	.LBB475:
 1329              	.LBB476:
 1330              		.loc 3 264 0
 1331 0002 2023     		movs	r3, #32
 1332              		.syntax unified
 1333              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1334 0004 83F31188 		MSR basepri, r3
 1335              	@ 0 "" 2
 1336              	.LVL106:
 1337              		.thumb
 1338              		.syntax unified
 1339              	.LBE476:
 1340              	.LBE475:
 1341              	.LBE474:
 1342              	.LBE473:
 1343              	.LBB477:
 1344              	.LBB478:
 1345              	.LBB479:
 1346              	.LBB480:
 593:./lib/chibios/os/rt/include/chschd.h **** 
 594:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 595:./lib/chibios/os/rt/include/chschd.h **** }
 596:./lib/chibios/os/rt/include/chschd.h **** 
 597:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
 598:./lib/chibios/os/rt/include/chschd.h **** 
 599:./lib/chibios/os/rt/include/chschd.h ****   thread_t *cp = (thread_t *)tqp;
 600:./lib/chibios/os/rt/include/chschd.h ****   do {
 601:./lib/chibios/os/rt/include/chschd.h ****     cp = cp->queue.next;
 602:./lib/chibios/os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 603:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next             = cp;
 604:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
 605:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 606:./lib/chibios/os/rt/include/chschd.h ****   cp->queue.prev             = tp;
 607:./lib/chibios/os/rt/include/chschd.h **** }
 608:./lib/chibios/os/rt/include/chschd.h **** 
 609:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 610:./lib/chibios/os/rt/include/chschd.h **** 
 611:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next             = (thread_t *)tqp;
 612:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 613:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 614:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev                  = tp;
 615:./lib/chibios/os/rt/include/chschd.h **** }
 616:./lib/chibios/os/rt/include/chschd.h **** 
 617:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 618:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 619:./lib/chibios/os/rt/include/chschd.h **** 
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next             = tp->queue.next;
 621:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 622:./lib/chibios/os/rt/include/chschd.h **** 
 623:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 624:./lib/chibios/os/rt/include/chschd.h **** }
 625:./lib/chibios/os/rt/include/chschd.h **** 
 626:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
 627:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->prev;
 628:./lib/chibios/os/rt/include/chschd.h **** 
 629:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev             = tp->queue.prev;
 630:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev->queue.next = (thread_t *)tqp;
 631:./lib/chibios/os/rt/include/chschd.h **** 
 632:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 633:./lib/chibios/os/rt/include/chschd.h **** }
 634:./lib/chibios/os/rt/include/chschd.h **** 
 635:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_dequeue(thread_t *tp) {
 636:./lib/chibios/os/rt/include/chschd.h **** 
 637:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp->queue.next;
 638:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 639:./lib/chibios/os/rt/include/chschd.h **** 
 640:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 641:./lib/chibios/os/rt/include/chschd.h **** }
 642:./lib/chibios/os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == TRUE */
 643:./lib/chibios/os/rt/include/chschd.h **** 
 644:./lib/chibios/os/rt/include/chschd.h **** /**
 645:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Determines if the current thread must reschedule.
 646:./lib/chibios/os/rt/include/chschd.h ****  * @details This function returns @p true if there is a ready thread with
 647:./lib/chibios/os/rt/include/chschd.h ****  *          higher priority.
 648:./lib/chibios/os/rt/include/chschd.h ****  *
 649:./lib/chibios/os/rt/include/chschd.h ****  * @return              The priorities situation.
 650:./lib/chibios/os/rt/include/chschd.h ****  * @retval false        if rescheduling is not necessary.
 651:./lib/chibios/os/rt/include/chschd.h ****  * @retval true         if there is a ready thread at higher priority.
 652:./lib/chibios/os/rt/include/chschd.h ****  *
 653:./lib/chibios/os/rt/include/chschd.h ****  * @iclass
 654:./lib/chibios/os/rt/include/chschd.h ****  */
 655:./lib/chibios/os/rt/include/chschd.h **** static inline bool chSchIsRescRequiredI(void) {
 656:./lib/chibios/os/rt/include/chschd.h **** 
 657:./lib/chibios/os/rt/include/chschd.h ****   chDbgCheckClassI();
 658:./lib/chibios/os/rt/include/chschd.h **** 
 659:./lib/chibios/os/rt/include/chschd.h ****   return firstprio(&ch.rlist.queue) > currp->prio;
 660:./lib/chibios/os/rt/include/chschd.h **** }
 661:./lib/chibios/os/rt/include/chschd.h **** 
 662:./lib/chibios/os/rt/include/chschd.h **** /**
 663:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Determines if yielding is possible.
 664:./lib/chibios/os/rt/include/chschd.h ****  * @details This function returns @p true if there is a ready thread with
 665:./lib/chibios/os/rt/include/chschd.h ****  *          equal or higher priority.
 666:./lib/chibios/os/rt/include/chschd.h ****  *
 667:./lib/chibios/os/rt/include/chschd.h ****  * @return              The priorities situation.
 668:./lib/chibios/os/rt/include/chschd.h ****  * @retval false        if yielding is not possible.
 669:./lib/chibios/os/rt/include/chschd.h ****  * @retval true         if there is a ready thread at equal or higher priority.
 670:./lib/chibios/os/rt/include/chschd.h ****  *
 671:./lib/chibios/os/rt/include/chschd.h ****  * @sclass
 672:./lib/chibios/os/rt/include/chschd.h ****  */
 673:./lib/chibios/os/rt/include/chschd.h **** static inline bool chSchCanYieldS(void) {
 674:./lib/chibios/os/rt/include/chschd.h **** 
 675:./lib/chibios/os/rt/include/chschd.h ****   chDbgCheckClassS();
 676:./lib/chibios/os/rt/include/chschd.h **** 
 677:./lib/chibios/os/rt/include/chschd.h ****   return firstprio(&ch.rlist.queue) >= currp->prio;
 1347              		.loc 2 677 0
 1348 0008 064B     		ldr	r3, .L50
 1349 000a 1A68     		ldr	r2, [r3]
 1350 000c 9B69     		ldr	r3, [r3, #24]
 1351              	.LBE480:
 1352              	.LBE479:
 678:./lib/chibios/os/rt/include/chschd.h **** }
 679:./lib/chibios/os/rt/include/chschd.h **** 
 680:./lib/chibios/os/rt/include/chschd.h **** /**
 681:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Yields the time slot.
 682:./lib/chibios/os/rt/include/chschd.h ****  * @details Yields the CPU control to the next thread in the ready list with
 683:./lib/chibios/os/rt/include/chschd.h ****  *          equal or higher priority, if any.
 684:./lib/chibios/os/rt/include/chschd.h ****  *
 685:./lib/chibios/os/rt/include/chschd.h ****  * @sclass
 686:./lib/chibios/os/rt/include/chschd.h ****  */
 687:./lib/chibios/os/rt/include/chschd.h **** static inline void chSchDoYieldS(void) {
 688:./lib/chibios/os/rt/include/chschd.h **** 
 689:./lib/chibios/os/rt/include/chschd.h ****   chDbgCheckClassS();
 690:./lib/chibios/os/rt/include/chschd.h **** 
 691:./lib/chibios/os/rt/include/chschd.h ****   if (chSchCanYieldS()) {
 1353              		.loc 2 691 0
 1354 000e 9268     		ldr	r2, [r2, #8]
 1355 0010 9B68     		ldr	r3, [r3, #8]
 1356 0012 9A42     		cmp	r2, r3
 1357 0014 01D3     		bcc	.L49
 692:./lib/chibios/os/rt/include/chschd.h ****     chSchDoRescheduleBehind();
 1358              		.loc 2 692 0
 1359 0016 FFF7FEFF 		bl	chSchDoRescheduleBehind
 1360              	.LVL107:
 1361              	.L49:
 1362              	.LBE478:
 1363              	.LBE477:
 1364              	.LBB481:
 1365              	.LBB482:
 1366              	.LBB483:
 1367              	.LBB484:
 1368              	.LBB485:
 1369              		.loc 3 264 0
 1370 001a 0023     		movs	r3, #0
 1371              		.syntax unified
 1372              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1373 001c 83F31188 		MSR basepri, r3
 1374              	@ 0 "" 2
 1375              	.LVL108:
 1376              		.thumb
 1377              		.syntax unified
 1378              	.LBE485:
 1379              	.LBE484:
 1380              	.LBE483:
 1381              	.LBE482:
 1382              	.LBE481:
 714:lib/chibios/os/rt/src/chthreads.c **** 
 715:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 716:lib/chibios/os/rt/src/chthreads.c ****   chSchDoYieldS();
 717:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 718:lib/chibios/os/rt/src/chthreads.c **** }
 1383              		.loc 1 718 0
 1384 0020 08BD     		pop	{r3, pc}
 1385              	.L51:
 1386 0022 00BF     		.align	2
 1387              	.L50:
 1388 0024 00000000 		.word	ch
 1389              		.cfi_endproc
 1390              	.LFE265:
 1392              		.section	.text.chThdSuspendS,"ax",%progbits
 1393              		.align	1
 1394              		.global	chThdSuspendS
 1395              		.syntax unified
 1396              		.thumb
 1397              		.thumb_func
 1398              		.fpu softvfp
 1400              	chThdSuspendS:
 1401              	.LFB266:
 719:lib/chibios/os/rt/src/chthreads.c **** 
 720:lib/chibios/os/rt/src/chthreads.c **** /**
 721:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 722:lib/chibios/os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 723:lib/chibios/os/rt/src/chthreads.c ****  *          context.
 724:lib/chibios/os/rt/src/chthreads.c ****  *
 725:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 726:lib/chibios/os/rt/src/chthreads.c ****  * @return              The wake up message.
 727:lib/chibios/os/rt/src/chthreads.c ****  *
 728:lib/chibios/os/rt/src/chthreads.c ****  * @sclass
 729:lib/chibios/os/rt/src/chthreads.c ****  */
 730:lib/chibios/os/rt/src/chthreads.c **** msg_t chThdSuspendS(thread_reference_t *trp) {
 1402              		.loc 1 730 0
 1403              		.cfi_startproc
 1404              		@ args = 0, pretend = 0, frame = 0
 1405              		@ frame_needed = 0, uses_anonymous_args = 0
 1406              	.LVL109:
 1407 0000 10B5     		push	{r4, lr}
 1408              		.cfi_def_cfa_offset 8
 1409              		.cfi_offset 4, -8
 1410              		.cfi_offset 14, -4
 1411              	.LBB486:
 1412              	.LBB487:
 286:./lib/chibios/os/rt/include/chthreads.h **** }
 1413              		.loc 4 286 0
 1414 0002 054C     		ldr	r4, .L53
 1415 0004 A369     		ldr	r3, [r4, #24]
 1416              	.LBE487:
 1417              	.LBE486:
 731:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp = chThdGetSelfX();
 732:lib/chibios/os/rt/src/chthreads.c **** 
 733:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(*trp == NULL, "not NULL");
 734:lib/chibios/os/rt/src/chthreads.c **** 
 735:lib/chibios/os/rt/src/chthreads.c ****   *trp = tp;
 1418              		.loc 1 735 0
 1419 0006 0360     		str	r3, [r0]
 736:lib/chibios/os/rt/src/chthreads.c ****   tp->u.wttrp = trp;
 1420              		.loc 1 736 0
 1421 0008 5862     		str	r0, [r3, #36]
 737:lib/chibios/os/rt/src/chthreads.c ****   chSchGoSleepS(CH_STATE_SUSPENDED);
 1422              		.loc 1 737 0
 1423 000a 0320     		movs	r0, #3
 1424              	.LVL110:
 1425 000c FFF7FEFF 		bl	chSchGoSleepS
 1426              	.LVL111:
 738:lib/chibios/os/rt/src/chthreads.c **** 
 739:lib/chibios/os/rt/src/chthreads.c ****   return chThdGetSelfX()->u.rdymsg;
 1427              		.loc 1 739 0
 1428 0010 A369     		ldr	r3, [r4, #24]
 740:lib/chibios/os/rt/src/chthreads.c **** }
 1429              		.loc 1 740 0
 1430 0012 586A     		ldr	r0, [r3, #36]
 1431 0014 10BD     		pop	{r4, pc}
 1432              	.L54:
 1433 0016 00BF     		.align	2
 1434              	.L53:
 1435 0018 00000000 		.word	ch
 1436              		.cfi_endproc
 1437              	.LFE266:
 1439              		.section	.text.chThdSuspendTimeoutS,"ax",%progbits
 1440              		.align	1
 1441              		.global	chThdSuspendTimeoutS
 1442              		.syntax unified
 1443              		.thumb
 1444              		.thumb_func
 1445              		.fpu softvfp
 1447              	chThdSuspendTimeoutS:
 1448              	.LFB267:
 741:lib/chibios/os/rt/src/chthreads.c **** 
 742:lib/chibios/os/rt/src/chthreads.c **** /**
 743:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 744:lib/chibios/os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 745:lib/chibios/os/rt/src/chthreads.c ****  *          context.
 746:lib/chibios/os/rt/src/chthreads.c ****  *
 747:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 748:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] timeout   the timeout in system ticks, the special values are
 749:lib/chibios/os/rt/src/chthreads.c ****  *                      handled as follow:
 750:lib/chibios/os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 751:lib/chibios/os/rt/src/chthreads.c ****  *                        state.
 752:lib/chibios/os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 753:lib/chibios/os/rt/src/chthreads.c ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 754:lib/chibios/os/rt/src/chthreads.c ****  *                        occurred.
 755:lib/chibios/os/rt/src/chthreads.c ****  *                      .
 756:lib/chibios/os/rt/src/chthreads.c ****  * @return              The wake up message.
 757:lib/chibios/os/rt/src/chthreads.c ****  * @retval MSG_TIMEOUT  if the operation timed out.
 758:lib/chibios/os/rt/src/chthreads.c ****  *
 759:lib/chibios/os/rt/src/chthreads.c ****  * @sclass
 760:lib/chibios/os/rt/src/chthreads.c ****  */
 761:lib/chibios/os/rt/src/chthreads.c **** msg_t chThdSuspendTimeoutS(thread_reference_t *trp, systime_t timeout) {
 1449              		.loc 1 761 0
 1450              		.cfi_startproc
 1451              		@ args = 0, pretend = 0, frame = 0
 1452              		@ frame_needed = 0, uses_anonymous_args = 0
 1453              		@ link register save eliminated.
 1454              	.LVL112:
 1455              	.LBB488:
 1456              	.LBB489:
 286:./lib/chibios/os/rt/include/chthreads.h **** }
 1457              		.loc 4 286 0
 1458 0000 054B     		ldr	r3, .L57
 1459 0002 9B69     		ldr	r3, [r3, #24]
 1460              	.LBE489:
 1461              	.LBE488:
 762:lib/chibios/os/rt/src/chthreads.c ****   thread_t *tp = chThdGetSelfX();
 763:lib/chibios/os/rt/src/chthreads.c **** 
 764:lib/chibios/os/rt/src/chthreads.c ****   chDbgAssert(*trp == NULL, "not NULL");
 765:lib/chibios/os/rt/src/chthreads.c **** 
 766:lib/chibios/os/rt/src/chthreads.c ****   if (TIME_IMMEDIATE == timeout) {
 1462              		.loc 1 766 0
 1463 0004 21B1     		cbz	r1, .L56
 767:lib/chibios/os/rt/src/chthreads.c ****     return MSG_TIMEOUT;
 768:lib/chibios/os/rt/src/chthreads.c ****   }
 769:lib/chibios/os/rt/src/chthreads.c **** 
 770:lib/chibios/os/rt/src/chthreads.c ****   *trp = tp;
 1464              		.loc 1 770 0
 1465 0006 0360     		str	r3, [r0]
 771:lib/chibios/os/rt/src/chthreads.c ****   tp->u.wttrp = trp;
 1466              		.loc 1 771 0
 1467 0008 5862     		str	r0, [r3, #36]
 772:lib/chibios/os/rt/src/chthreads.c **** 
 773:lib/chibios/os/rt/src/chthreads.c ****   return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 1468              		.loc 1 773 0
 1469 000a 0320     		movs	r0, #3
 1470              	.LVL113:
 1471 000c FFF7FEBF 		b	chSchGoSleepTimeoutS
 1472              	.LVL114:
 1473              	.L56:
 774:lib/chibios/os/rt/src/chthreads.c **** }
 1474              		.loc 1 774 0
 1475 0010 4FF0FF30 		mov	r0, #-1
 1476              	.LVL115:
 1477 0014 7047     		bx	lr
 1478              	.L58:
 1479 0016 00BF     		.align	2
 1480              	.L57:
 1481 0018 00000000 		.word	ch
 1482              		.cfi_endproc
 1483              	.LFE267:
 1485              		.section	.text.chThdResumeI,"ax",%progbits
 1486              		.align	1
 1487              		.global	chThdResumeI
 1488              		.syntax unified
 1489              		.thumb
 1490              		.thumb_func
 1491              		.fpu softvfp
 1493              	chThdResumeI:
 1494              	.LFB268:
 775:lib/chibios/os/rt/src/chthreads.c **** 
 776:lib/chibios/os/rt/src/chthreads.c **** /**
 777:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 778:lib/chibios/os/rt/src/chthreads.c ****  * @note    This function must not reschedule because it can be called from
 779:lib/chibios/os/rt/src/chthreads.c ****  *          ISR context.
 780:lib/chibios/os/rt/src/chthreads.c ****  *
 781:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 782:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 783:lib/chibios/os/rt/src/chthreads.c ****  *
 784:lib/chibios/os/rt/src/chthreads.c ****  * @iclass
 785:lib/chibios/os/rt/src/chthreads.c ****  */
 786:lib/chibios/os/rt/src/chthreads.c **** void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 1495              		.loc 1 786 0
 1496              		.cfi_startproc
 1497              		@ args = 0, pretend = 0, frame = 0
 1498              		@ frame_needed = 0, uses_anonymous_args = 0
 1499              		@ link register save eliminated.
 1500              	.LVL116:
 787:lib/chibios/os/rt/src/chthreads.c **** 
 788:lib/chibios/os/rt/src/chthreads.c ****   if (*trp != NULL) {
 1501              		.loc 1 788 0
 1502 0000 0368     		ldr	r3, [r0]
 1503 0002 2BB1     		cbz	r3, .L59
 1504              	.LVL117:
 1505              	.LBB490:
 789:lib/chibios/os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 790:lib/chibios/os/rt/src/chthreads.c **** 
 791:lib/chibios/os/rt/src/chthreads.c ****     chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 792:lib/chibios/os/rt/src/chthreads.c **** 
 793:lib/chibios/os/rt/src/chthreads.c ****     *trp = NULL;
 1506              		.loc 1 793 0
 1507 0004 0022     		movs	r2, #0
 1508 0006 0260     		str	r2, [r0]
 794:lib/chibios/os/rt/src/chthreads.c ****     tp->u.rdymsg = msg;
 1509              		.loc 1 794 0
 1510 0008 5962     		str	r1, [r3, #36]
 795:lib/chibios/os/rt/src/chthreads.c ****     (void) chSchReadyI(tp);
 1511              		.loc 1 795 0
 1512 000a 1846     		mov	r0, r3
 1513              	.LVL118:
 1514 000c FFF7FEBF 		b	chSchReadyI
 1515              	.LVL119:
 1516              	.L59:
 1517              	.LBE490:
 796:lib/chibios/os/rt/src/chthreads.c ****   }
 797:lib/chibios/os/rt/src/chthreads.c **** }
 1518              		.loc 1 797 0
 1519 0010 7047     		bx	lr
 1520              		.cfi_endproc
 1521              	.LFE268:
 1523              		.section	.text.chThdResumeS,"ax",%progbits
 1524              		.align	1
 1525              		.global	chThdResumeS
 1526              		.syntax unified
 1527              		.thumb
 1528              		.thumb_func
 1529              		.fpu softvfp
 1531              	chThdResumeS:
 1532              	.LFB269:
 798:lib/chibios/os/rt/src/chthreads.c **** 
 799:lib/chibios/os/rt/src/chthreads.c **** /**
 800:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 801:lib/chibios/os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 802:lib/chibios/os/rt/src/chthreads.c ****  *          context.
 803:lib/chibios/os/rt/src/chthreads.c ****  *
 804:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 805:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 806:lib/chibios/os/rt/src/chthreads.c ****  *
 807:lib/chibios/os/rt/src/chthreads.c ****  * @iclass
 808:lib/chibios/os/rt/src/chthreads.c ****  */
 809:lib/chibios/os/rt/src/chthreads.c **** void chThdResumeS(thread_reference_t *trp, msg_t msg) {
 1533              		.loc 1 809 0
 1534              		.cfi_startproc
 1535              		@ args = 0, pretend = 0, frame = 0
 1536              		@ frame_needed = 0, uses_anonymous_args = 0
 1537              		@ link register save eliminated.
 1538              	.LVL120:
 810:lib/chibios/os/rt/src/chthreads.c **** 
 811:lib/chibios/os/rt/src/chthreads.c ****   if (*trp != NULL) {
 1539              		.loc 1 811 0
 1540 0000 0368     		ldr	r3, [r0]
 1541 0002 23B1     		cbz	r3, .L61
 1542              	.LVL121:
 1543              	.LBB491:
 812:lib/chibios/os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 813:lib/chibios/os/rt/src/chthreads.c **** 
 814:lib/chibios/os/rt/src/chthreads.c ****     chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 815:lib/chibios/os/rt/src/chthreads.c **** 
 816:lib/chibios/os/rt/src/chthreads.c ****     *trp = NULL;
 1544              		.loc 1 816 0
 1545 0004 0022     		movs	r2, #0
 1546 0006 0260     		str	r2, [r0]
 817:lib/chibios/os/rt/src/chthreads.c ****     chSchWakeupS(tp, msg);
 1547              		.loc 1 817 0
 1548 0008 1846     		mov	r0, r3
 1549              	.LVL122:
 1550 000a FFF7FEBF 		b	chSchWakeupS
 1551              	.LVL123:
 1552              	.L61:
 1553              	.LBE491:
 818:lib/chibios/os/rt/src/chthreads.c ****   }
 819:lib/chibios/os/rt/src/chthreads.c **** }
 1554              		.loc 1 819 0
 1555 000e 7047     		bx	lr
 1556              		.cfi_endproc
 1557              	.LFE269:
 1559              		.section	.text.chThdResume,"ax",%progbits
 1560              		.align	1
 1561              		.global	chThdResume
 1562              		.syntax unified
 1563              		.thumb
 1564              		.thumb_func
 1565              		.fpu softvfp
 1567              	chThdResume:
 1568              	.LFB270:
 820:lib/chibios/os/rt/src/chthreads.c **** 
 821:lib/chibios/os/rt/src/chthreads.c **** /**
 822:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 823:lib/chibios/os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 824:lib/chibios/os/rt/src/chthreads.c ****  *          context.
 825:lib/chibios/os/rt/src/chthreads.c ****  *
 826:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 827:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 828:lib/chibios/os/rt/src/chthreads.c ****  *
 829:lib/chibios/os/rt/src/chthreads.c ****  * @api
 830:lib/chibios/os/rt/src/chthreads.c ****  */
 831:lib/chibios/os/rt/src/chthreads.c **** void chThdResume(thread_reference_t *trp, msg_t msg) {
 1569              		.loc 1 831 0
 1570              		.cfi_startproc
 1571              		@ args = 0, pretend = 0, frame = 0
 1572              		@ frame_needed = 0, uses_anonymous_args = 0
 1573              	.LVL124:
 1574 0000 08B5     		push	{r3, lr}
 1575              		.cfi_def_cfa_offset 8
 1576              		.cfi_offset 3, -8
 1577              		.cfi_offset 14, -4
 1578              	.LBB492:
 1579              	.LBB493:
 1580              	.LBB494:
 1581              	.LBB495:
 1582              		.loc 3 264 0
 1583 0002 2023     		movs	r3, #32
 1584              		.syntax unified
 1585              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1586 0004 83F31188 		MSR basepri, r3
 1587              	@ 0 "" 2
 1588              	.LVL125:
 1589              		.thumb
 1590              		.syntax unified
 1591              	.LBE495:
 1592              	.LBE494:
 1593              	.LBE493:
 1594              	.LBE492:
 832:lib/chibios/os/rt/src/chthreads.c **** 
 833:lib/chibios/os/rt/src/chthreads.c ****   chSysLock();
 834:lib/chibios/os/rt/src/chthreads.c ****   chThdResumeS(trp, msg);
 1595              		.loc 1 834 0
 1596 0008 FFF7FEFF 		bl	chThdResumeS
 1597              	.LVL126:
 1598              	.LBB496:
 1599              	.LBB497:
 1600              	.LBB498:
 1601              	.LBB499:
 1602              	.LBB500:
 1603              		.loc 3 264 0
 1604 000c 0023     		movs	r3, #0
 1605              		.syntax unified
 1606              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1607 000e 83F31188 		MSR basepri, r3
 1608              	@ 0 "" 2
 1609              	.LVL127:
 1610              		.thumb
 1611              		.syntax unified
 1612              	.LBE500:
 1613              	.LBE499:
 1614              	.LBE498:
 1615              	.LBE497:
 1616              	.LBE496:
 835:lib/chibios/os/rt/src/chthreads.c ****   chSysUnlock();
 836:lib/chibios/os/rt/src/chthreads.c **** }
 1617              		.loc 1 836 0
 1618 0012 08BD     		pop	{r3, pc}
 1619              		.cfi_endproc
 1620              	.LFE270:
 1622              		.section	.text.chThdEnqueueTimeoutS,"ax",%progbits
 1623              		.align	1
 1624              		.global	chThdEnqueueTimeoutS
 1625              		.syntax unified
 1626              		.thumb
 1627              		.thumb_func
 1628              		.fpu softvfp
 1630              	chThdEnqueueTimeoutS:
 1631              	.LFB271:
 837:lib/chibios/os/rt/src/chthreads.c **** 
 838:lib/chibios/os/rt/src/chthreads.c **** /**
 839:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Enqueues the caller thread on a threads queue object.
 840:lib/chibios/os/rt/src/chthreads.c ****  * @details The caller thread is enqueued and put to sleep until it is
 841:lib/chibios/os/rt/src/chthreads.c ****  *          dequeued or the specified timeouts expires.
 842:lib/chibios/os/rt/src/chthreads.c ****  *
 843:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to the threads queue object
 844:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] timeout   the timeout in system ticks, the special values are
 845:lib/chibios/os/rt/src/chthreads.c ****  *                      handled as follow:
 846:lib/chibios/os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 847:lib/chibios/os/rt/src/chthreads.c ****  *                        state.
 848:lib/chibios/os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 849:lib/chibios/os/rt/src/chthreads.c ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 850:lib/chibios/os/rt/src/chthreads.c ****  *                        occurred.
 851:lib/chibios/os/rt/src/chthreads.c ****  *                      .
 852:lib/chibios/os/rt/src/chthreads.c ****  * @return              The message from @p osalQueueWakeupOneI() or
 853:lib/chibios/os/rt/src/chthreads.c ****  *                      @p osalQueueWakeupAllI() functions.
 854:lib/chibios/os/rt/src/chthreads.c ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 855:lib/chibios/os/rt/src/chthreads.c ****  *                      specified timeout or if the function has been
 856:lib/chibios/os/rt/src/chthreads.c ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 857:lib/chibios/os/rt/src/chthreads.c ****  *                      specification.
 858:lib/chibios/os/rt/src/chthreads.c ****  *
 859:lib/chibios/os/rt/src/chthreads.c ****  * @sclass
 860:lib/chibios/os/rt/src/chthreads.c ****  */
 861:lib/chibios/os/rt/src/chthreads.c **** msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 1632              		.loc 1 861 0
 1633              		.cfi_startproc
 1634              		@ args = 0, pretend = 0, frame = 0
 1635              		@ frame_needed = 0, uses_anonymous_args = 0
 1636              		@ link register save eliminated.
 1637              	.LVL128:
 862:lib/chibios/os/rt/src/chthreads.c **** 
 863:lib/chibios/os/rt/src/chthreads.c ****   if (TIME_IMMEDIATE == timeout) {
 1638              		.loc 1 863 0
 1639 0000 49B1     		cbz	r1, .L65
 864:lib/chibios/os/rt/src/chthreads.c ****     return MSG_TIMEOUT;
 865:lib/chibios/os/rt/src/chthreads.c ****   }
 866:lib/chibios/os/rt/src/chthreads.c **** 
 867:lib/chibios/os/rt/src/chthreads.c ****   queue_insert(currp, tqp);
 1640              		.loc 1 867 0
 1641 0002 064B     		ldr	r3, .L66
 1642              	.LBB501:
 1643              	.LBB502:
 612:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 1644              		.loc 2 612 0
 1645 0004 4268     		ldr	r2, [r0, #4]
 1646              	.LBE502:
 1647              	.LBE501:
 1648              		.loc 1 867 0
 1649 0006 9B69     		ldr	r3, [r3, #24]
 1650              	.LVL129:
 1651              	.LBB504:
 1652              	.LBB503:
 611:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 1653              		.loc 2 611 0
 1654 0008 1860     		str	r0, [r3]
 612:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 1655              		.loc 2 612 0
 1656 000a 5A60     		str	r2, [r3, #4]
 613:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev                  = tp;
 1657              		.loc 2 613 0
 1658 000c 1360     		str	r3, [r2]
 614:./lib/chibios/os/rt/include/chschd.h **** }
 1659              		.loc 2 614 0
 1660 000e 4360     		str	r3, [r0, #4]
 1661              	.LVL130:
 1662              	.LBE503:
 1663              	.LBE504:
 868:lib/chibios/os/rt/src/chthreads.c **** 
 869:lib/chibios/os/rt/src/chthreads.c ****   return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 1664              		.loc 1 869 0
 1665 0010 0420     		movs	r0, #4
 1666              	.LVL131:
 1667 0012 FFF7FEBF 		b	chSchGoSleepTimeoutS
 1668              	.LVL132:
 1669              	.L65:
 870:lib/chibios/os/rt/src/chthreads.c **** }
 1670              		.loc 1 870 0
 1671 0016 4FF0FF30 		mov	r0, #-1
 1672              	.LVL133:
 1673 001a 7047     		bx	lr
 1674              	.L67:
 1675              		.align	2
 1676              	.L66:
 1677 001c 00000000 		.word	ch
 1678              		.cfi_endproc
 1679              	.LFE271:
 1681              		.section	.text.chThdDequeueNextI,"ax",%progbits
 1682              		.align	1
 1683              		.global	chThdDequeueNextI
 1684              		.syntax unified
 1685              		.thumb
 1686              		.thumb_func
 1687              		.fpu softvfp
 1689              	chThdDequeueNextI:
 1690              	.LFB272:
 871:lib/chibios/os/rt/src/chthreads.c **** 
 872:lib/chibios/os/rt/src/chthreads.c **** /**
 873:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Dequeues and wakes up one thread from the threads queue object,
 874:lib/chibios/os/rt/src/chthreads.c ****  *          if any.
 875:lib/chibios/os/rt/src/chthreads.c ****  *
 876:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to the threads queue object
 877:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 878:lib/chibios/os/rt/src/chthreads.c ****  *
 879:lib/chibios/os/rt/src/chthreads.c ****  * @iclass
 880:lib/chibios/os/rt/src/chthreads.c ****  */
 881:lib/chibios/os/rt/src/chthreads.c **** void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 1691              		.loc 1 881 0
 1692              		.cfi_startproc
 1693              		@ args = 0, pretend = 0, frame = 0
 1694              		@ frame_needed = 0, uses_anonymous_args = 0
 1695              		@ link register save eliminated.
 1696              	.LVL134:
 1697              	.LBB511:
 1698              	.LBB512:
 577:./lib/chibios/os/rt/include/chschd.h **** }
 1699              		.loc 2 577 0
 1700 0000 0368     		ldr	r3, [r0]
 1701              	.LVL135:
 1702              	.LBE512:
 1703              	.LBE511:
 882:lib/chibios/os/rt/src/chthreads.c **** 
 883:lib/chibios/os/rt/src/chthreads.c ****   if (queue_notempty(tqp)) {
 1704              		.loc 1 883 0
 1705 0002 9842     		cmp	r0, r3
 1706 0004 06D0     		beq	.L68
 1707              	.LVL136:
 1708              	.LBB513:
 1709              	.LBB514:
 1710              	.LBB515:
 1711              	.LBB516:
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 1712              		.loc 2 620 0
 1713 0006 1A68     		ldr	r2, [r3]
 1714 0008 0260     		str	r2, [r0]
 621:./lib/chibios/os/rt/include/chschd.h **** 
 1715              		.loc 2 621 0
 1716 000a 5060     		str	r0, [r2, #4]
 1717              	.LVL137:
 1718              	.LBE516:
 1719              	.LBE515:
 395:./lib/chibios/os/rt/include/chthreads.h **** }
 396:./lib/chibios/os/rt/include/chthreads.h **** 
 397:./lib/chibios/os/rt/include/chthreads.h **** /**
 398:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Initializes a threads queue object.
 399:./lib/chibios/os/rt/include/chthreads.h ****  *
 400:./lib/chibios/os/rt/include/chthreads.h ****  * @param[out] tqp      pointer to the threads queue object
 401:./lib/chibios/os/rt/include/chthreads.h ****  *
 402:./lib/chibios/os/rt/include/chthreads.h ****  * @init
 403:./lib/chibios/os/rt/include/chthreads.h ****  */
 404:./lib/chibios/os/rt/include/chthreads.h **** static inline void chThdQueueObjectInit(threads_queue_t *tqp) {
 405:./lib/chibios/os/rt/include/chthreads.h **** 
 406:./lib/chibios/os/rt/include/chthreads.h ****   queue_init(tqp);
 407:./lib/chibios/os/rt/include/chthreads.h **** }
 408:./lib/chibios/os/rt/include/chthreads.h **** 
 409:./lib/chibios/os/rt/include/chthreads.h **** /**
 410:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 411:./lib/chibios/os/rt/include/chthreads.h ****  *
 412:./lib/chibios/os/rt/include/chthreads.h ****  * @param[out] tqp      pointer to the threads queue object
 413:./lib/chibios/os/rt/include/chthreads.h ****  * @return              The queue status.
 414:./lib/chibios/os/rt/include/chthreads.h ****  * @retval false        if the queue is not empty.
 415:./lib/chibios/os/rt/include/chthreads.h ****  * @retval true         if the queue is empty.
 416:./lib/chibios/os/rt/include/chthreads.h ****  *
 417:./lib/chibios/os/rt/include/chthreads.h ****  * @iclass
 418:./lib/chibios/os/rt/include/chthreads.h ****  */
 419:./lib/chibios/os/rt/include/chthreads.h **** static inline bool chThdQueueIsEmptyI(threads_queue_t *tqp) {
 420:./lib/chibios/os/rt/include/chthreads.h **** 
 421:./lib/chibios/os/rt/include/chthreads.h ****   chDbgCheckClassI();
 422:./lib/chibios/os/rt/include/chthreads.h **** 
 423:./lib/chibios/os/rt/include/chthreads.h ****   return queue_isempty(tqp);
 424:./lib/chibios/os/rt/include/chthreads.h **** }
 425:./lib/chibios/os/rt/include/chthreads.h **** 
 426:./lib/chibios/os/rt/include/chthreads.h **** /**
 427:./lib/chibios/os/rt/include/chthreads.h ****  * @brief   Dequeues and wakes up one thread from the threads queue object.
 428:./lib/chibios/os/rt/include/chthreads.h ****  * @details Dequeues one thread from the queue without checking if the queue
 429:./lib/chibios/os/rt/include/chthreads.h ****  *          is empty.
 430:./lib/chibios/os/rt/include/chthreads.h ****  * @pre     The queue must contain at least an object.
 431:./lib/chibios/os/rt/include/chthreads.h ****  *
 432:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] tqp       pointer to the threads queue object
 433:./lib/chibios/os/rt/include/chthreads.h ****  * @param[in] msg       the message code
 434:./lib/chibios/os/rt/include/chthreads.h ****  *
 435:./lib/chibios/os/rt/include/chthreads.h ****  * @iclass
 436:./lib/chibios/os/rt/include/chthreads.h ****  */
 437:./lib/chibios/os/rt/include/chthreads.h **** static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 438:./lib/chibios/os/rt/include/chthreads.h ****   thread_t *tp;
 439:./lib/chibios/os/rt/include/chthreads.h **** 
 440:./lib/chibios/os/rt/include/chthreads.h ****   chDbgAssert(queue_notempty(tqp), "empty queue");
 441:./lib/chibios/os/rt/include/chthreads.h **** 
 442:./lib/chibios/os/rt/include/chthreads.h ****   tp = queue_fifo_remove(tqp);
 443:./lib/chibios/os/rt/include/chthreads.h **** 
 444:./lib/chibios/os/rt/include/chthreads.h ****   chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 445:./lib/chibios/os/rt/include/chthreads.h **** 
 446:./lib/chibios/os/rt/include/chthreads.h ****   tp->u.rdymsg = msg;
 1720              		.loc 4 446 0
 1721 000c 5962     		str	r1, [r3, #36]
 447:./lib/chibios/os/rt/include/chthreads.h ****   (void) chSchReadyI(tp);
 1722              		.loc 4 447 0
 1723 000e 1846     		mov	r0, r3
 1724              	.LVL138:
 1725 0010 FFF7FEBF 		b	chSchReadyI
 1726              	.LVL139:
 1727              	.L68:
 1728              	.LBE514:
 1729              	.LBE513:
 884:lib/chibios/os/rt/src/chthreads.c ****     chThdDoDequeueNextI(tqp, msg);
 885:lib/chibios/os/rt/src/chthreads.c ****   }
 886:lib/chibios/os/rt/src/chthreads.c **** }
 1730              		.loc 1 886 0
 1731 0014 7047     		bx	lr
 1732              		.cfi_endproc
 1733              	.LFE272:
 1735              		.section	.text.chThdDequeueAllI,"ax",%progbits
 1736              		.align	1
 1737              		.global	chThdDequeueAllI
 1738              		.syntax unified
 1739              		.thumb
 1740              		.thumb_func
 1741              		.fpu softvfp
 1743              	chThdDequeueAllI:
 1744              	.LFB273:
 887:lib/chibios/os/rt/src/chthreads.c **** 
 888:lib/chibios/os/rt/src/chthreads.c **** /**
 889:lib/chibios/os/rt/src/chthreads.c ****  * @brief   Dequeues and wakes up all threads from the threads queue object.
 890:lib/chibios/os/rt/src/chthreads.c ****  *
 891:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to the threads queue object
 892:lib/chibios/os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 893:lib/chibios/os/rt/src/chthreads.c ****  *
 894:lib/chibios/os/rt/src/chthreads.c ****  * @iclass
 895:lib/chibios/os/rt/src/chthreads.c ****  */
 896:lib/chibios/os/rt/src/chthreads.c **** void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 1745              		.loc 1 896 0
 1746              		.cfi_startproc
 1747              		@ args = 0, pretend = 0, frame = 0
 1748              		@ frame_needed = 0, uses_anonymous_args = 0
 1749              	.LVL140:
 1750 0000 38B5     		push	{r3, r4, r5, lr}
 1751              		.cfi_def_cfa_offset 16
 1752              		.cfi_offset 3, -16
 1753              		.cfi_offset 4, -12
 1754              		.cfi_offset 5, -8
 1755              		.cfi_offset 14, -4
 1756 0002 0446     		mov	r4, r0
 1757 0004 0D46     		mov	r5, r1
 1758              	.LVL141:
 1759              	.L71:
 1760              	.LBB523:
 1761              	.LBB524:
 577:./lib/chibios/os/rt/include/chschd.h **** }
 1762              		.loc 2 577 0
 1763 0006 2068     		ldr	r0, [r4]
 1764              	.LVL142:
 1765              	.LBE524:
 1766              	.LBE523:
 897:lib/chibios/os/rt/src/chthreads.c **** 
 898:lib/chibios/os/rt/src/chthreads.c ****   while (queue_notempty(tqp)) {
 1767              		.loc 1 898 0
 1768 0008 8442     		cmp	r4, r0
 1769 000a 00D1     		bne	.L72
 899:lib/chibios/os/rt/src/chthreads.c ****     chThdDoDequeueNextI(tqp, msg);
 900:lib/chibios/os/rt/src/chthreads.c ****   }
 901:lib/chibios/os/rt/src/chthreads.c **** }
 1770              		.loc 1 901 0
 1771 000c 38BD     		pop	{r3, r4, r5, pc}
 1772              	.LVL143:
 1773              	.L72:
 1774              	.LBB525:
 1775              	.LBB526:
 1776              	.LBB527:
 1777              	.LBB528:
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 1778              		.loc 2 620 0
 1779 000e 0368     		ldr	r3, [r0]
 1780 0010 2360     		str	r3, [r4]
 621:./lib/chibios/os/rt/include/chschd.h **** 
 1781              		.loc 2 621 0
 1782 0012 5C60     		str	r4, [r3, #4]
 1783              	.LVL144:
 1784              	.LBE528:
 1785              	.LBE527:
 446:./lib/chibios/os/rt/include/chthreads.h ****   (void) chSchReadyI(tp);
 1786              		.loc 4 446 0
 1787 0014 4562     		str	r5, [r0, #36]
 1788              		.loc 4 447 0
 1789 0016 FFF7FEFF 		bl	chSchReadyI
 1790              	.LVL145:
 1791 001a F4E7     		b	.L71
 1792              	.LBE526:
 1793              	.LBE525:
 1794              		.cfi_endproc
 1795              	.LFE273:
 1797              		.section	.rodata.chThdCreateStatic.str1.1,"aMS",%progbits,1
 1798              	.LC0:
 1799 0000 6E6F6E61 		.ascii	"noname\000"
 1799      6D6500
 1800              		.text
 1801              	.Letext0:
 1802              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 1803              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 1804              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 1805              		.file 10 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 1806              		.file 11 "./lib/chibios/os/rt/include/chsystypes.h"
 1807              		.file 12 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 1808              		.file 13 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 1809              		.file 14 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 1810              		.file 15 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 1811              		.file 16 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 1812              		.file 17 "./lib/chibios/os/rt/include/chtm.h"
 1813              		.file 18 "./lib/chibios/os/rt/include/chsem.h"
 1814              		.file 19 "./lib/chibios/os/rt/include/chmtx.h"
 1815              		.file 20 "./lib/chibios/os/rt/include/chsys.h"
 1816              		.file 21 "./lib/chibios/os/rt/include/chregistry.h"
 1817              		.file 22 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 1818              		.file 23 "./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h"
 1819              		.file 24 "./lib/chibios/os/common/oslib/include/chmempools.h"
 1820              		.file 25 "./lib/chibios/os/common/oslib/include/chheap.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chthreads.c
/var/tmp//cchZUlhz.s:16     .text._thread_init:0000000000000000 $t
/var/tmp//cchZUlhz.s:23     .text._thread_init:0000000000000000 _thread_init
/var/tmp//cchZUlhz.s:85     .text._thread_init:0000000000000034 $d
/var/tmp//cchZUlhz.s:90     .text.chThdCreateSuspendedI:0000000000000000 $t
/var/tmp//cchZUlhz.s:97     .text.chThdCreateSuspendedI:0000000000000000 chThdCreateSuspendedI
/var/tmp//cchZUlhz.s:127    .text.chThdCreateSuspendedI:0000000000000030 $d
/var/tmp//cchZUlhz.s:132    .text.chThdCreateSuspended:0000000000000000 $t
/var/tmp//cchZUlhz.s:139    .text.chThdCreateSuspended:0000000000000000 chThdCreateSuspended
/var/tmp//cchZUlhz.s:196    .text.chThdCreateI:0000000000000000 $t
/var/tmp//cchZUlhz.s:203    .text.chThdCreateI:0000000000000000 chThdCreateI
/var/tmp//cchZUlhz.s:229    .text.chThdCreate:0000000000000000 $t
/var/tmp//cchZUlhz.s:236    .text.chThdCreate:0000000000000000 chThdCreate
/var/tmp//cchZUlhz.s:301    .text.chThdCreateStatic:0000000000000000 $t
/var/tmp//cchZUlhz.s:308    .text.chThdCreateStatic:0000000000000000 chThdCreateStatic
/var/tmp//cchZUlhz.s:395    .text.chThdCreateStatic:0000000000000040 $d
/var/tmp//cchZUlhz.s:401    .text.chThdStart:0000000000000000 $t
/var/tmp//cchZUlhz.s:408    .text.chThdStart:0000000000000000 chThdStart
/var/tmp//cchZUlhz.s:477    .text.chThdAddRef:0000000000000000 $t
/var/tmp//cchZUlhz.s:484    .text.chThdAddRef:0000000000000000 chThdAddRef
/var/tmp//cchZUlhz.s:539    .text.chThdRelease:0000000000000000 $t
/var/tmp//cchZUlhz.s:546    .text.chThdRelease:0000000000000000 chThdRelease
/var/tmp//cchZUlhz.s:657    .text.chThdExitS:0000000000000000 $t
/var/tmp//cchZUlhz.s:664    .text.chThdExitS:0000000000000000 chThdExitS
/var/tmp//cchZUlhz.s:741    .text.chThdExitS:0000000000000040 $d
/var/tmp//cchZUlhz.s:746    .text.chThdExit:0000000000000000 $t
/var/tmp//cchZUlhz.s:753    .text.chThdExit:0000000000000000 chThdExit
/var/tmp//cchZUlhz.s:785    .text.chThdWait:0000000000000000 $t
/var/tmp//cchZUlhz.s:792    .text.chThdWait:0000000000000000 chThdWait
/var/tmp//cchZUlhz.s:887    .text.chThdWait:0000000000000034 $d
/var/tmp//cchZUlhz.s:892    .text.chThdSetPriority:0000000000000000 $t
/var/tmp//cchZUlhz.s:899    .text.chThdSetPriority:0000000000000000 chThdSetPriority
/var/tmp//cchZUlhz.s:974    .text.chThdSetPriority:000000000000002c $d
/var/tmp//cchZUlhz.s:979    .text.chThdTerminate:0000000000000000 $t
/var/tmp//cchZUlhz.s:986    .text.chThdTerminate:0000000000000000 chThdTerminate
/var/tmp//cchZUlhz.s:1041   .text.chThdSleep:0000000000000000 $t
/var/tmp//cchZUlhz.s:1048   .text.chThdSleep:0000000000000000 chThdSleep
/var/tmp//cchZUlhz.s:1113   .text.chThdSleepUntil:0000000000000000 $t
/var/tmp//cchZUlhz.s:1120   .text.chThdSleepUntil:0000000000000000 chThdSleepUntil
/var/tmp//cchZUlhz.s:1200   .text.chThdSleepUntilWindowed:0000000000000000 $t
/var/tmp//cchZUlhz.s:1207   .text.chThdSleepUntilWindowed:0000000000000000 chThdSleepUntilWindowed
/var/tmp//cchZUlhz.s:1308   .text.chThdYield:0000000000000000 $t
/var/tmp//cchZUlhz.s:1315   .text.chThdYield:0000000000000000 chThdYield
/var/tmp//cchZUlhz.s:1388   .text.chThdYield:0000000000000024 $d
/var/tmp//cchZUlhz.s:1393   .text.chThdSuspendS:0000000000000000 $t
/var/tmp//cchZUlhz.s:1400   .text.chThdSuspendS:0000000000000000 chThdSuspendS
/var/tmp//cchZUlhz.s:1435   .text.chThdSuspendS:0000000000000018 $d
/var/tmp//cchZUlhz.s:1440   .text.chThdSuspendTimeoutS:0000000000000000 $t
/var/tmp//cchZUlhz.s:1447   .text.chThdSuspendTimeoutS:0000000000000000 chThdSuspendTimeoutS
/var/tmp//cchZUlhz.s:1481   .text.chThdSuspendTimeoutS:0000000000000018 $d
/var/tmp//cchZUlhz.s:1486   .text.chThdResumeI:0000000000000000 $t
/var/tmp//cchZUlhz.s:1493   .text.chThdResumeI:0000000000000000 chThdResumeI
/var/tmp//cchZUlhz.s:1524   .text.chThdResumeS:0000000000000000 $t
/var/tmp//cchZUlhz.s:1531   .text.chThdResumeS:0000000000000000 chThdResumeS
/var/tmp//cchZUlhz.s:1560   .text.chThdResume:0000000000000000 $t
/var/tmp//cchZUlhz.s:1567   .text.chThdResume:0000000000000000 chThdResume
/var/tmp//cchZUlhz.s:1623   .text.chThdEnqueueTimeoutS:0000000000000000 $t
/var/tmp//cchZUlhz.s:1630   .text.chThdEnqueueTimeoutS:0000000000000000 chThdEnqueueTimeoutS
/var/tmp//cchZUlhz.s:1677   .text.chThdEnqueueTimeoutS:000000000000001c $d
/var/tmp//cchZUlhz.s:1682   .text.chThdDequeueNextI:0000000000000000 $t
/var/tmp//cchZUlhz.s:1689   .text.chThdDequeueNextI:0000000000000000 chThdDequeueNextI
/var/tmp//cchZUlhz.s:1736   .text.chThdDequeueAllI:0000000000000000 $t
/var/tmp//cchZUlhz.s:1743   .text.chThdDequeueAllI:0000000000000000 chThdDequeueAllI

UNDEFINED SYMBOLS
ch
_port_thread_start
chSchReadyI
chSchWakeupS
chHeapFree
chPoolFree
chSchGoSleepS
chSchRescheduleS
chSchGoSleepTimeoutS
chSchDoRescheduleBehind
