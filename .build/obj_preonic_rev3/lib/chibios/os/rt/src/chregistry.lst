   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"chregistry.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.chRegFirstThread,"ax",%progbits
  16              		.align	1
  17              		.global	chRegFirstThread
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	chRegFirstThread:
  24              	.LFB248:
  25              		.file 1 "lib/chibios/os/rt/src/chregistry.c"
   1:lib/chibios/os/rt/src/chregistry.c **** /*
   2:lib/chibios/os/rt/src/chregistry.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:lib/chibios/os/rt/src/chregistry.c **** 
   4:lib/chibios/os/rt/src/chregistry.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/rt/src/chregistry.c **** 
   6:lib/chibios/os/rt/src/chregistry.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/rt/src/chregistry.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/rt/src/chregistry.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/rt/src/chregistry.c ****     (at your option) any later version.
  10:lib/chibios/os/rt/src/chregistry.c **** 
  11:lib/chibios/os/rt/src/chregistry.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/rt/src/chregistry.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/rt/src/chregistry.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/rt/src/chregistry.c ****     GNU General Public License for more details.
  15:lib/chibios/os/rt/src/chregistry.c **** 
  16:lib/chibios/os/rt/src/chregistry.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/rt/src/chregistry.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/rt/src/chregistry.c **** */
  19:lib/chibios/os/rt/src/chregistry.c **** 
  20:lib/chibios/os/rt/src/chregistry.c **** /**
  21:lib/chibios/os/rt/src/chregistry.c ****  * @file    chregistry.c
  22:lib/chibios/os/rt/src/chregistry.c ****  * @brief   Threads registry code.
  23:lib/chibios/os/rt/src/chregistry.c ****  *
  24:lib/chibios/os/rt/src/chregistry.c ****  * @addtogroup registry
  25:lib/chibios/os/rt/src/chregistry.c ****  * @details Threads Registry related APIs and services.
  26:lib/chibios/os/rt/src/chregistry.c ****  *          <h2>Operation mode</h2>
  27:lib/chibios/os/rt/src/chregistry.c ****  *          The Threads Registry is a double linked list that holds all the
  28:lib/chibios/os/rt/src/chregistry.c ****  *          active threads in the system.<br>
  29:lib/chibios/os/rt/src/chregistry.c ****  *          Operations defined for the registry:
  30:lib/chibios/os/rt/src/chregistry.c ****  *          - <b>First</b>, returns the first, in creation order, active thread
  31:lib/chibios/os/rt/src/chregistry.c ****  *            in the system.
  32:lib/chibios/os/rt/src/chregistry.c ****  *          - <b>Next</b>, returns the next, in creation order, active thread
  33:lib/chibios/os/rt/src/chregistry.c ****  *            in the system.
  34:lib/chibios/os/rt/src/chregistry.c ****  *          .
  35:lib/chibios/os/rt/src/chregistry.c ****  *          The registry is meant to be mainly a debug feature, for example,
  36:lib/chibios/os/rt/src/chregistry.c ****  *          using the registry a debugger can enumerate the active threads
  37:lib/chibios/os/rt/src/chregistry.c ****  *          in any given moment or the shell can print the active threads
  38:lib/chibios/os/rt/src/chregistry.c ****  *          and their state.<br>
  39:lib/chibios/os/rt/src/chregistry.c ****  *          Another possible use is for centralized threads memory management,
  40:lib/chibios/os/rt/src/chregistry.c ****  *          terminating threads can pulse an event source and an event handler
  41:lib/chibios/os/rt/src/chregistry.c ****  *          can perform a scansion of the registry in order to recover the
  42:lib/chibios/os/rt/src/chregistry.c ****  *          memory.
  43:lib/chibios/os/rt/src/chregistry.c ****  * @pre     In order to use the threads registry the @p CH_CFG_USE_REGISTRY
  44:lib/chibios/os/rt/src/chregistry.c ****  *          option must be enabled in @p chconf.h.
  45:lib/chibios/os/rt/src/chregistry.c ****  * @{
  46:lib/chibios/os/rt/src/chregistry.c ****  */
  47:lib/chibios/os/rt/src/chregistry.c **** 
  48:lib/chibios/os/rt/src/chregistry.c **** #include <string.h>
  49:lib/chibios/os/rt/src/chregistry.c **** 
  50:lib/chibios/os/rt/src/chregistry.c **** #include "ch.h"
  51:lib/chibios/os/rt/src/chregistry.c **** 
  52:lib/chibios/os/rt/src/chregistry.c **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
  53:lib/chibios/os/rt/src/chregistry.c **** 
  54:lib/chibios/os/rt/src/chregistry.c **** /*===========================================================================*/
  55:lib/chibios/os/rt/src/chregistry.c **** /* Module exported variables.                                                */
  56:lib/chibios/os/rt/src/chregistry.c **** /*===========================================================================*/
  57:lib/chibios/os/rt/src/chregistry.c **** 
  58:lib/chibios/os/rt/src/chregistry.c **** /*===========================================================================*/
  59:lib/chibios/os/rt/src/chregistry.c **** /* Module local types.                                                       */
  60:lib/chibios/os/rt/src/chregistry.c **** /*===========================================================================*/
  61:lib/chibios/os/rt/src/chregistry.c **** 
  62:lib/chibios/os/rt/src/chregistry.c **** /*===========================================================================*/
  63:lib/chibios/os/rt/src/chregistry.c **** /* Module local variables.                                                   */
  64:lib/chibios/os/rt/src/chregistry.c **** /*===========================================================================*/
  65:lib/chibios/os/rt/src/chregistry.c **** 
  66:lib/chibios/os/rt/src/chregistry.c **** /*===========================================================================*/
  67:lib/chibios/os/rt/src/chregistry.c **** /* Module local functions.                                                   */
  68:lib/chibios/os/rt/src/chregistry.c **** /*===========================================================================*/
  69:lib/chibios/os/rt/src/chregistry.c **** 
  70:lib/chibios/os/rt/src/chregistry.c **** #define _offsetof(st, m)                                                    \
  71:lib/chibios/os/rt/src/chregistry.c ****   /*lint -save -e9005 -e9033 -e413 [11.8, 10.8 1.3] Normal pointers
  72:lib/chibios/os/rt/src/chregistry.c ****     arithmetic, it is safe.*/                                               \
  73:lib/chibios/os/rt/src/chregistry.c ****   ((size_t)((char *)&((st *)0)->m - (char *)0))                             \
  74:lib/chibios/os/rt/src/chregistry.c ****   /*lint -restore*/
  75:lib/chibios/os/rt/src/chregistry.c **** 
  76:lib/chibios/os/rt/src/chregistry.c **** /*===========================================================================*/
  77:lib/chibios/os/rt/src/chregistry.c **** /* Module exported functions.                                                */
  78:lib/chibios/os/rt/src/chregistry.c **** /*===========================================================================*/
  79:lib/chibios/os/rt/src/chregistry.c **** 
  80:lib/chibios/os/rt/src/chregistry.c **** /*
  81:lib/chibios/os/rt/src/chregistry.c ****  * OS signature in ROM plus debug-related information.
  82:lib/chibios/os/rt/src/chregistry.c ****  */
  83:lib/chibios/os/rt/src/chregistry.c **** ROMCONST chdebug_t ch_debug = {
  84:lib/chibios/os/rt/src/chregistry.c ****   {'m', 'a', 'i', 'n'},
  85:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)0,
  86:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)sizeof (chdebug_t),
  87:lib/chibios/os/rt/src/chregistry.c ****   (uint16_t)(((unsigned)CH_KERNEL_MAJOR << 11U) |
  88:lib/chibios/os/rt/src/chregistry.c ****              ((unsigned)CH_KERNEL_MINOR << 6U) |
  89:lib/chibios/os/rt/src/chregistry.c ****              ((unsigned)CH_KERNEL_PATCH << 0U)),
  90:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)sizeof (void *),
  91:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)sizeof (systime_t),
  92:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)sizeof (thread_t),
  93:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, prio),
  94:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, ctx),
  95:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, newer),
  96:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, older),
  97:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, name),
  98:lib/chibios/os/rt/src/chregistry.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  99:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, wabase),
 100:lib/chibios/os/rt/src/chregistry.c **** #else
 101:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)0,
 102:lib/chibios/os/rt/src/chregistry.c **** #endif
 103:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, state),
 104:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, flags),
 105:lib/chibios/os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 106:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, refs),
 107:lib/chibios/os/rt/src/chregistry.c **** #else
 108:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)0,
 109:lib/chibios/os/rt/src/chregistry.c **** #endif
 110:lib/chibios/os/rt/src/chregistry.c **** #if CH_CFG_TIME_QUANTUM > 0
 111:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, preempt),
 112:lib/chibios/os/rt/src/chregistry.c **** #else
 113:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)0,
 114:lib/chibios/os/rt/src/chregistry.c **** #endif
 115:lib/chibios/os/rt/src/chregistry.c **** #if CH_DBG_THREADS_PROFILING == TRUE
 116:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)_offsetof(thread_t, time)
 117:lib/chibios/os/rt/src/chregistry.c **** #else
 118:lib/chibios/os/rt/src/chregistry.c ****   (uint8_t)0
 119:lib/chibios/os/rt/src/chregistry.c **** #endif
 120:lib/chibios/os/rt/src/chregistry.c **** };
 121:lib/chibios/os/rt/src/chregistry.c **** 
 122:lib/chibios/os/rt/src/chregistry.c **** /**
 123:lib/chibios/os/rt/src/chregistry.c ****  * @brief   Returns the first thread in the system.
 124:lib/chibios/os/rt/src/chregistry.c ****  * @details Returns the most ancient thread in the system, usually this is
 125:lib/chibios/os/rt/src/chregistry.c ****  *          the main thread unless it terminated. A reference is added to the
 126:lib/chibios/os/rt/src/chregistry.c ****  *          returned thread in order to make sure its status is not lost.
 127:lib/chibios/os/rt/src/chregistry.c ****  * @note    This function cannot return @p NULL because there is always at
 128:lib/chibios/os/rt/src/chregistry.c ****  *          least one thread in the system.
 129:lib/chibios/os/rt/src/chregistry.c ****  *
 130:lib/chibios/os/rt/src/chregistry.c ****  * @return              A reference to the most ancient thread.
 131:lib/chibios/os/rt/src/chregistry.c ****  *
 132:lib/chibios/os/rt/src/chregistry.c ****  * @api
 133:lib/chibios/os/rt/src/chregistry.c ****  */
 134:lib/chibios/os/rt/src/chregistry.c **** thread_t *chRegFirstThread(void) {
  26              		.loc 1 134 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32              	.LBB38:
  33              	.LBB39:
  34              	.LBB40:
  35              	.LBB41:
  36              		.file 2 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @version  V4.30
   5:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
   9:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    All rights reserved.
  10:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      specific prior written permission.
  20:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    *
  21:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  35:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  38:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #endif
  45:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  46:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  47:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   @{
  51:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  52:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  53:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  54:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  58:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  60:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  62:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  63:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  64:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  65:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  69:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  71:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  73:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  74:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  75:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  76:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Control Register value
  79:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  80:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  82:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
  83:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  84:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
  86:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  87:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  88:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  89:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  90:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  94:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  96:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  98:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  99:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 100:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 101:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 105:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 107:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 108:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 109:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 111:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 112:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 113:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 114:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 115:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               APSR Register value
 118:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 119:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 121:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 122:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 123:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 125:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 126:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 127:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 128:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 129:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 132:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 134:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 136:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 137:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 138:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 140:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 141:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 142:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 143:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 144:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               PSP Register value
 147:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 148:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 150:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 151:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 154:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 155:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 156:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 157:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 158:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 162:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 164:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 166:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 167:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 168:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 169:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               MSP Register value
 172:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 173:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 175:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 176:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 177:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 179:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 180:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 181:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 182:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 183:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 188:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 190:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 192:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 193:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 194:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 195:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 199:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 201:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 202:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 203:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 205:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 206:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 207:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 208:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 209:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 213:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 215:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 217:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 218:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 219:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 221:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 222:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 226:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 228:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 230:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 231:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 232:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 233:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 237:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 239:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 241:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 243:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 244:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 248:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 250:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 251:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 252:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 254:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 255:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 257:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  37              		.loc 2 264 0
  38 0000 2023     		movs	r3, #32
  39              		.syntax unified
  40              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
  41 0002 83F31188 		MSR basepri, r3
  42              	@ 0 "" 2
  43              	.LVL1:
  44              		.thumb
  45              		.syntax unified
  46              	.LBE41:
  47              	.LBE40:
  48              	.LBE39:
  49              	.LBE38:
 135:lib/chibios/os/rt/src/chregistry.c ****   thread_t *tp;
 136:lib/chibios/os/rt/src/chregistry.c **** 
 137:lib/chibios/os/rt/src/chregistry.c ****   chSysLock();
 138:lib/chibios/os/rt/src/chregistry.c ****   tp = ch.rlist.newer;
  50              		.loc 1 138 0
  51 0006 054B     		ldr	r3, .L2
  52 0008 1869     		ldr	r0, [r3, #16]
  53              	.LVL2:
 139:lib/chibios/os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 140:lib/chibios/os/rt/src/chregistry.c ****   tp->refs++;
  54              		.loc 1 140 0
  55 000a 90F82230 		ldrb	r3, [r0, #34]	@ zero_extendqisi2
  56 000e 0133     		adds	r3, r3, #1
  57 0010 80F82230 		strb	r3, [r0, #34]
  58              	.LVL3:
  59              	.LBB42:
  60              	.LBB43:
  61              	.LBB44:
  62              	.LBB45:
  63              	.LBB46:
  64              		.loc 2 264 0
  65 0014 0023     		movs	r3, #0
  66              		.syntax unified
  67              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
  68 0016 83F31188 		MSR basepri, r3
  69              	@ 0 "" 2
  70              	.LVL4:
  71              		.thumb
  72              		.syntax unified
  73              	.LBE46:
  74              	.LBE45:
  75              	.LBE44:
  76              	.LBE43:
  77              	.LBE42:
 141:lib/chibios/os/rt/src/chregistry.c **** #endif
 142:lib/chibios/os/rt/src/chregistry.c ****   chSysUnlock();
 143:lib/chibios/os/rt/src/chregistry.c **** 
 144:lib/chibios/os/rt/src/chregistry.c ****   return tp;
 145:lib/chibios/os/rt/src/chregistry.c **** }
  78              		.loc 1 145 0
  79 001a 7047     		bx	lr
  80              	.L3:
  81              		.align	2
  82              	.L2:
  83 001c 00000000 		.word	ch
  84              		.cfi_endproc
  85              	.LFE248:
  87              		.section	.text.chRegNextThread,"ax",%progbits
  88              		.align	1
  89              		.global	chRegNextThread
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  93              		.fpu softvfp
  95              	chRegNextThread:
  96              	.LFB249:
 146:lib/chibios/os/rt/src/chregistry.c **** 
 147:lib/chibios/os/rt/src/chregistry.c **** /**
 148:lib/chibios/os/rt/src/chregistry.c ****  * @brief   Returns the thread next to the specified one.
 149:lib/chibios/os/rt/src/chregistry.c ****  * @details The reference counter of the specified thread is decremented and
 150:lib/chibios/os/rt/src/chregistry.c ****  *          the reference counter of the returned thread is incremented.
 151:lib/chibios/os/rt/src/chregistry.c ****  *
 152:lib/chibios/os/rt/src/chregistry.c ****  * @param[in] tp        pointer to the thread
 153:lib/chibios/os/rt/src/chregistry.c ****  * @return              A reference to the next thread.
 154:lib/chibios/os/rt/src/chregistry.c ****  * @retval NULL         if there is no next thread.
 155:lib/chibios/os/rt/src/chregistry.c ****  *
 156:lib/chibios/os/rt/src/chregistry.c ****  * @api
 157:lib/chibios/os/rt/src/chregistry.c ****  */
 158:lib/chibios/os/rt/src/chregistry.c **** thread_t *chRegNextThread(thread_t *tp) {
  97              		.loc 1 158 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              	.LVL5:
 102 0000 10B5     		push	{r4, lr}
 103              		.cfi_def_cfa_offset 8
 104              		.cfi_offset 4, -8
 105              		.cfi_offset 14, -4
 106              	.LBB47:
 107              	.LBB48:
 108              	.LBB49:
 109              	.LBB50:
 110              		.loc 2 264 0
 111 0002 2023     		movs	r3, #32
 112              		.syntax unified
 113              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 114 0004 83F31188 		MSR basepri, r3
 115              	@ 0 "" 2
 116              	.LVL6:
 117              		.thumb
 118              		.syntax unified
 119              	.LBE50:
 120              	.LBE49:
 121              	.LBE48:
 122              	.LBE47:
 159:lib/chibios/os/rt/src/chregistry.c ****   thread_t *ntp;
 160:lib/chibios/os/rt/src/chregistry.c **** 
 161:lib/chibios/os/rt/src/chregistry.c ****   chSysLock();
 162:lib/chibios/os/rt/src/chregistry.c ****   ntp = tp->newer;
 163:lib/chibios/os/rt/src/chregistry.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 164:lib/chibios/os/rt/src/chregistry.c ****   if (ntp == (thread_t *)&ch.rlist) {
 123              		.loc 1 164 0
 124 0008 094B     		ldr	r3, .L7
 162:lib/chibios/os/rt/src/chregistry.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 125              		.loc 1 162 0
 126 000a 0469     		ldr	r4, [r0, #16]
 127              	.LVL7:
 128              		.loc 1 164 0
 129 000c 9C42     		cmp	r4, r3
 165:lib/chibios/os/rt/src/chregistry.c ****   /*lint -restore*/
 166:lib/chibios/os/rt/src/chregistry.c ****     ntp = NULL;
 167:lib/chibios/os/rt/src/chregistry.c ****   }
 168:lib/chibios/os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 169:lib/chibios/os/rt/src/chregistry.c ****   else {
 170:lib/chibios/os/rt/src/chregistry.c ****     chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 171:lib/chibios/os/rt/src/chregistry.c ****     ntp->refs++;
 130              		.loc 1 171 0
 131 000e 18BF     		it	ne
 132 0010 94F82230 		ldrbne	r3, [r4, #34]	@ zero_extendqisi2
 133 0014 4FF00002 		mov	r2, #0
 134 0018 1ABF     		itte	ne
 135 001a 0133     		addne	r3, r3, #1
 136 001c 84F82230 		strbne	r3, [r4, #34]
 166:lib/chibios/os/rt/src/chregistry.c ****   }
 137              		.loc 1 166 0
 138 0020 1446     		moveq	r4, r2
 139              	.LVL8:
 140              	.LBB51:
 141              	.LBB52:
 142              	.LBB53:
 143              	.LBB54:
 144              	.LBB55:
 145              		.loc 2 264 0
 146              		.syntax unified
 147              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 148 0022 82F31188 		MSR basepri, r2
 149              	@ 0 "" 2
 150              	.LVL9:
 151              		.thumb
 152              		.syntax unified
 153              	.LBE55:
 154              	.LBE54:
 155              	.LBE53:
 156              	.LBE52:
 157              	.LBE51:
 172:lib/chibios/os/rt/src/chregistry.c ****   }
 173:lib/chibios/os/rt/src/chregistry.c **** #endif
 174:lib/chibios/os/rt/src/chregistry.c ****   chSysUnlock();
 175:lib/chibios/os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 176:lib/chibios/os/rt/src/chregistry.c ****   chThdRelease(tp);
 158              		.loc 1 176 0
 159 0026 FFF7FEFF 		bl	chThdRelease
 160              	.LVL10:
 177:lib/chibios/os/rt/src/chregistry.c **** #endif
 178:lib/chibios/os/rt/src/chregistry.c **** 
 179:lib/chibios/os/rt/src/chregistry.c ****   return ntp;
 180:lib/chibios/os/rt/src/chregistry.c **** }
 161              		.loc 1 180 0
 162 002a 2046     		mov	r0, r4
 163 002c 10BD     		pop	{r4, pc}
 164              	.LVL11:
 165              	.L8:
 166 002e 00BF     		.align	2
 167              	.L7:
 168 0030 00000000 		.word	ch
 169              		.cfi_endproc
 170              	.LFE249:
 172              		.section	.text.chRegFindThreadByName,"ax",%progbits
 173              		.align	1
 174              		.global	chRegFindThreadByName
 175              		.syntax unified
 176              		.thumb
 177              		.thumb_func
 178              		.fpu softvfp
 180              	chRegFindThreadByName:
 181              	.LFB250:
 181:lib/chibios/os/rt/src/chregistry.c **** 
 182:lib/chibios/os/rt/src/chregistry.c **** /**
 183:lib/chibios/os/rt/src/chregistry.c ****  * @brief   Retrieves a thread pointer by name.
 184:lib/chibios/os/rt/src/chregistry.c ****  * @note    The reference counter of the found thread is increased by one so
 185:lib/chibios/os/rt/src/chregistry.c ****  *          it cannot be disposed incidentally after the pointer has been
 186:lib/chibios/os/rt/src/chregistry.c ****  *          returned.
 187:lib/chibios/os/rt/src/chregistry.c ****  *
 188:lib/chibios/os/rt/src/chregistry.c ****  * @param[in] name      the thread name
 189:lib/chibios/os/rt/src/chregistry.c ****  * @return              A pointer to the found thread.
 190:lib/chibios/os/rt/src/chregistry.c ****  * @retval NULL         if a matching thread has not been found.
 191:lib/chibios/os/rt/src/chregistry.c ****  *
 192:lib/chibios/os/rt/src/chregistry.c ****  * @api
 193:lib/chibios/os/rt/src/chregistry.c ****  */
 194:lib/chibios/os/rt/src/chregistry.c **** thread_t *chRegFindThreadByName(const char *name) {
 182              		.loc 1 194 0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              	.LVL12:
 187 0000 38B5     		push	{r3, r4, r5, lr}
 188              		.cfi_def_cfa_offset 16
 189              		.cfi_offset 3, -16
 190              		.cfi_offset 4, -12
 191              		.cfi_offset 5, -8
 192              		.cfi_offset 14, -4
 193              		.loc 1 194 0
 194 0002 0546     		mov	r5, r0
 195:lib/chibios/os/rt/src/chregistry.c ****   thread_t *ctp;
 196:lib/chibios/os/rt/src/chregistry.c **** 
 197:lib/chibios/os/rt/src/chregistry.c ****   /* Scanning registry.*/
 198:lib/chibios/os/rt/src/chregistry.c ****   ctp = chRegFirstThread();
 195              		.loc 1 198 0
 196 0004 FFF7FEFF 		bl	chRegFirstThread
 197              	.LVL13:
 198 0008 0446     		mov	r4, r0
 199              	.LVL14:
 200              	.L11:
 199:lib/chibios/os/rt/src/chregistry.c ****   do {
 200:lib/chibios/os/rt/src/chregistry.c ****     if (strcmp(chRegGetThreadNameX(ctp), name) == 0) {
 201              		.loc 1 200 0
 202 000a 2946     		mov	r1, r5
 203 000c A069     		ldr	r0, [r4, #24]
 204              	.LVL15:
 205 000e FFF7FEFF 		bl	strcmp
 206              	.LVL16:
 207 0012 28B1     		cbz	r0, .L9
 201:lib/chibios/os/rt/src/chregistry.c ****       return ctp;
 202:lib/chibios/os/rt/src/chregistry.c ****     }
 203:lib/chibios/os/rt/src/chregistry.c ****     ctp = chRegNextThread(ctp);
 208              		.loc 1 203 0
 209 0014 2046     		mov	r0, r4
 210 0016 FFF7FEFF 		bl	chRegNextThread
 211              	.LVL17:
 204:lib/chibios/os/rt/src/chregistry.c ****   } while (ctp != NULL);
 212              		.loc 1 204 0
 213 001a 0446     		mov	r4, r0
 214              	.LVL18:
 215 001c 0028     		cmp	r0, #0
 216 001e F4D1     		bne	.L11
 217              	.LVL19:
 218              	.L9:
 205:lib/chibios/os/rt/src/chregistry.c **** 
 206:lib/chibios/os/rt/src/chregistry.c ****   return NULL;
 207:lib/chibios/os/rt/src/chregistry.c **** }
 219              		.loc 1 207 0
 220 0020 2046     		mov	r0, r4
 221 0022 38BD     		pop	{r3, r4, r5, pc}
 222              		.cfi_endproc
 223              	.LFE250:
 225              		.section	.text.chRegFindThreadByPointer,"ax",%progbits
 226              		.align	1
 227              		.global	chRegFindThreadByPointer
 228              		.syntax unified
 229              		.thumb
 230              		.thumb_func
 231              		.fpu softvfp
 233              	chRegFindThreadByPointer:
 234              	.LFB251:
 208:lib/chibios/os/rt/src/chregistry.c **** 
 209:lib/chibios/os/rt/src/chregistry.c **** /**
 210:lib/chibios/os/rt/src/chregistry.c ****  * @brief   Confirms that a pointer is a valid thread pointer.
 211:lib/chibios/os/rt/src/chregistry.c ****  * @note    The reference counter of the found thread is increased by one so
 212:lib/chibios/os/rt/src/chregistry.c ****  *          it cannot be disposed incidentally after the pointer has been
 213:lib/chibios/os/rt/src/chregistry.c ****  *          returned.
 214:lib/chibios/os/rt/src/chregistry.c ****  *
 215:lib/chibios/os/rt/src/chregistry.c ****  * @param[in] tp        pointer to the thread
 216:lib/chibios/os/rt/src/chregistry.c ****  * @return              A pointer to the found thread.
 217:lib/chibios/os/rt/src/chregistry.c ****  * @retval NULL         if a matching thread has not been found.
 218:lib/chibios/os/rt/src/chregistry.c ****  *
 219:lib/chibios/os/rt/src/chregistry.c ****  * @api
 220:lib/chibios/os/rt/src/chregistry.c ****  */
 221:lib/chibios/os/rt/src/chregistry.c **** thread_t *chRegFindThreadByPointer(thread_t *tp) {
 235              		.loc 1 221 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 0
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              	.LVL20:
 240 0000 10B5     		push	{r4, lr}
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 4, -8
 243              		.cfi_offset 14, -4
 244              		.loc 1 221 0
 245 0002 0446     		mov	r4, r0
 222:lib/chibios/os/rt/src/chregistry.c ****   thread_t *ctp;
 223:lib/chibios/os/rt/src/chregistry.c **** 
 224:lib/chibios/os/rt/src/chregistry.c ****   /* Scanning registry.*/
 225:lib/chibios/os/rt/src/chregistry.c ****   ctp = chRegFirstThread();
 246              		.loc 1 225 0
 247 0004 FFF7FEFF 		bl	chRegFirstThread
 248              	.LVL21:
 249              	.L18:
 226:lib/chibios/os/rt/src/chregistry.c ****   do {
 227:lib/chibios/os/rt/src/chregistry.c ****     if (ctp == tp) {
 250              		.loc 1 227 0
 251 0008 A042     		cmp	r0, r4
 252 000a 03D0     		beq	.L16
 228:lib/chibios/os/rt/src/chregistry.c ****       return ctp;
 229:lib/chibios/os/rt/src/chregistry.c ****     }
 230:lib/chibios/os/rt/src/chregistry.c ****     ctp = chRegNextThread(ctp);
 253              		.loc 1 230 0
 254 000c FFF7FEFF 		bl	chRegNextThread
 255              	.LVL22:
 231:lib/chibios/os/rt/src/chregistry.c ****   } while (ctp != NULL);
 256              		.loc 1 231 0
 257 0010 0028     		cmp	r0, #0
 258 0012 F9D1     		bne	.L18
 259              	.L16:
 232:lib/chibios/os/rt/src/chregistry.c **** 
 233:lib/chibios/os/rt/src/chregistry.c ****   return NULL;
 234:lib/chibios/os/rt/src/chregistry.c **** }
 260              		.loc 1 234 0
 261 0014 10BD     		pop	{r4, pc}
 262              		.cfi_endproc
 263              	.LFE251:
 265              		.section	.text.chRegFindThreadByWorkingArea,"ax",%progbits
 266              		.align	1
 267              		.global	chRegFindThreadByWorkingArea
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 271              		.fpu softvfp
 273              	chRegFindThreadByWorkingArea:
 274              	.LFB252:
 235:lib/chibios/os/rt/src/chregistry.c **** 
 236:lib/chibios/os/rt/src/chregistry.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 237:lib/chibios/os/rt/src/chregistry.c ****     defined(__DOXYGEN__)
 238:lib/chibios/os/rt/src/chregistry.c **** /**
 239:lib/chibios/os/rt/src/chregistry.c ****  * @brief   Confirms that a working area is being used by some active thread.
 240:lib/chibios/os/rt/src/chregistry.c ****  * @note    The reference counter of the found thread is increased by one so
 241:lib/chibios/os/rt/src/chregistry.c ****  *          it cannot be disposed incidentally after the pointer has been
 242:lib/chibios/os/rt/src/chregistry.c ****  *          returned.
 243:lib/chibios/os/rt/src/chregistry.c ****  *
 244:lib/chibios/os/rt/src/chregistry.c ****  * @param[in] wa        pointer to a static working area
 245:lib/chibios/os/rt/src/chregistry.c ****  * @return              A pointer to the found thread.
 246:lib/chibios/os/rt/src/chregistry.c ****  * @retval NULL         if a matching thread has not been found.
 247:lib/chibios/os/rt/src/chregistry.c ****  *
 248:lib/chibios/os/rt/src/chregistry.c ****  * @api
 249:lib/chibios/os/rt/src/chregistry.c ****  */
 250:lib/chibios/os/rt/src/chregistry.c **** thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa) {
 275              		.loc 1 250 0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              	.LVL23:
 280 0000 10B5     		push	{r4, lr}
 281              		.cfi_def_cfa_offset 8
 282              		.cfi_offset 4, -8
 283              		.cfi_offset 14, -4
 284              		.loc 1 250 0
 285 0002 0446     		mov	r4, r0
 251:lib/chibios/os/rt/src/chregistry.c ****   thread_t *ctp;
 252:lib/chibios/os/rt/src/chregistry.c **** 
 253:lib/chibios/os/rt/src/chregistry.c ****   /* Scanning registry.*/
 254:lib/chibios/os/rt/src/chregistry.c ****   ctp = chRegFirstThread();
 286              		.loc 1 254 0
 287 0004 FFF7FEFF 		bl	chRegFirstThread
 288              	.LVL24:
 289              	.L23:
 255:lib/chibios/os/rt/src/chregistry.c ****   do {
 256:lib/chibios/os/rt/src/chregistry.c ****     if (chThdGetWorkingAreaX(ctp) == wa) {
 290              		.loc 1 256 0
 291 0008 C369     		ldr	r3, [r0, #28]
 292 000a 9C42     		cmp	r4, r3
 293 000c 03D0     		beq	.L21
 257:lib/chibios/os/rt/src/chregistry.c ****       return ctp;
 258:lib/chibios/os/rt/src/chregistry.c ****     }
 259:lib/chibios/os/rt/src/chregistry.c ****     ctp = chRegNextThread(ctp);
 294              		.loc 1 259 0
 295 000e FFF7FEFF 		bl	chRegNextThread
 296              	.LVL25:
 260:lib/chibios/os/rt/src/chregistry.c ****   } while (ctp != NULL);
 297              		.loc 1 260 0
 298 0012 0028     		cmp	r0, #0
 299 0014 F8D1     		bne	.L23
 300              	.L21:
 261:lib/chibios/os/rt/src/chregistry.c **** 
 262:lib/chibios/os/rt/src/chregistry.c ****   return NULL;
 263:lib/chibios/os/rt/src/chregistry.c **** }
 301              		.loc 1 263 0
 302 0016 10BD     		pop	{r4, pc}
 303              		.cfi_endproc
 304              	.LFE252:
 306              		.global	ch_debug
 307              		.section	.rodata.ch_debug,"a",%progbits
 308              		.align	1
 311              	ch_debug:
 312 0000 6D       		.byte	109
 313 0001 61       		.byte	97
 314 0002 69       		.byte	105
 315 0003 6E       		.byte	110
 316 0004 00       		.byte	0
 317 0005 16       		.byte	22
 318 0006 0320     		.short	8195
 319 0008 04       		.byte	4
 320 0009 04       		.byte	4
 321 000a 44       		.byte	68
 322 000b 08       		.byte	8
 323 000c 0C       		.byte	12
 324 000d 10       		.byte	16
 325 000e 14       		.byte	20
 326 000f 18       		.byte	24
 327 0010 1C       		.byte	28
 328 0011 20       		.byte	32
 329 0012 21       		.byte	33
 330 0013 22       		.byte	34
 331 0014 00       		.byte	0
 332 0015 00       		.byte	0
 333              		.text
 334              	.Letext0:
 335              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 336              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 337              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 338              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 339              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 340              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 341              		.file 9 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 342              		.file 10 "./lib/chibios/os/rt/include/chsystypes.h"
 343              		.file 11 "./lib/chibios/os/rt/include/chschd.h"
 344              		.file 12 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 345              		.file 13 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 346              		.file 14 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 347              		.file 15 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 348              		.file 16 "./lib/chibios/os/rt/include/chtm.h"
 349              		.file 17 "./lib/chibios/os/rt/include/chsem.h"
 350              		.file 18 "./lib/chibios/os/rt/include/chmtx.h"
 351              		.file 19 "./lib/chibios/os/rt/include/chsys.h"
 352              		.file 20 "./lib/chibios/os/rt/include/chregistry.h"
 353              		.file 21 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 354              		.file 22 "./lib/chibios/os/rt/include/chthreads.h"
 355              		.file 23 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/string.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chregistry.c
/var/tmp//ccwp4v78.s:16     .text.chRegFirstThread:0000000000000000 $t
/var/tmp//ccwp4v78.s:23     .text.chRegFirstThread:0000000000000000 chRegFirstThread
/var/tmp//ccwp4v78.s:83     .text.chRegFirstThread:000000000000001c $d
/var/tmp//ccwp4v78.s:88     .text.chRegNextThread:0000000000000000 $t
/var/tmp//ccwp4v78.s:95     .text.chRegNextThread:0000000000000000 chRegNextThread
/var/tmp//ccwp4v78.s:168    .text.chRegNextThread:0000000000000030 $d
/var/tmp//ccwp4v78.s:173    .text.chRegFindThreadByName:0000000000000000 $t
/var/tmp//ccwp4v78.s:180    .text.chRegFindThreadByName:0000000000000000 chRegFindThreadByName
/var/tmp//ccwp4v78.s:226    .text.chRegFindThreadByPointer:0000000000000000 $t
/var/tmp//ccwp4v78.s:233    .text.chRegFindThreadByPointer:0000000000000000 chRegFindThreadByPointer
/var/tmp//ccwp4v78.s:266    .text.chRegFindThreadByWorkingArea:0000000000000000 $t
/var/tmp//ccwp4v78.s:273    .text.chRegFindThreadByWorkingArea:0000000000000000 chRegFindThreadByWorkingArea
/var/tmp//ccwp4v78.s:311    .rodata.ch_debug:0000000000000000 ch_debug
/var/tmp//ccwp4v78.s:308    .rodata.ch_debug:0000000000000000 $d

UNDEFINED SYMBOLS
ch
chThdRelease
strcmp
