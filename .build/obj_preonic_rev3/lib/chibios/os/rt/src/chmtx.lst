   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"chmtx.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.queue_prio_insert,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	queue_prio_insert:
  23              	.LFB155:
  24              		.file 1 "./lib/chibios/os/rt/include/chschd.h"
   1:./lib/chibios/os/rt/include/chschd.h **** /*
   2:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chschd.h **** 
   4:./lib/chibios/os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chschd.h **** 
   6:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chschd.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chschd.h **** 
  11:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chschd.h **** 
  16:./lib/chibios/os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chschd.h **** */
  19:./lib/chibios/os/rt/include/chschd.h **** 
  20:./lib/chibios/os/rt/include/chschd.h **** /**
  21:./lib/chibios/os/rt/include/chschd.h ****  * @file    chschd.h
  22:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:./lib/chibios/os/rt/include/chschd.h ****  *
  24:./lib/chibios/os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:./lib/chibios/os/rt/include/chschd.h ****  * @{
  26:./lib/chibios/os/rt/include/chschd.h ****  */
  27:./lib/chibios/os/rt/include/chschd.h **** 
  28:./lib/chibios/os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:./lib/chibios/os/rt/include/chschd.h **** #define CHSCHD_H
  30:./lib/chibios/os/rt/include/chschd.h **** 
  31:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chschd.h **** 
  35:./lib/chibios/os/rt/include/chschd.h **** /**
  36:./lib/chibios/os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:./lib/chibios/os/rt/include/chschd.h ****  * @{
  38:./lib/chibios/os/rt/include/chschd.h ****  */
  39:./lib/chibios/os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:./lib/chibios/os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  42:./lib/chibios/os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  44:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  45:./lib/chibios/os/rt/include/chschd.h **** 
  46:./lib/chibios/os/rt/include/chschd.h **** /**
  47:./lib/chibios/os/rt/include/chschd.h ****  * @name    Priority constants
  48:./lib/chibios/os/rt/include/chschd.h ****  * @{
  49:./lib/chibios/os/rt/include/chschd.h ****  */
  50:./lib/chibios/os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:./lib/chibios/os/rt/include/chschd.h ****                                                  priority.                  */
  52:./lib/chibios/os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:./lib/chibios/os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:./lib/chibios/os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:./lib/chibios/os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  57:./lib/chibios/os/rt/include/chschd.h **** 
  58:./lib/chibios/os/rt/include/chschd.h **** /**
  59:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread states
  60:./lib/chibios/os/rt/include/chschd.h ****  * @{
  61:./lib/chibios/os/rt/include/chschd.h ****  */
  62:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:./lib/chibios/os/rt/include/chschd.h ****                                                   ready list.               */
  64:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:./lib/chibios/os/rt/include/chschd.h ****                                                   in queue.                 */
  77:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:./lib/chibios/os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:./lib/chibios/os/rt/include/chschd.h ****                                                   message.                  */
  81:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:./lib/chibios/os/rt/include/chschd.h **** 
  83:./lib/chibios/os/rt/include/chschd.h **** /**
  84:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:./lib/chibios/os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:./lib/chibios/os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:./lib/chibios/os/rt/include/chschd.h ****  */
  88:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:./lib/chibios/os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:./lib/chibios/os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:./lib/chibios/os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  93:./lib/chibios/os/rt/include/chschd.h **** 
  94:./lib/chibios/os/rt/include/chschd.h **** /**
  95:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:./lib/chibios/os/rt/include/chschd.h ****  * @{
  97:./lib/chibios/os/rt/include/chschd.h ****  */
  98:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:./lib/chibios/os/rt/include/chschd.h ****                                                  mask.                      */
 100:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:./lib/chibios/os/rt/include/chschd.h ****                                                  flag.                      */
 107:./lib/chibios/os/rt/include/chschd.h **** /** @} */
 108:./lib/chibios/os/rt/include/chschd.h **** 
 109:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 110:./lib/chibios/os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 112:./lib/chibios/os/rt/include/chschd.h **** 
 113:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 114:./lib/chibios/os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 116:./lib/chibios/os/rt/include/chschd.h **** 
 117:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_ENTER_HOOK)
 118:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_ENTER_HOOK not defined in chconf.h"
 119:./lib/chibios/os/rt/include/chschd.h **** #endif
 120:./lib/chibios/os/rt/include/chschd.h **** 
 121:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LEAVE_HOOK)
 122:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LEAVE_HOOK not defined in chconf.h"
 123:./lib/chibios/os/rt/include/chschd.h **** #endif
 124:./lib/chibios/os/rt/include/chschd.h **** 
 125:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LOOP_HOOK)
 126:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LOOP_HOOK not defined in chconf.h"
 127:./lib/chibios/os/rt/include/chschd.h **** #endif
 128:./lib/chibios/os/rt/include/chschd.h **** 
 129:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 130:./lib/chibios/os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 131:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 132:./lib/chibios/os/rt/include/chschd.h **** 
 133:./lib/chibios/os/rt/include/chschd.h **** /**
 134:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 135:./lib/chibios/os/rt/include/chschd.h ****  */
 136:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_list {
 137:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 138:./lib/chibios/os/rt/include/chschd.h **** };
 139:./lib/chibios/os/rt/include/chschd.h **** 
 140:./lib/chibios/os/rt/include/chschd.h **** /**
 141:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 142:./lib/chibios/os/rt/include/chschd.h ****  */
 143:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_queue {
 144:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 145:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 146:./lib/chibios/os/rt/include/chschd.h **** };
 147:./lib/chibios/os/rt/include/chschd.h **** 
 148:./lib/chibios/os/rt/include/chschd.h **** /**
 149:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 150:./lib/chibios/os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 151:./lib/chibios/os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 152:./lib/chibios/os/rt/include/chschd.h ****  *          by shrinking this structure.
 153:./lib/chibios/os/rt/include/chschd.h ****  */
 154:./lib/chibios/os/rt/include/chschd.h **** struct ch_thread {
 155:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 156:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 157:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 158:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 159:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 160:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 161:./lib/chibios/os/rt/include/chschd.h **** #endif
 162:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 163:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 164:./lib/chibios/os/rt/include/chschd.h ****   /**
 165:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 166:./lib/chibios/os/rt/include/chschd.h ****    */
 167:./lib/chibios/os/rt/include/chschd.h ****   const char            *name;
 168:./lib/chibios/os/rt/include/chschd.h **** #endif
 169:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 170:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 171:./lib/chibios/os/rt/include/chschd.h ****   /**
 172:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Working area base address.
 173:./lib/chibios/os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 174:./lib/chibios/os/rt/include/chschd.h ****    *          dynamic threading.
 175:./lib/chibios/os/rt/include/chschd.h ****    */
 176:./lib/chibios/os/rt/include/chschd.h ****   stkalign_t            *wabase;
 177:./lib/chibios/os/rt/include/chschd.h **** #endif
 178:./lib/chibios/os/rt/include/chschd.h ****   /**
 179:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Current thread state.
 180:./lib/chibios/os/rt/include/chschd.h ****    */
 181:./lib/chibios/os/rt/include/chschd.h ****   tstate_t              state;
 182:./lib/chibios/os/rt/include/chschd.h ****   /**
 183:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Various thread flags.
 184:./lib/chibios/os/rt/include/chschd.h ****    */
 185:./lib/chibios/os/rt/include/chschd.h ****   tmode_t               flags;
 186:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 187:./lib/chibios/os/rt/include/chschd.h ****   /**
 188:./lib/chibios/os/rt/include/chschd.h ****    * @brief   References to this thread.
 189:./lib/chibios/os/rt/include/chschd.h ****    */
 190:./lib/chibios/os/rt/include/chschd.h ****   trefs_t               refs;
 191:./lib/chibios/os/rt/include/chschd.h **** #endif
 192:./lib/chibios/os/rt/include/chschd.h ****   /**
 193:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 194:./lib/chibios/os/rt/include/chschd.h ****    */
 195:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 196:./lib/chibios/os/rt/include/chschd.h ****   tslices_t             preempt;
 197:./lib/chibios/os/rt/include/chschd.h **** #endif
 198:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 199:./lib/chibios/os/rt/include/chschd.h ****   /**
 200:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 201:./lib/chibios/os/rt/include/chschd.h ****    * @note    This field can overflow.
 202:./lib/chibios/os/rt/include/chschd.h ****    */
 203:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    time;
 204:./lib/chibios/os/rt/include/chschd.h **** #endif
 205:./lib/chibios/os/rt/include/chschd.h ****   /**
 206:./lib/chibios/os/rt/include/chschd.h ****    * @brief   State-specific fields.
 207:./lib/chibios/os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 208:./lib/chibios/os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 209:./lib/chibios/os/rt/include/chschd.h ****    */
 210:./lib/chibios/os/rt/include/chschd.h ****   union {
 211:./lib/chibios/os/rt/include/chschd.h ****     /**
 212:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 213:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 214:./lib/chibios/os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 215:./lib/chibios/os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 216:./lib/chibios/os/rt/include/chschd.h ****      */
 217:./lib/chibios/os/rt/include/chschd.h ****     msg_t               rdymsg;
 218:./lib/chibios/os/rt/include/chschd.h ****     /**
 219:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread exit code.
 220:./lib/chibios/os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 221:./lib/chibios/os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 222:./lib/chibios/os/rt/include/chschd.h ****      *          this thread.
 223:./lib/chibios/os/rt/include/chschd.h ****      */
 224:./lib/chibios/os/rt/include/chschd.h ****     msg_t               exitcode;
 225:./lib/chibios/os/rt/include/chschd.h ****     /**
 226:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 227:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 228:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 229:./lib/chibios/os/rt/include/chschd.h ****      *          states.
 230:./lib/chibios/os/rt/include/chschd.h ****      */
 231:./lib/chibios/os/rt/include/chschd.h ****     void                *wtobjp;
 232:./lib/chibios/os/rt/include/chschd.h ****     /**
 233:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 234:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 235:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 236:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 237:./lib/chibios/os/rt/include/chschd.h ****      */
 238:./lib/chibios/os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 239:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 240:./lib/chibios/os/rt/include/chschd.h ****     /**
 241:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread sent message.
 242:./lib/chibios/os/rt/include/chschd.h ****      */
 243:./lib/chibios/os/rt/include/chschd.h ****     msg_t               sentmsg;
 244:./lib/chibios/os/rt/include/chschd.h **** #endif
 245:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 246:./lib/chibios/os/rt/include/chschd.h ****     /**
 247:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 248:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 249:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 250:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 251:./lib/chibios/os/rt/include/chschd.h ****      */
 252:./lib/chibios/os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 253:./lib/chibios/os/rt/include/chschd.h **** #endif
 254:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 255:./lib/chibios/os/rt/include/chschd.h ****     /**
 256:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 257:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 258:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 259:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 260:./lib/chibios/os/rt/include/chschd.h ****      */
 261:./lib/chibios/os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 262:./lib/chibios/os/rt/include/chschd.h **** #endif
 263:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 264:./lib/chibios/os/rt/include/chschd.h ****     /**
 265:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 266:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 267:./lib/chibios/os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 268:./lib/chibios/os/rt/include/chschd.h ****      */
 269:./lib/chibios/os/rt/include/chschd.h ****     eventmask_t         ewmask;
 270:./lib/chibios/os/rt/include/chschd.h **** #endif
 271:./lib/chibios/os/rt/include/chschd.h ****   }                     u;
 272:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 273:./lib/chibios/os/rt/include/chschd.h ****   /**
 274:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 275:./lib/chibios/os/rt/include/chschd.h ****    */
 276:./lib/chibios/os/rt/include/chschd.h ****   threads_list_t        waiting;
 277:./lib/chibios/os/rt/include/chschd.h **** #endif
 278:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chschd.h ****   /**
 280:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Messages queue.
 281:./lib/chibios/os/rt/include/chschd.h ****    */
 282:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 283:./lib/chibios/os/rt/include/chschd.h **** #endif
 284:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 285:./lib/chibios/os/rt/include/chschd.h ****   /**
 286:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pending events mask.
 287:./lib/chibios/os/rt/include/chschd.h ****    */
 288:./lib/chibios/os/rt/include/chschd.h ****   eventmask_t           epending;
 289:./lib/chibios/os/rt/include/chschd.h **** #endif
 290:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 291:./lib/chibios/os/rt/include/chschd.h ****   /**
 292:./lib/chibios/os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 293:./lib/chibios/os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 294:./lib/chibios/os/rt/include/chschd.h ****    */
 295:./lib/chibios/os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 296:./lib/chibios/os/rt/include/chschd.h ****   /**
 297:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 298:./lib/chibios/os/rt/include/chschd.h ****    */
 299:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               realprio;
 300:./lib/chibios/os/rt/include/chschd.h **** #endif
 301:./lib/chibios/os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 302:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 303:./lib/chibios/os/rt/include/chschd.h ****   /**
 304:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 305:./lib/chibios/os/rt/include/chschd.h ****    */
 306:./lib/chibios/os/rt/include/chschd.h ****   void                  *mpool;
 307:./lib/chibios/os/rt/include/chschd.h **** #endif
 308:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 309:./lib/chibios/os/rt/include/chschd.h ****   /**
 310:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread statistics.
 311:./lib/chibios/os/rt/include/chschd.h ****    */
 312:./lib/chibios/os/rt/include/chschd.h ****   time_measurement_t    stats;
 313:./lib/chibios/os/rt/include/chschd.h **** #endif
 314:./lib/chibios/os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 315:./lib/chibios/os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 316:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 317:./lib/chibios/os/rt/include/chschd.h **** #endif
 318:./lib/chibios/os/rt/include/chschd.h **** };
 319:./lib/chibios/os/rt/include/chschd.h **** 
 320:./lib/chibios/os/rt/include/chschd.h **** /**
 321:./lib/chibios/os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 322:./lib/chibios/os/rt/include/chschd.h ****  *
 323:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 324:./lib/chibios/os/rt/include/chschd.h ****  */
 325:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timer {
 326:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 327:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 328:./lib/chibios/os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Time delta before timeout.  */
 329:./lib/chibios/os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 330:./lib/chibios/os/rt/include/chschd.h ****                                                 pointer.                    */
 331:./lib/chibios/os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 332:./lib/chibios/os/rt/include/chschd.h ****                                                 parameter.                  */
 333:./lib/chibios/os/rt/include/chschd.h **** };
 334:./lib/chibios/os/rt/include/chschd.h **** 
 335:./lib/chibios/os/rt/include/chschd.h **** /**
 336:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 337:./lib/chibios/os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 338:./lib/chibios/os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 339:./lib/chibios/os/rt/include/chschd.h ****  *          timer is often used in the code.
 340:./lib/chibios/os/rt/include/chschd.h ****  */
 341:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 342:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 343:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 344:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 345:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 346:./lib/chibios/os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Must be initialized to -1.  */
 347:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 348:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 349:./lib/chibios/os/rt/include/chschd.h **** #endif
 350:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 351:./lib/chibios/os/rt/include/chschd.h ****   /**
 352:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 353:./lib/chibios/os/rt/include/chschd.h ****    */
 354:./lib/chibios/os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 355:./lib/chibios/os/rt/include/chschd.h ****                                                 tick event.                 */
 356:./lib/chibios/os/rt/include/chschd.h **** #endif
 357:./lib/chibios/os/rt/include/chschd.h **** };
 358:./lib/chibios/os/rt/include/chschd.h **** 
 359:./lib/chibios/os/rt/include/chschd.h **** /**
 360:./lib/chibios/os/rt/include/chschd.h ****  * @extends threads_queue_t
 361:./lib/chibios/os/rt/include/chschd.h ****  */
 362:./lib/chibios/os/rt/include/chschd.h **** struct ch_ready_list {
 363:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 364:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 365:./lib/chibios/os/rt/include/chschd.h ****                                                 initialized to zero.        */
 366:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 367:./lib/chibios/os/rt/include/chschd.h ****                                                 offsets.                    */
 368:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 369:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 370:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 371:./lib/chibios/os/rt/include/chschd.h **** #endif
 372:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 373:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 374:./lib/chibios/os/rt/include/chschd.h ****                                                 thread.                     */
 375:./lib/chibios/os/rt/include/chschd.h **** };
 376:./lib/chibios/os/rt/include/chschd.h **** 
 377:./lib/chibios/os/rt/include/chschd.h **** /**
 378:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System debug data structure.
 379:./lib/chibios/os/rt/include/chschd.h ****  */
 380:./lib/chibios/os/rt/include/chschd.h **** struct ch_system_debug {
 381:./lib/chibios/os/rt/include/chschd.h ****   /**
 382:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 383:./lib/chibios/os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 384:./lib/chibios/os/rt/include/chschd.h ****    *          written once and then the system is halted.
 385:./lib/chibios/os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 386:./lib/chibios/os/rt/include/chschd.h ****    *          field itself is declared volatile.
 387:./lib/chibios/os/rt/include/chschd.h ****    */
 388:./lib/chibios/os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 389:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 390:./lib/chibios/os/rt/include/chschd.h ****   /**
 391:./lib/chibios/os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 392:./lib/chibios/os/rt/include/chschd.h ****    */
 393:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 394:./lib/chibios/os/rt/include/chschd.h ****   /**
 395:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 396:./lib/chibios/os/rt/include/chschd.h ****    */
 397:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 398:./lib/chibios/os/rt/include/chschd.h **** #endif
 399:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 400:./lib/chibios/os/rt/include/chschd.h ****   /**
 401:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 402:./lib/chibios/os/rt/include/chschd.h ****    */
 403:./lib/chibios/os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 404:./lib/chibios/os/rt/include/chschd.h **** #endif
 405:./lib/chibios/os/rt/include/chschd.h **** };
 406:./lib/chibios/os/rt/include/chschd.h **** 
 407:./lib/chibios/os/rt/include/chschd.h **** /**
 408:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System data structure.
 409:./lib/chibios/os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 410:./lib/chibios/os/rt/include/chschd.h ****  *          stacks.
 411:./lib/chibios/os/rt/include/chschd.h ****  */
 412:./lib/chibios/os/rt/include/chschd.h **** struct ch_system {
 413:./lib/chibios/os/rt/include/chschd.h ****   /**
 414:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Ready list header.
 415:./lib/chibios/os/rt/include/chschd.h ****    */
 416:./lib/chibios/os/rt/include/chschd.h ****   ready_list_t          rlist;
 417:./lib/chibios/os/rt/include/chschd.h ****   /**
 418:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 419:./lib/chibios/os/rt/include/chschd.h ****    */
 420:./lib/chibios/os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 421:./lib/chibios/os/rt/include/chschd.h ****   /**
 422:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System debug.
 423:./lib/chibios/os/rt/include/chschd.h ****    */
 424:./lib/chibios/os/rt/include/chschd.h ****   system_debug_t        dbg;
 425:./lib/chibios/os/rt/include/chschd.h ****   /**
 426:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 427:./lib/chibios/os/rt/include/chschd.h ****    */
 428:./lib/chibios/os/rt/include/chschd.h ****   thread_t              mainthread;
 429:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 430:./lib/chibios/os/rt/include/chschd.h ****   /**
 431:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 432:./lib/chibios/os/rt/include/chschd.h ****    */
 433:./lib/chibios/os/rt/include/chschd.h ****   tm_calibration_t      tm;
 434:./lib/chibios/os/rt/include/chschd.h **** #endif
 435:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 436:./lib/chibios/os/rt/include/chschd.h ****   /**
 437:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 438:./lib/chibios/os/rt/include/chschd.h ****    */
 439:./lib/chibios/os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 440:./lib/chibios/os/rt/include/chschd.h **** #endif
 441:./lib/chibios/os/rt/include/chschd.h **** };
 442:./lib/chibios/os/rt/include/chschd.h **** 
 443:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 444:./lib/chibios/os/rt/include/chschd.h **** /* Module macros.                                                            */
 445:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 446:./lib/chibios/os/rt/include/chschd.h **** 
 447:./lib/chibios/os/rt/include/chschd.h **** /**
 448:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 449:./lib/chibios/os/rt/include/chschd.h ****  *
 450:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 451:./lib/chibios/os/rt/include/chschd.h ****  */
 452:./lib/chibios/os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 453:./lib/chibios/os/rt/include/chschd.h **** 
 454:./lib/chibios/os/rt/include/chschd.h **** /**
 455:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 456:./lib/chibios/os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 457:./lib/chibios/os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 458:./lib/chibios/os/rt/include/chschd.h ****  */
 459:./lib/chibios/os/rt/include/chschd.h **** #define currp ch.rlist.current
 460:./lib/chibios/os/rt/include/chschd.h **** 
 461:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 462:./lib/chibios/os/rt/include/chschd.h **** /* External declarations.                                                    */
 463:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 464:./lib/chibios/os/rt/include/chschd.h **** 
 465:./lib/chibios/os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 466:./lib/chibios/os/rt/include/chschd.h **** extern ch_system_t ch;
 467:./lib/chibios/os/rt/include/chschd.h **** #endif
 468:./lib/chibios/os/rt/include/chschd.h **** 
 469:./lib/chibios/os/rt/include/chschd.h **** /*
 470:./lib/chibios/os/rt/include/chschd.h ****  * Scheduler APIs.
 471:./lib/chibios/os/rt/include/chschd.h ****  */
 472:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 473:./lib/chibios/os/rt/include/chschd.h **** extern "C" {
 474:./lib/chibios/os/rt/include/chschd.h **** #endif
 475:./lib/chibios/os/rt/include/chschd.h ****   void _scheduler_init(void);
 476:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 477:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 478:./lib/chibios/os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 479:./lib/chibios/os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time);
 480:./lib/chibios/os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 481:./lib/chibios/os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 482:./lib/chibios/os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 483:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 484:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 485:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 486:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 487:./lib/chibios/os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 488:./lib/chibios/os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 489:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 490:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 491:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 492:./lib/chibios/os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 493:./lib/chibios/os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 494:./lib/chibios/os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 495:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 496:./lib/chibios/os/rt/include/chschd.h **** }
 497:./lib/chibios/os/rt/include/chschd.h **** #endif
 498:./lib/chibios/os/rt/include/chschd.h **** 
 499:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 500:./lib/chibios/os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 501:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 502:./lib/chibios/os/rt/include/chschd.h **** 
 503:./lib/chibios/os/rt/include/chschd.h **** /**
 504:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 505:./lib/chibios/os/rt/include/chschd.h ****  *
 506:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 507:./lib/chibios/os/rt/include/chschd.h ****  *
 508:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 509:./lib/chibios/os/rt/include/chschd.h ****  */
 510:./lib/chibios/os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 511:./lib/chibios/os/rt/include/chschd.h **** 
 512:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 513:./lib/chibios/os/rt/include/chschd.h **** }
 514:./lib/chibios/os/rt/include/chschd.h **** 
 515:./lib/chibios/os/rt/include/chschd.h **** /**
 516:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 517:./lib/chibios/os/rt/include/chschd.h ****  *
 518:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 519:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 520:./lib/chibios/os/rt/include/chschd.h ****  *
 521:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 522:./lib/chibios/os/rt/include/chschd.h ****  */
 523:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 524:./lib/chibios/os/rt/include/chschd.h **** 
 525:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 526:./lib/chibios/os/rt/include/chschd.h **** }
 527:./lib/chibios/os/rt/include/chschd.h **** 
 528:./lib/chibios/os/rt/include/chschd.h **** /**
 529:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 530:./lib/chibios/os/rt/include/chschd.h ****  *
 531:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 532:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 533:./lib/chibios/os/rt/include/chschd.h ****  *
 534:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 535:./lib/chibios/os/rt/include/chschd.h ****  */
 536:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 537:./lib/chibios/os/rt/include/chschd.h **** 
 538:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 539:./lib/chibios/os/rt/include/chschd.h **** }
 540:./lib/chibios/os/rt/include/chschd.h **** 
 541:./lib/chibios/os/rt/include/chschd.h **** /**
 542:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 543:./lib/chibios/os/rt/include/chschd.h ****  *
 544:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 545:./lib/chibios/os/rt/include/chschd.h ****  *
 546:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 547:./lib/chibios/os/rt/include/chschd.h ****  */
 548:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 549:./lib/chibios/os/rt/include/chschd.h **** 
 550:./lib/chibios/os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
 551:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
 552:./lib/chibios/os/rt/include/chschd.h **** }
 553:./lib/chibios/os/rt/include/chschd.h **** 
 554:./lib/chibios/os/rt/include/chschd.h **** /**
 555:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is empty.
 556:./lib/chibios/os/rt/include/chschd.h ****  *
 557:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 558:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the queue.
 559:./lib/chibios/os/rt/include/chschd.h ****  *
 560:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 561:./lib/chibios/os/rt/include/chschd.h ****  */
 562:./lib/chibios/os/rt/include/chschd.h **** static inline bool queue_isempty(const threads_queue_t *tqp) {
 563:./lib/chibios/os/rt/include/chschd.h **** 
 564:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tqp->next == (const thread_t *)tqp);
 565:./lib/chibios/os/rt/include/chschd.h **** }
 566:./lib/chibios/os/rt/include/chschd.h **** 
 567:./lib/chibios/os/rt/include/chschd.h **** /**
 568:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is not empty.
 569:./lib/chibios/os/rt/include/chschd.h ****  *
 570:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 571:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the queue.
 572:./lib/chibios/os/rt/include/chschd.h ****  *
 573:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 574:./lib/chibios/os/rt/include/chschd.h ****  */
 575:./lib/chibios/os/rt/include/chschd.h **** static inline bool queue_notempty(const threads_queue_t *tqp) {
 576:./lib/chibios/os/rt/include/chschd.h **** 
 577:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tqp->next != (const thread_t *)tqp);
 578:./lib/chibios/os/rt/include/chschd.h **** }
 579:./lib/chibios/os/rt/include/chschd.h **** 
 580:./lib/chibios/os/rt/include/chschd.h **** /* If the performance code path has been chosen then all the following
 581:./lib/chibios/os/rt/include/chschd.h ****    functions are inlined into the various kernel modules.*/
 582:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == TRUE
 583:./lib/chibios/os/rt/include/chschd.h **** static inline void list_insert(thread_t *tp, threads_list_t *tlp) {
 584:./lib/chibios/os/rt/include/chschd.h **** 
 585:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next = tlp->next;
 586:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = tp;
 587:./lib/chibios/os/rt/include/chschd.h **** }
 588:./lib/chibios/os/rt/include/chschd.h **** 
 589:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *list_remove(threads_list_t *tlp) {
 590:./lib/chibios/os/rt/include/chschd.h **** 
 591:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tlp->next;
 592:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = tp->queue.next;
 593:./lib/chibios/os/rt/include/chschd.h **** 
 594:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 595:./lib/chibios/os/rt/include/chschd.h **** }
 596:./lib/chibios/os/rt/include/chschd.h **** 
 597:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
  25              		.loc 1 597 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 10B5     		push	{r4, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 4, -8
  33              		.cfi_offset 14, -4
  34              		.loc 1 597 0
  35 0002 0B46     		mov	r3, r1
  36              	.LVL1:
  37              	.L3:
 598:./lib/chibios/os/rt/include/chschd.h **** 
 599:./lib/chibios/os/rt/include/chschd.h ****   thread_t *cp = (thread_t *)tqp;
 600:./lib/chibios/os/rt/include/chschd.h ****   do {
 601:./lib/chibios/os/rt/include/chschd.h ****     cp = cp->queue.next;
  38              		.loc 1 601 0 discriminator 2
  39 0004 1B68     		ldr	r3, [r3]
  40              	.LVL2:
 602:./lib/chibios/os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  41              		.loc 1 602 0 discriminator 2
  42 0006 9942     		cmp	r1, r3
  43 0008 03D0     		beq	.L2
  44              		.loc 1 602 0 is_stmt 0 discriminator 1
  45 000a 9C68     		ldr	r4, [r3, #8]
  46 000c 8268     		ldr	r2, [r0, #8]
  47 000e 9442     		cmp	r4, r2
  48 0010 F8D2     		bcs	.L3
  49              	.L2:
 603:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next             = cp;
 604:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
  50              		.loc 1 604 0 is_stmt 1
  51 0012 5A68     		ldr	r2, [r3, #4]
 603:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next             = cp;
  52              		.loc 1 603 0
  53 0014 0360     		str	r3, [r0]
  54              		.loc 1 604 0
  55 0016 4260     		str	r2, [r0, #4]
 605:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
  56              		.loc 1 605 0
  57 0018 1060     		str	r0, [r2]
 606:./lib/chibios/os/rt/include/chschd.h ****   cp->queue.prev             = tp;
  58              		.loc 1 606 0
  59 001a 5860     		str	r0, [r3, #4]
 607:./lib/chibios/os/rt/include/chschd.h **** }
  60              		.loc 1 607 0
  61 001c 10BD     		pop	{r4, pc}
  62              		.cfi_endproc
  63              	.LFE155:
  65              		.section	.text.chMtxObjectInit,"ax",%progbits
  66              		.align	1
  67              		.global	chMtxObjectInit
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu softvfp
  73              	chMtxObjectInit:
  74              	.LFB248:
  75              		.file 2 "lib/chibios/os/rt/src/chmtx.c"
   1:lib/chibios/os/rt/src/chmtx.c **** /*
   2:lib/chibios/os/rt/src/chmtx.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:lib/chibios/os/rt/src/chmtx.c **** 
   4:lib/chibios/os/rt/src/chmtx.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/rt/src/chmtx.c **** 
   6:lib/chibios/os/rt/src/chmtx.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/rt/src/chmtx.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/rt/src/chmtx.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/rt/src/chmtx.c ****     (at your option) any later version.
  10:lib/chibios/os/rt/src/chmtx.c **** 
  11:lib/chibios/os/rt/src/chmtx.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/rt/src/chmtx.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/rt/src/chmtx.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/rt/src/chmtx.c ****     GNU General Public License for more details.
  15:lib/chibios/os/rt/src/chmtx.c **** 
  16:lib/chibios/os/rt/src/chmtx.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/rt/src/chmtx.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/rt/src/chmtx.c **** */
  19:lib/chibios/os/rt/src/chmtx.c **** 
  20:lib/chibios/os/rt/src/chmtx.c **** /**
  21:lib/chibios/os/rt/src/chmtx.c ****  * @file    chmtx.c
  22:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Mutexes code.
  23:lib/chibios/os/rt/src/chmtx.c ****  *
  24:lib/chibios/os/rt/src/chmtx.c ****  * @addtogroup mutexes
  25:lib/chibios/os/rt/src/chmtx.c ****  * @details Mutexes related APIs and services.
  26:lib/chibios/os/rt/src/chmtx.c ****  *          <h2>Operation mode</h2>
  27:lib/chibios/os/rt/src/chmtx.c ****  *          A mutex is a threads synchronization object that can be in two
  28:lib/chibios/os/rt/src/chmtx.c ****  *          distinct states:
  29:lib/chibios/os/rt/src/chmtx.c ****  *          - Not owned (unlocked).
  30:lib/chibios/os/rt/src/chmtx.c ****  *          - Owned by a thread (locked).
  31:lib/chibios/os/rt/src/chmtx.c ****  *          .
  32:lib/chibios/os/rt/src/chmtx.c ****  *          Operations defined for mutexes:
  33:lib/chibios/os/rt/src/chmtx.c ****  *          - <b>Lock</b>: The mutex is checked, if the mutex is not owned by
  34:lib/chibios/os/rt/src/chmtx.c ****  *            some other thread then it is associated to the locking thread
  35:lib/chibios/os/rt/src/chmtx.c ****  *            else the thread is queued on the mutex in a list ordered by
  36:lib/chibios/os/rt/src/chmtx.c ****  *            priority.
  37:lib/chibios/os/rt/src/chmtx.c ****  *          - <b>Unlock</b>: The mutex is released by the owner and the highest
  38:lib/chibios/os/rt/src/chmtx.c ****  *            priority thread waiting in the queue, if any, is resumed and made
  39:lib/chibios/os/rt/src/chmtx.c ****  *            owner of the mutex.
  40:lib/chibios/os/rt/src/chmtx.c ****  *          .
  41:lib/chibios/os/rt/src/chmtx.c ****  *          <h2>Constraints</h2>
  42:lib/chibios/os/rt/src/chmtx.c ****  *          In ChibiOS/RT the Unlock operations must always be performed
  43:lib/chibios/os/rt/src/chmtx.c ****  *          in lock-reverse order. This restriction both improves the
  44:lib/chibios/os/rt/src/chmtx.c ****  *          performance and is required for an efficient implementation
  45:lib/chibios/os/rt/src/chmtx.c ****  *          of the priority inheritance mechanism.<br>
  46:lib/chibios/os/rt/src/chmtx.c ****  *          Operating under this restriction also ensures that deadlocks
  47:lib/chibios/os/rt/src/chmtx.c ****  *          are no possible.
  48:lib/chibios/os/rt/src/chmtx.c ****  *
  49:lib/chibios/os/rt/src/chmtx.c ****  *          <h2>Recursive mode</h2>
  50:lib/chibios/os/rt/src/chmtx.c ****  *          By default mutexes are not recursive, this mean that it is not
  51:lib/chibios/os/rt/src/chmtx.c ****  *          possible to take a mutex already owned by the same thread.
  52:lib/chibios/os/rt/src/chmtx.c ****  *          It is possible to enable the recursive behavior by enabling the
  53:lib/chibios/os/rt/src/chmtx.c ****  *          option @p CH_CFG_USE_MUTEXES_RECURSIVE.
  54:lib/chibios/os/rt/src/chmtx.c ****  *
  55:lib/chibios/os/rt/src/chmtx.c ****  *          <h2>The priority inversion problem</h2>
  56:lib/chibios/os/rt/src/chmtx.c ****  *          The mutexes in ChibiOS/RT implements the <b>full</b> priority
  57:lib/chibios/os/rt/src/chmtx.c ****  *          inheritance mechanism in order handle the priority inversion
  58:lib/chibios/os/rt/src/chmtx.c ****  *          problem.<br>
  59:lib/chibios/os/rt/src/chmtx.c ****  *          When a thread is queued on a mutex, any thread, directly or
  60:lib/chibios/os/rt/src/chmtx.c ****  *          indirectly, holding the mutex gains the same priority of the
  61:lib/chibios/os/rt/src/chmtx.c ****  *          waiting thread (if their priority was not already equal or higher).
  62:lib/chibios/os/rt/src/chmtx.c ****  *          The mechanism works with any number of nested mutexes and any
  63:lib/chibios/os/rt/src/chmtx.c ****  *          number of involved threads. The algorithm complexity (worst case)
  64:lib/chibios/os/rt/src/chmtx.c ****  *          is N with N equal to the number of nested mutexes.
  65:lib/chibios/os/rt/src/chmtx.c ****  * @pre     In order to use the mutex APIs the @p CH_CFG_USE_MUTEXES option
  66:lib/chibios/os/rt/src/chmtx.c ****  *          must be enabled in @p chconf.h.
  67:lib/chibios/os/rt/src/chmtx.c ****  * @post    Enabling mutexes requires 5-12 (depending on the architecture)
  68:lib/chibios/os/rt/src/chmtx.c ****  *          extra bytes in the @p thread_t structure.
  69:lib/chibios/os/rt/src/chmtx.c ****  * @{
  70:lib/chibios/os/rt/src/chmtx.c ****  */
  71:lib/chibios/os/rt/src/chmtx.c **** 
  72:lib/chibios/os/rt/src/chmtx.c **** #include "ch.h"
  73:lib/chibios/os/rt/src/chmtx.c **** 
  74:lib/chibios/os/rt/src/chmtx.c **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  75:lib/chibios/os/rt/src/chmtx.c **** 
  76:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  77:lib/chibios/os/rt/src/chmtx.c **** /* Module exported variables.                                                */
  78:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  79:lib/chibios/os/rt/src/chmtx.c **** 
  80:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  81:lib/chibios/os/rt/src/chmtx.c **** /* Module local types.                                                       */
  82:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  83:lib/chibios/os/rt/src/chmtx.c **** 
  84:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  85:lib/chibios/os/rt/src/chmtx.c **** /* Module local variables.                                                   */
  86:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  87:lib/chibios/os/rt/src/chmtx.c **** 
  88:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  89:lib/chibios/os/rt/src/chmtx.c **** /* Module local functions.                                                   */
  90:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  91:lib/chibios/os/rt/src/chmtx.c **** 
  92:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  93:lib/chibios/os/rt/src/chmtx.c **** /* Module exported functions.                                                */
  94:lib/chibios/os/rt/src/chmtx.c **** /*===========================================================================*/
  95:lib/chibios/os/rt/src/chmtx.c **** 
  96:lib/chibios/os/rt/src/chmtx.c **** /**
  97:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Initializes s @p mutex_t structure.
  98:lib/chibios/os/rt/src/chmtx.c ****  *
  99:lib/chibios/os/rt/src/chmtx.c ****  * @param[out] mp       pointer to a @p mutex_t structure
 100:lib/chibios/os/rt/src/chmtx.c ****  *
 101:lib/chibios/os/rt/src/chmtx.c ****  * @init
 102:lib/chibios/os/rt/src/chmtx.c ****  */
 103:lib/chibios/os/rt/src/chmtx.c **** void chMtxObjectInit(mutex_t *mp) {
  76              		.loc 2 103 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              		@ link register save eliminated.
  81              	.LVL3:
 104:lib/chibios/os/rt/src/chmtx.c **** 
 105:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 106:lib/chibios/os/rt/src/chmtx.c **** 
 107:lib/chibios/os/rt/src/chmtx.c ****   queue_init(&mp->queue);
 108:lib/chibios/os/rt/src/chmtx.c ****   mp->owner = NULL;
  82              		.loc 2 108 0
  83 0000 0023     		movs	r3, #0
  84              	.LBB96:
  85              	.LBB97:
 551:./lib/chibios/os/rt/include/chschd.h **** }
  86              		.loc 1 551 0
  87 0002 C0E90000 		strd	r0, r0, [r0]
  88              	.LVL4:
  89              	.LBE97:
  90              	.LBE96:
  91              		.loc 2 108 0
  92 0006 8360     		str	r3, [r0, #8]
 109:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 110:lib/chibios/os/rt/src/chmtx.c ****   mp->cnt = (cnt_t)0;
 111:lib/chibios/os/rt/src/chmtx.c **** #endif
 112:lib/chibios/os/rt/src/chmtx.c **** }
  93              		.loc 2 112 0
  94 0008 7047     		bx	lr
  95              		.cfi_endproc
  96              	.LFE248:
  98              		.section	.text.chMtxLockS,"ax",%progbits
  99              		.align	1
 100              		.global	chMtxLockS
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu softvfp
 106              	chMtxLockS:
 107              	.LFB250:
 113:lib/chibios/os/rt/src/chmtx.c **** 
 114:lib/chibios/os/rt/src/chmtx.c **** /**
 115:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Locks the specified mutex.
 116:lib/chibios/os/rt/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 117:lib/chibios/os/rt/src/chmtx.c ****  *          mutexes.
 118:lib/chibios/os/rt/src/chmtx.c ****  *
 119:lib/chibios/os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 120:lib/chibios/os/rt/src/chmtx.c ****  *
 121:lib/chibios/os/rt/src/chmtx.c ****  * @api
 122:lib/chibios/os/rt/src/chmtx.c ****  */
 123:lib/chibios/os/rt/src/chmtx.c **** void chMtxLock(mutex_t *mp) {
 124:lib/chibios/os/rt/src/chmtx.c **** 
 125:lib/chibios/os/rt/src/chmtx.c ****   chSysLock();
 126:lib/chibios/os/rt/src/chmtx.c ****   chMtxLockS(mp);
 127:lib/chibios/os/rt/src/chmtx.c ****   chSysUnlock();
 128:lib/chibios/os/rt/src/chmtx.c **** }
 129:lib/chibios/os/rt/src/chmtx.c **** 
 130:lib/chibios/os/rt/src/chmtx.c **** /**
 131:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Locks the specified mutex.
 132:lib/chibios/os/rt/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 133:lib/chibios/os/rt/src/chmtx.c ****  *          mutexes.
 134:lib/chibios/os/rt/src/chmtx.c ****  *
 135:lib/chibios/os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 136:lib/chibios/os/rt/src/chmtx.c ****  *
 137:lib/chibios/os/rt/src/chmtx.c ****  * @sclass
 138:lib/chibios/os/rt/src/chmtx.c ****  */
 139:lib/chibios/os/rt/src/chmtx.c **** void chMtxLockS(mutex_t *mp) {
 108              		.loc 2 139 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              	.LVL5:
 113 0000 70B5     		push	{r4, r5, r6, lr}
 114              		.cfi_def_cfa_offset 16
 115              		.cfi_offset 4, -16
 116              		.cfi_offset 5, -12
 117              		.cfi_offset 6, -8
 118              		.cfi_offset 14, -4
 140:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 119              		.loc 2 140 0
 120 0002 2B4B     		ldr	r3, .L18
 141:lib/chibios/os/rt/src/chmtx.c **** 
 142:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheckClassS();
 143:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 144:lib/chibios/os/rt/src/chmtx.c **** 
 145:lib/chibios/os/rt/src/chmtx.c ****   /* Is the mutex already locked? */
 146:lib/chibios/os/rt/src/chmtx.c ****   if (mp->owner != NULL) {
 121              		.loc 2 146 0
 122 0004 8468     		ldr	r4, [r0, #8]
 140:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 123              		.loc 2 140 0
 124 0006 9D69     		ldr	r5, [r3, #24]
 125              	.LVL6:
 139:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 126              		.loc 2 139 0
 127 0008 0646     		mov	r6, r0
 128              		.loc 2 146 0
 129 000a 7CB9     		cbnz	r4, .L8
 147:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 148:lib/chibios/os/rt/src/chmtx.c **** 
 149:lib/chibios/os/rt/src/chmtx.c ****     chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");
 150:lib/chibios/os/rt/src/chmtx.c **** 
 151:lib/chibios/os/rt/src/chmtx.c ****     /* If the mutex is already owned by this thread, the counter is increased
 152:lib/chibios/os/rt/src/chmtx.c ****        and there is no need of more actions.*/
 153:lib/chibios/os/rt/src/chmtx.c ****     if (mp->owner == ctp) {
 154:lib/chibios/os/rt/src/chmtx.c ****       mp->cnt++;
 155:lib/chibios/os/rt/src/chmtx.c ****     }
 156:lib/chibios/os/rt/src/chmtx.c ****     else {
 157:lib/chibios/os/rt/src/chmtx.c **** #endif
 158:lib/chibios/os/rt/src/chmtx.c ****       /* Priority inheritance protocol; explores the thread-mutex dependencies
 159:lib/chibios/os/rt/src/chmtx.c ****          boosting the priority of all the affected threads to equal the
 160:lib/chibios/os/rt/src/chmtx.c ****          priority of the running thread requesting the mutex.*/
 161:lib/chibios/os/rt/src/chmtx.c ****       thread_t *tp = mp->owner;
 162:lib/chibios/os/rt/src/chmtx.c **** 
 163:lib/chibios/os/rt/src/chmtx.c ****       /* Does the running thread have higher priority than the mutex
 164:lib/chibios/os/rt/src/chmtx.c ****          owning thread? */
 165:lib/chibios/os/rt/src/chmtx.c ****       while (tp->prio < ctp->prio) {
 166:lib/chibios/os/rt/src/chmtx.c ****         /* Make priority of thread tp match the running thread's priority.*/
 167:lib/chibios/os/rt/src/chmtx.c ****         tp->prio = ctp->prio;
 168:lib/chibios/os/rt/src/chmtx.c **** 
 169:lib/chibios/os/rt/src/chmtx.c ****         /* The following states need priority queues reordering.*/
 170:lib/chibios/os/rt/src/chmtx.c ****         switch (tp->state) {
 171:lib/chibios/os/rt/src/chmtx.c ****         case CH_STATE_WTMTX:
 172:lib/chibios/os/rt/src/chmtx.c ****           /* Re-enqueues the mutex owner with its new priority.*/
 173:lib/chibios/os/rt/src/chmtx.c ****           queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 174:lib/chibios/os/rt/src/chmtx.c ****           tp = tp->u.wtmtxp->owner;
 175:lib/chibios/os/rt/src/chmtx.c ****           /*lint -e{9042} [16.1] Continues the while.*/
 176:lib/chibios/os/rt/src/chmtx.c ****           continue;
 177:lib/chibios/os/rt/src/chmtx.c **** #if (CH_CFG_USE_CONDVARS == TRUE) ||                                        \
 178:lib/chibios/os/rt/src/chmtx.c ****     ((CH_CFG_USE_SEMAPHORES == TRUE) &&                                     \
 179:lib/chibios/os/rt/src/chmtx.c ****      (CH_CFG_USE_SEMAPHORES_PRIORITY == TRUE)) ||                           \
 180:lib/chibios/os/rt/src/chmtx.c ****     ((CH_CFG_USE_MESSAGES == TRUE) &&                                       \
 181:lib/chibios/os/rt/src/chmtx.c ****      (CH_CFG_USE_MESSAGES_PRIORITY == TRUE))
 182:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_CONDVARS == TRUE
 183:lib/chibios/os/rt/src/chmtx.c ****         case CH_STATE_WTCOND:
 184:lib/chibios/os/rt/src/chmtx.c **** #endif
 185:lib/chibios/os/rt/src/chmtx.c **** #if (CH_CFG_USE_SEMAPHORES == TRUE) &&                                      \
 186:lib/chibios/os/rt/src/chmtx.c ****     (CH_CFG_USE_SEMAPHORES_PRIORITY == TRUE)
 187:lib/chibios/os/rt/src/chmtx.c ****         case CH_STATE_WTSEM:
 188:lib/chibios/os/rt/src/chmtx.c **** #endif
 189:lib/chibios/os/rt/src/chmtx.c **** #if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
 190:lib/chibios/os/rt/src/chmtx.c ****         case CH_STATE_SNDMSGQ:
 191:lib/chibios/os/rt/src/chmtx.c **** #endif
 192:lib/chibios/os/rt/src/chmtx.c ****           /* Re-enqueues tp with its new priority on the queue.*/
 193:lib/chibios/os/rt/src/chmtx.c ****           queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 194:lib/chibios/os/rt/src/chmtx.c ****           break;
 195:lib/chibios/os/rt/src/chmtx.c **** #endif
 196:lib/chibios/os/rt/src/chmtx.c ****         case CH_STATE_READY:
 197:lib/chibios/os/rt/src/chmtx.c **** #if CH_DBG_ENABLE_ASSERTS == TRUE
 198:lib/chibios/os/rt/src/chmtx.c ****           /* Prevents an assertion in chSchReadyI().*/
 199:lib/chibios/os/rt/src/chmtx.c ****           tp->state = CH_STATE_CURRENT;
 200:lib/chibios/os/rt/src/chmtx.c **** #endif
 201:lib/chibios/os/rt/src/chmtx.c ****           /* Re-enqueues tp with its new priority on the ready list.*/
 202:lib/chibios/os/rt/src/chmtx.c ****           (void) chSchReadyI(queue_dequeue(tp));
 203:lib/chibios/os/rt/src/chmtx.c ****           break;
 204:lib/chibios/os/rt/src/chmtx.c ****         default:
 205:lib/chibios/os/rt/src/chmtx.c ****           /* Nothing to do for other states.*/
 206:lib/chibios/os/rt/src/chmtx.c ****           break;
 207:lib/chibios/os/rt/src/chmtx.c ****         }
 208:lib/chibios/os/rt/src/chmtx.c ****         break;
 209:lib/chibios/os/rt/src/chmtx.c ****       }
 210:lib/chibios/os/rt/src/chmtx.c **** 
 211:lib/chibios/os/rt/src/chmtx.c ****       /* Sleep on the mutex.*/
 212:lib/chibios/os/rt/src/chmtx.c ****       queue_prio_insert(ctp, &mp->queue);
 213:lib/chibios/os/rt/src/chmtx.c ****       ctp->u.wtmtxp = mp;
 214:lib/chibios/os/rt/src/chmtx.c ****       chSchGoSleepS(CH_STATE_WTMTX);
 215:lib/chibios/os/rt/src/chmtx.c **** 
 216:lib/chibios/os/rt/src/chmtx.c ****       /* It is assumed that the thread performing the unlock operation assigns
 217:lib/chibios/os/rt/src/chmtx.c ****          the mutex to this thread.*/
 218:lib/chibios/os/rt/src/chmtx.c ****       chDbgAssert(mp->owner == ctp, "not owner");
 219:lib/chibios/os/rt/src/chmtx.c ****       chDbgAssert(ctp->mtxlist == mp, "not owned");
 220:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 221:lib/chibios/os/rt/src/chmtx.c ****       chDbgAssert(mp->cnt == (cnt_t)1, "counter is not one");
 222:lib/chibios/os/rt/src/chmtx.c ****     }
 223:lib/chibios/os/rt/src/chmtx.c **** #endif
 224:lib/chibios/os/rt/src/chmtx.c ****   }
 225:lib/chibios/os/rt/src/chmtx.c ****   else {
 226:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 227:lib/chibios/os/rt/src/chmtx.c ****     chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");
 228:lib/chibios/os/rt/src/chmtx.c **** 
 229:lib/chibios/os/rt/src/chmtx.c ****     mp->cnt++;
 230:lib/chibios/os/rt/src/chmtx.c **** #endif
 231:lib/chibios/os/rt/src/chmtx.c ****     /* It was not owned, inserted in the owned mutexes list.*/
 232:lib/chibios/os/rt/src/chmtx.c ****     mp->owner = ctp;
 233:lib/chibios/os/rt/src/chmtx.c ****     mp->next = ctp->mtxlist;
 130              		.loc 2 233 0
 131 000c AB6B     		ldr	r3, [r5, #56]
 232:lib/chibios/os/rt/src/chmtx.c ****     mp->next = ctp->mtxlist;
 132              		.loc 2 232 0
 133 000e 8560     		str	r5, [r0, #8]
 134              		.loc 2 233 0
 135 0010 C360     		str	r3, [r0, #12]
 234:lib/chibios/os/rt/src/chmtx.c ****     ctp->mtxlist = mp;
 136              		.loc 2 234 0
 137 0012 A863     		str	r0, [r5, #56]
 235:lib/chibios/os/rt/src/chmtx.c ****   }
 236:lib/chibios/os/rt/src/chmtx.c **** }
 138              		.loc 2 236 0
 139 0014 70BD     		pop	{r4, r5, r6, pc}
 140              	.LVL7:
 141              	.L13:
 142              	.LBB105:
 143              	.LBB106:
 144              	.LBB107:
 608:./lib/chibios/os/rt/include/chschd.h **** 
 609:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 610:./lib/chibios/os/rt/include/chschd.h **** 
 611:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next             = (thread_t *)tqp;
 612:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 613:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 614:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev                  = tp;
 615:./lib/chibios/os/rt/include/chschd.h **** }
 616:./lib/chibios/os/rt/include/chschd.h **** 
 617:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 618:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 619:./lib/chibios/os/rt/include/chschd.h **** 
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next             = tp->queue.next;
 621:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 622:./lib/chibios/os/rt/include/chschd.h **** 
 623:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 624:./lib/chibios/os/rt/include/chschd.h **** }
 625:./lib/chibios/os/rt/include/chschd.h **** 
 626:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
 627:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->prev;
 628:./lib/chibios/os/rt/include/chschd.h **** 
 629:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev             = tp->queue.prev;
 630:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev->queue.next = (thread_t *)tqp;
 631:./lib/chibios/os/rt/include/chschd.h **** 
 632:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 633:./lib/chibios/os/rt/include/chschd.h **** }
 634:./lib/chibios/os/rt/include/chschd.h **** 
 635:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_dequeue(thread_t *tp) {
 636:./lib/chibios/os/rt/include/chschd.h **** 
 637:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp->queue.next;
 145              		.loc 1 637 0
 146 0016 D4E90023 		ldrd	r2, r3, [r4]
 147 001a 1A60     		str	r2, [r3]
 638:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 148              		.loc 1 638 0
 149 001c 2268     		ldr	r2, [r4]
 150              	.LBE107:
 151              	.LBE106:
 173:lib/chibios/os/rt/src/chmtx.c ****           tp = tp->u.wtmtxp->owner;
 152              		.loc 2 173 0
 153 001e 616A     		ldr	r1, [r4, #36]
 154              	.LBB109:
 155              	.LBB108:
 156              		.loc 1 638 0
 157 0020 5360     		str	r3, [r2, #4]
 158              	.LVL8:
 159              	.LBE108:
 160              	.LBE109:
 173:lib/chibios/os/rt/src/chmtx.c ****           tp = tp->u.wtmtxp->owner;
 161              		.loc 2 173 0
 162 0022 2046     		mov	r0, r4
 163 0024 FFF7FEFF 		bl	queue_prio_insert
 164              	.LVL9:
 174:lib/chibios/os/rt/src/chmtx.c ****           /*lint -e{9042} [16.1] Continues the while.*/
 165              		.loc 2 174 0
 166 0028 636A     		ldr	r3, [r4, #36]
 167 002a 9C68     		ldr	r4, [r3, #8]
 168              	.LVL10:
 169              	.L8:
 165:lib/chibios/os/rt/src/chmtx.c ****         /* Make priority of thread tp match the running thread's priority.*/
 170              		.loc 2 165 0
 171 002c AB68     		ldr	r3, [r5, #8]
 172 002e A268     		ldr	r2, [r4, #8]
 173 0030 9A42     		cmp	r2, r3
 174 0032 2AD2     		bcs	.L10
 167:lib/chibios/os/rt/src/chmtx.c **** 
 175              		.loc 2 167 0
 176 0034 A360     		str	r3, [r4, #8]
 170:lib/chibios/os/rt/src/chmtx.c ****         case CH_STATE_WTMTX:
 177              		.loc 2 170 0
 178 0036 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 179 003a 0C2B     		cmp	r3, #12
 180 003c 25D8     		bhi	.L10
 181 003e 01A2     		adr	r2, .L12
 182 0040 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 183              		.p2align 2
 184              	.L12:
 185 0044 9F000000 		.word	.L11+1
 186 0048 8B000000 		.word	.L10+1
 187 004c 8B000000 		.word	.L10+1
 188 0050 8B000000 		.word	.L10+1
 189 0054 8B000000 		.word	.L10+1
 190 0058 8B000000 		.word	.L10+1
 191 005c 17000000 		.word	.L13+1
 192 0060 79000000 		.word	.L14+1
 193 0064 8B000000 		.word	.L10+1
 194 0068 8B000000 		.word	.L10+1
 195 006c 8B000000 		.word	.L10+1
 196 0070 8B000000 		.word	.L10+1
 197 0074 79000000 		.word	.L14+1
 198              		.p2align 1
 199              	.L14:
 200              	.LVL11:
 201              	.LBB110:
 202              	.LBB111:
 637:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 203              		.loc 1 637 0
 204 0078 D4E90023 		ldrd	r2, r3, [r4]
 205 007c 1A60     		str	r2, [r3]
 206              		.loc 1 638 0
 207 007e 2268     		ldr	r2, [r4]
 208              	.LBE111:
 209              	.LBE110:
 193:lib/chibios/os/rt/src/chmtx.c ****           break;
 210              		.loc 2 193 0
 211 0080 616A     		ldr	r1, [r4, #36]
 212              	.LBB113:
 213              	.LBB112:
 214              		.loc 1 638 0
 215 0082 5360     		str	r3, [r2, #4]
 216              	.LVL12:
 217              	.LBE112:
 218              	.LBE113:
 193:lib/chibios/os/rt/src/chmtx.c ****           break;
 219              		.loc 2 193 0
 220 0084 2046     		mov	r0, r4
 221 0086 FFF7FEFF 		bl	queue_prio_insert
 222              	.LVL13:
 223              	.L10:
 212:lib/chibios/os/rt/src/chmtx.c ****       ctp->u.wtmtxp = mp;
 224              		.loc 2 212 0
 225 008a 2846     		mov	r0, r5
 226 008c 3146     		mov	r1, r6
 227 008e FFF7FEFF 		bl	queue_prio_insert
 228              	.LVL14:
 213:lib/chibios/os/rt/src/chmtx.c ****       chSchGoSleepS(CH_STATE_WTMTX);
 229              		.loc 2 213 0
 230 0092 6E62     		str	r6, [r5, #36]
 214:lib/chibios/os/rt/src/chmtx.c **** 
 231              		.loc 2 214 0
 232 0094 0620     		movs	r0, #6
 233              	.LBE105:
 234              		.loc 2 236 0
 235 0096 BDE87040 		pop	{r4, r5, r6, lr}
 236              		.cfi_remember_state
 237              		.cfi_restore 14
 238              		.cfi_restore 6
 239              		.cfi_restore 5
 240              		.cfi_restore 4
 241              		.cfi_def_cfa_offset 0
 242              	.LVL15:
 243              	.LBB118:
 214:lib/chibios/os/rt/src/chmtx.c **** 
 244              		.loc 2 214 0
 245 009a FFF7FEBF 		b	chSchGoSleepS
 246              	.LVL16:
 247              	.L11:
 248              		.cfi_restore_state
 249              	.LBB114:
 250              	.LBB115:
 637:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 251              		.loc 1 637 0
 252 009e D4E90023 		ldrd	r2, r3, [r4]
 253 00a2 1A60     		str	r2, [r3]
 254              		.loc 1 638 0
 255 00a4 2268     		ldr	r2, [r4]
 256              	.LBE115:
 257              	.LBE114:
 202:lib/chibios/os/rt/src/chmtx.c ****           break;
 258              		.loc 2 202 0
 259 00a6 2046     		mov	r0, r4
 260              	.LBB117:
 261              	.LBB116:
 262              		.loc 1 638 0
 263 00a8 5360     		str	r3, [r2, #4]
 264              	.LVL17:
 265              	.LBE116:
 266              	.LBE117:
 202:lib/chibios/os/rt/src/chmtx.c ****           break;
 267              		.loc 2 202 0
 268 00aa FFF7FEFF 		bl	chSchReadyI
 269              	.LVL18:
 203:lib/chibios/os/rt/src/chmtx.c ****         default:
 270              		.loc 2 203 0
 271 00ae ECE7     		b	.L10
 272              	.L19:
 273              		.align	2
 274              	.L18:
 275 00b0 00000000 		.word	ch
 276              	.LBE118:
 277              		.cfi_endproc
 278              	.LFE250:
 280              		.section	.text.chMtxLock,"ax",%progbits
 281              		.align	1
 282              		.global	chMtxLock
 283              		.syntax unified
 284              		.thumb
 285              		.thumb_func
 286              		.fpu softvfp
 288              	chMtxLock:
 289              	.LFB249:
 123:lib/chibios/os/rt/src/chmtx.c **** 
 290              		.loc 2 123 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294              	.LVL19:
 295 0000 08B5     		push	{r3, lr}
 296              		.cfi_def_cfa_offset 8
 297              		.cfi_offset 3, -8
 298              		.cfi_offset 14, -4
 299              	.LBB119:
 300              	.LBB120:
 301              	.LBB121:
 302              	.LBB122:
 303              		.file 3 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @version  V4.30
   5:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
   9:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    All rights reserved.
  10:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      specific prior written permission.
  20:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    *
  21:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  35:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  38:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #endif
  45:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  46:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  47:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   @{
  51:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  52:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  53:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  54:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  58:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  60:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  62:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  63:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  64:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  65:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  69:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  71:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  73:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  74:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  75:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  76:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Control Register value
  79:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  80:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  82:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
  83:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  84:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
  86:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  87:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  88:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  89:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  90:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  94:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  96:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  98:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  99:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 100:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 101:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 105:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 107:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 108:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 109:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 111:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 112:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 113:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 114:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 115:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               APSR Register value
 118:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 119:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 121:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 122:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 123:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 125:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 126:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 127:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 128:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 129:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 132:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 134:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 136:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 137:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 138:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 140:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 141:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 142:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 143:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 144:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               PSP Register value
 147:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 148:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 150:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 151:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 154:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 155:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 156:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 157:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 158:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 162:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 164:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 166:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 167:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 168:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 169:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               MSP Register value
 172:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 173:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 175:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 176:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 177:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 179:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 180:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 181:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 182:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 183:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 188:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 190:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 192:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 193:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 194:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 195:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 199:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 201:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 202:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 203:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 205:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 206:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 207:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 208:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 209:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 213:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 215:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 217:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 218:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 219:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 221:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 222:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 226:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 228:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 230:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 231:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 232:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 233:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 237:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 239:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 241:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 243:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 244:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 248:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 250:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 251:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 252:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 254:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 255:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 257:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 304              		.loc 3 264 0
 305 0002 2023     		movs	r3, #32
 306              		.syntax unified
 307              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 308 0004 83F31188 		MSR basepri, r3
 309              	@ 0 "" 2
 310              	.LVL20:
 311              		.thumb
 312              		.syntax unified
 313              	.LBE122:
 314              	.LBE121:
 315              	.LBE120:
 316              	.LBE119:
 126:lib/chibios/os/rt/src/chmtx.c ****   chSysUnlock();
 317              		.loc 2 126 0
 318 0008 FFF7FEFF 		bl	chMtxLockS
 319              	.LVL21:
 320              	.LBB123:
 321              	.LBB124:
 322              	.LBB125:
 323              	.LBB126:
 324              	.LBB127:
 325              		.loc 3 264 0
 326 000c 0023     		movs	r3, #0
 327              		.syntax unified
 328              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 329 000e 83F31188 		MSR basepri, r3
 330              	@ 0 "" 2
 331              	.LVL22:
 332              		.thumb
 333              		.syntax unified
 334              	.LBE127:
 335              	.LBE126:
 336              	.LBE125:
 337              	.LBE124:
 338              	.LBE123:
 128:lib/chibios/os/rt/src/chmtx.c **** 
 339              		.loc 2 128 0
 340 0012 08BD     		pop	{r3, pc}
 341              		.cfi_endproc
 342              	.LFE249:
 344              		.section	.text.chMtxTryLockS,"ax",%progbits
 345              		.align	1
 346              		.global	chMtxTryLockS
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 350              		.fpu softvfp
 352              	chMtxTryLockS:
 353              	.LFB252:
 237:lib/chibios/os/rt/src/chmtx.c **** 
 238:lib/chibios/os/rt/src/chmtx.c **** /**
 239:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Tries to lock a mutex.
 240:lib/chibios/os/rt/src/chmtx.c ****  * @details This function attempts to lock a mutex, if the mutex is already
 241:lib/chibios/os/rt/src/chmtx.c ****  *          locked by another thread then the function exits without waiting.
 242:lib/chibios/os/rt/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 243:lib/chibios/os/rt/src/chmtx.c ****  *          mutexes.
 244:lib/chibios/os/rt/src/chmtx.c ****  * @note    This function does not have any overhead related to the
 245:lib/chibios/os/rt/src/chmtx.c ****  *          priority inheritance mechanism because it does not try to
 246:lib/chibios/os/rt/src/chmtx.c ****  *          enter a sleep state.
 247:lib/chibios/os/rt/src/chmtx.c ****  *
 248:lib/chibios/os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 249:lib/chibios/os/rt/src/chmtx.c ****  * @return              The operation status.
 250:lib/chibios/os/rt/src/chmtx.c ****  * @retval true         if the mutex has been successfully acquired
 251:lib/chibios/os/rt/src/chmtx.c ****  * @retval false        if the lock attempt failed.
 252:lib/chibios/os/rt/src/chmtx.c ****  *
 253:lib/chibios/os/rt/src/chmtx.c ****  * @api
 254:lib/chibios/os/rt/src/chmtx.c ****  */
 255:lib/chibios/os/rt/src/chmtx.c **** bool chMtxTryLock(mutex_t *mp) {
 256:lib/chibios/os/rt/src/chmtx.c ****   bool b;
 257:lib/chibios/os/rt/src/chmtx.c **** 
 258:lib/chibios/os/rt/src/chmtx.c ****   chSysLock();
 259:lib/chibios/os/rt/src/chmtx.c ****   b = chMtxTryLockS(mp);
 260:lib/chibios/os/rt/src/chmtx.c ****   chSysUnlock();
 261:lib/chibios/os/rt/src/chmtx.c **** 
 262:lib/chibios/os/rt/src/chmtx.c ****   return b;
 263:lib/chibios/os/rt/src/chmtx.c **** }
 264:lib/chibios/os/rt/src/chmtx.c **** 
 265:lib/chibios/os/rt/src/chmtx.c **** /**
 266:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Tries to lock a mutex.
 267:lib/chibios/os/rt/src/chmtx.c ****  * @details This function attempts to lock a mutex, if the mutex is already
 268:lib/chibios/os/rt/src/chmtx.c ****  *          taken by another thread then the function exits without waiting.
 269:lib/chibios/os/rt/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 270:lib/chibios/os/rt/src/chmtx.c ****  *          mutexes.
 271:lib/chibios/os/rt/src/chmtx.c ****  * @note    This function does not have any overhead related to the
 272:lib/chibios/os/rt/src/chmtx.c ****  *          priority inheritance mechanism because it does not try to
 273:lib/chibios/os/rt/src/chmtx.c ****  *          enter a sleep state.
 274:lib/chibios/os/rt/src/chmtx.c ****  *
 275:lib/chibios/os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 276:lib/chibios/os/rt/src/chmtx.c ****  * @return              The operation status.
 277:lib/chibios/os/rt/src/chmtx.c ****  * @retval true         if the mutex has been successfully acquired
 278:lib/chibios/os/rt/src/chmtx.c ****  * @retval false        if the lock attempt failed.
 279:lib/chibios/os/rt/src/chmtx.c ****  *
 280:lib/chibios/os/rt/src/chmtx.c ****  * @sclass
 281:lib/chibios/os/rt/src/chmtx.c ****  */
 282:lib/chibios/os/rt/src/chmtx.c **** bool chMtxTryLockS(mutex_t *mp) {
 354              		.loc 2 282 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358              		@ link register save eliminated.
 359              	.LVL23:
 283:lib/chibios/os/rt/src/chmtx.c **** 
 284:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheckClassS();
 285:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 286:lib/chibios/os/rt/src/chmtx.c **** 
 287:lib/chibios/os/rt/src/chmtx.c ****   if (mp->owner != NULL) {
 360              		.loc 2 287 0
 361 0000 8368     		ldr	r3, [r0, #8]
 362 0002 3BB9     		cbnz	r3, .L23
 363              	.LVL24:
 364              	.LBB130:
 365              	.LBB131:
 288:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 289:lib/chibios/os/rt/src/chmtx.c **** 
 290:lib/chibios/os/rt/src/chmtx.c ****     chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");
 291:lib/chibios/os/rt/src/chmtx.c **** 
 292:lib/chibios/os/rt/src/chmtx.c ****     if (mp->owner == currp) {
 293:lib/chibios/os/rt/src/chmtx.c ****       mp->cnt++;
 294:lib/chibios/os/rt/src/chmtx.c ****       return true;
 295:lib/chibios/os/rt/src/chmtx.c ****     }
 296:lib/chibios/os/rt/src/chmtx.c **** #endif
 297:lib/chibios/os/rt/src/chmtx.c ****     return false;
 298:lib/chibios/os/rt/src/chmtx.c ****   }
 299:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 300:lib/chibios/os/rt/src/chmtx.c **** 
 301:lib/chibios/os/rt/src/chmtx.c ****   chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");
 302:lib/chibios/os/rt/src/chmtx.c **** 
 303:lib/chibios/os/rt/src/chmtx.c ****   mp->cnt++;
 304:lib/chibios/os/rt/src/chmtx.c **** #endif
 305:lib/chibios/os/rt/src/chmtx.c ****   mp->owner = currp;
 366              		.loc 2 305 0
 367 0004 044B     		ldr	r3, .L24
 368 0006 9B69     		ldr	r3, [r3, #24]
 369 0008 8360     		str	r3, [r0, #8]
 306:lib/chibios/os/rt/src/chmtx.c ****   mp->next = currp->mtxlist;
 370              		.loc 2 306 0
 371 000a 9A6B     		ldr	r2, [r3, #56]
 372 000c C260     		str	r2, [r0, #12]
 307:lib/chibios/os/rt/src/chmtx.c ****   currp->mtxlist = mp;
 373              		.loc 2 307 0
 374 000e 9863     		str	r0, [r3, #56]
 375              	.LVL25:
 376 0010 0120     		movs	r0, #1
 377              	.LVL26:
 378 0012 7047     		bx	lr
 379              	.LVL27:
 380              	.L23:
 381              	.LBE131:
 382              	.LBE130:
 297:lib/chibios/os/rt/src/chmtx.c ****   }
 383              		.loc 2 297 0
 384 0014 0020     		movs	r0, #0
 385              	.LVL28:
 308:lib/chibios/os/rt/src/chmtx.c ****   return true;
 309:lib/chibios/os/rt/src/chmtx.c **** }
 386              		.loc 2 309 0
 387 0016 7047     		bx	lr
 388              	.L25:
 389              		.align	2
 390              	.L24:
 391 0018 00000000 		.word	ch
 392              		.cfi_endproc
 393              	.LFE252:
 395              		.section	.text.chMtxTryLock,"ax",%progbits
 396              		.align	1
 397              		.global	chMtxTryLock
 398              		.syntax unified
 399              		.thumb
 400              		.thumb_func
 401              		.fpu softvfp
 403              	chMtxTryLock:
 404              	.LFB251:
 255:lib/chibios/os/rt/src/chmtx.c ****   bool b;
 405              		.loc 2 255 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409              	.LVL29:
 410 0000 08B5     		push	{r3, lr}
 411              		.cfi_def_cfa_offset 8
 412              		.cfi_offset 3, -8
 413              		.cfi_offset 14, -4
 414              	.LBB132:
 415              	.LBB133:
 416              	.LBB134:
 417              	.LBB135:
 418              		.loc 3 264 0
 419 0002 2023     		movs	r3, #32
 420              		.syntax unified
 421              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 422 0004 83F31188 		MSR basepri, r3
 423              	@ 0 "" 2
 424              	.LVL30:
 425              		.thumb
 426              		.syntax unified
 427              	.LBE135:
 428              	.LBE134:
 429              	.LBE133:
 430              	.LBE132:
 259:lib/chibios/os/rt/src/chmtx.c ****   chSysUnlock();
 431              		.loc 2 259 0
 432 0008 FFF7FEFF 		bl	chMtxTryLockS
 433              	.LVL31:
 434              	.LBB136:
 435              	.LBB137:
 436              	.LBB138:
 437              	.LBB139:
 438              	.LBB140:
 439              		.loc 3 264 0
 440 000c 0023     		movs	r3, #0
 441              		.syntax unified
 442              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 443 000e 83F31188 		MSR basepri, r3
 444              	@ 0 "" 2
 445              	.LVL32:
 446              		.thumb
 447              		.syntax unified
 448              	.LBE140:
 449              	.LBE139:
 450              	.LBE138:
 451              	.LBE137:
 452              	.LBE136:
 263:lib/chibios/os/rt/src/chmtx.c **** 
 453              		.loc 2 263 0
 454 0012 08BD     		pop	{r3, pc}
 455              		.cfi_endproc
 456              	.LFE251:
 458              		.section	.text.chMtxUnlock,"ax",%progbits
 459              		.align	1
 460              		.global	chMtxUnlock
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
 464              		.fpu softvfp
 466              	chMtxUnlock:
 467              	.LFB253:
 310:lib/chibios/os/rt/src/chmtx.c **** 
 311:lib/chibios/os/rt/src/chmtx.c **** /**
 312:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Unlocks the specified mutex.
 313:lib/chibios/os/rt/src/chmtx.c ****  * @note    Mutexes must be unlocked in reverse lock order. Violating this
 314:lib/chibios/os/rt/src/chmtx.c ****  *          rules will result in a panic if assertions are enabled.
 315:lib/chibios/os/rt/src/chmtx.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 316:lib/chibios/os/rt/src/chmtx.c ****  * @post    The mutex is unlocked and removed from the per-thread stack of
 317:lib/chibios/os/rt/src/chmtx.c ****  *          owned mutexes.
 318:lib/chibios/os/rt/src/chmtx.c ****  *
 319:lib/chibios/os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 320:lib/chibios/os/rt/src/chmtx.c ****  *
 321:lib/chibios/os/rt/src/chmtx.c ****  * @api
 322:lib/chibios/os/rt/src/chmtx.c ****  */
 323:lib/chibios/os/rt/src/chmtx.c **** void chMtxUnlock(mutex_t *mp) {
 468              		.loc 2 323 0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 472              	.LVL33:
 324:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 473              		.loc 2 324 0
 474 0000 144A     		ldr	r2, .L33
 323:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 475              		.loc 2 323 0
 476 0002 38B5     		push	{r3, r4, r5, lr}
 477              		.cfi_def_cfa_offset 16
 478              		.cfi_offset 3, -16
 479              		.cfi_offset 4, -12
 480              		.cfi_offset 5, -8
 481              		.cfi_offset 14, -4
 482              		.loc 2 324 0
 483 0004 9169     		ldr	r1, [r2, #24]
 484              	.LVL34:
 323:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 485              		.loc 2 323 0
 486 0006 0346     		mov	r3, r0
 487              	.LBB141:
 488              	.LBB142:
 489              	.LBB143:
 490              	.LBB144:
 491              		.loc 3 264 0
 492 0008 2022     		movs	r2, #32
 493              		.syntax unified
 494              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 495 000a 82F31188 		MSR basepri, r2
 496              	@ 0 "" 2
 497              	.LVL35:
 498              		.thumb
 499              		.syntax unified
 500              	.LBE144:
 501              	.LBE143:
 502              	.LBE142:
 503              	.LBE141:
 325:lib/chibios/os/rt/src/chmtx.c ****   mutex_t *lmp;
 326:lib/chibios/os/rt/src/chmtx.c **** 
 327:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 328:lib/chibios/os/rt/src/chmtx.c **** 
 329:lib/chibios/os/rt/src/chmtx.c ****   chSysLock();
 330:lib/chibios/os/rt/src/chmtx.c **** 
 331:lib/chibios/os/rt/src/chmtx.c ****   chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 332:lib/chibios/os/rt/src/chmtx.c ****   chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 333:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 334:lib/chibios/os/rt/src/chmtx.c ****   chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");
 335:lib/chibios/os/rt/src/chmtx.c **** 
 336:lib/chibios/os/rt/src/chmtx.c ****   if (--mp->cnt == (cnt_t)0) {
 337:lib/chibios/os/rt/src/chmtx.c **** #endif
 338:lib/chibios/os/rt/src/chmtx.c **** 
 339:lib/chibios/os/rt/src/chmtx.c ****     chDbgAssert(ctp->mtxlist == mp, "not next in list");
 340:lib/chibios/os/rt/src/chmtx.c **** 
 341:lib/chibios/os/rt/src/chmtx.c ****     /* Removes the top mutex from the thread's owned mutexes list and marks
 342:lib/chibios/os/rt/src/chmtx.c ****        it as not owned. Note, it is assumed to be the same mutex passed as
 343:lib/chibios/os/rt/src/chmtx.c ****        parameter of this function.*/
 344:lib/chibios/os/rt/src/chmtx.c ****     ctp->mtxlist = mp->next;
 504              		.loc 2 344 0
 505 000e C268     		ldr	r2, [r0, #12]
 506              	.LBB145:
 507              	.LBB146:
 508              	.LBB147:
 509              	.LBB148:
 577:./lib/chibios/os/rt/include/chschd.h **** }
 510              		.loc 1 577 0
 511 0010 0068     		ldr	r0, [r0]
 512              	.LVL36:
 513              	.LBE148:
 514              	.LBE147:
 515              	.LBE146:
 516              	.LBE145:
 517              		.loc 2 344 0
 518 0012 8A63     		str	r2, [r1, #56]
 345:lib/chibios/os/rt/src/chmtx.c **** 
 346:lib/chibios/os/rt/src/chmtx.c ****     /* If a thread is waiting on the mutex then the fun part begins.*/
 347:lib/chibios/os/rt/src/chmtx.c ****     if (chMtxQueueNotEmptyS(mp)) {
 519              		.loc 2 347 0
 520 0014 9842     		cmp	r0, r3
 521 0016 1AD0     		beq	.L28
 522              	.LBB149:
 348:lib/chibios/os/rt/src/chmtx.c ****       thread_t *tp;
 349:lib/chibios/os/rt/src/chmtx.c **** 
 350:lib/chibios/os/rt/src/chmtx.c ****       /* Recalculates the optimal thread priority by scanning the owned
 351:lib/chibios/os/rt/src/chmtx.c ****          mutexes list.*/
 352:lib/chibios/os/rt/src/chmtx.c ****       tprio_t newprio = ctp->realprio;
 523              		.loc 2 352 0
 524 0018 CC6B     		ldr	r4, [r1, #60]
 525              	.LVL37:
 526              	.L29:
 353:lib/chibios/os/rt/src/chmtx.c ****       lmp = ctp->mtxlist;
 354:lib/chibios/os/rt/src/chmtx.c ****       while (lmp != NULL) {
 527              		.loc 2 354 0
 528 001a 7AB9     		cbnz	r2, .L31
 529              	.LBB150:
 530              	.LBB151:
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 531              		.loc 1 620 0
 532 001c 0268     		ldr	r2, [r0]
 533              	.LVL38:
 534              	.LBE151:
 535              	.LBE150:
 355:lib/chibios/os/rt/src/chmtx.c ****         /* If the highest priority thread waiting in the mutexes list has a
 356:lib/chibios/os/rt/src/chmtx.c ****            greater priority than the current thread base priority then the
 357:lib/chibios/os/rt/src/chmtx.c ****            final priority will have at least that priority.*/
 358:lib/chibios/os/rt/src/chmtx.c ****         if (chMtxQueueNotEmptyS(lmp) &&
 359:lib/chibios/os/rt/src/chmtx.c ****             (lmp->queue.next->prio > newprio)) {
 360:lib/chibios/os/rt/src/chmtx.c ****           newprio = lmp->queue.next->prio;
 361:lib/chibios/os/rt/src/chmtx.c ****         }
 362:lib/chibios/os/rt/src/chmtx.c ****         lmp = lmp->next;
 363:lib/chibios/os/rt/src/chmtx.c ****       }
 364:lib/chibios/os/rt/src/chmtx.c **** 
 365:lib/chibios/os/rt/src/chmtx.c ****       /* Assigns to the current thread the highest priority among all the
 366:lib/chibios/os/rt/src/chmtx.c ****          waiting threads.*/
 367:lib/chibios/os/rt/src/chmtx.c ****       ctp->prio = newprio;
 536              		.loc 2 367 0
 537 001e 8C60     		str	r4, [r1, #8]
 538              	.LVL39:
 539              	.LBB153:
 540              	.LBB152:
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 541              		.loc 1 620 0
 542 0020 1A60     		str	r2, [r3]
 621:./lib/chibios/os/rt/include/chschd.h **** 
 543              		.loc 1 621 0
 544 0022 5360     		str	r3, [r2, #4]
 545              	.LVL40:
 546              	.LBE152:
 547              	.LBE153:
 368:lib/chibios/os/rt/src/chmtx.c **** 
 369:lib/chibios/os/rt/src/chmtx.c ****       /* Awakens the highest priority thread waiting for the unlocked mutex and
 370:lib/chibios/os/rt/src/chmtx.c ****          assigns the mutex to it.*/
 371:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 372:lib/chibios/os/rt/src/chmtx.c ****       mp->cnt = (cnt_t)1;
 373:lib/chibios/os/rt/src/chmtx.c **** #endif
 374:lib/chibios/os/rt/src/chmtx.c ****       tp = queue_fifo_remove(&mp->queue);
 375:lib/chibios/os/rt/src/chmtx.c ****       mp->owner = tp;
 376:lib/chibios/os/rt/src/chmtx.c ****       mp->next = tp->mtxlist;
 548              		.loc 2 376 0
 549 0024 826B     		ldr	r2, [r0, #56]
 375:lib/chibios/os/rt/src/chmtx.c ****       mp->next = tp->mtxlist;
 550              		.loc 2 375 0
 551 0026 9860     		str	r0, [r3, #8]
 552              		.loc 2 376 0
 553 0028 DA60     		str	r2, [r3, #12]
 377:lib/chibios/os/rt/src/chmtx.c ****       tp->mtxlist = mp;
 554              		.loc 2 377 0
 555 002a 8363     		str	r3, [r0, #56]
 378:lib/chibios/os/rt/src/chmtx.c **** 
 379:lib/chibios/os/rt/src/chmtx.c ****       /* Note, not using chSchWakeupS() becuase that function expects the
 380:lib/chibios/os/rt/src/chmtx.c ****          current thread to have the higher or equal priority than the ones
 381:lib/chibios/os/rt/src/chmtx.c ****          in the ready list. This is not necessarily true here because we
 382:lib/chibios/os/rt/src/chmtx.c ****          just changed priority.*/
 383:lib/chibios/os/rt/src/chmtx.c ****       (void) chSchReadyI(tp);
 556              		.loc 2 383 0
 557 002c FFF7FEFF 		bl	chSchReadyI
 558              	.LVL41:
 384:lib/chibios/os/rt/src/chmtx.c ****       chSchRescheduleS();
 559              		.loc 2 384 0
 560 0030 FFF7FEFF 		bl	chSchRescheduleS
 561              	.LVL42:
 562              	.L32:
 563              	.LBE149:
 564              	.LBB158:
 565              	.LBB159:
 566              	.LBB160:
 567              	.LBB161:
 568              	.LBB162:
 569              		.loc 3 264 0
 570 0034 0023     		movs	r3, #0
 571              		.syntax unified
 572              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 573 0036 83F31188 		MSR basepri, r3
 574              	@ 0 "" 2
 575              	.LVL43:
 576              		.thumb
 577              		.syntax unified
 578              	.LBE162:
 579              	.LBE161:
 580              	.LBE160:
 581              	.LBE159:
 582              	.LBE158:
 385:lib/chibios/os/rt/src/chmtx.c ****     }
 386:lib/chibios/os/rt/src/chmtx.c ****     else {
 387:lib/chibios/os/rt/src/chmtx.c ****       mp->owner = NULL;
 388:lib/chibios/os/rt/src/chmtx.c ****     }
 389:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 390:lib/chibios/os/rt/src/chmtx.c ****   }
 391:lib/chibios/os/rt/src/chmtx.c **** #endif
 392:lib/chibios/os/rt/src/chmtx.c **** 
 393:lib/chibios/os/rt/src/chmtx.c ****   chSysUnlock();
 394:lib/chibios/os/rt/src/chmtx.c **** }
 583              		.loc 2 394 0
 584 003a 38BD     		pop	{r3, r4, r5, pc}
 585              	.LVL44:
 586              	.L31:
 587              	.LBB163:
 588              	.LBB154:
 589              	.LBB155:
 590              	.LBB156:
 591              	.LBB157:
 577:./lib/chibios/os/rt/include/chschd.h **** }
 592              		.loc 1 577 0
 593 003c 1568     		ldr	r5, [r2]
 594              	.LVL45:
 595              	.LBE157:
 596              	.LBE156:
 597              	.LBE155:
 598              	.LBE154:
 358:lib/chibios/os/rt/src/chmtx.c ****             (lmp->queue.next->prio > newprio)) {
 599              		.loc 2 358 0
 600 003e AA42     		cmp	r2, r5
 601 0040 03D0     		beq	.L30
 602 0042 AD68     		ldr	r5, [r5, #8]
 603 0044 AC42     		cmp	r4, r5
 604 0046 38BF     		it	cc
 605 0048 2C46     		movcc	r4, r5
 606              	.LVL46:
 607              	.L30:
 362:lib/chibios/os/rt/src/chmtx.c ****       }
 608              		.loc 2 362 0
 609 004a D268     		ldr	r2, [r2, #12]
 610              	.LVL47:
 611 004c E5E7     		b	.L29
 612              	.LVL48:
 613              	.L28:
 614              	.LBE163:
 387:lib/chibios/os/rt/src/chmtx.c ****     }
 615              		.loc 2 387 0
 616 004e 0023     		movs	r3, #0
 617              	.LVL49:
 618 0050 8360     		str	r3, [r0, #8]
 619 0052 EFE7     		b	.L32
 620              	.L34:
 621              		.align	2
 622              	.L33:
 623 0054 00000000 		.word	ch
 624              		.cfi_endproc
 625              	.LFE253:
 627              		.section	.text.chMtxUnlockS,"ax",%progbits
 628              		.align	1
 629              		.global	chMtxUnlockS
 630              		.syntax unified
 631              		.thumb
 632              		.thumb_func
 633              		.fpu softvfp
 635              	chMtxUnlockS:
 636              	.LFB254:
 395:lib/chibios/os/rt/src/chmtx.c **** 
 396:lib/chibios/os/rt/src/chmtx.c **** /**
 397:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Unlocks the specified mutex.
 398:lib/chibios/os/rt/src/chmtx.c ****  * @note    Mutexes must be unlocked in reverse lock order. Violating this
 399:lib/chibios/os/rt/src/chmtx.c ****  *          rules will result in a panic if assertions are enabled.
 400:lib/chibios/os/rt/src/chmtx.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 401:lib/chibios/os/rt/src/chmtx.c ****  * @post    The mutex is unlocked and removed from the per-thread stack of
 402:lib/chibios/os/rt/src/chmtx.c ****  *          owned mutexes.
 403:lib/chibios/os/rt/src/chmtx.c ****  * @post    This function does not reschedule so a call to a rescheduling
 404:lib/chibios/os/rt/src/chmtx.c ****  *          function must be performed before unlocking the kernel.
 405:lib/chibios/os/rt/src/chmtx.c ****  *
 406:lib/chibios/os/rt/src/chmtx.c ****  * @param[in] mp        pointer to the @p mutex_t structure
 407:lib/chibios/os/rt/src/chmtx.c ****  *
 408:lib/chibios/os/rt/src/chmtx.c ****  * @sclass
 409:lib/chibios/os/rt/src/chmtx.c ****  */
 410:lib/chibios/os/rt/src/chmtx.c **** void chMtxUnlockS(mutex_t *mp) {
 637              		.loc 2 410 0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 0
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 641              		@ link register save eliminated.
 642              	.LVL50:
 411:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 643              		.loc 2 411 0
 644 0000 114A     		ldr	r2, .L40
 410:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 645              		.loc 2 410 0
 646 0002 0346     		mov	r3, r0
 647              		.loc 2 411 0
 648 0004 9169     		ldr	r1, [r2, #24]
 649              	.LVL51:
 412:lib/chibios/os/rt/src/chmtx.c ****   mutex_t *lmp;
 413:lib/chibios/os/rt/src/chmtx.c **** 
 414:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheckClassS();
 415:lib/chibios/os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 416:lib/chibios/os/rt/src/chmtx.c **** 
 417:lib/chibios/os/rt/src/chmtx.c ****   chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 418:lib/chibios/os/rt/src/chmtx.c ****   chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 419:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 420:lib/chibios/os/rt/src/chmtx.c ****   chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");
 421:lib/chibios/os/rt/src/chmtx.c **** 
 422:lib/chibios/os/rt/src/chmtx.c ****   if (--mp->cnt == (cnt_t)0) {
 423:lib/chibios/os/rt/src/chmtx.c **** #endif
 424:lib/chibios/os/rt/src/chmtx.c **** 
 425:lib/chibios/os/rt/src/chmtx.c ****     chDbgAssert(ctp->mtxlist == mp, "not next in list");
 426:lib/chibios/os/rt/src/chmtx.c **** 
 427:lib/chibios/os/rt/src/chmtx.c ****     /* Removes the top mutex from the thread's owned mutexes list and marks
 428:lib/chibios/os/rt/src/chmtx.c ****        it as not owned. Note, it is assumed to be the same mutex passed as
 429:lib/chibios/os/rt/src/chmtx.c ****        parameter of this function.*/
 430:lib/chibios/os/rt/src/chmtx.c ****     ctp->mtxlist = mp->next;
 650              		.loc 2 430 0
 651 0006 C268     		ldr	r2, [r0, #12]
 652              	.LBB164:
 653              	.LBB165:
 654              	.LBB166:
 655              	.LBB167:
 577:./lib/chibios/os/rt/include/chschd.h **** }
 656              		.loc 1 577 0
 657 0008 0068     		ldr	r0, [r0]
 658              	.LVL52:
 659              	.LBE167:
 660              	.LBE166:
 661              	.LBE165:
 662              	.LBE164:
 431:lib/chibios/os/rt/src/chmtx.c **** 
 432:lib/chibios/os/rt/src/chmtx.c ****     /* If a thread is waiting on the mutex then the fun part begins.*/
 433:lib/chibios/os/rt/src/chmtx.c ****     if (chMtxQueueNotEmptyS(mp)) {
 663              		.loc 2 433 0
 664 000a 9842     		cmp	r0, r3
 410:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 665              		.loc 2 410 0
 666 000c 30B4     		push	{r4, r5}
 667              		.cfi_def_cfa_offset 8
 668              		.cfi_offset 4, -8
 669              		.cfi_offset 5, -4
 430:lib/chibios/os/rt/src/chmtx.c **** 
 670              		.loc 2 430 0
 671 000e 8A63     		str	r2, [r1, #56]
 672              		.loc 2 433 0
 673 0010 15D0     		beq	.L36
 674              	.LBB168:
 434:lib/chibios/os/rt/src/chmtx.c ****       thread_t *tp;
 435:lib/chibios/os/rt/src/chmtx.c **** 
 436:lib/chibios/os/rt/src/chmtx.c ****       /* Recalculates the optimal thread priority by scanning the owned
 437:lib/chibios/os/rt/src/chmtx.c ****          mutexes list.*/
 438:lib/chibios/os/rt/src/chmtx.c ****       tprio_t newprio = ctp->realprio;
 675              		.loc 2 438 0
 676 0012 CC6B     		ldr	r4, [r1, #60]
 677              	.LVL53:
 678              	.L37:
 439:lib/chibios/os/rt/src/chmtx.c ****       lmp = ctp->mtxlist;
 440:lib/chibios/os/rt/src/chmtx.c ****       while (lmp != NULL) {
 679              		.loc 2 440 0
 680 0014 52B9     		cbnz	r2, .L39
 681              	.LBB169:
 682              	.LBB170:
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 683              		.loc 1 620 0
 684 0016 0268     		ldr	r2, [r0]
 685              	.LVL54:
 686              	.LBE170:
 687              	.LBE169:
 441:lib/chibios/os/rt/src/chmtx.c ****         /* If the highest priority thread waiting in the mutexes list has a
 442:lib/chibios/os/rt/src/chmtx.c ****            greater priority than the current thread base priority then the
 443:lib/chibios/os/rt/src/chmtx.c ****            final priority will have at least that priority.*/
 444:lib/chibios/os/rt/src/chmtx.c ****         if (chMtxQueueNotEmptyS(lmp) &&
 445:lib/chibios/os/rt/src/chmtx.c ****             (lmp->queue.next->prio > newprio)) {
 446:lib/chibios/os/rt/src/chmtx.c ****           newprio = lmp->queue.next->prio;
 447:lib/chibios/os/rt/src/chmtx.c ****         }
 448:lib/chibios/os/rt/src/chmtx.c ****         lmp = lmp->next;
 449:lib/chibios/os/rt/src/chmtx.c ****       }
 450:lib/chibios/os/rt/src/chmtx.c **** 
 451:lib/chibios/os/rt/src/chmtx.c ****       /* Assigns to the current thread the highest priority among all the
 452:lib/chibios/os/rt/src/chmtx.c ****          waiting threads.*/
 453:lib/chibios/os/rt/src/chmtx.c ****       ctp->prio = newprio;
 688              		.loc 2 453 0
 689 0018 8C60     		str	r4, [r1, #8]
 690              	.LVL55:
 691              	.LBB172:
 692              	.LBB171:
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 693              		.loc 1 620 0
 694 001a 1A60     		str	r2, [r3]
 621:./lib/chibios/os/rt/include/chschd.h **** 
 695              		.loc 1 621 0
 696 001c 5360     		str	r3, [r2, #4]
 697              	.LVL56:
 698              	.LBE171:
 699              	.LBE172:
 454:lib/chibios/os/rt/src/chmtx.c **** 
 455:lib/chibios/os/rt/src/chmtx.c ****       /* Awakens the highest priority thread waiting for the unlocked mutex and
 456:lib/chibios/os/rt/src/chmtx.c ****          assigns the mutex to it.*/
 457:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 458:lib/chibios/os/rt/src/chmtx.c ****       mp->cnt = (cnt_t)1;
 459:lib/chibios/os/rt/src/chmtx.c **** #endif
 460:lib/chibios/os/rt/src/chmtx.c ****       tp = queue_fifo_remove(&mp->queue);
 461:lib/chibios/os/rt/src/chmtx.c ****       mp->owner = tp;
 462:lib/chibios/os/rt/src/chmtx.c ****       mp->next = tp->mtxlist;
 700              		.loc 2 462 0
 701 001e 826B     		ldr	r2, [r0, #56]
 461:lib/chibios/os/rt/src/chmtx.c ****       mp->next = tp->mtxlist;
 702              		.loc 2 461 0
 703 0020 9860     		str	r0, [r3, #8]
 704              		.loc 2 462 0
 705 0022 DA60     		str	r2, [r3, #12]
 706              	.LBE168:
 463:lib/chibios/os/rt/src/chmtx.c ****       tp->mtxlist = mp;
 464:lib/chibios/os/rt/src/chmtx.c ****       (void) chSchReadyI(tp);
 465:lib/chibios/os/rt/src/chmtx.c ****     }
 466:lib/chibios/os/rt/src/chmtx.c ****     else {
 467:lib/chibios/os/rt/src/chmtx.c ****       mp->owner = NULL;
 468:lib/chibios/os/rt/src/chmtx.c ****     }
 469:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 470:lib/chibios/os/rt/src/chmtx.c ****   }
 471:lib/chibios/os/rt/src/chmtx.c **** #endif
 472:lib/chibios/os/rt/src/chmtx.c **** }
 707              		.loc 2 472 0
 708 0024 30BC     		pop	{r4, r5}
 709              		.cfi_remember_state
 710              		.cfi_restore 5
 711              		.cfi_restore 4
 712              		.cfi_def_cfa_offset 0
 713              	.LVL57:
 714              	.LBB177:
 463:lib/chibios/os/rt/src/chmtx.c ****       tp->mtxlist = mp;
 715              		.loc 2 463 0
 716 0026 8363     		str	r3, [r0, #56]
 464:lib/chibios/os/rt/src/chmtx.c ****     }
 717              		.loc 2 464 0
 718 0028 FFF7FEBF 		b	chSchReadyI
 719              	.LVL58:
 720              	.L39:
 721              		.cfi_restore_state
 722              	.LBB173:
 723              	.LBB174:
 724              	.LBB175:
 725              	.LBB176:
 577:./lib/chibios/os/rt/include/chschd.h **** }
 726              		.loc 1 577 0
 727 002c 1568     		ldr	r5, [r2]
 728              	.LVL59:
 729              	.LBE176:
 730              	.LBE175:
 731              	.LBE174:
 732              	.LBE173:
 444:lib/chibios/os/rt/src/chmtx.c ****             (lmp->queue.next->prio > newprio)) {
 733              		.loc 2 444 0
 734 002e AA42     		cmp	r2, r5
 735 0030 03D0     		beq	.L38
 736 0032 AD68     		ldr	r5, [r5, #8]
 737 0034 AC42     		cmp	r4, r5
 738 0036 38BF     		it	cc
 739 0038 2C46     		movcc	r4, r5
 740              	.LVL60:
 741              	.L38:
 448:lib/chibios/os/rt/src/chmtx.c ****       }
 742              		.loc 2 448 0
 743 003a D268     		ldr	r2, [r2, #12]
 744              	.LVL61:
 745 003c EAE7     		b	.L37
 746              	.LVL62:
 747              	.L36:
 748              	.LBE177:
 467:lib/chibios/os/rt/src/chmtx.c ****     }
 749              		.loc 2 467 0
 750 003e 0023     		movs	r3, #0
 751              	.LVL63:
 752 0040 8360     		str	r3, [r0, #8]
 753              		.loc 2 472 0
 754 0042 30BC     		pop	{r4, r5}
 755              		.cfi_restore 5
 756              		.cfi_restore 4
 757              		.cfi_def_cfa_offset 0
 758 0044 7047     		bx	lr
 759              	.L41:
 760 0046 00BF     		.align	2
 761              	.L40:
 762 0048 00000000 		.word	ch
 763              		.cfi_endproc
 764              	.LFE254:
 766              		.section	.text.chMtxUnlockAllS,"ax",%progbits
 767              		.align	1
 768              		.global	chMtxUnlockAllS
 769              		.syntax unified
 770              		.thumb
 771              		.thumb_func
 772              		.fpu softvfp
 774              	chMtxUnlockAllS:
 775              	.LFB255:
 473:lib/chibios/os/rt/src/chmtx.c **** 
 474:lib/chibios/os/rt/src/chmtx.c **** /**
 475:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Unlocks all mutexes owned by the invoking thread.
 476:lib/chibios/os/rt/src/chmtx.c ****  * @post    The stack of owned mutexes is emptied and all the found
 477:lib/chibios/os/rt/src/chmtx.c ****  *          mutexes are unlocked.
 478:lib/chibios/os/rt/src/chmtx.c ****  * @post    This function does not reschedule so a call to a rescheduling
 479:lib/chibios/os/rt/src/chmtx.c ****  *          function must be performed before unlocking the kernel.
 480:lib/chibios/os/rt/src/chmtx.c ****  * @note    This function is <b>MUCH MORE</b> efficient than releasing the
 481:lib/chibios/os/rt/src/chmtx.c ****  *          mutexes one by one and not just because the call overhead,
 482:lib/chibios/os/rt/src/chmtx.c ****  *          this function does not have any overhead related to the priority
 483:lib/chibios/os/rt/src/chmtx.c ****  *          inheritance mechanism.
 484:lib/chibios/os/rt/src/chmtx.c ****  *
 485:lib/chibios/os/rt/src/chmtx.c ****  * @sclass
 486:lib/chibios/os/rt/src/chmtx.c ****  */
 487:lib/chibios/os/rt/src/chmtx.c **** void chMtxUnlockAllS(void) {
 776              		.loc 2 487 0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 0
 779              		@ frame_needed = 0, uses_anonymous_args = 0
 780 0000 38B5     		push	{r3, r4, r5, lr}
 781              		.cfi_def_cfa_offset 16
 782              		.cfi_offset 3, -16
 783              		.cfi_offset 4, -12
 784              		.cfi_offset 5, -8
 785              		.cfi_offset 14, -4
 488:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 786              		.loc 2 488 0
 787 0002 0C4B     		ldr	r3, .L47
 788 0004 9C69     		ldr	r4, [r3, #24]
 789              	.LVL64:
 790              	.LBB178:
 489:lib/chibios/os/rt/src/chmtx.c **** 
 490:lib/chibios/os/rt/src/chmtx.c ****   while (ctp->mtxlist != NULL) {
 491:lib/chibios/os/rt/src/chmtx.c ****     mutex_t *mp = ctp->mtxlist;
 492:lib/chibios/os/rt/src/chmtx.c ****     ctp->mtxlist = mp->next;
 493:lib/chibios/os/rt/src/chmtx.c ****     if (chMtxQueueNotEmptyS(mp)) {
 494:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 495:lib/chibios/os/rt/src/chmtx.c ****       mp->cnt = (cnt_t)1;
 496:lib/chibios/os/rt/src/chmtx.c **** #endif
 497:lib/chibios/os/rt/src/chmtx.c ****       thread_t *tp = queue_fifo_remove(&mp->queue);
 498:lib/chibios/os/rt/src/chmtx.c ****       mp->owner = tp;
 499:lib/chibios/os/rt/src/chmtx.c ****       mp->next = tp->mtxlist;
 500:lib/chibios/os/rt/src/chmtx.c ****       tp->mtxlist = mp;
 501:lib/chibios/os/rt/src/chmtx.c ****       (void) chSchReadyI(tp);
 502:lib/chibios/os/rt/src/chmtx.c ****     }
 503:lib/chibios/os/rt/src/chmtx.c ****     else {
 504:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 505:lib/chibios/os/rt/src/chmtx.c ****       mp->cnt = (cnt_t)0;
 506:lib/chibios/os/rt/src/chmtx.c **** #endif
 507:lib/chibios/os/rt/src/chmtx.c ****       mp->owner = NULL;
 791              		.loc 2 507 0
 792 0006 0025     		movs	r5, #0
 793              	.L43:
 794              	.LBE178:
 490:lib/chibios/os/rt/src/chmtx.c ****     mutex_t *mp = ctp->mtxlist;
 795              		.loc 2 490 0
 796 0008 A36B     		ldr	r3, [r4, #56]
 797 000a 13B9     		cbnz	r3, .L46
 508:lib/chibios/os/rt/src/chmtx.c ****     }
 509:lib/chibios/os/rt/src/chmtx.c ****   }
 510:lib/chibios/os/rt/src/chmtx.c ****   ctp->prio = ctp->realprio;
 798              		.loc 2 510 0
 799 000c E36B     		ldr	r3, [r4, #60]
 800 000e A360     		str	r3, [r4, #8]
 511:lib/chibios/os/rt/src/chmtx.c **** }
 801              		.loc 2 511 0
 802 0010 38BD     		pop	{r3, r4, r5, pc}
 803              	.LVL65:
 804              	.L46:
 805              	.LBB186:
 806              	.LBB179:
 807              	.LBB180:
 808              	.LBB181:
 809              	.LBB182:
 577:./lib/chibios/os/rt/include/chschd.h **** }
 810              		.loc 1 577 0
 811 0012 1868     		ldr	r0, [r3]
 812              	.LBE182:
 813              	.LBE181:
 814              	.LBE180:
 815              	.LBE179:
 492:lib/chibios/os/rt/src/chmtx.c ****     if (chMtxQueueNotEmptyS(mp)) {
 816              		.loc 2 492 0
 817 0014 DA68     		ldr	r2, [r3, #12]
 818 0016 A263     		str	r2, [r4, #56]
 819              	.LVL66:
 493:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 820              		.loc 2 493 0
 821 0018 8342     		cmp	r3, r0
 822 001a 09D0     		beq	.L44
 823              	.LVL67:
 824              	.LBB183:
 825              	.LBB184:
 826              	.LBB185:
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 827              		.loc 1 620 0
 828 001c 0268     		ldr	r2, [r0]
 829 001e 1A60     		str	r2, [r3]
 621:./lib/chibios/os/rt/include/chschd.h **** 
 830              		.loc 1 621 0
 831 0020 5360     		str	r3, [r2, #4]
 832              	.LVL68:
 833              	.LBE185:
 834              	.LBE184:
 499:lib/chibios/os/rt/src/chmtx.c ****       tp->mtxlist = mp;
 835              		.loc 2 499 0
 836 0022 826B     		ldr	r2, [r0, #56]
 498:lib/chibios/os/rt/src/chmtx.c ****       mp->next = tp->mtxlist;
 837              		.loc 2 498 0
 838 0024 9860     		str	r0, [r3, #8]
 499:lib/chibios/os/rt/src/chmtx.c ****       tp->mtxlist = mp;
 839              		.loc 2 499 0
 840 0026 DA60     		str	r2, [r3, #12]
 500:lib/chibios/os/rt/src/chmtx.c ****       (void) chSchReadyI(tp);
 841              		.loc 2 500 0
 842 0028 8363     		str	r3, [r0, #56]
 501:lib/chibios/os/rt/src/chmtx.c ****     }
 843              		.loc 2 501 0
 844 002a FFF7FEFF 		bl	chSchReadyI
 845              	.LVL69:
 846              	.LBE183:
 847 002e EBE7     		b	.L43
 848              	.LVL70:
 849              	.L44:
 507:lib/chibios/os/rt/src/chmtx.c ****     }
 850              		.loc 2 507 0
 851 0030 9D60     		str	r5, [r3, #8]
 852 0032 E9E7     		b	.L43
 853              	.L48:
 854              		.align	2
 855              	.L47:
 856 0034 00000000 		.word	ch
 857              	.LBE186:
 858              		.cfi_endproc
 859              	.LFE255:
 861              		.section	.text.chMtxUnlockAll,"ax",%progbits
 862              		.align	1
 863              		.global	chMtxUnlockAll
 864              		.syntax unified
 865              		.thumb
 866              		.thumb_func
 867              		.fpu softvfp
 869              	chMtxUnlockAll:
 870              	.LFB256:
 512:lib/chibios/os/rt/src/chmtx.c **** 
 513:lib/chibios/os/rt/src/chmtx.c **** /**
 514:lib/chibios/os/rt/src/chmtx.c ****  * @brief   Unlocks all mutexes owned by the invoking thread.
 515:lib/chibios/os/rt/src/chmtx.c ****  * @post    The stack of owned mutexes is emptied and all the found
 516:lib/chibios/os/rt/src/chmtx.c ****  *          mutexes are unlocked.
 517:lib/chibios/os/rt/src/chmtx.c ****  * @note    This function is <b>MUCH MORE</b> efficient than releasing the
 518:lib/chibios/os/rt/src/chmtx.c ****  *          mutexes one by one and not just because the call overhead,
 519:lib/chibios/os/rt/src/chmtx.c ****  *          this function does not have any overhead related to the priority
 520:lib/chibios/os/rt/src/chmtx.c ****  *          inheritance mechanism.
 521:lib/chibios/os/rt/src/chmtx.c ****  *
 522:lib/chibios/os/rt/src/chmtx.c ****  * @api
 523:lib/chibios/os/rt/src/chmtx.c ****  */
 524:lib/chibios/os/rt/src/chmtx.c **** void chMtxUnlockAll(void) {
 871              		.loc 2 524 0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 0
 874              		@ frame_needed = 0, uses_anonymous_args = 0
 875 0000 38B5     		push	{r3, r4, r5, lr}
 876              		.cfi_def_cfa_offset 16
 877              		.cfi_offset 3, -16
 878              		.cfi_offset 4, -12
 879              		.cfi_offset 5, -8
 880              		.cfi_offset 14, -4
 525:lib/chibios/os/rt/src/chmtx.c ****   thread_t *ctp = currp;
 881              		.loc 2 525 0
 882 0002 124B     		ldr	r3, .L58
 883 0004 9C69     		ldr	r4, [r3, #24]
 884              	.LVL71:
 885              	.LBB187:
 886              	.LBB188:
 887              	.LBB189:
 888              	.LBB190:
 889              		.loc 3 264 0
 890 0006 2023     		movs	r3, #32
 891              		.syntax unified
 892              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 893 0008 83F31188 		MSR basepri, r3
 894              	@ 0 "" 2
 895              	.LVL72:
 896              		.thumb
 897              		.syntax unified
 898              	.LBE190:
 899              	.LBE189:
 900              	.LBE188:
 901              	.LBE187:
 526:lib/chibios/os/rt/src/chmtx.c **** 
 527:lib/chibios/os/rt/src/chmtx.c ****   chSysLock();
 528:lib/chibios/os/rt/src/chmtx.c ****   if (ctp->mtxlist != NULL) {
 902              		.loc 2 528 0
 903 000c A36B     		ldr	r3, [r4, #56]
 904 000e B3B1     		cbz	r3, .L50
 905              	.LBB191:
 529:lib/chibios/os/rt/src/chmtx.c ****     do {
 530:lib/chibios/os/rt/src/chmtx.c ****       mutex_t *mp = ctp->mtxlist;
 531:lib/chibios/os/rt/src/chmtx.c ****       ctp->mtxlist = mp->next;
 532:lib/chibios/os/rt/src/chmtx.c ****       if (chMtxQueueNotEmptyS(mp)) {
 533:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 534:lib/chibios/os/rt/src/chmtx.c ****         mp->cnt = (cnt_t)1;
 535:lib/chibios/os/rt/src/chmtx.c **** #endif
 536:lib/chibios/os/rt/src/chmtx.c ****         thread_t *tp = queue_fifo_remove(&mp->queue);
 537:lib/chibios/os/rt/src/chmtx.c ****         mp->owner = tp;
 538:lib/chibios/os/rt/src/chmtx.c ****         mp->next = tp->mtxlist;
 539:lib/chibios/os/rt/src/chmtx.c ****         tp->mtxlist = mp;
 540:lib/chibios/os/rt/src/chmtx.c ****         (void) chSchReadyI(tp);
 541:lib/chibios/os/rt/src/chmtx.c ****       }
 542:lib/chibios/os/rt/src/chmtx.c ****       else {
 543:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 544:lib/chibios/os/rt/src/chmtx.c ****         mp->cnt = (cnt_t)0;
 545:lib/chibios/os/rt/src/chmtx.c **** #endif
 546:lib/chibios/os/rt/src/chmtx.c ****         mp->owner = NULL;
 906              		.loc 2 546 0
 907 0010 0025     		movs	r5, #0
 908              	.L53:
 530:lib/chibios/os/rt/src/chmtx.c ****       ctp->mtxlist = mp->next;
 909              		.loc 2 530 0
 910 0012 A36B     		ldr	r3, [r4, #56]
 911              	.LVL73:
 912              	.LBB192:
 913              	.LBB193:
 914              	.LBB194:
 915              	.LBB195:
 577:./lib/chibios/os/rt/include/chschd.h **** }
 916              		.loc 1 577 0
 917 0014 1868     		ldr	r0, [r3]
 918              	.LBE195:
 919              	.LBE194:
 920              	.LBE193:
 921              	.LBE192:
 531:lib/chibios/os/rt/src/chmtx.c ****       if (chMtxQueueNotEmptyS(mp)) {
 922              		.loc 2 531 0
 923 0016 DA68     		ldr	r2, [r3, #12]
 924 0018 A263     		str	r2, [r4, #56]
 925              	.LVL74:
 532:lib/chibios/os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 926              		.loc 2 532 0
 927 001a 8342     		cmp	r3, r0
 928 001c 13D0     		beq	.L51
 929              	.LVL75:
 930              	.LBB196:
 931              	.LBB197:
 932              	.LBB198:
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 933              		.loc 1 620 0
 934 001e 0268     		ldr	r2, [r0]
 935 0020 1A60     		str	r2, [r3]
 621:./lib/chibios/os/rt/include/chschd.h **** 
 936              		.loc 1 621 0
 937 0022 5360     		str	r3, [r2, #4]
 938              	.LVL76:
 939              	.LBE198:
 940              	.LBE197:
 538:lib/chibios/os/rt/src/chmtx.c ****         tp->mtxlist = mp;
 941              		.loc 2 538 0
 942 0024 826B     		ldr	r2, [r0, #56]
 537:lib/chibios/os/rt/src/chmtx.c ****         mp->next = tp->mtxlist;
 943              		.loc 2 537 0
 944 0026 9860     		str	r0, [r3, #8]
 538:lib/chibios/os/rt/src/chmtx.c ****         tp->mtxlist = mp;
 945              		.loc 2 538 0
 946 0028 DA60     		str	r2, [r3, #12]
 539:lib/chibios/os/rt/src/chmtx.c ****         (void) chSchReadyI(tp);
 947              		.loc 2 539 0
 948 002a 8363     		str	r3, [r0, #56]
 540:lib/chibios/os/rt/src/chmtx.c ****       }
 949              		.loc 2 540 0
 950 002c FFF7FEFF 		bl	chSchReadyI
 951              	.LVL77:
 952              	.L52:
 953              	.LBE196:
 954              	.LBE191:
 547:lib/chibios/os/rt/src/chmtx.c ****       }
 548:lib/chibios/os/rt/src/chmtx.c ****     } while (ctp->mtxlist != NULL);
 955              		.loc 2 548 0
 956 0030 A36B     		ldr	r3, [r4, #56]
 957 0032 002B     		cmp	r3, #0
 958 0034 EDD1     		bne	.L53
 549:lib/chibios/os/rt/src/chmtx.c ****     ctp->prio = ctp->realprio;
 959              		.loc 2 549 0
 960 0036 E36B     		ldr	r3, [r4, #60]
 961 0038 A360     		str	r3, [r4, #8]
 550:lib/chibios/os/rt/src/chmtx.c ****     chSchRescheduleS();
 962              		.loc 2 550 0
 963 003a FFF7FEFF 		bl	chSchRescheduleS
 964              	.LVL78:
 965              	.L50:
 966              	.LBB199:
 967              	.LBB200:
 968              	.LBB201:
 969              	.LBB202:
 970              	.LBB203:
 971              		.loc 3 264 0
 972 003e 0023     		movs	r3, #0
 973              		.syntax unified
 974              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 975 0040 83F31188 		MSR basepri, r3
 976              	@ 0 "" 2
 977              	.LVL79:
 978              		.thumb
 979              		.syntax unified
 980              	.LBE203:
 981              	.LBE202:
 982              	.LBE201:
 983              	.LBE200:
 984              	.LBE199:
 551:lib/chibios/os/rt/src/chmtx.c ****   }
 552:lib/chibios/os/rt/src/chmtx.c ****   chSysUnlock();
 553:lib/chibios/os/rt/src/chmtx.c **** }
 985              		.loc 2 553 0
 986 0044 38BD     		pop	{r3, r4, r5, pc}
 987              	.LVL80:
 988              	.L51:
 989              	.LBB204:
 546:lib/chibios/os/rt/src/chmtx.c ****       }
 990              		.loc 2 546 0
 991 0046 9D60     		str	r5, [r3, #8]
 992 0048 F2E7     		b	.L52
 993              	.L59:
 994 004a 00BF     		.align	2
 995              	.L58:
 996 004c 00000000 		.word	ch
 997              	.LBE204:
 998              		.cfi_endproc
 999              	.LFE256:
 1001              		.text
 1002              	.Letext0:
 1003              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 1004              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 1005              		.file 6 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 1006              		.file 7 "./lib/chibios/os/rt/include/chsystypes.h"
 1007              		.file 8 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 1008              		.file 9 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 1009              		.file 10 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 1010              		.file 11 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 1011              		.file 12 "./lib/chibios/os/rt/include/chtm.h"
 1012              		.file 13 "./lib/chibios/os/rt/include/chsem.h"
 1013              		.file 14 "./lib/chibios/os/rt/include/chmtx.h"
 1014              		.file 15 "./lib/chibios/os/rt/include/chsys.h"
 1015              		.file 16 "./lib/chibios/os/rt/include/chregistry.h"
 1016              		.file 17 "./lib/chibios/os/common/oslib/include/chmemcore.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmtx.c
/var/tmp//cckgivPS.s:16     .text.queue_prio_insert:0000000000000000 $t
/var/tmp//cckgivPS.s:22     .text.queue_prio_insert:0000000000000000 queue_prio_insert
/var/tmp//cckgivPS.s:66     .text.chMtxObjectInit:0000000000000000 $t
/var/tmp//cckgivPS.s:73     .text.chMtxObjectInit:0000000000000000 chMtxObjectInit
/var/tmp//cckgivPS.s:99     .text.chMtxLockS:0000000000000000 $t
/var/tmp//cckgivPS.s:106    .text.chMtxLockS:0000000000000000 chMtxLockS
/var/tmp//cckgivPS.s:185    .text.chMtxLockS:0000000000000044 $d
/var/tmp//cckgivPS.s:198    .text.chMtxLockS:0000000000000078 $t
/var/tmp//cckgivPS.s:275    .text.chMtxLockS:00000000000000b0 $d
/var/tmp//cckgivPS.s:281    .text.chMtxLock:0000000000000000 $t
/var/tmp//cckgivPS.s:288    .text.chMtxLock:0000000000000000 chMtxLock
/var/tmp//cckgivPS.s:345    .text.chMtxTryLockS:0000000000000000 $t
/var/tmp//cckgivPS.s:352    .text.chMtxTryLockS:0000000000000000 chMtxTryLockS
/var/tmp//cckgivPS.s:391    .text.chMtxTryLockS:0000000000000018 $d
/var/tmp//cckgivPS.s:396    .text.chMtxTryLock:0000000000000000 $t
/var/tmp//cckgivPS.s:403    .text.chMtxTryLock:0000000000000000 chMtxTryLock
/var/tmp//cckgivPS.s:459    .text.chMtxUnlock:0000000000000000 $t
/var/tmp//cckgivPS.s:466    .text.chMtxUnlock:0000000000000000 chMtxUnlock
/var/tmp//cckgivPS.s:623    .text.chMtxUnlock:0000000000000054 $d
/var/tmp//cckgivPS.s:628    .text.chMtxUnlockS:0000000000000000 $t
/var/tmp//cckgivPS.s:635    .text.chMtxUnlockS:0000000000000000 chMtxUnlockS
/var/tmp//cckgivPS.s:762    .text.chMtxUnlockS:0000000000000048 $d
/var/tmp//cckgivPS.s:767    .text.chMtxUnlockAllS:0000000000000000 $t
/var/tmp//cckgivPS.s:774    .text.chMtxUnlockAllS:0000000000000000 chMtxUnlockAllS
/var/tmp//cckgivPS.s:856    .text.chMtxUnlockAllS:0000000000000034 $d
/var/tmp//cckgivPS.s:862    .text.chMtxUnlockAll:0000000000000000 $t
/var/tmp//cckgivPS.s:869    .text.chMtxUnlockAll:0000000000000000 chMtxUnlockAll
/var/tmp//cckgivPS.s:996    .text.chMtxUnlockAll:000000000000004c $d

UNDEFINED SYMBOLS
chSchGoSleepS
chSchReadyI
ch
chSchRescheduleS
