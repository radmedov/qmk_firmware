   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"hal_st_lld.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.VectorB0,"ax",%progbits
  16              		.align	1
  17              		.global	VectorB0
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	VectorB0:
  24              	.LFB279:
  25              		.file 1 "lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c"
   1:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*
   2:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
   4:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     you may not use this file except in compliance with the License.
   6:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     You may obtain a copy of the License at
   7:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
   8:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  10:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     Unless required by applicable law or agreed to in writing, software
  11:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     See the License for the specific language governing permissions and
  14:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     limitations under the License.
  15:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** */
  16:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  17:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /**
  18:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @file    TIMv1/hal_st_lld.c
  19:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @brief   ST Driver subsystem low level driver code.
  20:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  *
  21:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @addtogroup ST
  22:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @{
  23:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  */
  24:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  25:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #include "hal.h"
  26:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  27:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
  28:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  29:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
  30:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /* Driver local definitions.                                                 */
  31:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
  32:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  33:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  34:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  35:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32)
  36:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ARR_INIT                         0xFFFFFFFF
  37:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
  38:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ARR_INIT                         0x0000FFFF
  39:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
  40:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  41:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if STM32_ST_USE_TIMER == 2
  42:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM2_IS_32BITS
  43:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM2 is not a 32bits timer"
  44:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
  45:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  46:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32_TIM2_IS_USED)
  47:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "ST requires TIM2 but the timer is already used"
  48:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
  49:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define STM32_TIM2_IS_USED
  50:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
  51:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  52:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM2_HANDLER
  53:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM2_NUMBER
  54:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK1
  55:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM2(FALSE)
  56:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32F1XX)
  57:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->CR |= DBGMCU_CR_DBG_TIM2_STOP
  58:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32L4XX)
  59:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZR1 |= DBGMCU_APB1FZR1_DBG_TIM2_STOP
  60:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
  61:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM2_STOP
  62:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
  63:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  64:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif STM32_ST_USE_TIMER == 3
  65:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM3_IS_32BITS
  66:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM3 is not a 32bits timer"
  67:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
  68:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  69:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32_TIM3_IS_USED)
  70:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "ST requires TIM3 but the timer is already used"
  71:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
  72:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define STM32_TIM3_IS_USED
  73:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
  74:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  75:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM3_HANDLER
  76:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM3_NUMBER
  77:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK1
  78:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM3(FALSE)
  79:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32F1XX)
  80:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->CR |= DBGMCU_CR_DBG_TIM3_STOP
  81:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32L4XX)
  82:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZR1 |= DBGMCU_APB1FZR1_DBG_TIM3_STOP
  83:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
  84:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM3_STOP
  85:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
  86:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  87:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif STM32_ST_USE_TIMER == 4
  88:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM4_IS_32BITS
  89:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM4 is not a 32bits timer"
  90:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
  91:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  92:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32_TIM4_IS_USED)
  93:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "ST requires TIM4 but the timer is already used"
  94:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
  95:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define STM32_TIM4_IS_USED
  96:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
  97:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  98:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM4_HANDLER
  99:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM4_NUMBER
 100:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK1
 101:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM4(FALSE)
 102:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32F1XX)
 103:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->CR |= DBGMCU_CR_DBG_TIM4_STOP
 104:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32L4XX)
 105:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZR1 |= DBGMCU_APB1FZR1_DBG_TIM4_STOP
 106:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
 107:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM4_STOP
 108:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 109:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 110:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif STM32_ST_USE_TIMER == 5
 111:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM5_IS_32BITS
 112:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM5 is not a 32bits timer"
 113:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 114:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 115:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32_TIM5_IS_USED)
 116:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "ST requires TIM5 but the timer is already used"
 117:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
 118:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define STM32_TIM5_IS_USED
 119:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 120:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 121:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM5_HANDLER
 122:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM5_NUMBER
 123:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK1
 124:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM5(FALSE)
 125:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32F1XX)
 126:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->CR |= DBGMCU_CR_DBG_TIM5_STOP
 127:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif defined(STM32L4XX)
 128:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZR1 |= DBGMCU_APB1FZR1_DBG_TIM5_STOP
 129:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
 130:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_TIM5_STOP
 131:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 132:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 133:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif STM32_ST_USE_TIMER == 21
 134:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM21_IS_32BITS
 135:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM21 is not a 32bits timer"
 136:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 137:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 138:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32_TIM21_IS_USED)
 139:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "ST requires TIM21 but the timer is already used"
 140:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
 141:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define STM32_TIM21_IS_USED
 142:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 143:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 144:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM21_HANDLER
 145:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM21_NUMBER
 146:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK2
 147:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM21(FALSE)
 148:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZ |= DBGMCU_APB2_FZ_DBG_TIM21_STOP
 149:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 150:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #elif STM32_ST_USE_TIMER == 22
 151:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_RESOLUTION == 32) && !STM32_TIM22_IS_32BITS
 152:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "TIM21 is not a 32bits timer"
 153:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 154:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 155:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if defined(STM32_TIM22_IS_USED)
 156:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "ST requires TIM22 but the timer is already used"
 157:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
 158:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define STM32_TIM22_IS_USED
 159:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 160:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 161:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_HANDLER                          STM32_TIM22_HANDLER
 162:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_NUMBER                           STM32_TIM22_NUMBER
 163:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_CLOCK_SRC                        STM32_TIMCLK2
 164:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_CLOCK()                   rccEnableTIM22(FALSE)
 165:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #define ST_ENABLE_STOP()                    DBGMCU->APB1FZ |= DBGMCU_APB2_FZ_DBG_TIM21_STOP
 166:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 167:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #else
 168:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "STM32_ST_USE_TIMER specifies an unsupported timer"
 169:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 170:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 171:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if ST_CLOCK_SRC % OSAL_ST_FREQUENCY != 0
 172:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "the selected ST frequency is not obtainable because integer rounding"
 173:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 174:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 175:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1 > 0xFFFF
 176:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "the selected ST frequency is not obtainable because TIM timer prescaler limits"
 177:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 178:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 179:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */
 180:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 181:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
 182:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 183:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if STM32_HCLK % OSAL_ST_FREQUENCY != 0
 184:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "the selected ST frequency is not obtainable because integer rounding"
 185:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 186:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 187:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (STM32_HCLK / OSAL_ST_FREQUENCY) - 1 > 0xFFFFFF
 188:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #error "the selected ST frequency is not obtainable because SysTick timer counter limits"
 189:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif
 190:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 191:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
 192:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 193:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 194:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /* Driver exported variables.                                                */
 195:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 196:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 197:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 198:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /* Driver local types.                                                       */
 199:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 200:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 201:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 202:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /* Driver local variables and types.                                         */
 203:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 204:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 205:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 206:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /* Driver local functions.                                                   */
 207:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 208:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 209:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 210:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /* Driver interrupt handlers.                                                */
 211:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 212:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 213:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) || defined(__DOXYGEN__)
 214:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /**
 215:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @brief   System Timer vector.
 216:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @details This interrupt is used for system tick in periodic mode.
 217:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  *
 218:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @isr
 219:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  */
 220:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** OSAL_IRQ_HANDLER(SysTick_Handler) {
 221:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 222:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   OSAL_IRQ_PROLOGUE();
 223:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 224:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   osalSysLockFromISR();
 225:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   osalOsTimerHandlerI();
 226:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   osalSysUnlockFromISR();
 227:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 228:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   OSAL_IRQ_EPILOGUE();
 229:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** }
 230:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
 231:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 232:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if (OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING) || defined(__DOXYGEN__)
 233:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /**
 234:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @brief   TIM2 interrupt handler.
 235:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @details This interrupt is used for system tick in free running mode.
 236:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  *
 237:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @isr
 238:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  */
 239:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** OSAL_IRQ_HANDLER(ST_HANDLER) {
  26              		.loc 1 239 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
 240:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 241:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   OSAL_IRQ_PROLOGUE();
 242:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 243:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   /* Note, under rare circumstances an interrupt can remain latched even if
 244:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****      the timer SR register has been cleared, in those cases the interrupt
 245:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****      is simply ignored.*/
 246:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
  30              		.loc 1 246 0
  31 0000 4FF08043 		mov	r3, #1073741824
 239:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
  32              		.loc 1 239 0
  33 0004 10B5     		push	{r4, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37              		.loc 1 246 0
  38 0006 1A69     		ldr	r2, [r3, #16]
  39 0008 9207     		lsls	r2, r2, #30
  40 000a 08D5     		bpl	.L2
 247:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     STM32_ST_TIM->SR = 0U;
  41              		.loc 1 247 0
  42 000c 0024     		movs	r4, #0
  43 000e 1C61     		str	r4, [r3, #16]
  44              	.LVL0:
  45              	.LBB52:
  46              	.LBB53:
  47              	.LBB54:
  48              	.LBB55:
  49              	.LBB56:
  50              	.LBB57:
  51              		.file 2 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @version  V4.30
   5:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
   9:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    All rights reserved.
  10:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      specific prior written permission.
  20:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    *
  21:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  35:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  38:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #endif
  45:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  46:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  47:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   @{
  51:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  52:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  53:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  54:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  58:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  60:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  62:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  63:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  64:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  65:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  69:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  71:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  73:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  74:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  75:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  76:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Control Register value
  79:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  80:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  82:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
  83:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  84:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
  86:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  87:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  88:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  89:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  90:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  94:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  96:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  98:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  99:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 100:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 101:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 105:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 107:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 108:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 109:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 111:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 112:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 113:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 114:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 115:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               APSR Register value
 118:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 119:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 121:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 122:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 123:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 125:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 126:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 127:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 128:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 129:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 132:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 134:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 136:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 137:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 138:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 140:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 141:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 142:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 143:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 144:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               PSP Register value
 147:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 148:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 150:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 151:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 154:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 155:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 156:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 157:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 158:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 162:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 164:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 166:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 167:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 168:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 169:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               MSP Register value
 172:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 173:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 175:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 176:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 177:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 179:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 180:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 181:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 182:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 183:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 188:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 190:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 192:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 193:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 194:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 195:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 199:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 201:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 202:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 203:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 205:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 206:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 207:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 208:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 209:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 213:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 215:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 217:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 218:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 219:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 221:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 222:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 226:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 228:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 230:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 231:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 232:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 233:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 237:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 239:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 241:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 243:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 244:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 248:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 250:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 251:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 252:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 254:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 255:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 257:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  52              		.loc 2 264 0
  53 0010 2023     		movs	r3, #32
  54              		.syntax unified
  55              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
  56 0012 83F31188 		MSR basepri, r3
  57              	@ 0 "" 2
  58              	.LVL1:
  59              		.thumb
  60              		.syntax unified
  61              	.LBE57:
  62              	.LBE56:
  63              	.LBE55:
  64              	.LBE54:
  65              	.LBE53:
  66              	.LBE52:
  67              	.LBB58:
  68              	.LBB59:
  69              		.file 3 "./lib/chibios/os/hal/osal/rt/osal.h"
   1:./lib/chibios/os/hal/osal/rt/osal.h **** /*
   2:./lib/chibios/os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:./lib/chibios/os/hal/osal/rt/osal.h **** 
   4:./lib/chibios/os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:./lib/chibios/os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:./lib/chibios/os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:./lib/chibios/os/hal/osal/rt/osal.h **** 
   8:./lib/chibios/os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:./lib/chibios/os/hal/osal/rt/osal.h **** 
  10:./lib/chibios/os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:./lib/chibios/os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:./lib/chibios/os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:./lib/chibios/os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:./lib/chibios/os/hal/osal/rt/osal.h ****     limitations under the License.
  15:./lib/chibios/os/hal/osal/rt/osal.h **** */
  16:./lib/chibios/os/hal/osal/rt/osal.h **** 
  17:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  18:./lib/chibios/os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:./lib/chibios/os/hal/osal/rt/osal.h ****  *
  21:./lib/chibios/os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  23:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  24:./lib/chibios/os/hal/osal/rt/osal.h **** 
  25:./lib/chibios/os/hal/osal/rt/osal.h **** #ifndef _OSAL_H_
  26:./lib/chibios/os/hal/osal/rt/osal.h **** #define _OSAL_H_
  27:./lib/chibios/os/hal/osal/rt/osal.h **** 
  28:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:./lib/chibios/os/hal/osal/rt/osal.h **** 
  32:./lib/chibios/os/hal/osal/rt/osal.h **** #include "ch.h"
  33:./lib/chibios/os/hal/osal/rt/osal.h **** 
  34:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:./lib/chibios/os/hal/osal/rt/osal.h **** 
  38:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  39:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  41:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  42:./lib/chibios/os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:./lib/chibios/os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  45:./lib/chibios/os/hal/osal/rt/osal.h **** 
  46:./lib/chibios/os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:./lib/chibios/os/hal/osal/rt/osal.h **** #define TRUE                                (!FALSE)
  48:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  49:./lib/chibios/os/hal/osal/rt/osal.h **** 
  50:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        FALSE
  51:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         TRUE
  52:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  53:./lib/chibios/os/hal/osal/rt/osal.h **** 
  54:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
  55:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  56:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Messages
  57:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  58:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  59:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_OK                              RDY_OK
  60:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_RESET                           RDY_RESET
  61:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         RDY_TIMEOUT
  62:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  63:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  64:./lib/chibios/os/hal/osal/rt/osal.h **** 
  65:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
  66:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  67:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  69:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  70:./lib/chibios/os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((systime_t)0)
  71:./lib/chibios/os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((systime_t)-1)
  72:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  73:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  74:./lib/chibios/os/hal/osal/rt/osal.h **** 
  75:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  76:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  78:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  79:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  83:./lib/chibios/os/hal/osal/rt/osal.h **** 
  84:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  85:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  87:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  88:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  89:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  91:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:./lib/chibios/os/hal/osal/rt/osal.h **** 
  93:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  94:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  96:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:./lib/chibios/os/hal/osal/rt/osal.h **** 
  98:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  99:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 101:./lib/chibios/os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 104:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 106:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 107:./lib/chibios/os/hal/osal/rt/osal.h **** 
 108:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:./lib/chibios/os/hal/osal/rt/osal.h **** 
 112:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:./lib/chibios/os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:./lib/chibios/os/hal/osal/rt/osal.h **** 
 116:./lib/chibios/os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:./lib/chibios/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:./lib/chibios/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:./lib/chibios/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 121:./lib/chibios/os/hal/osal/rt/osal.h **** 
 122:./lib/chibios/os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:./lib/chibios/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 125:./lib/chibios/os/hal/osal/rt/osal.h **** 
 126:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:./lib/chibios/os/hal/osal/rt/osal.h **** 
 130:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 131:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 132:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 134:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 136:./lib/chibios/os/hal/osal/rt/osal.h **** 
 137:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 138:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 139:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 141:./lib/chibios/os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 143:./lib/chibios/os/hal/osal/rt/osal.h **** 
 144:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 145:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 146:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 148:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 150:./lib/chibios/os/hal/osal/rt/osal.h **** 
 151:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 152:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 153:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 154:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 155:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 156:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 157:./lib/chibios/os/hal/osal/rt/osal.h **** 
 158:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 159:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 160:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 161:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 162:./lib/chibios/os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 163:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 164:./lib/chibios/os/hal/osal/rt/osal.h **** 
 165:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 166:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 167:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 168:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 169:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 170:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 171:./lib/chibios/os/hal/osal/rt/osal.h **** 
 172:./lib/chibios/os/hal/osal/rt/osal.h **** #if !CH_CFG_USE_EVENTS
 173:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 174:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 175:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 176:./lib/chibios/os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 177:./lib/chibios/os/hal/osal/rt/osal.h ****  *          an entirely different way.
 178:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 179:./lib/chibios/os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 180:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 181:./lib/chibios/os/hal/osal/rt/osal.h **** typedef struct {
 182:./lib/chibios/os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Flags stored into the
 183:./lib/chibios/os/hal/osal/rt/osal.h ****                                                 object.                     */
 184:./lib/chibios/os/hal/osal/rt/osal.h **** } event_source_t;
 185:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 186:./lib/chibios/os/hal/osal/rt/osal.h **** 
 187:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 188:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 189:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then them
 190:./lib/chibios/os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 191:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 192:./lib/chibios/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 193:./lib/chibios/os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 194:./lib/chibios/os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 195:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 196:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 197:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 198:./lib/chibios/os/hal/osal/rt/osal.h **** 
 199:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 200:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 201:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 202:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 203:./lib/chibios/os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 204:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 205:./lib/chibios/os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 206:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 207:./lib/chibios/os/hal/osal/rt/osal.h **** typedef struct {
 208:./lib/chibios/os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 209:./lib/chibios/os/hal/osal/rt/osal.h **** } threads_queue_t;
 210:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 211:./lib/chibios/os/hal/osal/rt/osal.h **** 
 212:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 213:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 214:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 215:./lib/chibios/os/hal/osal/rt/osal.h **** 
 216:./lib/chibios/os/hal/osal/rt/osal.h **** /* Temporary names provided for ChibiOS 2.x compatibility.*/
 217:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueInit osalThreadQueueObjectInit
 218:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueWakeupAllI osalThreadDequeueAllI
 219:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueWakeupOneI osalThreadDequeueNextI
 220:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueGoSleepTimeoutS osalThreadEnqueueTimeoutS
 221:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalEventInit osalEventObjectInit
 222:./lib/chibios/os/hal/osal/rt/osal.h **** 
 223:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 224:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 225:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 226:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 227:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 228:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 229:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 230:./lib/chibios/os/hal/osal/rt/osal.h ****  *          message and halts.
 231:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 232:./lib/chibios/os/hal/osal/rt/osal.h ****  *          switch is enabled.
 233:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 234:./lib/chibios/os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 235:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 236:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 237:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 238:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 239:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 240:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 241:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 242:./lib/chibios/os/hal/osal/rt/osal.h **** 
 243:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 244:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 245:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 246:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 247:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is enabled.
 248:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 249:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 250:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 251:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 252:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 253:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 254:./lib/chibios/os/hal/osal/rt/osal.h **** 
 255:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 256:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 257:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 258:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 259:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 260:./lib/chibios/os/hal/osal/rt/osal.h **** 
 261:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 262:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 263:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 264:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 265:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 266:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 267:./lib/chibios/os/hal/osal/rt/osal.h **** 
 268:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 269:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 270:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 271:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 272:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 273:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 274:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 275:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 276:./lib/chibios/os/hal/osal/rt/osal.h **** 
 277:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 278:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 279:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 280:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 281:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 282:./lib/chibios/os/hal/osal/rt/osal.h **** 
 283:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 284:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 285:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 286:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 287:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 288:./lib/chibios/os/hal/osal/rt/osal.h **** 
 289:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 290:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 291:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 292:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 293:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 294:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 295:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 296:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 297:./lib/chibios/os/hal/osal/rt/osal.h **** 
 298:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 299:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 300:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 301:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 302:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 303:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 304:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 305:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 306:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 307:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 308:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 309:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 310:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 311:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 312:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_S2ST(sec) S2ST(sec)
 313:./lib/chibios/os/hal/osal/rt/osal.h **** 
 314:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 315:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 316:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 317:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 318:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 319:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 320:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 321:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 322:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 323:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 324:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_MS2ST(msec) MS2ST(msec)
 325:./lib/chibios/os/hal/osal/rt/osal.h **** 
 326:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 327:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 328:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 329:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 330:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 331:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 332:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 333:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 334:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 335:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 336:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_US2ST(usec) US2ST(usec)
 337:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 338:./lib/chibios/os/hal/osal/rt/osal.h **** 
 339:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 340:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 341:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 342:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 343:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 344:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 345:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 346:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 347:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 348:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 349:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 350:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 351:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 352:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 353:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 354:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 355:./lib/chibios/os/hal/osal/rt/osal.h **** 
 356:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 357:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 358:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 359:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 360:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 361:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 362:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 363:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 364:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 365:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 366:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 367:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 368:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 369:./lib/chibios/os/hal/osal/rt/osal.h **** 
 370:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 371:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 372:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 373:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 374:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 375:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 376:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 377:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 378:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 379:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 380:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 381:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 382:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 383:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 384:./lib/chibios/os/hal/osal/rt/osal.h **** 
 385:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 386:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 387:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 388:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 389:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 390:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 391:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 392:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 393:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 394:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 395:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       time in seconds, must be different from zero
 396:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 397:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 398:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 399:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(sec) osalThreadSleep(OSAL_S2ST(sec))
 400:./lib/chibios/os/hal/osal/rt/osal.h **** 
 401:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 402:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 403:./lib/chibios/os/hal/osal/rt/osal.h ****  *          milliseconds.
 404:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 405:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 406:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 407:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 408:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 409:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 410:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 411:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 412:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msec) osalThreadSleep(OSAL_MS2ST(msec))
 413:./lib/chibios/os/hal/osal/rt/osal.h **** 
 414:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 415:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 416:./lib/chibios/os/hal/osal/rt/osal.h ****  *          microseconds.
 417:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 418:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 419:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 420:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 421:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      time in microseconds, must be different from zero
 422:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 423:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 424:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 425:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usec) osalThreadSleep(OSAL_US2ST(usec))
 426:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 427:./lib/chibios/os/hal/osal/rt/osal.h **** 
 428:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 429:./lib/chibios/os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 430:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 431:./lib/chibios/os/hal/osal/rt/osal.h **** 
 432:./lib/chibios/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 433:./lib/chibios/os/hal/osal/rt/osal.h **** extern "C" {
 434:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 435:./lib/chibios/os/hal/osal/rt/osal.h **** 
 436:./lib/chibios/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 437:./lib/chibios/os/hal/osal/rt/osal.h **** }
 438:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 439:./lib/chibios/os/hal/osal/rt/osal.h **** 
 440:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 441:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 442:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 443:./lib/chibios/os/hal/osal/rt/osal.h **** 
 444:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 445:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 446:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 447:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 448:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 449:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 450:./lib/chibios/os/hal/osal/rt/osal.h **** 
 451:./lib/chibios/os/hal/osal/rt/osal.h **** }
 452:./lib/chibios/os/hal/osal/rt/osal.h **** 
 453:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 454:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 455:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 456:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 457:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 458:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 459:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 460:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 461:./lib/chibios/os/hal/osal/rt/osal.h **** 
 462:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 463:./lib/chibios/os/hal/osal/rt/osal.h **** }
 464:./lib/chibios/os/hal/osal/rt/osal.h **** 
 465:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 466:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 467:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 468:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 469:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 470:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 471:./lib/chibios/os/hal/osal/rt/osal.h **** 
 472:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysDisable();
 473:./lib/chibios/os/hal/osal/rt/osal.h **** }
 474:./lib/chibios/os/hal/osal/rt/osal.h **** 
 475:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 476:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 477:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 478:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 479:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 480:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 481:./lib/chibios/os/hal/osal/rt/osal.h **** 
 482:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysEnable();
 483:./lib/chibios/os/hal/osal/rt/osal.h **** }
 484:./lib/chibios/os/hal/osal/rt/osal.h **** 
 485:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 486:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 487:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 488:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 489:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 490:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 491:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 492:./lib/chibios/os/hal/osal/rt/osal.h **** 
 493:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysLock();
 494:./lib/chibios/os/hal/osal/rt/osal.h **** }
 495:./lib/chibios/os/hal/osal/rt/osal.h **** 
 496:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 497:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 498:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 499:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 500:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 501:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 502:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 503:./lib/chibios/os/hal/osal/rt/osal.h **** 
 504:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysUnlock();
 505:./lib/chibios/os/hal/osal/rt/osal.h **** }
 506:./lib/chibios/os/hal/osal/rt/osal.h **** 
 507:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 508:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 509:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 510:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 511:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 512:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 513:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 514:./lib/chibios/os/hal/osal/rt/osal.h **** 
 515:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 516:./lib/chibios/os/hal/osal/rt/osal.h **** }
 517:./lib/chibios/os/hal/osal/rt/osal.h **** 
 518:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 519:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 520:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 521:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 522:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 523:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 524:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 525:./lib/chibios/os/hal/osal/rt/osal.h **** 
 526:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 527:./lib/chibios/os/hal/osal/rt/osal.h **** }
 528:./lib/chibios/os/hal/osal/rt/osal.h **** 
 529:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 530:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 531:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 532:./lib/chibios/os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 533:./lib/chibios/os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 534:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is known.
 535:./lib/chibios/os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 536:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 537:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 538:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 539:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 540:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 541:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 542:./lib/chibios/os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 543:./lib/chibios/os/hal/osal/rt/osal.h **** 
 544:./lib/chibios/os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 545:./lib/chibios/os/hal/osal/rt/osal.h **** }
 546:./lib/chibios/os/hal/osal/rt/osal.h **** 
 547:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 548:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 549:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 550:./lib/chibios/os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 551:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 552:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 553:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 554:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 555:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 556:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 557:./lib/chibios/os/hal/osal/rt/osal.h **** 
 558:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 559:./lib/chibios/os/hal/osal/rt/osal.h **** }
 560:./lib/chibios/os/hal/osal/rt/osal.h **** 
 561:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 562:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 563:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 564:./lib/chibios/os/hal/osal/rt/osal.h ****  *          value.
 565:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 566:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 567:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 568:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 569:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 570:./lib/chibios/os/hal/osal/rt/osal.h **** #if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
 571:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 572:./lib/chibios/os/hal/osal/rt/osal.h **** 
 573:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 574:./lib/chibios/os/hal/osal/rt/osal.h **** }
 575:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 576:./lib/chibios/os/hal/osal/rt/osal.h **** 
 577:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 578:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 579:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 580:./lib/chibios/os/hal/osal/rt/osal.h ****  *          service from the HAL.
 581:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 582:./lib/chibios/os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 583:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 584:./lib/chibios/os/hal/osal/rt/osal.h **** 
 585:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
  70              		.loc 3 585 0
  71 0016 FFF7FEFF 		bl	chSysTimerHandlerI
  72              	.LVL2:
  73              	.LBE59:
  74              	.LBE58:
  75              	.LBB60:
  76              	.LBB61:
  77              	.LBB62:
  78              	.LBB63:
  79              	.LBB64:
  80              	.LBB65:
  81              		.loc 2 264 0
  82              		.syntax unified
  83              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
  84 001a 84F31188 		MSR basepri, r4
  85              	@ 0 "" 2
  86              	.LVL3:
  87              		.thumb
  88              		.syntax unified
  89              	.L2:
  90              	.LBE65:
  91              	.LBE64:
  92              	.LBE63:
  93              	.LBE62:
  94              	.LBE61:
  95              	.LBE60:
 248:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 249:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     osalSysLockFromISR();
 250:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     osalOsTimerHandlerI();
 251:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****     osalSysUnlockFromISR();
 252:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   }
 253:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 254:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   OSAL_IRQ_EPILOGUE();
 255:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** }
  96              		.loc 1 255 0
  97 001e BDE81040 		pop	{r4, lr}
  98              		.cfi_restore 14
  99              		.cfi_restore 4
 100              		.cfi_def_cfa_offset 0
 254:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** }
 101              		.loc 1 254 0
 102 0022 FFF7FEBF 		b	_port_irq_epilogue
 103              	.LVL4:
 104              		.cfi_endproc
 105              	.LFE279:
 107              		.section	.text.st_lld_init,"ax",%progbits
 108              		.align	1
 109              		.global	st_lld_init
 110              		.syntax unified
 111              		.thumb
 112              		.thumb_func
 113              		.fpu softvfp
 115              	st_lld_init:
 116              	.LFB280:
 256:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */
 257:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 258:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 259:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /* Driver exported functions.                                                */
 260:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /*===========================================================================*/
 261:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 262:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** /**
 263:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @brief   Low level ST driver initialization.
 264:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  *
 265:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  * @notapi
 266:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****  */
 267:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** void st_lld_init(void) {
 117              		.loc 1 267 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 0
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              		@ link register save eliminated.
 268:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 269:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** #if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
 270:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   /* Free running counter mode.*/
 271:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 272:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   /* Enabling timer clock.*/
 273:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   ST_ENABLE_CLOCK();
 122              		.loc 1 273 0
 123 0000 0E4A     		ldr	r2, .L7
 124 0002 D369     		ldr	r3, [r2, #28]
 125 0004 43F00103 		orr	r3, r3, #1
 126 0008 D361     		str	r3, [r2, #28]
 274:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 275:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   /* Enabling the stop mode during debug for this timer.*/
 276:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   ST_ENABLE_STOP();
 127              		.loc 1 276 0
 128 000a 0D4A     		ldr	r2, .L7+4
 129 000c 9368     		ldr	r3, [r2, #8]
 130 000e 43F00103 		orr	r3, r3, #1
 131 0012 9360     		str	r3, [r2, #8]
 277:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 278:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   /* Initializing the counter in free running mode.*/
 279:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 132              		.loc 1 279 0
 133 0014 4FF08043 		mov	r3, #1073741824
 134 0018 40F2CF22 		movw	r2, #719
 135 001c 9A62     		str	r2, [r3, #40]
 280:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->ARR    = ST_ARR_INIT;
 136              		.loc 1 280 0
 137 001e 4FF0FF32 		mov	r2, #-1
 138 0022 DA62     		str	r2, [r3, #44]
 281:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->CCMR1  = 0;
 139              		.loc 1 281 0
 140 0024 0022     		movs	r2, #0
 141 0026 9A61     		str	r2, [r3, #24]
 282:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->CCR[0] = 0;
 142              		.loc 1 282 0
 143 0028 5A63     		str	r2, [r3, #52]
 283:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->DIER   = 0;
 144              		.loc 1 283 0
 145 002a DA60     		str	r2, [r3, #12]
 284:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->CR2    = 0;
 146              		.loc 1 284 0
 147 002c 5A60     		str	r2, [r3, #4]
 285:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->EGR    = TIM_EGR_UG;
 148              		.loc 1 285 0
 149 002e 0122     		movs	r2, #1
 150 0030 5A61     		str	r2, [r3, #20]
 286:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 287:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c **** 
 288:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   /* IRQ enabled.*/
 289:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 151              		.loc 1 289 0
 152 0032 0821     		movs	r1, #8
 286:lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.c ****   STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 153              		.loc 1 286 0
 154 0034 1A60     		str	r2, [r3]
 155              		.loc 1 289 0
 156 0036 1C20     		movs	r0, #28
 157 0038 FFF7FEBF 		b	nvicEnableVector
 158              	.LVL5:
 159              	.L8:
 160              		.align	2
 161              	.L7:
 162 003c 00100240 		.word	1073876992
 163 0040 002004E0 		.word	-536600576
 164              		.cfi_endproc
 165              	.LFE280:
 167              		.text
 168              	.Letext0:
 169              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 170              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 171              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 172              		.file 7 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 173              		.file 8 "./lib/chibios/os/rt/include/chsystypes.h"
 174              		.file 9 "./lib/chibios/os/rt/include/chschd.h"
 175              		.file 10 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 176              		.file 11 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 177              		.file 12 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/stm32f303xc.h"
 178              		.file 13 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 179              		.file 14 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 180              		.file 15 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 181              		.file 16 "./lib/chibios/os/rt/include/chtm.h"
 182              		.file 17 "./lib/chibios/os/rt/include/chsem.h"
 183              		.file 18 "./lib/chibios/os/rt/include/chmtx.h"
 184              		.file 19 "./lib/chibios/os/rt/include/chsys.h"
 185              		.file 20 "./lib/chibios/os/rt/include/chregistry.h"
 186              		.file 21 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 187              		.file 22 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 188              		.file 23 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 189              		.file 24 "./lib/chibios/os/hal/include/hal_dac.h"
 190              		.file 25 "./lib/chibios/os/hal/ports/STM32/LLD/DACv1/hal_dac_lld.h"
 191              		.file 26 "./lib/chibios/os/hal/include/hal_gpt.h"
 192              		.file 27 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_gpt_lld.h"
 193              		.file 28 "./lib/chibios/os/hal/include/hal_i2c.h"
 194              		.file 29 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 195              		.file 30 "./lib/chibios/os/hal/include/hal_pwm.h"
 196              		.file 31 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 197              		.file 32 "./lib/chibios/os/hal/include/hal_usb.h"
 198              		.file 33 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 199              		.file 34 "./lib/chibios/os/hal/ports/common/ARMCMx/nvic.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_st_lld.c
/var/tmp//ccYvsbF4.s:16     .text.VectorB0:0000000000000000 $t
/var/tmp//ccYvsbF4.s:23     .text.VectorB0:0000000000000000 VectorB0
/var/tmp//ccYvsbF4.s:108    .text.st_lld_init:0000000000000000 $t
/var/tmp//ccYvsbF4.s:115    .text.st_lld_init:0000000000000000 st_lld_init
/var/tmp//ccYvsbF4.s:162    .text.st_lld_init:000000000000003c $d

UNDEFINED SYMBOLS
chSysTimerHandlerI
_port_irq_epilogue
nvicEnableVector
