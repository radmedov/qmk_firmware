   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"hal_serial_usb.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.obnotify,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	obnotify:
  23              	.LFB289:
  24              		.file 1 "lib/chibios/os/hal/src/hal_serial_usb.c"
   1:lib/chibios/os/hal/src/hal_serial_usb.c **** /*
   2:lib/chibios/os/hal/src/hal_serial_usb.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:lib/chibios/os/hal/src/hal_serial_usb.c **** 
   4:lib/chibios/os/hal/src/hal_serial_usb.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:lib/chibios/os/hal/src/hal_serial_usb.c ****     you may not use this file except in compliance with the License.
   6:lib/chibios/os/hal/src/hal_serial_usb.c ****     You may obtain a copy of the License at
   7:lib/chibios/os/hal/src/hal_serial_usb.c **** 
   8:lib/chibios/os/hal/src/hal_serial_usb.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  10:lib/chibios/os/hal/src/hal_serial_usb.c ****     Unless required by applicable law or agreed to in writing, software
  11:lib/chibios/os/hal/src/hal_serial_usb.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:lib/chibios/os/hal/src/hal_serial_usb.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:lib/chibios/os/hal/src/hal_serial_usb.c ****     See the License for the specific language governing permissions and
  14:lib/chibios/os/hal/src/hal_serial_usb.c ****     limitations under the License.
  15:lib/chibios/os/hal/src/hal_serial_usb.c **** */
  16:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  17:lib/chibios/os/hal/src/hal_serial_usb.c **** /**
  18:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @file    hal_serial_usb.c
  19:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @brief   Serial over USB Driver code.
  20:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
  21:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @addtogroup SERIAL_USB
  22:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @{
  23:lib/chibios/os/hal/src/hal_serial_usb.c ****  */
  24:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  25:lib/chibios/os/hal/src/hal_serial_usb.c **** #include "hal.h"
  26:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  27:lib/chibios/os/hal/src/hal_serial_usb.c **** #if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  28:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  29:lib/chibios/os/hal/src/hal_serial_usb.c **** /*===========================================================================*/
  30:lib/chibios/os/hal/src/hal_serial_usb.c **** /* Driver local definitions.                                                 */
  31:lib/chibios/os/hal/src/hal_serial_usb.c **** /*===========================================================================*/
  32:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  33:lib/chibios/os/hal/src/hal_serial_usb.c **** /*===========================================================================*/
  34:lib/chibios/os/hal/src/hal_serial_usb.c **** /* Driver exported variables.                                                */
  35:lib/chibios/os/hal/src/hal_serial_usb.c **** /*===========================================================================*/
  36:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  37:lib/chibios/os/hal/src/hal_serial_usb.c **** /*===========================================================================*/
  38:lib/chibios/os/hal/src/hal_serial_usb.c **** /* Driver local variables and types.                                         */
  39:lib/chibios/os/hal/src/hal_serial_usb.c **** /*===========================================================================*/
  40:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  41:lib/chibios/os/hal/src/hal_serial_usb.c **** /*
  42:lib/chibios/os/hal/src/hal_serial_usb.c ****  * Current Line Coding.
  43:lib/chibios/os/hal/src/hal_serial_usb.c ****  */
  44:lib/chibios/os/hal/src/hal_serial_usb.c **** static cdc_linecoding_t linecoding = {
  45:lib/chibios/os/hal/src/hal_serial_usb.c ****   {0x00, 0x96, 0x00, 0x00},             /* 38400.                           */
  46:lib/chibios/os/hal/src/hal_serial_usb.c ****   LC_STOP_1, LC_PARITY_NONE, 8
  47:lib/chibios/os/hal/src/hal_serial_usb.c **** };
  48:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  49:lib/chibios/os/hal/src/hal_serial_usb.c **** /*===========================================================================*/
  50:lib/chibios/os/hal/src/hal_serial_usb.c **** /* Driver local functions.                                                   */
  51:lib/chibios/os/hal/src/hal_serial_usb.c **** /*===========================================================================*/
  52:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  53:lib/chibios/os/hal/src/hal_serial_usb.c **** static bool sdu_start_receive(SerialUSBDriver *sdup) {
  54:lib/chibios/os/hal/src/hal_serial_usb.c ****   uint8_t *buf;
  55:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  56:lib/chibios/os/hal/src/hal_serial_usb.c ****   /* If the USB driver is not in the appropriate state then transactions
  57:lib/chibios/os/hal/src/hal_serial_usb.c ****      must not be started.*/
  58:lib/chibios/os/hal/src/hal_serial_usb.c ****   if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
  59:lib/chibios/os/hal/src/hal_serial_usb.c ****       (sdup->state != SDU_READY)) {
  60:lib/chibios/os/hal/src/hal_serial_usb.c ****     return true;
  61:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
  62:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  63:lib/chibios/os/hal/src/hal_serial_usb.c ****   /* Checking if there is already a transaction ongoing on the endpoint.*/
  64:lib/chibios/os/hal/src/hal_serial_usb.c ****   if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
  65:lib/chibios/os/hal/src/hal_serial_usb.c ****     return true;
  66:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
  67:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  68:lib/chibios/os/hal/src/hal_serial_usb.c ****   /* Checking if there is a buffer ready for incoming data.*/
  69:lib/chibios/os/hal/src/hal_serial_usb.c ****   buf = ibqGetEmptyBufferI(&sdup->ibqueue);
  70:lib/chibios/os/hal/src/hal_serial_usb.c ****   if (buf == NULL) {
  71:lib/chibios/os/hal/src/hal_serial_usb.c ****     return true;
  72:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
  73:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  74:lib/chibios/os/hal/src/hal_serial_usb.c ****   /* Buffer found, starting a new transaction.*/
  75:lib/chibios/os/hal/src/hal_serial_usb.c ****   usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
  76:lib/chibios/os/hal/src/hal_serial_usb.c ****                    buf, sdup->ibqueue.bsize - sizeof(size_t));
  77:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  78:lib/chibios/os/hal/src/hal_serial_usb.c ****   return false;
  79:lib/chibios/os/hal/src/hal_serial_usb.c **** }
  80:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  81:lib/chibios/os/hal/src/hal_serial_usb.c **** /*
  82:lib/chibios/os/hal/src/hal_serial_usb.c ****  * Interface implementation.
  83:lib/chibios/os/hal/src/hal_serial_usb.c ****  */
  84:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  85:lib/chibios/os/hal/src/hal_serial_usb.c **** static size_t _write(void *ip, const uint8_t *bp, size_t n) {
  86:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  87:lib/chibios/os/hal/src/hal_serial_usb.c ****   return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
  88:lib/chibios/os/hal/src/hal_serial_usb.c ****                          n, TIME_INFINITE);
  89:lib/chibios/os/hal/src/hal_serial_usb.c **** }
  90:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  91:lib/chibios/os/hal/src/hal_serial_usb.c **** static size_t _read(void *ip, uint8_t *bp, size_t n) {
  92:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  93:lib/chibios/os/hal/src/hal_serial_usb.c ****   return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
  94:lib/chibios/os/hal/src/hal_serial_usb.c ****                         n, TIME_INFINITE);
  95:lib/chibios/os/hal/src/hal_serial_usb.c **** }
  96:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  97:lib/chibios/os/hal/src/hal_serial_usb.c **** static msg_t _put(void *ip, uint8_t b) {
  98:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  99:lib/chibios/os/hal/src/hal_serial_usb.c ****   return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 100:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 101:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 102:lib/chibios/os/hal/src/hal_serial_usb.c **** static msg_t _get(void *ip) {
 103:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 104:lib/chibios/os/hal/src/hal_serial_usb.c ****   return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 105:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 106:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 107:lib/chibios/os/hal/src/hal_serial_usb.c **** static msg_t _putt(void *ip, uint8_t b, systime_t timeout) {
 108:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 109:lib/chibios/os/hal/src/hal_serial_usb.c ****   return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 110:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 111:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 112:lib/chibios/os/hal/src/hal_serial_usb.c **** static msg_t _gett(void *ip, systime_t timeout) {
 113:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 114:lib/chibios/os/hal/src/hal_serial_usb.c ****   return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 115:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 116:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 117:lib/chibios/os/hal/src/hal_serial_usb.c **** static size_t _writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 118:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 119:lib/chibios/os/hal/src/hal_serial_usb.c ****   return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 120:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 121:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 122:lib/chibios/os/hal/src/hal_serial_usb.c **** static size_t _readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
 123:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 124:lib/chibios/os/hal/src/hal_serial_usb.c ****   return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 125:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 126:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 127:lib/chibios/os/hal/src/hal_serial_usb.c **** static const struct SerialUSBDriverVMT vmt = {
 128:lib/chibios/os/hal/src/hal_serial_usb.c ****   _write, _read, _put, _get,
 129:lib/chibios/os/hal/src/hal_serial_usb.c ****   _putt, _gett, _writet, _readt
 130:lib/chibios/os/hal/src/hal_serial_usb.c **** };
 131:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 132:lib/chibios/os/hal/src/hal_serial_usb.c **** /**
 133:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @brief   Notification of empty buffer released into the input buffers queue.
 134:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 135:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @param[in] bqp       the buffers queue pointer.
 136:lib/chibios/os/hal/src/hal_serial_usb.c ****  */
 137:lib/chibios/os/hal/src/hal_serial_usb.c **** static void ibnotify(io_buffers_queue_t *bqp) {
 138:lib/chibios/os/hal/src/hal_serial_usb.c ****   SerialUSBDriver *sdup = bqGetLinkX(bqp);
 139:lib/chibios/os/hal/src/hal_serial_usb.c ****   (void) sdu_start_receive(sdup);
 140:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 141:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 142:lib/chibios/os/hal/src/hal_serial_usb.c **** /**
 143:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @brief   Notification of filled buffer inserted into the output buffers queue.
 144:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 145:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @param[in] bqp       the buffers queue pointer.
 146:lib/chibios/os/hal/src/hal_serial_usb.c ****  */
 147:lib/chibios/os/hal/src/hal_serial_usb.c **** static void obnotify(io_buffers_queue_t *bqp) {
  25              		.loc 1 147 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 13B5     		push	{r0, r1, r4, lr}
  31              		.cfi_def_cfa_offset 16
  32              		.cfi_offset 4, -8
  33              		.cfi_offset 14, -4
 148:lib/chibios/os/hal/src/hal_serial_usb.c ****   size_t n;
 149:lib/chibios/os/hal/src/hal_serial_usb.c ****   SerialUSBDriver *sdup = bqGetLinkX(bqp);
  34              		.loc 1 149 0
  35 0002 446B     		ldr	r4, [r0, #52]
  36              	.LVL1:
 150:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 151:lib/chibios/os/hal/src/hal_serial_usb.c ****   /* If the USB driver is not in the appropriate state then transactions
 152:lib/chibios/os/hal/src/hal_serial_usb.c ****      must not be started.*/
 153:lib/chibios/os/hal/src/hal_serial_usb.c ****   if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
  37              		.loc 1 153 0
  38 0004 D4F89030 		ldr	r3, [r4, #144]
  39 0008 1A68     		ldr	r2, [r3]
  40 000a 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
  41 000c 0429     		cmp	r1, #4
  42 000e 16D1     		bne	.L1
  43              		.loc 1 153 0 is_stmt 0 discriminator 1
  44 0010 217A     		ldrb	r1, [r4, #8]	@ zero_extendqisi2
  45 0012 0229     		cmp	r1, #2
  46 0014 13D1     		bne	.L1
 154:lib/chibios/os/hal/src/hal_serial_usb.c ****       (sdup->state != SDU_READY)) {
 155:lib/chibios/os/hal/src/hal_serial_usb.c ****     return;
 156:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
 157:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 158:lib/chibios/os/hal/src/hal_serial_usb.c ****   /* Checking if there is already a transaction ongoing on the endpoint.*/
 159:lib/chibios/os/hal/src/hal_serial_usb.c ****   if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
  47              		.loc 1 159 0 is_stmt 1
  48 0016 1979     		ldrb	r1, [r3, #4]	@ zero_extendqisi2
  49 0018 1289     		ldrh	r2, [r2, #8]
  50 001a 0123     		movs	r3, #1
  51 001c 8B40     		lsls	r3, r3, r1
  52 001e 1342     		tst	r3, r2
  53 0020 0DD1     		bne	.L1
  54              	.LBB132:
 160:lib/chibios/os/hal/src/hal_serial_usb.c ****     /* Trying to get a full buffer.*/
 161:lib/chibios/os/hal/src/hal_serial_usb.c ****     uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
  55              		.loc 1 161 0
  56 0022 01A9     		add	r1, sp, #4
  57 0024 04F14400 		add	r0, r4, #68
  58              	.LVL2:
  59 0028 FFF7FEFF 		bl	obqGetFullBufferI
  60              	.LVL3:
 162:lib/chibios/os/hal/src/hal_serial_usb.c ****     if (buf != NULL) {
  61              		.loc 1 162 0
  62 002c 0246     		mov	r2, r0
  63 002e 30B1     		cbz	r0, .L1
 163:lib/chibios/os/hal/src/hal_serial_usb.c ****       /* Buffer found, starting a new transaction.*/
 164:lib/chibios/os/hal/src/hal_serial_usb.c ****       usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
  64              		.loc 1 164 0
  65 0030 D4F89040 		ldr	r4, [r4, #144]
  66              	.LVL4:
  67 0034 019B     		ldr	r3, [sp, #4]
  68 0036 2179     		ldrb	r1, [r4, #4]	@ zero_extendqisi2
  69 0038 2068     		ldr	r0, [r4]
  70              	.LVL5:
  71 003a FFF7FEFF 		bl	usbStartTransmitI
  72              	.LVL6:
  73              	.L1:
  74              	.LBE132:
 165:lib/chibios/os/hal/src/hal_serial_usb.c ****     }
 166:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
 167:lib/chibios/os/hal/src/hal_serial_usb.c **** }
  75              		.loc 1 167 0
  76 003e 02B0     		add	sp, sp, #8
  77              		.cfi_def_cfa_offset 8
  78              		@ sp needed
  79 0040 10BD     		pop	{r4, pc}
  80              		.cfi_endproc
  81              	.LFE289:
  83              		.section	.text._readt,"ax",%progbits
  84              		.align	1
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  88              		.fpu softvfp
  90              	_readt:
  91              	.LFB287:
 122:lib/chibios/os/hal/src/hal_serial_usb.c **** 
  92              		.loc 1 122 0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 0, uses_anonymous_args = 0
  96              		@ link register save eliminated.
  97              	.LVL7:
 124:lib/chibios/os/hal/src/hal_serial_usb.c **** }
  98              		.loc 1 124 0
  99 0000 0C30     		adds	r0, r0, #12
 100              	.LVL8:
 101 0002 FFF7FEBF 		b	ibqReadTimeout
 102              	.LVL9:
 103              		.cfi_endproc
 104              	.LFE287:
 106              		.section	.text._read,"ax",%progbits
 107              		.align	1
 108              		.syntax unified
 109              		.thumb
 110              		.thumb_func
 111              		.fpu softvfp
 113              	_read:
 114              	.LFB281:
  91:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 115              		.loc 1 91 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120              	.LVL10:
  93:lib/chibios/os/hal/src/hal_serial_usb.c ****                         n, TIME_INFINITE);
 121              		.loc 1 93 0
 122 0000 4FF0FF33 		mov	r3, #-1
 123 0004 0C30     		adds	r0, r0, #12
 124              	.LVL11:
 125 0006 FFF7FEBF 		b	ibqReadTimeout
 126              	.LVL12:
 127              		.cfi_endproc
 128              	.LFE281:
 130              		.section	.text._writet,"ax",%progbits
 131              		.align	1
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 135              		.fpu softvfp
 137              	_writet:
 138              	.LFB286:
 117:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 139              		.loc 1 117 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              		@ link register save eliminated.
 144              	.LVL13:
 119:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 145              		.loc 1 119 0
 146 0000 4430     		adds	r0, r0, #68
 147              	.LVL14:
 148 0002 FFF7FEBF 		b	obqWriteTimeout
 149              	.LVL15:
 150              		.cfi_endproc
 151              	.LFE286:
 153              		.section	.text._write,"ax",%progbits
 154              		.align	1
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 158              		.fpu softvfp
 160              	_write:
 161              	.LFB280:
  85:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 162              		.loc 1 85 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 0
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 166              		@ link register save eliminated.
 167              	.LVL16:
  87:lib/chibios/os/hal/src/hal_serial_usb.c ****                          n, TIME_INFINITE);
 168              		.loc 1 87 0
 169 0000 4FF0FF33 		mov	r3, #-1
 170 0004 4430     		adds	r0, r0, #68
 171              	.LVL17:
 172 0006 FFF7FEBF 		b	obqWriteTimeout
 173              	.LVL18:
 174              		.cfi_endproc
 175              	.LFE280:
 177              		.section	.text._gett,"ax",%progbits
 178              		.align	1
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu softvfp
 184              	_gett:
 185              	.LFB285:
 112:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 186              		.loc 1 112 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              		@ link register save eliminated.
 191              	.LVL19:
 114:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 192              		.loc 1 114 0
 193 0000 0C30     		adds	r0, r0, #12
 194              	.LVL20:
 195 0002 FFF7FEBF 		b	ibqGetTimeout
 196              	.LVL21:
 197              		.cfi_endproc
 198              	.LFE285:
 200              		.section	.text._get,"ax",%progbits
 201              		.align	1
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 205              		.fpu softvfp
 207              	_get:
 208              	.LFB283:
 102:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 209              		.loc 1 102 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              		@ link register save eliminated.
 214              	.LVL22:
 104:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 215              		.loc 1 104 0
 216 0000 4FF0FF31 		mov	r1, #-1
 217 0004 0C30     		adds	r0, r0, #12
 218              	.LVL23:
 219 0006 FFF7FEBF 		b	ibqGetTimeout
 220              	.LVL24:
 221              		.cfi_endproc
 222              	.LFE283:
 224              		.section	.text._putt,"ax",%progbits
 225              		.align	1
 226              		.syntax unified
 227              		.thumb
 228              		.thumb_func
 229              		.fpu softvfp
 231              	_putt:
 232              	.LFB284:
 107:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 233              		.loc 1 107 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 237              		@ link register save eliminated.
 238              	.LVL25:
 109:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 239              		.loc 1 109 0
 240 0000 4430     		adds	r0, r0, #68
 241              	.LVL26:
 242 0002 FFF7FEBF 		b	obqPutTimeout
 243              	.LVL27:
 244              		.cfi_endproc
 245              	.LFE284:
 247              		.section	.text._put,"ax",%progbits
 248              		.align	1
 249              		.syntax unified
 250              		.thumb
 251              		.thumb_func
 252              		.fpu softvfp
 254              	_put:
 255              	.LFB282:
  97:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 256              		.loc 1 97 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              		@ link register save eliminated.
 261              	.LVL28:
  99:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 262              		.loc 1 99 0
 263 0000 4FF0FF32 		mov	r2, #-1
 264 0004 4430     		adds	r0, r0, #68
 265              	.LVL29:
 266 0006 FFF7FEBF 		b	obqPutTimeout
 267              	.LVL30:
 268              		.cfi_endproc
 269              	.LFE282:
 271              		.section	.text.sdu_start_receive,"ax",%progbits
 272              		.align	1
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 276              		.fpu softvfp
 278              	sdu_start_receive:
 279              	.LFB279:
  53:lib/chibios/os/hal/src/hal_serial_usb.c ****   uint8_t *buf;
 280              		.loc 1 53 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              	.LVL31:
  58:lib/chibios/os/hal/src/hal_serial_usb.c ****       (sdup->state != SDU_READY)) {
 285              		.loc 1 58 0
 286 0000 D0F89020 		ldr	r2, [r0, #144]
 287 0004 1368     		ldr	r3, [r2]
 288 0006 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 289 0008 0429     		cmp	r1, #4
  53:lib/chibios/os/hal/src/hal_serial_usb.c ****   uint8_t *buf;
 290              		.loc 1 53 0
 291 000a 70B5     		push	{r4, r5, r6, lr}
 292              		.cfi_def_cfa_offset 16
 293              		.cfi_offset 4, -16
 294              		.cfi_offset 5, -12
 295              		.cfi_offset 6, -8
 296              		.cfi_offset 14, -4
  53:lib/chibios/os/hal/src/hal_serial_usb.c ****   uint8_t *buf;
 297              		.loc 1 53 0
 298 000c 0546     		mov	r5, r0
  58:lib/chibios/os/hal/src/hal_serial_usb.c ****       (sdup->state != SDU_READY)) {
 299              		.loc 1 58 0
 300 000e 01D0     		beq	.L16
 301              	.LVL32:
 302              	.L18:
  60:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
 303              		.loc 1 60 0
 304 0010 0120     		movs	r0, #1
 305              	.L17:
  79:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 306              		.loc 1 79 0
 307 0012 70BD     		pop	{r4, r5, r6, pc}
 308              	.LVL33:
 309              	.L16:
  58:lib/chibios/os/hal/src/hal_serial_usb.c ****       (sdup->state != SDU_READY)) {
 310              		.loc 1 58 0 discriminator 1
 311 0014 017A     		ldrb	r1, [r0, #8]	@ zero_extendqisi2
 312 0016 0229     		cmp	r1, #2
 313 0018 FAD1     		bne	.L18
  64:lib/chibios/os/hal/src/hal_serial_usb.c ****     return true;
 314              		.loc 1 64 0
 315 001a 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 316 001c 5C89     		ldrh	r4, [r3, #10]
 317 001e 0120     		movs	r0, #1
 318              	.LVL34:
 319 0020 9040     		lsls	r0, r0, r2
 320 0022 0440     		ands	r4, r0, r4
 321 0024 F4D1     		bne	.L18
 322              	.LVL35:
 323              	.LBB135:
 324              	.LBB136:
  69:lib/chibios/os/hal/src/hal_serial_usb.c ****   if (buf == NULL) {
 325              		.loc 1 69 0
 326 0026 05F10C00 		add	r0, r5, #12
 327 002a FFF7FEFF 		bl	ibqGetEmptyBufferI
 328              	.LVL36:
  70:lib/chibios/os/hal/src/hal_serial_usb.c ****     return true;
 329              		.loc 1 70 0
 330 002e 0246     		mov	r2, r0
 331 0030 0028     		cmp	r0, #0
 332 0032 EDD0     		beq	.L18
  75:lib/chibios/os/hal/src/hal_serial_usb.c ****                    buf, sdup->ibqueue.bsize - sizeof(size_t));
 333              		.loc 1 75 0
 334 0034 D5F89060 		ldr	r6, [r5, #144]
 335 0038 AB6A     		ldr	r3, [r5, #40]
 336 003a 3068     		ldr	r0, [r6]
 337              	.LVL37:
 338 003c 7179     		ldrb	r1, [r6, #5]	@ zero_extendqisi2
 339 003e 043B     		subs	r3, r3, #4
 340 0040 FFF7FEFF 		bl	usbStartReceiveI
 341              	.LVL38:
  78:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 342              		.loc 1 78 0
 343 0044 2046     		mov	r0, r4
 344 0046 E4E7     		b	.L17
 345              	.LBE136:
 346              	.LBE135:
 347              		.cfi_endproc
 348              	.LFE279:
 350              		.section	.text.ibnotify,"ax",%progbits
 351              		.align	1
 352              		.syntax unified
 353              		.thumb
 354              		.thumb_func
 355              		.fpu softvfp
 357              	ibnotify:
 358              	.LFB288:
 137:lib/chibios/os/hal/src/hal_serial_usb.c ****   SerialUSBDriver *sdup = bqGetLinkX(bqp);
 359              		.loc 1 137 0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 0
 362              		@ frame_needed = 0, uses_anonymous_args = 0
 363              		@ link register save eliminated.
 364              	.LVL39:
 139:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 365              		.loc 1 139 0
 366 0000 406B     		ldr	r0, [r0, #52]
 367              	.LVL40:
 368 0002 FFF7FEBF 		b	sdu_start_receive
 369              	.LVL41:
 370              		.cfi_endproc
 371              	.LFE288:
 373              		.section	.text.sduInit,"ax",%progbits
 374              		.align	1
 375              		.global	sduInit
 376              		.syntax unified
 377              		.thumb
 378              		.thumb_func
 379              		.fpu softvfp
 381              	sduInit:
 382              	.LFB290:
 168:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 169:lib/chibios/os/hal/src/hal_serial_usb.c **** /*===========================================================================*/
 170:lib/chibios/os/hal/src/hal_serial_usb.c **** /* Driver exported functions.                                                */
 171:lib/chibios/os/hal/src/hal_serial_usb.c **** /*===========================================================================*/
 172:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 173:lib/chibios/os/hal/src/hal_serial_usb.c **** /**
 174:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @brief   Serial Driver initialization.
 175:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @note    This function is implicitly invoked by @p halInit(), there is
 176:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          no need to explicitly initialize the driver.
 177:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 178:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @init
 179:lib/chibios/os/hal/src/hal_serial_usb.c ****  */
 180:lib/chibios/os/hal/src/hal_serial_usb.c **** void sduInit(void) {
 383              		.loc 1 180 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387              		@ link register save eliminated.
 181:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 388              		.loc 1 181 0
 389 0000 7047     		bx	lr
 390              		.cfi_endproc
 391              	.LFE290:
 393              		.section	.text.sduObjectInit,"ax",%progbits
 394              		.align	1
 395              		.global	sduObjectInit
 396              		.syntax unified
 397              		.thumb
 398              		.thumb_func
 399              		.fpu softvfp
 401              	sduObjectInit:
 402              	.LFB291:
 182:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 183:lib/chibios/os/hal/src/hal_serial_usb.c **** /**
 184:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @brief   Initializes a generic full duplex driver object.
 185:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @details The HW dependent part of the initialization has to be performed
 186:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          outside, usually in the hardware initialization code.
 187:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 188:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 189:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 190:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @init
 191:lib/chibios/os/hal/src/hal_serial_usb.c ****  */
 192:lib/chibios/os/hal/src/hal_serial_usb.c **** void sduObjectInit(SerialUSBDriver *sdup) {
 403              		.loc 1 192 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              	.LVL42:
 408 0000 7FB5     		push	{r0, r1, r2, r3, r4, r5, r6, lr}
 409              		.cfi_def_cfa_offset 32
 410              		.cfi_offset 4, -16
 411              		.cfi_offset 5, -12
 412              		.cfi_offset 6, -8
 413              		.cfi_offset 14, -4
 193:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 194:lib/chibios/os/hal/src/hal_serial_usb.c ****   sdup->vmt = &vmt;
 414              		.loc 1 194 0
 415 0002 0346     		mov	r3, r0
 416 0004 104A     		ldr	r2, .L25
 417 0006 43F8042B 		str	r2, [r3], #4
 418              	.LVL43:
 195:lib/chibios/os/hal/src/hal_serial_usb.c ****   osalEventObjectInit(&sdup->event);
 196:lib/chibios/os/hal/src/hal_serial_usb.c ****   sdup->state = SDU_STOP;
 419              		.loc 1 196 0
 420 000a 0125     		movs	r5, #1
 421              	.LBB137:
 422              	.LBB138:
 423              	.LBB139:
 424              		.file 2 "./lib/chibios/os/rt/include/chevents.h"
   1:./lib/chibios/os/rt/include/chevents.h **** /*
   2:./lib/chibios/os/rt/include/chevents.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chevents.h **** 
   4:./lib/chibios/os/rt/include/chevents.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chevents.h **** 
   6:./lib/chibios/os/rt/include/chevents.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chevents.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chevents.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chevents.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chevents.h **** 
  11:./lib/chibios/os/rt/include/chevents.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chevents.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chevents.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chevents.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chevents.h **** 
  16:./lib/chibios/os/rt/include/chevents.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chevents.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chevents.h **** */
  19:./lib/chibios/os/rt/include/chevents.h **** /*
  20:./lib/chibios/os/rt/include/chevents.h ****    Concepts and parts of this file have been contributed by Scott (skute).
  21:./lib/chibios/os/rt/include/chevents.h ****  */
  22:./lib/chibios/os/rt/include/chevents.h **** 
  23:./lib/chibios/os/rt/include/chevents.h **** /**
  24:./lib/chibios/os/rt/include/chevents.h ****  * @file    chevents.h
  25:./lib/chibios/os/rt/include/chevents.h ****  * @brief   Events macros and structures.
  26:./lib/chibios/os/rt/include/chevents.h ****  *
  27:./lib/chibios/os/rt/include/chevents.h ****  * @addtogroup events
  28:./lib/chibios/os/rt/include/chevents.h ****  * @{
  29:./lib/chibios/os/rt/include/chevents.h ****  */
  30:./lib/chibios/os/rt/include/chevents.h **** 
  31:./lib/chibios/os/rt/include/chevents.h **** #ifndef CHEVENTS_H
  32:./lib/chibios/os/rt/include/chevents.h **** #define CHEVENTS_H
  33:./lib/chibios/os/rt/include/chevents.h **** 
  34:./lib/chibios/os/rt/include/chevents.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
  35:./lib/chibios/os/rt/include/chevents.h **** 
  36:./lib/chibios/os/rt/include/chevents.h **** /*===========================================================================*/
  37:./lib/chibios/os/rt/include/chevents.h **** /* Module constants.                                                         */
  38:./lib/chibios/os/rt/include/chevents.h **** /*===========================================================================*/
  39:./lib/chibios/os/rt/include/chevents.h **** 
  40:./lib/chibios/os/rt/include/chevents.h **** /*===========================================================================*/
  41:./lib/chibios/os/rt/include/chevents.h **** /* Module pre-compile time settings.                                         */
  42:./lib/chibios/os/rt/include/chevents.h **** /*===========================================================================*/
  43:./lib/chibios/os/rt/include/chevents.h **** 
  44:./lib/chibios/os/rt/include/chevents.h **** /*===========================================================================*/
  45:./lib/chibios/os/rt/include/chevents.h **** /* Derived constants and error checks.                                       */
  46:./lib/chibios/os/rt/include/chevents.h **** /*===========================================================================*/
  47:./lib/chibios/os/rt/include/chevents.h **** 
  48:./lib/chibios/os/rt/include/chevents.h **** /*===========================================================================*/
  49:./lib/chibios/os/rt/include/chevents.h **** /* Module data structures and types.                                         */
  50:./lib/chibios/os/rt/include/chevents.h **** /*===========================================================================*/
  51:./lib/chibios/os/rt/include/chevents.h **** 
  52:./lib/chibios/os/rt/include/chevents.h **** typedef struct event_listener event_listener_t;
  53:./lib/chibios/os/rt/include/chevents.h **** 
  54:./lib/chibios/os/rt/include/chevents.h **** /**
  55:./lib/chibios/os/rt/include/chevents.h ****  * @brief   Event Listener structure.
  56:./lib/chibios/os/rt/include/chevents.h ****  */
  57:./lib/chibios/os/rt/include/chevents.h **** struct event_listener {
  58:./lib/chibios/os/rt/include/chevents.h ****   event_listener_t      *next;          /**< @brief Next Event Listener
  59:./lib/chibios/os/rt/include/chevents.h ****                                                     registered on the event
  60:./lib/chibios/os/rt/include/chevents.h ****                                                     source.                 */
  61:./lib/chibios/os/rt/include/chevents.h ****   thread_t              *listener;      /**< @brief Thread interested in the
  62:./lib/chibios/os/rt/include/chevents.h ****                                                     event source.           */
  63:./lib/chibios/os/rt/include/chevents.h ****   eventmask_t           events;         /**< @brief Events to be set in
  64:./lib/chibios/os/rt/include/chevents.h ****                                                     the listening thread.   */
  65:./lib/chibios/os/rt/include/chevents.h ****   eventflags_t          flags;          /**< @brief Flags added to the listener
  66:./lib/chibios/os/rt/include/chevents.h ****                                                     by the event source.    */
  67:./lib/chibios/os/rt/include/chevents.h ****   eventflags_t          wflags;         /**< @brief Flags that this listener
  68:./lib/chibios/os/rt/include/chevents.h ****                                                     interested in.          */
  69:./lib/chibios/os/rt/include/chevents.h **** };
  70:./lib/chibios/os/rt/include/chevents.h **** 
  71:./lib/chibios/os/rt/include/chevents.h **** /**
  72:./lib/chibios/os/rt/include/chevents.h ****  * @brief   Event Source structure.
  73:./lib/chibios/os/rt/include/chevents.h ****  */
  74:./lib/chibios/os/rt/include/chevents.h **** typedef struct event_source {
  75:./lib/chibios/os/rt/include/chevents.h ****   event_listener_t      *next;          /**< @brief First Event Listener
  76:./lib/chibios/os/rt/include/chevents.h ****                                                     registered on the Event
  77:./lib/chibios/os/rt/include/chevents.h ****                                                     Source.                 */
  78:./lib/chibios/os/rt/include/chevents.h **** } event_source_t;
  79:./lib/chibios/os/rt/include/chevents.h **** 
  80:./lib/chibios/os/rt/include/chevents.h **** /**
  81:./lib/chibios/os/rt/include/chevents.h ****  * @brief   Event Handler callback function.
  82:./lib/chibios/os/rt/include/chevents.h ****  */
  83:./lib/chibios/os/rt/include/chevents.h **** typedef void (*evhandler_t)(eventid_t id);
  84:./lib/chibios/os/rt/include/chevents.h **** 
  85:./lib/chibios/os/rt/include/chevents.h **** /*===========================================================================*/
  86:./lib/chibios/os/rt/include/chevents.h **** /* Module macros.                                                            */
  87:./lib/chibios/os/rt/include/chevents.h **** /*===========================================================================*/
  88:./lib/chibios/os/rt/include/chevents.h **** 
  89:./lib/chibios/os/rt/include/chevents.h **** /**
  90:./lib/chibios/os/rt/include/chevents.h ****  * @brief   All events allowed mask.
  91:./lib/chibios/os/rt/include/chevents.h ****  */
  92:./lib/chibios/os/rt/include/chevents.h **** #define ALL_EVENTS      ((eventmask_t)-1)
  93:./lib/chibios/os/rt/include/chevents.h **** 
  94:./lib/chibios/os/rt/include/chevents.h **** /**
  95:./lib/chibios/os/rt/include/chevents.h ****  * @brief   Returns an event mask from an event identifier.
  96:./lib/chibios/os/rt/include/chevents.h ****  */
  97:./lib/chibios/os/rt/include/chevents.h **** #define EVENT_MASK(eid) ((eventmask_t)1 << (eventmask_t)(eid))
  98:./lib/chibios/os/rt/include/chevents.h **** 
  99:./lib/chibios/os/rt/include/chevents.h **** /**
 100:./lib/chibios/os/rt/include/chevents.h ****  * @brief   Data part of a static event source initializer.
 101:./lib/chibios/os/rt/include/chevents.h ****  * @details This macro should be used when statically initializing an event
 102:./lib/chibios/os/rt/include/chevents.h ****  *          source that is part of a bigger structure.
 103:./lib/chibios/os/rt/include/chevents.h ****  * @param name          the name of the event source variable
 104:./lib/chibios/os/rt/include/chevents.h ****  */
 105:./lib/chibios/os/rt/include/chevents.h **** #define _EVENTSOURCE_DATA(name) {(event_listener_t *)(&name)}
 106:./lib/chibios/os/rt/include/chevents.h **** 
 107:./lib/chibios/os/rt/include/chevents.h **** /**
 108:./lib/chibios/os/rt/include/chevents.h ****  * @brief   Static event source initializer.
 109:./lib/chibios/os/rt/include/chevents.h ****  * @details Statically initialized event sources require no explicit
 110:./lib/chibios/os/rt/include/chevents.h ****  *          initialization using @p chEvtInit().
 111:./lib/chibios/os/rt/include/chevents.h ****  *
 112:./lib/chibios/os/rt/include/chevents.h ****  * @param name          the name of the event source variable
 113:./lib/chibios/os/rt/include/chevents.h ****  */
 114:./lib/chibios/os/rt/include/chevents.h **** #define EVENTSOURCE_DECL(name) event_source_t name = _EVENTSOURCE_DATA(name)
 115:./lib/chibios/os/rt/include/chevents.h **** 
 116:./lib/chibios/os/rt/include/chevents.h **** /*===========================================================================*/
 117:./lib/chibios/os/rt/include/chevents.h **** /* External declarations.                                                    */
 118:./lib/chibios/os/rt/include/chevents.h **** /*===========================================================================*/
 119:./lib/chibios/os/rt/include/chevents.h **** 
 120:./lib/chibios/os/rt/include/chevents.h **** #ifdef __cplusplus
 121:./lib/chibios/os/rt/include/chevents.h **** extern "C" {
 122:./lib/chibios/os/rt/include/chevents.h **** #endif
 123:./lib/chibios/os/rt/include/chevents.h ****   void chEvtRegisterMaskWithFlags(event_source_t *esp,
 124:./lib/chibios/os/rt/include/chevents.h ****                                   event_listener_t *elp,
 125:./lib/chibios/os/rt/include/chevents.h ****                                   eventmask_t events,
 126:./lib/chibios/os/rt/include/chevents.h ****                                   eventflags_t wflags);
 127:./lib/chibios/os/rt/include/chevents.h ****   void chEvtUnregister(event_source_t *esp, event_listener_t *elp);
 128:./lib/chibios/os/rt/include/chevents.h ****   eventmask_t chEvtGetAndClearEvents(eventmask_t events);
 129:./lib/chibios/os/rt/include/chevents.h ****   eventmask_t chEvtAddEvents(eventmask_t events);
 130:./lib/chibios/os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlags(event_listener_t *elp);
 131:./lib/chibios/os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlagsI(event_listener_t *elp);
 132:./lib/chibios/os/rt/include/chevents.h ****   void chEvtSignal(thread_t *tp, eventmask_t events);
 133:./lib/chibios/os/rt/include/chevents.h ****   void chEvtSignalI(thread_t *tp, eventmask_t events);
 134:./lib/chibios/os/rt/include/chevents.h ****   void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags);
 135:./lib/chibios/os/rt/include/chevents.h ****   void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags);
 136:./lib/chibios/os/rt/include/chevents.h ****   void chEvtDispatch(const evhandler_t *handlers, eventmask_t events);
 137:./lib/chibios/os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == TRUE) || (CH_CFG_USE_EVENTS_TIMEOUT == FALSE)
 138:./lib/chibios/os/rt/include/chevents.h ****   eventmask_t chEvtWaitOne(eventmask_t events);
 139:./lib/chibios/os/rt/include/chevents.h ****   eventmask_t chEvtWaitAny(eventmask_t events);
 140:./lib/chibios/os/rt/include/chevents.h ****   eventmask_t chEvtWaitAll(eventmask_t events);
 141:./lib/chibios/os/rt/include/chevents.h **** #endif
 142:./lib/chibios/os/rt/include/chevents.h **** #if CH_CFG_USE_EVENTS_TIMEOUT == TRUE
 143:./lib/chibios/os/rt/include/chevents.h ****   eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time);
 144:./lib/chibios/os/rt/include/chevents.h ****   eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time);
 145:./lib/chibios/os/rt/include/chevents.h ****   eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time);
 146:./lib/chibios/os/rt/include/chevents.h **** #endif
 147:./lib/chibios/os/rt/include/chevents.h **** #ifdef __cplusplus
 148:./lib/chibios/os/rt/include/chevents.h **** }
 149:./lib/chibios/os/rt/include/chevents.h **** #endif
 150:./lib/chibios/os/rt/include/chevents.h **** 
 151:./lib/chibios/os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == FALSE) && (CH_CFG_USE_EVENTS_TIMEOUT == TRUE)
 152:./lib/chibios/os/rt/include/chevents.h **** #define chEvtWaitOne(mask) chEvtWaitOneTimeout(mask, TIME_INFINITE)
 153:./lib/chibios/os/rt/include/chevents.h **** #define chEvtWaitAny(mask) chEvtWaitAnyTimeout(mask, TIME_INFINITE)
 154:./lib/chibios/os/rt/include/chevents.h **** #define chEvtWaitAll(mask) chEvtWaitAllTimeout(mask, TIME_INFINITE)
 155:./lib/chibios/os/rt/include/chevents.h **** #endif
 156:./lib/chibios/os/rt/include/chevents.h **** 
 157:./lib/chibios/os/rt/include/chevents.h **** /*===========================================================================*/
 158:./lib/chibios/os/rt/include/chevents.h **** /* Module inline functions.                                                  */
 159:./lib/chibios/os/rt/include/chevents.h **** /*===========================================================================*/
 160:./lib/chibios/os/rt/include/chevents.h **** 
 161:./lib/chibios/os/rt/include/chevents.h **** /**
 162:./lib/chibios/os/rt/include/chevents.h ****  * @brief   Initializes an Event Source.
 163:./lib/chibios/os/rt/include/chevents.h ****  * @note    This function can be invoked before the kernel is initialized
 164:./lib/chibios/os/rt/include/chevents.h ****  *          because it just prepares a @p event_source_t structure.
 165:./lib/chibios/os/rt/include/chevents.h ****  *
 166:./lib/chibios/os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 167:./lib/chibios/os/rt/include/chevents.h ****  *
 168:./lib/chibios/os/rt/include/chevents.h ****  * @init
 169:./lib/chibios/os/rt/include/chevents.h ****  */
 170:./lib/chibios/os/rt/include/chevents.h **** static inline void chEvtObjectInit(event_source_t *esp) {
 171:./lib/chibios/os/rt/include/chevents.h **** 
 172:./lib/chibios/os/rt/include/chevents.h ****   esp->next = (event_listener_t *)esp;
 425              		.loc 2 172 0
 426 000c 4360     		str	r3, [r0, #4]
 427              	.LVL44:
 428              	.LBE139:
 429              	.LBE138:
 430              	.LBE137:
 197:lib/chibios/os/hal/src/hal_serial_usb.c ****   ibqObjectInit(&sdup->ibqueue, true, sdup->ib,
 431              		.loc 1 197 0
 432 000e 0226     		movs	r6, #2
 433 0010 0E4B     		ldr	r3, .L25+4
 196:lib/chibios/os/hal/src/hal_serial_usb.c ****   ibqObjectInit(&sdup->ibqueue, true, sdup->ib,
 434              		.loc 1 196 0
 435 0012 0572     		strb	r5, [r0, #8]
 192:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 436              		.loc 1 192 0
 437 0014 0446     		mov	r4, r0
 438              		.loc 1 197 0
 439 0016 0290     		str	r0, [sp, #8]
 440 0018 0193     		str	r3, [sp, #4]
 441 001a 00F17C02 		add	r2, r0, #124
 442 001e 2B46     		mov	r3, r5
 443 0020 2946     		mov	r1, r5
 444 0022 0096     		str	r6, [sp]
 445 0024 0C30     		adds	r0, r0, #12
 446              	.LVL45:
 447 0026 FFF7FEFF 		bl	ibqObjectInit
 448              	.LVL46:
 198:lib/chibios/os/hal/src/hal_serial_usb.c ****                 SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
 199:lib/chibios/os/hal/src/hal_serial_usb.c ****                 ibnotify, sdup);
 200:lib/chibios/os/hal/src/hal_serial_usb.c ****   obqObjectInit(&sdup->obqueue, true, sdup->ob,
 449              		.loc 1 200 0
 450 002a 094B     		ldr	r3, .L25+8
 451 002c 0294     		str	r4, [sp, #8]
 452 002e CDE90063 		strd	r6, r3, [sp]
 453 0032 04F18602 		add	r2, r4, #134
 454 0036 2B46     		mov	r3, r5
 455 0038 2946     		mov	r1, r5
 456 003a 04F14400 		add	r0, r4, #68
 457 003e FFF7FEFF 		bl	obqObjectInit
 458              	.LVL47:
 201:lib/chibios/os/hal/src/hal_serial_usb.c ****                 SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
 202:lib/chibios/os/hal/src/hal_serial_usb.c ****                 obnotify, sdup);
 203:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 459              		.loc 1 203 0
 460 0042 04B0     		add	sp, sp, #16
 461              		.cfi_def_cfa_offset 16
 462              		@ sp needed
 463 0044 70BD     		pop	{r4, r5, r6, pc}
 464              	.LVL48:
 465              	.L26:
 466 0046 00BF     		.align	2
 467              	.L25:
 468 0048 00000000 		.word	.LANCHOR0
 469 004c 00000000 		.word	ibnotify
 470 0050 00000000 		.word	obnotify
 471              		.cfi_endproc
 472              	.LFE291:
 474              		.section	.text.sduStart,"ax",%progbits
 475              		.align	1
 476              		.global	sduStart
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 480              		.fpu softvfp
 482              	sduStart:
 483              	.LFB292:
 204:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 205:lib/chibios/os/hal/src/hal_serial_usb.c **** /**
 206:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @brief   Configures and starts the driver.
 207:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 208:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @param[in] sdup      pointer to a @p SerialUSBDriver object
 209:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @param[in] config    the serial over USB driver configuration
 210:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 211:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @api
 212:lib/chibios/os/hal/src/hal_serial_usb.c ****  */
 213:lib/chibios/os/hal/src/hal_serial_usb.c **** void sduStart(SerialUSBDriver *sdup, const SerialUSBConfig *config) {
 484              		.loc 1 213 0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 488              		@ link register save eliminated.
 489              	.LVL49:
 214:lib/chibios/os/hal/src/hal_serial_usb.c ****   USBDriver *usbp = config->usbp;
 490              		.loc 1 214 0
 491 0000 0B68     		ldr	r3, [r1]
 492              	.LVL50:
 493              	.LBB140:
 494              	.LBB141:
 495              	.LBB142:
 496              	.LBB143:
 497              	.LBB144:
 498              		.file 3 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @version  V4.30
   5:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
   9:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    All rights reserved.
  10:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      specific prior written permission.
  20:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    *
  21:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  35:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  38:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #endif
  45:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  46:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  47:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   @{
  51:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  52:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  53:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  54:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  58:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  60:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  62:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  63:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  64:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  65:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  69:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  71:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  73:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  74:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  75:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  76:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Control Register value
  79:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  80:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  82:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
  83:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  84:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
  86:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  87:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  88:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  89:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  90:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  94:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  96:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  98:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  99:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 100:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 101:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 105:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 107:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 108:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 109:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 111:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 112:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 113:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 114:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 115:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               APSR Register value
 118:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 119:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 121:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 122:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 123:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 125:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 126:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 127:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 128:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 129:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 132:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 134:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 136:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 137:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 138:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 140:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 141:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 142:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 143:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 144:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               PSP Register value
 147:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 148:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 150:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 151:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 154:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 155:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 156:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 157:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 158:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 162:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 164:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 166:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 167:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 168:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 169:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               MSP Register value
 172:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 173:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 175:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 176:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 177:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 179:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 180:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 181:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 182:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 183:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 188:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 190:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 192:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 193:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 194:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 195:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 199:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 201:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 202:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 203:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 205:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 206:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 207:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 208:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 209:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 213:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 215:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 217:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 218:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 219:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 221:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 222:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 226:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 228:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 230:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 231:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 232:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 233:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 237:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 239:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 241:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 243:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 244:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 248:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 250:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 251:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 252:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 254:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 255:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 257:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 499              		.loc 3 264 0
 500 0002 2022     		movs	r2, #32
 501              		.syntax unified
 502              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 503 0004 82F31188 		MSR basepri, r2
 504              	@ 0 "" 2
 505              	.LVL51:
 506              		.thumb
 507              		.syntax unified
 508              	.LBE144:
 509              	.LBE143:
 510              	.LBE142:
 511              	.LBE141:
 512              	.LBE140:
 215:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 216:lib/chibios/os/hal/src/hal_serial_usb.c ****   osalDbgCheck(sdup != NULL);
 217:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 218:lib/chibios/os/hal/src/hal_serial_usb.c ****   osalSysLock();
 219:lib/chibios/os/hal/src/hal_serial_usb.c ****   osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
 220:lib/chibios/os/hal/src/hal_serial_usb.c ****                 "invalid state");
 221:lib/chibios/os/hal/src/hal_serial_usb.c ****   usbp->in_params[config->bulk_in - 1U]   = sdup;
 513              		.loc 1 221 0
 514 0008 0A79     		ldrb	r2, [r1, #4]	@ zero_extendqisi2
 515 000a 03EB8202 		add	r2, r3, r2, lsl #2
 516 000e 9062     		str	r0, [r2, #40]
 222:lib/chibios/os/hal/src/hal_serial_usb.c ****   usbp->out_params[config->bulk_out - 1U] = sdup;
 517              		.loc 1 222 0
 518 0010 4A79     		ldrb	r2, [r1, #5]	@ zero_extendqisi2
 519 0012 1132     		adds	r2, r2, #17
 520 0014 43F82200 		str	r0, [r3, r2, lsl #2]
 223:lib/chibios/os/hal/src/hal_serial_usb.c ****   if (config->int_in > 0U) {
 521              		.loc 1 223 0
 522 0018 8A79     		ldrb	r2, [r1, #6]	@ zero_extendqisi2
 523 001a 12B1     		cbz	r2, .L28
 224:lib/chibios/os/hal/src/hal_serial_usb.c ****     usbp->in_params[config->int_in - 1U]  = sdup;
 524              		.loc 1 224 0
 525 001c 03EB8203 		add	r3, r3, r2, lsl #2
 526              	.LVL52:
 527 0020 9862     		str	r0, [r3, #40]
 528              	.L28:
 225:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
 226:lib/chibios/os/hal/src/hal_serial_usb.c ****   sdup->config = config;
 227:lib/chibios/os/hal/src/hal_serial_usb.c ****   sdup->state = SDU_READY;
 529              		.loc 1 227 0
 530 0022 0223     		movs	r3, #2
 531 0024 0372     		strb	r3, [r0, #8]
 532              	.LVL53:
 226:lib/chibios/os/hal/src/hal_serial_usb.c ****   sdup->state = SDU_READY;
 533              		.loc 1 226 0
 534 0026 C0F89010 		str	r1, [r0, #144]
 535              	.LBB145:
 536              	.LBB146:
 537              	.LBB147:
 538              	.LBB148:
 539              	.LBB149:
 540              	.LBB150:
 541              		.loc 3 264 0
 542 002a 0023     		movs	r3, #0
 543              		.syntax unified
 544              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 545 002c 83F31188 		MSR basepri, r3
 546              	@ 0 "" 2
 547              	.LVL54:
 548              		.thumb
 549              		.syntax unified
 550              	.LBE150:
 551              	.LBE149:
 552              	.LBE148:
 553              	.LBE147:
 554              	.LBE146:
 555              	.LBE145:
 228:lib/chibios/os/hal/src/hal_serial_usb.c ****   osalSysUnlock();
 229:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 556              		.loc 1 229 0
 557 0030 7047     		bx	lr
 558              		.cfi_endproc
 559              	.LFE292:
 561              		.section	.text.sduStop,"ax",%progbits
 562              		.align	1
 563              		.global	sduStop
 564              		.syntax unified
 565              		.thumb
 566              		.thumb_func
 567              		.fpu softvfp
 569              	sduStop:
 570              	.LFB293:
 230:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 231:lib/chibios/os/hal/src/hal_serial_usb.c **** /**
 232:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @brief   Stops the driver.
 233:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @details Any thread waiting on the driver's queues will be awakened with
 234:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          the message @p MSG_RESET.
 235:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 236:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @param[in] sdup      pointer to a @p SerialUSBDriver object
 237:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 238:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @api
 239:lib/chibios/os/hal/src/hal_serial_usb.c ****  */
 240:lib/chibios/os/hal/src/hal_serial_usb.c **** void sduStop(SerialUSBDriver *sdup) {
 571              		.loc 1 240 0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 0
 574              		@ frame_needed = 0, uses_anonymous_args = 0
 575              	.LVL55:
 576 0000 38B5     		push	{r3, r4, r5, lr}
 577              		.cfi_def_cfa_offset 16
 578              		.cfi_offset 3, -16
 579              		.cfi_offset 4, -12
 580              		.cfi_offset 5, -8
 581              		.cfi_offset 14, -4
 241:lib/chibios/os/hal/src/hal_serial_usb.c ****   USBDriver *usbp = sdup->config->usbp;
 582              		.loc 1 241 0
 583 0002 D0F89030 		ldr	r3, [r0, #144]
 240:lib/chibios/os/hal/src/hal_serial_usb.c ****   USBDriver *usbp = sdup->config->usbp;
 584              		.loc 1 240 0
 585 0006 0446     		mov	r4, r0
 586              		.loc 1 241 0
 587 0008 1B68     		ldr	r3, [r3]
 588              	.LVL56:
 589              	.LBB151:
 590              	.LBB152:
 591              	.LBB153:
 592              	.LBB154:
 593              	.LBB155:
 594              		.loc 3 264 0
 595 000a 2022     		movs	r2, #32
 596              		.syntax unified
 597              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 598 000c 82F31188 		MSR basepri, r2
 599              	@ 0 "" 2
 600              	.LVL57:
 601              		.thumb
 602              		.syntax unified
 603              	.LBE155:
 604              	.LBE154:
 605              	.LBE153:
 606              	.LBE152:
 607              	.LBE151:
 242:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 243:lib/chibios/os/hal/src/hal_serial_usb.c ****   osalDbgCheck(sdup != NULL);
 244:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 245:lib/chibios/os/hal/src/hal_serial_usb.c ****   osalSysLock();
 246:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 247:lib/chibios/os/hal/src/hal_serial_usb.c ****   osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
 248:lib/chibios/os/hal/src/hal_serial_usb.c ****                 "invalid state");
 249:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 250:lib/chibios/os/hal/src/hal_serial_usb.c ****   /* Driver in stopped state.*/
 251:lib/chibios/os/hal/src/hal_serial_usb.c ****   usbp->in_params[sdup->config->bulk_in - 1U]   = NULL;
 608              		.loc 1 251 0
 609 0010 D0F89000 		ldr	r0, [r0, #144]
 610              	.LVL58:
 611 0014 0279     		ldrb	r2, [r0, #4]	@ zero_extendqisi2
 612 0016 0932     		adds	r2, r2, #9
 613 0018 03EB8202 		add	r2, r3, r2, lsl #2
 614 001c 0021     		movs	r1, #0
 615 001e 5160     		str	r1, [r2, #4]
 252:lib/chibios/os/hal/src/hal_serial_usb.c ****   usbp->out_params[sdup->config->bulk_out - 1U] = NULL;
 616              		.loc 1 252 0
 617 0020 4279     		ldrb	r2, [r0, #5]	@ zero_extendqisi2
 618 0022 1132     		adds	r2, r2, #17
 619 0024 43F82210 		str	r1, [r3, r2, lsl #2]
 253:lib/chibios/os/hal/src/hal_serial_usb.c ****   if (sdup->config->int_in > 0U) {
 620              		.loc 1 253 0
 621 0028 8279     		ldrb	r2, [r0, #6]	@ zero_extendqisi2
 622 002a 1AB1     		cbz	r2, .L33
 254:lib/chibios/os/hal/src/hal_serial_usb.c ****     usbp->in_params[sdup->config->int_in - 1U]  = NULL;
 623              		.loc 1 254 0
 624 002c 0932     		adds	r2, r2, #9
 625 002e 03EB8203 		add	r3, r3, r2, lsl #2
 626              	.LVL59:
 627 0032 5960     		str	r1, [r3, #4]
 628              	.L33:
 255:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
 256:lib/chibios/os/hal/src/hal_serial_usb.c ****   sdup->config = NULL;
 257:lib/chibios/os/hal/src/hal_serial_usb.c ****   sdup->state  = SDU_STOP;
 629              		.loc 1 257 0
 630 0034 0123     		movs	r3, #1
 256:lib/chibios/os/hal/src/hal_serial_usb.c ****   sdup->state  = SDU_STOP;
 631              		.loc 1 256 0
 632 0036 0025     		movs	r5, #0
 633              		.loc 1 257 0
 634 0038 2372     		strb	r3, [r4, #8]
 635              	.LVL60:
 636              	.LBB156:
 637              	.LBB157:
 638              		.file 4 "./lib/chibios/os/hal/osal/rt/osal.h"
   1:./lib/chibios/os/hal/osal/rt/osal.h **** /*
   2:./lib/chibios/os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:./lib/chibios/os/hal/osal/rt/osal.h **** 
   4:./lib/chibios/os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:./lib/chibios/os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:./lib/chibios/os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:./lib/chibios/os/hal/osal/rt/osal.h **** 
   8:./lib/chibios/os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:./lib/chibios/os/hal/osal/rt/osal.h **** 
  10:./lib/chibios/os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:./lib/chibios/os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:./lib/chibios/os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:./lib/chibios/os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:./lib/chibios/os/hal/osal/rt/osal.h ****     limitations under the License.
  15:./lib/chibios/os/hal/osal/rt/osal.h **** */
  16:./lib/chibios/os/hal/osal/rt/osal.h **** 
  17:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  18:./lib/chibios/os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:./lib/chibios/os/hal/osal/rt/osal.h ****  *
  21:./lib/chibios/os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  23:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  24:./lib/chibios/os/hal/osal/rt/osal.h **** 
  25:./lib/chibios/os/hal/osal/rt/osal.h **** #ifndef _OSAL_H_
  26:./lib/chibios/os/hal/osal/rt/osal.h **** #define _OSAL_H_
  27:./lib/chibios/os/hal/osal/rt/osal.h **** 
  28:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:./lib/chibios/os/hal/osal/rt/osal.h **** 
  32:./lib/chibios/os/hal/osal/rt/osal.h **** #include "ch.h"
  33:./lib/chibios/os/hal/osal/rt/osal.h **** 
  34:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:./lib/chibios/os/hal/osal/rt/osal.h **** 
  38:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  39:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  41:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  42:./lib/chibios/os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:./lib/chibios/os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  45:./lib/chibios/os/hal/osal/rt/osal.h **** 
  46:./lib/chibios/os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:./lib/chibios/os/hal/osal/rt/osal.h **** #define TRUE                                (!FALSE)
  48:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  49:./lib/chibios/os/hal/osal/rt/osal.h **** 
  50:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        FALSE
  51:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         TRUE
  52:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  53:./lib/chibios/os/hal/osal/rt/osal.h **** 
  54:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
  55:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  56:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Messages
  57:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  58:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  59:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_OK                              RDY_OK
  60:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_RESET                           RDY_RESET
  61:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         RDY_TIMEOUT
  62:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  63:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  64:./lib/chibios/os/hal/osal/rt/osal.h **** 
  65:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
  66:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  67:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  69:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  70:./lib/chibios/os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((systime_t)0)
  71:./lib/chibios/os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((systime_t)-1)
  72:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  73:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  74:./lib/chibios/os/hal/osal/rt/osal.h **** 
  75:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  76:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  78:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  79:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  83:./lib/chibios/os/hal/osal/rt/osal.h **** 
  84:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  85:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  87:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  88:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  89:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  91:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:./lib/chibios/os/hal/osal/rt/osal.h **** 
  93:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  94:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  96:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:./lib/chibios/os/hal/osal/rt/osal.h **** 
  98:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  99:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 101:./lib/chibios/os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 104:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 106:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 107:./lib/chibios/os/hal/osal/rt/osal.h **** 
 108:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:./lib/chibios/os/hal/osal/rt/osal.h **** 
 112:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:./lib/chibios/os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:./lib/chibios/os/hal/osal/rt/osal.h **** 
 116:./lib/chibios/os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:./lib/chibios/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:./lib/chibios/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:./lib/chibios/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 121:./lib/chibios/os/hal/osal/rt/osal.h **** 
 122:./lib/chibios/os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:./lib/chibios/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 125:./lib/chibios/os/hal/osal/rt/osal.h **** 
 126:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:./lib/chibios/os/hal/osal/rt/osal.h **** 
 130:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 131:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 132:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 134:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 136:./lib/chibios/os/hal/osal/rt/osal.h **** 
 137:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 138:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 139:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 141:./lib/chibios/os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 143:./lib/chibios/os/hal/osal/rt/osal.h **** 
 144:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 145:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 146:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 148:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 150:./lib/chibios/os/hal/osal/rt/osal.h **** 
 151:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 152:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 153:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 154:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 155:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 156:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 157:./lib/chibios/os/hal/osal/rt/osal.h **** 
 158:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 159:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 160:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 161:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 162:./lib/chibios/os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 163:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 164:./lib/chibios/os/hal/osal/rt/osal.h **** 
 165:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 166:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 167:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 168:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 169:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 170:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 171:./lib/chibios/os/hal/osal/rt/osal.h **** 
 172:./lib/chibios/os/hal/osal/rt/osal.h **** #if !CH_CFG_USE_EVENTS
 173:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 174:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 175:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 176:./lib/chibios/os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 177:./lib/chibios/os/hal/osal/rt/osal.h ****  *          an entirely different way.
 178:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 179:./lib/chibios/os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 180:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 181:./lib/chibios/os/hal/osal/rt/osal.h **** typedef struct {
 182:./lib/chibios/os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Flags stored into the
 183:./lib/chibios/os/hal/osal/rt/osal.h ****                                                 object.                     */
 184:./lib/chibios/os/hal/osal/rt/osal.h **** } event_source_t;
 185:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 186:./lib/chibios/os/hal/osal/rt/osal.h **** 
 187:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 188:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 189:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then them
 190:./lib/chibios/os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 191:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 192:./lib/chibios/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 193:./lib/chibios/os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 194:./lib/chibios/os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 195:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 196:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 197:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 198:./lib/chibios/os/hal/osal/rt/osal.h **** 
 199:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 200:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 201:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 202:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 203:./lib/chibios/os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 204:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 205:./lib/chibios/os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 206:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 207:./lib/chibios/os/hal/osal/rt/osal.h **** typedef struct {
 208:./lib/chibios/os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 209:./lib/chibios/os/hal/osal/rt/osal.h **** } threads_queue_t;
 210:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 211:./lib/chibios/os/hal/osal/rt/osal.h **** 
 212:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 213:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 214:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 215:./lib/chibios/os/hal/osal/rt/osal.h **** 
 216:./lib/chibios/os/hal/osal/rt/osal.h **** /* Temporary names provided for ChibiOS 2.x compatibility.*/
 217:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueInit osalThreadQueueObjectInit
 218:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueWakeupAllI osalThreadDequeueAllI
 219:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueWakeupOneI osalThreadDequeueNextI
 220:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueGoSleepTimeoutS osalThreadEnqueueTimeoutS
 221:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalEventInit osalEventObjectInit
 222:./lib/chibios/os/hal/osal/rt/osal.h **** 
 223:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 224:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 225:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 226:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 227:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 228:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 229:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 230:./lib/chibios/os/hal/osal/rt/osal.h ****  *          message and halts.
 231:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 232:./lib/chibios/os/hal/osal/rt/osal.h ****  *          switch is enabled.
 233:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 234:./lib/chibios/os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 235:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 236:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 237:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 238:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 239:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 240:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 241:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 242:./lib/chibios/os/hal/osal/rt/osal.h **** 
 243:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 244:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 245:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 246:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 247:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is enabled.
 248:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 249:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 250:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 251:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 252:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 253:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 254:./lib/chibios/os/hal/osal/rt/osal.h **** 
 255:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 256:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 257:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 258:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 259:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 260:./lib/chibios/os/hal/osal/rt/osal.h **** 
 261:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 262:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 263:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 264:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 265:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 266:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 267:./lib/chibios/os/hal/osal/rt/osal.h **** 
 268:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 269:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 270:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 271:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 272:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 273:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 274:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 275:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 276:./lib/chibios/os/hal/osal/rt/osal.h **** 
 277:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 278:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 279:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 280:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 281:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 282:./lib/chibios/os/hal/osal/rt/osal.h **** 
 283:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 284:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 285:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 286:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 287:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 288:./lib/chibios/os/hal/osal/rt/osal.h **** 
 289:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 290:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 291:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 292:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 293:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 294:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 295:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 296:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 297:./lib/chibios/os/hal/osal/rt/osal.h **** 
 298:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 299:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 300:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 301:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 302:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 303:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 304:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 305:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 306:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 307:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 308:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 309:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 310:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 311:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 312:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_S2ST(sec) S2ST(sec)
 313:./lib/chibios/os/hal/osal/rt/osal.h **** 
 314:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 315:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 316:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 317:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 318:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 319:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 320:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 321:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 322:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 323:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 324:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_MS2ST(msec) MS2ST(msec)
 325:./lib/chibios/os/hal/osal/rt/osal.h **** 
 326:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 327:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 328:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 329:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 330:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 331:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 332:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 333:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 334:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 335:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 336:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_US2ST(usec) US2ST(usec)
 337:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 338:./lib/chibios/os/hal/osal/rt/osal.h **** 
 339:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 340:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 341:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 342:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 343:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 344:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 345:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 346:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 347:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 348:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 349:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 350:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 351:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 352:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 353:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 354:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 355:./lib/chibios/os/hal/osal/rt/osal.h **** 
 356:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 357:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 358:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 359:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 360:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 361:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 362:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 363:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 364:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 365:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 366:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 367:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 368:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 369:./lib/chibios/os/hal/osal/rt/osal.h **** 
 370:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 371:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 372:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 373:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 374:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 375:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 376:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 377:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 378:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 379:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 380:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 381:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 382:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 383:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 384:./lib/chibios/os/hal/osal/rt/osal.h **** 
 385:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 386:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 387:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 388:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 389:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 390:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 391:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 392:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 393:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 394:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 395:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       time in seconds, must be different from zero
 396:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 397:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 398:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 399:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(sec) osalThreadSleep(OSAL_S2ST(sec))
 400:./lib/chibios/os/hal/osal/rt/osal.h **** 
 401:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 402:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 403:./lib/chibios/os/hal/osal/rt/osal.h ****  *          milliseconds.
 404:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 405:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 406:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 407:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 408:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 409:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 410:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 411:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 412:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msec) osalThreadSleep(OSAL_MS2ST(msec))
 413:./lib/chibios/os/hal/osal/rt/osal.h **** 
 414:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 415:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 416:./lib/chibios/os/hal/osal/rt/osal.h ****  *          microseconds.
 417:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 418:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 419:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 420:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 421:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      time in microseconds, must be different from zero
 422:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 423:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 424:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 425:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usec) osalThreadSleep(OSAL_US2ST(usec))
 426:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 427:./lib/chibios/os/hal/osal/rt/osal.h **** 
 428:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 429:./lib/chibios/os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 430:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 431:./lib/chibios/os/hal/osal/rt/osal.h **** 
 432:./lib/chibios/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 433:./lib/chibios/os/hal/osal/rt/osal.h **** extern "C" {
 434:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 435:./lib/chibios/os/hal/osal/rt/osal.h **** 
 436:./lib/chibios/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 437:./lib/chibios/os/hal/osal/rt/osal.h **** }
 438:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 439:./lib/chibios/os/hal/osal/rt/osal.h **** 
 440:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 441:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 442:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 443:./lib/chibios/os/hal/osal/rt/osal.h **** 
 444:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 445:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 446:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 447:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 448:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 449:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 450:./lib/chibios/os/hal/osal/rt/osal.h **** 
 451:./lib/chibios/os/hal/osal/rt/osal.h **** }
 452:./lib/chibios/os/hal/osal/rt/osal.h **** 
 453:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 454:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 455:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 456:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 457:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 458:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 459:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 460:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 461:./lib/chibios/os/hal/osal/rt/osal.h **** 
 462:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 463:./lib/chibios/os/hal/osal/rt/osal.h **** }
 464:./lib/chibios/os/hal/osal/rt/osal.h **** 
 465:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 466:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 467:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 468:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 469:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 470:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 471:./lib/chibios/os/hal/osal/rt/osal.h **** 
 472:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysDisable();
 473:./lib/chibios/os/hal/osal/rt/osal.h **** }
 474:./lib/chibios/os/hal/osal/rt/osal.h **** 
 475:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 476:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 477:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 478:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 479:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 480:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 481:./lib/chibios/os/hal/osal/rt/osal.h **** 
 482:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysEnable();
 483:./lib/chibios/os/hal/osal/rt/osal.h **** }
 484:./lib/chibios/os/hal/osal/rt/osal.h **** 
 485:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 486:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 487:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 488:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 489:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 490:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 491:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 492:./lib/chibios/os/hal/osal/rt/osal.h **** 
 493:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysLock();
 494:./lib/chibios/os/hal/osal/rt/osal.h **** }
 495:./lib/chibios/os/hal/osal/rt/osal.h **** 
 496:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 497:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 498:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 499:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 500:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 501:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 502:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 503:./lib/chibios/os/hal/osal/rt/osal.h **** 
 504:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysUnlock();
 505:./lib/chibios/os/hal/osal/rt/osal.h **** }
 506:./lib/chibios/os/hal/osal/rt/osal.h **** 
 507:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 508:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 509:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 510:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 511:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 512:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 513:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 514:./lib/chibios/os/hal/osal/rt/osal.h **** 
 515:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 516:./lib/chibios/os/hal/osal/rt/osal.h **** }
 517:./lib/chibios/os/hal/osal/rt/osal.h **** 
 518:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 519:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 520:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 521:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 522:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 523:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 524:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 525:./lib/chibios/os/hal/osal/rt/osal.h **** 
 526:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 527:./lib/chibios/os/hal/osal/rt/osal.h **** }
 528:./lib/chibios/os/hal/osal/rt/osal.h **** 
 529:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 530:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 531:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 532:./lib/chibios/os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 533:./lib/chibios/os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 534:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is known.
 535:./lib/chibios/os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 536:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 537:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 538:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 539:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 540:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 541:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 542:./lib/chibios/os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 543:./lib/chibios/os/hal/osal/rt/osal.h **** 
 544:./lib/chibios/os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 545:./lib/chibios/os/hal/osal/rt/osal.h **** }
 546:./lib/chibios/os/hal/osal/rt/osal.h **** 
 547:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 548:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 549:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 550:./lib/chibios/os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 551:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 552:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 553:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 554:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 555:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 556:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 557:./lib/chibios/os/hal/osal/rt/osal.h **** 
 558:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 559:./lib/chibios/os/hal/osal/rt/osal.h **** }
 560:./lib/chibios/os/hal/osal/rt/osal.h **** 
 561:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 562:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 563:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 564:./lib/chibios/os/hal/osal/rt/osal.h ****  *          value.
 565:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 566:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 567:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 568:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 569:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 570:./lib/chibios/os/hal/osal/rt/osal.h **** #if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
 571:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 572:./lib/chibios/os/hal/osal/rt/osal.h **** 
 573:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 574:./lib/chibios/os/hal/osal/rt/osal.h **** }
 575:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 576:./lib/chibios/os/hal/osal/rt/osal.h **** 
 577:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 578:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 579:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 580:./lib/chibios/os/hal/osal/rt/osal.h ****  *          service from the HAL.
 581:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 582:./lib/chibios/os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 583:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 584:./lib/chibios/os/hal/osal/rt/osal.h **** 
 585:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 586:./lib/chibios/os/hal/osal/rt/osal.h **** }
 587:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 588:./lib/chibios/os/hal/osal/rt/osal.h **** 
 589:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 590:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 591:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 592:./lib/chibios/os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 593:./lib/chibios/os/hal/osal/rt/osal.h ****  *          required in this scenario.
 594:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 595:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 596:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 597:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 598:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 599:./lib/chibios/os/hal/osal/rt/osal.h **** 
 600:./lib/chibios/os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 601:./lib/chibios/os/hal/osal/rt/osal.h **** }
 602:./lib/chibios/os/hal/osal/rt/osal.h **** 
 603:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 604:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 605:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 606:./lib/chibios/os/hal/osal/rt/osal.h ****  *          invocation.
 607:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 608:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 609:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 610:./lib/chibios/os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 611:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 612:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 613:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 614:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 615:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 616:./lib/chibios/os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 617:./lib/chibios/os/hal/osal/rt/osal.h **** 
 618:./lib/chibios/os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 619:./lib/chibios/os/hal/osal/rt/osal.h **** }
 620:./lib/chibios/os/hal/osal/rt/osal.h **** 
 621:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 622:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 623:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 624:./lib/chibios/os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 625:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 626:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 627:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 628:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 629:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 630:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 631:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 632:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 633:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 634:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 635:./lib/chibios/os/hal/osal/rt/osal.h **** static inline bool osalOsIsTimeWithinX(systime_t time,
 636:./lib/chibios/os/hal/osal/rt/osal.h ****                                        systime_t start,
 637:./lib/chibios/os/hal/osal/rt/osal.h ****                                        systime_t end) {
 638:./lib/chibios/os/hal/osal/rt/osal.h **** 
 639:./lib/chibios/os/hal/osal/rt/osal.h ****   return chVTIsTimeWithinX(time, start, end);
 640:./lib/chibios/os/hal/osal/rt/osal.h **** }
 641:./lib/chibios/os/hal/osal/rt/osal.h **** 
 642:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 643:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 644:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 645:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 646:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 647:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 648:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        normal time specification.
 649:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 650:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 651:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 652:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 653:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 654:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(systime_t time) {
 655:./lib/chibios/os/hal/osal/rt/osal.h **** 
 656:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdSleepS(time);
 657:./lib/chibios/os/hal/osal/rt/osal.h **** }
 658:./lib/chibios/os/hal/osal/rt/osal.h **** 
 659:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 660:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 661:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 662:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 663:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 664:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 665:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        normal time specification.
 666:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 667:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 668:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 669:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 670:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 671:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(systime_t time) {
 672:./lib/chibios/os/hal/osal/rt/osal.h **** 
 673:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdSleep(time);
 674:./lib/chibios/os/hal/osal/rt/osal.h **** }
 675:./lib/chibios/os/hal/osal/rt/osal.h **** 
 676:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 677:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 678:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 679:./lib/chibios/os/hal/osal/rt/osal.h ****  *          context.
 680:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 681:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 682:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 683:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 684:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 685:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 686:./lib/chibios/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 687:./lib/chibios/os/hal/osal/rt/osal.h **** 
 688:./lib/chibios/os/hal/osal/rt/osal.h ****   return chThdSuspendS(trp);
 689:./lib/chibios/os/hal/osal/rt/osal.h **** }
 690:./lib/chibios/os/hal/osal/rt/osal.h **** 
 691:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 692:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 693:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 694:./lib/chibios/os/hal/osal/rt/osal.h ****  *          context.
 695:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 696:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 697:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 698:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 699:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 700:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        state.
 701:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 702:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 703:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        occurred.
 704:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 705:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 706:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 707:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 708:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 709:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 710:./lib/chibios/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 711:./lib/chibios/os/hal/osal/rt/osal.h ****                                               systime_t timeout) {
 712:./lib/chibios/os/hal/osal/rt/osal.h **** 
 713:./lib/chibios/os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 714:./lib/chibios/os/hal/osal/rt/osal.h **** }
 715:./lib/chibios/os/hal/osal/rt/osal.h **** 
 716:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 717:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 718:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must not reschedule because it can be called from
 719:./lib/chibios/os/hal/osal/rt/osal.h ****  *          ISR context.
 720:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 721:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 722:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 723:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 724:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 725:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 726:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 727:./lib/chibios/os/hal/osal/rt/osal.h **** 
 728:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdResumeI(trp, msg);
 729:./lib/chibios/os/hal/osal/rt/osal.h **** }
 730:./lib/chibios/os/hal/osal/rt/osal.h **** 
 731:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 732:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 733:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 734:./lib/chibios/os/hal/osal/rt/osal.h ****  *          context.
 735:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 736:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 737:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 738:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 739:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 740:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 741:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 742:./lib/chibios/os/hal/osal/rt/osal.h **** 
 743:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdResumeS(trp, msg);
 744:./lib/chibios/os/hal/osal/rt/osal.h **** }
 745:./lib/chibios/os/hal/osal/rt/osal.h **** 
 746:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 747:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Initializes a threads queue object.
 748:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 749:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 750:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 751:./lib/chibios/os/hal/osal/rt/osal.h ****  * @init
 752:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 753:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 754:./lib/chibios/os/hal/osal/rt/osal.h **** 
 755:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdQueueObjectInit(tqp);
 756:./lib/chibios/os/hal/osal/rt/osal.h **** }
 757:./lib/chibios/os/hal/osal/rt/osal.h **** 
 758:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 759:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enqueues the caller thread.
 760:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 761:./lib/chibios/os/hal/osal/rt/osal.h ****  *          dequeued or the specified timeouts expires.
 762:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 763:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 764:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the timeout in system ticks, the special values are
 765:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 766:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 767:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        state.
 768:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 769:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 770:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        occurred.
 771:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 772:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 773:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 774:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 775:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      specified timeout or if the function has been
 776:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 777:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      specification.
 778:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 779:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 780:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 781:./lib/chibios/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 782:./lib/chibios/os/hal/osal/rt/osal.h ****                                               systime_t time) {
 783:./lib/chibios/os/hal/osal/rt/osal.h **** 
 784:./lib/chibios/os/hal/osal/rt/osal.h ****   return chThdEnqueueTimeoutS(tqp, time);
 785:./lib/chibios/os/hal/osal/rt/osal.h **** }
 786:./lib/chibios/os/hal/osal/rt/osal.h **** 
 787:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 788:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 789:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 790:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 791:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 792:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 793:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 794:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 795:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 796:./lib/chibios/os/hal/osal/rt/osal.h **** 
 797:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdDequeueNextI(tqp, msg);
 798:./lib/chibios/os/hal/osal/rt/osal.h **** }
 799:./lib/chibios/os/hal/osal/rt/osal.h **** 
 800:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 801:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 802:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 803:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 804:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 805:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 806:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 807:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 808:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 809:./lib/chibios/os/hal/osal/rt/osal.h **** 
 810:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdDequeueAllI(tqp, msg);
 811:./lib/chibios/os/hal/osal/rt/osal.h **** }
 812:./lib/chibios/os/hal/osal/rt/osal.h **** 
 813:./lib/chibios/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
 814:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 815:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Initializes an event flags object.
 816:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 817:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[out] esp      pointer to the event flags object
 818:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 819:./lib/chibios/os/hal/osal/rt/osal.h ****  * @init
 820:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 821:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalEventObjectInit(event_source_t *esp) {
 822:./lib/chibios/os/hal/osal/rt/osal.h **** 
 823:./lib/chibios/os/hal/osal/rt/osal.h ****   chEvtObjectInit(esp);
 824:./lib/chibios/os/hal/osal/rt/osal.h **** }
 825:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 826:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalEventObjectInit(event_source_t *esp) {
 827:./lib/chibios/os/hal/osal/rt/osal.h **** 
 828:./lib/chibios/os/hal/osal/rt/osal.h ****   esp->flags = 0;
 829:./lib/chibios/os/hal/osal/rt/osal.h **** }
 830:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 831:./lib/chibios/os/hal/osal/rt/osal.h **** 
 832:./lib/chibios/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
 833:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 834:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Add flags to an event source object.
 835:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 836:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] esp       pointer to the event flags object
 837:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] flags     flags to be ORed to the flags mask
 838:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 839:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 840:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 841:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalEventBroadcastFlagsI(event_source_t *esp,
 842:./lib/chibios/os/hal/osal/rt/osal.h ****                                             eventflags_t flags) {
 843:./lib/chibios/os/hal/osal/rt/osal.h **** 
 844:./lib/chibios/os/hal/osal/rt/osal.h ****   chEvtBroadcastFlagsI(esp, flags);
 639              		.loc 4 844 0
 640 003a 0221     		movs	r1, #2
 641 003c 201D     		adds	r0, r4, #4
 642              	.LVL61:
 643              	.LBE157:
 644              	.LBE156:
 256:lib/chibios/os/hal/src/hal_serial_usb.c ****   sdup->state  = SDU_STOP;
 645              		.loc 1 256 0
 646 003e C4F89050 		str	r5, [r4, #144]
 647              	.LVL62:
 648              	.LBB159:
 649              	.LBB158:
 650              		.loc 4 844 0
 651 0042 FFF7FEFF 		bl	chEvtBroadcastFlagsI
 652              	.LVL63:
 653              	.LBE158:
 654              	.LBE159:
 258:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 259:lib/chibios/os/hal/src/hal_serial_usb.c ****   /* Enforces a disconnection.*/
 260:lib/chibios/os/hal/src/hal_serial_usb.c ****   chnAddFlagsI(sdup, CHN_DISCONNECTED);
 261:lib/chibios/os/hal/src/hal_serial_usb.c ****   ibqResetI(&sdup->ibqueue);
 655              		.loc 1 261 0
 656 0046 04F10C00 		add	r0, r4, #12
 657 004a FFF7FEFF 		bl	ibqResetI
 658              	.LVL64:
 262:lib/chibios/os/hal/src/hal_serial_usb.c ****   obqResetI(&sdup->obqueue);
 659              		.loc 1 262 0
 660 004e 04F14400 		add	r0, r4, #68
 661 0052 FFF7FEFF 		bl	obqResetI
 662              	.LVL65:
 663              	.LBB160:
 664              	.LBB161:
 600:./lib/chibios/os/hal/osal/rt/osal.h **** }
 665              		.loc 4 600 0
 666 0056 FFF7FEFF 		bl	chSchRescheduleS
 667              	.LVL66:
 668              	.LBE161:
 669              	.LBE160:
 670              	.LBB162:
 671              	.LBB163:
 672              	.LBB164:
 673              	.LBB165:
 674              	.LBB166:
 675              	.LBB167:
 676              		.loc 3 264 0
 677              		.syntax unified
 678              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 679 005a 85F31188 		MSR basepri, r5
 680              	@ 0 "" 2
 681              	.LVL67:
 682              		.thumb
 683              		.syntax unified
 684              	.LBE167:
 685              	.LBE166:
 686              	.LBE165:
 687              	.LBE164:
 688              	.LBE163:
 689              	.LBE162:
 263:lib/chibios/os/hal/src/hal_serial_usb.c ****   osalOsRescheduleS();
 264:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 265:lib/chibios/os/hal/src/hal_serial_usb.c ****   osalSysUnlock();
 266:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 690              		.loc 1 266 0
 691 005e 38BD     		pop	{r3, r4, r5, pc}
 692              		.cfi_endproc
 693              	.LFE293:
 695              		.section	.text.sduSuspendHookI,"ax",%progbits
 696              		.align	1
 697              		.global	sduSuspendHookI
 698              		.syntax unified
 699              		.thumb
 700              		.thumb_func
 701              		.fpu softvfp
 703              	sduSuspendHookI:
 704              	.LFB294:
 267:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 268:lib/chibios/os/hal/src/hal_serial_usb.c **** /**
 269:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @brief   USB device suspend handler.
 270:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @details Generates a @p CHN_DISCONNECT event and puts queues in
 271:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          non-blocking mode, this way the application cannot get stuck
 272:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          in the middle of an I/O operations.
 273:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @note    If this function is not called from an ISR then an explicit call
 274:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          to @p osalOsRescheduleS() in necessary afterward.
 275:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 276:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @param[in] sdup      pointer to a @p SerialUSBDriver object
 277:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 278:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @iclass
 279:lib/chibios/os/hal/src/hal_serial_usb.c ****  */
 280:lib/chibios/os/hal/src/hal_serial_usb.c **** void sduSuspendHookI(SerialUSBDriver *sdup) {
 705              		.loc 1 280 0
 706              		.cfi_startproc
 707              		@ args = 0, pretend = 0, frame = 0
 708              		@ frame_needed = 0, uses_anonymous_args = 0
 709              	.LVL68:
 710 0000 38B5     		push	{r3, r4, r5, lr}
 711              		.cfi_def_cfa_offset 16
 712              		.cfi_offset 3, -16
 713              		.cfi_offset 4, -12
 714              		.cfi_offset 5, -8
 715              		.cfi_offset 14, -4
 716              		.loc 1 280 0
 717 0002 0446     		mov	r4, r0
 281:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 282:lib/chibios/os/hal/src/hal_serial_usb.c ****   chnAddFlagsI(sdup, CHN_DISCONNECTED);
 283:lib/chibios/os/hal/src/hal_serial_usb.c ****   bqSuspendI(&sdup->ibqueue);
 718              		.loc 1 283 0
 719 0004 0125     		movs	r5, #1
 720              	.LBB168:
 721              	.LBB169:
 722              		.loc 4 844 0
 723 0006 0221     		movs	r1, #2
 724 0008 0430     		adds	r0, r0, #4
 725              	.LVL69:
 726 000a FFF7FEFF 		bl	chEvtBroadcastFlagsI
 727              	.LVL70:
 728              	.LBE169:
 729              	.LBE168:
 730              	.LBB170:
 731              	.LBB171:
 810:./lib/chibios/os/hal/osal/rt/osal.h **** }
 732              		.loc 4 810 0
 733 000e 04F10C00 		add	r0, r4, #12
 734              	.LBE171:
 735              	.LBE170:
 736              		.loc 1 283 0
 737 0012 2575     		strb	r5, [r4, #20]
 738              	.LVL71:
 739              	.LBB173:
 740              	.LBB172:
 810:./lib/chibios/os/hal/osal/rt/osal.h **** }
 741              		.loc 4 810 0
 742 0014 6FF00101 		mvn	r1, #1
 743 0018 FFF7FEFF 		bl	chThdDequeueAllI
 744              	.LVL72:
 745              	.LBE172:
 746              	.LBE173:
 284:lib/chibios/os/hal/src/hal_serial_usb.c ****   bqSuspendI(&sdup->obqueue);
 747              		.loc 1 284 0
 748 001c 84F84C50 		strb	r5, [r4, #76]
 749              	.LVL73:
 750              	.LBB174:
 751              	.LBB175:
 810:./lib/chibios/os/hal/osal/rt/osal.h **** }
 752              		.loc 4 810 0
 753 0020 04F14400 		add	r0, r4, #68
 754              	.LVL74:
 755 0024 6FF00101 		mvn	r1, #1
 756              	.LBE175:
 757              	.LBE174:
 285:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 758              		.loc 1 285 0
 759 0028 BDE83840 		pop	{r3, r4, r5, lr}
 760              		.cfi_restore 14
 761              		.cfi_restore 5
 762              		.cfi_restore 4
 763              		.cfi_restore 3
 764              		.cfi_def_cfa_offset 0
 765              	.LVL75:
 766              	.LBB177:
 767              	.LBB176:
 810:./lib/chibios/os/hal/osal/rt/osal.h **** }
 768              		.loc 4 810 0
 769 002c FFF7FEBF 		b	chThdDequeueAllI
 770              	.LVL76:
 771              	.LBE176:
 772              	.LBE177:
 773              		.cfi_endproc
 774              	.LFE294:
 776              		.section	.text.sduWakeupHookI,"ax",%progbits
 777              		.align	1
 778              		.global	sduWakeupHookI
 779              		.syntax unified
 780              		.thumb
 781              		.thumb_func
 782              		.fpu softvfp
 784              	sduWakeupHookI:
 785              	.LFB295:
 286:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 287:lib/chibios/os/hal/src/hal_serial_usb.c **** /**
 288:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @brief   USB device wakeup handler.
 289:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @details Generates a @p CHN_CONNECT event and resumes normal queues
 290:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          operations.
 291:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 292:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @note    If this function is not called from an ISR then an explicit call
 293:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          to @p osalOsRescheduleS() in necessary afterward.
 294:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 295:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @param[in] sdup      pointer to a @p SerialUSBDriver object
 296:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 297:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @iclass
 298:lib/chibios/os/hal/src/hal_serial_usb.c ****  */
 299:lib/chibios/os/hal/src/hal_serial_usb.c **** void sduWakeupHookI(SerialUSBDriver *sdup) {
 786              		.loc 1 299 0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              	.LVL77:
 791 0000 10B5     		push	{r4, lr}
 792              		.cfi_def_cfa_offset 8
 793              		.cfi_offset 4, -8
 794              		.cfi_offset 14, -4
 795              	.LBB178:
 796              	.LBB179:
 797              		.loc 4 844 0
 798 0002 0121     		movs	r1, #1
 799              	.LBE179:
 800              	.LBE178:
 801              		.loc 1 299 0
 802 0004 0446     		mov	r4, r0
 803              	.LBB181:
 804              	.LBB180:
 805              		.loc 4 844 0
 806 0006 0430     		adds	r0, r0, #4
 807              	.LVL78:
 808 0008 FFF7FEFF 		bl	chEvtBroadcastFlagsI
 809              	.LVL79:
 810              	.LBE180:
 811              	.LBE181:
 300:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 301:lib/chibios/os/hal/src/hal_serial_usb.c ****   chnAddFlagsI(sdup, CHN_CONNECTED);
 302:lib/chibios/os/hal/src/hal_serial_usb.c ****   bqResumeX(&sdup->ibqueue);
 812              		.loc 1 302 0
 813 000c 0023     		movs	r3, #0
 814 000e 2375     		strb	r3, [r4, #20]
 303:lib/chibios/os/hal/src/hal_serial_usb.c ****   bqResumeX(&sdup->obqueue);
 815              		.loc 1 303 0
 816 0010 84F84C30 		strb	r3, [r4, #76]
 304:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 817              		.loc 1 304 0
 818 0014 10BD     		pop	{r4, pc}
 819              		.cfi_endproc
 820              	.LFE295:
 822              		.section	.text.sduConfigureHookI,"ax",%progbits
 823              		.align	1
 824              		.global	sduConfigureHookI
 825              		.syntax unified
 826              		.thumb
 827              		.thumb_func
 828              		.fpu softvfp
 830              	sduConfigureHookI:
 831              	.LFB296:
 305:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 306:lib/chibios/os/hal/src/hal_serial_usb.c **** /**
 307:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @brief   USB device configured handler.
 308:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 309:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @param[in] sdup      pointer to a @p SerialUSBDriver object
 310:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 311:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @iclass
 312:lib/chibios/os/hal/src/hal_serial_usb.c ****  */
 313:lib/chibios/os/hal/src/hal_serial_usb.c **** void sduConfigureHookI(SerialUSBDriver *sdup) {
 832              		.loc 1 313 0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 0
 835              		@ frame_needed = 0, uses_anonymous_args = 0
 836              	.LVL80:
 837 0000 38B5     		push	{r3, r4, r5, lr}
 838              		.cfi_def_cfa_offset 16
 839              		.cfi_offset 3, -16
 840              		.cfi_offset 4, -12
 841              		.cfi_offset 5, -8
 842              		.cfi_offset 14, -4
 843              		.loc 1 313 0
 844 0002 0446     		mov	r4, r0
 314:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 315:lib/chibios/os/hal/src/hal_serial_usb.c ****   ibqResetI(&sdup->ibqueue);
 316:lib/chibios/os/hal/src/hal_serial_usb.c ****   bqResumeX(&sdup->ibqueue);
 845              		.loc 1 316 0
 846 0004 0025     		movs	r5, #0
 315:lib/chibios/os/hal/src/hal_serial_usb.c ****   bqResumeX(&sdup->ibqueue);
 847              		.loc 1 315 0
 848 0006 0C30     		adds	r0, r0, #12
 849              	.LVL81:
 850 0008 FFF7FEFF 		bl	ibqResetI
 851              	.LVL82:
 317:lib/chibios/os/hal/src/hal_serial_usb.c ****   obqResetI(&sdup->obqueue);
 852              		.loc 1 317 0
 853 000c 04F14400 		add	r0, r4, #68
 316:lib/chibios/os/hal/src/hal_serial_usb.c ****   obqResetI(&sdup->obqueue);
 854              		.loc 1 316 0
 855 0010 2575     		strb	r5, [r4, #20]
 856              		.loc 1 317 0
 857 0012 FFF7FEFF 		bl	obqResetI
 858              	.LVL83:
 859              	.LBB182:
 860              	.LBB183:
 861              		.loc 4 844 0
 862 0016 201D     		adds	r0, r4, #4
 863              	.LBE183:
 864              	.LBE182:
 318:lib/chibios/os/hal/src/hal_serial_usb.c ****   bqResumeX(&sdup->obqueue);
 865              		.loc 1 318 0
 866 0018 84F84C50 		strb	r5, [r4, #76]
 867              	.LVL84:
 868              	.LBB185:
 869              	.LBB184:
 870              		.loc 4 844 0
 871 001c 0121     		movs	r1, #1
 872 001e FFF7FEFF 		bl	chEvtBroadcastFlagsI
 873              	.LVL85:
 874              	.LBE184:
 875              	.LBE185:
 319:lib/chibios/os/hal/src/hal_serial_usb.c ****   chnAddFlagsI(sdup, CHN_CONNECTED);
 320:lib/chibios/os/hal/src/hal_serial_usb.c ****   (void) sdu_start_receive(sdup);
 876              		.loc 1 320 0
 877 0022 2046     		mov	r0, r4
 321:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 878              		.loc 1 321 0
 879 0024 BDE83840 		pop	{r3, r4, r5, lr}
 880              		.cfi_restore 14
 881              		.cfi_restore 5
 882              		.cfi_restore 4
 883              		.cfi_restore 3
 884              		.cfi_def_cfa_offset 0
 885              	.LVL86:
 320:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 886              		.loc 1 320 0
 887 0028 FFF7FEBF 		b	sdu_start_receive
 888              	.LVL87:
 889              		.cfi_endproc
 890              	.LFE296:
 892              		.section	.text.sduRequestsHook,"ax",%progbits
 893              		.align	1
 894              		.global	sduRequestsHook
 895              		.syntax unified
 896              		.thumb
 897              		.thumb_func
 898              		.fpu softvfp
 900              	sduRequestsHook:
 901              	.LFB297:
 322:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 323:lib/chibios/os/hal/src/hal_serial_usb.c **** /**
 324:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @brief   Default requests hook.
 325:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @details Applications wanting to use the Serial over USB driver can use
 326:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          this function as requests hook in the USB configuration.
 327:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          The following requests are emulated:
 328:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          - CDC_GET_LINE_CODING.
 329:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          - CDC_SET_LINE_CODING.
 330:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          - CDC_SET_CONTROL_LINE_STATE.
 331:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          .
 332:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 333:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @param[in] usbp      pointer to the @p USBDriver object
 334:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @return              The hook status.
 335:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @retval true         Message handled internally.
 336:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @retval false        Message not handled.
 337:lib/chibios/os/hal/src/hal_serial_usb.c ****  */
 338:lib/chibios/os/hal/src/hal_serial_usb.c **** bool sduRequestsHook(USBDriver *usbp) {
 902              		.loc 1 338 0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 0
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 906              		@ link register save eliminated.
 907              	.LVL88:
 339:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 340:lib/chibios/os/hal/src/hal_serial_usb.c ****   if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 908              		.loc 1 340 0
 909 0000 90F87430 		ldrb	r3, [r0, #116]	@ zero_extendqisi2
 910 0004 03F06003 		and	r3, r3, #96
 911 0008 202B     		cmp	r3, #32
 912 000a 07D1     		bne	.L45
 341:lib/chibios/os/hal/src/hal_serial_usb.c ****     switch (usbp->setup[1]) {
 913              		.loc 1 341 0
 914 000c 90F87530 		ldrb	r3, [r0, #117]	@ zero_extendqisi2
 915 0010 202B     		cmp	r3, #32
 916 0012 03D3     		bcc	.L45
 917 0014 212B     		cmp	r3, #33
 918 0016 03D9     		bls	.L42
 919 0018 222B     		cmp	r3, #34
 920 001a 09D0     		beq	.L43
 921              	.L45:
 342:lib/chibios/os/hal/src/hal_serial_usb.c ****     case CDC_GET_LINE_CODING:
 343:lib/chibios/os/hal/src/hal_serial_usb.c ****       usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 344:lib/chibios/os/hal/src/hal_serial_usb.c ****       return true;
 345:lib/chibios/os/hal/src/hal_serial_usb.c ****     case CDC_SET_LINE_CODING:
 346:lib/chibios/os/hal/src/hal_serial_usb.c ****       usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 347:lib/chibios/os/hal/src/hal_serial_usb.c ****       return true;
 348:lib/chibios/os/hal/src/hal_serial_usb.c ****     case CDC_SET_CONTROL_LINE_STATE:
 349:lib/chibios/os/hal/src/hal_serial_usb.c ****       /* Nothing to do, there are no control lines.*/
 350:lib/chibios/os/hal/src/hal_serial_usb.c ****       usbSetupTransfer(usbp, NULL, 0, NULL);
 351:lib/chibios/os/hal/src/hal_serial_usb.c ****       return true;
 352:lib/chibios/os/hal/src/hal_serial_usb.c ****     default:
 353:lib/chibios/os/hal/src/hal_serial_usb.c ****       return false;
 922              		.loc 1 353 0
 923 001c 0020     		movs	r0, #0
 924              	.LVL89:
 354:lib/chibios/os/hal/src/hal_serial_usb.c ****     }
 355:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
 356:lib/chibios/os/hal/src/hal_serial_usb.c ****   return false;
 357:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 925              		.loc 1 357 0
 926 001e 7047     		bx	lr
 927              	.LVL90:
 928              	.L42:
 343:lib/chibios/os/hal/src/hal_serial_usb.c ****       return true;
 929              		.loc 1 343 0
 930 0020 054B     		ldr	r3, .L47
 931 0022 8366     		str	r3, [r0, #104]
 932 0024 0723     		movs	r3, #7
 933 0026 C366     		str	r3, [r0, #108]
 934 0028 0023     		movs	r3, #0
 935              	.L46:
 350:lib/chibios/os/hal/src/hal_serial_usb.c ****       return true;
 936              		.loc 1 350 0
 937 002a 0367     		str	r3, [r0, #112]
 351:lib/chibios/os/hal/src/hal_serial_usb.c ****     default:
 938              		.loc 1 351 0
 939 002c 0120     		movs	r0, #1
 940              	.LVL91:
 941 002e 7047     		bx	lr
 942              	.LVL92:
 943              	.L43:
 350:lib/chibios/os/hal/src/hal_serial_usb.c ****       return true;
 944              		.loc 1 350 0
 945 0030 0023     		movs	r3, #0
 946 0032 C0E91A33 		strd	r3, r3, [r0, #104]
 947 0036 F8E7     		b	.L46
 948              	.L48:
 949              		.align	2
 950              	.L47:
 951 0038 00000000 		.word	.LANCHOR1
 952              		.cfi_endproc
 953              	.LFE297:
 955              		.section	.text.sduSOFHookI,"ax",%progbits
 956              		.align	1
 957              		.global	sduSOFHookI
 958              		.syntax unified
 959              		.thumb
 960              		.thumb_func
 961              		.fpu softvfp
 963              	sduSOFHookI:
 964              	.LFB298:
 358:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 359:lib/chibios/os/hal/src/hal_serial_usb.c **** /**
 360:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @brief   SOF handler.
 361:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @details The SOF interrupt is used for automatic flushing of incomplete
 362:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          buffers pending in the output queue.
 363:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 364:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @param[in] sdup      pointer to a @p SerialUSBDriver object
 365:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 366:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @iclass
 367:lib/chibios/os/hal/src/hal_serial_usb.c ****  */
 368:lib/chibios/os/hal/src/hal_serial_usb.c **** void sduSOFHookI(SerialUSBDriver *sdup) {
 965              		.loc 1 368 0
 966              		.cfi_startproc
 967              		@ args = 0, pretend = 0, frame = 8
 968              		@ frame_needed = 0, uses_anonymous_args = 0
 969              	.LVL93:
 369:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 370:lib/chibios/os/hal/src/hal_serial_usb.c ****   /* If the USB driver is not in the appropriate state then transactions
 371:lib/chibios/os/hal/src/hal_serial_usb.c ****      must not be started.*/
 372:lib/chibios/os/hal/src/hal_serial_usb.c ****   if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 970              		.loc 1 372 0
 971 0000 D0F89030 		ldr	r3, [r0, #144]
 368:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 972              		.loc 1 368 0
 973 0004 37B5     		push	{r0, r1, r2, r4, r5, lr}
 974              		.cfi_def_cfa_offset 24
 975              		.cfi_offset 4, -12
 976              		.cfi_offset 5, -8
 977              		.cfi_offset 14, -4
 978              		.loc 1 372 0
 979 0006 1A68     		ldr	r2, [r3]
 980 0008 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 981 000a 0429     		cmp	r1, #4
 368:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 982              		.loc 1 368 0
 983 000c 0446     		mov	r4, r0
 984              		.loc 1 372 0
 985 000e 1AD1     		bne	.L49
 986              		.loc 1 372 0 is_stmt 0 discriminator 1
 987 0010 017A     		ldrb	r1, [r0, #8]	@ zero_extendqisi2
 988 0012 0229     		cmp	r1, #2
 989 0014 17D1     		bne	.L49
 373:lib/chibios/os/hal/src/hal_serial_usb.c ****       (sdup->state != SDU_READY)) {
 374:lib/chibios/os/hal/src/hal_serial_usb.c ****     return;
 375:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
 376:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 377:lib/chibios/os/hal/src/hal_serial_usb.c ****   /* If there is already a transaction ongoing then another one cannot be
 378:lib/chibios/os/hal/src/hal_serial_usb.c ****      started.*/
 379:lib/chibios/os/hal/src/hal_serial_usb.c ****   if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 990              		.loc 1 379 0 is_stmt 1
 991 0016 1979     		ldrb	r1, [r3, #4]	@ zero_extendqisi2
 992 0018 1289     		ldrh	r2, [r2, #8]
 993 001a 0123     		movs	r3, #1
 994 001c 8B40     		lsls	r3, r3, r1
 995 001e 1342     		tst	r3, r2
 996 0020 11D1     		bne	.L49
 380:lib/chibios/os/hal/src/hal_serial_usb.c ****     return;
 381:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
 382:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 383:lib/chibios/os/hal/src/hal_serial_usb.c ****   /* Checking if there only a buffer partially filled, if so then it is
 384:lib/chibios/os/hal/src/hal_serial_usb.c ****      enforced in the queue and transmitted.*/
 385:lib/chibios/os/hal/src/hal_serial_usb.c ****   if (obqTryFlushI(&sdup->obqueue)) {
 997              		.loc 1 385 0
 998 0022 00F14405 		add	r5, r0, #68
 999 0026 2846     		mov	r0, r5
 1000              	.LVL94:
 1001 0028 FFF7FEFF 		bl	obqTryFlushI
 1002              	.LVL95:
 1003 002c 58B1     		cbz	r0, .L49
 1004              	.LBB186:
 386:lib/chibios/os/hal/src/hal_serial_usb.c ****     size_t n;
 387:lib/chibios/os/hal/src/hal_serial_usb.c ****     uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 1005              		.loc 1 387 0
 1006 002e 01A9     		add	r1, sp, #4
 1007 0030 2846     		mov	r0, r5
 1008 0032 FFF7FEFF 		bl	obqGetFullBufferI
 1009              	.LVL96:
 388:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 389:lib/chibios/os/hal/src/hal_serial_usb.c ****     osalDbgAssert(buf != NULL, "queue is empty");
 390:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 391:lib/chibios/os/hal/src/hal_serial_usb.c ****     usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 1010              		.loc 1 391 0
 1011 0036 D4F89040 		ldr	r4, [r4, #144]
 1012              	.LVL97:
 1013 003a 019B     		ldr	r3, [sp, #4]
 1014 003c 2179     		ldrb	r1, [r4, #4]	@ zero_extendqisi2
 1015 003e 0246     		mov	r2, r0
 1016 0040 2068     		ldr	r0, [r4]
 1017              	.LVL98:
 1018 0042 FFF7FEFF 		bl	usbStartTransmitI
 1019              	.LVL99:
 1020              	.L49:
 1021              	.LBE186:
 392:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
 393:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 1022              		.loc 1 393 0
 1023 0046 03B0     		add	sp, sp, #12
 1024              		.cfi_def_cfa_offset 12
 1025              		@ sp needed
 1026 0048 30BD     		pop	{r4, r5, pc}
 1027              		.cfi_endproc
 1028              	.LFE298:
 1030              		.section	.text.sduDataTransmitted,"ax",%progbits
 1031              		.align	1
 1032              		.global	sduDataTransmitted
 1033              		.syntax unified
 1034              		.thumb
 1035              		.thumb_func
 1036              		.fpu softvfp
 1038              	sduDataTransmitted:
 1039              	.LFB299:
 394:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 395:lib/chibios/os/hal/src/hal_serial_usb.c **** /**
 396:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @brief   Default data transmitted callback.
 397:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @details The application must use this function as callback for the IN
 398:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          data endpoint.
 399:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 400:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @param[in] usbp      pointer to the @p USBDriver object
 401:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @param[in] ep        IN endpoint number
 402:lib/chibios/os/hal/src/hal_serial_usb.c ****  */
 403:lib/chibios/os/hal/src/hal_serial_usb.c **** void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 1040              		.loc 1 403 0
 1041              		.cfi_startproc
 1042              		@ args = 0, pretend = 0, frame = 8
 1043              		@ frame_needed = 0, uses_anonymous_args = 0
 1044              	.LVL100:
 404:lib/chibios/os/hal/src/hal_serial_usb.c ****   uint8_t *buf;
 405:lib/chibios/os/hal/src/hal_serial_usb.c ****   size_t n;
 406:lib/chibios/os/hal/src/hal_serial_usb.c ****   SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 1045              		.loc 1 406 0
 1046 0000 00EB8103 		add	r3, r0, r1, lsl #2
 403:lib/chibios/os/hal/src/hal_serial_usb.c ****   uint8_t *buf;
 1047              		.loc 1 403 0
 1048 0004 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 1049              		.cfi_def_cfa_offset 32
 1050              		.cfi_offset 4, -20
 1051              		.cfi_offset 5, -16
 1052              		.cfi_offset 6, -12
 1053              		.cfi_offset 7, -8
 1054              		.cfi_offset 14, -4
 1055              		.loc 1 406 0
 1056 0006 9C6A     		ldr	r4, [r3, #40]
 1057              	.LVL101:
 403:lib/chibios/os/hal/src/hal_serial_usb.c ****   uint8_t *buf;
 1058              		.loc 1 403 0
 1059 0008 0546     		mov	r5, r0
 1060 000a 0E46     		mov	r6, r1
 407:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 408:lib/chibios/os/hal/src/hal_serial_usb.c ****   if (sdup == NULL) {
 1061              		.loc 1 408 0
 1062 000c F4B1     		cbz	r4, .L56
 1063              	.LVL102:
 1064              	.LBB187:
 1065              	.LBB188:
 1066              	.LBB189:
 1067              	.LBB190:
 1068              	.LBB191:
 1069              	.LBB192:
 1070              		.loc 3 264 0
 1071 000e 2023     		movs	r3, #32
 1072              		.syntax unified
 1073              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1074 0010 83F31188 		MSR basepri, r3
 1075              	@ 0 "" 2
 1076              	.LVL103:
 1077              		.thumb
 1078              		.syntax unified
 1079 0014 05EB8607 		add	r7, r5, r6, lsl #2
 1080              	.LBE192:
 1081              	.LBE191:
 1082              	.LBE190:
 1083              	.LBE189:
 1084              	.LBE188:
 1085              	.LBE187:
 1086              	.LBB193:
 1087              	.LBB194:
 1088              		.loc 4 844 0
 1089 0018 201D     		adds	r0, r4, #4
 1090              	.LVL104:
 1091 001a 0821     		movs	r1, #8
 1092              	.LVL105:
 1093 001c FFF7FEFF 		bl	chEvtBroadcastFlagsI
 1094              	.LVL106:
 1095              	.LBE194:
 1096              	.LBE193:
 409:lib/chibios/os/hal/src/hal_serial_usb.c ****     return;
 410:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
 411:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 412:lib/chibios/os/hal/src/hal_serial_usb.c ****   osalSysLockFromISR();
 413:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 414:lib/chibios/os/hal/src/hal_serial_usb.c ****   /* Signaling that space is available in the output queue.*/
 415:lib/chibios/os/hal/src/hal_serial_usb.c ****   chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);
 416:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 417:lib/chibios/os/hal/src/hal_serial_usb.c ****   /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
 418:lib/chibios/os/hal/src/hal_serial_usb.c ****   if (usbp->epc[ep]->in_state->txsize > 0U) {
 1097              		.loc 1 418 0
 1098 0020 FB68     		ldr	r3, [r7, #12]
 1099 0022 5B69     		ldr	r3, [r3, #20]
 1100 0024 1B68     		ldr	r3, [r3]
 1101 0026 4434     		adds	r4, r4, #68
 1102              	.LVL107:
 1103 0028 13B1     		cbz	r3, .L58
 419:lib/chibios/os/hal/src/hal_serial_usb.c ****     obqReleaseEmptyBufferI(&sdup->obqueue);
 1104              		.loc 1 419 0
 1105 002a 2046     		mov	r0, r4
 1106 002c FFF7FEFF 		bl	obqReleaseEmptyBufferI
 1107              	.LVL108:
 1108              	.L58:
 420:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
 421:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 422:lib/chibios/os/hal/src/hal_serial_usb.c ****   /* Checking if there is a buffer ready for transmission.*/
 423:lib/chibios/os/hal/src/hal_serial_usb.c ****   buf = obqGetFullBufferI(&sdup->obqueue, &n);
 1109              		.loc 1 423 0
 1110 0030 01A9     		add	r1, sp, #4
 1111 0032 2046     		mov	r0, r4
 1112 0034 FFF7FEFF 		bl	obqGetFullBufferI
 1113              	.LVL109:
 424:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 425:lib/chibios/os/hal/src/hal_serial_usb.c ****   if (buf != NULL) {
 1114              		.loc 1 425 0
 1115 0038 0246     		mov	r2, r0
 1116 003a 48B1     		cbz	r0, .L59
 426:lib/chibios/os/hal/src/hal_serial_usb.c ****     /* The endpoint cannot be busy, we are in the context of the callback,
 427:lib/chibios/os/hal/src/hal_serial_usb.c ****        so it is safe to transmit without a check.*/
 428:lib/chibios/os/hal/src/hal_serial_usb.c ****     usbStartTransmitI(usbp, ep, buf, n);
 1117              		.loc 1 428 0
 1118 003c 019B     		ldr	r3, [sp, #4]
 1119              	.L71:
 429:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
 430:lib/chibios/os/hal/src/hal_serial_usb.c ****   else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 431:lib/chibios/os/hal/src/hal_serial_usb.c ****            ((usbp->epc[ep]->in_state->txsize &
 432:lib/chibios/os/hal/src/hal_serial_usb.c ****             ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 433:lib/chibios/os/hal/src/hal_serial_usb.c ****     /* Transmit zero sized packet in case the last one has maximum allowed
 434:lib/chibios/os/hal/src/hal_serial_usb.c ****        size. Otherwise the recipient may expect more data coming soon and
 435:lib/chibios/os/hal/src/hal_serial_usb.c ****        not return buffered data to app. See section 5.8.3 Bulk Transfer
 436:lib/chibios/os/hal/src/hal_serial_usb.c ****        Packet Size Constraints of the USB Specification document.*/
 437:lib/chibios/os/hal/src/hal_serial_usb.c ****     usbStartTransmitI(usbp, ep, usbp->setup, 0);
 1120              		.loc 1 437 0
 1121 003e 3146     		mov	r1, r6
 1122 0040 2846     		mov	r0, r5
 1123              	.LVL110:
 1124 0042 FFF7FEFF 		bl	usbStartTransmitI
 1125              	.LVL111:
 1126              	.L60:
 1127              	.LBB195:
 1128              	.LBB196:
 1129              	.LBB197:
 1130              	.LBB198:
 1131              	.LBB199:
 1132              	.LBB200:
 1133              		.loc 3 264 0
 1134 0046 0023     		movs	r3, #0
 1135              		.syntax unified
 1136              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1137 0048 83F31188 		MSR basepri, r3
 1138              	@ 0 "" 2
 1139              	.LVL112:
 1140              		.thumb
 1141              		.syntax unified
 1142              	.L56:
 1143              	.LBE200:
 1144              	.LBE199:
 1145              	.LBE198:
 1146              	.LBE197:
 1147              	.LBE196:
 1148              	.LBE195:
 438:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 439:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
 440:lib/chibios/os/hal/src/hal_serial_usb.c ****   else {
 441:lib/chibios/os/hal/src/hal_serial_usb.c ****     /* Nothing to transmit.*/
 442:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
 443:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 444:lib/chibios/os/hal/src/hal_serial_usb.c ****   osalSysUnlockFromISR();
 445:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 1149              		.loc 1 445 0
 1150 004c 03B0     		add	sp, sp, #12
 1151              		.cfi_remember_state
 1152              		.cfi_def_cfa_offset 20
 1153              		@ sp needed
 1154 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 1155              	.LVL113:
 1156              	.L59:
 1157              		.cfi_restore_state
 430:lib/chibios/os/hal/src/hal_serial_usb.c ****            ((usbp->epc[ep]->in_state->txsize &
 1158              		.loc 1 430 0
 1159 0050 FB68     		ldr	r3, [r7, #12]
 1160 0052 5A69     		ldr	r2, [r3, #20]
 1161 0054 1268     		ldr	r2, [r2]
 1162 0056 002A     		cmp	r2, #0
 1163 0058 F5D0     		beq	.L60
 432:lib/chibios/os/hal/src/hal_serial_usb.c ****     /* Transmit zero sized packet in case the last one has maximum allowed
 1164              		.loc 1 432 0 discriminator 1
 1165 005a 1B8A     		ldrh	r3, [r3, #16]
 1166 005c 013B     		subs	r3, r3, #1
 430:lib/chibios/os/hal/src/hal_serial_usb.c ****            ((usbp->epc[ep]->in_state->txsize &
 1167              		.loc 1 430 0 discriminator 1
 1168 005e 1340     		ands	r3, r3, r2
 1169 0060 F1D1     		bne	.L60
 437:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 1170              		.loc 1 437 0
 1171 0062 05F17402 		add	r2, r5, #116
 1172 0066 EAE7     		b	.L71
 1173              		.cfi_endproc
 1174              	.LFE299:
 1176              		.section	.text.sduDataReceived,"ax",%progbits
 1177              		.align	1
 1178              		.global	sduDataReceived
 1179              		.syntax unified
 1180              		.thumb
 1181              		.thumb_func
 1182              		.fpu softvfp
 1184              	sduDataReceived:
 1185              	.LFB300:
 446:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 447:lib/chibios/os/hal/src/hal_serial_usb.c **** /**
 448:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @brief   Default data received callback.
 449:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @details The application must use this function as callback for the OUT
 450:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          data endpoint.
 451:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 452:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @param[in] usbp      pointer to the @p USBDriver object
 453:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @param[in] ep        OUT endpoint number
 454:lib/chibios/os/hal/src/hal_serial_usb.c ****  */
 455:lib/chibios/os/hal/src/hal_serial_usb.c **** void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 1186              		.loc 1 455 0
 1187              		.cfi_startproc
 1188              		@ args = 0, pretend = 0, frame = 0
 1189              		@ frame_needed = 0, uses_anonymous_args = 0
 1190              	.LVL114:
 456:lib/chibios/os/hal/src/hal_serial_usb.c ****   SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 1191              		.loc 1 456 0
 1192 0000 1131     		adds	r1, r1, #17
 1193              	.LVL115:
 455:lib/chibios/os/hal/src/hal_serial_usb.c ****   SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 1194              		.loc 1 455 0
 1195 0002 10B5     		push	{r4, lr}
 1196              		.cfi_def_cfa_offset 8
 1197              		.cfi_offset 4, -8
 1198              		.cfi_offset 14, -4
 1199              		.loc 1 456 0
 1200 0004 50F82140 		ldr	r4, [r0, r1, lsl #2]
 1201              	.LVL116:
 457:lib/chibios/os/hal/src/hal_serial_usb.c ****   if (sdup == NULL) {
 1202              		.loc 1 457 0
 1203 0008 CCB1     		cbz	r4, .L72
 1204              	.LVL117:
 1205              	.LBB201:
 1206              	.LBB202:
 1207              	.LBB203:
 1208              	.LBB204:
 1209              	.LBB205:
 1210              	.LBB206:
 1211              		.loc 3 264 0
 1212 000a 2023     		movs	r3, #32
 1213              		.syntax unified
 1214              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1215 000c 83F31188 		MSR basepri, r3
 1216              	@ 0 "" 2
 1217              	.LVL118:
 1218              		.thumb
 1219              		.syntax unified
 1220              	.LBE206:
 1221              	.LBE205:
 1222              	.LBE204:
 1223              	.LBE203:
 1224              	.LBE202:
 1225              	.LBE201:
 1226              	.LBB207:
 1227              	.LBB208:
 1228              		.loc 4 844 0
 1229 0010 0421     		movs	r1, #4
 1230 0012 6018     		adds	r0, r4, r1
 1231              	.LVL119:
 1232 0014 FFF7FEFF 		bl	chEvtBroadcastFlagsI
 1233              	.LVL120:
 1234              	.LBE208:
 1235              	.LBE207:
 458:lib/chibios/os/hal/src/hal_serial_usb.c ****     return;
 459:lib/chibios/os/hal/src/hal_serial_usb.c ****   }
 460:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 461:lib/chibios/os/hal/src/hal_serial_usb.c ****   osalSysLockFromISR();
 462:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 463:lib/chibios/os/hal/src/hal_serial_usb.c ****   /* Signaling that data is available in the input queue.*/
 464:lib/chibios/os/hal/src/hal_serial_usb.c ****   chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);
 465:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 466:lib/chibios/os/hal/src/hal_serial_usb.c ****   /* Posting the filled buffer in the queue.*/
 467:lib/chibios/os/hal/src/hal_serial_usb.c ****   ibqPostFullBufferI(&sdup->ibqueue,
 468:lib/chibios/os/hal/src/hal_serial_usb.c ****                      usbGetReceiveTransactionSizeX(sdup->config->usbp,
 1236              		.loc 1 468 0
 1237 0018 D4F89020 		ldr	r2, [r4, #144]
 1238 001c 1368     		ldr	r3, [r2]
 1239 001e 5279     		ldrb	r2, [r2, #5]	@ zero_extendqisi2
 1240 0020 03EB8203 		add	r3, r3, r2, lsl #2
 467:lib/chibios/os/hal/src/hal_serial_usb.c ****                      usbGetReceiveTransactionSizeX(sdup->config->usbp,
 1241              		.loc 1 467 0
 1242 0024 04F10C00 		add	r0, r4, #12
 1243              		.loc 1 468 0
 1244 0028 DB68     		ldr	r3, [r3, #12]
 467:lib/chibios/os/hal/src/hal_serial_usb.c ****                      usbGetReceiveTransactionSizeX(sdup->config->usbp,
 1245              		.loc 1 467 0
 1246 002a 9B69     		ldr	r3, [r3, #24]
 1247 002c 5968     		ldr	r1, [r3, #4]
 1248 002e FFF7FEFF 		bl	ibqPostFullBufferI
 1249              	.LVL121:
 469:lib/chibios/os/hal/src/hal_serial_usb.c ****                                                    sdup->config->bulk_out));
 470:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 471:lib/chibios/os/hal/src/hal_serial_usb.c ****   /* The endpoint cannot be busy, we are in the context of the callback,
 472:lib/chibios/os/hal/src/hal_serial_usb.c ****      so a packet is in the buffer for sure. Trying to get a free buffer
 473:lib/chibios/os/hal/src/hal_serial_usb.c ****      for the next transaction.*/
 474:lib/chibios/os/hal/src/hal_serial_usb.c ****   (void) sdu_start_receive(sdup);
 1250              		.loc 1 474 0
 1251 0032 2046     		mov	r0, r4
 1252 0034 FFF7FEFF 		bl	sdu_start_receive
 1253              	.LVL122:
 1254              	.LBB209:
 1255              	.LBB210:
 1256              	.LBB211:
 1257              	.LBB212:
 1258              	.LBB213:
 1259              	.LBB214:
 1260              		.loc 3 264 0
 1261 0038 0023     		movs	r3, #0
 1262              		.syntax unified
 1263              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1264 003a 83F31188 		MSR basepri, r3
 1265              	@ 0 "" 2
 1266              	.LVL123:
 1267              		.thumb
 1268              		.syntax unified
 1269              	.L72:
 1270              	.LBE214:
 1271              	.LBE213:
 1272              	.LBE212:
 1273              	.LBE211:
 1274              	.LBE210:
 1275              	.LBE209:
 475:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 476:lib/chibios/os/hal/src/hal_serial_usb.c ****   osalSysUnlockFromISR();
 477:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 1276              		.loc 1 477 0
 1277 003e 10BD     		pop	{r4, pc}
 1278              		.cfi_endproc
 1279              	.LFE300:
 1281              		.section	.text.sduInterruptTransmitted,"ax",%progbits
 1282              		.align	1
 1283              		.global	sduInterruptTransmitted
 1284              		.syntax unified
 1285              		.thumb
 1286              		.thumb_func
 1287              		.fpu softvfp
 1289              	sduInterruptTransmitted:
 1290              	.LFB301:
 478:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 479:lib/chibios/os/hal/src/hal_serial_usb.c **** /**
 480:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @brief   Default data received callback.
 481:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @details The application must use this function as callback for the IN
 482:lib/chibios/os/hal/src/hal_serial_usb.c ****  *          interrupt endpoint.
 483:lib/chibios/os/hal/src/hal_serial_usb.c ****  *
 484:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @param[in] usbp      pointer to the @p USBDriver object
 485:lib/chibios/os/hal/src/hal_serial_usb.c ****  * @param[in] ep        endpoint number
 486:lib/chibios/os/hal/src/hal_serial_usb.c ****  */
 487:lib/chibios/os/hal/src/hal_serial_usb.c **** void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 1291              		.loc 1 487 0
 1292              		.cfi_startproc
 1293              		@ args = 0, pretend = 0, frame = 0
 1294              		@ frame_needed = 0, uses_anonymous_args = 0
 1295              		@ link register save eliminated.
 1296              	.LVL124:
 488:lib/chibios/os/hal/src/hal_serial_usb.c **** 
 489:lib/chibios/os/hal/src/hal_serial_usb.c ****   (void)usbp;
 490:lib/chibios/os/hal/src/hal_serial_usb.c ****   (void)ep;
 491:lib/chibios/os/hal/src/hal_serial_usb.c **** }
 1297              		.loc 1 491 0
 1298 0000 7047     		bx	lr
 1299              		.cfi_endproc
 1300              	.LFE301:
 1302              		.section	.data.linecoding,"aw",%progbits
 1303              		.set	.LANCHOR1,. + 0
 1306              	linecoding:
 1307 0000 00       		.byte	0
 1308 0001 96       		.byte	-106
 1309 0002 00       		.byte	0
 1310 0003 00       		.byte	0
 1311 0004 00       		.byte	0
 1312 0005 00       		.byte	0
 1313 0006 08       		.byte	8
 1314              		.section	.rodata.vmt,"a",%progbits
 1315              		.align	2
 1316              		.set	.LANCHOR0,. + 0
 1319              	vmt:
 1320 0000 00000000 		.word	_write
 1321 0004 00000000 		.word	_read
 1322 0008 00000000 		.word	_put
 1323 000c 00000000 		.word	_get
 1324 0010 00000000 		.word	_putt
 1325 0014 00000000 		.word	_gett
 1326 0018 00000000 		.word	_writet
 1327 001c 00000000 		.word	_readt
 1328              		.text
 1329              	.Letext0:
 1330              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 1331              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 1332              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 1333              		.file 8 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 1334              		.file 9 "./lib/chibios/os/rt/include/chsystypes.h"
 1335              		.file 10 "./lib/chibios/os/rt/include/chschd.h"
 1336              		.file 11 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 1337              		.file 12 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 1338              		.file 13 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/stm32f303xc.h"
 1339              		.file 14 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 1340              		.file 15 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 1341              		.file 16 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 1342              		.file 17 "./lib/chibios/os/rt/include/chtm.h"
 1343              		.file 18 "./lib/chibios/os/rt/include/chsem.h"
 1344              		.file 19 "./lib/chibios/os/rt/include/chmtx.h"
 1345              		.file 20 "./lib/chibios/os/rt/include/chsys.h"
 1346              		.file 21 "./lib/chibios/os/rt/include/chregistry.h"
 1347              		.file 22 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 1348              		.file 23 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 1349              		.file 24 "./lib/chibios/os/hal/include/hal_buffers.h"
 1350              		.file 25 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 1351              		.file 26 "./lib/chibios/os/hal/include/hal_dac.h"
 1352              		.file 27 "./lib/chibios/os/hal/ports/STM32/LLD/DACv1/hal_dac_lld.h"
 1353              		.file 28 "./lib/chibios/os/hal/include/hal_gpt.h"
 1354              		.file 29 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_gpt_lld.h"
 1355              		.file 30 "./lib/chibios/os/hal/include/hal_i2c.h"
 1356              		.file 31 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 1357              		.file 32 "./lib/chibios/os/hal/include/hal_pwm.h"
 1358              		.file 33 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 1359              		.file 34 "./lib/chibios/os/hal/include/hal_usb.h"
 1360              		.file 35 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 1361              		.file 36 "./lib/chibios/os/hal/include/hal_usb_cdc.h"
 1362              		.file 37 "./lib/chibios/os/hal/include/hal_serial_usb.h"
 1363              		.file 38 "./lib/chibios/os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_serial_usb.c
/var/tmp//ccJoFWRs.s:16     .text.obnotify:0000000000000000 $t
/var/tmp//ccJoFWRs.s:22     .text.obnotify:0000000000000000 obnotify
/var/tmp//ccJoFWRs.s:84     .text._readt:0000000000000000 $t
/var/tmp//ccJoFWRs.s:90     .text._readt:0000000000000000 _readt
/var/tmp//ccJoFWRs.s:107    .text._read:0000000000000000 $t
/var/tmp//ccJoFWRs.s:113    .text._read:0000000000000000 _read
/var/tmp//ccJoFWRs.s:131    .text._writet:0000000000000000 $t
/var/tmp//ccJoFWRs.s:137    .text._writet:0000000000000000 _writet
/var/tmp//ccJoFWRs.s:154    .text._write:0000000000000000 $t
/var/tmp//ccJoFWRs.s:160    .text._write:0000000000000000 _write
/var/tmp//ccJoFWRs.s:178    .text._gett:0000000000000000 $t
/var/tmp//ccJoFWRs.s:184    .text._gett:0000000000000000 _gett
/var/tmp//ccJoFWRs.s:201    .text._get:0000000000000000 $t
/var/tmp//ccJoFWRs.s:207    .text._get:0000000000000000 _get
/var/tmp//ccJoFWRs.s:225    .text._putt:0000000000000000 $t
/var/tmp//ccJoFWRs.s:231    .text._putt:0000000000000000 _putt
/var/tmp//ccJoFWRs.s:248    .text._put:0000000000000000 $t
/var/tmp//ccJoFWRs.s:254    .text._put:0000000000000000 _put
/var/tmp//ccJoFWRs.s:272    .text.sdu_start_receive:0000000000000000 $t
/var/tmp//ccJoFWRs.s:278    .text.sdu_start_receive:0000000000000000 sdu_start_receive
/var/tmp//ccJoFWRs.s:351    .text.ibnotify:0000000000000000 $t
/var/tmp//ccJoFWRs.s:357    .text.ibnotify:0000000000000000 ibnotify
/var/tmp//ccJoFWRs.s:374    .text.sduInit:0000000000000000 $t
/var/tmp//ccJoFWRs.s:381    .text.sduInit:0000000000000000 sduInit
/var/tmp//ccJoFWRs.s:394    .text.sduObjectInit:0000000000000000 $t
/var/tmp//ccJoFWRs.s:401    .text.sduObjectInit:0000000000000000 sduObjectInit
/var/tmp//ccJoFWRs.s:468    .text.sduObjectInit:0000000000000048 $d
/var/tmp//ccJoFWRs.s:475    .text.sduStart:0000000000000000 $t
/var/tmp//ccJoFWRs.s:482    .text.sduStart:0000000000000000 sduStart
/var/tmp//ccJoFWRs.s:562    .text.sduStop:0000000000000000 $t
/var/tmp//ccJoFWRs.s:569    .text.sduStop:0000000000000000 sduStop
/var/tmp//ccJoFWRs.s:696    .text.sduSuspendHookI:0000000000000000 $t
/var/tmp//ccJoFWRs.s:703    .text.sduSuspendHookI:0000000000000000 sduSuspendHookI
/var/tmp//ccJoFWRs.s:777    .text.sduWakeupHookI:0000000000000000 $t
/var/tmp//ccJoFWRs.s:784    .text.sduWakeupHookI:0000000000000000 sduWakeupHookI
/var/tmp//ccJoFWRs.s:823    .text.sduConfigureHookI:0000000000000000 $t
/var/tmp//ccJoFWRs.s:830    .text.sduConfigureHookI:0000000000000000 sduConfigureHookI
/var/tmp//ccJoFWRs.s:893    .text.sduRequestsHook:0000000000000000 $t
/var/tmp//ccJoFWRs.s:900    .text.sduRequestsHook:0000000000000000 sduRequestsHook
/var/tmp//ccJoFWRs.s:951    .text.sduRequestsHook:0000000000000038 $d
/var/tmp//ccJoFWRs.s:956    .text.sduSOFHookI:0000000000000000 $t
/var/tmp//ccJoFWRs.s:963    .text.sduSOFHookI:0000000000000000 sduSOFHookI
/var/tmp//ccJoFWRs.s:1031   .text.sduDataTransmitted:0000000000000000 $t
/var/tmp//ccJoFWRs.s:1038   .text.sduDataTransmitted:0000000000000000 sduDataTransmitted
/var/tmp//ccJoFWRs.s:1177   .text.sduDataReceived:0000000000000000 $t
/var/tmp//ccJoFWRs.s:1184   .text.sduDataReceived:0000000000000000 sduDataReceived
/var/tmp//ccJoFWRs.s:1282   .text.sduInterruptTransmitted:0000000000000000 $t
/var/tmp//ccJoFWRs.s:1289   .text.sduInterruptTransmitted:0000000000000000 sduInterruptTransmitted
/var/tmp//ccJoFWRs.s:1306   .data.linecoding:0000000000000000 linecoding
/var/tmp//ccJoFWRs.s:1315   .rodata.vmt:0000000000000000 $d
/var/tmp//ccJoFWRs.s:1319   .rodata.vmt:0000000000000000 vmt

UNDEFINED SYMBOLS
obqGetFullBufferI
usbStartTransmitI
ibqReadTimeout
obqWriteTimeout
ibqGetTimeout
obqPutTimeout
ibqGetEmptyBufferI
usbStartReceiveI
ibqObjectInit
obqObjectInit
chEvtBroadcastFlagsI
ibqResetI
obqResetI
chSchRescheduleS
chThdDequeueAllI
obqTryFlushI
obqReleaseEmptyBufferI
ibqPostFullBufferI
