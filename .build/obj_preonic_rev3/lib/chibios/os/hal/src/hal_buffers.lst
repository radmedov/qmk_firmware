   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"hal_buffers.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.ibqObjectInit,"ax",%progbits
  16              		.align	1
  17              		.global	ibqObjectInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	ibqObjectInit:
  24              	.LFB279:
  25              		.file 1 "lib/chibios/os/hal/src/hal_buffers.c"
   1:lib/chibios/os/hal/src/hal_buffers.c **** /*
   2:lib/chibios/os/hal/src/hal_buffers.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:lib/chibios/os/hal/src/hal_buffers.c **** 
   4:lib/chibios/os/hal/src/hal_buffers.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:lib/chibios/os/hal/src/hal_buffers.c ****     you may not use this file except in compliance with the License.
   6:lib/chibios/os/hal/src/hal_buffers.c ****     You may obtain a copy of the License at
   7:lib/chibios/os/hal/src/hal_buffers.c **** 
   8:lib/chibios/os/hal/src/hal_buffers.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:lib/chibios/os/hal/src/hal_buffers.c **** 
  10:lib/chibios/os/hal/src/hal_buffers.c ****     Unless required by applicable law or agreed to in writing, software
  11:lib/chibios/os/hal/src/hal_buffers.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:lib/chibios/os/hal/src/hal_buffers.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:lib/chibios/os/hal/src/hal_buffers.c ****     See the License for the specific language governing permissions and
  14:lib/chibios/os/hal/src/hal_buffers.c ****     limitations under the License.
  15:lib/chibios/os/hal/src/hal_buffers.c **** */
  16:lib/chibios/os/hal/src/hal_buffers.c **** 
  17:lib/chibios/os/hal/src/hal_buffers.c **** /**
  18:lib/chibios/os/hal/src/hal_buffers.c ****  * @file    hal_buffers.c
  19:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   I/O Buffers code.
  20:lib/chibios/os/hal/src/hal_buffers.c ****  *
  21:lib/chibios/os/hal/src/hal_buffers.c ****  * @addtogroup HAL_BUFFERS
  22:lib/chibios/os/hal/src/hal_buffers.c ****  * @details Buffers Queues are used when there is the need to exchange
  23:lib/chibios/os/hal/src/hal_buffers.c ****  *          fixed-length data buffers between ISRs and threads.
  24:lib/chibios/os/hal/src/hal_buffers.c ****  *          On the ISR side data can be exchanged only using buffers,
  25:lib/chibios/os/hal/src/hal_buffers.c ****  *          on the thread side data can be exchanged both using buffers and/or
  26:lib/chibios/os/hal/src/hal_buffers.c ****  *          using an emulation of regular byte queues.
  27:lib/chibios/os/hal/src/hal_buffers.c ****  *          There are several kind of buffers queues:<br>
  28:lib/chibios/os/hal/src/hal_buffers.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  29:lib/chibios/os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  30:lib/chibios/os/hal/src/hal_buffers.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  31:lib/chibios/os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  32:lib/chibios/os/hal/src/hal_buffers.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  33:lib/chibios/os/hal/src/hal_buffers.c ****  *            are implemented by pairing an input queue and an output queue
  34:lib/chibios/os/hal/src/hal_buffers.c ****  *            together.
  35:lib/chibios/os/hal/src/hal_buffers.c ****  *          .
  36:lib/chibios/os/hal/src/hal_buffers.c ****  * @{
  37:lib/chibios/os/hal/src/hal_buffers.c ****  */
  38:lib/chibios/os/hal/src/hal_buffers.c **** 
  39:lib/chibios/os/hal/src/hal_buffers.c **** #include <string.h>
  40:lib/chibios/os/hal/src/hal_buffers.c **** 
  41:lib/chibios/os/hal/src/hal_buffers.c **** #include "hal.h"
  42:lib/chibios/os/hal/src/hal_buffers.c **** 
  43:lib/chibios/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  44:lib/chibios/os/hal/src/hal_buffers.c **** /* Driver local definitions.                                                 */
  45:lib/chibios/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  46:lib/chibios/os/hal/src/hal_buffers.c **** 
  47:lib/chibios/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  48:lib/chibios/os/hal/src/hal_buffers.c **** /* Driver exported variables.                                                */
  49:lib/chibios/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  50:lib/chibios/os/hal/src/hal_buffers.c **** 
  51:lib/chibios/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  52:lib/chibios/os/hal/src/hal_buffers.c **** /* Driver local variables and types.                                         */
  53:lib/chibios/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  54:lib/chibios/os/hal/src/hal_buffers.c **** 
  55:lib/chibios/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  56:lib/chibios/os/hal/src/hal_buffers.c **** /* Driver local functions.                                                   */
  57:lib/chibios/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  58:lib/chibios/os/hal/src/hal_buffers.c **** 
  59:lib/chibios/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  60:lib/chibios/os/hal/src/hal_buffers.c **** /* Driver exported functions.                                                */
  61:lib/chibios/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  62:lib/chibios/os/hal/src/hal_buffers.c **** 
  63:lib/chibios/os/hal/src/hal_buffers.c **** /**
  64:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Initializes an input buffers queue object.
  65:lib/chibios/os/hal/src/hal_buffers.c ****  *
  66:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[out] ibqp     pointer to the @p input_buffers_queue_t object
  67:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
  68:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
  69:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
  70:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
  71:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] infy      callback called when a buffer is returned to the queue
  72:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
  73:lib/chibios/os/hal/src/hal_buffers.c ****  *
  74:lib/chibios/os/hal/src/hal_buffers.c ****  * @init
  75:lib/chibios/os/hal/src/hal_buffers.c ****  */
  76:lib/chibios/os/hal/src/hal_buffers.c **** void ibqObjectInit(input_buffers_queue_t *ibqp, bool suspended, uint8_t *bp,
  77:lib/chibios/os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t infy, void *link) {
  26              		.loc 1 77 0
  27              		.cfi_startproc
  28              		@ args = 12, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 30B5     		push	{r4, r5, lr}
  32              		.cfi_def_cfa_offset 12
  33              		.cfi_offset 4, -12
  34              		.cfi_offset 5, -8
  35              		.cfi_offset 14, -4
  36              		.loc 1 77 0
  37 0002 039C     		ldr	r4, [sp, #12]
  78:lib/chibios/os/hal/src/hal_buffers.c **** 
  79:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));
  80:lib/chibios/os/hal/src/hal_buffers.c **** 
  81:lib/chibios/os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&ibqp->waiting);
  82:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->suspended = suspended;
  38              		.loc 1 82 0
  39 0004 0172     		strb	r1, [r0, #8]
  83:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
  84:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->brdptr    = bp;
  85:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = bp;
  86:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  40              		.loc 1 86 0
  41 0006 0433     		adds	r3, r3, #4
  42              	.LVL1:
  43 0008 04FB0325 		mla	r5, r4, r3, r2
  87:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->bsize     = size + sizeof (size_t);
  44              		.loc 1 87 0
  45 000c C0E90653 		strd	r5, r3, [r0, #24]
  88:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->bn        = n;
  89:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->buffers   = bp;
  90:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
  91:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
  92:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->notify    = infy;
  46              		.loc 1 92 0
  47 0010 049B     		ldr	r3, [sp, #16]
  48              	.LVL2:
  49 0012 0363     		str	r3, [r0, #48]
  83:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->brdptr    = bp;
  50              		.loc 1 83 0
  51 0014 0021     		movs	r1, #0
  52              	.LVL3:
  93:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->link      = link;
  53              		.loc 1 93 0
  54 0016 059B     		ldr	r3, [sp, #20]
  83:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->brdptr    = bp;
  55              		.loc 1 83 0
  56 0018 C160     		str	r1, [r0, #12]
  57              	.LBB273:
  58              	.LBB274:
  59              	.LBB275:
  60              	.LBB276:
  61              		.file 2 "./lib/chibios/os/rt/include/chschd.h"
   1:./lib/chibios/os/rt/include/chschd.h **** /*
   2:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chschd.h **** 
   4:./lib/chibios/os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chschd.h **** 
   6:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chschd.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chschd.h **** 
  11:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chschd.h **** 
  16:./lib/chibios/os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chschd.h **** */
  19:./lib/chibios/os/rt/include/chschd.h **** 
  20:./lib/chibios/os/rt/include/chschd.h **** /**
  21:./lib/chibios/os/rt/include/chschd.h ****  * @file    chschd.h
  22:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:./lib/chibios/os/rt/include/chschd.h ****  *
  24:./lib/chibios/os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:./lib/chibios/os/rt/include/chschd.h ****  * @{
  26:./lib/chibios/os/rt/include/chschd.h ****  */
  27:./lib/chibios/os/rt/include/chschd.h **** 
  28:./lib/chibios/os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:./lib/chibios/os/rt/include/chschd.h **** #define CHSCHD_H
  30:./lib/chibios/os/rt/include/chschd.h **** 
  31:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chschd.h **** 
  35:./lib/chibios/os/rt/include/chschd.h **** /**
  36:./lib/chibios/os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:./lib/chibios/os/rt/include/chschd.h ****  * @{
  38:./lib/chibios/os/rt/include/chschd.h ****  */
  39:./lib/chibios/os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:./lib/chibios/os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  42:./lib/chibios/os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  44:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  45:./lib/chibios/os/rt/include/chschd.h **** 
  46:./lib/chibios/os/rt/include/chschd.h **** /**
  47:./lib/chibios/os/rt/include/chschd.h ****  * @name    Priority constants
  48:./lib/chibios/os/rt/include/chschd.h ****  * @{
  49:./lib/chibios/os/rt/include/chschd.h ****  */
  50:./lib/chibios/os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:./lib/chibios/os/rt/include/chschd.h ****                                                  priority.                  */
  52:./lib/chibios/os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:./lib/chibios/os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:./lib/chibios/os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:./lib/chibios/os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  57:./lib/chibios/os/rt/include/chschd.h **** 
  58:./lib/chibios/os/rt/include/chschd.h **** /**
  59:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread states
  60:./lib/chibios/os/rt/include/chschd.h ****  * @{
  61:./lib/chibios/os/rt/include/chschd.h ****  */
  62:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:./lib/chibios/os/rt/include/chschd.h ****                                                   ready list.               */
  64:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:./lib/chibios/os/rt/include/chschd.h ****                                                   in queue.                 */
  77:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:./lib/chibios/os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:./lib/chibios/os/rt/include/chschd.h ****                                                   message.                  */
  81:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:./lib/chibios/os/rt/include/chschd.h **** 
  83:./lib/chibios/os/rt/include/chschd.h **** /**
  84:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:./lib/chibios/os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:./lib/chibios/os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:./lib/chibios/os/rt/include/chschd.h ****  */
  88:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:./lib/chibios/os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:./lib/chibios/os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:./lib/chibios/os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  93:./lib/chibios/os/rt/include/chschd.h **** 
  94:./lib/chibios/os/rt/include/chschd.h **** /**
  95:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:./lib/chibios/os/rt/include/chschd.h ****  * @{
  97:./lib/chibios/os/rt/include/chschd.h ****  */
  98:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:./lib/chibios/os/rt/include/chschd.h ****                                                  mask.                      */
 100:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:./lib/chibios/os/rt/include/chschd.h ****                                                  flag.                      */
 107:./lib/chibios/os/rt/include/chschd.h **** /** @} */
 108:./lib/chibios/os/rt/include/chschd.h **** 
 109:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 110:./lib/chibios/os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 112:./lib/chibios/os/rt/include/chschd.h **** 
 113:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 114:./lib/chibios/os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 116:./lib/chibios/os/rt/include/chschd.h **** 
 117:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_ENTER_HOOK)
 118:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_ENTER_HOOK not defined in chconf.h"
 119:./lib/chibios/os/rt/include/chschd.h **** #endif
 120:./lib/chibios/os/rt/include/chschd.h **** 
 121:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LEAVE_HOOK)
 122:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LEAVE_HOOK not defined in chconf.h"
 123:./lib/chibios/os/rt/include/chschd.h **** #endif
 124:./lib/chibios/os/rt/include/chschd.h **** 
 125:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LOOP_HOOK)
 126:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LOOP_HOOK not defined in chconf.h"
 127:./lib/chibios/os/rt/include/chschd.h **** #endif
 128:./lib/chibios/os/rt/include/chschd.h **** 
 129:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 130:./lib/chibios/os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 131:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 132:./lib/chibios/os/rt/include/chschd.h **** 
 133:./lib/chibios/os/rt/include/chschd.h **** /**
 134:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 135:./lib/chibios/os/rt/include/chschd.h ****  */
 136:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_list {
 137:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 138:./lib/chibios/os/rt/include/chschd.h **** };
 139:./lib/chibios/os/rt/include/chschd.h **** 
 140:./lib/chibios/os/rt/include/chschd.h **** /**
 141:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 142:./lib/chibios/os/rt/include/chschd.h ****  */
 143:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_queue {
 144:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 145:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 146:./lib/chibios/os/rt/include/chschd.h **** };
 147:./lib/chibios/os/rt/include/chschd.h **** 
 148:./lib/chibios/os/rt/include/chschd.h **** /**
 149:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 150:./lib/chibios/os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 151:./lib/chibios/os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 152:./lib/chibios/os/rt/include/chschd.h ****  *          by shrinking this structure.
 153:./lib/chibios/os/rt/include/chschd.h ****  */
 154:./lib/chibios/os/rt/include/chschd.h **** struct ch_thread {
 155:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 156:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 157:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 158:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 159:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 160:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 161:./lib/chibios/os/rt/include/chschd.h **** #endif
 162:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 163:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 164:./lib/chibios/os/rt/include/chschd.h ****   /**
 165:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 166:./lib/chibios/os/rt/include/chschd.h ****    */
 167:./lib/chibios/os/rt/include/chschd.h ****   const char            *name;
 168:./lib/chibios/os/rt/include/chschd.h **** #endif
 169:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 170:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 171:./lib/chibios/os/rt/include/chschd.h ****   /**
 172:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Working area base address.
 173:./lib/chibios/os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 174:./lib/chibios/os/rt/include/chschd.h ****    *          dynamic threading.
 175:./lib/chibios/os/rt/include/chschd.h ****    */
 176:./lib/chibios/os/rt/include/chschd.h ****   stkalign_t            *wabase;
 177:./lib/chibios/os/rt/include/chschd.h **** #endif
 178:./lib/chibios/os/rt/include/chschd.h ****   /**
 179:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Current thread state.
 180:./lib/chibios/os/rt/include/chschd.h ****    */
 181:./lib/chibios/os/rt/include/chschd.h ****   tstate_t              state;
 182:./lib/chibios/os/rt/include/chschd.h ****   /**
 183:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Various thread flags.
 184:./lib/chibios/os/rt/include/chschd.h ****    */
 185:./lib/chibios/os/rt/include/chschd.h ****   tmode_t               flags;
 186:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 187:./lib/chibios/os/rt/include/chschd.h ****   /**
 188:./lib/chibios/os/rt/include/chschd.h ****    * @brief   References to this thread.
 189:./lib/chibios/os/rt/include/chschd.h ****    */
 190:./lib/chibios/os/rt/include/chschd.h ****   trefs_t               refs;
 191:./lib/chibios/os/rt/include/chschd.h **** #endif
 192:./lib/chibios/os/rt/include/chschd.h ****   /**
 193:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 194:./lib/chibios/os/rt/include/chschd.h ****    */
 195:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 196:./lib/chibios/os/rt/include/chschd.h ****   tslices_t             preempt;
 197:./lib/chibios/os/rt/include/chschd.h **** #endif
 198:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 199:./lib/chibios/os/rt/include/chschd.h ****   /**
 200:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 201:./lib/chibios/os/rt/include/chschd.h ****    * @note    This field can overflow.
 202:./lib/chibios/os/rt/include/chschd.h ****    */
 203:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    time;
 204:./lib/chibios/os/rt/include/chschd.h **** #endif
 205:./lib/chibios/os/rt/include/chschd.h ****   /**
 206:./lib/chibios/os/rt/include/chschd.h ****    * @brief   State-specific fields.
 207:./lib/chibios/os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 208:./lib/chibios/os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 209:./lib/chibios/os/rt/include/chschd.h ****    */
 210:./lib/chibios/os/rt/include/chschd.h ****   union {
 211:./lib/chibios/os/rt/include/chschd.h ****     /**
 212:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 213:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 214:./lib/chibios/os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 215:./lib/chibios/os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 216:./lib/chibios/os/rt/include/chschd.h ****      */
 217:./lib/chibios/os/rt/include/chschd.h ****     msg_t               rdymsg;
 218:./lib/chibios/os/rt/include/chschd.h ****     /**
 219:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread exit code.
 220:./lib/chibios/os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 221:./lib/chibios/os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 222:./lib/chibios/os/rt/include/chschd.h ****      *          this thread.
 223:./lib/chibios/os/rt/include/chschd.h ****      */
 224:./lib/chibios/os/rt/include/chschd.h ****     msg_t               exitcode;
 225:./lib/chibios/os/rt/include/chschd.h ****     /**
 226:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 227:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 228:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 229:./lib/chibios/os/rt/include/chschd.h ****      *          states.
 230:./lib/chibios/os/rt/include/chschd.h ****      */
 231:./lib/chibios/os/rt/include/chschd.h ****     void                *wtobjp;
 232:./lib/chibios/os/rt/include/chschd.h ****     /**
 233:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 234:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 235:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 236:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 237:./lib/chibios/os/rt/include/chschd.h ****      */
 238:./lib/chibios/os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 239:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 240:./lib/chibios/os/rt/include/chschd.h ****     /**
 241:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread sent message.
 242:./lib/chibios/os/rt/include/chschd.h ****      */
 243:./lib/chibios/os/rt/include/chschd.h ****     msg_t               sentmsg;
 244:./lib/chibios/os/rt/include/chschd.h **** #endif
 245:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 246:./lib/chibios/os/rt/include/chschd.h ****     /**
 247:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 248:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 249:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 250:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 251:./lib/chibios/os/rt/include/chschd.h ****      */
 252:./lib/chibios/os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 253:./lib/chibios/os/rt/include/chschd.h **** #endif
 254:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 255:./lib/chibios/os/rt/include/chschd.h ****     /**
 256:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 257:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 258:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 259:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 260:./lib/chibios/os/rt/include/chschd.h ****      */
 261:./lib/chibios/os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 262:./lib/chibios/os/rt/include/chschd.h **** #endif
 263:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 264:./lib/chibios/os/rt/include/chschd.h ****     /**
 265:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 266:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 267:./lib/chibios/os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 268:./lib/chibios/os/rt/include/chschd.h ****      */
 269:./lib/chibios/os/rt/include/chschd.h ****     eventmask_t         ewmask;
 270:./lib/chibios/os/rt/include/chschd.h **** #endif
 271:./lib/chibios/os/rt/include/chschd.h ****   }                     u;
 272:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 273:./lib/chibios/os/rt/include/chschd.h ****   /**
 274:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 275:./lib/chibios/os/rt/include/chschd.h ****    */
 276:./lib/chibios/os/rt/include/chschd.h ****   threads_list_t        waiting;
 277:./lib/chibios/os/rt/include/chschd.h **** #endif
 278:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chschd.h ****   /**
 280:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Messages queue.
 281:./lib/chibios/os/rt/include/chschd.h ****    */
 282:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 283:./lib/chibios/os/rt/include/chschd.h **** #endif
 284:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 285:./lib/chibios/os/rt/include/chschd.h ****   /**
 286:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pending events mask.
 287:./lib/chibios/os/rt/include/chschd.h ****    */
 288:./lib/chibios/os/rt/include/chschd.h ****   eventmask_t           epending;
 289:./lib/chibios/os/rt/include/chschd.h **** #endif
 290:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 291:./lib/chibios/os/rt/include/chschd.h ****   /**
 292:./lib/chibios/os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 293:./lib/chibios/os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 294:./lib/chibios/os/rt/include/chschd.h ****    */
 295:./lib/chibios/os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 296:./lib/chibios/os/rt/include/chschd.h ****   /**
 297:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 298:./lib/chibios/os/rt/include/chschd.h ****    */
 299:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               realprio;
 300:./lib/chibios/os/rt/include/chschd.h **** #endif
 301:./lib/chibios/os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 302:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 303:./lib/chibios/os/rt/include/chschd.h ****   /**
 304:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 305:./lib/chibios/os/rt/include/chschd.h ****    */
 306:./lib/chibios/os/rt/include/chschd.h ****   void                  *mpool;
 307:./lib/chibios/os/rt/include/chschd.h **** #endif
 308:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 309:./lib/chibios/os/rt/include/chschd.h ****   /**
 310:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread statistics.
 311:./lib/chibios/os/rt/include/chschd.h ****    */
 312:./lib/chibios/os/rt/include/chschd.h ****   time_measurement_t    stats;
 313:./lib/chibios/os/rt/include/chschd.h **** #endif
 314:./lib/chibios/os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 315:./lib/chibios/os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 316:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 317:./lib/chibios/os/rt/include/chschd.h **** #endif
 318:./lib/chibios/os/rt/include/chschd.h **** };
 319:./lib/chibios/os/rt/include/chschd.h **** 
 320:./lib/chibios/os/rt/include/chschd.h **** /**
 321:./lib/chibios/os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 322:./lib/chibios/os/rt/include/chschd.h ****  *
 323:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 324:./lib/chibios/os/rt/include/chschd.h ****  */
 325:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timer {
 326:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 327:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 328:./lib/chibios/os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Time delta before timeout.  */
 329:./lib/chibios/os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 330:./lib/chibios/os/rt/include/chschd.h ****                                                 pointer.                    */
 331:./lib/chibios/os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 332:./lib/chibios/os/rt/include/chschd.h ****                                                 parameter.                  */
 333:./lib/chibios/os/rt/include/chschd.h **** };
 334:./lib/chibios/os/rt/include/chschd.h **** 
 335:./lib/chibios/os/rt/include/chschd.h **** /**
 336:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 337:./lib/chibios/os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 338:./lib/chibios/os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 339:./lib/chibios/os/rt/include/chschd.h ****  *          timer is often used in the code.
 340:./lib/chibios/os/rt/include/chschd.h ****  */
 341:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 342:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 343:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 344:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 345:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 346:./lib/chibios/os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Must be initialized to -1.  */
 347:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 348:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 349:./lib/chibios/os/rt/include/chschd.h **** #endif
 350:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 351:./lib/chibios/os/rt/include/chschd.h ****   /**
 352:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 353:./lib/chibios/os/rt/include/chschd.h ****    */
 354:./lib/chibios/os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 355:./lib/chibios/os/rt/include/chschd.h ****                                                 tick event.                 */
 356:./lib/chibios/os/rt/include/chschd.h **** #endif
 357:./lib/chibios/os/rt/include/chschd.h **** };
 358:./lib/chibios/os/rt/include/chschd.h **** 
 359:./lib/chibios/os/rt/include/chschd.h **** /**
 360:./lib/chibios/os/rt/include/chschd.h ****  * @extends threads_queue_t
 361:./lib/chibios/os/rt/include/chschd.h ****  */
 362:./lib/chibios/os/rt/include/chschd.h **** struct ch_ready_list {
 363:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 364:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 365:./lib/chibios/os/rt/include/chschd.h ****                                                 initialized to zero.        */
 366:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 367:./lib/chibios/os/rt/include/chschd.h ****                                                 offsets.                    */
 368:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 369:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 370:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 371:./lib/chibios/os/rt/include/chschd.h **** #endif
 372:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 373:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 374:./lib/chibios/os/rt/include/chschd.h ****                                                 thread.                     */
 375:./lib/chibios/os/rt/include/chschd.h **** };
 376:./lib/chibios/os/rt/include/chschd.h **** 
 377:./lib/chibios/os/rt/include/chschd.h **** /**
 378:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System debug data structure.
 379:./lib/chibios/os/rt/include/chschd.h ****  */
 380:./lib/chibios/os/rt/include/chschd.h **** struct ch_system_debug {
 381:./lib/chibios/os/rt/include/chschd.h ****   /**
 382:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 383:./lib/chibios/os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 384:./lib/chibios/os/rt/include/chschd.h ****    *          written once and then the system is halted.
 385:./lib/chibios/os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 386:./lib/chibios/os/rt/include/chschd.h ****    *          field itself is declared volatile.
 387:./lib/chibios/os/rt/include/chschd.h ****    */
 388:./lib/chibios/os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 389:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 390:./lib/chibios/os/rt/include/chschd.h ****   /**
 391:./lib/chibios/os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 392:./lib/chibios/os/rt/include/chschd.h ****    */
 393:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 394:./lib/chibios/os/rt/include/chschd.h ****   /**
 395:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 396:./lib/chibios/os/rt/include/chschd.h ****    */
 397:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 398:./lib/chibios/os/rt/include/chschd.h **** #endif
 399:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 400:./lib/chibios/os/rt/include/chschd.h ****   /**
 401:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 402:./lib/chibios/os/rt/include/chschd.h ****    */
 403:./lib/chibios/os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 404:./lib/chibios/os/rt/include/chschd.h **** #endif
 405:./lib/chibios/os/rt/include/chschd.h **** };
 406:./lib/chibios/os/rt/include/chschd.h **** 
 407:./lib/chibios/os/rt/include/chschd.h **** /**
 408:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System data structure.
 409:./lib/chibios/os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 410:./lib/chibios/os/rt/include/chschd.h ****  *          stacks.
 411:./lib/chibios/os/rt/include/chschd.h ****  */
 412:./lib/chibios/os/rt/include/chschd.h **** struct ch_system {
 413:./lib/chibios/os/rt/include/chschd.h ****   /**
 414:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Ready list header.
 415:./lib/chibios/os/rt/include/chschd.h ****    */
 416:./lib/chibios/os/rt/include/chschd.h ****   ready_list_t          rlist;
 417:./lib/chibios/os/rt/include/chschd.h ****   /**
 418:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 419:./lib/chibios/os/rt/include/chschd.h ****    */
 420:./lib/chibios/os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 421:./lib/chibios/os/rt/include/chschd.h ****   /**
 422:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System debug.
 423:./lib/chibios/os/rt/include/chschd.h ****    */
 424:./lib/chibios/os/rt/include/chschd.h ****   system_debug_t        dbg;
 425:./lib/chibios/os/rt/include/chschd.h ****   /**
 426:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 427:./lib/chibios/os/rt/include/chschd.h ****    */
 428:./lib/chibios/os/rt/include/chschd.h ****   thread_t              mainthread;
 429:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 430:./lib/chibios/os/rt/include/chschd.h ****   /**
 431:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 432:./lib/chibios/os/rt/include/chschd.h ****    */
 433:./lib/chibios/os/rt/include/chschd.h ****   tm_calibration_t      tm;
 434:./lib/chibios/os/rt/include/chschd.h **** #endif
 435:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 436:./lib/chibios/os/rt/include/chschd.h ****   /**
 437:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 438:./lib/chibios/os/rt/include/chschd.h ****    */
 439:./lib/chibios/os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 440:./lib/chibios/os/rt/include/chschd.h **** #endif
 441:./lib/chibios/os/rt/include/chschd.h **** };
 442:./lib/chibios/os/rt/include/chschd.h **** 
 443:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 444:./lib/chibios/os/rt/include/chschd.h **** /* Module macros.                                                            */
 445:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 446:./lib/chibios/os/rt/include/chschd.h **** 
 447:./lib/chibios/os/rt/include/chschd.h **** /**
 448:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 449:./lib/chibios/os/rt/include/chschd.h ****  *
 450:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 451:./lib/chibios/os/rt/include/chschd.h ****  */
 452:./lib/chibios/os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 453:./lib/chibios/os/rt/include/chschd.h **** 
 454:./lib/chibios/os/rt/include/chschd.h **** /**
 455:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 456:./lib/chibios/os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 457:./lib/chibios/os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 458:./lib/chibios/os/rt/include/chschd.h ****  */
 459:./lib/chibios/os/rt/include/chschd.h **** #define currp ch.rlist.current
 460:./lib/chibios/os/rt/include/chschd.h **** 
 461:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 462:./lib/chibios/os/rt/include/chschd.h **** /* External declarations.                                                    */
 463:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 464:./lib/chibios/os/rt/include/chschd.h **** 
 465:./lib/chibios/os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 466:./lib/chibios/os/rt/include/chschd.h **** extern ch_system_t ch;
 467:./lib/chibios/os/rt/include/chschd.h **** #endif
 468:./lib/chibios/os/rt/include/chschd.h **** 
 469:./lib/chibios/os/rt/include/chschd.h **** /*
 470:./lib/chibios/os/rt/include/chschd.h ****  * Scheduler APIs.
 471:./lib/chibios/os/rt/include/chschd.h ****  */
 472:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 473:./lib/chibios/os/rt/include/chschd.h **** extern "C" {
 474:./lib/chibios/os/rt/include/chschd.h **** #endif
 475:./lib/chibios/os/rt/include/chschd.h ****   void _scheduler_init(void);
 476:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 477:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 478:./lib/chibios/os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 479:./lib/chibios/os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time);
 480:./lib/chibios/os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 481:./lib/chibios/os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 482:./lib/chibios/os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 483:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 484:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 485:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 486:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 487:./lib/chibios/os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 488:./lib/chibios/os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 489:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 490:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 491:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 492:./lib/chibios/os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 493:./lib/chibios/os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 494:./lib/chibios/os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 495:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 496:./lib/chibios/os/rt/include/chschd.h **** }
 497:./lib/chibios/os/rt/include/chschd.h **** #endif
 498:./lib/chibios/os/rt/include/chschd.h **** 
 499:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 500:./lib/chibios/os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 501:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 502:./lib/chibios/os/rt/include/chschd.h **** 
 503:./lib/chibios/os/rt/include/chschd.h **** /**
 504:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 505:./lib/chibios/os/rt/include/chschd.h ****  *
 506:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 507:./lib/chibios/os/rt/include/chschd.h ****  *
 508:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 509:./lib/chibios/os/rt/include/chschd.h ****  */
 510:./lib/chibios/os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 511:./lib/chibios/os/rt/include/chschd.h **** 
 512:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 513:./lib/chibios/os/rt/include/chschd.h **** }
 514:./lib/chibios/os/rt/include/chschd.h **** 
 515:./lib/chibios/os/rt/include/chschd.h **** /**
 516:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 517:./lib/chibios/os/rt/include/chschd.h ****  *
 518:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 519:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 520:./lib/chibios/os/rt/include/chschd.h ****  *
 521:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 522:./lib/chibios/os/rt/include/chschd.h ****  */
 523:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 524:./lib/chibios/os/rt/include/chschd.h **** 
 525:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 526:./lib/chibios/os/rt/include/chschd.h **** }
 527:./lib/chibios/os/rt/include/chschd.h **** 
 528:./lib/chibios/os/rt/include/chschd.h **** /**
 529:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 530:./lib/chibios/os/rt/include/chschd.h ****  *
 531:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 532:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 533:./lib/chibios/os/rt/include/chschd.h ****  *
 534:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 535:./lib/chibios/os/rt/include/chschd.h ****  */
 536:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 537:./lib/chibios/os/rt/include/chschd.h **** 
 538:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 539:./lib/chibios/os/rt/include/chschd.h **** }
 540:./lib/chibios/os/rt/include/chschd.h **** 
 541:./lib/chibios/os/rt/include/chschd.h **** /**
 542:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 543:./lib/chibios/os/rt/include/chschd.h ****  *
 544:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 545:./lib/chibios/os/rt/include/chschd.h ****  *
 546:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 547:./lib/chibios/os/rt/include/chschd.h ****  */
 548:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 549:./lib/chibios/os/rt/include/chschd.h **** 
 550:./lib/chibios/os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
 551:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  62              		.loc 2 551 0
  63 001a C0E90000 		strd	r0, r0, [r0]
  64              	.LVL4:
  65              	.LBE276:
  66              	.LBE275:
  67              	.LBE274:
  68              	.LBE273:
  85:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  69              		.loc 1 85 0
  70 001e C0E90422 		strd	r2, r2, [r0, #16]
  89:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
  71              		.loc 1 89 0
  72 0022 C0E90842 		strd	r4, r2, [r0, #32]
  91:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->notify    = infy;
  73              		.loc 1 91 0
  74 0026 C0E90A11 		strd	r1, r1, [r0, #40]
  75              		.loc 1 93 0
  76 002a 4363     		str	r3, [r0, #52]
  94:lib/chibios/os/hal/src/hal_buffers.c **** }
  77              		.loc 1 94 0
  78 002c 30BD     		pop	{r4, r5, pc}
  79              		.cfi_endproc
  80              	.LFE279:
  82              		.section	.text.ibqResetI,"ax",%progbits
  83              		.align	1
  84              		.global	ibqResetI
  85              		.syntax unified
  86              		.thumb
  87              		.thumb_func
  88              		.fpu softvfp
  90              	ibqResetI:
  91              	.LFB280:
  95:lib/chibios/os/hal/src/hal_buffers.c **** 
  96:lib/chibios/os/hal/src/hal_buffers.c **** /**
  97:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Resets an input buffers queue.
  98:lib/chibios/os/hal/src/hal_buffers.c ****  * @details All the data in the input buffers queue is erased and lost, any
  99:lib/chibios/os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 100:lib/chibios/os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 101:lib/chibios/os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 102:lib/chibios/os/hal/src/hal_buffers.c ****  *
 103:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 104:lib/chibios/os/hal/src/hal_buffers.c ****  *
 105:lib/chibios/os/hal/src/hal_buffers.c ****  * @iclass
 106:lib/chibios/os/hal/src/hal_buffers.c ****  */
 107:lib/chibios/os/hal/src/hal_buffers.c **** void ibqResetI(input_buffers_queue_t *ibqp) {
  92              		.loc 1 107 0
  93              		.cfi_startproc
  94              		@ args = 0, pretend = 0, frame = 0
  95              		@ frame_needed = 0, uses_anonymous_args = 0
  96              		@ link register save eliminated.
  97              	.LVL5:
 108:lib/chibios/os/hal/src/hal_buffers.c **** 
 109:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 110:lib/chibios/os/hal/src/hal_buffers.c **** 
 111:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
 112:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->brdptr    = ibqp->buffers;
  98              		.loc 1 112 0
  99 0000 416A     		ldr	r1, [r0, #36]
 111:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->brdptr    = ibqp->buffers;
 100              		.loc 1 111 0
 101 0002 0022     		movs	r2, #0
 113:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = ibqp->buffers;
 102              		.loc 1 113 0
 103 0004 C0E90411 		strd	r1, r1, [r0, #16]
 111:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->brdptr    = ibqp->buffers;
 104              		.loc 1 111 0
 105 0008 C260     		str	r2, [r0, #12]
 114:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
 115:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
 106              		.loc 1 115 0
 107 000a C0E90A22 		strd	r2, r2, [r0, #40]
 108              	.LVL6:
 109              	.LBB277:
 110              	.LBB278:
 111              		.file 3 "./lib/chibios/os/hal/osal/rt/osal.h"
   1:./lib/chibios/os/hal/osal/rt/osal.h **** /*
   2:./lib/chibios/os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:./lib/chibios/os/hal/osal/rt/osal.h **** 
   4:./lib/chibios/os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:./lib/chibios/os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:./lib/chibios/os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:./lib/chibios/os/hal/osal/rt/osal.h **** 
   8:./lib/chibios/os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:./lib/chibios/os/hal/osal/rt/osal.h **** 
  10:./lib/chibios/os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:./lib/chibios/os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:./lib/chibios/os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:./lib/chibios/os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:./lib/chibios/os/hal/osal/rt/osal.h ****     limitations under the License.
  15:./lib/chibios/os/hal/osal/rt/osal.h **** */
  16:./lib/chibios/os/hal/osal/rt/osal.h **** 
  17:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  18:./lib/chibios/os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:./lib/chibios/os/hal/osal/rt/osal.h ****  *
  21:./lib/chibios/os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  23:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  24:./lib/chibios/os/hal/osal/rt/osal.h **** 
  25:./lib/chibios/os/hal/osal/rt/osal.h **** #ifndef _OSAL_H_
  26:./lib/chibios/os/hal/osal/rt/osal.h **** #define _OSAL_H_
  27:./lib/chibios/os/hal/osal/rt/osal.h **** 
  28:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:./lib/chibios/os/hal/osal/rt/osal.h **** 
  32:./lib/chibios/os/hal/osal/rt/osal.h **** #include "ch.h"
  33:./lib/chibios/os/hal/osal/rt/osal.h **** 
  34:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:./lib/chibios/os/hal/osal/rt/osal.h **** 
  38:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  39:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  41:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  42:./lib/chibios/os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:./lib/chibios/os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  45:./lib/chibios/os/hal/osal/rt/osal.h **** 
  46:./lib/chibios/os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:./lib/chibios/os/hal/osal/rt/osal.h **** #define TRUE                                (!FALSE)
  48:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  49:./lib/chibios/os/hal/osal/rt/osal.h **** 
  50:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        FALSE
  51:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         TRUE
  52:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  53:./lib/chibios/os/hal/osal/rt/osal.h **** 
  54:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
  55:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  56:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Messages
  57:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  58:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  59:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_OK                              RDY_OK
  60:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_RESET                           RDY_RESET
  61:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         RDY_TIMEOUT
  62:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  63:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  64:./lib/chibios/os/hal/osal/rt/osal.h **** 
  65:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
  66:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  67:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  69:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  70:./lib/chibios/os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((systime_t)0)
  71:./lib/chibios/os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((systime_t)-1)
  72:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  73:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  74:./lib/chibios/os/hal/osal/rt/osal.h **** 
  75:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  76:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  78:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  79:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  83:./lib/chibios/os/hal/osal/rt/osal.h **** 
  84:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  85:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  87:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  88:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  89:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  91:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:./lib/chibios/os/hal/osal/rt/osal.h **** 
  93:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  94:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  96:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:./lib/chibios/os/hal/osal/rt/osal.h **** 
  98:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  99:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 101:./lib/chibios/os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 104:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 106:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 107:./lib/chibios/os/hal/osal/rt/osal.h **** 
 108:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:./lib/chibios/os/hal/osal/rt/osal.h **** 
 112:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:./lib/chibios/os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:./lib/chibios/os/hal/osal/rt/osal.h **** 
 116:./lib/chibios/os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:./lib/chibios/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:./lib/chibios/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:./lib/chibios/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 121:./lib/chibios/os/hal/osal/rt/osal.h **** 
 122:./lib/chibios/os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:./lib/chibios/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 125:./lib/chibios/os/hal/osal/rt/osal.h **** 
 126:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:./lib/chibios/os/hal/osal/rt/osal.h **** 
 130:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 131:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 132:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 134:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 136:./lib/chibios/os/hal/osal/rt/osal.h **** 
 137:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 138:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 139:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 141:./lib/chibios/os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 143:./lib/chibios/os/hal/osal/rt/osal.h **** 
 144:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 145:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 146:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 148:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 150:./lib/chibios/os/hal/osal/rt/osal.h **** 
 151:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 152:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 153:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 154:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 155:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 156:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 157:./lib/chibios/os/hal/osal/rt/osal.h **** 
 158:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 159:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 160:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 161:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 162:./lib/chibios/os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 163:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 164:./lib/chibios/os/hal/osal/rt/osal.h **** 
 165:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 166:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 167:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 168:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 169:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 170:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 171:./lib/chibios/os/hal/osal/rt/osal.h **** 
 172:./lib/chibios/os/hal/osal/rt/osal.h **** #if !CH_CFG_USE_EVENTS
 173:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 174:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 175:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 176:./lib/chibios/os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 177:./lib/chibios/os/hal/osal/rt/osal.h ****  *          an entirely different way.
 178:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 179:./lib/chibios/os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 180:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 181:./lib/chibios/os/hal/osal/rt/osal.h **** typedef struct {
 182:./lib/chibios/os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Flags stored into the
 183:./lib/chibios/os/hal/osal/rt/osal.h ****                                                 object.                     */
 184:./lib/chibios/os/hal/osal/rt/osal.h **** } event_source_t;
 185:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 186:./lib/chibios/os/hal/osal/rt/osal.h **** 
 187:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 188:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 189:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then them
 190:./lib/chibios/os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 191:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 192:./lib/chibios/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 193:./lib/chibios/os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 194:./lib/chibios/os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 195:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 196:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 197:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 198:./lib/chibios/os/hal/osal/rt/osal.h **** 
 199:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 200:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 201:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 202:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 203:./lib/chibios/os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 204:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 205:./lib/chibios/os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 206:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 207:./lib/chibios/os/hal/osal/rt/osal.h **** typedef struct {
 208:./lib/chibios/os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 209:./lib/chibios/os/hal/osal/rt/osal.h **** } threads_queue_t;
 210:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 211:./lib/chibios/os/hal/osal/rt/osal.h **** 
 212:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 213:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 214:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 215:./lib/chibios/os/hal/osal/rt/osal.h **** 
 216:./lib/chibios/os/hal/osal/rt/osal.h **** /* Temporary names provided for ChibiOS 2.x compatibility.*/
 217:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueInit osalThreadQueueObjectInit
 218:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueWakeupAllI osalThreadDequeueAllI
 219:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueWakeupOneI osalThreadDequeueNextI
 220:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueGoSleepTimeoutS osalThreadEnqueueTimeoutS
 221:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalEventInit osalEventObjectInit
 222:./lib/chibios/os/hal/osal/rt/osal.h **** 
 223:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 224:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 225:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 226:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 227:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 228:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 229:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 230:./lib/chibios/os/hal/osal/rt/osal.h ****  *          message and halts.
 231:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 232:./lib/chibios/os/hal/osal/rt/osal.h ****  *          switch is enabled.
 233:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 234:./lib/chibios/os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 235:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 236:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 237:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 238:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 239:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 240:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 241:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 242:./lib/chibios/os/hal/osal/rt/osal.h **** 
 243:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 244:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 245:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 246:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 247:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is enabled.
 248:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 249:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 250:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 251:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 252:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 253:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 254:./lib/chibios/os/hal/osal/rt/osal.h **** 
 255:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 256:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 257:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 258:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 259:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 260:./lib/chibios/os/hal/osal/rt/osal.h **** 
 261:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 262:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 263:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 264:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 265:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 266:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 267:./lib/chibios/os/hal/osal/rt/osal.h **** 
 268:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 269:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 270:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 271:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 272:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 273:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 274:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 275:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 276:./lib/chibios/os/hal/osal/rt/osal.h **** 
 277:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 278:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 279:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 280:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 281:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 282:./lib/chibios/os/hal/osal/rt/osal.h **** 
 283:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 284:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 285:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 286:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 287:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 288:./lib/chibios/os/hal/osal/rt/osal.h **** 
 289:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 290:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 291:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 292:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 293:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 294:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 295:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 296:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 297:./lib/chibios/os/hal/osal/rt/osal.h **** 
 298:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 299:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 300:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 301:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 302:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 303:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 304:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 305:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 306:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 307:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 308:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 309:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 310:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 311:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 312:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_S2ST(sec) S2ST(sec)
 313:./lib/chibios/os/hal/osal/rt/osal.h **** 
 314:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 315:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 316:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 317:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 318:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 319:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 320:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 321:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 322:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 323:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 324:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_MS2ST(msec) MS2ST(msec)
 325:./lib/chibios/os/hal/osal/rt/osal.h **** 
 326:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 327:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 328:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 329:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 330:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 331:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 332:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 333:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 334:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 335:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 336:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_US2ST(usec) US2ST(usec)
 337:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 338:./lib/chibios/os/hal/osal/rt/osal.h **** 
 339:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 340:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 341:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 342:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 343:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 344:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 345:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 346:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 347:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 348:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 349:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 350:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 351:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 352:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 353:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 354:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 355:./lib/chibios/os/hal/osal/rt/osal.h **** 
 356:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 357:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 358:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 359:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 360:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 361:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 362:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 363:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 364:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 365:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 366:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 367:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 368:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 369:./lib/chibios/os/hal/osal/rt/osal.h **** 
 370:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 371:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 372:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 373:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 374:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 375:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 376:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 377:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 378:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 379:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 380:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 381:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 382:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 383:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 384:./lib/chibios/os/hal/osal/rt/osal.h **** 
 385:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 386:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 387:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 388:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 389:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 390:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 391:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 392:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 393:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 394:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 395:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       time in seconds, must be different from zero
 396:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 397:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 398:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 399:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(sec) osalThreadSleep(OSAL_S2ST(sec))
 400:./lib/chibios/os/hal/osal/rt/osal.h **** 
 401:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 402:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 403:./lib/chibios/os/hal/osal/rt/osal.h ****  *          milliseconds.
 404:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 405:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 406:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 407:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 408:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 409:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 410:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 411:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 412:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msec) osalThreadSleep(OSAL_MS2ST(msec))
 413:./lib/chibios/os/hal/osal/rt/osal.h **** 
 414:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 415:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 416:./lib/chibios/os/hal/osal/rt/osal.h ****  *          microseconds.
 417:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 418:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 419:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 420:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 421:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      time in microseconds, must be different from zero
 422:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 423:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 424:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 425:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usec) osalThreadSleep(OSAL_US2ST(usec))
 426:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 427:./lib/chibios/os/hal/osal/rt/osal.h **** 
 428:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 429:./lib/chibios/os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 430:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 431:./lib/chibios/os/hal/osal/rt/osal.h **** 
 432:./lib/chibios/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 433:./lib/chibios/os/hal/osal/rt/osal.h **** extern "C" {
 434:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 435:./lib/chibios/os/hal/osal/rt/osal.h **** 
 436:./lib/chibios/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 437:./lib/chibios/os/hal/osal/rt/osal.h **** }
 438:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 439:./lib/chibios/os/hal/osal/rt/osal.h **** 
 440:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 441:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 442:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 443:./lib/chibios/os/hal/osal/rt/osal.h **** 
 444:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 445:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 446:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 447:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 448:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 449:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 450:./lib/chibios/os/hal/osal/rt/osal.h **** 
 451:./lib/chibios/os/hal/osal/rt/osal.h **** }
 452:./lib/chibios/os/hal/osal/rt/osal.h **** 
 453:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 454:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 455:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 456:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 457:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 458:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 459:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 460:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 461:./lib/chibios/os/hal/osal/rt/osal.h **** 
 462:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 463:./lib/chibios/os/hal/osal/rt/osal.h **** }
 464:./lib/chibios/os/hal/osal/rt/osal.h **** 
 465:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 466:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 467:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 468:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 469:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 470:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 471:./lib/chibios/os/hal/osal/rt/osal.h **** 
 472:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysDisable();
 473:./lib/chibios/os/hal/osal/rt/osal.h **** }
 474:./lib/chibios/os/hal/osal/rt/osal.h **** 
 475:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 476:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 477:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 478:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 479:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 480:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 481:./lib/chibios/os/hal/osal/rt/osal.h **** 
 482:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysEnable();
 483:./lib/chibios/os/hal/osal/rt/osal.h **** }
 484:./lib/chibios/os/hal/osal/rt/osal.h **** 
 485:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 486:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 487:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 488:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 489:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 490:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 491:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 492:./lib/chibios/os/hal/osal/rt/osal.h **** 
 493:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysLock();
 494:./lib/chibios/os/hal/osal/rt/osal.h **** }
 495:./lib/chibios/os/hal/osal/rt/osal.h **** 
 496:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 497:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 498:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 499:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 500:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 501:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 502:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 503:./lib/chibios/os/hal/osal/rt/osal.h **** 
 504:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysUnlock();
 505:./lib/chibios/os/hal/osal/rt/osal.h **** }
 506:./lib/chibios/os/hal/osal/rt/osal.h **** 
 507:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 508:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 509:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 510:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 511:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 512:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 513:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 514:./lib/chibios/os/hal/osal/rt/osal.h **** 
 515:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 516:./lib/chibios/os/hal/osal/rt/osal.h **** }
 517:./lib/chibios/os/hal/osal/rt/osal.h **** 
 518:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 519:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 520:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 521:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 522:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 523:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 524:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 525:./lib/chibios/os/hal/osal/rt/osal.h **** 
 526:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 527:./lib/chibios/os/hal/osal/rt/osal.h **** }
 528:./lib/chibios/os/hal/osal/rt/osal.h **** 
 529:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 530:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 531:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 532:./lib/chibios/os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 533:./lib/chibios/os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 534:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is known.
 535:./lib/chibios/os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 536:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 537:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 538:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 539:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 540:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 541:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 542:./lib/chibios/os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 543:./lib/chibios/os/hal/osal/rt/osal.h **** 
 544:./lib/chibios/os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 545:./lib/chibios/os/hal/osal/rt/osal.h **** }
 546:./lib/chibios/os/hal/osal/rt/osal.h **** 
 547:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 548:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 549:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 550:./lib/chibios/os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 551:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 552:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 553:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 554:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 555:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 556:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 557:./lib/chibios/os/hal/osal/rt/osal.h **** 
 558:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 559:./lib/chibios/os/hal/osal/rt/osal.h **** }
 560:./lib/chibios/os/hal/osal/rt/osal.h **** 
 561:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 562:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 563:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 564:./lib/chibios/os/hal/osal/rt/osal.h ****  *          value.
 565:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 566:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 567:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 568:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 569:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 570:./lib/chibios/os/hal/osal/rt/osal.h **** #if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
 571:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 572:./lib/chibios/os/hal/osal/rt/osal.h **** 
 573:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 574:./lib/chibios/os/hal/osal/rt/osal.h **** }
 575:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 576:./lib/chibios/os/hal/osal/rt/osal.h **** 
 577:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 578:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 579:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 580:./lib/chibios/os/hal/osal/rt/osal.h ****  *          service from the HAL.
 581:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 582:./lib/chibios/os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 583:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 584:./lib/chibios/os/hal/osal/rt/osal.h **** 
 585:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 586:./lib/chibios/os/hal/osal/rt/osal.h **** }
 587:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 588:./lib/chibios/os/hal/osal/rt/osal.h **** 
 589:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 590:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 591:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 592:./lib/chibios/os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 593:./lib/chibios/os/hal/osal/rt/osal.h ****  *          required in this scenario.
 594:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 595:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 596:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 597:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 598:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 599:./lib/chibios/os/hal/osal/rt/osal.h **** 
 600:./lib/chibios/os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 601:./lib/chibios/os/hal/osal/rt/osal.h **** }
 602:./lib/chibios/os/hal/osal/rt/osal.h **** 
 603:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 604:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 605:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 606:./lib/chibios/os/hal/osal/rt/osal.h ****  *          invocation.
 607:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 608:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 609:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 610:./lib/chibios/os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 611:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 612:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 613:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 614:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 615:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 616:./lib/chibios/os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 617:./lib/chibios/os/hal/osal/rt/osal.h **** 
 618:./lib/chibios/os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 619:./lib/chibios/os/hal/osal/rt/osal.h **** }
 620:./lib/chibios/os/hal/osal/rt/osal.h **** 
 621:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 622:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 623:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 624:./lib/chibios/os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 625:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 626:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 627:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 628:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 629:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 630:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 631:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 632:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 633:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 634:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 635:./lib/chibios/os/hal/osal/rt/osal.h **** static inline bool osalOsIsTimeWithinX(systime_t time,
 636:./lib/chibios/os/hal/osal/rt/osal.h ****                                        systime_t start,
 637:./lib/chibios/os/hal/osal/rt/osal.h ****                                        systime_t end) {
 638:./lib/chibios/os/hal/osal/rt/osal.h **** 
 639:./lib/chibios/os/hal/osal/rt/osal.h ****   return chVTIsTimeWithinX(time, start, end);
 640:./lib/chibios/os/hal/osal/rt/osal.h **** }
 641:./lib/chibios/os/hal/osal/rt/osal.h **** 
 642:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 643:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 644:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 645:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 646:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 647:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 648:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        normal time specification.
 649:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 650:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 651:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 652:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 653:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 654:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(systime_t time) {
 655:./lib/chibios/os/hal/osal/rt/osal.h **** 
 656:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdSleepS(time);
 657:./lib/chibios/os/hal/osal/rt/osal.h **** }
 658:./lib/chibios/os/hal/osal/rt/osal.h **** 
 659:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 660:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 661:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 662:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 663:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 664:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 665:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        normal time specification.
 666:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 667:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 668:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 669:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 670:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 671:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(systime_t time) {
 672:./lib/chibios/os/hal/osal/rt/osal.h **** 
 673:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdSleep(time);
 674:./lib/chibios/os/hal/osal/rt/osal.h **** }
 675:./lib/chibios/os/hal/osal/rt/osal.h **** 
 676:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 677:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 678:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 679:./lib/chibios/os/hal/osal/rt/osal.h ****  *          context.
 680:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 681:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 682:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 683:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 684:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 685:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 686:./lib/chibios/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 687:./lib/chibios/os/hal/osal/rt/osal.h **** 
 688:./lib/chibios/os/hal/osal/rt/osal.h ****   return chThdSuspendS(trp);
 689:./lib/chibios/os/hal/osal/rt/osal.h **** }
 690:./lib/chibios/os/hal/osal/rt/osal.h **** 
 691:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 692:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 693:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 694:./lib/chibios/os/hal/osal/rt/osal.h ****  *          context.
 695:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 696:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 697:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 698:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 699:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 700:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        state.
 701:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 702:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 703:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        occurred.
 704:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 705:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 706:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 707:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 708:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 709:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 710:./lib/chibios/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 711:./lib/chibios/os/hal/osal/rt/osal.h ****                                               systime_t timeout) {
 712:./lib/chibios/os/hal/osal/rt/osal.h **** 
 713:./lib/chibios/os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 714:./lib/chibios/os/hal/osal/rt/osal.h **** }
 715:./lib/chibios/os/hal/osal/rt/osal.h **** 
 716:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 717:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 718:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must not reschedule because it can be called from
 719:./lib/chibios/os/hal/osal/rt/osal.h ****  *          ISR context.
 720:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 721:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 722:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 723:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 724:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 725:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 726:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 727:./lib/chibios/os/hal/osal/rt/osal.h **** 
 728:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdResumeI(trp, msg);
 729:./lib/chibios/os/hal/osal/rt/osal.h **** }
 730:./lib/chibios/os/hal/osal/rt/osal.h **** 
 731:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 732:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 733:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 734:./lib/chibios/os/hal/osal/rt/osal.h ****  *          context.
 735:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 736:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 737:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 738:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 739:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 740:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 741:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 742:./lib/chibios/os/hal/osal/rt/osal.h **** 
 743:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdResumeS(trp, msg);
 744:./lib/chibios/os/hal/osal/rt/osal.h **** }
 745:./lib/chibios/os/hal/osal/rt/osal.h **** 
 746:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 747:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Initializes a threads queue object.
 748:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 749:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 750:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 751:./lib/chibios/os/hal/osal/rt/osal.h ****  * @init
 752:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 753:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 754:./lib/chibios/os/hal/osal/rt/osal.h **** 
 755:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdQueueObjectInit(tqp);
 756:./lib/chibios/os/hal/osal/rt/osal.h **** }
 757:./lib/chibios/os/hal/osal/rt/osal.h **** 
 758:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 759:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enqueues the caller thread.
 760:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 761:./lib/chibios/os/hal/osal/rt/osal.h ****  *          dequeued or the specified timeouts expires.
 762:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 763:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 764:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the timeout in system ticks, the special values are
 765:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 766:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 767:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        state.
 768:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 769:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 770:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        occurred.
 771:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 772:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 773:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 774:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 775:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      specified timeout or if the function has been
 776:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 777:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      specification.
 778:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 779:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 780:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 781:./lib/chibios/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 782:./lib/chibios/os/hal/osal/rt/osal.h ****                                               systime_t time) {
 783:./lib/chibios/os/hal/osal/rt/osal.h **** 
 784:./lib/chibios/os/hal/osal/rt/osal.h ****   return chThdEnqueueTimeoutS(tqp, time);
 785:./lib/chibios/os/hal/osal/rt/osal.h **** }
 786:./lib/chibios/os/hal/osal/rt/osal.h **** 
 787:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 788:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 789:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 790:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 791:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 792:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 793:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 794:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 795:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 796:./lib/chibios/os/hal/osal/rt/osal.h **** 
 797:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdDequeueNextI(tqp, msg);
 798:./lib/chibios/os/hal/osal/rt/osal.h **** }
 799:./lib/chibios/os/hal/osal/rt/osal.h **** 
 800:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 801:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 802:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 803:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 804:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 805:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 806:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 807:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 808:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 809:./lib/chibios/os/hal/osal/rt/osal.h **** 
 810:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdDequeueAllI(tqp, msg);
 112              		.loc 3 810 0
 113 000e 6FF00101 		mvn	r1, #1
 114 0012 FFF7FEBF 		b	chThdDequeueAllI
 115              	.LVL7:
 116              	.LBE278:
 117              	.LBE277:
 118              		.cfi_endproc
 119              	.LFE280:
 121              		.section	.text.ibqGetEmptyBufferI,"ax",%progbits
 122              		.align	1
 123              		.global	ibqGetEmptyBufferI
 124              		.syntax unified
 125              		.thumb
 126              		.thumb_func
 127              		.fpu softvfp
 129              	ibqGetEmptyBufferI:
 130              	.LFB281:
 116:lib/chibios/os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
 117:lib/chibios/os/hal/src/hal_buffers.c **** }
 118:lib/chibios/os/hal/src/hal_buffers.c **** 
 119:lib/chibios/os/hal/src/hal_buffers.c **** /**
 120:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 121:lib/chibios/os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 122:lib/chibios/os/hal/src/hal_buffers.c ****  *
 123:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 124:lib/chibios/os/hal/src/hal_buffers.c ****  * @return              A pointer to the next buffer to be filled.
 125:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is full.
 126:lib/chibios/os/hal/src/hal_buffers.c ****  *
 127:lib/chibios/os/hal/src/hal_buffers.c ****  * @iclass
 128:lib/chibios/os/hal/src/hal_buffers.c ****  */
 129:lib/chibios/os/hal/src/hal_buffers.c **** uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {
 131              		.loc 1 129 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 0
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              		@ link register save eliminated.
 136              	.LVL8:
 130:lib/chibios/os/hal/src/hal_buffers.c **** 
 131:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 132:lib/chibios/os/hal/src/hal_buffers.c **** 
 133:lib/chibios/os/hal/src/hal_buffers.c ****   if (ibqIsFullI(ibqp)) {
 137              		.loc 1 133 0
 138 0000 D0E90432 		ldrd	r3, r2, [r0, #16]
 139 0004 9342     		cmp	r3, r2
 140 0006 01D1     		bne	.L4
 141              		.loc 1 133 0 is_stmt 0 discriminator 1
 142 0008 C268     		ldr	r2, [r0, #12]
 143 000a 0AB9     		cbnz	r2, .L6
 144              	.L4:
 134:lib/chibios/os/hal/src/hal_buffers.c ****     return NULL;
 135:lib/chibios/os/hal/src/hal_buffers.c ****   }
 136:lib/chibios/os/hal/src/hal_buffers.c **** 
 137:lib/chibios/os/hal/src/hal_buffers.c ****   return ibqp->bwrptr + sizeof (size_t);
 145              		.loc 1 137 0 is_stmt 1
 146 000c 181D     		adds	r0, r3, #4
 147              	.LVL9:
 148 000e 7047     		bx	lr
 149              	.LVL10:
 150              	.L6:
 134:lib/chibios/os/hal/src/hal_buffers.c ****     return NULL;
 151              		.loc 1 134 0
 152 0010 0020     		movs	r0, #0
 153              	.LVL11:
 138:lib/chibios/os/hal/src/hal_buffers.c **** }
 154              		.loc 1 138 0
 155 0012 7047     		bx	lr
 156              		.cfi_endproc
 157              	.LFE281:
 159              		.section	.text.ibqPostFullBufferI,"ax",%progbits
 160              		.align	1
 161              		.global	ibqPostFullBufferI
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
 165              		.fpu softvfp
 167              	ibqPostFullBufferI:
 168              	.LFB282:
 139:lib/chibios/os/hal/src/hal_buffers.c **** 
 140:lib/chibios/os/hal/src/hal_buffers.c **** /**
 141:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 142:lib/chibios/os/hal/src/hal_buffers.c ****  *
 143:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 144:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 145:lib/chibios/os/hal/src/hal_buffers.c ****  *
 146:lib/chibios/os/hal/src/hal_buffers.c ****  * @iclass
 147:lib/chibios/os/hal/src/hal_buffers.c ****  */
 148:lib/chibios/os/hal/src/hal_buffers.c **** void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 169              		.loc 1 148 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              		@ link register save eliminated.
 174              	.LVL12:
 149:lib/chibios/os/hal/src/hal_buffers.c **** 
 150:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 151:lib/chibios/os/hal/src/hal_buffers.c **** 
 152:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 153:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 154:lib/chibios/os/hal/src/hal_buffers.c **** 
 155:lib/chibios/os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 156:lib/chibios/os/hal/src/hal_buffers.c ****   *((size_t *)ibqp->bwrptr) = size;
 175              		.loc 1 156 0
 176 0000 0369     		ldr	r3, [r0, #16]
 177 0002 1960     		str	r1, [r3]
 157:lib/chibios/os/hal/src/hal_buffers.c **** 
 158:lib/chibios/os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 159:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->bcounter++;
 178              		.loc 1 159 0
 179 0004 C268     		ldr	r2, [r0, #12]
 180 0006 0132     		adds	r2, r2, #1
 181 0008 C260     		str	r2, [r0, #12]
 160:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->bwrptr += ibqp->bsize;
 182              		.loc 1 160 0
 183 000a C269     		ldr	r2, [r0, #28]
 184 000c 1344     		add	r3, r3, r2
 161:lib/chibios/os/hal/src/hal_buffers.c ****   if (ibqp->bwrptr >= ibqp->btop) {
 185              		.loc 1 161 0
 186 000e 8269     		ldr	r2, [r0, #24]
 160:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->bwrptr += ibqp->bsize;
 187              		.loc 1 160 0
 188 0010 0361     		str	r3, [r0, #16]
 189              		.loc 1 161 0
 190 0012 9342     		cmp	r3, r2
 162:lib/chibios/os/hal/src/hal_buffers.c ****     ibqp->bwrptr = ibqp->buffers;
 191              		.loc 1 162 0
 192 0014 24BF     		itt	cs
 193 0016 436A     		ldrcs	r3, [r0, #36]
 194 0018 0361     		strcs	r3, [r0, #16]
 195              	.LVL13:
 196              	.LBB279:
 197              	.LBB280:
 797:./lib/chibios/os/hal/osal/rt/osal.h **** }
 198              		.loc 3 797 0
 199 001a 0021     		movs	r1, #0
 200              	.LVL14:
 201 001c FFF7FEBF 		b	chThdDequeueNextI
 202              	.LVL15:
 203              	.LBE280:
 204              	.LBE279:
 205              		.cfi_endproc
 206              	.LFE282:
 208              		.section	.text.ibqGetFullBufferTimeoutS,"ax",%progbits
 209              		.align	1
 210              		.global	ibqGetFullBufferTimeoutS
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 214              		.fpu softvfp
 216              	ibqGetFullBufferTimeoutS:
 217              	.LFB284:
 163:lib/chibios/os/hal/src/hal_buffers.c ****   }
 164:lib/chibios/os/hal/src/hal_buffers.c **** 
 165:lib/chibios/os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 166:lib/chibios/os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
 167:lib/chibios/os/hal/src/hal_buffers.c **** }
 168:lib/chibios/os/hal/src/hal_buffers.c **** 
 169:lib/chibios/os/hal/src/hal_buffers.c **** /**
 170:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 171:lib/chibios/os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 172:lib/chibios/os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 173:lib/chibios/os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 174:lib/chibios/os/hal/src/hal_buffers.c ****  *          is empty.
 175:lib/chibios/os/hal/src/hal_buffers.c ****  *
 176:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 177:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 178:lib/chibios/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 179:lib/chibios/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 180:lib/chibios/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 181:lib/chibios/os/hal/src/hal_buffers.c ****  *                      .
 182:lib/chibios/os/hal/src/hal_buffers.c ****  * @return              The operation status.
 183:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 184:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 185:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 186:lib/chibios/os/hal/src/hal_buffers.c ****  *                      suspended state.
 187:lib/chibios/os/hal/src/hal_buffers.c ****  *
 188:lib/chibios/os/hal/src/hal_buffers.c ****  * @api
 189:lib/chibios/os/hal/src/hal_buffers.c ****  */
 190:lib/chibios/os/hal/src/hal_buffers.c **** msg_t ibqGetFullBufferTimeout(input_buffers_queue_t *ibqp,
 191:lib/chibios/os/hal/src/hal_buffers.c ****                               systime_t timeout) {
 192:lib/chibios/os/hal/src/hal_buffers.c ****   msg_t msg;
 193:lib/chibios/os/hal/src/hal_buffers.c **** 
 194:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysLock();
 195:lib/chibios/os/hal/src/hal_buffers.c ****   msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 196:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 197:lib/chibios/os/hal/src/hal_buffers.c **** 
 198:lib/chibios/os/hal/src/hal_buffers.c ****   return msg;
 199:lib/chibios/os/hal/src/hal_buffers.c **** }
 200:lib/chibios/os/hal/src/hal_buffers.c **** 
 201:lib/chibios/os/hal/src/hal_buffers.c ****   /**
 202:lib/chibios/os/hal/src/hal_buffers.c ****    * @brief   Gets the next filled buffer from the queue.
 203:lib/chibios/os/hal/src/hal_buffers.c ****    * @note    The function always acquires the same buffer if called repeatedly.
 204:lib/chibios/os/hal/src/hal_buffers.c ****    * @post    After calling the function the fields @p ptr and @p top are set
 205:lib/chibios/os/hal/src/hal_buffers.c ****    *          at beginning and end of the buffer data or @p NULL if the queue
 206:lib/chibios/os/hal/src/hal_buffers.c ****    *          is empty.
 207:lib/chibios/os/hal/src/hal_buffers.c ****    *
 208:lib/chibios/os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 209:lib/chibios/os/hal/src/hal_buffers.c ****    * @param[in] timeout   the number of ticks before the operation timeouts,
 210:lib/chibios/os/hal/src/hal_buffers.c ****    *                      the following special values are allowed:
 211:lib/chibios/os/hal/src/hal_buffers.c ****    *                      - @a TIME_IMMEDIATE immediate timeout.
 212:lib/chibios/os/hal/src/hal_buffers.c ****    *                      - @a TIME_INFINITE no timeout.
 213:lib/chibios/os/hal/src/hal_buffers.c ****    *                      .
 214:lib/chibios/os/hal/src/hal_buffers.c ****    * @return              The operation status.
 215:lib/chibios/os/hal/src/hal_buffers.c ****    * @retval MSG_OK       if a buffer has been acquired.
 216:lib/chibios/os/hal/src/hal_buffers.c ****    * @retval MSG_TIMEOUT  if the specified time expired.
 217:lib/chibios/os/hal/src/hal_buffers.c ****    * @retval MSG_RESET    if the queue has been reset or has been put in
 218:lib/chibios/os/hal/src/hal_buffers.c ****    *                      suspended state.
 219:lib/chibios/os/hal/src/hal_buffers.c ****    *
 220:lib/chibios/os/hal/src/hal_buffers.c ****    * @sclass
 221:lib/chibios/os/hal/src/hal_buffers.c ****    */
 222:lib/chibios/os/hal/src/hal_buffers.c ****   msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
 223:lib/chibios/os/hal/src/hal_buffers.c ****                                  systime_t timeout) {
 218              		.loc 1 223 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 0
 221              		@ frame_needed = 0, uses_anonymous_args = 0
 222              	.LVL16:
 223 0000 38B5     		push	{r3, r4, r5, lr}
 224              		.cfi_def_cfa_offset 16
 225              		.cfi_offset 3, -16
 226              		.cfi_offset 4, -12
 227              		.cfi_offset 5, -8
 228              		.cfi_offset 14, -4
 229 0002 0446     		mov	r4, r0
 230 0004 0D46     		mov	r5, r1
 231              	.LVL17:
 232              	.L10:
 224:lib/chibios/os/hal/src/hal_buffers.c **** 
 225:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 226:lib/chibios/os/hal/src/hal_buffers.c **** 
 227:lib/chibios/os/hal/src/hal_buffers.c ****   while (ibqIsEmptyI(ibqp)) {
 233              		.loc 1 227 0
 234 0006 E368     		ldr	r3, [r4, #12]
 235 0008 3BB1     		cbz	r3, .L12
 236              	.LVL18:
 237              	.LBB289:
 238              	.LBB290:
 228:lib/chibios/os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 229:lib/chibios/os/hal/src/hal_buffers.c ****       return MSG_RESET;
 230:lib/chibios/os/hal/src/hal_buffers.c ****     }
 231:lib/chibios/os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 232:lib/chibios/os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 233:lib/chibios/os/hal/src/hal_buffers.c ****        return msg;
 234:lib/chibios/os/hal/src/hal_buffers.c ****     }
 235:lib/chibios/os/hal/src/hal_buffers.c ****   }
 236:lib/chibios/os/hal/src/hal_buffers.c **** 
 237:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 238:lib/chibios/os/hal/src/hal_buffers.c **** 
 239:lib/chibios/os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 240:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 239              		.loc 1 240 0
 240 000a 6269     		ldr	r2, [r4, #20]
 241 000c 131D     		adds	r3, r2, #4
 241:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 242              		.loc 1 241 0
 243 000e 1268     		ldr	r2, [r2]
 240:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 244              		.loc 1 240 0
 245 0010 A362     		str	r3, [r4, #40]
 246              		.loc 1 241 0
 247 0012 1344     		add	r3, r3, r2
 248 0014 E362     		str	r3, [r4, #44]
 249              	.LVL19:
 250 0016 0020     		movs	r0, #0
 251 0018 07E0     		b	.L9
 252              	.L12:
 253              	.LBE290:
 254              	.LBE289:
 255              	.LBB291:
 228:lib/chibios/os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 256              		.loc 1 228 0
 257 001a 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 258 001c 33B9     		cbnz	r3, .L13
 259              	.LVL20:
 260              	.LBB292:
 261              	.LBB293:
 784:./lib/chibios/os/hal/osal/rt/osal.h **** }
 262              		.loc 3 784 0
 263 001e 2946     		mov	r1, r5
 264 0020 2046     		mov	r0, r4
 265 0022 FFF7FEFF 		bl	chThdEnqueueTimeoutS
 266              	.LVL21:
 267              	.LBE293:
 268              	.LBE292:
 232:lib/chibios/os/hal/src/hal_buffers.c ****        return msg;
 269              		.loc 1 232 0
 270 0026 0028     		cmp	r0, #0
 271 0028 EDDA     		bge	.L10
 272              	.L9:
 273              	.LBE291:
 242:lib/chibios/os/hal/src/hal_buffers.c **** 
 243:lib/chibios/os/hal/src/hal_buffers.c ****   return MSG_OK;
 244:lib/chibios/os/hal/src/hal_buffers.c **** }
 274              		.loc 1 244 0
 275 002a 38BD     		pop	{r3, r4, r5, pc}
 276              	.LVL22:
 277              	.L13:
 278              	.LBB294:
 229:lib/chibios/os/hal/src/hal_buffers.c ****     }
 279              		.loc 1 229 0
 280 002c 6FF00100 		mvn	r0, #1
 281 0030 FBE7     		b	.L9
 282              	.LBE294:
 283              		.cfi_endproc
 284              	.LFE284:
 286              		.section	.text.ibqGetFullBufferTimeout,"ax",%progbits
 287              		.align	1
 288              		.global	ibqGetFullBufferTimeout
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu softvfp
 294              	ibqGetFullBufferTimeout:
 295              	.LFB283:
 191:lib/chibios/os/hal/src/hal_buffers.c ****   msg_t msg;
 296              		.loc 1 191 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300              	.LVL23:
 301 0000 08B5     		push	{r3, lr}
 302              		.cfi_def_cfa_offset 8
 303              		.cfi_offset 3, -8
 304              		.cfi_offset 14, -4
 305              	.LBB295:
 306              	.LBB296:
 307              	.LBB297:
 308              	.LBB298:
 309              	.LBB299:
 310              		.file 4 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @version  V4.30
   5:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
   9:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    All rights reserved.
  10:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      specific prior written permission.
  20:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    *
  21:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  35:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  38:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #endif
  45:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  46:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  47:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   @{
  51:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  52:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  53:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  54:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  58:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  60:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  62:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  63:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  64:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  65:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  69:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  71:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  73:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  74:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  75:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  76:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Control Register value
  79:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  80:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  82:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
  83:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  84:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
  86:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  87:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  88:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  89:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  90:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  94:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  96:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  98:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  99:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 100:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 101:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 105:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 107:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 108:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 109:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 111:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 112:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 113:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 114:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 115:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               APSR Register value
 118:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 119:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 121:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 122:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 123:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 125:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 126:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 127:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 128:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 129:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 132:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 134:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 136:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 137:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 138:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 140:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 141:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 142:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 143:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 144:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               PSP Register value
 147:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 148:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 150:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 151:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 154:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 155:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 156:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 157:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 158:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 162:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 164:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 166:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 167:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 168:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 169:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               MSP Register value
 172:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 173:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 175:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 176:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 177:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 179:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 180:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 181:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 182:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 183:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 188:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 190:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 192:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 193:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 194:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 195:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 199:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 201:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 202:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 203:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 205:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 206:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 207:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 208:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 209:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 213:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 215:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 217:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 218:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 219:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 221:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 222:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 226:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 228:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 230:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 231:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 232:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 233:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 237:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 239:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 241:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 243:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 244:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 248:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 250:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 251:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 252:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 254:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 255:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 257:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 311              		.loc 4 264 0
 312 0002 2023     		movs	r3, #32
 313              		.syntax unified
 314              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 315 0004 83F31188 		MSR basepri, r3
 316              	@ 0 "" 2
 317              	.LVL24:
 318              		.thumb
 319              		.syntax unified
 320              	.LBE299:
 321              	.LBE298:
 322              	.LBE297:
 323              	.LBE296:
 324              	.LBE295:
 195:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 325              		.loc 1 195 0
 326 0008 FFF7FEFF 		bl	ibqGetFullBufferTimeoutS
 327              	.LVL25:
 328              	.LBB300:
 329              	.LBB301:
 330              	.LBB302:
 331              	.LBB303:
 332              	.LBB304:
 333              	.LBB305:
 334              		.loc 4 264 0
 335 000c 0023     		movs	r3, #0
 336              		.syntax unified
 337              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 338 000e 83F31188 		MSR basepri, r3
 339              	@ 0 "" 2
 340              	.LVL26:
 341              		.thumb
 342              		.syntax unified
 343              	.LBE305:
 344              	.LBE304:
 345              	.LBE303:
 346              	.LBE302:
 347              	.LBE301:
 348              	.LBE300:
 199:lib/chibios/os/hal/src/hal_buffers.c **** 
 349              		.loc 1 199 0
 350 0012 08BD     		pop	{r3, pc}
 351              		.cfi_endproc
 352              	.LFE283:
 354              		.section	.text.ibqReleaseEmptyBufferS,"ax",%progbits
 355              		.align	1
 356              		.global	ibqReleaseEmptyBufferS
 357              		.syntax unified
 358              		.thumb
 359              		.thumb_func
 360              		.fpu softvfp
 362              	ibqReleaseEmptyBufferS:
 363              	.LFB286:
 245:lib/chibios/os/hal/src/hal_buffers.c **** 
 246:lib/chibios/os/hal/src/hal_buffers.c **** /**
 247:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Releases the buffer back in the queue.
 248:lib/chibios/os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 249:lib/chibios/os/hal/src/hal_buffers.c ****  *
 250:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 251:lib/chibios/os/hal/src/hal_buffers.c ****  *
 252:lib/chibios/os/hal/src/hal_buffers.c ****  * @api
 253:lib/chibios/os/hal/src/hal_buffers.c ****  */
 254:lib/chibios/os/hal/src/hal_buffers.c **** void ibqReleaseEmptyBuffer(input_buffers_queue_t *ibqp) {
 255:lib/chibios/os/hal/src/hal_buffers.c **** 
 256:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysLock();
 257:lib/chibios/os/hal/src/hal_buffers.c ****   ibqReleaseEmptyBufferS(ibqp);
 258:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 259:lib/chibios/os/hal/src/hal_buffers.c **** }
 260:lib/chibios/os/hal/src/hal_buffers.c **** 
 261:lib/chibios/os/hal/src/hal_buffers.c ****   /**
 262:lib/chibios/os/hal/src/hal_buffers.c ****    * @brief   Releases the buffer back in the queue.
 263:lib/chibios/os/hal/src/hal_buffers.c ****    * @note    The object callback is called after releasing the buffer.
 264:lib/chibios/os/hal/src/hal_buffers.c ****    *
 265:lib/chibios/os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 266:lib/chibios/os/hal/src/hal_buffers.c ****    *
 267:lib/chibios/os/hal/src/hal_buffers.c ****    * @sclass
 268:lib/chibios/os/hal/src/hal_buffers.c ****    */
 269:lib/chibios/os/hal/src/hal_buffers.c ****   void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 364              		.loc 1 269 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 0
 367              		@ frame_needed = 0, uses_anonymous_args = 0
 368              		@ link register save eliminated.
 369              	.LVL27:
 270:lib/chibios/os/hal/src/hal_buffers.c **** 
 271:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 272:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 273:lib/chibios/os/hal/src/hal_buffers.c **** 
 274:lib/chibios/os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 275:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->bcounter--;
 370              		.loc 1 275 0
 371 0000 C368     		ldr	r3, [r0, #12]
 276:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 372              		.loc 1 276 0
 373 0002 C269     		ldr	r2, [r0, #28]
 275:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 374              		.loc 1 275 0
 375 0004 013B     		subs	r3, r3, #1
 376 0006 C360     		str	r3, [r0, #12]
 377              		.loc 1 276 0
 378 0008 4369     		ldr	r3, [r0, #20]
 379 000a 1344     		add	r3, r3, r2
 277:lib/chibios/os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 380              		.loc 1 277 0
 381 000c 8269     		ldr	r2, [r0, #24]
 276:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 382              		.loc 1 276 0
 383 000e 4361     		str	r3, [r0, #20]
 384              		.loc 1 277 0
 385 0010 9342     		cmp	r3, r2
 278:lib/chibios/os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 386              		.loc 1 278 0
 387 0012 24BF     		itt	cs
 388 0014 436A     		ldrcs	r3, [r0, #36]
 389 0016 4361     		strcs	r3, [r0, #20]
 279:lib/chibios/os/hal/src/hal_buffers.c ****   }
 280:lib/chibios/os/hal/src/hal_buffers.c **** 
 281:lib/chibios/os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 282:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->ptr = NULL;
 390              		.loc 1 282 0
 391 0018 0023     		movs	r3, #0
 392 001a 8362     		str	r3, [r0, #40]
 283:lib/chibios/os/hal/src/hal_buffers.c **** 
 284:lib/chibios/os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 285:lib/chibios/os/hal/src/hal_buffers.c ****   if (ibqp->notify != NULL) {
 393              		.loc 1 285 0
 394 001c 036B     		ldr	r3, [r0, #48]
 395 001e 03B1     		cbz	r3, .L15
 286:lib/chibios/os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 396              		.loc 1 286 0
 397 0020 1847     		bx	r3	@ indirect register sibling call
 398              	.LVL28:
 399              	.L15:
 287:lib/chibios/os/hal/src/hal_buffers.c ****   }
 288:lib/chibios/os/hal/src/hal_buffers.c **** }
 400              		.loc 1 288 0
 401 0022 7047     		bx	lr
 402              		.cfi_endproc
 403              	.LFE286:
 405              		.section	.text.ibqReleaseEmptyBuffer,"ax",%progbits
 406              		.align	1
 407              		.global	ibqReleaseEmptyBuffer
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 411              		.fpu softvfp
 413              	ibqReleaseEmptyBuffer:
 414              	.LFB285:
 254:lib/chibios/os/hal/src/hal_buffers.c **** 
 415              		.loc 1 254 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 0, uses_anonymous_args = 0
 419              	.LVL29:
 420 0000 08B5     		push	{r3, lr}
 421              		.cfi_def_cfa_offset 8
 422              		.cfi_offset 3, -8
 423              		.cfi_offset 14, -4
 424              	.LBB306:
 425              	.LBB307:
 426              	.LBB308:
 427              	.LBB309:
 428              	.LBB310:
 429              		.loc 4 264 0
 430 0002 2023     		movs	r3, #32
 431              		.syntax unified
 432              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 433 0004 83F31188 		MSR basepri, r3
 434              	@ 0 "" 2
 435              	.LVL30:
 436              		.thumb
 437              		.syntax unified
 438              	.LBE310:
 439              	.LBE309:
 440              	.LBE308:
 441              	.LBE307:
 442              	.LBE306:
 257:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 443              		.loc 1 257 0
 444 0008 FFF7FEFF 		bl	ibqReleaseEmptyBufferS
 445              	.LVL31:
 446              	.LBB311:
 447              	.LBB312:
 448              	.LBB313:
 449              	.LBB314:
 450              	.LBB315:
 451              	.LBB316:
 452              		.loc 4 264 0
 453 000c 0023     		movs	r3, #0
 454              		.syntax unified
 455              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 456 000e 83F31188 		MSR basepri, r3
 457              	@ 0 "" 2
 458              	.LVL32:
 459              		.thumb
 460              		.syntax unified
 461              	.LBE316:
 462              	.LBE315:
 463              	.LBE314:
 464              	.LBE313:
 465              	.LBE312:
 466              	.LBE311:
 259:lib/chibios/os/hal/src/hal_buffers.c **** 
 467              		.loc 1 259 0
 468 0012 08BD     		pop	{r3, pc}
 469              		.cfi_endproc
 470              	.LFE285:
 472              		.section	.text.ibqGetTimeout,"ax",%progbits
 473              		.align	1
 474              		.global	ibqGetTimeout
 475              		.syntax unified
 476              		.thumb
 477              		.thumb_func
 478              		.fpu softvfp
 480              	ibqGetTimeout:
 481              	.LFB287:
 289:lib/chibios/os/hal/src/hal_buffers.c **** 
 290:lib/chibios/os/hal/src/hal_buffers.c **** /**
 291:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 292:lib/chibios/os/hal/src/hal_buffers.c ****  * @details This function reads a byte value from an input queue. If
 293:lib/chibios/os/hal/src/hal_buffers.c ****  *          the queue is empty then the calling thread is suspended until a
 294:lib/chibios/os/hal/src/hal_buffers.c ****  *          new buffer arrives in the queue or a timeout occurs.
 295:lib/chibios/os/hal/src/hal_buffers.c ****  *
 296:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 297:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 298:lib/chibios/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 299:lib/chibios/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 300:lib/chibios/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 301:lib/chibios/os/hal/src/hal_buffers.c ****  *                      .
 302:lib/chibios/os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 303:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 304:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 305:lib/chibios/os/hal/src/hal_buffers.c ****  *                      suspended state.
 306:lib/chibios/os/hal/src/hal_buffers.c ****  *
 307:lib/chibios/os/hal/src/hal_buffers.c ****  * @api
 308:lib/chibios/os/hal/src/hal_buffers.c ****  */
 309:lib/chibios/os/hal/src/hal_buffers.c **** msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, systime_t timeout) {
 482              		.loc 1 309 0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 0
 485              		@ frame_needed = 0, uses_anonymous_args = 0
 486              	.LVL33:
 487 0000 70B5     		push	{r4, r5, r6, lr}
 488              		.cfi_def_cfa_offset 16
 489              		.cfi_offset 4, -16
 490              		.cfi_offset 5, -12
 491              		.cfi_offset 6, -8
 492              		.cfi_offset 14, -4
 493              	.LBB317:
 494              	.LBB318:
 495              	.LBB319:
 496              	.LBB320:
 497              	.LBB321:
 498              		.loc 4 264 0
 499 0002 2023     		movs	r3, #32
 500              	.LBE321:
 501              	.LBE320:
 502              	.LBE319:
 503              	.LBE318:
 504              	.LBE317:
 505              		.loc 1 309 0
 506 0004 0446     		mov	r4, r0
 507              	.LBB326:
 508              	.LBB325:
 509              	.LBB324:
 510              	.LBB323:
 511              	.LBB322:
 512              		.loc 4 264 0
 513              		.syntax unified
 514              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 515 0006 83F31188 		MSR basepri, r3
 516              	@ 0 "" 2
 517              	.LVL34:
 518              		.thumb
 519              		.syntax unified
 520              	.LBE322:
 521              	.LBE323:
 522              	.LBE324:
 523              	.LBE325:
 524              	.LBE326:
 310:lib/chibios/os/hal/src/hal_buffers.c ****   msg_t msg;
 311:lib/chibios/os/hal/src/hal_buffers.c **** 
 312:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysLock();
 313:lib/chibios/os/hal/src/hal_buffers.c **** 
 314:lib/chibios/os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 315:lib/chibios/os/hal/src/hal_buffers.c ****   if (ibqp->ptr == NULL) {
 525              		.loc 1 315 0
 526 000a 866A     		ldr	r6, [r0, #40]
 527 000c 3EB9     		cbnz	r6, .L20
 316:lib/chibios/os/hal/src/hal_buffers.c ****     msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 528              		.loc 1 316 0
 529 000e FFF7FEFF 		bl	ibqGetFullBufferTimeoutS
 530              	.LVL35:
 317:lib/chibios/os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 531              		.loc 1 317 0
 532 0012 0546     		mov	r5, r0
 533 0014 18B1     		cbz	r0, .L20
 534              	.LVL36:
 535              	.LBB327:
 536              	.LBB328:
 537              	.LBB329:
 538              	.LBB330:
 539              	.LBB331:
 540              	.LBB332:
 541              		.loc 4 264 0
 542              		.syntax unified
 543              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 544 0016 86F31188 		MSR basepri, r6
 545              	@ 0 "" 2
 546              	.LVL37:
 547              		.thumb
 548              		.syntax unified
 549              	.L19:
 550              	.LBE332:
 551              	.LBE331:
 552              	.LBE330:
 553              	.LBE329:
 554              	.LBE328:
 555              	.LBE327:
 318:lib/chibios/os/hal/src/hal_buffers.c ****       osalSysUnlock();
 319:lib/chibios/os/hal/src/hal_buffers.c ****       return msg;
 320:lib/chibios/os/hal/src/hal_buffers.c ****     }
 321:lib/chibios/os/hal/src/hal_buffers.c ****   }
 322:lib/chibios/os/hal/src/hal_buffers.c **** 
 323:lib/chibios/os/hal/src/hal_buffers.c ****   /* Next byte from the buffer.*/
 324:lib/chibios/os/hal/src/hal_buffers.c ****   msg = (msg_t)*ibqp->ptr;
 325:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->ptr++;
 326:lib/chibios/os/hal/src/hal_buffers.c **** 
 327:lib/chibios/os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully read then it is returned as
 328:lib/chibios/os/hal/src/hal_buffers.c ****      empty in the queue.*/
 329:lib/chibios/os/hal/src/hal_buffers.c ****   if (ibqp->ptr >= ibqp->top) {
 330:lib/chibios/os/hal/src/hal_buffers.c ****     ibqReleaseEmptyBufferS(ibqp);
 331:lib/chibios/os/hal/src/hal_buffers.c ****   }
 332:lib/chibios/os/hal/src/hal_buffers.c **** 
 333:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 334:lib/chibios/os/hal/src/hal_buffers.c ****   return msg;
 335:lib/chibios/os/hal/src/hal_buffers.c **** }
 556              		.loc 1 335 0
 557 001a 2846     		mov	r0, r5
 558 001c 70BD     		pop	{r4, r5, r6, pc}
 559              	.LVL38:
 560              	.L20:
 324:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->ptr++;
 561              		.loc 1 324 0
 562 001e A36A     		ldr	r3, [r4, #40]
 329:lib/chibios/os/hal/src/hal_buffers.c ****     ibqReleaseEmptyBufferS(ibqp);
 563              		.loc 1 329 0
 564 0020 E26A     		ldr	r2, [r4, #44]
 324:lib/chibios/os/hal/src/hal_buffers.c ****   ibqp->ptr++;
 565              		.loc 1 324 0
 566 0022 13F8015B 		ldrb	r5, [r3], #1	@ zero_extendqisi2
 567              	.LVL39:
 325:lib/chibios/os/hal/src/hal_buffers.c **** 
 568              		.loc 1 325 0
 569 0026 A362     		str	r3, [r4, #40]
 329:lib/chibios/os/hal/src/hal_buffers.c ****     ibqReleaseEmptyBufferS(ibqp);
 570              		.loc 1 329 0
 571 0028 9342     		cmp	r3, r2
 572 002a 02D3     		bcc	.L22
 330:lib/chibios/os/hal/src/hal_buffers.c ****   }
 573              		.loc 1 330 0
 574 002c 2046     		mov	r0, r4
 575 002e FFF7FEFF 		bl	ibqReleaseEmptyBufferS
 576              	.LVL40:
 577              	.L22:
 578              	.LBB333:
 579              	.LBB334:
 580              	.LBB335:
 581              	.LBB336:
 582              	.LBB337:
 583              	.LBB338:
 584              		.loc 4 264 0
 585 0032 0023     		movs	r3, #0
 586              		.syntax unified
 587              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 588 0034 83F31188 		MSR basepri, r3
 589              	@ 0 "" 2
 590              	.LVL41:
 591              		.thumb
 592              		.syntax unified
 593              	.LBE338:
 594              	.LBE337:
 595              	.LBE336:
 596              	.LBE335:
 597              	.LBE334:
 598              	.LBE333:
 334:lib/chibios/os/hal/src/hal_buffers.c **** }
 599              		.loc 1 334 0
 600 0038 EFE7     		b	.L19
 601              		.cfi_endproc
 602              	.LFE287:
 604              		.section	.text.ibqReadTimeout,"ax",%progbits
 605              		.align	1
 606              		.global	ibqReadTimeout
 607              		.syntax unified
 608              		.thumb
 609              		.thumb_func
 610              		.fpu softvfp
 612              	ibqReadTimeout:
 613              	.LFB288:
 336:lib/chibios/os/hal/src/hal_buffers.c **** 
 337:lib/chibios/os/hal/src/hal_buffers.c **** /**
 338:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 339:lib/chibios/os/hal/src/hal_buffers.c ****  * @details The function reads data from an input queue into a buffer.
 340:lib/chibios/os/hal/src/hal_buffers.c ****  *          The operation completes when the specified amount of data has been
 341:lib/chibios/os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 342:lib/chibios/os/hal/src/hal_buffers.c ****  *          been reset.
 343:lib/chibios/os/hal/src/hal_buffers.c ****  *
 344:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 345:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[out] bp       pointer to the data buffer
 346:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 347:lib/chibios/os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 348:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 349:lib/chibios/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 350:lib/chibios/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 351:lib/chibios/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 352:lib/chibios/os/hal/src/hal_buffers.c ****  *                      .
 353:lib/chibios/os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 354:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 355:lib/chibios/os/hal/src/hal_buffers.c ****  *
 356:lib/chibios/os/hal/src/hal_buffers.c ****  * @api
 357:lib/chibios/os/hal/src/hal_buffers.c ****  */
 358:lib/chibios/os/hal/src/hal_buffers.c **** size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
 359:lib/chibios/os/hal/src/hal_buffers.c ****                       size_t n, systime_t timeout) {
 614              		.loc 1 359 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 8
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618              	.LVL42:
 619 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 620              		.cfi_def_cfa_offset 48
 621              		.cfi_offset 4, -36
 622              		.cfi_offset 5, -32
 623              		.cfi_offset 6, -28
 624              		.cfi_offset 7, -24
 625              		.cfi_offset 8, -20
 626              		.cfi_offset 9, -16
 627              		.cfi_offset 10, -12
 628              		.cfi_offset 11, -8
 629              		.cfi_offset 14, -4
 630              		.loc 1 359 0
 631 0004 1F46     		mov	r7, r3
 632 0006 0446     		mov	r4, r0
 633 0008 0E46     		mov	r6, r1
 634 000a 9146     		mov	r9, r2
 635              	.LBB339:
 636              	.LBB340:
 637              	.LBB341:
 638              	.LBB342:
 639              	.LBB343:
 640              		.loc 4 264 0
 641 000c 2023     		movs	r3, #32
 642              	.LVL43:
 643              		.syntax unified
 644              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 645 000e 83F31188 		MSR basepri, r3
 646              	@ 0 "" 2
 647              	.LVL44:
 648              		.thumb
 649              		.syntax unified
 650              	.LBE343:
 651              	.LBE342:
 652              	.LBE341:
 653              	.LBE340:
 654              	.LBE339:
 655              	.LBB344:
 656              	.LBB345:
 657              	.LBB346:
 658              	.LBB347:
 659              	.LBB348:
 660              		.file 5 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h"
   1:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*
   2:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
   4:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     you may not use this file except in compliance with the License.
   6:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     You may obtain a copy of the License at
   7:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
   8:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  10:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     Unless required by applicable law or agreed to in writing, software
  11:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     See the License for the specific language governing permissions and
  14:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     limitations under the License.
  15:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** */
  16:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  17:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  18:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @file    TIMv1/hal_st_lld.h
  19:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   ST Driver subsystem low level driver header.
  20:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @details This header is designed to be include-able without having to
  21:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *          include other files from the HAL.
  22:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *
  23:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @addtogroup ST
  24:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @{
  25:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  26:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  27:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #ifndef HAL_ST_LLD_H
  28:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define HAL_ST_LLD_H
  29:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  30:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #include "mcuconf.h"
  31:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #include "stm32_registry.h"
  32:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #include "stm32_tim.h"
  33:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  34:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  35:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver constants.                                                         */
  36:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  37:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  38:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  39:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver pre-compile time settings.                                         */
  40:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  41:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  42:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  43:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @name    Configuration options
  44:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @{
  45:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  46:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  47:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   SysTick timer IRQ priority.
  48:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  49:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !defined(STM32_ST_IRQ_PRIORITY) || defined(__DOXYGEN__)
  50:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_IRQ_PRIORITY               8
  51:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  52:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  53:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  54:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   TIMx unit (by number) to be used for free running operations.
  55:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @note    You must select a 32 bits timer if a 32 bits @p systick_t type
  56:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *          is required.
  57:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @note    Timers 2, 3, 4 and 5 are supported.
  58:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  59:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !defined(STM32_ST_USE_TIMER) || defined(__DOXYGEN__)
  60:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_USE_TIMER                  2
  61:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  62:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /** @} */
  63:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  64:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  65:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Derived constants and error checks.                                       */
  66:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  67:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  68:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if STM32_ST_USE_TIMER == 2
  69:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM2
  70:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM2 not present"
  71:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  72:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM2
  73:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  74:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 3
  75:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM3
  76:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM3 not present"
  77:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  78:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM3
  79:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  80:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 4
  81:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM4
  82:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM4 not present"
  83:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  84:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM4
  85:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  86:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 5
  87:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM5
  88:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM5 not present"
  89:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  90:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM5
  91:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  92:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 21
  93:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM21
  94:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM21 not present"
  95:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  96:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM21
  97:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  98:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 22
  99:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM22
 100:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM22 not present"
 101:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 102:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM22
 103:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 104:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #else
 105:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "STM32_ST_USE_TIMER specifies an unsupported timer"
 106:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 107:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 108:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 109:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver data structures and types.                                         */
 110:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 111:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 112:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 113:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver macros.                                                            */
 114:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 115:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 116:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 117:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* External declarations.                                                    */
 118:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 119:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 120:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
 121:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** extern "C" {
 122:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 123:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****   void st_lld_init(void);
 124:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
 125:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** }
 126:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 127:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 128:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 129:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver inline functions.                                                  */
 130:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 131:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 132:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
 133:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   Returns the time counter value.
 134:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *
 135:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @return              The counter value.
 136:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *
 137:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @notapi
 138:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
 139:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** static inline systime_t st_lld_get_counter(void) {
 140:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 141:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****   return (systime_t)STM32_ST_TIM->CNT;
 661              		.loc 5 141 0
 662 0012 4FF08048 		mov	r8, #1073741824
 663              	.LBE348:
 664              	.LBE347:
 665              	.LBE346:
 666              	.LBE345:
 667              	.LBE344:
 360:lib/chibios/os/hal/src/hal_buffers.c ****   size_t r = 0;
 668              		.loc 1 360 0
 669 0016 0025     		movs	r5, #0
 670              	.LBB353:
 671              	.LBB352:
 672              	.LBB351:
 673              	.LBB350:
 674              	.LBB349:
 675              		.loc 5 141 0
 676 0018 D8F82430 		ldr	r3, [r8, #36]
 677              	.LBE349:
 678              	.LBE350:
 679              	.LBE351:
 680              	.LBE352:
 681              	.LBE353:
 361:lib/chibios/os/hal/src/hal_buffers.c ****   systime_t deadline;
 362:lib/chibios/os/hal/src/hal_buffers.c **** 
 363:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 364:lib/chibios/os/hal/src/hal_buffers.c **** 
 365:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysLock();
 366:lib/chibios/os/hal/src/hal_buffers.c **** 
 367:lib/chibios/os/hal/src/hal_buffers.c ****   /* Time window for the whole operation.*/
 368:lib/chibios/os/hal/src/hal_buffers.c ****   deadline = osalOsGetSystemTimeX() + timeout;
 682              		.loc 1 368 0
 683 001c FB18     		adds	r3, r7, r3
 684 001e 0093     		str	r3, [sp]
 685              	.LVL45:
 686              	.LBB354:
 687              	.LBB355:
 369:lib/chibios/os/hal/src/hal_buffers.c **** 
 370:lib/chibios/os/hal/src/hal_buffers.c ****   while (true) {
 371:lib/chibios/os/hal/src/hal_buffers.c ****     size_t size;
 372:lib/chibios/os/hal/src/hal_buffers.c **** 
 373:lib/chibios/os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 374:lib/chibios/os/hal/src/hal_buffers.c ****     if (ibqp->ptr == NULL) {
 375:lib/chibios/os/hal/src/hal_buffers.c ****       msg_t msg;
 376:lib/chibios/os/hal/src/hal_buffers.c **** 
 377:lib/chibios/os/hal/src/hal_buffers.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 378:lib/chibios/os/hal/src/hal_buffers.c ****          deadline.*/
 379:lib/chibios/os/hal/src/hal_buffers.c ****       if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 688              		.loc 1 379 0
 689 0020 07F1FF3A 		add	r10, r7, #-1
 690              	.LBE355:
 691              	.LBB375:
 692              	.LBB376:
 693              	.LBB377:
 694              	.LBB378:
 695              	.LBB379:
 696              	.LBB380:
 697              		.loc 4 264 0
 698 0024 AB46     		mov	fp, r5
 699              	.LVL46:
 700              	.L36:
 701              	.LBE380:
 702              	.LBE379:
 703              	.LBE378:
 704              	.LBE377:
 705              	.LBE376:
 706              	.LBE375:
 374:lib/chibios/os/hal/src/hal_buffers.c ****       msg_t msg;
 707              		.loc 1 374 0
 708 0026 A36A     		ldr	r3, [r4, #40]
 709 0028 ABB9     		cbnz	r3, .L27
 710              	.LBB386:
 711              		.loc 1 379 0
 712 002a 1AF1030F 		cmn	r10, #3
 713 002e 06D9     		bls	.L28
 380:lib/chibios/os/hal/src/hal_buffers.c ****         msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 714              		.loc 1 380 0
 715 0030 3946     		mov	r1, r7
 716              	.L30:
 717              	.LBB356:
 381:lib/chibios/os/hal/src/hal_buffers.c ****       }
 382:lib/chibios/os/hal/src/hal_buffers.c ****       else {
 383:lib/chibios/os/hal/src/hal_buffers.c ****         systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 384:lib/chibios/os/hal/src/hal_buffers.c **** 
 385:lib/chibios/os/hal/src/hal_buffers.c ****         /* Handling the case where the system time went past the deadline,
 386:lib/chibios/os/hal/src/hal_buffers.c ****            in this case next becomes a very high number because the system
 387:lib/chibios/os/hal/src/hal_buffers.c ****            time is an unsigned type.*/
 388:lib/chibios/os/hal/src/hal_buffers.c ****         if (next_timeout > timeout) {
 389:lib/chibios/os/hal/src/hal_buffers.c ****           osalSysUnlock();
 390:lib/chibios/os/hal/src/hal_buffers.c ****           return r;
 391:lib/chibios/os/hal/src/hal_buffers.c ****         }
 392:lib/chibios/os/hal/src/hal_buffers.c ****         msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 718              		.loc 1 392 0
 719 0032 2046     		mov	r0, r4
 720 0034 FFF7FEFF 		bl	ibqGetFullBufferTimeoutS
 721              	.LVL47:
 722              	.LBE356:
 393:lib/chibios/os/hal/src/hal_buffers.c ****       }
 394:lib/chibios/os/hal/src/hal_buffers.c **** 
 395:lib/chibios/os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 396:lib/chibios/os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 723              		.loc 1 396 0
 724 0038 68B1     		cbz	r0, .L27
 725              	.LVL48:
 726              	.LBB362:
 727              	.LBB363:
 728              	.LBB364:
 729              	.LBB365:
 730              	.LBB366:
 731              	.LBB367:
 732              		.loc 4 264 0
 733 003a 0023     		movs	r3, #0
 734 003c 05E0     		b	.L41
 735              	.LVL49:
 736              	.L28:
 737              	.LBE367:
 738              	.LBE366:
 739              	.LBE365:
 740              	.LBE364:
 741              	.LBE363:
 742              	.LBE362:
 743              	.LBB373:
 744              	.LBB357:
 745              	.LBB358:
 746              	.LBB359:
 747              	.LBB360:
 748              	.LBB361:
 749              		.loc 5 141 0
 750 003e D8F82410 		ldr	r1, [r8, #36]
 751              	.LBE361:
 752              	.LBE360:
 753              	.LBE359:
 754              	.LBE358:
 755              	.LBE357:
 383:lib/chibios/os/hal/src/hal_buffers.c **** 
 756              		.loc 1 383 0
 757 0042 009A     		ldr	r2, [sp]
 758 0044 511A     		subs	r1, r2, r1
 759              	.LVL50:
 388:lib/chibios/os/hal/src/hal_buffers.c ****           osalSysUnlock();
 760              		.loc 1 388 0
 761 0046 8F42     		cmp	r7, r1
 762 0048 F3D2     		bcs	.L30
 763              	.LVL51:
 764              	.L41:
 765              	.LBE373:
 766              	.LBB374:
 767              	.LBB372:
 768              	.LBB371:
 769              	.LBB370:
 770              	.LBB369:
 771              	.LBB368:
 772              		.loc 4 264 0
 773              		.syntax unified
 774              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 775 004a 83F31188 		MSR basepri, r3
 776              	@ 0 "" 2
 777              		.thumb
 778              		.syntax unified
 779              	.L26:
 780              	.LBE368:
 781              	.LBE369:
 782              	.LBE370:
 783              	.LBE371:
 784              	.LBE372:
 785              	.LBE374:
 786              	.LBE386:
 787              	.LBE354:
 397:lib/chibios/os/hal/src/hal_buffers.c ****         osalSysUnlock();
 398:lib/chibios/os/hal/src/hal_buffers.c ****         return r;
 399:lib/chibios/os/hal/src/hal_buffers.c ****       }
 400:lib/chibios/os/hal/src/hal_buffers.c ****     }
 401:lib/chibios/os/hal/src/hal_buffers.c **** 
 402:lib/chibios/os/hal/src/hal_buffers.c ****     /* Size of the data chunk present in the current buffer.*/
 403:lib/chibios/os/hal/src/hal_buffers.c ****     size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 404:lib/chibios/os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 405:lib/chibios/os/hal/src/hal_buffers.c ****       size = n - r;
 406:lib/chibios/os/hal/src/hal_buffers.c ****     }
 407:lib/chibios/os/hal/src/hal_buffers.c **** 
 408:lib/chibios/os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 409:lib/chibios/os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 410:lib/chibios/os/hal/src/hal_buffers.c ****     if (size > 64U) {
 411:lib/chibios/os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 412:lib/chibios/os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, 64U);
 413:lib/chibios/os/hal/src/hal_buffers.c ****       bp        += 64U;
 414:lib/chibios/os/hal/src/hal_buffers.c ****       ibqp->ptr += 64U;
 415:lib/chibios/os/hal/src/hal_buffers.c ****       r         += 64U;
 416:lib/chibios/os/hal/src/hal_buffers.c ****     }
 417:lib/chibios/os/hal/src/hal_buffers.c ****     else {
 418:lib/chibios/os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, size);
 419:lib/chibios/os/hal/src/hal_buffers.c ****       bp        += size;
 420:lib/chibios/os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 421:lib/chibios/os/hal/src/hal_buffers.c ****       r         += size;
 422:lib/chibios/os/hal/src/hal_buffers.c ****     }
 423:lib/chibios/os/hal/src/hal_buffers.c **** 
 424:lib/chibios/os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 425:lib/chibios/os/hal/src/hal_buffers.c ****     if (ibqp->ptr >= ibqp->top) {
 426:lib/chibios/os/hal/src/hal_buffers.c ****       ibqReleaseEmptyBufferS(ibqp);
 427:lib/chibios/os/hal/src/hal_buffers.c ****     }
 428:lib/chibios/os/hal/src/hal_buffers.c **** 
 429:lib/chibios/os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 430:lib/chibios/os/hal/src/hal_buffers.c ****     osalSysUnlock();
 431:lib/chibios/os/hal/src/hal_buffers.c ****     if (r >= n) {
 432:lib/chibios/os/hal/src/hal_buffers.c ****       return r;
 433:lib/chibios/os/hal/src/hal_buffers.c ****     }
 434:lib/chibios/os/hal/src/hal_buffers.c ****     osalSysLock();
 435:lib/chibios/os/hal/src/hal_buffers.c ****   }
 436:lib/chibios/os/hal/src/hal_buffers.c **** }
 788              		.loc 1 436 0
 789 004e 2846     		mov	r0, r5
 790 0050 03B0     		add	sp, sp, #12
 791              		.cfi_remember_state
 792              		.cfi_def_cfa_offset 36
 793              		@ sp needed
 794 0052 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 795              	.LVL52:
 796              	.L27:
 797              		.cfi_restore_state
 798              	.LBB393:
 403:lib/chibios/os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 799              		.loc 1 403 0
 800 0056 D4E90A13 		ldrd	r1, r3, [r4, #40]
 404:lib/chibios/os/hal/src/hal_buffers.c ****       size = n - r;
 801              		.loc 1 404 0
 802 005a A9EB0502 		sub	r2, r9, r5
 403:lib/chibios/os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 803              		.loc 1 403 0
 804 005e 5B1A     		subs	r3, r3, r1
 805              	.LVL53:
 806 0060 9342     		cmp	r3, r2
 807 0062 28BF     		it	cs
 808 0064 1346     		movcs	r3, r2
 809              	.LVL54:
 410:lib/chibios/os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 810              		.loc 1 410 0
 811 0066 402B     		cmp	r3, #64
 812 0068 1CD9     		bls	.L32
 412:lib/chibios/os/hal/src/hal_buffers.c ****       bp        += 64U;
 813              		.loc 1 412 0
 814 006a 3346     		mov	r3, r6
 815              	.LVL55:
 816 006c 01F14002 		add	r2, r1, #64
 817              	.LVL56:
 818              	.L33:
 819 0070 51F8040B 		ldr	r0, [r1], #4	@ unaligned
 820 0074 43F8040B 		str	r0, [r3], #4	@ unaligned
 821 0078 9142     		cmp	r1, r2
 822 007a F9D1     		bne	.L33
 414:lib/chibios/os/hal/src/hal_buffers.c ****       r         += 64U;
 823              		.loc 1 414 0
 824 007c A36A     		ldr	r3, [r4, #40]
 825 007e 4033     		adds	r3, r3, #64
 413:lib/chibios/os/hal/src/hal_buffers.c ****       ibqp->ptr += 64U;
 826              		.loc 1 413 0
 827 0080 4036     		adds	r6, r6, #64
 828              	.LVL57:
 414:lib/chibios/os/hal/src/hal_buffers.c ****       r         += 64U;
 829              		.loc 1 414 0
 830 0082 A362     		str	r3, [r4, #40]
 415:lib/chibios/os/hal/src/hal_buffers.c ****     }
 831              		.loc 1 415 0
 832 0084 4035     		adds	r5, r5, #64
 833              	.LVL58:
 834              	.L34:
 425:lib/chibios/os/hal/src/hal_buffers.c ****       ibqReleaseEmptyBufferS(ibqp);
 835              		.loc 1 425 0
 836 0086 D4E90A23 		ldrd	r2, r3, [r4, #40]
 837 008a 9A42     		cmp	r2, r3
 838 008c 02D3     		bcc	.L35
 426:lib/chibios/os/hal/src/hal_buffers.c ****     }
 839              		.loc 1 426 0
 840 008e 2046     		mov	r0, r4
 841 0090 FFF7FEFF 		bl	ibqReleaseEmptyBufferS
 842              	.LVL59:
 843              	.L35:
 844              	.LBB387:
 845              	.LBB385:
 846              	.LBB384:
 847              	.LBB383:
 848              	.LBB382:
 849              	.LBB381:
 850              		.loc 4 264 0
 851              		.syntax unified
 852              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 853 0094 8BF31188 		MSR basepri, fp
 854              	@ 0 "" 2
 855              	.LVL60:
 856              		.thumb
 857              		.syntax unified
 858              	.LBE381:
 859              	.LBE382:
 860              	.LBE383:
 861              	.LBE384:
 862              	.LBE385:
 863              	.LBE387:
 431:lib/chibios/os/hal/src/hal_buffers.c ****       return r;
 864              		.loc 1 431 0
 865 0098 4D45     		cmp	r5, r9
 866 009a D8D2     		bcs	.L26
 867              	.LVL61:
 868              	.LBB388:
 869              	.LBB389:
 870              	.LBB390:
 871              	.LBB391:
 872              	.LBB392:
 873              		.loc 4 264 0
 874 009c 2023     		movs	r3, #32
 875              		.syntax unified
 876              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 877 009e 83F31188 		MSR basepri, r3
 878              	@ 0 "" 2
 879              	.LVL62:
 880              		.thumb
 881              		.syntax unified
 882 00a2 C0E7     		b	.L36
 883              	.LVL63:
 884              	.L32:
 885              	.LBE392:
 886              	.LBE391:
 887              	.LBE390:
 888              	.LBE389:
 889              	.LBE388:
 418:lib/chibios/os/hal/src/hal_buffers.c ****       bp        += size;
 890              		.loc 1 418 0
 891 00a4 1A46     		mov	r2, r3
 892 00a6 3046     		mov	r0, r6
 893 00a8 0193     		str	r3, [sp, #4]
 894 00aa FFF7FEFF 		bl	memcpy
 895              	.LVL64:
 419:lib/chibios/os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 896              		.loc 1 419 0
 897 00ae 019B     		ldr	r3, [sp, #4]
 420:lib/chibios/os/hal/src/hal_buffers.c ****       r         += size;
 898              		.loc 1 420 0
 899 00b0 A26A     		ldr	r2, [r4, #40]
 900 00b2 1A44     		add	r2, r2, r3
 419:lib/chibios/os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 901              		.loc 1 419 0
 902 00b4 1E44     		add	r6, r6, r3
 903              	.LVL65:
 420:lib/chibios/os/hal/src/hal_buffers.c ****       r         += size;
 904              		.loc 1 420 0
 905 00b6 A262     		str	r2, [r4, #40]
 421:lib/chibios/os/hal/src/hal_buffers.c ****     }
 906              		.loc 1 421 0
 907 00b8 1D44     		add	r5, r5, r3
 908              	.LVL66:
 909 00ba E4E7     		b	.L34
 910              	.LBE393:
 911              		.cfi_endproc
 912              	.LFE288:
 914              		.section	.text.obqObjectInit,"ax",%progbits
 915              		.align	1
 916              		.global	obqObjectInit
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 920              		.fpu softvfp
 922              	obqObjectInit:
 923              	.LFB289:
 437:lib/chibios/os/hal/src/hal_buffers.c **** 
 438:lib/chibios/os/hal/src/hal_buffers.c **** /**
 439:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Initializes an output buffers queue object.
 440:lib/chibios/os/hal/src/hal_buffers.c ****  *
 441:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[out] obqp     pointer to the @p output_buffers_queue_t object
 442:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
 443:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
 444:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
 445:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
 446:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] onfy      callback called when a buffer is posted in the queue
 447:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
 448:lib/chibios/os/hal/src/hal_buffers.c ****  *
 449:lib/chibios/os/hal/src/hal_buffers.c ****  * @init
 450:lib/chibios/os/hal/src/hal_buffers.c ****  */
 451:lib/chibios/os/hal/src/hal_buffers.c **** void obqObjectInit(output_buffers_queue_t *obqp, bool suspended, uint8_t *bp,
 452:lib/chibios/os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t onfy, void *link) {
 924              		.loc 1 452 0
 925              		.cfi_startproc
 926              		@ args = 12, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 928              	.LVL67:
 929 0000 10B5     		push	{r4, lr}
 930              		.cfi_def_cfa_offset 8
 931              		.cfi_offset 4, -8
 932              		.cfi_offset 14, -4
 933              		.loc 1 452 0
 934 0002 029C     		ldr	r4, [sp, #8]
 453:lib/chibios/os/hal/src/hal_buffers.c **** 
 454:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));
 455:lib/chibios/os/hal/src/hal_buffers.c **** 
 456:lib/chibios/os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&obqp->waiting);
 457:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->suspended = suspended;
 935              		.loc 1 457 0
 936 0004 0172     		strb	r1, [r0, #8]
 458:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->bcounter  = n;
 459:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->brdptr    = bp;
 460:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->bwrptr    = bp;
 461:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 937              		.loc 1 461 0
 938 0006 0433     		adds	r3, r3, #4
 939              	.LVL68:
 940 0008 04FB0321 		mla	r1, r4, r3, r2
 941              	.LVL69:
 462:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->bsize     = size + sizeof (size_t);
 942              		.loc 1 462 0
 943 000c C0E90613 		strd	r1, r3, [r0, #24]
 463:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->bn        = n;
 464:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->buffers   = bp;
 465:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 944              		.loc 1 465 0
 945 0010 0023     		movs	r3, #0
 946              	.LVL70:
 466:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 947              		.loc 1 466 0
 948 0012 C0E90A33 		strd	r3, r3, [r0, #40]
 467:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->notify    = onfy;
 949              		.loc 1 467 0
 950 0016 039B     		ldr	r3, [sp, #12]
 951 0018 0363     		str	r3, [r0, #48]
 468:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->link      = link;
 952              		.loc 1 468 0
 953 001a 049B     		ldr	r3, [sp, #16]
 458:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->brdptr    = bp;
 954              		.loc 1 458 0
 955 001c C460     		str	r4, [r0, #12]
 956              	.LBB394:
 957              	.LBB395:
 958              	.LBB396:
 959              	.LBB397:
 960              		.loc 2 551 0
 961 001e C0E90000 		strd	r0, r0, [r0]
 962              	.LVL71:
 963              	.LBE397:
 964              	.LBE396:
 965              	.LBE395:
 966              	.LBE394:
 460:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 967              		.loc 1 460 0
 968 0022 C0E90422 		strd	r2, r2, [r0, #16]
 464:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 969              		.loc 1 464 0
 970 0026 C0E90842 		strd	r4, r2, [r0, #32]
 971              		.loc 1 468 0
 972 002a 4363     		str	r3, [r0, #52]
 469:lib/chibios/os/hal/src/hal_buffers.c **** }
 973              		.loc 1 469 0
 974 002c 10BD     		pop	{r4, pc}
 975              		.cfi_endproc
 976              	.LFE289:
 978              		.section	.text.obqResetI,"ax",%progbits
 979              		.align	1
 980              		.global	obqResetI
 981              		.syntax unified
 982              		.thumb
 983              		.thumb_func
 984              		.fpu softvfp
 986              	obqResetI:
 987              	.LFB290:
 470:lib/chibios/os/hal/src/hal_buffers.c **** 
 471:lib/chibios/os/hal/src/hal_buffers.c **** /**
 472:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Resets an output buffers queue.
 473:lib/chibios/os/hal/src/hal_buffers.c ****  * @details All the data in the output buffers queue is erased and lost, any
 474:lib/chibios/os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 475:lib/chibios/os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 476:lib/chibios/os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 477:lib/chibios/os/hal/src/hal_buffers.c ****  *
 478:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 479:lib/chibios/os/hal/src/hal_buffers.c ****  *
 480:lib/chibios/os/hal/src/hal_buffers.c ****  * @iclass
 481:lib/chibios/os/hal/src/hal_buffers.c ****  */
 482:lib/chibios/os/hal/src/hal_buffers.c **** void obqResetI(output_buffers_queue_t *obqp) {
 988              		.loc 1 482 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 0
 991              		@ frame_needed = 0, uses_anonymous_args = 0
 992              		@ link register save eliminated.
 993              	.LVL72:
 483:lib/chibios/os/hal/src/hal_buffers.c **** 
 484:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 485:lib/chibios/os/hal/src/hal_buffers.c **** 
 486:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->bcounter  = bqSizeX(obqp);
 994              		.loc 1 486 0
 995 0000 026A     		ldr	r2, [r0, #32]
 996 0002 C260     		str	r2, [r0, #12]
 487:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->brdptr    = obqp->buffers;
 997              		.loc 1 487 0
 998 0004 426A     		ldr	r2, [r0, #36]
 488:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->bwrptr    = obqp->buffers;
 999              		.loc 1 488 0
 1000 0006 C0E90422 		strd	r2, r2, [r0, #16]
 489:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 1001              		.loc 1 489 0
 1002 000a 0022     		movs	r2, #0
 490:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 1003              		.loc 1 490 0
 1004 000c C0E90A22 		strd	r2, r2, [r0, #40]
 1005              	.LVL73:
 1006              	.LBB398:
 1007              	.LBB399:
 1008              		.loc 3 810 0
 1009 0010 6FF00101 		mvn	r1, #1
 1010 0014 FFF7FEBF 		b	chThdDequeueAllI
 1011              	.LVL74:
 1012              	.LBE399:
 1013              	.LBE398:
 1014              		.cfi_endproc
 1015              	.LFE290:
 1017              		.section	.text.obqGetFullBufferI,"ax",%progbits
 1018              		.align	1
 1019              		.global	obqGetFullBufferI
 1020              		.syntax unified
 1021              		.thumb
 1022              		.thumb_func
 1023              		.fpu softvfp
 1025              	obqGetFullBufferI:
 1026              	.LFB291:
 491:lib/chibios/os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 492:lib/chibios/os/hal/src/hal_buffers.c **** }
 493:lib/chibios/os/hal/src/hal_buffers.c **** 
 494:lib/chibios/os/hal/src/hal_buffers.c **** /**
 495:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 496:lib/chibios/os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 497:lib/chibios/os/hal/src/hal_buffers.c ****  *
 498:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 499:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[out] sizep    pointer to the filled buffer size
 500:lib/chibios/os/hal/src/hal_buffers.c ****  * @return              A pointer to the filled buffer.
 501:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is empty.
 502:lib/chibios/os/hal/src/hal_buffers.c ****  *
 503:lib/chibios/os/hal/src/hal_buffers.c ****  * @iclass
 504:lib/chibios/os/hal/src/hal_buffers.c ****  */
 505:lib/chibios/os/hal/src/hal_buffers.c **** uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
 506:lib/chibios/os/hal/src/hal_buffers.c ****                            size_t *sizep) {
 1027              		.loc 1 506 0
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 0
 1030              		@ frame_needed = 0, uses_anonymous_args = 0
 1031              		@ link register save eliminated.
 1032              	.LVL75:
 507:lib/chibios/os/hal/src/hal_buffers.c **** 
 508:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 509:lib/chibios/os/hal/src/hal_buffers.c **** 
 510:lib/chibios/os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp)) {
 1033              		.loc 1 510 0
 1034 0000 D0E90423 		ldrd	r2, r3, [r0, #16]
 1035 0004 9A42     		cmp	r2, r3
 1036 0006 01D1     		bne	.L45
 1037              		.loc 1 510 0 is_stmt 0 discriminator 1
 1038 0008 C268     		ldr	r2, [r0, #12]
 1039 000a 22B9     		cbnz	r2, .L47
 1040              	.L45:
 511:lib/chibios/os/hal/src/hal_buffers.c ****     return NULL;
 512:lib/chibios/os/hal/src/hal_buffers.c ****   }
 513:lib/chibios/os/hal/src/hal_buffers.c **** 
 514:lib/chibios/os/hal/src/hal_buffers.c ****   /* Buffer size.*/
 515:lib/chibios/os/hal/src/hal_buffers.c ****   *sizep = *((size_t *)obqp->brdptr);
 1041              		.loc 1 515 0 is_stmt 1
 1042 000c 1846     		mov	r0, r3
 1043              	.LVL76:
 1044 000e 50F8043B 		ldr	r3, [r0], #4
 1045 0012 0B60     		str	r3, [r1]
 516:lib/chibios/os/hal/src/hal_buffers.c **** 
 517:lib/chibios/os/hal/src/hal_buffers.c ****   return obqp->brdptr + sizeof (size_t);
 1046              		.loc 1 517 0
 1047 0014 7047     		bx	lr
 1048              	.LVL77:
 1049              	.L47:
 511:lib/chibios/os/hal/src/hal_buffers.c ****     return NULL;
 1050              		.loc 1 511 0
 1051 0016 0020     		movs	r0, #0
 1052              	.LVL78:
 518:lib/chibios/os/hal/src/hal_buffers.c **** }
 1053              		.loc 1 518 0
 1054 0018 7047     		bx	lr
 1055              		.cfi_endproc
 1056              	.LFE291:
 1058              		.section	.text.obqReleaseEmptyBufferI,"ax",%progbits
 1059              		.align	1
 1060              		.global	obqReleaseEmptyBufferI
 1061              		.syntax unified
 1062              		.thumb
 1063              		.thumb_func
 1064              		.fpu softvfp
 1066              	obqReleaseEmptyBufferI:
 1067              	.LFB292:
 519:lib/chibios/os/hal/src/hal_buffers.c **** 
 520:lib/chibios/os/hal/src/hal_buffers.c **** /**
 521:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Releases the next filled buffer back in the queue.
 522:lib/chibios/os/hal/src/hal_buffers.c ****  *
 523:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 524:lib/chibios/os/hal/src/hal_buffers.c ****  *
 525:lib/chibios/os/hal/src/hal_buffers.c ****  * @iclass
 526:lib/chibios/os/hal/src/hal_buffers.c ****  */
 527:lib/chibios/os/hal/src/hal_buffers.c **** void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 1068              		.loc 1 527 0
 1069              		.cfi_startproc
 1070              		@ args = 0, pretend = 0, frame = 0
 1071              		@ frame_needed = 0, uses_anonymous_args = 0
 1072              		@ link register save eliminated.
 1073              	.LVL79:
 528:lib/chibios/os/hal/src/hal_buffers.c **** 
 529:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 530:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 531:lib/chibios/os/hal/src/hal_buffers.c **** 
 532:lib/chibios/os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 533:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->bcounter++;
 1074              		.loc 1 533 0
 1075 0000 C368     		ldr	r3, [r0, #12]
 534:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->brdptr += obqp->bsize;
 1076              		.loc 1 534 0
 1077 0002 C269     		ldr	r2, [r0, #28]
 533:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->brdptr += obqp->bsize;
 1078              		.loc 1 533 0
 1079 0004 0133     		adds	r3, r3, #1
 1080 0006 C360     		str	r3, [r0, #12]
 1081              		.loc 1 534 0
 1082 0008 4369     		ldr	r3, [r0, #20]
 1083 000a 1344     		add	r3, r3, r2
 535:lib/chibios/os/hal/src/hal_buffers.c ****   if (obqp->brdptr >= obqp->btop) {
 1084              		.loc 1 535 0
 1085 000c 8269     		ldr	r2, [r0, #24]
 534:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->brdptr += obqp->bsize;
 1086              		.loc 1 534 0
 1087 000e 4361     		str	r3, [r0, #20]
 1088              		.loc 1 535 0
 1089 0010 9342     		cmp	r3, r2
 536:lib/chibios/os/hal/src/hal_buffers.c ****     obqp->brdptr = obqp->buffers;
 1090              		.loc 1 536 0
 1091 0012 24BF     		itt	cs
 1092 0014 436A     		ldrcs	r3, [r0, #36]
 1093 0016 4361     		strcs	r3, [r0, #20]
 1094              	.LVL80:
 1095              	.LBB400:
 1096              	.LBB401:
 797:./lib/chibios/os/hal/osal/rt/osal.h **** }
 1097              		.loc 3 797 0
 1098 0018 0021     		movs	r1, #0
 1099 001a FFF7FEBF 		b	chThdDequeueNextI
 1100              	.LVL81:
 1101              	.LBE401:
 1102              	.LBE400:
 1103              		.cfi_endproc
 1104              	.LFE292:
 1106              		.section	.text.obqGetEmptyBufferTimeoutS,"ax",%progbits
 1107              		.align	1
 1108              		.global	obqGetEmptyBufferTimeoutS
 1109              		.syntax unified
 1110              		.thumb
 1111              		.thumb_func
 1112              		.fpu softvfp
 1114              	obqGetEmptyBufferTimeoutS:
 1115              	.LFB294:
 537:lib/chibios/os/hal/src/hal_buffers.c ****   }
 538:lib/chibios/os/hal/src/hal_buffers.c **** 
 539:lib/chibios/os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 540:lib/chibios/os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
 541:lib/chibios/os/hal/src/hal_buffers.c **** }
 542:lib/chibios/os/hal/src/hal_buffers.c **** 
 543:lib/chibios/os/hal/src/hal_buffers.c **** /**
 544:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 545:lib/chibios/os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 546:lib/chibios/os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 547:lib/chibios/os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 548:lib/chibios/os/hal/src/hal_buffers.c ****  *          is empty.
 549:lib/chibios/os/hal/src/hal_buffers.c ****  *
 550:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 551:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 552:lib/chibios/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 553:lib/chibios/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 554:lib/chibios/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 555:lib/chibios/os/hal/src/hal_buffers.c ****  *                      .
 556:lib/chibios/os/hal/src/hal_buffers.c ****  * @return              The operation status.
 557:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 558:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 559:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 560:lib/chibios/os/hal/src/hal_buffers.c ****  *                      suspended state.
 561:lib/chibios/os/hal/src/hal_buffers.c ****  *
 562:lib/chibios/os/hal/src/hal_buffers.c ****  * @api
 563:lib/chibios/os/hal/src/hal_buffers.c ****  */
 564:lib/chibios/os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeout(output_buffers_queue_t *obqp,
 565:lib/chibios/os/hal/src/hal_buffers.c ****                                 systime_t timeout) {
 566:lib/chibios/os/hal/src/hal_buffers.c ****   msg_t msg;
 567:lib/chibios/os/hal/src/hal_buffers.c **** 
 568:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysLock();
 569:lib/chibios/os/hal/src/hal_buffers.c ****   msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 570:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 571:lib/chibios/os/hal/src/hal_buffers.c **** 
 572:lib/chibios/os/hal/src/hal_buffers.c ****   return msg;
 573:lib/chibios/os/hal/src/hal_buffers.c **** }
 574:lib/chibios/os/hal/src/hal_buffers.c **** 
 575:lib/chibios/os/hal/src/hal_buffers.c **** /**
 576:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 577:lib/chibios/os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 578:lib/chibios/os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 579:lib/chibios/os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 580:lib/chibios/os/hal/src/hal_buffers.c ****  *          is empty.
 581:lib/chibios/os/hal/src/hal_buffers.c ****  *
 582:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 583:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 584:lib/chibios/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 585:lib/chibios/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 586:lib/chibios/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 587:lib/chibios/os/hal/src/hal_buffers.c ****  *                      .
 588:lib/chibios/os/hal/src/hal_buffers.c ****  * @return              The operation status.
 589:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 590:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 591:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 592:lib/chibios/os/hal/src/hal_buffers.c ****  *                      suspended state.
 593:lib/chibios/os/hal/src/hal_buffers.c ****  *
 594:lib/chibios/os/hal/src/hal_buffers.c ****  * @sclass
 595:lib/chibios/os/hal/src/hal_buffers.c ****  */
 596:lib/chibios/os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
 597:lib/chibios/os/hal/src/hal_buffers.c ****                                 systime_t timeout) {
 1116              		.loc 1 597 0
 1117              		.cfi_startproc
 1118              		@ args = 0, pretend = 0, frame = 0
 1119              		@ frame_needed = 0, uses_anonymous_args = 0
 1120              	.LVL82:
 1121 0000 38B5     		push	{r3, r4, r5, lr}
 1122              		.cfi_def_cfa_offset 16
 1123              		.cfi_offset 3, -16
 1124              		.cfi_offset 4, -12
 1125              		.cfi_offset 5, -8
 1126              		.cfi_offset 14, -4
 1127 0002 0446     		mov	r4, r0
 1128 0004 0D46     		mov	r5, r1
 1129              	.LVL83:
 1130              	.L51:
 598:lib/chibios/os/hal/src/hal_buffers.c **** 
 599:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 600:lib/chibios/os/hal/src/hal_buffers.c **** 
 601:lib/chibios/os/hal/src/hal_buffers.c ****   while (obqIsFullI(obqp)) {
 1131              		.loc 1 601 0
 1132 0006 E368     		ldr	r3, [r4, #12]
 1133 0008 3BB1     		cbz	r3, .L53
 1134              	.LVL84:
 1135              	.LBB410:
 1136              	.LBB411:
 602:lib/chibios/os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 603:lib/chibios/os/hal/src/hal_buffers.c ****       return MSG_RESET;
 604:lib/chibios/os/hal/src/hal_buffers.c ****     }
 605:lib/chibios/os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 606:lib/chibios/os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 607:lib/chibios/os/hal/src/hal_buffers.c ****       return msg;
 608:lib/chibios/os/hal/src/hal_buffers.c ****     }
 609:lib/chibios/os/hal/src/hal_buffers.c ****   }
 610:lib/chibios/os/hal/src/hal_buffers.c **** 
 611:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "still full");
 612:lib/chibios/os/hal/src/hal_buffers.c **** 
 613:lib/chibios/os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 614:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->ptr = obqp->bwrptr + sizeof (size_t);
 1137              		.loc 1 614 0
 1138 000a 2369     		ldr	r3, [r4, #16]
 1139 000c 1A1D     		adds	r2, r3, #4
 1140 000e A262     		str	r2, [r4, #40]
 615:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->top = obqp->bwrptr + obqp->bsize;
 1141              		.loc 1 615 0
 1142 0010 E269     		ldr	r2, [r4, #28]
 1143 0012 1344     		add	r3, r3, r2
 1144 0014 E362     		str	r3, [r4, #44]
 1145              	.LVL85:
 1146 0016 0020     		movs	r0, #0
 1147 0018 07E0     		b	.L50
 1148              	.L53:
 1149              	.LBE411:
 1150              	.LBE410:
 1151              	.LBB412:
 602:lib/chibios/os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 1152              		.loc 1 602 0
 1153 001a 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1154 001c 33B9     		cbnz	r3, .L54
 1155              	.LVL86:
 1156              	.LBB413:
 1157              	.LBB414:
 784:./lib/chibios/os/hal/osal/rt/osal.h **** }
 1158              		.loc 3 784 0
 1159 001e 2946     		mov	r1, r5
 1160 0020 2046     		mov	r0, r4
 1161 0022 FFF7FEFF 		bl	chThdEnqueueTimeoutS
 1162              	.LVL87:
 1163              	.LBE414:
 1164              	.LBE413:
 606:lib/chibios/os/hal/src/hal_buffers.c ****       return msg;
 1165              		.loc 1 606 0
 1166 0026 0028     		cmp	r0, #0
 1167 0028 EDDA     		bge	.L51
 1168              	.L50:
 1169              	.LBE412:
 616:lib/chibios/os/hal/src/hal_buffers.c **** 
 617:lib/chibios/os/hal/src/hal_buffers.c ****   return MSG_OK;
 618:lib/chibios/os/hal/src/hal_buffers.c **** }
 1170              		.loc 1 618 0
 1171 002a 38BD     		pop	{r3, r4, r5, pc}
 1172              	.LVL88:
 1173              	.L54:
 1174              	.LBB415:
 603:lib/chibios/os/hal/src/hal_buffers.c ****     }
 1175              		.loc 1 603 0
 1176 002c 6FF00100 		mvn	r0, #1
 1177 0030 FBE7     		b	.L50
 1178              	.LBE415:
 1179              		.cfi_endproc
 1180              	.LFE294:
 1182              		.section	.text.obqGetEmptyBufferTimeout,"ax",%progbits
 1183              		.align	1
 1184              		.global	obqGetEmptyBufferTimeout
 1185              		.syntax unified
 1186              		.thumb
 1187              		.thumb_func
 1188              		.fpu softvfp
 1190              	obqGetEmptyBufferTimeout:
 1191              	.LFB293:
 565:lib/chibios/os/hal/src/hal_buffers.c ****   msg_t msg;
 1192              		.loc 1 565 0
 1193              		.cfi_startproc
 1194              		@ args = 0, pretend = 0, frame = 0
 1195              		@ frame_needed = 0, uses_anonymous_args = 0
 1196              	.LVL89:
 1197 0000 08B5     		push	{r3, lr}
 1198              		.cfi_def_cfa_offset 8
 1199              		.cfi_offset 3, -8
 1200              		.cfi_offset 14, -4
 1201              	.LBB416:
 1202              	.LBB417:
 1203              	.LBB418:
 1204              	.LBB419:
 1205              	.LBB420:
 1206              		.loc 4 264 0
 1207 0002 2023     		movs	r3, #32
 1208              		.syntax unified
 1209              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1210 0004 83F31188 		MSR basepri, r3
 1211              	@ 0 "" 2
 1212              	.LVL90:
 1213              		.thumb
 1214              		.syntax unified
 1215              	.LBE420:
 1216              	.LBE419:
 1217              	.LBE418:
 1218              	.LBE417:
 1219              	.LBE416:
 569:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 1220              		.loc 1 569 0
 1221 0008 FFF7FEFF 		bl	obqGetEmptyBufferTimeoutS
 1222              	.LVL91:
 1223              	.LBB421:
 1224              	.LBB422:
 1225              	.LBB423:
 1226              	.LBB424:
 1227              	.LBB425:
 1228              	.LBB426:
 1229              		.loc 4 264 0
 1230 000c 0023     		movs	r3, #0
 1231              		.syntax unified
 1232              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1233 000e 83F31188 		MSR basepri, r3
 1234              	@ 0 "" 2
 1235              	.LVL92:
 1236              		.thumb
 1237              		.syntax unified
 1238              	.LBE426:
 1239              	.LBE425:
 1240              	.LBE424:
 1241              	.LBE423:
 1242              	.LBE422:
 1243              	.LBE421:
 573:lib/chibios/os/hal/src/hal_buffers.c **** 
 1244              		.loc 1 573 0
 1245 0012 08BD     		pop	{r3, pc}
 1246              		.cfi_endproc
 1247              	.LFE293:
 1249              		.section	.text.obqPostFullBufferS,"ax",%progbits
 1250              		.align	1
 1251              		.global	obqPostFullBufferS
 1252              		.syntax unified
 1253              		.thumb
 1254              		.thumb_func
 1255              		.fpu softvfp
 1257              	obqPostFullBufferS:
 1258              	.LFB296:
 619:lib/chibios/os/hal/src/hal_buffers.c **** 
 620:lib/chibios/os/hal/src/hal_buffers.c **** /**
 621:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 622:lib/chibios/os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 623:lib/chibios/os/hal/src/hal_buffers.c ****  *
 624:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 625:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 626:lib/chibios/os/hal/src/hal_buffers.c ****  *
 627:lib/chibios/os/hal/src/hal_buffers.c ****  * @api
 628:lib/chibios/os/hal/src/hal_buffers.c ****  */
 629:lib/chibios/os/hal/src/hal_buffers.c **** void obqPostFullBuffer(output_buffers_queue_t *obqp, size_t size) {
 630:lib/chibios/os/hal/src/hal_buffers.c **** 
 631:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysLock();
 632:lib/chibios/os/hal/src/hal_buffers.c ****   obqPostFullBufferS(obqp, size);
 633:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 634:lib/chibios/os/hal/src/hal_buffers.c **** }
 635:lib/chibios/os/hal/src/hal_buffers.c **** 
 636:lib/chibios/os/hal/src/hal_buffers.c **** /**
 637:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 638:lib/chibios/os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 639:lib/chibios/os/hal/src/hal_buffers.c ****  *
 640:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 641:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 642:lib/chibios/os/hal/src/hal_buffers.c ****  *
 643:lib/chibios/os/hal/src/hal_buffers.c ****  * @sclass
 644:lib/chibios/os/hal/src/hal_buffers.c ****  */
 645:lib/chibios/os/hal/src/hal_buffers.c **** void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 1259              		.loc 1 645 0
 1260              		.cfi_startproc
 1261              		@ args = 0, pretend = 0, frame = 0
 1262              		@ frame_needed = 0, uses_anonymous_args = 0
 1263              		@ link register save eliminated.
 1264              	.LVL93:
 646:lib/chibios/os/hal/src/hal_buffers.c **** 
 647:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 648:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 649:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 650:lib/chibios/os/hal/src/hal_buffers.c **** 
 651:lib/chibios/os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 652:lib/chibios/os/hal/src/hal_buffers.c ****   *((size_t *)obqp->bwrptr) = size;
 1265              		.loc 1 652 0
 1266 0000 0369     		ldr	r3, [r0, #16]
 1267 0002 1960     		str	r1, [r3]
 653:lib/chibios/os/hal/src/hal_buffers.c **** 
 654:lib/chibios/os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 655:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->bcounter--;
 1268              		.loc 1 655 0
 1269 0004 C268     		ldr	r2, [r0, #12]
 1270 0006 013A     		subs	r2, r2, #1
 1271 0008 C260     		str	r2, [r0, #12]
 656:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1272              		.loc 1 656 0
 1273 000a C269     		ldr	r2, [r0, #28]
 1274 000c 1344     		add	r3, r3, r2
 657:lib/chibios/os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1275              		.loc 1 657 0
 1276 000e 8269     		ldr	r2, [r0, #24]
 656:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1277              		.loc 1 656 0
 1278 0010 0361     		str	r3, [r0, #16]
 1279              		.loc 1 657 0
 1280 0012 9342     		cmp	r3, r2
 658:lib/chibios/os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1281              		.loc 1 658 0
 1282 0014 24BF     		itt	cs
 1283 0016 436A     		ldrcs	r3, [r0, #36]
 1284 0018 0361     		strcs	r3, [r0, #16]
 659:lib/chibios/os/hal/src/hal_buffers.c ****   }
 660:lib/chibios/os/hal/src/hal_buffers.c **** 
 661:lib/chibios/os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 662:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->ptr = NULL;
 1285              		.loc 1 662 0
 1286 001a 0023     		movs	r3, #0
 1287 001c 8362     		str	r3, [r0, #40]
 663:lib/chibios/os/hal/src/hal_buffers.c **** 
 664:lib/chibios/os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 665:lib/chibios/os/hal/src/hal_buffers.c ****   if (obqp->notify != NULL) {
 1288              		.loc 1 665 0
 1289 001e 036B     		ldr	r3, [r0, #48]
 1290 0020 03B1     		cbz	r3, .L56
 666:lib/chibios/os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1291              		.loc 1 666 0
 1292 0022 1847     		bx	r3	@ indirect register sibling call
 1293              	.LVL94:
 1294              	.L56:
 667:lib/chibios/os/hal/src/hal_buffers.c ****   }
 668:lib/chibios/os/hal/src/hal_buffers.c **** }
 1295              		.loc 1 668 0
 1296 0024 7047     		bx	lr
 1297              		.cfi_endproc
 1298              	.LFE296:
 1300              		.section	.text.obqPostFullBuffer,"ax",%progbits
 1301              		.align	1
 1302              		.global	obqPostFullBuffer
 1303              		.syntax unified
 1304              		.thumb
 1305              		.thumb_func
 1306              		.fpu softvfp
 1308              	obqPostFullBuffer:
 1309              	.LFB295:
 629:lib/chibios/os/hal/src/hal_buffers.c **** 
 1310              		.loc 1 629 0
 1311              		.cfi_startproc
 1312              		@ args = 0, pretend = 0, frame = 0
 1313              		@ frame_needed = 0, uses_anonymous_args = 0
 1314              	.LVL95:
 1315 0000 08B5     		push	{r3, lr}
 1316              		.cfi_def_cfa_offset 8
 1317              		.cfi_offset 3, -8
 1318              		.cfi_offset 14, -4
 1319              	.LBB427:
 1320              	.LBB428:
 1321              	.LBB429:
 1322              	.LBB430:
 1323              	.LBB431:
 1324              		.loc 4 264 0
 1325 0002 2023     		movs	r3, #32
 1326              		.syntax unified
 1327              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1328 0004 83F31188 		MSR basepri, r3
 1329              	@ 0 "" 2
 1330              	.LVL96:
 1331              		.thumb
 1332              		.syntax unified
 1333              	.LBE431:
 1334              	.LBE430:
 1335              	.LBE429:
 1336              	.LBE428:
 1337              	.LBE427:
 632:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 1338              		.loc 1 632 0
 1339 0008 FFF7FEFF 		bl	obqPostFullBufferS
 1340              	.LVL97:
 1341              	.LBB432:
 1342              	.LBB433:
 1343              	.LBB434:
 1344              	.LBB435:
 1345              	.LBB436:
 1346              	.LBB437:
 1347              		.loc 4 264 0
 1348 000c 0023     		movs	r3, #0
 1349              		.syntax unified
 1350              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1351 000e 83F31188 		MSR basepri, r3
 1352              	@ 0 "" 2
 1353              	.LVL98:
 1354              		.thumb
 1355              		.syntax unified
 1356              	.LBE437:
 1357              	.LBE436:
 1358              	.LBE435:
 1359              	.LBE434:
 1360              	.LBE433:
 1361              	.LBE432:
 634:lib/chibios/os/hal/src/hal_buffers.c **** 
 1362              		.loc 1 634 0
 1363 0012 08BD     		pop	{r3, pc}
 1364              		.cfi_endproc
 1365              	.LFE295:
 1367              		.section	.text.obqPutTimeout,"ax",%progbits
 1368              		.align	1
 1369              		.global	obqPutTimeout
 1370              		.syntax unified
 1371              		.thumb
 1372              		.thumb_func
 1373              		.fpu softvfp
 1375              	obqPutTimeout:
 1376              	.LFB297:
 669:lib/chibios/os/hal/src/hal_buffers.c **** 
 670:lib/chibios/os/hal/src/hal_buffers.c **** /**
 671:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 672:lib/chibios/os/hal/src/hal_buffers.c ****  * @details This function writes a byte value to an output queue. If
 673:lib/chibios/os/hal/src/hal_buffers.c ****  *          the queue is full then the calling thread is suspended until a
 674:lib/chibios/os/hal/src/hal_buffers.c ****  *          new buffer is freed in the queue or a timeout occurs.
 675:lib/chibios/os/hal/src/hal_buffers.c ****  *
 676:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 677:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] b         byte value to be transferred
 678:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 679:lib/chibios/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 680:lib/chibios/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 681:lib/chibios/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 682:lib/chibios/os/hal/src/hal_buffers.c ****  *                      .
 683:lib/chibios/os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 684:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 685:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 686:lib/chibios/os/hal/src/hal_buffers.c ****  *                      suspended state.
 687:lib/chibios/os/hal/src/hal_buffers.c ****  *
 688:lib/chibios/os/hal/src/hal_buffers.c ****  * @api
 689:lib/chibios/os/hal/src/hal_buffers.c ****  */
 690:lib/chibios/os/hal/src/hal_buffers.c **** msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
 691:lib/chibios/os/hal/src/hal_buffers.c ****                     systime_t timeout) {
 1377              		.loc 1 691 0
 1378              		.cfi_startproc
 1379              		@ args = 0, pretend = 0, frame = 0
 1380              		@ frame_needed = 0, uses_anonymous_args = 0
 1381              	.LVL99:
 1382 0000 70B5     		push	{r4, r5, r6, lr}
 1383              		.cfi_def_cfa_offset 16
 1384              		.cfi_offset 4, -16
 1385              		.cfi_offset 5, -12
 1386              		.cfi_offset 6, -8
 1387              		.cfi_offset 14, -4
 1388              	.LBB438:
 1389              	.LBB439:
 1390              	.LBB440:
 1391              	.LBB441:
 1392              	.LBB442:
 1393              		.loc 4 264 0
 1394 0002 2023     		movs	r3, #32
 1395              	.LBE442:
 1396              	.LBE441:
 1397              	.LBE440:
 1398              	.LBE439:
 1399              	.LBE438:
 1400              		.loc 1 691 0
 1401 0004 0446     		mov	r4, r0
 1402 0006 0E46     		mov	r6, r1
 1403              	.LBB447:
 1404              	.LBB446:
 1405              	.LBB445:
 1406              	.LBB444:
 1407              	.LBB443:
 1408              		.loc 4 264 0
 1409              		.syntax unified
 1410              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1411 0008 83F31188 		MSR basepri, r3
 1412              	@ 0 "" 2
 1413              	.LVL100:
 1414              		.thumb
 1415              		.syntax unified
 1416              	.LBE443:
 1417              	.LBE444:
 1418              	.LBE445:
 1419              	.LBE446:
 1420              	.LBE447:
 692:lib/chibios/os/hal/src/hal_buffers.c ****   msg_t msg;
 693:lib/chibios/os/hal/src/hal_buffers.c **** 
 694:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysLock();
 695:lib/chibios/os/hal/src/hal_buffers.c **** 
 696:lib/chibios/os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 697:lib/chibios/os/hal/src/hal_buffers.c ****   if (obqp->ptr == NULL) {
 1421              		.loc 1 697 0
 1422 000c 856A     		ldr	r5, [r0, #40]
 1423 000e 35B9     		cbnz	r5, .L61
 698:lib/chibios/os/hal/src/hal_buffers.c ****     msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 1424              		.loc 1 698 0
 1425 0010 1146     		mov	r1, r2
 1426              	.LVL101:
 1427 0012 FFF7FEFF 		bl	obqGetEmptyBufferTimeoutS
 1428              	.LVL102:
 699:lib/chibios/os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 1429              		.loc 1 699 0
 1430 0016 10B1     		cbz	r0, .L61
 1431              	.LVL103:
 1432              	.LBB448:
 1433              	.LBB449:
 1434              	.LBB450:
 1435              	.LBB451:
 1436              	.LBB452:
 1437              	.LBB453:
 1438              		.loc 4 264 0
 1439              		.syntax unified
 1440              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1441 0018 85F31188 		MSR basepri, r5
 1442              	@ 0 "" 2
 1443              	.LVL104:
 1444              		.thumb
 1445              		.syntax unified
 1446              	.L60:
 1447              	.LBE453:
 1448              	.LBE452:
 1449              	.LBE451:
 1450              	.LBE450:
 1451              	.LBE449:
 1452              	.LBE448:
 700:lib/chibios/os/hal/src/hal_buffers.c ****       osalSysUnlock();
 701:lib/chibios/os/hal/src/hal_buffers.c ****       return msg;
 702:lib/chibios/os/hal/src/hal_buffers.c ****     }
 703:lib/chibios/os/hal/src/hal_buffers.c ****   }
 704:lib/chibios/os/hal/src/hal_buffers.c **** 
 705:lib/chibios/os/hal/src/hal_buffers.c ****   /* Writing the byte to the buffer.*/
 706:lib/chibios/os/hal/src/hal_buffers.c ****   *obqp->ptr = b;
 707:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->ptr++;
 708:lib/chibios/os/hal/src/hal_buffers.c **** 
 709:lib/chibios/os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully written then it is posted as
 710:lib/chibios/os/hal/src/hal_buffers.c ****      full in the queue.*/
 711:lib/chibios/os/hal/src/hal_buffers.c ****   if (obqp->ptr >= obqp->top) {
 712:lib/chibios/os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 713:lib/chibios/os/hal/src/hal_buffers.c ****   }
 714:lib/chibios/os/hal/src/hal_buffers.c **** 
 715:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 716:lib/chibios/os/hal/src/hal_buffers.c ****   return MSG_OK;
 717:lib/chibios/os/hal/src/hal_buffers.c **** }
 1453              		.loc 1 717 0
 1454 001c 70BD     		pop	{r4, r5, r6, pc}
 1455              	.LVL105:
 1456              	.L61:
 706:lib/chibios/os/hal/src/hal_buffers.c ****   obqp->ptr++;
 1457              		.loc 1 706 0
 1458 001e A36A     		ldr	r3, [r4, #40]
 1459 0020 1E70     		strb	r6, [r3]
 707:lib/chibios/os/hal/src/hal_buffers.c **** 
 1460              		.loc 1 707 0
 1461 0022 A36A     		ldr	r3, [r4, #40]
 711:lib/chibios/os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 1462              		.loc 1 711 0
 1463 0024 E26A     		ldr	r2, [r4, #44]
 707:lib/chibios/os/hal/src/hal_buffers.c **** 
 1464              		.loc 1 707 0
 1465 0026 0133     		adds	r3, r3, #1
 711:lib/chibios/os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 1466              		.loc 1 711 0
 1467 0028 9342     		cmp	r3, r2
 707:lib/chibios/os/hal/src/hal_buffers.c **** 
 1468              		.loc 1 707 0
 1469 002a A362     		str	r3, [r4, #40]
 711:lib/chibios/os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 1470              		.loc 1 711 0
 1471 002c 04D3     		bcc	.L63
 712:lib/chibios/os/hal/src/hal_buffers.c ****   }
 1472              		.loc 1 712 0
 1473 002e E169     		ldr	r1, [r4, #28]
 1474 0030 2046     		mov	r0, r4
 1475 0032 0439     		subs	r1, r1, #4
 1476 0034 FFF7FEFF 		bl	obqPostFullBufferS
 1477              	.LVL106:
 1478              	.L63:
 1479              	.LBB454:
 1480              	.LBB455:
 1481              	.LBB456:
 1482              	.LBB457:
 1483              	.LBB458:
 1484              	.LBB459:
 1485              		.loc 4 264 0
 1486 0038 0020     		movs	r0, #0
 1487              		.syntax unified
 1488              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1489 003a 80F31188 		MSR basepri, r0
 1490              	@ 0 "" 2
 1491              	.LVL107:
 1492              		.thumb
 1493              		.syntax unified
 1494              	.LBE459:
 1495              	.LBE458:
 1496              	.LBE457:
 1497              	.LBE456:
 1498              	.LBE455:
 1499              	.LBE454:
 716:lib/chibios/os/hal/src/hal_buffers.c **** }
 1500              		.loc 1 716 0
 1501 003e EDE7     		b	.L60
 1502              		.cfi_endproc
 1503              	.LFE297:
 1505              		.section	.text.obqWriteTimeout,"ax",%progbits
 1506              		.align	1
 1507              		.global	obqWriteTimeout
 1508              		.syntax unified
 1509              		.thumb
 1510              		.thumb_func
 1511              		.fpu softvfp
 1513              	obqWriteTimeout:
 1514              	.LFB298:
 718:lib/chibios/os/hal/src/hal_buffers.c **** 
 719:lib/chibios/os/hal/src/hal_buffers.c **** /**
 720:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 721:lib/chibios/os/hal/src/hal_buffers.c ****  * @details The function writes data from a buffer to an output queue. The
 722:lib/chibios/os/hal/src/hal_buffers.c ****  *          operation completes when the specified amount of data has been
 723:lib/chibios/os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 724:lib/chibios/os/hal/src/hal_buffers.c ****  *          been reset.
 725:lib/chibios/os/hal/src/hal_buffers.c ****  *
 726:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 727:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to the data buffer
 728:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 729:lib/chibios/os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 730:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 731:lib/chibios/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 732:lib/chibios/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 733:lib/chibios/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 734:lib/chibios/os/hal/src/hal_buffers.c ****  *                      .
 735:lib/chibios/os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 736:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 737:lib/chibios/os/hal/src/hal_buffers.c ****  *
 738:lib/chibios/os/hal/src/hal_buffers.c ****  * @api
 739:lib/chibios/os/hal/src/hal_buffers.c ****  */
 740:lib/chibios/os/hal/src/hal_buffers.c **** size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
 741:lib/chibios/os/hal/src/hal_buffers.c ****                        size_t n, systime_t timeout) {
 1515              		.loc 1 741 0
 1516              		.cfi_startproc
 1517              		@ args = 0, pretend = 0, frame = 8
 1518              		@ frame_needed = 0, uses_anonymous_args = 0
 1519              	.LVL108:
 1520 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1521              		.cfi_def_cfa_offset 48
 1522              		.cfi_offset 4, -36
 1523              		.cfi_offset 5, -32
 1524              		.cfi_offset 6, -28
 1525              		.cfi_offset 7, -24
 1526              		.cfi_offset 8, -20
 1527              		.cfi_offset 9, -16
 1528              		.cfi_offset 10, -12
 1529              		.cfi_offset 11, -8
 1530              		.cfi_offset 14, -4
 1531              		.loc 1 741 0
 1532 0004 1F46     		mov	r7, r3
 1533 0006 0446     		mov	r4, r0
 1534              	.LVL109:
 1535 0008 0D46     		mov	r5, r1
 1536 000a 9146     		mov	r9, r2
 1537              	.LBB460:
 1538              	.LBB461:
 1539              	.LBB462:
 1540              	.LBB463:
 1541              	.LBB464:
 1542              		.loc 4 264 0
 1543 000c 2023     		movs	r3, #32
 1544              	.LVL110:
 1545              		.syntax unified
 1546              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1547 000e 83F31188 		MSR basepri, r3
 1548              	@ 0 "" 2
 1549              	.LVL111:
 1550              		.thumb
 1551              		.syntax unified
 1552              	.LBE464:
 1553              	.LBE463:
 1554              	.LBE462:
 1555              	.LBE461:
 1556              	.LBE460:
 1557              	.LBB465:
 1558              	.LBB466:
 1559              	.LBB467:
 1560              	.LBB468:
 1561              	.LBB469:
 1562              		.loc 5 141 0
 1563 0012 4FF08048 		mov	r8, #1073741824
 1564              	.LBE469:
 1565              	.LBE468:
 1566              	.LBE467:
 1567              	.LBE466:
 1568              	.LBE465:
 742:lib/chibios/os/hal/src/hal_buffers.c ****   size_t w = 0;
 1569              		.loc 1 742 0
 1570 0016 0026     		movs	r6, #0
 1571              	.LBB474:
 1572              	.LBB473:
 1573              	.LBB472:
 1574              	.LBB471:
 1575              	.LBB470:
 1576              		.loc 5 141 0
 1577 0018 D8F82430 		ldr	r3, [r8, #36]
 1578              	.LBE470:
 1579              	.LBE471:
 1580              	.LBE472:
 1581              	.LBE473:
 1582              	.LBE474:
 743:lib/chibios/os/hal/src/hal_buffers.c ****   systime_t deadline;
 744:lib/chibios/os/hal/src/hal_buffers.c **** 
 745:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 746:lib/chibios/os/hal/src/hal_buffers.c **** 
 747:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysLock();
 748:lib/chibios/os/hal/src/hal_buffers.c **** 
 749:lib/chibios/os/hal/src/hal_buffers.c ****   /* Time window for the whole operation.*/
 750:lib/chibios/os/hal/src/hal_buffers.c ****   deadline = osalOsGetSystemTimeX() + timeout;
 1583              		.loc 1 750 0
 1584 001c FB18     		adds	r3, r7, r3
 1585 001e 0093     		str	r3, [sp]
 1586              	.LVL112:
 1587              	.LBB475:
 1588              	.LBB476:
 751:lib/chibios/os/hal/src/hal_buffers.c **** 
 752:lib/chibios/os/hal/src/hal_buffers.c ****   while (true) {
 753:lib/chibios/os/hal/src/hal_buffers.c ****     size_t size;
 754:lib/chibios/os/hal/src/hal_buffers.c **** 
 755:lib/chibios/os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 756:lib/chibios/os/hal/src/hal_buffers.c ****     if (obqp->ptr == NULL) {
 757:lib/chibios/os/hal/src/hal_buffers.c ****       msg_t msg;
 758:lib/chibios/os/hal/src/hal_buffers.c **** 
 759:lib/chibios/os/hal/src/hal_buffers.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 760:lib/chibios/os/hal/src/hal_buffers.c ****          deadline.*/
 761:lib/chibios/os/hal/src/hal_buffers.c ****       if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 1589              		.loc 1 761 0
 1590 0020 07F1FF3A 		add	r10, r7, #-1
 1591              	.LBE476:
 1592              	.LBB496:
 1593              	.LBB497:
 1594              	.LBB498:
 1595              	.LBB499:
 1596              	.LBB500:
 1597              	.LBB501:
 1598              		.loc 4 264 0
 1599 0024 B346     		mov	fp, r6
 1600              	.LVL113:
 1601              	.L77:
 1602              	.LBE501:
 1603              	.LBE500:
 1604              	.LBE499:
 1605              	.LBE498:
 1606              	.LBE497:
 1607              	.LBE496:
 756:lib/chibios/os/hal/src/hal_buffers.c ****       msg_t msg;
 1608              		.loc 1 756 0
 1609 0026 A36A     		ldr	r3, [r4, #40]
 1610 0028 ABB9     		cbnz	r3, .L68
 1611              	.LBB507:
 1612              		.loc 1 761 0
 1613 002a 1AF1030F 		cmn	r10, #3
 1614 002e 06D9     		bls	.L69
 762:lib/chibios/os/hal/src/hal_buffers.c ****         msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 1615              		.loc 1 762 0
 1616 0030 3946     		mov	r1, r7
 1617              	.L71:
 1618              	.LBB477:
 763:lib/chibios/os/hal/src/hal_buffers.c ****       }
 764:lib/chibios/os/hal/src/hal_buffers.c ****       else {
 765:lib/chibios/os/hal/src/hal_buffers.c ****         systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 766:lib/chibios/os/hal/src/hal_buffers.c **** 
 767:lib/chibios/os/hal/src/hal_buffers.c ****         /* Handling the case where the system time went past the deadline,
 768:lib/chibios/os/hal/src/hal_buffers.c ****            in this case next becomes a very high number because the system
 769:lib/chibios/os/hal/src/hal_buffers.c ****            time is an unsigned type.*/
 770:lib/chibios/os/hal/src/hal_buffers.c ****         if (next_timeout > timeout) {
 771:lib/chibios/os/hal/src/hal_buffers.c ****           osalSysUnlock();
 772:lib/chibios/os/hal/src/hal_buffers.c ****           return w;
 773:lib/chibios/os/hal/src/hal_buffers.c ****         }
 774:lib/chibios/os/hal/src/hal_buffers.c ****         msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 1619              		.loc 1 774 0
 1620 0032 2046     		mov	r0, r4
 1621 0034 FFF7FEFF 		bl	obqGetEmptyBufferTimeoutS
 1622              	.LVL114:
 1623              	.LBE477:
 775:lib/chibios/os/hal/src/hal_buffers.c ****       }
 776:lib/chibios/os/hal/src/hal_buffers.c **** 
 777:lib/chibios/os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 778:lib/chibios/os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 1624              		.loc 1 778 0
 1625 0038 68B1     		cbz	r0, .L68
 1626              	.LVL115:
 1627              	.LBB483:
 1628              	.LBB484:
 1629              	.LBB485:
 1630              	.LBB486:
 1631              	.LBB487:
 1632              	.LBB488:
 1633              		.loc 4 264 0
 1634 003a 0023     		movs	r3, #0
 1635 003c 05E0     		b	.L82
 1636              	.LVL116:
 1637              	.L69:
 1638              	.LBE488:
 1639              	.LBE487:
 1640              	.LBE486:
 1641              	.LBE485:
 1642              	.LBE484:
 1643              	.LBE483:
 1644              	.LBB494:
 1645              	.LBB478:
 1646              	.LBB479:
 1647              	.LBB480:
 1648              	.LBB481:
 1649              	.LBB482:
 1650              		.loc 5 141 0
 1651 003e D8F82410 		ldr	r1, [r8, #36]
 1652              	.LBE482:
 1653              	.LBE481:
 1654              	.LBE480:
 1655              	.LBE479:
 1656              	.LBE478:
 765:lib/chibios/os/hal/src/hal_buffers.c **** 
 1657              		.loc 1 765 0
 1658 0042 009A     		ldr	r2, [sp]
 1659 0044 511A     		subs	r1, r2, r1
 1660              	.LVL117:
 770:lib/chibios/os/hal/src/hal_buffers.c ****           osalSysUnlock();
 1661              		.loc 1 770 0
 1662 0046 8F42     		cmp	r7, r1
 1663 0048 F3D2     		bcs	.L71
 1664              	.LVL118:
 1665              	.L82:
 1666              	.LBE494:
 1667              	.LBB495:
 1668              	.LBB493:
 1669              	.LBB492:
 1670              	.LBB491:
 1671              	.LBB490:
 1672              	.LBB489:
 1673              		.loc 4 264 0
 1674              		.syntax unified
 1675              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1676 004a 83F31188 		MSR basepri, r3
 1677              	@ 0 "" 2
 1678              		.thumb
 1679              		.syntax unified
 1680              	.L67:
 1681              	.LBE489:
 1682              	.LBE490:
 1683              	.LBE491:
 1684              	.LBE492:
 1685              	.LBE493:
 1686              	.LBE495:
 1687              	.LBE507:
 1688              	.LBE475:
 779:lib/chibios/os/hal/src/hal_buffers.c ****         osalSysUnlock();
 780:lib/chibios/os/hal/src/hal_buffers.c ****         return w;
 781:lib/chibios/os/hal/src/hal_buffers.c ****       }
 782:lib/chibios/os/hal/src/hal_buffers.c ****     }
 783:lib/chibios/os/hal/src/hal_buffers.c **** 
 784:lib/chibios/os/hal/src/hal_buffers.c ****     /* Size of the space available in the current buffer.*/
 785:lib/chibios/os/hal/src/hal_buffers.c ****     size = (size_t)obqp->top - (size_t)obqp->ptr;
 786:lib/chibios/os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 787:lib/chibios/os/hal/src/hal_buffers.c ****       size = n - w;
 788:lib/chibios/os/hal/src/hal_buffers.c ****     }
 789:lib/chibios/os/hal/src/hal_buffers.c **** 
 790:lib/chibios/os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 791:lib/chibios/os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 792:lib/chibios/os/hal/src/hal_buffers.c ****     if (size > 64U) {
 793:lib/chibios/os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 794:lib/chibios/os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, 64U);
 795:lib/chibios/os/hal/src/hal_buffers.c ****       bp        += 64U;
 796:lib/chibios/os/hal/src/hal_buffers.c ****       obqp->ptr += 64U;
 797:lib/chibios/os/hal/src/hal_buffers.c ****       w         += 64U;
 798:lib/chibios/os/hal/src/hal_buffers.c ****     }
 799:lib/chibios/os/hal/src/hal_buffers.c ****     else {
 800:lib/chibios/os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, size);
 801:lib/chibios/os/hal/src/hal_buffers.c ****       bp        += size;
 802:lib/chibios/os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 803:lib/chibios/os/hal/src/hal_buffers.c ****       w         += size;
 804:lib/chibios/os/hal/src/hal_buffers.c ****     }
 805:lib/chibios/os/hal/src/hal_buffers.c **** 
 806:lib/chibios/os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 807:lib/chibios/os/hal/src/hal_buffers.c ****     if (obqp->ptr >= obqp->top) {
 808:lib/chibios/os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 809:lib/chibios/os/hal/src/hal_buffers.c ****     }
 810:lib/chibios/os/hal/src/hal_buffers.c **** 
 811:lib/chibios/os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 812:lib/chibios/os/hal/src/hal_buffers.c ****     osalSysUnlock();
 813:lib/chibios/os/hal/src/hal_buffers.c ****     if (w >= n) {
 814:lib/chibios/os/hal/src/hal_buffers.c ****       return w;
 815:lib/chibios/os/hal/src/hal_buffers.c ****     }
 816:lib/chibios/os/hal/src/hal_buffers.c ****     osalSysLock();
 817:lib/chibios/os/hal/src/hal_buffers.c ****   }
 818:lib/chibios/os/hal/src/hal_buffers.c **** }
 1689              		.loc 1 818 0
 1690 004e 3046     		mov	r0, r6
 1691 0050 03B0     		add	sp, sp, #12
 1692              		.cfi_remember_state
 1693              		.cfi_def_cfa_offset 36
 1694              		@ sp needed
 1695 0052 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1696              	.LVL119:
 1697              	.L68:
 1698              		.cfi_restore_state
 1699              	.LBB514:
 785:lib/chibios/os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 1700              		.loc 1 785 0
 1701 0056 D4E90A03 		ldrd	r0, r3, [r4, #40]
 786:lib/chibios/os/hal/src/hal_buffers.c ****       size = n - w;
 1702              		.loc 1 786 0
 1703 005a A9EB0602 		sub	r2, r9, r6
 785:lib/chibios/os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 1704              		.loc 1 785 0
 1705 005e 1B1A     		subs	r3, r3, r0
 1706              	.LVL120:
 1707 0060 9342     		cmp	r3, r2
 1708 0062 28BF     		it	cs
 1709 0064 1346     		movcs	r3, r2
 1710              	.LVL121:
 792:lib/chibios/os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 1711              		.loc 1 792 0
 1712 0066 402B     		cmp	r3, #64
 1713 0068 1CD9     		bls	.L73
 794:lib/chibios/os/hal/src/hal_buffers.c ****       bp        += 64U;
 1714              		.loc 1 794 0
 1715 006a 05F14003 		add	r3, r5, #64
 1716              	.LVL122:
 1717              	.L74:
 1718 006e 55F8042B 		ldr	r2, [r5], #4	@ unaligned
 1719 0072 40F8042B 		str	r2, [r0], #4	@ unaligned
 1720 0076 9D42     		cmp	r5, r3
 1721 0078 F9D1     		bne	.L74
 1722              	.LVL123:
 796:lib/chibios/os/hal/src/hal_buffers.c ****       w         += 64U;
 1723              		.loc 1 796 0
 1724 007a A36A     		ldr	r3, [r4, #40]
 1725 007c 4033     		adds	r3, r3, #64
 1726 007e A362     		str	r3, [r4, #40]
 797:lib/chibios/os/hal/src/hal_buffers.c ****     }
 1727              		.loc 1 797 0
 1728 0080 4036     		adds	r6, r6, #64
 1729              	.LVL124:
 1730              	.L75:
 807:lib/chibios/os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 1731              		.loc 1 807 0
 1732 0082 D4E90A23 		ldrd	r2, r3, [r4, #40]
 1733 0086 9A42     		cmp	r2, r3
 1734 0088 04D3     		bcc	.L76
 808:lib/chibios/os/hal/src/hal_buffers.c ****     }
 1735              		.loc 1 808 0
 1736 008a E169     		ldr	r1, [r4, #28]
 1737 008c 2046     		mov	r0, r4
 1738 008e 0439     		subs	r1, r1, #4
 1739 0090 FFF7FEFF 		bl	obqPostFullBufferS
 1740              	.LVL125:
 1741              	.L76:
 1742              	.LBB508:
 1743              	.LBB506:
 1744              	.LBB505:
 1745              	.LBB504:
 1746              	.LBB503:
 1747              	.LBB502:
 1748              		.loc 4 264 0
 1749              		.syntax unified
 1750              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1751 0094 8BF31188 		MSR basepri, fp
 1752              	@ 0 "" 2
 1753              	.LVL126:
 1754              		.thumb
 1755              		.syntax unified
 1756              	.LBE502:
 1757              	.LBE503:
 1758              	.LBE504:
 1759              	.LBE505:
 1760              	.LBE506:
 1761              	.LBE508:
 813:lib/chibios/os/hal/src/hal_buffers.c ****       return w;
 1762              		.loc 1 813 0
 1763 0098 4E45     		cmp	r6, r9
 1764 009a D8D2     		bcs	.L67
 1765              	.LVL127:
 1766              	.LBB509:
 1767              	.LBB510:
 1768              	.LBB511:
 1769              	.LBB512:
 1770              	.LBB513:
 1771              		.loc 4 264 0
 1772 009c 2023     		movs	r3, #32
 1773              		.syntax unified
 1774              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1775 009e 83F31188 		MSR basepri, r3
 1776              	@ 0 "" 2
 1777              	.LVL128:
 1778              		.thumb
 1779              		.syntax unified
 1780 00a2 C0E7     		b	.L77
 1781              	.LVL129:
 1782              	.L73:
 1783              	.LBE513:
 1784              	.LBE512:
 1785              	.LBE511:
 1786              	.LBE510:
 1787              	.LBE509:
 800:lib/chibios/os/hal/src/hal_buffers.c ****       bp        += size;
 1788              		.loc 1 800 0
 1789 00a4 1A46     		mov	r2, r3
 1790 00a6 2946     		mov	r1, r5
 1791 00a8 0193     		str	r3, [sp, #4]
 1792 00aa FFF7FEFF 		bl	memcpy
 1793              	.LVL130:
 801:lib/chibios/os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 1794              		.loc 1 801 0
 1795 00ae 019B     		ldr	r3, [sp, #4]
 802:lib/chibios/os/hal/src/hal_buffers.c ****       w         += size;
 1796              		.loc 1 802 0
 1797 00b0 A26A     		ldr	r2, [r4, #40]
 1798 00b2 1A44     		add	r2, r2, r3
 801:lib/chibios/os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 1799              		.loc 1 801 0
 1800 00b4 1D44     		add	r5, r5, r3
 1801              	.LVL131:
 802:lib/chibios/os/hal/src/hal_buffers.c ****       w         += size;
 1802              		.loc 1 802 0
 1803 00b6 A262     		str	r2, [r4, #40]
 803:lib/chibios/os/hal/src/hal_buffers.c ****     }
 1804              		.loc 1 803 0
 1805 00b8 1E44     		add	r6, r6, r3
 1806              	.LVL132:
 1807 00ba E2E7     		b	.L75
 1808              	.LBE514:
 1809              		.cfi_endproc
 1810              	.LFE298:
 1812              		.section	.text.obqTryFlushI,"ax",%progbits
 1813              		.align	1
 1814              		.global	obqTryFlushI
 1815              		.syntax unified
 1816              		.thumb
 1817              		.thumb_func
 1818              		.fpu softvfp
 1820              	obqTryFlushI:
 1821              	.LFB299:
 819:lib/chibios/os/hal/src/hal_buffers.c **** 
 820:lib/chibios/os/hal/src/hal_buffers.c **** /**
 821:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 822:lib/chibios/os/hal/src/hal_buffers.c ****  * @note    The notification callback is not invoked because the function
 823:lib/chibios/os/hal/src/hal_buffers.c ****  *          is meant to be called from ISR context. An operation status is
 824:lib/chibios/os/hal/src/hal_buffers.c ****  *          returned instead.
 825:lib/chibios/os/hal/src/hal_buffers.c ****  *
 826:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 827:lib/chibios/os/hal/src/hal_buffers.c ****  * @return              The operation status.
 828:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval false        if no new filled buffer has been posted to the queue.
 829:lib/chibios/os/hal/src/hal_buffers.c ****  * @retval true         if a new filled buffer has been posted to the queue.
 830:lib/chibios/os/hal/src/hal_buffers.c ****  *
 831:lib/chibios/os/hal/src/hal_buffers.c ****  * @iclass
 832:lib/chibios/os/hal/src/hal_buffers.c ****  */
 833:lib/chibios/os/hal/src/hal_buffers.c **** bool obqTryFlushI(output_buffers_queue_t *obqp) {
 1822              		.loc 1 833 0
 1823              		.cfi_startproc
 1824              		@ args = 0, pretend = 0, frame = 0
 1825              		@ frame_needed = 0, uses_anonymous_args = 0
 1826              		@ link register save eliminated.
 1827              	.LVL133:
 834:lib/chibios/os/hal/src/hal_buffers.c **** 
 835:lib/chibios/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 836:lib/chibios/os/hal/src/hal_buffers.c **** 
 837:lib/chibios/os/hal/src/hal_buffers.c ****   /* If queue is empty and there is a buffer partially filled and
 838:lib/chibios/os/hal/src/hal_buffers.c ****      it is not being written.*/
 839:lib/chibios/os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 1828              		.loc 1 839 0
 1829 0000 D0E90423 		ldrd	r2, r3, [r0, #16]
 1830 0004 9A42     		cmp	r2, r3
 1831 0006 17D1     		bne	.L86
 1832              		.loc 1 839 0 is_stmt 0 discriminator 1
 1833 0008 C368     		ldr	r3, [r0, #12]
 1834 000a 9BB1     		cbz	r3, .L84
 1835              		.loc 1 839 0
 1836 000c 836A     		ldr	r3, [r0, #40]
 1837 000e 8BB1     		cbz	r3, .L84
 1838              	.LBB515:
 840:lib/chibios/os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 1839              		.loc 1 840 0 is_stmt 1
 1840 0010 043B     		subs	r3, r3, #4
 1841              	.LVL134:
 841:lib/chibios/os/hal/src/hal_buffers.c **** 
 842:lib/chibios/os/hal/src/hal_buffers.c ****     if (size > 0U) {
 1842              		.loc 1 842 0
 1843 0012 9B1A     		subs	r3, r3, r2
 1844              	.LVL135:
 1845 0014 0ED0     		beq	.L84
 843:lib/chibios/os/hal/src/hal_buffers.c **** 
 844:lib/chibios/os/hal/src/hal_buffers.c ****       /* Writing size field in the buffer.*/
 845:lib/chibios/os/hal/src/hal_buffers.c ****       *((size_t *)obqp->bwrptr) = size;
 1846              		.loc 1 845 0
 1847 0016 1360     		str	r3, [r2]
 846:lib/chibios/os/hal/src/hal_buffers.c **** 
 847:lib/chibios/os/hal/src/hal_buffers.c ****       /* Posting the buffer in the queue.*/
 848:lib/chibios/os/hal/src/hal_buffers.c ****       obqp->bcounter--;
 1848              		.loc 1 848 0
 1849 0018 C368     		ldr	r3, [r0, #12]
 1850              	.LVL136:
 1851 001a 013B     		subs	r3, r3, #1
 1852 001c C360     		str	r3, [r0, #12]
 1853              	.LVL137:
 849:lib/chibios/os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 1854              		.loc 1 849 0
 1855 001e C369     		ldr	r3, [r0, #28]
 1856 0020 1A44     		add	r2, r2, r3
 1857              	.LVL138:
 850:lib/chibios/os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 1858              		.loc 1 850 0
 1859 0022 8369     		ldr	r3, [r0, #24]
 849:lib/chibios/os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 1860              		.loc 1 849 0
 1861 0024 0261     		str	r2, [r0, #16]
 1862              	.LVL139:
 1863              		.loc 1 850 0
 1864 0026 9A42     		cmp	r2, r3
 851:lib/chibios/os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 1865              		.loc 1 851 0
 1866 0028 24BF     		itt	cs
 1867 002a 436A     		ldrcs	r3, [r0, #36]
 1868 002c 0361     		strcs	r3, [r0, #16]
 852:lib/chibios/os/hal/src/hal_buffers.c ****       }
 853:lib/chibios/os/hal/src/hal_buffers.c **** 
 854:lib/chibios/os/hal/src/hal_buffers.c ****       /* No "current" buffer.*/
 855:lib/chibios/os/hal/src/hal_buffers.c ****       obqp->ptr = NULL;
 1869              		.loc 1 855 0
 1870 002e 0023     		movs	r3, #0
 1871 0030 8362     		str	r3, [r0, #40]
 856:lib/chibios/os/hal/src/hal_buffers.c **** 
 857:lib/chibios/os/hal/src/hal_buffers.c ****       return true;
 1872              		.loc 1 857 0
 1873 0032 0123     		movs	r3, #1
 1874              	.L84:
 1875              	.LBE515:
 858:lib/chibios/os/hal/src/hal_buffers.c ****     }
 859:lib/chibios/os/hal/src/hal_buffers.c ****   }
 860:lib/chibios/os/hal/src/hal_buffers.c ****   return false;
 861:lib/chibios/os/hal/src/hal_buffers.c **** }
 1876              		.loc 1 861 0
 1877 0034 1846     		mov	r0, r3
 1878              	.LVL140:
 1879 0036 7047     		bx	lr
 1880              	.LVL141:
 1881              	.L86:
 860:lib/chibios/os/hal/src/hal_buffers.c **** }
 1882              		.loc 1 860 0
 1883 0038 0023     		movs	r3, #0
 1884 003a FBE7     		b	.L84
 1885              		.cfi_endproc
 1886              	.LFE299:
 1888              		.section	.text.obqFlush,"ax",%progbits
 1889              		.align	1
 1890              		.global	obqFlush
 1891              		.syntax unified
 1892              		.thumb
 1893              		.thumb_func
 1894              		.fpu softvfp
 1896              	obqFlush:
 1897              	.LFB300:
 862:lib/chibios/os/hal/src/hal_buffers.c **** 
 863:lib/chibios/os/hal/src/hal_buffers.c **** /**
 864:lib/chibios/os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 865:lib/chibios/os/hal/src/hal_buffers.c ****  *
 866:lib/chibios/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 867:lib/chibios/os/hal/src/hal_buffers.c ****  *
 868:lib/chibios/os/hal/src/hal_buffers.c ****  * @api
 869:lib/chibios/os/hal/src/hal_buffers.c ****  */
 870:lib/chibios/os/hal/src/hal_buffers.c **** void obqFlush(output_buffers_queue_t *obqp) {
 1898              		.loc 1 870 0
 1899              		.cfi_startproc
 1900              		@ args = 0, pretend = 0, frame = 0
 1901              		@ frame_needed = 0, uses_anonymous_args = 0
 1902              	.LVL142:
 1903 0000 08B5     		push	{r3, lr}
 1904              		.cfi_def_cfa_offset 8
 1905              		.cfi_offset 3, -8
 1906              		.cfi_offset 14, -4
 1907              	.LBB516:
 1908              	.LBB517:
 1909              	.LBB518:
 1910              	.LBB519:
 1911              	.LBB520:
 1912              		.loc 4 264 0
 1913 0002 2022     		movs	r2, #32
 1914              		.syntax unified
 1915              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1916 0004 82F31188 		MSR basepri, r2
 1917              	@ 0 "" 2
 1918              	.LVL143:
 1919              		.thumb
 1920              		.syntax unified
 1921              	.LBE520:
 1922              	.LBE519:
 1923              	.LBE518:
 1924              	.LBE517:
 1925              	.LBE516:
 871:lib/chibios/os/hal/src/hal_buffers.c **** 
 872:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysLock();
 873:lib/chibios/os/hal/src/hal_buffers.c **** 
 874:lib/chibios/os/hal/src/hal_buffers.c ****   /* If there is a buffer partially filled and not being written.*/
 875:lib/chibios/os/hal/src/hal_buffers.c ****   if (obqp->ptr != NULL) {
 1926              		.loc 1 875 0
 1927 0008 816A     		ldr	r1, [r0, #40]
 1928 000a 29B1     		cbz	r1, .L91
 1929              	.LBB521:
 876:lib/chibios/os/hal/src/hal_buffers.c ****     size_t size = ((size_t)obqp->ptr - (size_t)obqp->bwrptr) - sizeof (size_t);
 1930              		.loc 1 876 0
 1931 000c 0369     		ldr	r3, [r0, #16]
 1932 000e 0439     		subs	r1, r1, #4
 1933              	.LVL144:
 877:lib/chibios/os/hal/src/hal_buffers.c **** 
 878:lib/chibios/os/hal/src/hal_buffers.c ****     if (size > 0U) {
 1934              		.loc 1 878 0
 1935 0010 C91A     		subs	r1, r1, r3
 1936              	.LVL145:
 1937 0012 01D0     		beq	.L91
 879:lib/chibios/os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, size);
 1938              		.loc 1 879 0
 1939 0014 FFF7FEFF 		bl	obqPostFullBufferS
 1940              	.LVL146:
 1941              	.L91:
 1942              	.LBE521:
 1943              	.LBB522:
 1944              	.LBB523:
 1945              	.LBB524:
 1946              	.LBB525:
 1947              	.LBB526:
 1948              	.LBB527:
 1949              		.loc 4 264 0
 1950 0018 0023     		movs	r3, #0
 1951              		.syntax unified
 1952              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1953 001a 83F31188 		MSR basepri, r3
 1954              	@ 0 "" 2
 1955              	.LVL147:
 1956              		.thumb
 1957              		.syntax unified
 1958              	.LBE527:
 1959              	.LBE526:
 1960              	.LBE525:
 1961              	.LBE524:
 1962              	.LBE523:
 1963              	.LBE522:
 880:lib/chibios/os/hal/src/hal_buffers.c ****     }
 881:lib/chibios/os/hal/src/hal_buffers.c ****   }
 882:lib/chibios/os/hal/src/hal_buffers.c **** 
 883:lib/chibios/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 884:lib/chibios/os/hal/src/hal_buffers.c **** }
 1964              		.loc 1 884 0
 1965 001e 08BD     		pop	{r3, pc}
 1966              		.cfi_endproc
 1967              	.LFE300:
 1969              		.text
 1970              	.Letext0:
 1971              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 1972              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 1973              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 1974              		.file 9 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 1975              		.file 10 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 1976              		.file 11 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 1977              		.file 12 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 1978              		.file 13 "./lib/chibios/os/rt/include/chsystypes.h"
 1979              		.file 14 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 1980              		.file 15 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 1981              		.file 16 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/stm32f303xc.h"
 1982              		.file 17 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 1983              		.file 18 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 1984              		.file 19 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 1985              		.file 20 "./lib/chibios/os/rt/include/chtm.h"
 1986              		.file 21 "./lib/chibios/os/rt/include/chsem.h"
 1987              		.file 22 "./lib/chibios/os/rt/include/chmtx.h"
 1988              		.file 23 "./lib/chibios/os/rt/include/chsys.h"
 1989              		.file 24 "./lib/chibios/os/rt/include/chregistry.h"
 1990              		.file 25 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 1991              		.file 26 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 1992              		.file 27 "./lib/chibios/os/hal/include/hal_buffers.h"
 1993              		.file 28 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 1994              		.file 29 "./lib/chibios/os/hal/include/hal_dac.h"
 1995              		.file 30 "./lib/chibios/os/hal/ports/STM32/LLD/DACv1/hal_dac_lld.h"
 1996              		.file 31 "./lib/chibios/os/hal/include/hal_gpt.h"
 1997              		.file 32 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_gpt_lld.h"
 1998              		.file 33 "./lib/chibios/os/hal/include/hal_i2c.h"
 1999              		.file 34 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 2000              		.file 35 "./lib/chibios/os/hal/include/hal_pwm.h"
 2001              		.file 36 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 2002              		.file 37 "./lib/chibios/os/hal/include/hal_usb.h"
 2003              		.file 38 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 2004              		.file 39 "./lib/chibios/os/rt/include/chvt.h"
 2005              		.file 40 "./lib/chibios/os/rt/include/chthreads.h"
 2006              		.file 41 "./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h"
 2007              		.file 42 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_buffers.c
/var/tmp//cc3Gzgd6.s:16     .text.ibqObjectInit:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:23     .text.ibqObjectInit:0000000000000000 ibqObjectInit
/var/tmp//cc3Gzgd6.s:83     .text.ibqResetI:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:90     .text.ibqResetI:0000000000000000 ibqResetI
/var/tmp//cc3Gzgd6.s:122    .text.ibqGetEmptyBufferI:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:129    .text.ibqGetEmptyBufferI:0000000000000000 ibqGetEmptyBufferI
/var/tmp//cc3Gzgd6.s:160    .text.ibqPostFullBufferI:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:167    .text.ibqPostFullBufferI:0000000000000000 ibqPostFullBufferI
/var/tmp//cc3Gzgd6.s:209    .text.ibqGetFullBufferTimeoutS:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:216    .text.ibqGetFullBufferTimeoutS:0000000000000000 ibqGetFullBufferTimeoutS
/var/tmp//cc3Gzgd6.s:287    .text.ibqGetFullBufferTimeout:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:294    .text.ibqGetFullBufferTimeout:0000000000000000 ibqGetFullBufferTimeout
/var/tmp//cc3Gzgd6.s:355    .text.ibqReleaseEmptyBufferS:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:362    .text.ibqReleaseEmptyBufferS:0000000000000000 ibqReleaseEmptyBufferS
/var/tmp//cc3Gzgd6.s:406    .text.ibqReleaseEmptyBuffer:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:413    .text.ibqReleaseEmptyBuffer:0000000000000000 ibqReleaseEmptyBuffer
/var/tmp//cc3Gzgd6.s:473    .text.ibqGetTimeout:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:480    .text.ibqGetTimeout:0000000000000000 ibqGetTimeout
/var/tmp//cc3Gzgd6.s:605    .text.ibqReadTimeout:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:612    .text.ibqReadTimeout:0000000000000000 ibqReadTimeout
/var/tmp//cc3Gzgd6.s:915    .text.obqObjectInit:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:922    .text.obqObjectInit:0000000000000000 obqObjectInit
/var/tmp//cc3Gzgd6.s:979    .text.obqResetI:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:986    .text.obqResetI:0000000000000000 obqResetI
/var/tmp//cc3Gzgd6.s:1018   .text.obqGetFullBufferI:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:1025   .text.obqGetFullBufferI:0000000000000000 obqGetFullBufferI
/var/tmp//cc3Gzgd6.s:1059   .text.obqReleaseEmptyBufferI:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:1066   .text.obqReleaseEmptyBufferI:0000000000000000 obqReleaseEmptyBufferI
/var/tmp//cc3Gzgd6.s:1107   .text.obqGetEmptyBufferTimeoutS:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:1114   .text.obqGetEmptyBufferTimeoutS:0000000000000000 obqGetEmptyBufferTimeoutS
/var/tmp//cc3Gzgd6.s:1183   .text.obqGetEmptyBufferTimeout:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:1190   .text.obqGetEmptyBufferTimeout:0000000000000000 obqGetEmptyBufferTimeout
/var/tmp//cc3Gzgd6.s:1250   .text.obqPostFullBufferS:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:1257   .text.obqPostFullBufferS:0000000000000000 obqPostFullBufferS
/var/tmp//cc3Gzgd6.s:1301   .text.obqPostFullBuffer:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:1308   .text.obqPostFullBuffer:0000000000000000 obqPostFullBuffer
/var/tmp//cc3Gzgd6.s:1368   .text.obqPutTimeout:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:1375   .text.obqPutTimeout:0000000000000000 obqPutTimeout
/var/tmp//cc3Gzgd6.s:1506   .text.obqWriteTimeout:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:1513   .text.obqWriteTimeout:0000000000000000 obqWriteTimeout
/var/tmp//cc3Gzgd6.s:1813   .text.obqTryFlushI:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:1820   .text.obqTryFlushI:0000000000000000 obqTryFlushI
/var/tmp//cc3Gzgd6.s:1889   .text.obqFlush:0000000000000000 $t
/var/tmp//cc3Gzgd6.s:1896   .text.obqFlush:0000000000000000 obqFlush

UNDEFINED SYMBOLS
chThdDequeueAllI
chThdDequeueNextI
chThdEnqueueTimeoutS
memcpy
