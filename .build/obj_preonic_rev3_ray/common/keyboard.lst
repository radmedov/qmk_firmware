   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"keyboard.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.disable_jtag,"ax",%progbits
  16              		.align	1
  17              		.global	disable_jtag
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	disable_jtag:
  24              	.LFB284:
  25              		.file 1 "tmk_core/common/keyboard.c"
   1:tmk_core/common/keyboard.c **** /*
   2:tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.c **** 
   4:tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.c **** (at your option) any later version.
   8:tmk_core/common/keyboard.c **** 
   9:tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.c **** 
  14:tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.c **** */
  17:tmk_core/common/keyboard.c **** 
  18:tmk_core/common/keyboard.c **** #include <stdint.h>
  19:tmk_core/common/keyboard.c **** #include "keyboard.h"
  20:tmk_core/common/keyboard.c **** #include "matrix.h"
  21:tmk_core/common/keyboard.c **** #include "keymap.h"
  22:tmk_core/common/keyboard.c **** #include "host.h"
  23:tmk_core/common/keyboard.c **** #include "led.h"
  24:tmk_core/common/keyboard.c **** #include "keycode.h"
  25:tmk_core/common/keyboard.c **** #include "timer.h"
  26:tmk_core/common/keyboard.c **** #include "print.h"
  27:tmk_core/common/keyboard.c **** #include "debug.h"
  28:tmk_core/common/keyboard.c **** #include "command.h"
  29:tmk_core/common/keyboard.c **** #include "util.h"
  30:tmk_core/common/keyboard.c **** #include "sendchar.h"
  31:tmk_core/common/keyboard.c **** #include "eeconfig.h"
  32:tmk_core/common/keyboard.c **** #include "backlight.h"
  33:tmk_core/common/keyboard.c **** #include "action_layer.h"
  34:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  35:tmk_core/common/keyboard.c **** #    include "bootmagic.h"
  36:tmk_core/common/keyboard.c **** #else
  37:tmk_core/common/keyboard.c **** #    include "magic.h"
  38:tmk_core/common/keyboard.c **** #endif
  39:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  40:tmk_core/common/keyboard.c **** #    include "mousekey.h"
  41:tmk_core/common/keyboard.c **** #endif
  42:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  43:tmk_core/common/keyboard.c **** #    include "ps2_mouse.h"
  44:tmk_core/common/keyboard.c **** #endif
  45:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  46:tmk_core/common/keyboard.c **** #    include "serial_mouse.h"
  47:tmk_core/common/keyboard.c **** #endif
  48:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  49:tmk_core/common/keyboard.c **** #    include "adb.h"
  50:tmk_core/common/keyboard.c **** #endif
  51:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  52:tmk_core/common/keyboard.c **** #    include "rgblight.h"
  53:tmk_core/common/keyboard.c **** #endif
  54:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
  55:tmk_core/common/keyboard.c **** #    include "process_steno.h"
  56:tmk_core/common/keyboard.c **** #endif
  57:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
  58:tmk_core/common/keyboard.c **** #    include "fauxclicky.h"
  59:tmk_core/common/keyboard.c **** #endif
  60:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  61:tmk_core/common/keyboard.c **** #    include "serial_link/system/serial_link.h"
  62:tmk_core/common/keyboard.c **** #endif
  63:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  64:tmk_core/common/keyboard.c **** #    include "visualizer/visualizer.h"
  65:tmk_core/common/keyboard.c **** #endif
  66:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
  67:tmk_core/common/keyboard.c **** #    include "pointing_device.h"
  68:tmk_core/common/keyboard.c **** #endif
  69:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
  70:tmk_core/common/keyboard.c **** #    include "process_midi.h"
  71:tmk_core/common/keyboard.c **** #endif
  72:tmk_core/common/keyboard.c **** #ifdef HD44780_ENABLE
  73:tmk_core/common/keyboard.c **** #    include "hd44780.h"
  74:tmk_core/common/keyboard.c **** #endif
  75:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
  76:tmk_core/common/keyboard.c **** #    include "qwiic.h"
  77:tmk_core/common/keyboard.c **** #endif
  78:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
  79:tmk_core/common/keyboard.c **** #    include "oled_driver.h"
  80:tmk_core/common/keyboard.c **** #endif
  81:tmk_core/common/keyboard.c **** #ifdef VELOCIKEY_ENABLE
  82:tmk_core/common/keyboard.c **** #    include "velocikey.h"
  83:tmk_core/common/keyboard.c **** #endif
  84:tmk_core/common/keyboard.c **** 
  85:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  86:tmk_core/common/keyboard.c **** extern const uint16_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
  87:tmk_core/common/keyboard.c **** static matrix_row_t   get_real_keys(uint8_t row, matrix_row_t rowdata) {
  88:tmk_core/common/keyboard.c ****     matrix_row_t out = 0;
  89:tmk_core/common/keyboard.c ****     for (uint8_t col = 0; col < MATRIX_COLS; col++) {
  90:tmk_core/common/keyboard.c ****         // read each key in the row data and check if the keymap defines it as a real key
  91:tmk_core/common/keyboard.c ****         if (pgm_read_byte(&keymaps[0][row][col]) && (rowdata & (1 << col))) {
  92:tmk_core/common/keyboard.c ****             // this creates new row data, if a key is defined in the keymap, it will be set here
  93:tmk_core/common/keyboard.c ****             out |= 1 << col;
  94:tmk_core/common/keyboard.c ****         }
  95:tmk_core/common/keyboard.c ****     }
  96:tmk_core/common/keyboard.c ****     return out;
  97:tmk_core/common/keyboard.c **** }
  98:tmk_core/common/keyboard.c **** 
  99:tmk_core/common/keyboard.c **** static inline bool popcount_more_than_one(matrix_row_t rowdata) {
 100:tmk_core/common/keyboard.c ****     rowdata &= rowdata - 1;  // if there are less than two bits (keys) set, rowdata will become zer
 101:tmk_core/common/keyboard.c ****     return rowdata;
 102:tmk_core/common/keyboard.c **** }
 103:tmk_core/common/keyboard.c **** 
 104:tmk_core/common/keyboard.c **** static inline bool has_ghost_in_row(uint8_t row, matrix_row_t rowdata) {
 105:tmk_core/common/keyboard.c ****     /* No ghost exists when less than 2 keys are down on the row.
 106:tmk_core/common/keyboard.c ****     If there are "active" blanks in the matrix, the key can't be pressed by the user,
 107:tmk_core/common/keyboard.c ****     there is no doubt as to which keys are really being pressed.
 108:tmk_core/common/keyboard.c ****     The ghosts will be ignored, they are KC_NO.   */
 109:tmk_core/common/keyboard.c ****     rowdata = get_real_keys(row, rowdata);
 110:tmk_core/common/keyboard.c ****     if ((popcount_more_than_one(rowdata)) == 0) {
 111:tmk_core/common/keyboard.c ****         return false;
 112:tmk_core/common/keyboard.c ****     }
 113:tmk_core/common/keyboard.c ****     /* Ghost occurs when the row shares a column line with other row,
 114:tmk_core/common/keyboard.c ****     and two columns are read on each row. Blanks in the matrix don't matter,
 115:tmk_core/common/keyboard.c ****     so they are filtered out.
 116:tmk_core/common/keyboard.c ****     If there are two or more real keys pressed and they match columns with
 117:tmk_core/common/keyboard.c ****     at least two of another row's real keys, the row will be ignored. Keep in mind,
 118:tmk_core/common/keyboard.c ****     we are checking one row at a time, not all of them at once.
 119:tmk_core/common/keyboard.c ****     */
 120:tmk_core/common/keyboard.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 121:tmk_core/common/keyboard.c ****         if (i != row && popcount_more_than_one(get_real_keys(i, matrix_get_row(i)) & rowdata)) {
 122:tmk_core/common/keyboard.c ****             return true;
 123:tmk_core/common/keyboard.c ****         }
 124:tmk_core/common/keyboard.c ****     }
 125:tmk_core/common/keyboard.c ****     return false;
 126:tmk_core/common/keyboard.c **** }
 127:tmk_core/common/keyboard.c **** 
 128:tmk_core/common/keyboard.c **** #endif
 129:tmk_core/common/keyboard.c **** 
 130:tmk_core/common/keyboard.c **** void disable_jtag(void) {
  26              		.loc 1 130 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 131:tmk_core/common/keyboard.c **** // To use PF4-7 (PC2-5 on ATmega32A), disable JTAG by writing JTD bit twice within four cycles.
 132:tmk_core/common/keyboard.c **** #if (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_AT90USB1286__) || 
 133:tmk_core/common/keyboard.c ****     MCUCR |= _BV(JTD);
 134:tmk_core/common/keyboard.c ****     MCUCR |= _BV(JTD);
 135:tmk_core/common/keyboard.c **** #elif defined(__AVR_ATmega32A__)
 136:tmk_core/common/keyboard.c ****     MCUCSR |= _BV(JTD);
 137:tmk_core/common/keyboard.c ****     MCUCSR |= _BV(JTD);
 138:tmk_core/common/keyboard.c **** #endif
 139:tmk_core/common/keyboard.c **** }
  31              		.loc 1 139 0
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE284:
  36              		.section	.text.matrix_setup,"ax",%progbits
  37              		.align	1
  38              		.weak	matrix_setup
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu softvfp
  44              	matrix_setup:
  45              	.LFB298:
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              		@ link register save eliminated.
  50 0000 7047     		bx	lr
  51              		.cfi_endproc
  52              	.LFE298:
  54              		.section	.text.keyboard_pre_init_user,"ax",%progbits
  55              		.align	1
  56              		.weak	keyboard_pre_init_user
  57              		.syntax unified
  58              		.thumb
  59              		.thumb_func
  60              		.fpu softvfp
  62              	keyboard_pre_init_user:
  63              	.LFB286:
 140:tmk_core/common/keyboard.c **** 
 141:tmk_core/common/keyboard.c **** /** \brief matrix_setup
 142:tmk_core/common/keyboard.c ****  *
 143:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 144:tmk_core/common/keyboard.c ****  */
 145:tmk_core/common/keyboard.c **** __attribute__((weak)) void matrix_setup(void) {}
 146:tmk_core/common/keyboard.c **** 
 147:tmk_core/common/keyboard.c **** /** \brief keyboard_pre_init_user
 148:tmk_core/common/keyboard.c ****  *
 149:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 150:tmk_core/common/keyboard.c ****  */
 151:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_pre_init_user(void) {}
  64              		.loc 1 151 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              		@ link register save eliminated.
  69              		.loc 1 151 0
  70 0000 7047     		bx	lr
  71              		.cfi_endproc
  72              	.LFE286:
  74              		.section	.text.keyboard_pre_init_kb,"ax",%progbits
  75              		.align	1
  76              		.weak	keyboard_pre_init_kb
  77              		.syntax unified
  78              		.thumb
  79              		.thumb_func
  80              		.fpu softvfp
  82              	keyboard_pre_init_kb:
  83              	.LFB287:
 152:tmk_core/common/keyboard.c **** 
 153:tmk_core/common/keyboard.c **** /** \brief keyboard_pre_init_kb
 154:tmk_core/common/keyboard.c ****  *
 155:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 156:tmk_core/common/keyboard.c ****  */
 157:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_pre_init_kb(void) { keyboard_pre_init_user(); }
  84              		.loc 1 157 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88 0000 08B5     		push	{r3, lr}
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 3, -8
  91              		.cfi_offset 14, -4
  92              		.loc 1 157 0
  93 0002 FFF7FEFF 		bl	keyboard_pre_init_user
  94              	.LVL0:
  95 0006 08BD     		pop	{r3, pc}
  96              		.cfi_endproc
  97              	.LFE287:
  99              		.section	.text.keyboard_post_init_user,"ax",%progbits
 100              		.align	1
 101              		.weak	keyboard_post_init_user
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 105              		.fpu softvfp
 107              	keyboard_post_init_user:
 108              	.LFB296:
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              		@ link register save eliminated.
 113 0000 7047     		bx	lr
 114              		.cfi_endproc
 115              	.LFE296:
 117              		.section	.text.keyboard_post_init_kb,"ax",%progbits
 118              		.align	1
 119              		.weak	keyboard_post_init_kb
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 123              		.fpu softvfp
 125              	keyboard_post_init_kb:
 126              	.LFB289:
 158:tmk_core/common/keyboard.c **** 
 159:tmk_core/common/keyboard.c **** /** \brief keyboard_post_init_user
 160:tmk_core/common/keyboard.c ****  *
 161:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 162:tmk_core/common/keyboard.c ****  */
 163:tmk_core/common/keyboard.c **** 
 164:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_post_init_user() {}
 165:tmk_core/common/keyboard.c **** 
 166:tmk_core/common/keyboard.c **** /** \brief keyboard_post_init_kb
 167:tmk_core/common/keyboard.c ****  *
 168:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 169:tmk_core/common/keyboard.c ****  */
 170:tmk_core/common/keyboard.c **** 
 171:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_post_init_kb(void) { keyboard_post_init_user(); }
 127              		.loc 1 171 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131              		.loc 1 171 0
 132 0000 08B5     		push	{r3, lr}
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 3, -8
 135              		.cfi_offset 14, -4
 136              		.loc 1 171 0
 137 0002 FFF7FEFF 		bl	keyboard_post_init_user
 138              	.LVL1:
 139 0006 08BD     		pop	{r3, pc}
 140              		.cfi_endproc
 141              	.LFE289:
 143              		.section	.text.keyboard_setup,"ax",%progbits
 144              		.align	1
 145              		.global	keyboard_setup
 146              		.syntax unified
 147              		.thumb
 148              		.thumb_func
 149              		.fpu softvfp
 151              	keyboard_setup:
 152              	.LFB290:
 172:tmk_core/common/keyboard.c **** 
 173:tmk_core/common/keyboard.c **** /** \brief keyboard_setup
 174:tmk_core/common/keyboard.c ****  *
 175:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 176:tmk_core/common/keyboard.c ****  */
 177:tmk_core/common/keyboard.c **** void keyboard_setup(void) {
 153              		.loc 1 177 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157 0000 08B5     		push	{r3, lr}
 158              		.cfi_def_cfa_offset 8
 159              		.cfi_offset 3, -8
 160              		.cfi_offset 14, -4
 178:tmk_core/common/keyboard.c **** #ifndef NO_JTAG_DISABLE
 179:tmk_core/common/keyboard.c ****     disable_jtag();
 180:tmk_core/common/keyboard.c **** #endif
 181:tmk_core/common/keyboard.c ****     matrix_setup();
 161              		.loc 1 181 0
 162 0002 FFF7FEFF 		bl	matrix_setup
 163              	.LVL2:
 182:tmk_core/common/keyboard.c ****     keyboard_pre_init_kb();
 164              		.loc 1 182 0
 165 0006 FFF7FEFF 		bl	keyboard_pre_init_kb
 166              	.LVL3:
 183:tmk_core/common/keyboard.c **** }
 167              		.loc 1 183 0
 168 000a 08BD     		pop	{r3, pc}
 169              		.cfi_endproc
 170              	.LFE290:
 172              		.section	.text.is_keyboard_master,"ax",%progbits
 173              		.align	1
 174              		.weak	is_keyboard_master
 175              		.syntax unified
 176              		.thumb
 177              		.thumb_func
 178              		.fpu softvfp
 180              	is_keyboard_master:
 181              	.LFB291:
 184:tmk_core/common/keyboard.c **** 
 185:tmk_core/common/keyboard.c **** /** \brief is_keyboard_master
 186:tmk_core/common/keyboard.c ****  *
 187:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 188:tmk_core/common/keyboard.c ****  */
 189:tmk_core/common/keyboard.c **** __attribute__((weak)) bool is_keyboard_master(void) { return true; }
 182              		.loc 1 189 0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              		@ link register save eliminated.
 187              		.loc 1 189 0
 188 0000 0120     		movs	r0, #1
 189 0002 7047     		bx	lr
 190              		.cfi_endproc
 191              	.LFE291:
 193              		.section	.text.keyboard_init,"ax",%progbits
 194              		.align	1
 195              		.global	keyboard_init
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 199              		.fpu softvfp
 201              	keyboard_init:
 202              	.LFB292:
 190:tmk_core/common/keyboard.c **** 
 191:tmk_core/common/keyboard.c **** /** \brief keyboard_init
 192:tmk_core/common/keyboard.c ****  *
 193:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 194:tmk_core/common/keyboard.c ****  */
 195:tmk_core/common/keyboard.c **** void keyboard_init(void) {
 203              		.loc 1 195 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207 0000 08B5     		push	{r3, lr}
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 3, -8
 210              		.cfi_offset 14, -4
 196:tmk_core/common/keyboard.c ****     timer_init();
 211              		.loc 1 196 0
 212 0002 FFF7FEFF 		bl	timer_init
 213              	.LVL4:
 197:tmk_core/common/keyboard.c ****     matrix_init();
 214              		.loc 1 197 0
 215 0006 FFF7FEFF 		bl	matrix_init
 216              	.LVL5:
 198:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
 199:tmk_core/common/keyboard.c ****     qwiic_init();
 200:tmk_core/common/keyboard.c **** #endif
 201:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
 202:tmk_core/common/keyboard.c ****     oled_init(OLED_ROTATION_0);
 203:tmk_core/common/keyboard.c **** #endif
 204:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 205:tmk_core/common/keyboard.c ****     ps2_mouse_init();
 206:tmk_core/common/keyboard.c **** #endif
 207:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 208:tmk_core/common/keyboard.c ****     serial_mouse_init();
 209:tmk_core/common/keyboard.c **** #endif
 210:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 211:tmk_core/common/keyboard.c ****     adb_mouse_init();
 212:tmk_core/common/keyboard.c **** #endif
 213:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 214:tmk_core/common/keyboard.c ****     bootmagic();
 217              		.loc 1 214 0
 218 000a FFF7FEFF 		bl	bootmagic
 219              	.LVL6:
 215:tmk_core/common/keyboard.c **** #else
 216:tmk_core/common/keyboard.c ****     magic();
 217:tmk_core/common/keyboard.c **** #endif
 218:tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 219:tmk_core/common/keyboard.c ****     backlight_init();
 220:tmk_core/common/keyboard.c **** #endif
 221:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 222:tmk_core/common/keyboard.c ****     rgblight_init();
 223:tmk_core/common/keyboard.c **** #endif
 224:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
 225:tmk_core/common/keyboard.c ****     steno_init();
 226:tmk_core/common/keyboard.c **** #endif
 227:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
 228:tmk_core/common/keyboard.c ****     fauxclicky_init();
 229:tmk_core/common/keyboard.c **** #endif
 230:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 231:tmk_core/common/keyboard.c ****     pointing_device_init();
 232:tmk_core/common/keyboard.c **** #endif
 233:tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 234:tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 235:tmk_core/common/keyboard.c **** #endif
 236:tmk_core/common/keyboard.c ****     keyboard_post_init_kb(); /* Always keep this last */
 220              		.loc 1 236 0
 221 000e FFF7FEFF 		bl	keyboard_post_init_kb
 222              	.LVL7:
 237:tmk_core/common/keyboard.c **** }
 223              		.loc 1 237 0
 224 0012 08BD     		pop	{r3, pc}
 225              		.cfi_endproc
 226              	.LFE292:
 228              		.section	.text.keyboard_set_leds,"ax",%progbits
 229              		.align	1
 230              		.global	keyboard_set_leds
 231              		.syntax unified
 232              		.thumb
 233              		.thumb_func
 234              		.fpu softvfp
 236              	keyboard_set_leds:
 237              	.LFB294:
 238:tmk_core/common/keyboard.c **** 
 239:tmk_core/common/keyboard.c **** /** \brief Keyboard task: Do keyboard routine jobs
 240:tmk_core/common/keyboard.c ****  *
 241:tmk_core/common/keyboard.c ****  * Do routine keyboard jobs:
 242:tmk_core/common/keyboard.c ****  *
 243:tmk_core/common/keyboard.c ****  * * scan matrix
 244:tmk_core/common/keyboard.c ****  * * handle mouse movements
 245:tmk_core/common/keyboard.c ****  * * run visualizer code
 246:tmk_core/common/keyboard.c ****  * * handle midi commands
 247:tmk_core/common/keyboard.c ****  * * light LEDs
 248:tmk_core/common/keyboard.c ****  *
 249:tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 250:tmk_core/common/keyboard.c ****  */
 251:tmk_core/common/keyboard.c **** void keyboard_task(void) {
 252:tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 253:tmk_core/common/keyboard.c ****     static uint8_t      led_status    = 0;
 254:tmk_core/common/keyboard.c ****     matrix_row_t        matrix_row    = 0;
 255:tmk_core/common/keyboard.c ****     matrix_row_t        matrix_change = 0;
 256:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 257:tmk_core/common/keyboard.c ****     uint8_t keys_processed = 0;
 258:tmk_core/common/keyboard.c **** #endif
 259:tmk_core/common/keyboard.c **** 
 260:tmk_core/common/keyboard.c **** #if defined(OLED_DRIVER_ENABLE) && !defined(OLED_DISABLE_TIMEOUT)
 261:tmk_core/common/keyboard.c ****     uint8_t ret = matrix_scan();
 262:tmk_core/common/keyboard.c **** #else
 263:tmk_core/common/keyboard.c ****     matrix_scan();
 264:tmk_core/common/keyboard.c **** #endif
 265:tmk_core/common/keyboard.c **** 
 266:tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 267:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 268:tmk_core/common/keyboard.c ****             matrix_row    = matrix_get_row(r);
 269:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 270:tmk_core/common/keyboard.c ****             if (matrix_change) {
 271:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 272:tmk_core/common/keyboard.c ****                 if (has_ghost_in_row(r, matrix_row)) {
 273:tmk_core/common/keyboard.c ****                     continue;
 274:tmk_core/common/keyboard.c ****                 }
 275:tmk_core/common/keyboard.c **** #endif
 276:tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 277:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 278:tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1 << c)) {
 279:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 280:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & ((matri
 281:tmk_core/common/keyboard.c ****                         });
 282:tmk_core/common/keyboard.c ****                         // record a processed key
 283:tmk_core/common/keyboard.c ****                         matrix_prev[r] ^= ((matrix_row_t)1 << c);
 284:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 285:tmk_core/common/keyboard.c ****                         // only jump out if we have processed "enough" keys.
 286:tmk_core/common/keyboard.c ****                         if (++keys_processed >= QMK_KEYS_PER_SCAN)
 287:tmk_core/common/keyboard.c **** #endif
 288:tmk_core/common/keyboard.c ****                             // process a key per task call
 289:tmk_core/common/keyboard.c ****                             goto MATRIX_LOOP_END;
 290:tmk_core/common/keyboard.c ****                     }
 291:tmk_core/common/keyboard.c ****                 }
 292:tmk_core/common/keyboard.c ****             }
 293:tmk_core/common/keyboard.c ****         }
 294:tmk_core/common/keyboard.c ****     }
 295:tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 296:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 297:tmk_core/common/keyboard.c ****     // we can get here with some keys processed now.
 298:tmk_core/common/keyboard.c ****     if (!keys_processed)
 299:tmk_core/common/keyboard.c **** #endif
 300:tmk_core/common/keyboard.c ****         action_exec(TICK);
 301:tmk_core/common/keyboard.c **** 
 302:tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 303:tmk_core/common/keyboard.c **** 
 304:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
 305:tmk_core/common/keyboard.c ****     qwiic_task();
 306:tmk_core/common/keyboard.c **** #endif
 307:tmk_core/common/keyboard.c **** 
 308:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
 309:tmk_core/common/keyboard.c ****     oled_task();
 310:tmk_core/common/keyboard.c **** #    ifndef OLED_DISABLE_TIMEOUT
 311:tmk_core/common/keyboard.c ****     // Wake up oled if user is using those fabulous keys!
 312:tmk_core/common/keyboard.c ****     if (ret) oled_on();
 313:tmk_core/common/keyboard.c **** #    endif
 314:tmk_core/common/keyboard.c **** #endif
 315:tmk_core/common/keyboard.c **** 
 316:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 317:tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 318:tmk_core/common/keyboard.c ****     mousekey_task();
 319:tmk_core/common/keyboard.c **** #endif
 320:tmk_core/common/keyboard.c **** 
 321:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 322:tmk_core/common/keyboard.c ****     ps2_mouse_task();
 323:tmk_core/common/keyboard.c **** #endif
 324:tmk_core/common/keyboard.c **** 
 325:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 326:tmk_core/common/keyboard.c ****     serial_mouse_task();
 327:tmk_core/common/keyboard.c **** #endif
 328:tmk_core/common/keyboard.c **** 
 329:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 330:tmk_core/common/keyboard.c ****     adb_mouse_task();
 331:tmk_core/common/keyboard.c **** #endif
 332:tmk_core/common/keyboard.c **** 
 333:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 334:tmk_core/common/keyboard.c ****     serial_link_update();
 335:tmk_core/common/keyboard.c **** #endif
 336:tmk_core/common/keyboard.c **** 
 337:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 338:tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, visualizer_get_mods(), host_keyboard_leds()
 339:tmk_core/common/keyboard.c **** #endif
 340:tmk_core/common/keyboard.c **** 
 341:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 342:tmk_core/common/keyboard.c ****     pointing_device_task();
 343:tmk_core/common/keyboard.c **** #endif
 344:tmk_core/common/keyboard.c **** 
 345:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
 346:tmk_core/common/keyboard.c ****     midi_task();
 347:tmk_core/common/keyboard.c **** #endif
 348:tmk_core/common/keyboard.c **** 
 349:tmk_core/common/keyboard.c **** #ifdef VELOCIKEY_ENABLE
 350:tmk_core/common/keyboard.c ****     if (velocikey_enabled()) {
 351:tmk_core/common/keyboard.c ****         velocikey_decelerate();
 352:tmk_core/common/keyboard.c ****     }
 353:tmk_core/common/keyboard.c **** #endif
 354:tmk_core/common/keyboard.c **** 
 355:tmk_core/common/keyboard.c ****     // update LED
 356:tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 357:tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 358:tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 359:tmk_core/common/keyboard.c ****     }
 360:tmk_core/common/keyboard.c **** }
 361:tmk_core/common/keyboard.c **** 
 362:tmk_core/common/keyboard.c **** /** \brief keyboard set leds
 363:tmk_core/common/keyboard.c ****  *
 364:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 365:tmk_core/common/keyboard.c ****  */
 366:tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds) {
 238              		.loc 1 366 0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242              	.LVL8:
 243 0000 38B5     		push	{r3, r4, r5, lr}
 244              		.cfi_def_cfa_offset 16
 245              		.cfi_offset 3, -16
 246              		.cfi_offset 4, -12
 247              		.cfi_offset 5, -8
 248              		.cfi_offset 14, -4
 367:tmk_core/common/keyboard.c ****     if (debug_keyboard) {
 249              		.loc 1 367 0
 250 0002 0E4C     		ldr	r4, .L25
 251 0004 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 366:tmk_core/common/keyboard.c ****     if (debug_keyboard) {
 252              		.loc 1 366 0
 253 0006 0546     		mov	r5, r0
 254              		.loc 1 367 0
 255 0008 5807     		lsls	r0, r3, #29
 256              	.LVL9:
 257 000a 11D5     		bpl	.L12
 368:tmk_core/common/keyboard.c ****         debug("keyboard_set_led: ");
 258              		.loc 1 368 0
 259 000c D907     		lsls	r1, r3, #31
 260 000e 02D5     		bpl	.L13
 261              		.loc 1 368 0 is_stmt 0 discriminator 1
 262 0010 0B48     		ldr	r0, .L25+4
 263 0012 FFF7FEFF 		bl	tfp_printf
 264              	.LVL10:
 265              	.L13:
 369:tmk_core/common/keyboard.c ****         debug_hex8(leds);
 266              		.loc 1 369 0 is_stmt 1
 267 0016 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 268 0018 DA07     		lsls	r2, r3, #31
 269 001a 03D5     		bpl	.L14
 270              		.loc 1 369 0 is_stmt 0 discriminator 1
 271 001c 2946     		mov	r1, r5
 272 001e 0948     		ldr	r0, .L25+8
 273 0020 FFF7FEFF 		bl	tfp_printf
 274              	.LVL11:
 275              	.L14:
 370:tmk_core/common/keyboard.c ****         debug("\n");
 276              		.loc 1 370 0 is_stmt 1
 277 0024 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 278 0026 DB07     		lsls	r3, r3, #31
 279 0028 02D5     		bpl	.L12
 280              		.loc 1 370 0 is_stmt 0 discriminator 1
 281 002a 0748     		ldr	r0, .L25+12
 282 002c FFF7FEFF 		bl	tfp_printf
 283              	.LVL12:
 284              	.L12:
 371:tmk_core/common/keyboard.c ****     }
 372:tmk_core/common/keyboard.c ****     led_set(leds);
 285              		.loc 1 372 0 is_stmt 1
 286 0030 2846     		mov	r0, r5
 373:tmk_core/common/keyboard.c **** }
 287              		.loc 1 373 0
 288 0032 BDE83840 		pop	{r3, r4, r5, lr}
 289              		.cfi_restore 14
 290              		.cfi_restore 5
 291              		.cfi_restore 4
 292              		.cfi_restore 3
 293              		.cfi_def_cfa_offset 0
 372:tmk_core/common/keyboard.c **** }
 294              		.loc 1 372 0
 295 0036 FFF7FEBF 		b	led_set
 296              	.LVL13:
 297              	.L26:
 298 003a 00BF     		.align	2
 299              	.L25:
 300 003c 00000000 		.word	debug_config
 301 0040 00000000 		.word	.LC0
 302 0044 13000000 		.word	.LC1
 303 0048 18000000 		.word	.LC2
 304              		.cfi_endproc
 305              	.LFE294:
 307              		.section	.text.keyboard_task,"ax",%progbits
 308              		.align	1
 309              		.global	keyboard_task
 310              		.syntax unified
 311              		.thumb
 312              		.thumb_func
 313              		.fpu softvfp
 315              	keyboard_task:
 316              	.LFB293:
 251:tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 317              		.loc 1 251 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 16
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 321              	.LVL14:
 322 0000 2DE9FF47 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, lr}
 323              		.cfi_def_cfa_offset 48
 324              		.cfi_offset 4, -32
 325              		.cfi_offset 5, -28
 326              		.cfi_offset 6, -24
 327              		.cfi_offset 7, -20
 328              		.cfi_offset 8, -16
 329              		.cfi_offset 9, -12
 330              		.cfi_offset 10, -8
 331              		.cfi_offset 14, -4
 263:tmk_core/common/keyboard.c **** #endif
 332              		.loc 1 263 0
 333 0004 FFF7FEFF 		bl	matrix_scan
 334              	.LVL15:
 266:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 335              		.loc 1 266 0
 336 0008 FFF7FEFF 		bl	is_keyboard_master
 337              	.LVL16:
 338 000c 0028     		cmp	r0, #0
 339 000e 4DD0     		beq	.L28
 340              	.LBB4:
 269:tmk_core/common/keyboard.c ****             if (matrix_change) {
 341              		.loc 1 269 0
 342 0010 314E     		ldr	r6, .L44
 276:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 343              		.loc 1 276 0
 344 0012 DFF8CC90 		ldr	r9, .L44+8
 345              	.LBE4:
 346 0016 0024     		movs	r4, #0
 347 0018 3746     		mov	r7, r6
 348              	.LVL17:
 349              	.L34:
 350 001a 5FFA84F8 		uxtb	r8, r4
 351              	.LVL18:
 352              	.LBB7:
 268:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 353              		.loc 1 268 0
 354 001e 4046     		mov	r0, r8
 355 0020 FFF7FEFF 		bl	matrix_get_row
 356              	.LVL19:
 269:tmk_core/common/keyboard.c ****             if (matrix_change) {
 357              		.loc 1 269 0
 358 0024 A55D     		ldrb	r5, [r4, r6]	@ zero_extendqisi2
 270:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 359              		.loc 1 270 0
 360 0026 8542     		cmp	r5, r0
 268:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 361              		.loc 1 268 0
 362 0028 8246     		mov	r10, r0
 363              	.LVL20:
 270:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 364              		.loc 1 270 0
 365 002a 3CD0     		beq	.L29
 276:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 366              		.loc 1 276 0
 367 002c 99F80030 		ldrb	r3, [r9]	@ zero_extendqisi2
 368 0030 9807     		lsls	r0, r3, #30
 369              	.LVL21:
 370 0032 01D5     		bpl	.L30
 276:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 371              		.loc 1 276 0 is_stmt 0 discriminator 1
 372 0034 FFF7FEFF 		bl	matrix_print
 373              	.LVL22:
 374              	.L30:
 269:tmk_core/common/keyboard.c ****             if (matrix_change) {
 375              		.loc 1 269 0 is_stmt 1
 376 0038 85EA0A05 		eor	r5, r5, r10
 377              	.LBE7:
 378 003c 0023     		movs	r3, #0
 379              	.LBB8:
 380              	.LBB5:
 278:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 381              		.loc 1 278 0
 382 003e EDB2     		uxtb	r5, r5
 383              	.LVL23:
 384              	.L33:
 385 0040 45FA03F1 		asr	r1, r5, r3
 386 0044 C907     		lsls	r1, r1, #31
 387 0046 DAB2     		uxtb	r2, r3
 388              	.LVL24:
 389 0048 2AD5     		bpl	.L31
 280:tmk_core/common/keyboard.c ****                         });
 390              		.loc 1 280 0
 391 004a 0125     		movs	r5, #1
 392 004c 9D40     		lsls	r5, r5, r3
 393 004e 1AEA050F 		tst	r10, r5
 394 0052 14BF     		ite	ne
 395 0054 0123     		movne	r3, #1
 396 0056 0023     		moveq	r3, #0
 279:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & ((matri
 397              		.loc 1 279 0
 398 0058 8DF80020 		strb	r2, [sp]
 280:tmk_core/common/keyboard.c ****                         });
 399              		.loc 1 280 0
 400 005c 8DF80230 		strb	r3, [sp, #2]
 279:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & ((matri
 401              		.loc 1 279 0
 402 0060 8DF80180 		strb	r8, [sp, #1]
 280:tmk_core/common/keyboard.c ****                         });
 403              		.loc 1 280 0
 404 0064 FFF7FEFF 		bl	timer_read
 405              	.LVL25:
 279:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & ((matri
 406              		.loc 1 279 0
 407 0068 40F00100 		orr	r0, r0, #1
 408 006c 6B46     		mov	r3, sp
 409 006e ADF80400 		strh	r0, [sp, #4]	@ movhi
 410 0072 93E80300 		ldm	r3, {r0, r1}
 411 0076 FFF7FEFF 		bl	action_exec
 412              	.LVL26:
 283:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 413              		.loc 1 283 0
 414 007a 3B5D     		ldrb	r3, [r7, r4]	@ zero_extendqisi2
 415 007c 6B40     		eors	r3, r3, r5
 416 007e 3B55     		strb	r3, [r7, r4]
 417              	.LVL27:
 418              	.L32:
 419              	.LBE5:
 420              	.LBE8:
 356:tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 421              		.loc 1 356 0
 422 0080 164C     		ldr	r4, .L44+4
 318:tmk_core/common/keyboard.c **** #endif
 423              		.loc 1 318 0
 424 0082 FFF7FEFF 		bl	mousekey_task
 425              	.LVL28:
 356:tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 426              		.loc 1 356 0
 427 0086 FFF7FEFF 		bl	host_keyboard_leds
 428              	.LVL29:
 429 008a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 430 008c 8342     		cmp	r3, r0
 431 008e 20D0     		beq	.L27
 357:tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 432              		.loc 1 357 0
 433 0090 FFF7FEFF 		bl	host_keyboard_leds
 434              	.LVL30:
 435 0094 2070     		strb	r0, [r4]
 360:tmk_core/common/keyboard.c **** 
 436              		.loc 1 360 0
 437 0096 04B0     		add	sp, sp, #16
 438              		.cfi_remember_state
 439              		.cfi_def_cfa_offset 32
 440              		@ sp needed
 441 0098 BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 442              		.cfi_restore 14
 443              		.cfi_restore 10
 444              		.cfi_restore 9
 445              		.cfi_restore 8
 446              		.cfi_restore 7
 447              		.cfi_restore 6
 448              		.cfi_restore 5
 449              		.cfi_restore 4
 450              		.cfi_def_cfa_offset 0
 358:tmk_core/common/keyboard.c ****     }
 451              		.loc 1 358 0
 452 009c FFF7FEBF 		b	keyboard_set_leds
 453              	.LVL31:
 454              	.L31:
 455              		.cfi_restore_state
 456 00a0 0133     		adds	r3, r3, #1
 457              	.LVL32:
 458              	.LBB9:
 459              	.LBB6:
 277:tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1 << c)) {
 460              		.loc 1 277 0 discriminator 2
 461 00a2 062B     		cmp	r3, #6
 462 00a4 CCD1     		bne	.L33
 463              	.LVL33:
 464              	.L29:
 465 00a6 0134     		adds	r4, r4, #1
 466              	.LVL34:
 467              	.LBE6:
 267:tmk_core/common/keyboard.c ****             matrix_row    = matrix_get_row(r);
 468              		.loc 1 267 0
 469 00a8 0A2C     		cmp	r4, #10
 470 00aa B6D1     		bne	.L34
 471              	.LVL35:
 472              	.L28:
 473              	.LBE9:
 300:tmk_core/common/keyboard.c **** 
 474              		.loc 1 300 0
 475 00ac 4FF6FF73 		movw	r3, #65535
 476 00b0 ADF80830 		strh	r3, [sp, #8]	@ movhi
 477 00b4 0023     		movs	r3, #0
 478 00b6 8DF80A30 		strb	r3, [sp, #10]
 479 00ba FFF7FEFF 		bl	timer_read
 480              	.LVL36:
 481 00be 40F00100 		orr	r0, r0, #1
 482 00c2 ADF80C00 		strh	r0, [sp, #12]	@ movhi
 483 00c6 04AB     		add	r3, sp, #16
 484 00c8 13E90300 		ldmdb	r3, {r0, r1}
 485 00cc FFF7FEFF 		bl	action_exec
 486              	.LVL37:
 487 00d0 D6E7     		b	.L32
 488              	.L27:
 360:tmk_core/common/keyboard.c **** 
 489              		.loc 1 360 0
 490 00d2 04B0     		add	sp, sp, #16
 491              		.cfi_def_cfa_offset 32
 492              		@ sp needed
 493 00d4 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 494              	.L45:
 495              		.align	2
 496              	.L44:
 497 00d8 00000000 		.word	.LANCHOR0
 498 00dc 00000000 		.word	.LANCHOR1
 499 00e0 00000000 		.word	debug_config
 500              		.cfi_endproc
 501              	.LFE293:
 503              		.section	.bss.led_status.9569,"aw",%nobits
 504              		.set	.LANCHOR1,. + 0
 507              	led_status.9569:
 508 0000 00       		.space	1
 509              		.section	.bss.matrix_prev.9568,"aw",%nobits
 510              		.set	.LANCHOR0,. + 0
 513              	matrix_prev.9568:
 514 0000 00000000 		.space	10
 514      00000000 
 514      0000
 515              		.section	.rodata.keyboard_set_leds.str1.1,"aMS",%progbits,1
 516              	.LC0:
 517 0000 6B657962 		.ascii	"keyboard_set_led: \000"
 517      6F617264 
 517      5F736574 
 517      5F6C6564 
 517      3A2000
 518              	.LC1:
 519 0013 25303258 		.ascii	"%02X\000"
 519      00
 520              	.LC2:
 521 0018 0A00     		.ascii	"\012\000"
 522              		.text
 523              	.Letext0:
 524              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 525              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 526              		.file 4 "tmk_core/common/keyboard.h"
 527              		.file 5 "tmk_core/common/matrix.h"
 528              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 529              		.file 7 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 530              		.file 8 "./lib/chibios/os/rt/include/chsystypes.h"
 531              		.file 9 "./lib/chibios/os/rt/include/chschd.h"
 532              		.file 10 "tmk_core/common/action.h"
 533              		.file 11 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 534              		.file 12 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 535              		.file 13 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/stm32f303xc.h"
 536              		.file 14 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 537              		.file 15 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 538              		.file 16 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 539              		.file 17 "./lib/chibios/os/rt/include/chtm.h"
 540              		.file 18 "./lib/chibios/os/rt/include/chsem.h"
 541              		.file 19 "./lib/chibios/os/rt/include/chmtx.h"
 542              		.file 20 "./lib/chibios/os/rt/include/chsys.h"
 543              		.file 21 "./lib/chibios/os/rt/include/chregistry.h"
 544              		.file 22 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 545              		.file 23 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 546              		.file 24 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 547              		.file 25 "./lib/chibios/os/hal/include/hal_dac.h"
 548              		.file 26 "./lib/chibios/os/hal/ports/STM32/LLD/DACv1/hal_dac_lld.h"
 549              		.file 27 "./lib/chibios/os/hal/include/hal_gpt.h"
 550              		.file 28 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_gpt_lld.h"
 551              		.file 29 "./lib/chibios/os/hal/include/hal_i2c.h"
 552              		.file 30 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 553              		.file 31 "./lib/chibios/os/hal/include/hal_pwm.h"
 554              		.file 32 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 555              		.file 33 "./lib/chibios/os/hal/include/hal_usb.h"
 556              		.file 34 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 557              		.file 35 "tmk_core/common/host.h"
 558              		.file 36 "tmk_core/common/debug.h"
 559              		.file 37 "quantum/keycode_config.h"
 560              		.file 38 "quantum/keymap.h"
 561              		.file 39 "tmk_core/common/timer.h"
 562              		.file 40 "tmk_core/common/command.h"
 563              		.file 41 "tmk_core/common/action_layer.h"
 564              		.file 42 "tmk_core/common/mousekey.h"
 565              		.file 43 "tmk_core/common/chibios/printf.h"
 566              		.file 44 "tmk_core/common/led.h"
 567              		.file 45 "tmk_core/common/bootmagic.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
/var/tmp//cc2GlWYo.s:16     .text.disable_jtag:0000000000000000 $t
/var/tmp//cc2GlWYo.s:23     .text.disable_jtag:0000000000000000 disable_jtag
/var/tmp//cc2GlWYo.s:37     .text.matrix_setup:0000000000000000 $t
/var/tmp//cc2GlWYo.s:44     .text.matrix_setup:0000000000000000 matrix_setup
/var/tmp//cc2GlWYo.s:55     .text.keyboard_pre_init_user:0000000000000000 $t
/var/tmp//cc2GlWYo.s:62     .text.keyboard_pre_init_user:0000000000000000 keyboard_pre_init_user
/var/tmp//cc2GlWYo.s:75     .text.keyboard_pre_init_kb:0000000000000000 $t
/var/tmp//cc2GlWYo.s:82     .text.keyboard_pre_init_kb:0000000000000000 keyboard_pre_init_kb
/var/tmp//cc2GlWYo.s:100    .text.keyboard_post_init_user:0000000000000000 $t
/var/tmp//cc2GlWYo.s:107    .text.keyboard_post_init_user:0000000000000000 keyboard_post_init_user
/var/tmp//cc2GlWYo.s:118    .text.keyboard_post_init_kb:0000000000000000 $t
/var/tmp//cc2GlWYo.s:125    .text.keyboard_post_init_kb:0000000000000000 keyboard_post_init_kb
/var/tmp//cc2GlWYo.s:144    .text.keyboard_setup:0000000000000000 $t
/var/tmp//cc2GlWYo.s:151    .text.keyboard_setup:0000000000000000 keyboard_setup
/var/tmp//cc2GlWYo.s:173    .text.is_keyboard_master:0000000000000000 $t
/var/tmp//cc2GlWYo.s:180    .text.is_keyboard_master:0000000000000000 is_keyboard_master
/var/tmp//cc2GlWYo.s:194    .text.keyboard_init:0000000000000000 $t
/var/tmp//cc2GlWYo.s:201    .text.keyboard_init:0000000000000000 keyboard_init
/var/tmp//cc2GlWYo.s:229    .text.keyboard_set_leds:0000000000000000 $t
/var/tmp//cc2GlWYo.s:236    .text.keyboard_set_leds:0000000000000000 keyboard_set_leds
/var/tmp//cc2GlWYo.s:300    .text.keyboard_set_leds:000000000000003c $d
/var/tmp//cc2GlWYo.s:308    .text.keyboard_task:0000000000000000 $t
/var/tmp//cc2GlWYo.s:315    .text.keyboard_task:0000000000000000 keyboard_task
/var/tmp//cc2GlWYo.s:497    .text.keyboard_task:00000000000000d8 $d
/var/tmp//cc2GlWYo.s:507    .bss.led_status.9569:0000000000000000 led_status.9569
/var/tmp//cc2GlWYo.s:508    .bss.led_status.9569:0000000000000000 $d
/var/tmp//cc2GlWYo.s:513    .bss.matrix_prev.9568:0000000000000000 matrix_prev.9568
/var/tmp//cc2GlWYo.s:514    .bss.matrix_prev.9568:0000000000000000 $d

UNDEFINED SYMBOLS
timer_init
matrix_init
bootmagic
tfp_printf
led_set
debug_config
matrix_scan
matrix_get_row
matrix_print
timer_read
action_exec
mousekey_task
host_keyboard_leds
