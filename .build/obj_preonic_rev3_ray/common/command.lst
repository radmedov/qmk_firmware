   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"command.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.mousekey_console_help,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	mousekey_console_help:
  23              	.LFB300:
  24              		.file 1 "tmk_core/common/command.c"
   1:tmk_core/common/command.c **** /*
   2:tmk_core/common/command.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/command.c **** 
   4:tmk_core/common/command.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/command.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/command.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/command.c **** (at your option) any later version.
   8:tmk_core/common/command.c **** 
   9:tmk_core/common/command.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/command.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/command.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/command.c **** GNU General Public License for more details.
  13:tmk_core/common/command.c **** 
  14:tmk_core/common/command.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/command.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/command.c **** */
  17:tmk_core/common/command.c **** #include <stdint.h>
  18:tmk_core/common/command.c **** #include <stdbool.h>
  19:tmk_core/common/command.c **** #include "wait.h"
  20:tmk_core/common/command.c **** #include "keycode.h"
  21:tmk_core/common/command.c **** #include "host.h"
  22:tmk_core/common/command.c **** #include "keymap.h"
  23:tmk_core/common/command.c **** #include "print.h"
  24:tmk_core/common/command.c **** #include "debug.h"
  25:tmk_core/common/command.c **** #include "util.h"
  26:tmk_core/common/command.c **** #include "timer.h"
  27:tmk_core/common/command.c **** #include "keyboard.h"
  28:tmk_core/common/command.c **** #include "bootloader.h"
  29:tmk_core/common/command.c **** #include "action_layer.h"
  30:tmk_core/common/command.c **** #include "action_util.h"
  31:tmk_core/common/command.c **** #include "eeconfig.h"
  32:tmk_core/common/command.c **** #include "sleep_led.h"
  33:tmk_core/common/command.c **** #include "led.h"
  34:tmk_core/common/command.c **** #include "command.h"
  35:tmk_core/common/command.c **** #include "backlight.h"
  36:tmk_core/common/command.c **** #include "quantum.h"
  37:tmk_core/common/command.c **** #include "version.h"
  38:tmk_core/common/command.c **** 
  39:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  40:tmk_core/common/command.c **** #    include "mousekey.h"
  41:tmk_core/common/command.c **** #endif
  42:tmk_core/common/command.c **** 
  43:tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
  44:tmk_core/common/command.c **** #    include "usb_keyboard.h"
  45:tmk_core/common/command.c **** #    ifdef EXTRAKEY_ENABLE
  46:tmk_core/common/command.c **** #        include "usb_extra.h"
  47:tmk_core/common/command.c **** #    endif
  48:tmk_core/common/command.c **** #endif
  49:tmk_core/common/command.c **** 
  50:tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
  51:tmk_core/common/command.c **** #    include "usbdrv.h"
  52:tmk_core/common/command.c **** #endif
  53:tmk_core/common/command.c **** 
  54:tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
  55:tmk_core/common/command.c **** #    include "audio.h"
  56:tmk_core/common/command.c **** #endif /* AUDIO_ENABLE */
  57:tmk_core/common/command.c **** 
  58:tmk_core/common/command.c **** static bool command_common(uint8_t code);
  59:tmk_core/common/command.c **** static void command_common_help(void);
  60:tmk_core/common/command.c **** static void print_version(void);
  61:tmk_core/common/command.c **** static void print_status(void);
  62:tmk_core/common/command.c **** static bool command_console(uint8_t code);
  63:tmk_core/common/command.c **** static void command_console_help(void);
  64:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  65:tmk_core/common/command.c **** static bool mousekey_console(uint8_t code);
  66:tmk_core/common/command.c **** static void mousekey_console_help(void);
  67:tmk_core/common/command.c **** #endif
  68:tmk_core/common/command.c **** 
  69:tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer);
  70:tmk_core/common/command.c **** 
  71:tmk_core/common/command.c **** command_state_t command_state = ONESHOT;
  72:tmk_core/common/command.c **** 
  73:tmk_core/common/command.c **** bool command_proc(uint8_t code) {
  74:tmk_core/common/command.c ****     switch (command_state) {
  75:tmk_core/common/command.c ****         case ONESHOT:
  76:tmk_core/common/command.c ****             if (!IS_COMMAND()) return false;
  77:tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
  78:tmk_core/common/command.c ****             break;
  79:tmk_core/common/command.c ****         case CONSOLE:
  80:tmk_core/common/command.c ****             if (IS_COMMAND())
  81:tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
  82:tmk_core/common/command.c ****             else
  83:tmk_core/common/command.c ****                 return (command_console_extra(code) || command_console(code));
  84:tmk_core/common/command.c ****             break;
  85:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
  86:tmk_core/common/command.c ****         case MOUSEKEY:
  87:tmk_core/common/command.c ****             mousekey_console(code);
  88:tmk_core/common/command.c ****             break;
  89:tmk_core/common/command.c **** #endif
  90:tmk_core/common/command.c ****         default:
  91:tmk_core/common/command.c ****             command_state = ONESHOT;
  92:tmk_core/common/command.c ****             return false;
  93:tmk_core/common/command.c ****     }
  94:tmk_core/common/command.c ****     return true;
  95:tmk_core/common/command.c **** }
  96:tmk_core/common/command.c **** 
  97:tmk_core/common/command.c **** /* TODO: Refactoring is needed. */
  98:tmk_core/common/command.c **** /* This allows to define extra commands. return false when not processed. */
  99:tmk_core/common/command.c **** bool command_extra(uint8_t code) __attribute__((weak));
 100:tmk_core/common/command.c **** bool command_extra(uint8_t code) {
 101:tmk_core/common/command.c ****     (void)code;
 102:tmk_core/common/command.c ****     return false;
 103:tmk_core/common/command.c **** }
 104:tmk_core/common/command.c **** 
 105:tmk_core/common/command.c **** bool command_console_extra(uint8_t code) __attribute__((weak));
 106:tmk_core/common/command.c **** bool command_console_extra(uint8_t code) {
 107:tmk_core/common/command.c ****     (void)code;
 108:tmk_core/common/command.c ****     return false;
 109:tmk_core/common/command.c **** }
 110:tmk_core/common/command.c **** 
 111:tmk_core/common/command.c **** /***********************************************************
 112:tmk_core/common/command.c ****  * Command common
 113:tmk_core/common/command.c ****  ***********************************************************/
 114:tmk_core/common/command.c **** static void command_common_help(void) {
 115:tmk_core/common/command.c ****     print("\n\t- Magic -\n" STR(MAGIC_KEY_DEBUG) ":	Debug Message Toggle\n" STR(MAGIC_KEY_DEBUG_MAT
 116:tmk_core/common/command.c **** 
 117:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 118:tmk_core/common/command.c ****           STR(MAGIC_KEY_LAYER0) ":	Switch to Layer 0\n" STR(MAGIC_KEY_LAYER1) ":	Switch to Layer 1\
 119:tmk_core/common/command.c **** #endif
 120:tmk_core/common/command.c **** 
 121:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 122:tmk_core/common/command.c ****                                                                                                    
 123:tmk_core/common/command.c **** #endif
 124:tmk_core/common/command.c **** 
 125:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 126:tmk_core/common/command.c ****                                                                                                    
 127:tmk_core/common/command.c **** #endif
 128:tmk_core/common/command.c **** 
 129:tmk_core/common/command.c ****           STR(MAGIC_KEY_LAYER0_ALT) ":	Switch to Layer 0 (alternate)\n"
 130:tmk_core/common/command.c **** 
 131:tmk_core/common/command.c ****           STR(MAGIC_KEY_BOOTLOADER) ":	Jump to Bootloader\n" STR(MAGIC_KEY_BOOTLOADER_ALT) ":	Jump 
 132:tmk_core/common/command.c **** 
 133:tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 134:tmk_core/common/command.c ****           STR(MAGIC_KEY_LOCK) ":	Lock Keyboard\n"
 135:tmk_core/common/command.c **** #endif
 136:tmk_core/common/command.c **** 
 137:tmk_core/common/command.c ****           STR(MAGIC_KEY_EEPROM) ":	Print EEPROM Settings\n" STR(MAGIC_KEY_EEPROM_CLEAR) ":	Clear EE
 138:tmk_core/common/command.c **** 
 139:tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 140:tmk_core/common/command.c ****           STR(MAGIC_KEY_NKRO) ":	NKRO Toggle\n"
 141:tmk_core/common/command.c **** #endif
 142:tmk_core/common/command.c **** 
 143:tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 144:tmk_core/common/command.c ****           STR(MAGIC_KEY_SLEEP_LED) ":	Sleep LED Test\n"
 145:tmk_core/common/command.c **** #endif
 146:tmk_core/common/command.c ****     );
 147:tmk_core/common/command.c **** }
 148:tmk_core/common/command.c **** 
 149:tmk_core/common/command.c **** static void print_version(void) {
 150:tmk_core/common/command.c ****     // print version & information
 151:tmk_core/common/command.c ****     print("\n\t- Version -\n");
 152:tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 153:tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 154:tmk_core/common/command.c ****                                                        "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") 
 155:tmk_core/common/command.c ****                                                                                                 "VE
 156:tmk_core/common/command.c **** #ifdef SKIP_VERSION
 157:tmk_core/common/command.c ****     print("BUILD:  (" __DATE__ ")\n");
 158:tmk_core/common/command.c **** #else
 159:tmk_core/common/command.c ****     print("BUILD: " STR(QMK_VERSION) " (" __TIME__ " " __DATE__ ")\n");
 160:tmk_core/common/command.c **** #endif
 161:tmk_core/common/command.c **** 
 162:tmk_core/common/command.c ****     /* build options */
 163:tmk_core/common/command.c ****     print("OPTIONS:"
 164:tmk_core/common/command.c **** 
 165:tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 166:tmk_core/common/command.c ****           " PJRC"
 167:tmk_core/common/command.c **** #endif
 168:tmk_core/common/command.c **** #ifdef PROTOCOL_LUFA
 169:tmk_core/common/command.c ****           " LUFA"
 170:tmk_core/common/command.c **** #endif
 171:tmk_core/common/command.c **** #ifdef PROTOCOL_VUSB
 172:tmk_core/common/command.c ****           " VUSB"
 173:tmk_core/common/command.c **** #endif
 174:tmk_core/common/command.c **** #ifdef BOOTMAGIC_ENABLE
 175:tmk_core/common/command.c ****           " BOOTMAGIC"
 176:tmk_core/common/command.c **** #endif
 177:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 178:tmk_core/common/command.c ****           " MOUSEKEY"
 179:tmk_core/common/command.c **** #endif
 180:tmk_core/common/command.c **** #ifdef EXTRAKEY_ENABLE
 181:tmk_core/common/command.c ****           " EXTRAKEY"
 182:tmk_core/common/command.c **** #endif
 183:tmk_core/common/command.c **** #ifdef CONSOLE_ENABLE
 184:tmk_core/common/command.c ****           " CONSOLE"
 185:tmk_core/common/command.c **** #endif
 186:tmk_core/common/command.c **** #ifdef COMMAND_ENABLE
 187:tmk_core/common/command.c ****           " COMMAND"
 188:tmk_core/common/command.c **** #endif
 189:tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 190:tmk_core/common/command.c ****           " NKRO"
 191:tmk_core/common/command.c **** #endif
 192:tmk_core/common/command.c **** #ifdef KEYMAP_SECTION_ENABLE
 193:tmk_core/common/command.c ****           " KEYMAP_SECTION"
 194:tmk_core/common/command.c **** #endif
 195:tmk_core/common/command.c **** 
 196:tmk_core/common/command.c ****           " " STR(BOOTLOADER_SIZE) "\n");
 197:tmk_core/common/command.c **** 
 198:tmk_core/common/command.c ****     print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
 199:tmk_core/common/command.c **** #if defined(__AVR__)
 200:tmk_core/common/command.c ****               " AVR-LIBC: " __AVR_LIBC_VERSION_STRING__ " AVR_ARCH: avr" STR(__AVR_ARCH__)
 201:tmk_core/common/command.c **** #endif
 202:tmk_core/common/command.c ****                   "\n");
 203:tmk_core/common/command.c **** 
 204:tmk_core/common/command.c ****     return;
 205:tmk_core/common/command.c **** }
 206:tmk_core/common/command.c **** 
 207:tmk_core/common/command.c **** static void print_status(void) {
 208:tmk_core/common/command.c ****     print("\n\t- Status -\n");
 209:tmk_core/common/command.c **** 
 210:tmk_core/common/command.c ****     print_val_hex8(host_keyboard_leds());
 211:tmk_core/common/command.c **** #ifndef PROTOCOL_VUSB
 212:tmk_core/common/command.c ****     // these aren't set on the V-USB protocol, so we just ignore them for now
 213:tmk_core/common/command.c ****     print_val_hex8(keyboard_protocol);
 214:tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 215:tmk_core/common/command.c **** #endif
 216:tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 217:tmk_core/common/command.c ****     print_val_hex8(keymap_config.nkro);
 218:tmk_core/common/command.c **** #endif
 219:tmk_core/common/command.c ****     print_val_hex32(timer_read32());
 220:tmk_core/common/command.c **** 
 221:tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 222:tmk_core/common/command.c ****     print_val_hex8(UDCON);
 223:tmk_core/common/command.c ****     print_val_hex8(UDIEN);
 224:tmk_core/common/command.c ****     print_val_hex8(UDINT);
 225:tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_leds);
 226:tmk_core/common/command.c ****     print_val_hex8(usb_keyboard_idle_count);
 227:tmk_core/common/command.c **** #endif
 228:tmk_core/common/command.c **** 
 229:tmk_core/common/command.c **** #ifdef PROTOCOL_PJRC
 230:tmk_core/common/command.c **** #    if USB_COUNT_SOF
 231:tmk_core/common/command.c ****     print_val_hex8(usbSofCount);
 232:tmk_core/common/command.c **** #    endif
 233:tmk_core/common/command.c **** #endif
 234:tmk_core/common/command.c ****     return;
 235:tmk_core/common/command.c **** }
 236:tmk_core/common/command.c **** 
 237:tmk_core/common/command.c **** static void print_eeconfig(void) {
 238:tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 239:tmk_core/common/command.c **** #if !defined(NO_PRINT) && !defined(USER_PRINT)
 240:tmk_core/common/command.c **** 
 241:tmk_core/common/command.c ****     print("default_layer: ");
 242:tmk_core/common/command.c ****     print_dec(eeconfig_read_default_layer());
 243:tmk_core/common/command.c ****     print("\n");
 244:tmk_core/common/command.c **** 
 245:tmk_core/common/command.c ****     debug_config_t dc;
 246:tmk_core/common/command.c ****     dc.raw = eeconfig_read_debug();
 247:tmk_core/common/command.c ****     print("debug_config.raw: ");
 248:tmk_core/common/command.c ****     print_hex8(dc.raw);
 249:tmk_core/common/command.c ****     print("\n");
 250:tmk_core/common/command.c ****     print(".enable: ");
 251:tmk_core/common/command.c ****     print_dec(dc.enable);
 252:tmk_core/common/command.c ****     print("\n");
 253:tmk_core/common/command.c ****     print(".matrix: ");
 254:tmk_core/common/command.c ****     print_dec(dc.matrix);
 255:tmk_core/common/command.c ****     print("\n");
 256:tmk_core/common/command.c ****     print(".keyboard: ");
 257:tmk_core/common/command.c ****     print_dec(dc.keyboard);
 258:tmk_core/common/command.c ****     print("\n");
 259:tmk_core/common/command.c ****     print(".mouse: ");
 260:tmk_core/common/command.c ****     print_dec(dc.mouse);
 261:tmk_core/common/command.c ****     print("\n");
 262:tmk_core/common/command.c **** 
 263:tmk_core/common/command.c ****     keymap_config_t kc;
 264:tmk_core/common/command.c ****     kc.raw = eeconfig_read_keymap();
 265:tmk_core/common/command.c ****     print("keymap_config.raw: ");
 266:tmk_core/common/command.c ****     print_hex8(kc.raw);
 267:tmk_core/common/command.c ****     print("\n");
 268:tmk_core/common/command.c ****     print(".swap_control_capslock: ");
 269:tmk_core/common/command.c ****     print_dec(kc.swap_control_capslock);
 270:tmk_core/common/command.c ****     print("\n");
 271:tmk_core/common/command.c ****     print(".capslock_to_control: ");
 272:tmk_core/common/command.c ****     print_dec(kc.capslock_to_control);
 273:tmk_core/common/command.c ****     print("\n");
 274:tmk_core/common/command.c ****     print(".swap_lctl_lgui: ");
 275:tmk_core/common/command.c ****     print_dec(kc.swap_lctl_lgui);
 276:tmk_core/common/command.c ****     print("\n");
 277:tmk_core/common/command.c ****     print(".swap_rctl_rgui: ");
 278:tmk_core/common/command.c ****     print_dec(kc.swap_rctl_rgui);
 279:tmk_core/common/command.c ****     print("\n");
 280:tmk_core/common/command.c ****     print(".swap_lalt_lgui: ");
 281:tmk_core/common/command.c ****     print_dec(kc.swap_lalt_lgui);
 282:tmk_core/common/command.c ****     print("\n");
 283:tmk_core/common/command.c ****     print(".swap_ralt_rgui: ");
 284:tmk_core/common/command.c ****     print_dec(kc.swap_ralt_rgui);
 285:tmk_core/common/command.c ****     print("\n");
 286:tmk_core/common/command.c ****     print(".no_gui: ");
 287:tmk_core/common/command.c ****     print_dec(kc.no_gui);
 288:tmk_core/common/command.c ****     print("\n");
 289:tmk_core/common/command.c ****     print(".swap_grave_esc: ");
 290:tmk_core/common/command.c ****     print_dec(kc.swap_grave_esc);
 291:tmk_core/common/command.c ****     print("\n");
 292:tmk_core/common/command.c ****     print(".swap_backslash_backspace: ");
 293:tmk_core/common/command.c ****     print_dec(kc.swap_backslash_backspace);
 294:tmk_core/common/command.c ****     print("\n");
 295:tmk_core/common/command.c ****     print(".nkro: ");
 296:tmk_core/common/command.c ****     print_dec(kc.nkro);
 297:tmk_core/common/command.c ****     print("\n");
 298:tmk_core/common/command.c **** 
 299:tmk_core/common/command.c **** #    ifdef BACKLIGHT_ENABLE
 300:tmk_core/common/command.c ****     backlight_config_t bc;
 301:tmk_core/common/command.c ****     bc.raw = eeconfig_read_backlight();
 302:tmk_core/common/command.c ****     print("backlight_config.raw: ");
 303:tmk_core/common/command.c ****     print_hex8(bc.raw);
 304:tmk_core/common/command.c ****     print("\n");
 305:tmk_core/common/command.c ****     print(".enable: ");
 306:tmk_core/common/command.c ****     print_dec(bc.enable);
 307:tmk_core/common/command.c ****     print("\n");
 308:tmk_core/common/command.c ****     print(".level: ");
 309:tmk_core/common/command.c ****     print_dec(bc.level);
 310:tmk_core/common/command.c ****     print("\n");
 311:tmk_core/common/command.c **** #    endif /* BACKLIGHT_ENABLE */
 312:tmk_core/common/command.c **** 
 313:tmk_core/common/command.c **** #endif /* !NO_PRINT */
 314:tmk_core/common/command.c **** }
 315:tmk_core/common/command.c **** 
 316:tmk_core/common/command.c **** static bool command_common(uint8_t code) {
 317:tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 318:tmk_core/common/command.c ****     static host_driver_t *host_driver = 0;
 319:tmk_core/common/command.c **** #endif
 320:tmk_core/common/command.c **** 
 321:tmk_core/common/command.c ****     switch (code) {
 322:tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 323:tmk_core/common/command.c **** 
 324:tmk_core/common/command.c ****         // test breathing sleep LED
 325:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_SLEEP_LED):
 326:tmk_core/common/command.c ****             print("Sleep LED Test\n");
 327:tmk_core/common/command.c ****             sleep_led_toggle();
 328:tmk_core/common/command.c ****             led_set(host_keyboard_leds());
 329:tmk_core/common/command.c ****             break;
 330:tmk_core/common/command.c **** #endif
 331:tmk_core/common/command.c **** 
 332:tmk_core/common/command.c ****         // print stored eeprom config
 333:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM):
 334:tmk_core/common/command.c ****             print("eeconfig:\n");
 335:tmk_core/common/command.c ****             print_eeconfig();
 336:tmk_core/common/command.c ****             break;
 337:tmk_core/common/command.c **** 
 338:tmk_core/common/command.c ****         // clear eeprom
 339:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_EEPROM_CLEAR):
 340:tmk_core/common/command.c ****             print("Clearing EEPROM\n");
 341:tmk_core/common/command.c ****             eeconfig_init();
 342:tmk_core/common/command.c ****             break;
 343:tmk_core/common/command.c **** 
 344:tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 345:tmk_core/common/command.c **** 
 346:tmk_core/common/command.c ****         // lock/unlock keyboard
 347:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LOCK):
 348:tmk_core/common/command.c ****             if (host_get_driver()) {
 349:tmk_core/common/command.c ****                 host_driver = host_get_driver();
 350:tmk_core/common/command.c ****                 clear_keyboard();
 351:tmk_core/common/command.c ****                 host_set_driver(0);
 352:tmk_core/common/command.c ****                 print("Locked.\n");
 353:tmk_core/common/command.c ****             } else {
 354:tmk_core/common/command.c ****                 host_set_driver(host_driver);
 355:tmk_core/common/command.c ****                 print("Unlocked.\n");
 356:tmk_core/common/command.c ****             }
 357:tmk_core/common/command.c ****             break;
 358:tmk_core/common/command.c **** #endif
 359:tmk_core/common/command.c **** 
 360:tmk_core/common/command.c ****         // print help
 361:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP):
 362:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_HELP_ALT):
 363:tmk_core/common/command.c ****             command_common_help();
 364:tmk_core/common/command.c ****             break;
 365:tmk_core/common/command.c **** 
 366:tmk_core/common/command.c ****         // activate console
 367:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_CONSOLE):
 368:tmk_core/common/command.c ****             debug_matrix   = false;
 369:tmk_core/common/command.c ****             debug_keyboard = false;
 370:tmk_core/common/command.c ****             debug_mouse    = false;
 371:tmk_core/common/command.c ****             debug_enable   = false;
 372:tmk_core/common/command.c ****             command_console_help();
 373:tmk_core/common/command.c ****             print("C> ");
 374:tmk_core/common/command.c ****             command_state = CONSOLE;
 375:tmk_core/common/command.c ****             break;
 376:tmk_core/common/command.c **** 
 377:tmk_core/common/command.c ****         // jump to bootloader
 378:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER):
 379:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_BOOTLOADER_ALT):
 380:tmk_core/common/command.c ****             clear_keyboard();  // clear to prevent stuck keys
 381:tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 382:tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
 383:tmk_core/common/command.c ****             stop_all_notes();
 384:tmk_core/common/command.c ****             shutdown_user();
 385:tmk_core/common/command.c **** #else
 386:tmk_core/common/command.c ****             wait_ms(1000);
 387:tmk_core/common/command.c **** #endif
 388:tmk_core/common/command.c ****             bootloader_jump();  // not return
 389:tmk_core/common/command.c ****             break;
 390:tmk_core/common/command.c **** 
 391:tmk_core/common/command.c ****         // debug toggle
 392:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG):
 393:tmk_core/common/command.c ****             debug_enable = !debug_enable;
 394:tmk_core/common/command.c ****             if (debug_enable) {
 395:tmk_core/common/command.c ****                 print("\ndebug: on\n");
 396:tmk_core/common/command.c ****             } else {
 397:tmk_core/common/command.c ****                 print("\ndebug: off\n");
 398:tmk_core/common/command.c ****                 debug_matrix   = false;
 399:tmk_core/common/command.c ****                 debug_keyboard = false;
 400:tmk_core/common/command.c ****                 debug_mouse    = false;
 401:tmk_core/common/command.c ****             }
 402:tmk_core/common/command.c ****             break;
 403:tmk_core/common/command.c **** 
 404:tmk_core/common/command.c ****         // debug matrix toggle
 405:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MATRIX):
 406:tmk_core/common/command.c ****             debug_matrix = !debug_matrix;
 407:tmk_core/common/command.c ****             if (debug_matrix) {
 408:tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 409:tmk_core/common/command.c ****                 debug_enable = true;
 410:tmk_core/common/command.c ****             } else {
 411:tmk_core/common/command.c ****                 print("\nmatrix: off\n");
 412:tmk_core/common/command.c ****             }
 413:tmk_core/common/command.c ****             break;
 414:tmk_core/common/command.c **** 
 415:tmk_core/common/command.c ****         // debug keyboard toggle
 416:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_KBD):
 417:tmk_core/common/command.c ****             debug_keyboard = !debug_keyboard;
 418:tmk_core/common/command.c ****             if (debug_keyboard) {
 419:tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 420:tmk_core/common/command.c ****                 debug_enable = true;
 421:tmk_core/common/command.c ****             } else {
 422:tmk_core/common/command.c ****                 print("\nkeyboard: off\n");
 423:tmk_core/common/command.c ****             }
 424:tmk_core/common/command.c ****             break;
 425:tmk_core/common/command.c **** 
 426:tmk_core/common/command.c ****         // debug mouse toggle
 427:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_DEBUG_MOUSE):
 428:tmk_core/common/command.c ****             debug_mouse = !debug_mouse;
 429:tmk_core/common/command.c ****             if (debug_mouse) {
 430:tmk_core/common/command.c ****                 print("\nmouse: on\n");
 431:tmk_core/common/command.c ****                 debug_enable = true;
 432:tmk_core/common/command.c ****             } else {
 433:tmk_core/common/command.c ****                 print("\nmouse: off\n");
 434:tmk_core/common/command.c ****             }
 435:tmk_core/common/command.c ****             break;
 436:tmk_core/common/command.c **** 
 437:tmk_core/common/command.c ****         // print version
 438:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_VERSION):
 439:tmk_core/common/command.c ****             print_version();
 440:tmk_core/common/command.c ****             break;
 441:tmk_core/common/command.c **** 
 442:tmk_core/common/command.c ****         // print status
 443:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_STATUS):
 444:tmk_core/common/command.c ****             print_status();
 445:tmk_core/common/command.c ****             break;
 446:tmk_core/common/command.c **** 
 447:tmk_core/common/command.c **** #ifdef NKRO_ENABLE
 448:tmk_core/common/command.c **** 
 449:tmk_core/common/command.c ****         // NKRO toggle
 450:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_NKRO):
 451:tmk_core/common/command.c ****             clear_keyboard();  // clear to prevent stuck keys
 452:tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 453:tmk_core/common/command.c ****             if (keymap_config.nkro) {
 454:tmk_core/common/command.c ****                 print("NKRO: on\n");
 455:tmk_core/common/command.c ****             } else {
 456:tmk_core/common/command.c ****                 print("NKRO: off\n");
 457:tmk_core/common/command.c ****             }
 458:tmk_core/common/command.c ****             break;
 459:tmk_core/common/command.c **** #endif
 460:tmk_core/common/command.c **** 
 461:tmk_core/common/command.c ****             // switch layers
 462:tmk_core/common/command.c **** 
 463:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER0_ALT):
 464:tmk_core/common/command.c ****             switch_default_layer(0);
 465:tmk_core/common/command.c ****             break;
 466:tmk_core/common/command.c **** 
 467:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM
 468:tmk_core/common/command.c **** 
 469:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER0):
 470:tmk_core/common/command.c ****             switch_default_layer(0);
 471:tmk_core/common/command.c ****             break;
 472:tmk_core/common/command.c **** 
 473:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER1):
 474:tmk_core/common/command.c ****             switch_default_layer(1);
 475:tmk_core/common/command.c ****             break;
 476:tmk_core/common/command.c **** 
 477:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER2):
 478:tmk_core/common/command.c ****             switch_default_layer(2);
 479:tmk_core/common/command.c ****             break;
 480:tmk_core/common/command.c **** 
 481:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER3):
 482:tmk_core/common/command.c ****             switch_default_layer(3);
 483:tmk_core/common/command.c ****             break;
 484:tmk_core/common/command.c **** 
 485:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER4):
 486:tmk_core/common/command.c ****             switch_default_layer(4);
 487:tmk_core/common/command.c ****             break;
 488:tmk_core/common/command.c **** 
 489:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER5):
 490:tmk_core/common/command.c ****             switch_default_layer(5);
 491:tmk_core/common/command.c ****             break;
 492:tmk_core/common/command.c **** 
 493:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER6):
 494:tmk_core/common/command.c ****             switch_default_layer(6);
 495:tmk_core/common/command.c ****             break;
 496:tmk_core/common/command.c **** 
 497:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER7):
 498:tmk_core/common/command.c ****             switch_default_layer(7);
 499:tmk_core/common/command.c ****             break;
 500:tmk_core/common/command.c **** 
 501:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER8):
 502:tmk_core/common/command.c ****             switch_default_layer(8);
 503:tmk_core/common/command.c ****             break;
 504:tmk_core/common/command.c **** 
 505:tmk_core/common/command.c ****         case MAGIC_KC(MAGIC_KEY_LAYER9):
 506:tmk_core/common/command.c ****             switch_default_layer(9);
 507:tmk_core/common/command.c ****             break;
 508:tmk_core/common/command.c **** #endif
 509:tmk_core/common/command.c **** 
 510:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS
 511:tmk_core/common/command.c **** 
 512:tmk_core/common/command.c ****         case KC_F1 ... KC_F9:
 513:tmk_core/common/command.c ****             switch_default_layer((code - KC_F1) + 1);
 514:tmk_core/common/command.c ****             break;
 515:tmk_core/common/command.c ****         case KC_F10:
 516:tmk_core/common/command.c ****             switch_default_layer(0);
 517:tmk_core/common/command.c ****             break;
 518:tmk_core/common/command.c **** #endif
 519:tmk_core/common/command.c **** 
 520:tmk_core/common/command.c **** #if MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS
 521:tmk_core/common/command.c **** 
 522:tmk_core/common/command.c ****         case KC_1 ... KC_9:
 523:tmk_core/common/command.c ****             switch_default_layer((code - KC_1) + 1);
 524:tmk_core/common/command.c ****             break;
 525:tmk_core/common/command.c ****         case KC_0:
 526:tmk_core/common/command.c ****             switch_default_layer(0);
 527:tmk_core/common/command.c ****             break;
 528:tmk_core/common/command.c **** #endif
 529:tmk_core/common/command.c **** 
 530:tmk_core/common/command.c ****         default:
 531:tmk_core/common/command.c ****             print("?");
 532:tmk_core/common/command.c ****             return false;
 533:tmk_core/common/command.c ****     }
 534:tmk_core/common/command.c ****     return true;
 535:tmk_core/common/command.c **** }
 536:tmk_core/common/command.c **** 
 537:tmk_core/common/command.c **** /***********************************************************
 538:tmk_core/common/command.c ****  * Command console
 539:tmk_core/common/command.c ****  ***********************************************************/
 540:tmk_core/common/command.c **** static void command_console_help(void) {
 541:tmk_core/common/command.c ****     print("\n\t- Console -\n"
 542:tmk_core/common/command.c ****           "ESC/q:	quit\n"
 543:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 544:tmk_core/common/command.c ****           "m:	mousekey\n"
 545:tmk_core/common/command.c **** #endif
 546:tmk_core/common/command.c ****     );
 547:tmk_core/common/command.c **** }
 548:tmk_core/common/command.c **** 
 549:tmk_core/common/command.c **** static bool command_console(uint8_t code) {
 550:tmk_core/common/command.c ****     switch (code) {
 551:tmk_core/common/command.c ****         case KC_H:
 552:tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 553:tmk_core/common/command.c ****             command_console_help();
 554:tmk_core/common/command.c ****             break;
 555:tmk_core/common/command.c ****         case KC_Q:
 556:tmk_core/common/command.c ****         case KC_ESC:
 557:tmk_core/common/command.c ****             command_state = ONESHOT;
 558:tmk_core/common/command.c ****             return false;
 559:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 560:tmk_core/common/command.c ****         case KC_M:
 561:tmk_core/common/command.c ****             mousekey_console_help();
 562:tmk_core/common/command.c ****             print("M> ");
 563:tmk_core/common/command.c ****             command_state = MOUSEKEY;
 564:tmk_core/common/command.c ****             return true;
 565:tmk_core/common/command.c **** #endif
 566:tmk_core/common/command.c ****         default:
 567:tmk_core/common/command.c ****             print("?");
 568:tmk_core/common/command.c ****             return false;
 569:tmk_core/common/command.c ****     }
 570:tmk_core/common/command.c ****     print("C> ");
 571:tmk_core/common/command.c ****     return true;
 572:tmk_core/common/command.c **** }
 573:tmk_core/common/command.c **** 
 574:tmk_core/common/command.c **** #ifdef MOUSEKEY_ENABLE
 575:tmk_core/common/command.c **** /***********************************************************
 576:tmk_core/common/command.c ****  * Mousekey console
 577:tmk_core/common/command.c ****  ***********************************************************/
 578:tmk_core/common/command.c **** static uint8_t mousekey_param = 0;
 579:tmk_core/common/command.c **** 
 580:tmk_core/common/command.c **** static void mousekey_param_print(void) {
 581:tmk_core/common/command.c **** // Print these variables if NO_PRINT or USER_PRINT are not defined.
 582:tmk_core/common/command.c **** #    if !defined(NO_PRINT) && !defined(USER_PRINT)
 583:tmk_core/common/command.c ****     print("\n\t- Values -\n");
 584:tmk_core/common/command.c ****     print("1: delay(*10ms): ");
 585:tmk_core/common/command.c ****     pdec(mk_delay);
 586:tmk_core/common/command.c ****     print("\n");
 587:tmk_core/common/command.c ****     print("2: interval(ms): ");
 588:tmk_core/common/command.c ****     pdec(mk_interval);
 589:tmk_core/common/command.c ****     print("\n");
 590:tmk_core/common/command.c ****     print("3: max_speed: ");
 591:tmk_core/common/command.c ****     pdec(mk_max_speed);
 592:tmk_core/common/command.c ****     print("\n");
 593:tmk_core/common/command.c ****     print("4: time_to_max: ");
 594:tmk_core/common/command.c ****     pdec(mk_time_to_max);
 595:tmk_core/common/command.c ****     print("\n");
 596:tmk_core/common/command.c ****     print("5: wheel_max_speed: ");
 597:tmk_core/common/command.c ****     pdec(mk_wheel_max_speed);
 598:tmk_core/common/command.c ****     print("\n");
 599:tmk_core/common/command.c ****     print("6: wheel_time_to_max: ");
 600:tmk_core/common/command.c ****     pdec(mk_wheel_time_to_max);
 601:tmk_core/common/command.c ****     print("\n");
 602:tmk_core/common/command.c **** #    endif /* !NO_PRINT */
 603:tmk_core/common/command.c **** }
 604:tmk_core/common/command.c **** 
 605:tmk_core/common/command.c **** //#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
 606:tmk_core/common/command.c **** #    define PRINT_SET_VAL(v) xprintf(#    v " = %d\n", (v))
 607:tmk_core/common/command.c **** static void mousekey_param_inc(uint8_t param, uint8_t inc) {
 608:tmk_core/common/command.c ****     switch (param) {
 609:tmk_core/common/command.c ****         case 1:
 610:tmk_core/common/command.c ****             if (mk_delay + inc < UINT8_MAX)
 611:tmk_core/common/command.c ****                 mk_delay += inc;
 612:tmk_core/common/command.c ****             else
 613:tmk_core/common/command.c ****                 mk_delay = UINT8_MAX;
 614:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 615:tmk_core/common/command.c ****             break;
 616:tmk_core/common/command.c ****         case 2:
 617:tmk_core/common/command.c ****             if (mk_interval + inc < UINT8_MAX)
 618:tmk_core/common/command.c ****                 mk_interval += inc;
 619:tmk_core/common/command.c ****             else
 620:tmk_core/common/command.c ****                 mk_interval = UINT8_MAX;
 621:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 622:tmk_core/common/command.c ****             break;
 623:tmk_core/common/command.c ****         case 3:
 624:tmk_core/common/command.c ****             if (mk_max_speed + inc < UINT8_MAX)
 625:tmk_core/common/command.c ****                 mk_max_speed += inc;
 626:tmk_core/common/command.c ****             else
 627:tmk_core/common/command.c ****                 mk_max_speed = UINT8_MAX;
 628:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 629:tmk_core/common/command.c ****             break;
 630:tmk_core/common/command.c ****         case 4:
 631:tmk_core/common/command.c ****             if (mk_time_to_max + inc < UINT8_MAX)
 632:tmk_core/common/command.c ****                 mk_time_to_max += inc;
 633:tmk_core/common/command.c ****             else
 634:tmk_core/common/command.c ****                 mk_time_to_max = UINT8_MAX;
 635:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 636:tmk_core/common/command.c ****             break;
 637:tmk_core/common/command.c ****         case 5:
 638:tmk_core/common/command.c ****             if (mk_wheel_max_speed + inc < UINT8_MAX)
 639:tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 640:tmk_core/common/command.c ****             else
 641:tmk_core/common/command.c ****                 mk_wheel_max_speed = UINT8_MAX;
 642:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 643:tmk_core/common/command.c ****             break;
 644:tmk_core/common/command.c ****         case 6:
 645:tmk_core/common/command.c ****             if (mk_wheel_time_to_max + inc < UINT8_MAX)
 646:tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 647:tmk_core/common/command.c ****             else
 648:tmk_core/common/command.c ****                 mk_wheel_time_to_max = UINT8_MAX;
 649:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 650:tmk_core/common/command.c ****             break;
 651:tmk_core/common/command.c ****     }
 652:tmk_core/common/command.c **** }
 653:tmk_core/common/command.c **** 
 654:tmk_core/common/command.c **** static void mousekey_param_dec(uint8_t param, uint8_t dec) {
 655:tmk_core/common/command.c ****     switch (param) {
 656:tmk_core/common/command.c ****         case 1:
 657:tmk_core/common/command.c ****             if (mk_delay > dec)
 658:tmk_core/common/command.c ****                 mk_delay -= dec;
 659:tmk_core/common/command.c ****             else
 660:tmk_core/common/command.c ****                 mk_delay = 0;
 661:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 662:tmk_core/common/command.c ****             break;
 663:tmk_core/common/command.c ****         case 2:
 664:tmk_core/common/command.c ****             if (mk_interval > dec)
 665:tmk_core/common/command.c ****                 mk_interval -= dec;
 666:tmk_core/common/command.c ****             else
 667:tmk_core/common/command.c ****                 mk_interval = 0;
 668:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 669:tmk_core/common/command.c ****             break;
 670:tmk_core/common/command.c ****         case 3:
 671:tmk_core/common/command.c ****             if (mk_max_speed > dec)
 672:tmk_core/common/command.c ****                 mk_max_speed -= dec;
 673:tmk_core/common/command.c ****             else
 674:tmk_core/common/command.c ****                 mk_max_speed = 0;
 675:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 676:tmk_core/common/command.c ****             break;
 677:tmk_core/common/command.c ****         case 4:
 678:tmk_core/common/command.c ****             if (mk_time_to_max > dec)
 679:tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 680:tmk_core/common/command.c ****             else
 681:tmk_core/common/command.c ****                 mk_time_to_max = 0;
 682:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 683:tmk_core/common/command.c ****             break;
 684:tmk_core/common/command.c ****         case 5:
 685:tmk_core/common/command.c ****             if (mk_wheel_max_speed > dec)
 686:tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 687:tmk_core/common/command.c ****             else
 688:tmk_core/common/command.c ****                 mk_wheel_max_speed = 0;
 689:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 690:tmk_core/common/command.c ****             break;
 691:tmk_core/common/command.c ****         case 6:
 692:tmk_core/common/command.c ****             if (mk_wheel_time_to_max > dec)
 693:tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 694:tmk_core/common/command.c ****             else
 695:tmk_core/common/command.c ****                 mk_wheel_time_to_max = 0;
 696:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 697:tmk_core/common/command.c ****             break;
 698:tmk_core/common/command.c ****     }
 699:tmk_core/common/command.c **** }
 700:tmk_core/common/command.c **** 
 701:tmk_core/common/command.c **** static void mousekey_console_help(void) {
  25              		.loc 1 701 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 08B5     		push	{r3, lr}
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 3, -8
  32              		.cfi_offset 14, -4
 702:tmk_core/common/command.c ****     print("\n\t- Mousekey -\n"
  33              		.loc 1 702 0
  34 0002 0548     		ldr	r0, .L2
  35 0004 FFF7FEFF 		bl	tfp_printf
  36              	.LVL0:
 703:tmk_core/common/command.c ****           "ESC/q:	quit\n"
 704:tmk_core/common/command.c ****           "1:	delay(*10ms)\n"
 705:tmk_core/common/command.c ****           "2:	interval(ms)\n"
 706:tmk_core/common/command.c ****           "3:	max_speed\n"
 707:tmk_core/common/command.c ****           "4:	time_to_max\n"
 708:tmk_core/common/command.c ****           "5:	wheel_max_speed\n"
 709:tmk_core/common/command.c ****           "6:	wheel_time_to_max\n"
 710:tmk_core/common/command.c ****           "\n"
 711:tmk_core/common/command.c ****           "p:	print values\n"
 712:tmk_core/common/command.c ****           "d:	set defaults\n"
 713:tmk_core/common/command.c ****           "up:	+1\n"
 714:tmk_core/common/command.c ****           "down:	-1\n"
 715:tmk_core/common/command.c ****           "pgup:	+10\n"
 716:tmk_core/common/command.c ****           "pgdown:	-10\n"
 717:tmk_core/common/command.c ****           "\n"
 718:tmk_core/common/command.c ****           "speed = delta * max_speed * (repeat / time_to_max)\n");
 719:tmk_core/common/command.c ****     xprintf("where delta: cursor=%d, wheel=%d\n"
  37              		.loc 1 719 0
  38 0008 0122     		movs	r2, #1
  39 000a 0521     		movs	r1, #5
  40 000c 0348     		ldr	r0, .L2+4
 720:tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n",
 721:tmk_core/common/command.c ****             MOUSEKEY_MOVE_DELTA, MOUSEKEY_WHEEL_DELTA);
 722:tmk_core/common/command.c **** }
  41              		.loc 1 722 0
  42 000e BDE80840 		pop	{r3, lr}
  43              		.cfi_restore 14
  44              		.cfi_restore 3
  45              		.cfi_def_cfa_offset 0
 719:tmk_core/common/command.c ****             "See http://en.wikipedia.org/wiki/Mouse_keys\n",
  46              		.loc 1 719 0
  47 0012 FFF7FEBF 		b	tfp_printf
  48              	.LVL1:
  49              	.L3:
  50 0016 00BF     		.align	2
  51              	.L2:
  52 0018 00000000 		.word	.LC0
  53 001c FB000000 		.word	.LC1
  54              		.cfi_endproc
  55              	.LFE300:
  57              		.section	.text.mousekey_param_inc,"ax",%progbits
  58              		.align	1
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  62              		.fpu softvfp
  64              	mousekey_param_inc:
  65              	.LFB298:
 607:tmk_core/common/command.c ****     switch (param) {
  66              		.loc 1 607 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              		@ link register save eliminated.
  71              	.LVL2:
 608:tmk_core/common/command.c ****         case 1:
  72              		.loc 1 608 0
  73 0000 0138     		subs	r0, r0, #1
  74              	.LVL3:
  75 0002 0528     		cmp	r0, #5
  76 0004 47D8     		bhi	.L4
  77 0006 DFE800F0 		tbb	[pc, r0]
  78              	.L7:
  79 000a 03       		.byte	(.L6-.L7)/2
  80 000b 0F       		.byte	(.L8-.L7)/2
  81 000c 1A       		.byte	(.L9-.L7)/2
  82 000d 25       		.byte	(.L10-.L7)/2
  83 000e 30       		.byte	(.L11-.L7)/2
  84 000f 3B       		.byte	(.L12-.L7)/2
  85              		.p2align 1
  86              	.L6:
 610:tmk_core/common/command.c ****                 mk_delay += inc;
  87              		.loc 1 610 0
  88 0010 214B     		ldr	r3, .L26
 614:tmk_core/common/command.c ****             break;
  89              		.loc 1 614 0
  90 0012 2248     		ldr	r0, .L26+4
 610:tmk_core/common/command.c ****                 mk_delay += inc;
  91              		.loc 1 610 0
  92 0014 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  93 0016 1144     		add	r1, r1, r2
  94              	.LVL4:
  95 0018 FE29     		cmp	r1, #254
 613:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
  96              		.loc 1 613 0
  97 001a CABF     		itet	gt
  98 001c FF22     		movgt	r2, #255
 611:tmk_core/common/command.c ****             else
  99              		.loc 1 611 0
 100 001e 1970     		strble	r1, [r3]
 613:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 101              		.loc 1 613 0
 102 0020 1A70     		strbgt	r2, [r3]
 614:tmk_core/common/command.c ****             break;
 103              		.loc 1 614 0
 104 0022 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 105              	.L25:
 649:tmk_core/common/command.c ****             break;
 106              		.loc 1 649 0
 107 0024 FFF7FEBF 		b	tfp_printf
 108              	.LVL5:
 109              	.L8:
 617:tmk_core/common/command.c ****                 mk_interval += inc;
 110              		.loc 1 617 0
 111 0028 1D4B     		ldr	r3, .L26+8
 621:tmk_core/common/command.c ****             break;
 112              		.loc 1 621 0
 113 002a 1E48     		ldr	r0, .L26+12
 617:tmk_core/common/command.c ****                 mk_interval += inc;
 114              		.loc 1 617 0
 115 002c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 116 002e 1144     		add	r1, r1, r2
 117              	.LVL6:
 118 0030 FE29     		cmp	r1, #254
 620:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 119              		.loc 1 620 0
 120 0032 CABF     		itet	gt
 121 0034 FF22     		movgt	r2, #255
 618:tmk_core/common/command.c ****             else
 122              		.loc 1 618 0
 123 0036 1970     		strble	r1, [r3]
 620:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 124              		.loc 1 620 0
 125 0038 1A70     		strbgt	r2, [r3]
 621:tmk_core/common/command.c ****             break;
 126              		.loc 1 621 0
 127 003a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 128 003c F2E7     		b	.L25
 129              	.LVL7:
 130              	.L9:
 624:tmk_core/common/command.c ****                 mk_max_speed += inc;
 131              		.loc 1 624 0
 132 003e 1A4B     		ldr	r3, .L26+16
 628:tmk_core/common/command.c ****             break;
 133              		.loc 1 628 0
 134 0040 1A48     		ldr	r0, .L26+20
 624:tmk_core/common/command.c ****                 mk_max_speed += inc;
 135              		.loc 1 624 0
 136 0042 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 137 0044 1144     		add	r1, r1, r2
 138              	.LVL8:
 139 0046 FE29     		cmp	r1, #254
 627:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 140              		.loc 1 627 0
 141 0048 CABF     		itet	gt
 142 004a FF22     		movgt	r2, #255
 625:tmk_core/common/command.c ****             else
 143              		.loc 1 625 0
 144 004c 1970     		strble	r1, [r3]
 627:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 145              		.loc 1 627 0
 146 004e 1A70     		strbgt	r2, [r3]
 628:tmk_core/common/command.c ****             break;
 147              		.loc 1 628 0
 148 0050 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 149 0052 E7E7     		b	.L25
 150              	.LVL9:
 151              	.L10:
 631:tmk_core/common/command.c ****                 mk_time_to_max += inc;
 152              		.loc 1 631 0
 153 0054 164B     		ldr	r3, .L26+24
 635:tmk_core/common/command.c ****             break;
 154              		.loc 1 635 0
 155 0056 1748     		ldr	r0, .L26+28
 631:tmk_core/common/command.c ****                 mk_time_to_max += inc;
 156              		.loc 1 631 0
 157 0058 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 158 005a 1144     		add	r1, r1, r2
 159              	.LVL10:
 160 005c FE29     		cmp	r1, #254
 634:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 161              		.loc 1 634 0
 162 005e CABF     		itet	gt
 163 0060 FF22     		movgt	r2, #255
 632:tmk_core/common/command.c ****             else
 164              		.loc 1 632 0
 165 0062 1970     		strble	r1, [r3]
 634:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 166              		.loc 1 634 0
 167 0064 1A70     		strbgt	r2, [r3]
 635:tmk_core/common/command.c ****             break;
 168              		.loc 1 635 0
 169 0066 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 170 0068 DCE7     		b	.L25
 171              	.LVL11:
 172              	.L11:
 638:tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 173              		.loc 1 638 0
 174 006a 134B     		ldr	r3, .L26+32
 642:tmk_core/common/command.c ****             break;
 175              		.loc 1 642 0
 176 006c 1348     		ldr	r0, .L26+36
 638:tmk_core/common/command.c ****                 mk_wheel_max_speed += inc;
 177              		.loc 1 638 0
 178 006e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 179 0070 1144     		add	r1, r1, r2
 180              	.LVL12:
 181 0072 FE29     		cmp	r1, #254
 641:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 182              		.loc 1 641 0
 183 0074 CABF     		itet	gt
 184 0076 FF22     		movgt	r2, #255
 639:tmk_core/common/command.c ****             else
 185              		.loc 1 639 0
 186 0078 1970     		strble	r1, [r3]
 641:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 187              		.loc 1 641 0
 188 007a 1A70     		strbgt	r2, [r3]
 642:tmk_core/common/command.c ****             break;
 189              		.loc 1 642 0
 190 007c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 191 007e D1E7     		b	.L25
 192              	.LVL13:
 193              	.L12:
 645:tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 194              		.loc 1 645 0
 195 0080 0F4B     		ldr	r3, .L26+40
 649:tmk_core/common/command.c ****             break;
 196              		.loc 1 649 0
 197 0082 1048     		ldr	r0, .L26+44
 645:tmk_core/common/command.c ****                 mk_wheel_time_to_max += inc;
 198              		.loc 1 645 0
 199 0084 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 200 0086 1144     		add	r1, r1, r2
 201              	.LVL14:
 202 0088 FE29     		cmp	r1, #254
 648:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 203              		.loc 1 648 0
 204 008a CABF     		itet	gt
 205 008c FF22     		movgt	r2, #255
 646:tmk_core/common/command.c ****             else
 206              		.loc 1 646 0
 207 008e 1970     		strble	r1, [r3]
 648:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 208              		.loc 1 648 0
 209 0090 1A70     		strbgt	r2, [r3]
 649:tmk_core/common/command.c ****             break;
 210              		.loc 1 649 0
 211 0092 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 212 0094 C6E7     		b	.L25
 213              	.LVL15:
 214              	.L4:
 652:tmk_core/common/command.c **** 
 215              		.loc 1 652 0
 216 0096 7047     		bx	lr
 217              	.L27:
 218              		.align	2
 219              	.L26:
 220 0098 00000000 		.word	mk_delay
 221 009c 00000000 		.word	.LC2
 222 00a0 00000000 		.word	mk_interval
 223 00a4 0F000000 		.word	.LC3
 224 00a8 00000000 		.word	mk_max_speed
 225 00ac 21000000 		.word	.LC4
 226 00b0 00000000 		.word	mk_time_to_max
 227 00b4 34000000 		.word	.LC5
 228 00b8 00000000 		.word	mk_wheel_max_speed
 229 00bc 49000000 		.word	.LC6
 230 00c0 00000000 		.word	mk_wheel_time_to_max
 231 00c4 62000000 		.word	.LC7
 232              		.cfi_endproc
 233              	.LFE298:
 235              		.section	.text.mousekey_param_dec,"ax",%progbits
 236              		.align	1
 237              		.syntax unified
 238              		.thumb
 239              		.thumb_func
 240              		.fpu softvfp
 242              	mousekey_param_dec:
 243              	.LFB299:
 654:tmk_core/common/command.c ****     switch (param) {
 244              		.loc 1 654 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              		@ link register save eliminated.
 249              	.LVL16:
 655:tmk_core/common/command.c ****         case 1:
 250              		.loc 1 655 0
 251 0000 0138     		subs	r0, r0, #1
 252              	.LVL17:
 253 0002 0528     		cmp	r0, #5
 254 0004 47D8     		bhi	.L28
 255 0006 DFE800F0 		tbb	[pc, r0]
 256              	.L31:
 257 000a 03       		.byte	(.L30-.L31)/2
 258 000b 0F       		.byte	(.L32-.L31)/2
 259 000c 1A       		.byte	(.L33-.L31)/2
 260 000d 25       		.byte	(.L34-.L31)/2
 261 000e 30       		.byte	(.L35-.L31)/2
 262 000f 3B       		.byte	(.L36-.L31)/2
 263              		.p2align 1
 264              	.L30:
 657:tmk_core/common/command.c ****                 mk_delay -= dec;
 265              		.loc 1 657 0
 266 0010 214B     		ldr	r3, .L50
 661:tmk_core/common/command.c ****             break;
 267              		.loc 1 661 0
 268 0012 2248     		ldr	r0, .L50+4
 657:tmk_core/common/command.c ****                 mk_delay -= dec;
 269              		.loc 1 657 0
 270 0014 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 271 0016 8A42     		cmp	r2, r1
 658:tmk_core/common/command.c ****             else
 272              		.loc 1 658 0
 273 0018 8BBF     		itete	hi
 274 001a 511A     		subhi	r1, r2, r1
 275              	.LVL18:
 660:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 276              		.loc 1 660 0
 277 001c 0022     		movls	r2, #0
 658:tmk_core/common/command.c ****             else
 278              		.loc 1 658 0
 279 001e 1970     		strbhi	r1, [r3]
 660:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_delay);
 280              		.loc 1 660 0
 281 0020 1A70     		strbls	r2, [r3]
 661:tmk_core/common/command.c ****             break;
 282              		.loc 1 661 0
 283 0022 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 284              	.L49:
 696:tmk_core/common/command.c ****             break;
 285              		.loc 1 696 0
 286 0024 FFF7FEBF 		b	tfp_printf
 287              	.LVL19:
 288              	.L32:
 664:tmk_core/common/command.c ****                 mk_interval -= dec;
 289              		.loc 1 664 0
 290 0028 1D4B     		ldr	r3, .L50+8
 668:tmk_core/common/command.c ****             break;
 291              		.loc 1 668 0
 292 002a 1E48     		ldr	r0, .L50+12
 664:tmk_core/common/command.c ****                 mk_interval -= dec;
 293              		.loc 1 664 0
 294 002c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 295 002e 8A42     		cmp	r2, r1
 665:tmk_core/common/command.c ****             else
 296              		.loc 1 665 0
 297 0030 8BBF     		itete	hi
 298 0032 511A     		subhi	r1, r2, r1
 299              	.LVL20:
 667:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 300              		.loc 1 667 0
 301 0034 0022     		movls	r2, #0
 665:tmk_core/common/command.c ****             else
 302              		.loc 1 665 0
 303 0036 1970     		strbhi	r1, [r3]
 667:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_interval);
 304              		.loc 1 667 0
 305 0038 1A70     		strbls	r2, [r3]
 668:tmk_core/common/command.c ****             break;
 306              		.loc 1 668 0
 307 003a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 308 003c F2E7     		b	.L49
 309              	.LVL21:
 310              	.L33:
 671:tmk_core/common/command.c ****                 mk_max_speed -= dec;
 311              		.loc 1 671 0
 312 003e 1A4B     		ldr	r3, .L50+16
 675:tmk_core/common/command.c ****             break;
 313              		.loc 1 675 0
 314 0040 1A48     		ldr	r0, .L50+20
 671:tmk_core/common/command.c ****                 mk_max_speed -= dec;
 315              		.loc 1 671 0
 316 0042 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 317 0044 8A42     		cmp	r2, r1
 672:tmk_core/common/command.c ****             else
 318              		.loc 1 672 0
 319 0046 8BBF     		itete	hi
 320 0048 511A     		subhi	r1, r2, r1
 321              	.LVL22:
 674:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 322              		.loc 1 674 0
 323 004a 0022     		movls	r2, #0
 672:tmk_core/common/command.c ****             else
 324              		.loc 1 672 0
 325 004c 1970     		strbhi	r1, [r3]
 674:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_max_speed);
 326              		.loc 1 674 0
 327 004e 1A70     		strbls	r2, [r3]
 675:tmk_core/common/command.c ****             break;
 328              		.loc 1 675 0
 329 0050 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 330 0052 E7E7     		b	.L49
 331              	.LVL23:
 332              	.L34:
 678:tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 333              		.loc 1 678 0
 334 0054 164B     		ldr	r3, .L50+24
 682:tmk_core/common/command.c ****             break;
 335              		.loc 1 682 0
 336 0056 1748     		ldr	r0, .L50+28
 678:tmk_core/common/command.c ****                 mk_time_to_max -= dec;
 337              		.loc 1 678 0
 338 0058 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 339 005a 8A42     		cmp	r2, r1
 679:tmk_core/common/command.c ****             else
 340              		.loc 1 679 0
 341 005c 8BBF     		itete	hi
 342 005e 511A     		subhi	r1, r2, r1
 343              	.LVL24:
 681:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 344              		.loc 1 681 0
 345 0060 0022     		movls	r2, #0
 679:tmk_core/common/command.c ****             else
 346              		.loc 1 679 0
 347 0062 1970     		strbhi	r1, [r3]
 681:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_time_to_max);
 348              		.loc 1 681 0
 349 0064 1A70     		strbls	r2, [r3]
 682:tmk_core/common/command.c ****             break;
 350              		.loc 1 682 0
 351 0066 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 352 0068 DCE7     		b	.L49
 353              	.LVL25:
 354              	.L35:
 685:tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 355              		.loc 1 685 0
 356 006a 134B     		ldr	r3, .L50+32
 689:tmk_core/common/command.c ****             break;
 357              		.loc 1 689 0
 358 006c 1348     		ldr	r0, .L50+36
 685:tmk_core/common/command.c ****                 mk_wheel_max_speed -= dec;
 359              		.loc 1 685 0
 360 006e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 361 0070 8A42     		cmp	r2, r1
 686:tmk_core/common/command.c ****             else
 362              		.loc 1 686 0
 363 0072 8BBF     		itete	hi
 364 0074 511A     		subhi	r1, r2, r1
 365              	.LVL26:
 688:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 366              		.loc 1 688 0
 367 0076 0022     		movls	r2, #0
 686:tmk_core/common/command.c ****             else
 368              		.loc 1 686 0
 369 0078 1970     		strbhi	r1, [r3]
 688:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_max_speed);
 370              		.loc 1 688 0
 371 007a 1A70     		strbls	r2, [r3]
 689:tmk_core/common/command.c ****             break;
 372              		.loc 1 689 0
 373 007c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 374 007e D1E7     		b	.L49
 375              	.LVL27:
 376              	.L36:
 692:tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 377              		.loc 1 692 0
 378 0080 0F4B     		ldr	r3, .L50+40
 696:tmk_core/common/command.c ****             break;
 379              		.loc 1 696 0
 380 0082 1048     		ldr	r0, .L50+44
 692:tmk_core/common/command.c ****                 mk_wheel_time_to_max -= dec;
 381              		.loc 1 692 0
 382 0084 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 383 0086 8A42     		cmp	r2, r1
 693:tmk_core/common/command.c ****             else
 384              		.loc 1 693 0
 385 0088 8BBF     		itete	hi
 386 008a 511A     		subhi	r1, r2, r1
 387              	.LVL28:
 695:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 388              		.loc 1 695 0
 389 008c 0022     		movls	r2, #0
 693:tmk_core/common/command.c ****             else
 390              		.loc 1 693 0
 391 008e 1970     		strbhi	r1, [r3]
 695:tmk_core/common/command.c ****             PRINT_SET_VAL(mk_wheel_time_to_max);
 392              		.loc 1 695 0
 393 0090 1A70     		strbls	r2, [r3]
 696:tmk_core/common/command.c ****             break;
 394              		.loc 1 696 0
 395 0092 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 396 0094 C6E7     		b	.L49
 397              	.LVL29:
 398              	.L28:
 699:tmk_core/common/command.c **** 
 399              		.loc 1 699 0
 400 0096 7047     		bx	lr
 401              	.L51:
 402              		.align	2
 403              	.L50:
 404 0098 00000000 		.word	mk_delay
 405 009c 00000000 		.word	.LC2
 406 00a0 00000000 		.word	mk_interval
 407 00a4 0F000000 		.word	.LC3
 408 00a8 00000000 		.word	mk_max_speed
 409 00ac 21000000 		.word	.LC4
 410 00b0 00000000 		.word	mk_time_to_max
 411 00b4 34000000 		.word	.LC5
 412 00b8 00000000 		.word	mk_wheel_max_speed
 413 00bc 49000000 		.word	.LC6
 414 00c0 00000000 		.word	mk_wheel_time_to_max
 415 00c4 62000000 		.word	.LC7
 416              		.cfi_endproc
 417              	.LFE299:
 419              		.section	.text.switch_default_layer,"ax",%progbits
 420              		.align	1
 421              		.syntax unified
 422              		.thumb
 423              		.thumb_func
 424              		.fpu softvfp
 426              	switch_default_layer:
 427              	.LFB303:
 723:tmk_core/common/command.c **** 
 724:tmk_core/common/command.c **** static bool mousekey_console(uint8_t code) {
 725:tmk_core/common/command.c ****     switch (code) {
 726:tmk_core/common/command.c ****         case KC_H:
 727:tmk_core/common/command.c ****         case KC_SLASH: /* ? */
 728:tmk_core/common/command.c ****             mousekey_console_help();
 729:tmk_core/common/command.c ****             break;
 730:tmk_core/common/command.c ****         case KC_Q:
 731:tmk_core/common/command.c ****         case KC_ESC:
 732:tmk_core/common/command.c ****             if (mousekey_param) {
 733:tmk_core/common/command.c ****                 mousekey_param = 0;
 734:tmk_core/common/command.c ****             } else {
 735:tmk_core/common/command.c ****                 print("C> ");
 736:tmk_core/common/command.c ****                 command_state = CONSOLE;
 737:tmk_core/common/command.c ****                 return false;
 738:tmk_core/common/command.c ****             }
 739:tmk_core/common/command.c ****             break;
 740:tmk_core/common/command.c ****         case KC_P:
 741:tmk_core/common/command.c ****             mousekey_param_print();
 742:tmk_core/common/command.c ****             break;
 743:tmk_core/common/command.c ****         case KC_1:
 744:tmk_core/common/command.c ****         case KC_2:
 745:tmk_core/common/command.c ****         case KC_3:
 746:tmk_core/common/command.c ****         case KC_4:
 747:tmk_core/common/command.c ****         case KC_5:
 748:tmk_core/common/command.c ****         case KC_6:
 749:tmk_core/common/command.c ****             mousekey_param = numkey2num(code);
 750:tmk_core/common/command.c ****             break;
 751:tmk_core/common/command.c ****         case KC_UP:
 752:tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 1);
 753:tmk_core/common/command.c ****             break;
 754:tmk_core/common/command.c ****         case KC_DOWN:
 755:tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 1);
 756:tmk_core/common/command.c ****             break;
 757:tmk_core/common/command.c ****         case KC_PGUP:
 758:tmk_core/common/command.c ****             mousekey_param_inc(mousekey_param, 10);
 759:tmk_core/common/command.c ****             break;
 760:tmk_core/common/command.c ****         case KC_PGDN:
 761:tmk_core/common/command.c ****             mousekey_param_dec(mousekey_param, 10);
 762:tmk_core/common/command.c ****             break;
 763:tmk_core/common/command.c ****         case KC_D:
 764:tmk_core/common/command.c ****             mk_delay             = MOUSEKEY_DELAY / 10;
 765:tmk_core/common/command.c ****             mk_interval          = MOUSEKEY_INTERVAL;
 766:tmk_core/common/command.c ****             mk_max_speed         = MOUSEKEY_MAX_SPEED;
 767:tmk_core/common/command.c ****             mk_time_to_max       = MOUSEKEY_TIME_TO_MAX;
 768:tmk_core/common/command.c ****             mk_wheel_max_speed   = MOUSEKEY_WHEEL_MAX_SPEED;
 769:tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 770:tmk_core/common/command.c ****             print("set default\n");
 771:tmk_core/common/command.c ****             break;
 772:tmk_core/common/command.c ****         default:
 773:tmk_core/common/command.c ****             print("?");
 774:tmk_core/common/command.c ****             return false;
 775:tmk_core/common/command.c ****     }
 776:tmk_core/common/command.c ****     if (mousekey_param) {
 777:tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 778:tmk_core/common/command.c ****     } else {
 779:tmk_core/common/command.c ****         print("M>");
 780:tmk_core/common/command.c ****     }
 781:tmk_core/common/command.c ****     return true;
 782:tmk_core/common/command.c **** }
 783:tmk_core/common/command.c **** #endif
 784:tmk_core/common/command.c **** 
 785:tmk_core/common/command.c **** /***********************************************************
 786:tmk_core/common/command.c ****  * Utilities
 787:tmk_core/common/command.c ****  ***********************************************************/
 788:tmk_core/common/command.c **** uint8_t numkey2num(uint8_t code) {
 789:tmk_core/common/command.c ****     switch (code) {
 790:tmk_core/common/command.c ****         case KC_1:
 791:tmk_core/common/command.c ****             return 1;
 792:tmk_core/common/command.c ****         case KC_2:
 793:tmk_core/common/command.c ****             return 2;
 794:tmk_core/common/command.c ****         case KC_3:
 795:tmk_core/common/command.c ****             return 3;
 796:tmk_core/common/command.c ****         case KC_4:
 797:tmk_core/common/command.c ****             return 4;
 798:tmk_core/common/command.c ****         case KC_5:
 799:tmk_core/common/command.c ****             return 5;
 800:tmk_core/common/command.c ****         case KC_6:
 801:tmk_core/common/command.c ****             return 6;
 802:tmk_core/common/command.c ****         case KC_7:
 803:tmk_core/common/command.c ****             return 7;
 804:tmk_core/common/command.c ****         case KC_8:
 805:tmk_core/common/command.c ****             return 8;
 806:tmk_core/common/command.c ****         case KC_9:
 807:tmk_core/common/command.c ****             return 9;
 808:tmk_core/common/command.c ****         case KC_0:
 809:tmk_core/common/command.c ****             return 0;
 810:tmk_core/common/command.c ****     }
 811:tmk_core/common/command.c ****     return 0;
 812:tmk_core/common/command.c **** }
 813:tmk_core/common/command.c **** 
 814:tmk_core/common/command.c **** static void switch_default_layer(uint8_t layer) {
 428              		.loc 1 814 0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 0
 431              		@ frame_needed = 0, uses_anonymous_args = 0
 432              	.LVL30:
 433 0000 10B5     		push	{r4, lr}
 434              		.cfi_def_cfa_offset 8
 435              		.cfi_offset 4, -8
 436              		.cfi_offset 14, -4
 815:tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 437              		.loc 1 815 0
 438 0002 0146     		mov	r1, r0
 814:tmk_core/common/command.c ****     xprintf("L%d\n", layer);
 439              		.loc 1 814 0
 440 0004 0446     		mov	r4, r0
 441              		.loc 1 815 0
 442 0006 0548     		ldr	r0, .L53
 443              	.LVL31:
 444 0008 FFF7FEFF 		bl	tfp_printf
 445              	.LVL32:
 816:tmk_core/common/command.c ****     default_layer_set(1UL << layer);
 446              		.loc 1 816 0
 447 000c 0120     		movs	r0, #1
 448 000e A040     		lsls	r0, r0, r4
 449 0010 FFF7FEFF 		bl	default_layer_set
 450              	.LVL33:
 817:tmk_core/common/command.c ****     clear_keyboard();
 818:tmk_core/common/command.c **** }
 451              		.loc 1 818 0
 452 0014 BDE81040 		pop	{r4, lr}
 453              		.cfi_restore 14
 454              		.cfi_restore 4
 455              		.cfi_def_cfa_offset 0
 817:tmk_core/common/command.c ****     clear_keyboard();
 456              		.loc 1 817 0
 457 0018 FFF7FEBF 		b	clear_keyboard
 458              	.LVL34:
 459              	.L54:
 460              		.align	2
 461              	.L53:
 462 001c 00000000 		.word	.LC8
 463              		.cfi_endproc
 464              	.LFE303:
 466              		.section	.text.command_common,"ax",%progbits
 467              		.align	1
 468              		.syntax unified
 469              		.thumb
 470              		.thumb_func
 471              		.fpu softvfp
 473              	command_common:
 474              	.LFB294:
 316:tmk_core/common/command.c **** #ifdef KEYBOARD_LOCK_ENABLE
 475              		.loc 1 316 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              	.LVL35:
 480 0000 38B5     		push	{r3, r4, r5, lr}
 481              		.cfi_def_cfa_offset 16
 482              		.cfi_offset 3, -16
 483              		.cfi_offset 4, -12
 484              		.cfi_offset 5, -8
 485              		.cfi_offset 14, -4
 321:tmk_core/common/command.c **** #ifdef SLEEP_LED_ENABLE
 486              		.loc 1 321 0
 487 0002 431F     		subs	r3, r0, #5
 488 0004 3E2B     		cmp	r3, #62
 489 0006 00F22C82 		bhi	.L56
 490 000a DFE813F0 		tbh	[pc, r3, lsl #1]
 491              	.L58:
 492 000e 1D01     		.2byte	(.L57-.L58)/2
 493 0010 0C01     		.2byte	(.L59-.L58)/2
 494 0012 2901     		.2byte	(.L60-.L58)/2
 495 0014 3F00     		.2byte	(.L61-.L58)/2
 496 0016 2A02     		.2byte	(.L56-.L58)/2
 497 0018 2A02     		.2byte	(.L56-.L58)/2
 498 001a 0A01     		.2byte	(.L62-.L58)/2
 499 001c 2A02     		.2byte	(.L56-.L58)/2
 500 001e 2A02     		.2byte	(.L56-.L58)/2
 501 0020 5801     		.2byte	(.L63-.L58)/2
 502 0022 2A02     		.2byte	(.L56-.L58)/2
 503 0024 6701     		.2byte	(.L64-.L58)/2
 504 0026 A701     		.2byte	(.L65-.L58)/2
 505 0028 2A02     		.2byte	(.L56-.L58)/2
 506 002a 2A02     		.2byte	(.L56-.L58)/2
 507 002c 2A02     		.2byte	(.L56-.L58)/2
 508 002e 2A02     		.2byte	(.L56-.L58)/2
 509 0030 8701     		.2byte	(.L66-.L58)/2
 510 0032 2A02     		.2byte	(.L56-.L58)/2
 511 0034 2A02     		.2byte	(.L56-.L58)/2
 512 0036 7601     		.2byte	(.L67-.L58)/2
 513 0038 2A02     		.2byte	(.L56-.L58)/2
 514 003a 4301     		.2byte	(.L68-.L58)/2
 515 003c 2A02     		.2byte	(.L56-.L58)/2
 516 003e 2A02     		.2byte	(.L56-.L58)/2
 517 0040 2802     		.2byte	(.L69-.L58)/2
 518 0042 2802     		.2byte	(.L69-.L58)/2
 519 0044 2802     		.2byte	(.L69-.L58)/2
 520 0046 2802     		.2byte	(.L69-.L58)/2
 521 0048 2802     		.2byte	(.L69-.L58)/2
 522 004a 2802     		.2byte	(.L69-.L58)/2
 523 004c 2802     		.2byte	(.L69-.L58)/2
 524 004e 2802     		.2byte	(.L69-.L58)/2
 525 0050 2802     		.2byte	(.L69-.L58)/2
 526 0052 B701     		.2byte	(.L70-.L58)/2
 527 0054 2A02     		.2byte	(.L56-.L58)/2
 528 0056 1D01     		.2byte	(.L57-.L58)/2
 529 0058 0301     		.2byte	(.L71-.L58)/2
 530 005a 2A02     		.2byte	(.L56-.L58)/2
 531 005c 2A02     		.2byte	(.L56-.L58)/2
 532 005e 2A02     		.2byte	(.L56-.L58)/2
 533 0060 2A02     		.2byte	(.L56-.L58)/2
 534 0062 2A02     		.2byte	(.L56-.L58)/2
 535 0064 2A02     		.2byte	(.L56-.L58)/2
 536 0066 2A02     		.2byte	(.L56-.L58)/2
 537 0068 2A02     		.2byte	(.L56-.L58)/2
 538 006a 2A02     		.2byte	(.L56-.L58)/2
 539 006c 2A02     		.2byte	(.L56-.L58)/2
 540 006e B701     		.2byte	(.L70-.L58)/2
 541 0070 2A02     		.2byte	(.L56-.L58)/2
 542 0072 2A02     		.2byte	(.L56-.L58)/2
 543 0074 0A01     		.2byte	(.L62-.L58)/2
 544 0076 2A02     		.2byte	(.L56-.L58)/2
 545 0078 2502     		.2byte	(.L72-.L58)/2
 546 007a 2502     		.2byte	(.L72-.L58)/2
 547 007c 2502     		.2byte	(.L72-.L58)/2
 548 007e 2502     		.2byte	(.L72-.L58)/2
 549 0080 2502     		.2byte	(.L72-.L58)/2
 550 0082 2502     		.2byte	(.L72-.L58)/2
 551 0084 2502     		.2byte	(.L72-.L58)/2
 552 0086 2502     		.2byte	(.L72-.L58)/2
 553 0088 2502     		.2byte	(.L72-.L58)/2
 554 008a B701     		.2byte	(.L70-.L58)/2
 555              		.p2align 1
 556              	.L61:
 334:tmk_core/common/command.c ****             print_eeconfig();
 557              		.loc 1 334 0
 558 008c BD48     		ldr	r0, .L84
 559              	.LVL36:
 560 008e FFF7FEFF 		bl	tfp_printf
 561              	.LVL37:
 562              	.LBB12:
 563              	.LBB13:
 241:tmk_core/common/command.c ****     print_dec(eeconfig_read_default_layer());
 564              		.loc 1 241 0
 565 0092 BD48     		ldr	r0, .L84+4
 566 0094 FFF7FEFF 		bl	tfp_printf
 567              	.LVL38:
 242:tmk_core/common/command.c ****     print("\n");
 568              		.loc 1 242 0
 569 0098 FFF7FEFF 		bl	eeconfig_read_default_layer
 570              	.LVL39:
 571 009c 0146     		mov	r1, r0
 572 009e BB48     		ldr	r0, .L84+8
 573 00a0 FFF7FEFF 		bl	tfp_printf
 574              	.LVL40:
 243:tmk_core/common/command.c **** 
 575              		.loc 1 243 0
 576 00a4 BA48     		ldr	r0, .L84+12
 577 00a6 FFF7FEFF 		bl	tfp_printf
 578              	.LVL41:
 246:tmk_core/common/command.c ****     print("debug_config.raw: ");
 579              		.loc 1 246 0
 580 00aa FFF7FEFF 		bl	eeconfig_read_debug
 581              	.LVL42:
 582 00ae 0446     		mov	r4, r0
 247:tmk_core/common/command.c ****     print_hex8(dc.raw);
 583              		.loc 1 247 0
 584 00b0 B848     		ldr	r0, .L84+16
 585 00b2 FFF7FEFF 		bl	tfp_printf
 586              	.LVL43:
 248:tmk_core/common/command.c ****     print("\n");
 587              		.loc 1 248 0
 588 00b6 2146     		mov	r1, r4
 589 00b8 B748     		ldr	r0, .L84+20
 590 00ba FFF7FEFF 		bl	tfp_printf
 591              	.LVL44:
 249:tmk_core/common/command.c ****     print(".enable: ");
 592              		.loc 1 249 0
 593 00be B448     		ldr	r0, .L84+12
 594 00c0 FFF7FEFF 		bl	tfp_printf
 595              	.LVL45:
 250:tmk_core/common/command.c ****     print_dec(dc.enable);
 596              		.loc 1 250 0
 597 00c4 B548     		ldr	r0, .L84+24
 598 00c6 FFF7FEFF 		bl	tfp_printf
 599              	.LVL46:
 251:tmk_core/common/command.c ****     print("\n");
 600              		.loc 1 251 0
 601 00ca 04F00101 		and	r1, r4, #1
 602 00ce AF48     		ldr	r0, .L84+8
 603 00d0 FFF7FEFF 		bl	tfp_printf
 604              	.LVL47:
 252:tmk_core/common/command.c ****     print(".matrix: ");
 605              		.loc 1 252 0
 606 00d4 AE48     		ldr	r0, .L84+12
 607 00d6 FFF7FEFF 		bl	tfp_printf
 608              	.LVL48:
 253:tmk_core/common/command.c ****     print_dec(dc.matrix);
 609              		.loc 1 253 0
 610 00da B148     		ldr	r0, .L84+28
 611 00dc FFF7FEFF 		bl	tfp_printf
 612              	.LVL49:
 254:tmk_core/common/command.c ****     print("\n");
 613              		.loc 1 254 0
 614 00e0 C4F34001 		ubfx	r1, r4, #1, #1
 615 00e4 A948     		ldr	r0, .L84+8
 616 00e6 FFF7FEFF 		bl	tfp_printf
 617              	.LVL50:
 255:tmk_core/common/command.c ****     print(".keyboard: ");
 618              		.loc 1 255 0
 619 00ea A948     		ldr	r0, .L84+12
 620 00ec FFF7FEFF 		bl	tfp_printf
 621              	.LVL51:
 256:tmk_core/common/command.c ****     print_dec(dc.keyboard);
 622              		.loc 1 256 0
 623 00f0 AC48     		ldr	r0, .L84+32
 624 00f2 FFF7FEFF 		bl	tfp_printf
 625              	.LVL52:
 257:tmk_core/common/command.c ****     print("\n");
 626              		.loc 1 257 0
 627 00f6 C4F38001 		ubfx	r1, r4, #2, #1
 628 00fa A448     		ldr	r0, .L84+8
 629 00fc FFF7FEFF 		bl	tfp_printf
 630              	.LVL53:
 258:tmk_core/common/command.c ****     print(".mouse: ");
 631              		.loc 1 258 0
 632 0100 A348     		ldr	r0, .L84+12
 633 0102 FFF7FEFF 		bl	tfp_printf
 634              	.LVL54:
 259:tmk_core/common/command.c ****     print_dec(dc.mouse);
 635              		.loc 1 259 0
 636 0106 A848     		ldr	r0, .L84+36
 637 0108 FFF7FEFF 		bl	tfp_printf
 638              	.LVL55:
 260:tmk_core/common/command.c ****     print("\n");
 639              		.loc 1 260 0
 640 010c C4F3C001 		ubfx	r1, r4, #3, #1
 641 0110 9E48     		ldr	r0, .L84+8
 642 0112 FFF7FEFF 		bl	tfp_printf
 643              	.LVL56:
 261:tmk_core/common/command.c **** 
 644              		.loc 1 261 0
 645 0116 9E48     		ldr	r0, .L84+12
 646 0118 FFF7FEFF 		bl	tfp_printf
 647              	.LVL57:
 264:tmk_core/common/command.c ****     print("keymap_config.raw: ");
 648              		.loc 1 264 0
 649 011c FFF7FEFF 		bl	eeconfig_read_keymap
 650              	.LVL58:
 651 0120 0446     		mov	r4, r0
 265:tmk_core/common/command.c ****     print_hex8(kc.raw);
 652              		.loc 1 265 0
 653 0122 A248     		ldr	r0, .L84+40
 654 0124 FFF7FEFF 		bl	tfp_printf
 655              	.LVL59:
 266:tmk_core/common/command.c ****     print("\n");
 656              		.loc 1 266 0
 657 0128 2146     		mov	r1, r4
 658 012a 9B48     		ldr	r0, .L84+20
 659 012c FFF7FEFF 		bl	tfp_printf
 660              	.LVL60:
 267:tmk_core/common/command.c ****     print(".swap_control_capslock: ");
 661              		.loc 1 267 0
 662 0130 9748     		ldr	r0, .L84+12
 663 0132 FFF7FEFF 		bl	tfp_printf
 664              	.LVL61:
 268:tmk_core/common/command.c ****     print_dec(kc.swap_control_capslock);
 665              		.loc 1 268 0
 666 0136 9E48     		ldr	r0, .L84+44
 667 0138 FFF7FEFF 		bl	tfp_printf
 668              	.LVL62:
 269:tmk_core/common/command.c ****     print("\n");
 669              		.loc 1 269 0
 670 013c 04F00101 		and	r1, r4, #1
 671 0140 9248     		ldr	r0, .L84+8
 672 0142 FFF7FEFF 		bl	tfp_printf
 673              	.LVL63:
 270:tmk_core/common/command.c ****     print(".capslock_to_control: ");
 674              		.loc 1 270 0
 675 0146 9248     		ldr	r0, .L84+12
 676 0148 FFF7FEFF 		bl	tfp_printf
 677              	.LVL64:
 271:tmk_core/common/command.c ****     print_dec(kc.capslock_to_control);
 678              		.loc 1 271 0
 679 014c 9948     		ldr	r0, .L84+48
 680 014e FFF7FEFF 		bl	tfp_printf
 681              	.LVL65:
 272:tmk_core/common/command.c ****     print("\n");
 682              		.loc 1 272 0
 683 0152 C4F34001 		ubfx	r1, r4, #1, #1
 684 0156 8D48     		ldr	r0, .L84+8
 685 0158 FFF7FEFF 		bl	tfp_printf
 686              	.LVL66:
 273:tmk_core/common/command.c ****     print(".swap_lctl_lgui: ");
 687              		.loc 1 273 0
 688 015c 8C48     		ldr	r0, .L84+12
 689 015e FFF7FEFF 		bl	tfp_printf
 690              	.LVL67:
 274:tmk_core/common/command.c ****     print_dec(kc.swap_lctl_lgui);
 691              		.loc 1 274 0
 692 0162 9548     		ldr	r0, .L84+52
 693 0164 FFF7FEFF 		bl	tfp_printf
 694              	.LVL68:
 275:tmk_core/common/command.c ****     print("\n");
 695              		.loc 1 275 0
 696 0168 C4F30021 		ubfx	r1, r4, #8, #1
 697 016c 8748     		ldr	r0, .L84+8
 698 016e FFF7FEFF 		bl	tfp_printf
 699              	.LVL69:
 276:tmk_core/common/command.c ****     print(".swap_rctl_rgui: ");
 700              		.loc 1 276 0
 701 0172 8748     		ldr	r0, .L84+12
 702 0174 FFF7FEFF 		bl	tfp_printf
 703              	.LVL70:
 277:tmk_core/common/command.c ****     print_dec(kc.swap_rctl_rgui);
 704              		.loc 1 277 0
 705 0178 9048     		ldr	r0, .L84+56
 706 017a FFF7FEFF 		bl	tfp_printf
 707              	.LVL71:
 278:tmk_core/common/command.c ****     print("\n");
 708              		.loc 1 278 0
 709 017e C4F34021 		ubfx	r1, r4, #9, #1
 710 0182 8248     		ldr	r0, .L84+8
 711 0184 FFF7FEFF 		bl	tfp_printf
 712              	.LVL72:
 279:tmk_core/common/command.c ****     print(".swap_lalt_lgui: ");
 713              		.loc 1 279 0
 714 0188 8148     		ldr	r0, .L84+12
 715 018a FFF7FEFF 		bl	tfp_printf
 716              	.LVL73:
 280:tmk_core/common/command.c ****     print_dec(kc.swap_lalt_lgui);
 717              		.loc 1 280 0
 718 018e 8C48     		ldr	r0, .L84+60
 719 0190 FFF7FEFF 		bl	tfp_printf
 720              	.LVL74:
 281:tmk_core/common/command.c ****     print("\n");
 721              		.loc 1 281 0
 722 0194 C4F38001 		ubfx	r1, r4, #2, #1
 723 0198 7C48     		ldr	r0, .L84+8
 724 019a FFF7FEFF 		bl	tfp_printf
 725              	.LVL75:
 282:tmk_core/common/command.c ****     print(".swap_ralt_rgui: ");
 726              		.loc 1 282 0
 727 019e 7C48     		ldr	r0, .L84+12
 728 01a0 FFF7FEFF 		bl	tfp_printf
 729              	.LVL76:
 283:tmk_core/common/command.c ****     print_dec(kc.swap_ralt_rgui);
 730              		.loc 1 283 0
 731 01a4 8748     		ldr	r0, .L84+64
 732 01a6 FFF7FEFF 		bl	tfp_printf
 733              	.LVL77:
 284:tmk_core/common/command.c ****     print("\n");
 734              		.loc 1 284 0
 735 01aa C4F3C001 		ubfx	r1, r4, #3, #1
 736 01ae 7748     		ldr	r0, .L84+8
 737 01b0 FFF7FEFF 		bl	tfp_printf
 738              	.LVL78:
 285:tmk_core/common/command.c ****     print(".no_gui: ");
 739              		.loc 1 285 0
 740 01b4 7648     		ldr	r0, .L84+12
 741 01b6 FFF7FEFF 		bl	tfp_printf
 742              	.LVL79:
 286:tmk_core/common/command.c ****     print_dec(kc.no_gui);
 743              		.loc 1 286 0
 744 01ba 8348     		ldr	r0, .L84+68
 745 01bc FFF7FEFF 		bl	tfp_printf
 746              	.LVL80:
 287:tmk_core/common/command.c ****     print("\n");
 747              		.loc 1 287 0
 748 01c0 C4F30011 		ubfx	r1, r4, #4, #1
 749 01c4 7148     		ldr	r0, .L84+8
 750 01c6 FFF7FEFF 		bl	tfp_printf
 751              	.LVL81:
 288:tmk_core/common/command.c ****     print(".swap_grave_esc: ");
 752              		.loc 1 288 0
 753 01ca 7148     		ldr	r0, .L84+12
 754 01cc FFF7FEFF 		bl	tfp_printf
 755              	.LVL82:
 289:tmk_core/common/command.c ****     print_dec(kc.swap_grave_esc);
 756              		.loc 1 289 0
 757 01d0 7E48     		ldr	r0, .L84+72
 758 01d2 FFF7FEFF 		bl	tfp_printf
 759              	.LVL83:
 290:tmk_core/common/command.c ****     print("\n");
 760              		.loc 1 290 0
 761 01d6 C4F34011 		ubfx	r1, r4, #5, #1
 762 01da 6C48     		ldr	r0, .L84+8
 763 01dc FFF7FEFF 		bl	tfp_printf
 764              	.LVL84:
 291:tmk_core/common/command.c ****     print(".swap_backslash_backspace: ");
 765              		.loc 1 291 0
 766 01e0 6B48     		ldr	r0, .L84+12
 767 01e2 FFF7FEFF 		bl	tfp_printf
 768              	.LVL85:
 292:tmk_core/common/command.c ****     print_dec(kc.swap_backslash_backspace);
 769              		.loc 1 292 0
 770 01e6 7A48     		ldr	r0, .L84+76
 771 01e8 FFF7FEFF 		bl	tfp_printf
 772              	.LVL86:
 293:tmk_core/common/command.c ****     print("\n");
 773              		.loc 1 293 0
 774 01ec C4F38011 		ubfx	r1, r4, #6, #1
 775 01f0 6648     		ldr	r0, .L84+8
 776 01f2 FFF7FEFF 		bl	tfp_printf
 777              	.LVL87:
 294:tmk_core/common/command.c ****     print(".nkro: ");
 778              		.loc 1 294 0
 779 01f6 6648     		ldr	r0, .L84+12
 780 01f8 FFF7FEFF 		bl	tfp_printf
 781              	.LVL88:
 295:tmk_core/common/command.c ****     print_dec(kc.nkro);
 782              		.loc 1 295 0
 783 01fc 7548     		ldr	r0, .L84+80
 784 01fe FFF7FEFF 		bl	tfp_printf
 785              	.LVL89:
 296:tmk_core/common/command.c ****     print("\n");
 786              		.loc 1 296 0
 787 0202 6248     		ldr	r0, .L84+8
 788 0204 C4F3C011 		ubfx	r1, r4, #7, #1
 789 0208 FFF7FEFF 		bl	tfp_printf
 790              	.LVL90:
 297:tmk_core/common/command.c **** 
 791              		.loc 1 297 0
 792 020c 6048     		ldr	r0, .L84+12
 793              	.L80:
 794              	.LBE13:
 795              	.LBE12:
 395:tmk_core/common/command.c ****             } else {
 796              		.loc 1 395 0
 797 020e FFF7FEFF 		bl	tfp_printf
 798              	.LVL91:
 799 0212 04E0     		b	.L79
 800              	.LVL92:
 801              	.L71:
 340:tmk_core/common/command.c ****             eeconfig_init();
 802              		.loc 1 340 0
 803 0214 7048     		ldr	r0, .L84+84
 804              	.LVL93:
 805 0216 FFF7FEFF 		bl	tfp_printf
 806              	.LVL94:
 341:tmk_core/common/command.c ****             break;
 807              		.loc 1 341 0
 808 021a FFF7FEFF 		bl	eeconfig_init
 809              	.LVL95:
 810              	.L79:
 534:tmk_core/common/command.c **** }
 811              		.loc 1 534 0
 812 021e 0120     		movs	r0, #1
 813 0220 11E0     		b	.L73
 814              	.LVL96:
 815              	.L62:
 816              	.LBB14:
 817              	.LBB15:
 115:tmk_core/common/command.c **** 
 818              		.loc 1 115 0
 819 0222 6E48     		ldr	r0, .L84+88
 820              	.LVL97:
 821 0224 F3E7     		b	.L80
 822              	.LVL98:
 823              	.L59:
 824              	.LBE15:
 825              	.LBE14:
 368:tmk_core/common/command.c ****             debug_keyboard = false;
 826              		.loc 1 368 0
 827 0226 6E4A     		ldr	r2, .L84+92
 828              	.LBB16:
 829              	.LBB17:
 541:tmk_core/common/command.c ****           "ESC/q:	quit\n"
 830              		.loc 1 541 0
 831 0228 6E48     		ldr	r0, .L84+96
 832              	.LVL99:
 833              	.LBE17:
 834              	.LBE16:
 368:tmk_core/common/command.c ****             debug_keyboard = false;
 835              		.loc 1 368 0
 836 022a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 371:tmk_core/common/command.c ****             command_console_help();
 837              		.loc 1 371 0
 838 022c 03F0F103 		and	r3, r3, #241
 839 0230 6FF30003 		bfc	r3, #0, #1
 840 0234 1370     		strb	r3, [r2]
 841              	.LBB19:
 842              	.LBB18:
 541:tmk_core/common/command.c ****           "ESC/q:	quit\n"
 843              		.loc 1 541 0
 844 0236 FFF7FEFF 		bl	tfp_printf
 845              	.LVL100:
 846              	.LBE18:
 847              	.LBE19:
 373:tmk_core/common/command.c ****             command_state = CONSOLE;
 848              		.loc 1 373 0
 849 023a 6B48     		ldr	r0, .L84+100
 850 023c FFF7FEFF 		bl	tfp_printf
 851              	.LVL101:
 374:tmk_core/common/command.c ****             break;
 852              		.loc 1 374 0
 853 0240 6A4B     		ldr	r3, .L84+104
 854 0242 0120     		movs	r0, #1
 855 0244 1870     		strb	r0, [r3]
 856              	.L73:
 535:tmk_core/common/command.c **** 
 857              		.loc 1 535 0
 858 0246 38BD     		pop	{r3, r4, r5, pc}
 859              	.LVL102:
 860              	.L57:
 380:tmk_core/common/command.c ****             print("\n\nJumping to bootloader... ");
 861              		.loc 1 380 0
 862 0248 FFF7FEFF 		bl	clear_keyboard
 863              	.LVL103:
 381:tmk_core/common/command.c **** #ifdef AUDIO_ENABLE
 864              		.loc 1 381 0
 865 024c 6848     		ldr	r0, .L84+108
 866 024e FFF7FEFF 		bl	tfp_printf
 867              	.LVL104:
 383:tmk_core/common/command.c ****             shutdown_user();
 868              		.loc 1 383 0
 869 0252 FFF7FEFF 		bl	stop_all_notes
 870              	.LVL105:
 384:tmk_core/common/command.c **** #else
 871              		.loc 1 384 0
 872 0256 FFF7FEFF 		bl	shutdown_user
 873              	.LVL106:
 388:tmk_core/common/command.c ****             break;
 874              		.loc 1 388 0
 875 025a FFF7FEFF 		bl	bootloader_jump
 876              	.LVL107:
 877 025e DEE7     		b	.L79
 878              	.LVL108:
 879              	.L60:
 393:tmk_core/common/command.c ****             if (debug_enable) {
 880              		.loc 1 393 0
 881 0260 5F4D     		ldr	r5, .L84+92
 882 0262 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 883 0264 C3F30002 		ubfx	r2, r3, #0, #1
 884 0268 82F00102 		eor	r2, r2, #1
 885 026c 62F30003 		bfi	r3, r2, #0, #1
 394:tmk_core/common/command.c ****                 print("\ndebug: on\n");
 886              		.loc 1 394 0
 887 0270 13F00104 		ands	r4, r3, #1
 393:tmk_core/common/command.c ****             if (debug_enable) {
 888              		.loc 1 393 0
 889 0274 2B70     		strb	r3, [r5]
 394:tmk_core/common/command.c ****                 print("\ndebug: on\n");
 890              		.loc 1 394 0
 891 0276 01D0     		beq	.L74
 395:tmk_core/common/command.c ****             } else {
 892              		.loc 1 395 0
 893 0278 5E48     		ldr	r0, .L84+112
 894              	.LVL109:
 895 027a C8E7     		b	.L80
 896              	.LVL110:
 897              	.L74:
 397:tmk_core/common/command.c ****                 debug_matrix   = false;
 898              		.loc 1 397 0
 899 027c 5E48     		ldr	r0, .L84+116
 900              	.LVL111:
 901 027e FFF7FEFF 		bl	tfp_printf
 902              	.LVL112:
 398:tmk_core/common/command.c ****                 debug_keyboard = false;
 903              		.loc 1 398 0
 904 0282 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 905 0284 64F34103 		bfi	r3, r4, #1, #1
 399:tmk_core/common/command.c ****                 debug_mouse    = false;
 906              		.loc 1 399 0
 907 0288 64F38203 		bfi	r3, r4, #2, #1
 400:tmk_core/common/command.c ****             }
 908              		.loc 1 400 0
 909 028c 64F3C303 		bfi	r3, r4, #3, #1
 910 0290 2B70     		strb	r3, [r5]
 911 0292 C4E7     		b	.L79
 912              	.LVL113:
 913              	.L68:
 406:tmk_core/common/command.c ****             if (debug_matrix) {
 914              		.loc 1 406 0
 915 0294 524C     		ldr	r4, .L84+92
 916 0296 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 917 0298 C3F34002 		ubfx	r2, r3, #1, #1
 918 029c 82F00102 		eor	r2, r2, #1
 919 02a0 62F34103 		bfi	r3, r2, #1, #1
 407:tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 920              		.loc 1 407 0
 921 02a4 9807     		lsls	r0, r3, #30
 922              	.LVL114:
 406:tmk_core/common/command.c ****             if (debug_matrix) {
 923              		.loc 1 406 0
 924 02a6 2370     		strb	r3, [r4]
 407:tmk_core/common/command.c ****                 print("\nmatrix: on\n");
 925              		.loc 1 407 0
 926 02a8 07D5     		bpl	.L75
 408:tmk_core/common/command.c ****                 debug_enable = true;
 927              		.loc 1 408 0
 928 02aa 5448     		ldr	r0, .L84+120
 929              	.L81:
 419:tmk_core/common/command.c ****                 debug_enable = true;
 930              		.loc 1 419 0
 931 02ac FFF7FEFF 		bl	tfp_printf
 932              	.LVL115:
 420:tmk_core/common/command.c ****             } else {
 933              		.loc 1 420 0
 934 02b0 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 935 02b2 43F00103 		orr	r3, r3, #1
 936 02b6 2370     		strb	r3, [r4]
 937 02b8 B1E7     		b	.L79
 938              	.L75:
 411:tmk_core/common/command.c ****             }
 939              		.loc 1 411 0
 940 02ba 5148     		ldr	r0, .L84+124
 941 02bc A7E7     		b	.L80
 942              	.LVL116:
 943              	.L63:
 417:tmk_core/common/command.c ****             if (debug_keyboard) {
 944              		.loc 1 417 0
 945 02be 484C     		ldr	r4, .L84+92
 946 02c0 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 947 02c2 C3F38002 		ubfx	r2, r3, #2, #1
 948 02c6 82F00102 		eor	r2, r2, #1
 949 02ca 62F38203 		bfi	r3, r2, #2, #1
 418:tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 950              		.loc 1 418 0
 951 02ce 5907     		lsls	r1, r3, #29
 417:tmk_core/common/command.c ****             if (debug_keyboard) {
 952              		.loc 1 417 0
 953 02d0 2370     		strb	r3, [r4]
 418:tmk_core/common/command.c ****                 print("\nkeyboard: on\n");
 954              		.loc 1 418 0
 955 02d2 01D5     		bpl	.L76
 419:tmk_core/common/command.c ****                 debug_enable = true;
 956              		.loc 1 419 0
 957 02d4 4B48     		ldr	r0, .L84+128
 958              	.LVL117:
 959 02d6 E9E7     		b	.L81
 960              	.LVL118:
 961              	.L76:
 422:tmk_core/common/command.c ****             }
 962              		.loc 1 422 0
 963 02d8 4B48     		ldr	r0, .L84+132
 964              	.LVL119:
 965 02da 98E7     		b	.L80
 966              	.LVL120:
 967              	.L64:
 428:tmk_core/common/command.c ****             if (debug_mouse) {
 968              		.loc 1 428 0
 969 02dc 404C     		ldr	r4, .L84+92
 970 02de 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 971 02e0 C3F3C002 		ubfx	r2, r3, #3, #1
 972 02e4 82F00102 		eor	r2, r2, #1
 973 02e8 62F3C303 		bfi	r3, r2, #3, #1
 429:tmk_core/common/command.c ****                 print("\nmouse: on\n");
 974              		.loc 1 429 0
 975 02ec 1A07     		lsls	r2, r3, #28
 428:tmk_core/common/command.c ****             if (debug_mouse) {
 976              		.loc 1 428 0
 977 02ee 2370     		strb	r3, [r4]
 429:tmk_core/common/command.c ****                 print("\nmouse: on\n");
 978              		.loc 1 429 0
 979 02f0 01D5     		bpl	.L77
 430:tmk_core/common/command.c ****                 debug_enable = true;
 980              		.loc 1 430 0
 981 02f2 4648     		ldr	r0, .L84+136
 982              	.LVL121:
 983 02f4 DAE7     		b	.L81
 984              	.LVL122:
 985              	.L77:
 433:tmk_core/common/command.c ****             }
 986              		.loc 1 433 0
 987 02f6 4648     		ldr	r0, .L84+140
 988              	.LVL123:
 989 02f8 89E7     		b	.L80
 990              	.LVL124:
 991              	.L67:
 992              	.LBB20:
 993              	.LBB21:
 151:tmk_core/common/command.c ****     print("DESC: " STR(DESCRIPTION) "\n");
 994              		.loc 1 151 0
 995 02fa 4648     		ldr	r0, .L84+144
 996              	.LVL125:
 997 02fc FFF7FEFF 		bl	tfp_printf
 998              	.LVL126:
 152:tmk_core/common/command.c ****     print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
 999              		.loc 1 152 0
 1000 0300 4548     		ldr	r0, .L84+148
 1001 0302 FFF7FEFF 		bl	tfp_printf
 1002              	.LVL127:
 153:tmk_core/common/command.c ****                                                        "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") 
 1003              		.loc 1 153 0
 1004 0306 4548     		ldr	r0, .L84+152
 1005 0308 FFF7FEFF 		bl	tfp_printf
 1006              	.LVL128:
 159:tmk_core/common/command.c **** #endif
 1007              		.loc 1 159 0
 1008 030c 4448     		ldr	r0, .L84+156
 1009 030e FFF7FEFF 		bl	tfp_printf
 1010              	.LVL129:
 163:tmk_core/common/command.c **** 
 1011              		.loc 1 163 0
 1012 0312 4448     		ldr	r0, .L84+160
 1013 0314 FFF7FEFF 		bl	tfp_printf
 1014              	.LVL130:
 198:tmk_core/common/command.c **** #if defined(__AVR__)
 1015              		.loc 1 198 0
 1016 0318 4348     		ldr	r0, .L84+164
 1017 031a 78E7     		b	.L80
 1018              	.LVL131:
 1019              	.L66:
 1020              	.LBE21:
 1021              	.LBE20:
 1022              	.LBB22:
 1023              	.LBB23:
 208:tmk_core/common/command.c **** 
 1024              		.loc 1 208 0
 1025 031c 4348     		ldr	r0, .L84+168
 1026              	.LVL132:
 1027 031e FFF7FEFF 		bl	tfp_printf
 1028              	.LVL133:
 210:tmk_core/common/command.c **** #ifndef PROTOCOL_VUSB
 1029              		.loc 1 210 0
 1030 0322 FFF7FEFF 		bl	host_keyboard_leds
 1031              	.LVL134:
 1032 0326 0146     		mov	r1, r0
 1033 0328 4148     		ldr	r0, .L84+172
 1034 032a FFF7FEFF 		bl	tfp_printf
 1035              	.LVL135:
 213:tmk_core/common/command.c ****     print_val_hex8(keyboard_idle);
 1036              		.loc 1 213 0
 1037 032e 414B     		ldr	r3, .L84+176
 1038 0330 4148     		ldr	r0, .L84+180
 1039 0332 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1040 0334 FFF7FEFF 		bl	tfp_printf
 1041              	.LVL136:
 214:tmk_core/common/command.c **** #endif
 1042              		.loc 1 214 0
 1043 0338 404B     		ldr	r3, .L84+184
 1044 033a 4148     		ldr	r0, .L84+188
 1045 033c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1046 033e FFF7FEFF 		bl	tfp_printf
 1047              	.LVL137:
 217:tmk_core/common/command.c **** #endif
 1048              		.loc 1 217 0
 1049 0342 404B     		ldr	r3, .L84+192
 1050 0344 4048     		ldr	r0, .L84+196
 1051 0346 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1052 0348 C909     		lsrs	r1, r1, #7
 1053 034a FFF7FEFF 		bl	tfp_printf
 1054              	.LVL138:
 219:tmk_core/common/command.c **** 
 1055              		.loc 1 219 0
 1056 034e FFF7FEFF 		bl	timer_read32
 1057              	.LVL139:
 1058 0352 0146     		mov	r1, r0
 1059 0354 3D48     		ldr	r0, .L84+200
 1060 0356 FFF7FEFF 		bl	tfp_printf
 1061              	.LVL140:
 1062 035a 60E7     		b	.L79
 1063              	.LVL141:
 1064              	.L65:
 1065              	.LBE23:
 1066              	.LBE22:
 451:tmk_core/common/command.c ****             keymap_config.nkro = !keymap_config.nkro;
 1067              		.loc 1 451 0
 1068 035c FFF7FEFF 		bl	clear_keyboard
 1069              	.LVL142:
 452:tmk_core/common/command.c ****             if (keymap_config.nkro) {
 1070              		.loc 1 452 0
 1071 0360 3849     		ldr	r1, .L84+192
 1072 0362 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 1073 0364 C3F3C012 		ubfx	r2, r3, #7, #1
 1074 0368 82F00102 		eor	r2, r2, #1
 1075 036c 62F3C713 		bfi	r3, r2, #7, #1
 1076 0370 0B70     		strb	r3, [r1]
 453:tmk_core/common/command.c ****                 print("NKRO: on\n");
 1077              		.loc 1 453 0
 1078 0372 1B06     		lsls	r3, r3, #24
 454:tmk_core/common/command.c ****             } else {
 1079              		.loc 1 454 0
 1080 0374 4CBF     		ite	mi
 1081 0376 3648     		ldrmi	r0, .L84+204
 456:tmk_core/common/command.c ****             }
 1082              		.loc 1 456 0
 1083 0378 3648     		ldrpl	r0, .L84+208
 1084 037a 48E7     		b	.L80
 1085              	.LVL143:
 1086              	.L70:
 464:tmk_core/common/command.c ****             break;
 1087              		.loc 1 464 0
 1088 037c 0020     		movs	r0, #0
 1089              	.LVL144:
 1090              	.L83:
 523:tmk_core/common/command.c ****             break;
 1091              		.loc 1 523 0
 1092 037e FFF7FEFF 		bl	switch_default_layer
 1093              	.LVL145:
 1094 0382 4CE7     		b	.L79
 1095              	.L85:
 1096              		.align	2
 1097              	.L84:
 1098 0384 00000000 		.word	.LC9
 1099 0388 0B000000 		.word	.LC10
 1100 038c 1B000000 		.word	.LC11
 1101 0390 1E000000 		.word	.LC12
 1102 0394 20000000 		.word	.LC13
 1103 0398 33000000 		.word	.LC14
 1104 039c 38000000 		.word	.LC15
 1105 03a0 42000000 		.word	.LC16
 1106 03a4 4C000000 		.word	.LC17
 1107 03a8 58000000 		.word	.LC18
 1108 03ac 61000000 		.word	.LC19
 1109 03b0 75000000 		.word	.LC20
 1110 03b4 8E000000 		.word	.LC21
 1111 03b8 A5000000 		.word	.LC22
 1112 03bc B7000000 		.word	.LC23
 1113 03c0 C9000000 		.word	.LC24
 1114 03c4 DB000000 		.word	.LC25
 1115 03c8 ED000000 		.word	.LC26
 1116 03cc F7000000 		.word	.LC27
 1117 03d0 09010000 		.word	.LC28
 1118 03d4 25010000 		.word	.LC29
 1119 03d8 2D010000 		.word	.LC30
 1120 03dc 3E010000 		.word	.LC31
 1121 03e0 00000000 		.word	debug_config
 1122 03e4 F0020000 		.word	.LC32
 1123 03e8 17030000 		.word	.LC33
 1124 03ec 00000000 		.word	.LANCHOR0
 1125 03f0 1B030000 		.word	.LC34
 1126 03f4 37030000 		.word	.LC35
 1127 03f8 43030000 		.word	.LC36
 1128 03fc 50030000 		.word	.LC37
 1129 0400 5D030000 		.word	.LC38
 1130 0404 6B030000 		.word	.LC39
 1131 0408 7A030000 		.word	.LC40
 1132 040c 8A030000 		.word	.LC41
 1133 0410 96030000 		.word	.LC42
 1134 0414 A3030000 		.word	.LC43
 1135 0418 B2030000 		.word	.LC44
 1136 041c D8030000 		.word	.LC45
 1137 0420 0C040000 		.word	.LC46
 1138 0424 44040000 		.word	.LC47
 1139 0428 8F040000 		.word	.LC48
 1140 042c 9B040000 		.word	.LC49
 1141 0430 A9040000 		.word	.LC50
 1142 0434 00000000 		.word	keyboard_protocol
 1143 0438 C3040000 		.word	.LC51
 1144 043c 00000000 		.word	keyboard_idle
 1145 0440 DA040000 		.word	.LC52
 1146 0444 00000000 		.word	keymap_config
 1147 0448 ED040000 		.word	.LC53
 1148 044c 05050000 		.word	.LC54
 1149 0450 1C050000 		.word	.LC55
 1150 0454 26050000 		.word	.LC56
 1151              	.LVL146:
 1152              	.L72:
 513:tmk_core/common/command.c ****             break;
 1153              		.loc 1 513 0
 1154 0458 3938     		subs	r0, r0, #57
 1155              	.LVL147:
 1156              	.L82:
 523:tmk_core/common/command.c ****             break;
 1157              		.loc 1 523 0
 1158 045a C0B2     		uxtb	r0, r0
 1159 045c 8FE7     		b	.L83
 1160              	.LVL148:
 1161              	.L69:
 1162 045e 1D38     		subs	r0, r0, #29
 1163              	.LVL149:
 1164 0460 FBE7     		b	.L82
 1165              	.LVL150:
 1166              	.L56:
 531:tmk_core/common/command.c ****             return false;
 1167              		.loc 1 531 0
 1168 0462 0248     		ldr	r0, .L86
 1169              	.LVL151:
 1170 0464 FFF7FEFF 		bl	tfp_printf
 1171              	.LVL152:
 532:tmk_core/common/command.c ****     }
 1172              		.loc 1 532 0
 1173 0468 0020     		movs	r0, #0
 1174 046a ECE6     		b	.L73
 1175              	.L87:
 1176              		.align	2
 1177              	.L86:
 1178 046c 31050000 		.word	.LC57
 1179              		.cfi_endproc
 1180              	.LFE294:
 1182              		.section	.text.command_extra,"ax",%progbits
 1183              		.align	1
 1184              		.weak	command_extra
 1185              		.syntax unified
 1186              		.thumb
 1187              		.thumb_func
 1188              		.fpu softvfp
 1190              	command_extra:
 1191              	.LFB288:
 100:tmk_core/common/command.c ****     (void)code;
 1192              		.loc 1 100 0
 1193              		.cfi_startproc
 1194              		@ args = 0, pretend = 0, frame = 0
 1195              		@ frame_needed = 0, uses_anonymous_args = 0
 1196              		@ link register save eliminated.
 1197              	.LVL153:
 103:tmk_core/common/command.c **** 
 1198              		.loc 1 103 0
 1199 0000 0020     		movs	r0, #0
 1200              	.LVL154:
 1201 0002 7047     		bx	lr
 1202              		.cfi_endproc
 1203              	.LFE288:
 1205              		.section	.text.command_console_extra,"ax",%progbits
 1206              		.align	1
 1207              		.weak	command_console_extra
 1208              		.syntax unified
 1209              		.thumb
 1210              		.thumb_func
 1211              		.fpu softvfp
 1213              	command_console_extra:
 1214              	.LFB305:
 1215              		.cfi_startproc
 1216              		@ args = 0, pretend = 0, frame = 0
 1217              		@ frame_needed = 0, uses_anonymous_args = 0
 1218              		@ link register save eliminated.
 1219 0000 0020     		movs	r0, #0
 1220 0002 7047     		bx	lr
 1221              		.cfi_endproc
 1222              	.LFE305:
 1224              		.section	.text.numkey2num,"ax",%progbits
 1225              		.align	1
 1226              		.global	numkey2num
 1227              		.syntax unified
 1228              		.thumb
 1229              		.thumb_func
 1230              		.fpu softvfp
 1232              	numkey2num:
 1233              	.LFB302:
 788:tmk_core/common/command.c ****     switch (code) {
 1234              		.loc 1 788 0
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 0
 1237              		@ frame_needed = 0, uses_anonymous_args = 0
 1238              		@ link register save eliminated.
 1239              	.LVL155:
 1240 0000 1E38     		subs	r0, r0, #30
 1241              	.LVL156:
 1242 0002 C0B2     		uxtb	r0, r0
 1243 0004 0928     		cmp	r0, #9
 1244 0006 9ABF     		itte	ls
 1245 0008 014B     		ldrls	r3, .L93
 1246 000a 185C     		ldrbls	r0, [r3, r0]	@ zero_extendqisi2
 788:tmk_core/common/command.c ****     switch (code) {
 1247              		.loc 1 788 0
 1248 000c 0020     		movhi	r0, #0
 812:tmk_core/common/command.c **** 
 1249              		.loc 1 812 0
 1250 000e 7047     		bx	lr
 1251              	.L94:
 1252              		.align	2
 1253              	.L93:
 1254 0010 00000000 		.word	.LANCHOR1
 1255              		.cfi_endproc
 1256              	.LFE302:
 1258              		.section	.text.command_proc,"ax",%progbits
 1259              		.align	1
 1260              		.global	command_proc
 1261              		.syntax unified
 1262              		.thumb
 1263              		.thumb_func
 1264              		.fpu softvfp
 1266              	command_proc:
 1267              	.LFB287:
  73:tmk_core/common/command.c ****     switch (command_state) {
 1268              		.loc 1 73 0
 1269              		.cfi_startproc
 1270              		@ args = 0, pretend = 0, frame = 0
 1271              		@ frame_needed = 0, uses_anonymous_args = 0
 1272              	.LVL157:
 1273 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1274              		.cfi_def_cfa_offset 24
 1275              		.cfi_offset 3, -24
 1276              		.cfi_offset 4, -20
 1277              		.cfi_offset 5, -16
 1278              		.cfi_offset 6, -12
 1279              		.cfi_offset 7, -8
 1280              		.cfi_offset 14, -4
  74:tmk_core/common/command.c ****         case ONESHOT:
 1281              		.loc 1 74 0
 1282 0002 784E     		ldr	r6, .L162
 1283 0004 3478     		ldrb	r4, [r6]	@ zero_extendqisi2
 1284 0006 012C     		cmp	r4, #1
  73:tmk_core/common/command.c ****     switch (command_state) {
 1285              		.loc 1 73 0
 1286 0008 0546     		mov	r5, r0
 1287 000a 3746     		mov	r7, r6
  74:tmk_core/common/command.c ****         case ONESHOT:
 1288              		.loc 1 74 0
 1289 000c 15D0     		beq	.L97
 1290 000e 04D3     		bcc	.L98
 1291 0010 022C     		cmp	r4, #2
 1292 0012 43D0     		beq	.L99
  91:tmk_core/common/command.c ****             return false;
 1293              		.loc 1 91 0
 1294 0014 0020     		movs	r0, #0
 1295              	.LVL158:
 1296 0016 3070     		strb	r0, [r6]
  92:tmk_core/common/command.c ****     }
 1297              		.loc 1 92 0
 1298 0018 0EE0     		b	.L100
 1299              	.LVL159:
 1300              	.L98:
  76:tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 1301              		.loc 1 76 0
 1302 001a FFF7FEFF 		bl	get_mods
 1303              	.LVL160:
 1304 001e 2228     		cmp	r0, #34
 1305 0020 23D1     		bne	.L126
  77:tmk_core/common/command.c ****             break;
 1306              		.loc 1 77 0
 1307 0022 2846     		mov	r0, r5
 1308 0024 FFF7FEFF 		bl	command_extra
 1309              	.LVL161:
 1310 0028 18B9     		cbnz	r0, .L127
 1311              	.L161:
  81:tmk_core/common/command.c ****             else
 1312              		.loc 1 81 0 discriminator 2
 1313 002a 2846     		mov	r0, r5
 1314 002c FFF7FEFF 		bl	command_common
 1315              	.LVL162:
 1316 0030 00E0     		b	.L103
 1317              	.L127:
  77:tmk_core/common/command.c ****             break;
 1318              		.loc 1 77 0
 1319 0032 0120     		movs	r0, #1
 1320              	.L103:
  81:tmk_core/common/command.c ****             else
 1321              		.loc 1 81 0 discriminator 6
 1322 0034 00F00100 		and	r0, r0, #1
 1323              	.L100:
  95:tmk_core/common/command.c **** 
 1324              		.loc 1 95 0
 1325 0038 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1326              	.LVL163:
 1327              	.L97:
  80:tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 1328              		.loc 1 80 0
 1329 003a FFF7FEFF 		bl	get_mods
 1330              	.LVL164:
 1331 003e 2228     		cmp	r0, #34
  81:tmk_core/common/command.c ****             else
 1332              		.loc 1 81 0
 1333 0040 2846     		mov	r0, r5
  80:tmk_core/common/command.c ****                 return (command_extra(code) || command_common(code));
 1334              		.loc 1 80 0
 1335 0042 05D1     		bne	.L102
  81:tmk_core/common/command.c ****             else
 1336              		.loc 1 81 0
 1337 0044 FFF7FEFF 		bl	command_extra
 1338              	.LVL165:
 1339 0048 0028     		cmp	r0, #0
 1340 004a EED0     		beq	.L161
 1341 004c 2046     		mov	r0, r4
 1342 004e F1E7     		b	.L103
 1343              	.L102:
  83:tmk_core/common/command.c ****             break;
 1344              		.loc 1 83 0
 1345 0050 FFF7FEFF 		bl	command_console_extra
 1346              	.LVL166:
 1347 0054 00BB     		cbnz	r0, .L158
 1348              	.LVL167:
 1349              	.LBB32:
 1350              	.LBB33:
 550:tmk_core/common/command.c ****         case KC_H:
 1351              		.loc 1 550 0
 1352 0056 142D     		cmp	r5, #20
 1353 0058 14D0     		beq	.L106
 1354 005a 08D8     		bhi	.L107
 1355 005c 0B2D     		cmp	r5, #11
 1356 005e 0AD0     		beq	.L108
 1357 0060 102D     		cmp	r5, #16
 1358 0062 12D0     		beq	.L109
 1359              	.L105:
 567:tmk_core/common/command.c ****             return false;
 1360              		.loc 1 567 0
 1361 0064 6048     		ldr	r0, .L162+4
 1362 0066 FFF7FEFF 		bl	tfp_printf
 1363              	.LVL168:
 1364              	.L126:
 1365              	.LBE33:
 1366              	.LBE32:
  76:tmk_core/common/command.c ****             return (command_extra(code) || command_common(code));
 1367              		.loc 1 76 0
 1368 006a 0020     		movs	r0, #0
 1369 006c E4E7     		b	.L100
 1370              	.LVL169:
 1371              	.L107:
 1372              	.LBB39:
 1373              	.LBB36:
 550:tmk_core/common/command.c ****         case KC_H:
 1374              		.loc 1 550 0
 1375 006e 292D     		cmp	r5, #41
 1376 0070 08D0     		beq	.L106
 1377 0072 382D     		cmp	r5, #56
 1378 0074 F6D1     		bne	.L105
 1379              	.L108:
 1380              	.LBB34:
 1381              	.LBB35:
 541:tmk_core/common/command.c ****           "ESC/q:	quit\n"
 1382              		.loc 1 541 0
 1383 0076 5D48     		ldr	r0, .L162+8
 1384 0078 FFF7FEFF 		bl	tfp_printf
 1385              	.LVL170:
 1386              	.LBE35:
 1387              	.LBE34:
 570:tmk_core/common/command.c ****     return true;
 1388              		.loc 1 570 0
 1389 007c 5C48     		ldr	r0, .L162+12
 1390              	.LVL171:
 1391              	.L160:
 1392              	.LBE36:
 1393              	.LBE39:
 1394              	.LBB40:
 1395              	.LBB41:
 779:tmk_core/common/command.c ****     }
 1396              		.loc 1 779 0
 1397 007e FFF7FEFF 		bl	tfp_printf
 1398              	.LVL172:
 1399 0082 09E0     		b	.L158
 1400              	.LVL173:
 1401              	.L106:
 1402              	.LBE41:
 1403              	.LBE40:
 1404              	.LBB46:
 1405              	.LBB37:
 557:tmk_core/common/command.c ****             return false;
 1406              		.loc 1 557 0
 1407 0084 0020     		movs	r0, #0
 1408              	.LVL174:
 1409              	.L159:
 1410              	.LBE37:
 1411              	.LBE46:
 1412              	.LBB47:
 1413              	.LBB44:
 736:tmk_core/common/command.c ****                 return false;
 1414              		.loc 1 736 0
 1415 0086 3870     		strb	r0, [r7]
 1416 0088 D6E7     		b	.L100
 1417              	.LVL175:
 1418              	.L109:
 1419              	.LBE44:
 1420              	.LBE47:
 1421              	.LBB48:
 1422              	.LBB38:
 561:tmk_core/common/command.c ****             print("M> ");
 1423              		.loc 1 561 0
 1424 008a FFF7FEFF 		bl	mousekey_console_help
 1425              	.LVL176:
 562:tmk_core/common/command.c ****             command_state = MOUSEKEY;
 1426              		.loc 1 562 0
 1427 008e 5948     		ldr	r0, .L162+16
 1428 0090 FFF7FEFF 		bl	tfp_printf
 1429              	.LVL177:
 563:tmk_core/common/command.c ****             return true;
 1430              		.loc 1 563 0
 1431 0094 0223     		movs	r3, #2
 1432 0096 3370     		strb	r3, [r6]
 1433              	.LVL178:
 1434              	.L158:
 1435              	.LBE38:
 1436              	.LBE48:
  94:tmk_core/common/command.c **** }
 1437              		.loc 1 94 0
 1438 0098 0120     		movs	r0, #1
 1439 009a CDE7     		b	.L100
 1440              	.LVL179:
 1441              	.L99:
 1442              	.LBB49:
 1443              	.LBB45:
 725:tmk_core/common/command.c ****         case KC_H:
 1444              		.loc 1 725 0
 1445 009c 2328     		cmp	r0, #35
 1446 009e 13D8     		bhi	.L111
 1447 00a0 1E28     		cmp	r0, #30
 1448 00a2 75D2     		bcs	.L112
 1449 00a4 0B28     		cmp	r0, #11
 1450 00a6 16D0     		beq	.L113
 1451 00a8 04D8     		bhi	.L114
 1452 00aa 0728     		cmp	r0, #7
 1453 00ac 00F08380 		beq	.L115
 1454              	.L110:
 773:tmk_core/common/command.c ****             return false;
 1455              		.loc 1 773 0
 1456 00b0 4D48     		ldr	r0, .L162+4
 1457              	.LVL180:
 1458 00b2 E4E7     		b	.L160
 1459              	.LVL181:
 1460              	.L114:
 725:tmk_core/common/command.c ****         case KC_H:
 1461              		.loc 1 725 0
 1462 00b4 1328     		cmp	r0, #19
 1463 00b6 25D0     		beq	.L116
 1464 00b8 1428     		cmp	r0, #20
 1465 00ba F9D1     		bne	.L110
 1466              	.L117:
 732:tmk_core/common/command.c ****                 mousekey_param = 0;
 1467              		.loc 1 732 0
 1468 00bc 4E4B     		ldr	r3, .L162+20
 1469 00be 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1470 00c0 DAB1     		cbz	r2, .L124
 733:tmk_core/common/command.c ****             } else {
 1471              		.loc 1 733 0
 1472 00c2 0022     		movs	r2, #0
 1473 00c4 1A70     		strb	r2, [r3]
 1474 00c6 08E0     		b	.L123
 1475              	.L111:
 725:tmk_core/common/command.c ****         case KC_H:
 1476              		.loc 1 725 0
 1477 00c8 4B28     		cmp	r0, #75
 1478 00ca 72D0     		beq	.L118
 1479 00cc 0DD8     		bhi	.L119
 1480 00ce 2928     		cmp	r0, #41
 1481 00d0 F4D0     		beq	.L117
 1482 00d2 3828     		cmp	r0, #56
 1483 00d4 ECD1     		bne	.L110
 1484              	.L113:
 728:tmk_core/common/command.c ****             break;
 1485              		.loc 1 728 0
 1486 00d6 FFF7FEFF 		bl	mousekey_console_help
 1487              	.LVL182:
 1488              	.L123:
 776:tmk_core/common/command.c ****         xprintf("M%d> ", mousekey_param);
 1489              		.loc 1 776 0
 1490 00da 474B     		ldr	r3, .L162+20
 1491 00dc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1492 00de 0029     		cmp	r1, #0
 1493 00e0 7DD0     		beq	.L125
 777:tmk_core/common/command.c ****     } else {
 1494              		.loc 1 777 0
 1495 00e2 4648     		ldr	r0, .L162+24
 1496 00e4 FFF7FEFF 		bl	tfp_printf
 1497              	.LVL183:
 1498 00e8 D6E7     		b	.L158
 1499              	.LVL184:
 1500              	.L119:
 725:tmk_core/common/command.c ****         case KC_H:
 1501              		.loc 1 725 0
 1502 00ea 5128     		cmp	r0, #81
 1503 00ec 5BD0     		beq	.L120
 1504 00ee 5228     		cmp	r0, #82
 1505 00f0 53D0     		beq	.L121
 1506 00f2 4E28     		cmp	r0, #78
 1507 00f4 DCD1     		bne	.L110
 761:tmk_core/common/command.c ****             break;
 1508              		.loc 1 761 0
 1509 00f6 0A21     		movs	r1, #10
 1510 00f8 56E0     		b	.L157
 1511              	.L124:
 735:tmk_core/common/command.c ****                 command_state = CONSOLE;
 1512              		.loc 1 735 0
 1513 00fa 3D48     		ldr	r0, .L162+12
 1514              	.LVL185:
 1515 00fc FFF7FEFF 		bl	tfp_printf
 1516              	.LVL186:
 736:tmk_core/common/command.c ****                 return false;
 1517              		.loc 1 736 0
 1518 0100 0120     		movs	r0, #1
 1519 0102 C0E7     		b	.L159
 1520              	.LVL187:
 1521              	.L116:
 1522              	.LBB42:
 1523              	.LBB43:
 583:tmk_core/common/command.c ****     print("1: delay(*10ms): ");
 1524              		.loc 1 583 0
 1525 0104 3E48     		ldr	r0, .L162+28
 1526              	.LVL188:
 1527 0106 FFF7FEFF 		bl	tfp_printf
 1528              	.LVL189:
 584:tmk_core/common/command.c ****     pdec(mk_delay);
 1529              		.loc 1 584 0
 1530 010a 3E48     		ldr	r0, .L162+32
 1531 010c FFF7FEFF 		bl	tfp_printf
 1532              	.LVL190:
 585:tmk_core/common/command.c ****     print("\n");
 1533              		.loc 1 585 0
 1534 0110 3D4B     		ldr	r3, .L162+36
 1535 0112 3E48     		ldr	r0, .L162+40
 1536 0114 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1537 0116 FFF7FEFF 		bl	tfp_printf
 1538              	.LVL191:
 586:tmk_core/common/command.c ****     print("2: interval(ms): ");
 1539              		.loc 1 586 0
 1540 011a 3D48     		ldr	r0, .L162+44
 1541 011c FFF7FEFF 		bl	tfp_printf
 1542              	.LVL192:
 587:tmk_core/common/command.c ****     pdec(mk_interval);
 1543              		.loc 1 587 0
 1544 0120 3C48     		ldr	r0, .L162+48
 1545 0122 FFF7FEFF 		bl	tfp_printf
 1546              	.LVL193:
 588:tmk_core/common/command.c ****     print("\n");
 1547              		.loc 1 588 0
 1548 0126 3C4B     		ldr	r3, .L162+52
 1549 0128 3848     		ldr	r0, .L162+40
 1550 012a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1551 012c FFF7FEFF 		bl	tfp_printf
 1552              	.LVL194:
 589:tmk_core/common/command.c ****     print("3: max_speed: ");
 1553              		.loc 1 589 0
 1554 0130 3748     		ldr	r0, .L162+44
 1555 0132 FFF7FEFF 		bl	tfp_printf
 1556              	.LVL195:
 590:tmk_core/common/command.c ****     pdec(mk_max_speed);
 1557              		.loc 1 590 0
 1558 0136 3948     		ldr	r0, .L162+56
 1559 0138 FFF7FEFF 		bl	tfp_printf
 1560              	.LVL196:
 591:tmk_core/common/command.c ****     print("\n");
 1561              		.loc 1 591 0
 1562 013c 384B     		ldr	r3, .L162+60
 1563 013e 3348     		ldr	r0, .L162+40
 1564 0140 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1565 0142 FFF7FEFF 		bl	tfp_printf
 1566              	.LVL197:
 592:tmk_core/common/command.c ****     print("4: time_to_max: ");
 1567              		.loc 1 592 0
 1568 0146 3248     		ldr	r0, .L162+44
 1569 0148 FFF7FEFF 		bl	tfp_printf
 1570              	.LVL198:
 593:tmk_core/common/command.c ****     pdec(mk_time_to_max);
 1571              		.loc 1 593 0
 1572 014c 3548     		ldr	r0, .L162+64
 1573 014e FFF7FEFF 		bl	tfp_printf
 1574              	.LVL199:
 594:tmk_core/common/command.c ****     print("\n");
 1575              		.loc 1 594 0
 1576 0152 354B     		ldr	r3, .L162+68
 1577 0154 2D48     		ldr	r0, .L162+40
 1578 0156 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1579 0158 FFF7FEFF 		bl	tfp_printf
 1580              	.LVL200:
 595:tmk_core/common/command.c ****     print("5: wheel_max_speed: ");
 1581              		.loc 1 595 0
 1582 015c 2C48     		ldr	r0, .L162+44
 1583 015e FFF7FEFF 		bl	tfp_printf
 1584              	.LVL201:
 596:tmk_core/common/command.c ****     pdec(mk_wheel_max_speed);
 1585              		.loc 1 596 0
 1586 0162 3248     		ldr	r0, .L162+72
 1587 0164 FFF7FEFF 		bl	tfp_printf
 1588              	.LVL202:
 597:tmk_core/common/command.c ****     print("\n");
 1589              		.loc 1 597 0
 1590 0168 314B     		ldr	r3, .L162+76
 1591 016a 2848     		ldr	r0, .L162+40
 1592 016c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1593 016e FFF7FEFF 		bl	tfp_printf
 1594              	.LVL203:
 598:tmk_core/common/command.c ****     print("6: wheel_time_to_max: ");
 1595              		.loc 1 598 0
 1596 0172 2748     		ldr	r0, .L162+44
 1597 0174 FFF7FEFF 		bl	tfp_printf
 1598              	.LVL204:
 599:tmk_core/common/command.c ****     pdec(mk_wheel_time_to_max);
 1599              		.loc 1 599 0
 1600 0178 2E48     		ldr	r0, .L162+80
 1601 017a FFF7FEFF 		bl	tfp_printf
 1602              	.LVL205:
 600:tmk_core/common/command.c ****     print("\n");
 1603              		.loc 1 600 0
 1604 017e 2E4B     		ldr	r3, .L162+84
 1605 0180 2248     		ldr	r0, .L162+40
 1606 0182 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1607 0184 FFF7FEFF 		bl	tfp_printf
 1608              	.LVL206:
 601:tmk_core/common/command.c **** #    endif /* !NO_PRINT */
 1609              		.loc 1 601 0
 1610 0188 2148     		ldr	r0, .L162+44
 1611              	.L155:
 1612              	.LBE43:
 1613              	.LBE42:
 770:tmk_core/common/command.c ****             break;
 1614              		.loc 1 770 0
 1615 018a FFF7FEFF 		bl	tfp_printf
 1616              	.LVL207:
 1617 018e A4E7     		b	.L123
 1618              	.LVL208:
 1619              	.L112:
 749:tmk_core/common/command.c ****             break;
 1620              		.loc 1 749 0
 1621 0190 FFF7FEFF 		bl	numkey2num
 1622              	.LVL209:
 1623 0194 184B     		ldr	r3, .L162+20
 1624 0196 1870     		strb	r0, [r3]
 1625 0198 9FE7     		b	.L123
 1626              	.LVL210:
 1627              	.L121:
 752:tmk_core/common/command.c ****             break;
 1628              		.loc 1 752 0
 1629 019a 0121     		movs	r1, #1
 1630              	.L156:
 758:tmk_core/common/command.c ****             break;
 1631              		.loc 1 758 0
 1632 019c 164B     		ldr	r3, .L162+20
 1633 019e 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1634              	.LVL211:
 1635 01a0 FFF7FEFF 		bl	mousekey_param_inc
 1636              	.LVL212:
 1637 01a4 99E7     		b	.L123
 1638              	.LVL213:
 1639              	.L120:
 755:tmk_core/common/command.c ****             break;
 1640              		.loc 1 755 0
 1641 01a6 0121     		movs	r1, #1
 1642              	.L157:
 761:tmk_core/common/command.c ****             break;
 1643              		.loc 1 761 0
 1644 01a8 134B     		ldr	r3, .L162+20
 1645 01aa 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1646              	.LVL214:
 1647 01ac FFF7FEFF 		bl	mousekey_param_dec
 1648              	.LVL215:
 1649 01b0 93E7     		b	.L123
 1650              	.LVL216:
 1651              	.L118:
 758:tmk_core/common/command.c ****             break;
 1652              		.loc 1 758 0
 1653 01b2 0A21     		movs	r1, #10
 1654 01b4 F2E7     		b	.L156
 1655              	.L115:
 764:tmk_core/common/command.c ****             mk_interval          = MOUSEKEY_INTERVAL;
 1656              		.loc 1 764 0
 1657 01b6 144B     		ldr	r3, .L162+36
 770:tmk_core/common/command.c ****             break;
 1658              		.loc 1 770 0
 1659 01b8 2048     		ldr	r0, .L162+88
 1660              	.LVL217:
 764:tmk_core/common/command.c ****             mk_interval          = MOUSEKEY_INTERVAL;
 1661              		.loc 1 764 0
 1662 01ba 1E22     		movs	r2, #30
 1663 01bc 1A70     		strb	r2, [r3]
 765:tmk_core/common/command.c ****             mk_max_speed         = MOUSEKEY_MAX_SPEED;
 1664              		.loc 1 765 0
 1665 01be 164B     		ldr	r3, .L162+52
 1666 01c0 3222     		movs	r2, #50
 1667 01c2 1A70     		strb	r2, [r3]
 766:tmk_core/common/command.c ****             mk_time_to_max       = MOUSEKEY_TIME_TO_MAX;
 1668              		.loc 1 766 0
 1669 01c4 164B     		ldr	r3, .L162+60
 1670 01c6 0A22     		movs	r2, #10
 1671 01c8 1A70     		strb	r2, [r3]
 767:tmk_core/common/command.c ****             mk_wheel_max_speed   = MOUSEKEY_WHEEL_MAX_SPEED;
 1672              		.loc 1 767 0
 1673 01ca 174B     		ldr	r3, .L162+68
 1674 01cc 1422     		movs	r2, #20
 1675 01ce 1A70     		strb	r2, [r3]
 768:tmk_core/common/command.c ****             mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
 1676              		.loc 1 768 0
 1677 01d0 174B     		ldr	r3, .L162+76
 1678 01d2 0822     		movs	r2, #8
 1679 01d4 1A70     		strb	r2, [r3]
 769:tmk_core/common/command.c ****             print("set default\n");
 1680              		.loc 1 769 0
 1681 01d6 184B     		ldr	r3, .L162+84
 1682 01d8 2822     		movs	r2, #40
 1683 01da 1A70     		strb	r2, [r3]
 1684 01dc D5E7     		b	.L155
 1685              	.L125:
 779:tmk_core/common/command.c ****     }
 1686              		.loc 1 779 0
 1687 01de 1848     		ldr	r0, .L162+92
 1688 01e0 4DE7     		b	.L160
 1689              	.L163:
 1690 01e2 00BF     		.align	2
 1691              	.L162:
 1692 01e4 00000000 		.word	.LANCHOR0
 1693 01e8 31050000 		.word	.LC57
 1694 01ec F0020000 		.word	.LC32
 1695 01f0 17030000 		.word	.LC33
 1696 01f4 00000000 		.word	.LC58
 1697 01f8 00000000 		.word	.LANCHOR2
 1698 01fc 8F000000 		.word	.LC67
 1699 0200 04000000 		.word	.LC59
 1700 0204 12000000 		.word	.LC60
 1701 0208 00000000 		.word	mk_delay
 1702 020c 1B000000 		.word	.LC11
 1703 0210 1E000000 		.word	.LC12
 1704 0214 24000000 		.word	.LC61
 1705 0218 00000000 		.word	mk_interval
 1706 021c 36000000 		.word	.LC62
 1707 0220 00000000 		.word	mk_max_speed
 1708 0224 45000000 		.word	.LC63
 1709 0228 00000000 		.word	mk_time_to_max
 1710 022c 56000000 		.word	.LC64
 1711 0230 00000000 		.word	mk_wheel_max_speed
 1712 0234 6B000000 		.word	.LC65
 1713 0238 00000000 		.word	mk_wheel_time_to_max
 1714 023c 82000000 		.word	.LC66
 1715 0240 95000000 		.word	.LC68
 1716              	.LBE45:
 1717              	.LBE49:
 1718              		.cfi_endproc
 1719              	.LFE287:
 1721              		.global	command_state
 1722              		.section	.bss.command_state,"aw",%nobits
 1723              		.set	.LANCHOR0,. + 0
 1726              	command_state:
 1727 0000 00       		.space	1
 1728              		.section	.bss.mousekey_param,"aw",%nobits
 1729              		.set	.LANCHOR2,. + 0
 1732              	mousekey_param:
 1733 0000 00       		.space	1
 1734              		.section	.rodata.CSWTCH.70,"a",%progbits
 1735              		.set	.LANCHOR1,. + 0
 1738              	CSWTCH.70:
 1739 0000 01       		.byte	1
 1740 0001 02       		.byte	2
 1741 0002 03       		.byte	3
 1742 0003 04       		.byte	4
 1743 0004 05       		.byte	5
 1744 0005 06       		.byte	6
 1745 0006 07       		.byte	7
 1746 0007 08       		.byte	8
 1747 0008 09       		.byte	9
 1748 0009 00       		.byte	0
 1749              		.section	.rodata.command_common.str1.1,"aMS",%progbits,1
 1750              	.LC9:
 1751 0000 6565636F 		.ascii	"eeconfig:\012\000"
 1751      6E666967 
 1751      3A0A00
 1752              	.LC10:
 1753 000b 64656661 		.ascii	"default_layer: \000"
 1753      756C745F 
 1753      6C617965 
 1753      723A2000 
 1754              	.LC11:
 1755 001b 257500   		.ascii	"%u\000"
 1756              	.LC12:
 1757 001e 0A00     		.ascii	"\012\000"
 1758              	.LC13:
 1759 0020 64656275 		.ascii	"debug_config.raw: \000"
 1759      675F636F 
 1759      6E666967 
 1759      2E726177 
 1759      3A2000
 1760              	.LC14:
 1761 0033 25303258 		.ascii	"%02X\000"
 1761      00
 1762              	.LC15:
 1763 0038 2E656E61 		.ascii	".enable: \000"
 1763      626C653A 
 1763      2000
 1764              	.LC16:
 1765 0042 2E6D6174 		.ascii	".matrix: \000"
 1765      7269783A 
 1765      2000
 1766              	.LC17:
 1767 004c 2E6B6579 		.ascii	".keyboard: \000"
 1767      626F6172 
 1767      643A2000 
 1768              	.LC18:
 1769 0058 2E6D6F75 		.ascii	".mouse: \000"
 1769      73653A20 
 1769      00
 1770              	.LC19:
 1771 0061 6B65796D 		.ascii	"keymap_config.raw: \000"
 1771      61705F63 
 1771      6F6E6669 
 1771      672E7261 
 1771      773A2000 
 1772              	.LC20:
 1773 0075 2E737761 		.ascii	".swap_control_capslock: \000"
 1773      705F636F 
 1773      6E74726F 
 1773      6C5F6361 
 1773      70736C6F 
 1774              	.LC21:
 1775 008e 2E636170 		.ascii	".capslock_to_control: \000"
 1775      736C6F63 
 1775      6B5F746F 
 1775      5F636F6E 
 1775      74726F6C 
 1776              	.LC22:
 1777 00a5 2E737761 		.ascii	".swap_lctl_lgui: \000"
 1777      705F6C63 
 1777      746C5F6C 
 1777      6775693A 
 1777      2000
 1778              	.LC23:
 1779 00b7 2E737761 		.ascii	".swap_rctl_rgui: \000"
 1779      705F7263 
 1779      746C5F72 
 1779      6775693A 
 1779      2000
 1780              	.LC24:
 1781 00c9 2E737761 		.ascii	".swap_lalt_lgui: \000"
 1781      705F6C61 
 1781      6C745F6C 
 1781      6775693A 
 1781      2000
 1782              	.LC25:
 1783 00db 2E737761 		.ascii	".swap_ralt_rgui: \000"
 1783      705F7261 
 1783      6C745F72 
 1783      6775693A 
 1783      2000
 1784              	.LC26:
 1785 00ed 2E6E6F5F 		.ascii	".no_gui: \000"
 1785      6775693A 
 1785      2000
 1786              	.LC27:
 1787 00f7 2E737761 		.ascii	".swap_grave_esc: \000"
 1787      705F6772 
 1787      6176655F 
 1787      6573633A 
 1787      2000
 1788              	.LC28:
 1789 0109 2E737761 		.ascii	".swap_backslash_backspace: \000"
 1789      705F6261 
 1789      636B736C 
 1789      6173685F 
 1789      6261636B 
 1790              	.LC29:
 1791 0125 2E6E6B72 		.ascii	".nkro: \000"
 1791      6F3A2000 
 1792              	.LC30:
 1793 012d 436C6561 		.ascii	"Clearing EEPROM\012\000"
 1793      72696E67 
 1793      20454550 
 1793      524F4D0A 
 1793      00
 1794              	.LC31:
 1795 013e 0A092D20 		.ascii	"\012\011- Magic -\012D:\011Debug Message Toggle\012"
 1795      4D616769 
 1795      63202D0A 
 1795      443A0944 
 1795      65627567 
 1796 0162 583A094D 		.ascii	"X:\011Matrix Debug Mode Toggle - Show keypresses in"
 1796      61747269 
 1796      78204465 
 1796      62756720 
 1796      4D6F6465 
 1797 0192 206D6174 		.ascii	" matrix grid\012K:\011Keyboard Debug Toggle - Show "
 1797      72697820 
 1797      67726964 
 1797      0A4B3A09 
 1797      4B657962 
 1798 01bf 6B657970 		.ascii	"keypress report\012M:\011Debug Mouse Toggle\012V:\011"
 1798      72657373 
 1798      20726570 
 1798      6F72740A 
 1798      4D3A0944 
 1799 01e8 56657273 		.ascii	"Version\012S:\011Status\012C:\011Activate Console M"
 1799      696F6E0A 
 1799      533A0953 
 1799      74617475 
 1799      730A433A 
 1800 020f 6F64650A 		.ascii	"ode\012F1-F10:\011Switch to Layer 0-9 (F10 = L0)\012"
 1800      46312D46 
 1800      31303A09 
 1800      53776974 
 1800      63682074 
 1801 023a 302D393A 		.ascii	"0-9:\011Switch to Layer 0-9\012GRAVE:\011Switch to "
 1801      09537769 
 1801      74636820 
 1801      746F204C 
 1801      61796572 
 1802 0264 4C617965 		.ascii	"Layer 0 (alternate)\012B:\011Jump to Bootloader\012"
 1802      72203020 
 1802      28616C74 
 1802      65726E61 
 1802      7465290A 
 1803 028e 4553433A 		.ascii	"ESC:\011Jump to Bootloader (alternate)\012E:\011Pri"
 1803      094A756D 
 1803      7020746F 
 1803      20426F6F 
 1803      746C6F61 
 1804 02b8 6E742045 		.ascii	"nt EEPROM Settings\012BSPACE:\011Clear EEPROM\012N:"
 1804      4550524F 
 1804      4D205365 
 1804      7474696E 
 1804      67730A42 
 1805 02e2 094E4B52 		.ascii	"\011NKRO Toggle\012\000"
 1805      4F20546F 
 1805      67676C65 
 1805      0A00
 1806              	.LC32:
 1807 02f0 0A092D20 		.ascii	"\012\011- Console -\012ESC/q:\011quit\012m:\011mous"
 1807      436F6E73 
 1807      6F6C6520 
 1807      2D0A4553 
 1807      432F713A 
 1808 0311 656B6579 		.ascii	"ekey\012\000"
 1808      0A00
 1809              	.LC33:
 1810 0317 433E2000 		.ascii	"C> \000"
 1811              	.LC34:
 1812 031b 0A0A4A75 		.ascii	"\012\012Jumping to bootloader... \000"
 1812      6D70696E 
 1812      6720746F 
 1812      20626F6F 
 1812      746C6F61 
 1813              	.LC35:
 1814 0337 0A646562 		.ascii	"\012debug: on\012\000"
 1814      75673A20 
 1814      6F6E0A00 
 1815              	.LC36:
 1816 0343 0A646562 		.ascii	"\012debug: off\012\000"
 1816      75673A20 
 1816      6F66660A 
 1816      00
 1817              	.LC37:
 1818 0350 0A6D6174 		.ascii	"\012matrix: on\012\000"
 1818      7269783A 
 1818      206F6E0A 
 1818      00
 1819              	.LC38:
 1820 035d 0A6D6174 		.ascii	"\012matrix: off\012\000"
 1820      7269783A 
 1820      206F6666 
 1820      0A00
 1821              	.LC39:
 1822 036b 0A6B6579 		.ascii	"\012keyboard: on\012\000"
 1822      626F6172 
 1822      643A206F 
 1822      6E0A00
 1823              	.LC40:
 1824 037a 0A6B6579 		.ascii	"\012keyboard: off\012\000"
 1824      626F6172 
 1824      643A206F 
 1824      66660A00 
 1825              	.LC41:
 1826 038a 0A6D6F75 		.ascii	"\012mouse: on\012\000"
 1826      73653A20 
 1826      6F6E0A00 
 1827              	.LC42:
 1828 0396 0A6D6F75 		.ascii	"\012mouse: off\012\000"
 1828      73653A20 
 1828      6F66660A 
 1828      00
 1829              	.LC43:
 1830 03a3 0A092D20 		.ascii	"\012\011- Version -\012\000"
 1830      56657273 
 1830      696F6E20 
 1830      2D0A00
 1831              	.LC44:
 1832 03b2 44455343 		.ascii	"DESC: A compact ortholinear keyboard\012\000"
 1832      3A204120 
 1832      636F6D70 
 1832      61637420 
 1832      6F727468 
 1833              	.LC45:
 1834 03d8 5649443A 		.ascii	"VID: 0xFEED(OLKB) PID: 0x6061(Preonic) VER: 0x0003\012"
 1834      20307846 
 1834      45454428 
 1834      4F4C4B42 
 1834      29205049 
 1835 040b 00       		.ascii	"\000"
 1836              	.LC46:
 1837 040c 4255494C 		.ascii	"BUILD: \"0.7.26-1-ge41fed-dirty\" (14:28:09 Apr 11 "
 1837      443A2022 
 1837      302E372E 
 1837      32362D31 
 1837      2D676534 
 1838 043d 32303230 		.ascii	"2020)\012\000"
 1838      290A00
 1839              	.LC47:
 1840 0444 4F505449 		.ascii	"OPTIONS: BOOTMAGIC MOUSEKEY EXTRAKEY CONSOLE COMMAN"
 1840      4F4E533A 
 1840      20424F4F 
 1840      544D4147 
 1840      4943204D 
 1841 0477 44204E4B 		.ascii	"D NKRO BOOTLOADER_SIZE\012\000"
 1841      524F2042 
 1841      4F4F544C 
 1841      4F414445 
 1841      525F5349 
 1842              	.LC48:
 1843 048f 4743433A 		.ascii	"GCC: 7.3.1\012\000"
 1843      20372E33 
 1843      2E310A00 
 1844              	.LC49:
 1845 049b 0A092D20 		.ascii	"\012\011- Status -\012\000"
 1845      53746174 
 1845      7573202D 
 1845      0A00
 1846              	.LC50:
 1847 04a9 686F7374 		.ascii	"host_keyboard_leds(): %X\012\000"
 1847      5F6B6579 
 1847      626F6172 
 1847      645F6C65 
 1847      64732829 
 1848              	.LC51:
 1849 04c3 6B657962 		.ascii	"keyboard_protocol: %X\012\000"
 1849      6F617264 
 1849      5F70726F 
 1849      746F636F 
 1849      6C3A2025 
 1850              	.LC52:
 1851 04da 6B657962 		.ascii	"keyboard_idle: %X\012\000"
 1851      6F617264 
 1851      5F69646C 
 1851      653A2025 
 1851      580A00
 1852              	.LC53:
 1853 04ed 6B65796D 		.ascii	"keymap_config.nkro: %X\012\000"
 1853      61705F63 
 1853      6F6E6669 
 1853      672E6E6B 
 1853      726F3A20 
 1854              	.LC54:
 1855 0505 74696D65 		.ascii	"timer_read32(): %04lX\012\000"
 1855      725F7265 
 1855      61643332 
 1855      28293A20 
 1855      2530346C 
 1856              	.LC55:
 1857 051c 4E4B524F 		.ascii	"NKRO: on\012\000"
 1857      3A206F6E 
 1857      0A00
 1858              	.LC56:
 1859 0526 4E4B524F 		.ascii	"NKRO: off\012\000"
 1859      3A206F66 
 1859      660A00
 1860              	.LC57:
 1861 0531 3F00     		.ascii	"?\000"
 1862              		.section	.rodata.command_proc.str1.1,"aMS",%progbits,1
 1863              	.LC58:
 1864 0000 4D3E2000 		.ascii	"M> \000"
 1865              	.LC59:
 1866 0004 0A092D20 		.ascii	"\012\011- Values -\012\000"
 1866      56616C75 
 1866      6573202D 
 1866      0A00
 1867              	.LC60:
 1868 0012 313A2064 		.ascii	"1: delay(*10ms): \000"
 1868      656C6179 
 1868      282A3130 
 1868      6D73293A 
 1868      2000
 1869              	.LC61:
 1870 0024 323A2069 		.ascii	"2: interval(ms): \000"
 1870      6E746572 
 1870      76616C28 
 1870      6D73293A 
 1870      2000
 1871              	.LC62:
 1872 0036 333A206D 		.ascii	"3: max_speed: \000"
 1872      61785F73 
 1872      70656564 
 1872      3A2000
 1873              	.LC63:
 1874 0045 343A2074 		.ascii	"4: time_to_max: \000"
 1874      696D655F 
 1874      746F5F6D 
 1874      61783A20 
 1874      00
 1875              	.LC64:
 1876 0056 353A2077 		.ascii	"5: wheel_max_speed: \000"
 1876      6865656C 
 1876      5F6D6178 
 1876      5F737065 
 1876      65643A20 
 1877              	.LC65:
 1878 006b 363A2077 		.ascii	"6: wheel_time_to_max: \000"
 1878      6865656C 
 1878      5F74696D 
 1878      655F746F 
 1878      5F6D6178 
 1879              	.LC66:
 1880 0082 73657420 		.ascii	"set default\012\000"
 1880      64656661 
 1880      756C740A 
 1880      00
 1881              	.LC67:
 1882 008f 4D25643E 		.ascii	"M%d> \000"
 1882      2000
 1883              	.LC68:
 1884 0095 4D3E00   		.ascii	"M>\000"
 1885              		.section	.rodata.mousekey_console_help.str1.1,"aMS",%progbits,1
 1886              	.LC0:
 1887 0000 0A092D20 		.ascii	"\012\011- Mousekey -\012ESC/q:\011quit\0121:\011del"
 1887      4D6F7573 
 1887      656B6579 
 1887      202D0A45 
 1887      53432F71 
 1888 0021 6179282A 		.ascii	"ay(*10ms)\0122:\011interval(ms)\0123:\011max_speed\012"
 1888      31306D73 
 1888      290A323A 
 1888      09696E74 
 1888      65727661 
 1889 0048 343A0974 		.ascii	"4:\011time_to_max\0125:\011wheel_max_speed\0126:\011"
 1889      696D655F 
 1889      746F5F6D 
 1889      61780A35 
 1889      3A097768 
 1890 006d 77686565 		.ascii	"wheel_time_to_max\012\012p:\011print values\012d:\011"
 1890      6C5F7469 
 1890      6D655F74 
 1890      6F5F6D61 
 1890      780A0A70 
 1891 0093 73657420 		.ascii	"set defaults\012up:\011+1\012down:\011-1\012pgup:\011"
 1891      64656661 
 1891      756C7473 
 1891      0A75703A 
 1891      092B310A 
 1892 00b6 2B31300A 		.ascii	"+10\012pgdown:\011-10\012\012speed = delta * max_sp"
 1892      7067646F 
 1892      776E3A09 
 1892      2D31300A 
 1892      0A737065 
 1893 00dd 65656420 		.ascii	"eed * (repeat / time_to_max)\012\000"
 1893      2A202872 
 1893      65706561 
 1893      74202F20 
 1893      74696D65 
 1894              	.LC1:
 1895 00fb 77686572 		.ascii	"where delta: cursor=%d, wheel=%d\012See http://en.w"
 1895      65206465 
 1895      6C74613A 
 1895      20637572 
 1895      736F723D 
 1896 012b 696B6970 		.ascii	"ikipedia.org/wiki/Mouse_keys\012\000"
 1896      65646961 
 1896      2E6F7267 
 1896      2F77696B 
 1896      692F4D6F 
 1897              		.section	.rodata.mousekey_param_inc.str1.1,"aMS",%progbits,1
 1898              	.LC2:
 1899 0000 6D6B5F64 		.ascii	"mk_delay = %d\012\000"
 1899      656C6179 
 1899      203D2025 
 1899      640A00
 1900              	.LC3:
 1901 000f 6D6B5F69 		.ascii	"mk_interval = %d\012\000"
 1901      6E746572 
 1901      76616C20 
 1901      3D202564 
 1901      0A00
 1902              	.LC4:
 1903 0021 6D6B5F6D 		.ascii	"mk_max_speed = %d\012\000"
 1903      61785F73 
 1903      70656564 
 1903      203D2025 
 1903      640A00
 1904              	.LC5:
 1905 0034 6D6B5F74 		.ascii	"mk_time_to_max = %d\012\000"
 1905      696D655F 
 1905      746F5F6D 
 1905      6178203D 
 1905      2025640A 
 1906              	.LC6:
 1907 0049 6D6B5F77 		.ascii	"mk_wheel_max_speed = %d\012\000"
 1907      6865656C 
 1907      5F6D6178 
 1907      5F737065 
 1907      6564203D 
 1908              	.LC7:
 1909 0062 6D6B5F77 		.ascii	"mk_wheel_time_to_max = %d\012\000"
 1909      6865656C 
 1909      5F74696D 
 1909      655F746F 
 1909      5F6D6178 
 1910              		.section	.rodata.switch_default_layer.str1.1,"aMS",%progbits,1
 1911              	.LC8:
 1912 0000 4C25640A 		.ascii	"L%d\012\000"
 1912      00
 1913              		.text
 1914              	.Letext0:
 1915              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 1916              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 1917              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 1918              		.file 5 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 1919              		.file 6 "./lib/chibios/os/rt/include/chsystypes.h"
 1920              		.file 7 "./lib/chibios/os/rt/include/chschd.h"
 1921              		.file 8 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 1922              		.file 9 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 1923              		.file 10 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/stm32f303xc.h"
 1924              		.file 11 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 1925              		.file 12 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 1926              		.file 13 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 1927              		.file 14 "./lib/chibios/os/rt/include/chtm.h"
 1928              		.file 15 "./lib/chibios/os/rt/include/chsem.h"
 1929              		.file 16 "./lib/chibios/os/rt/include/chmtx.h"
 1930              		.file 17 "./lib/chibios/os/rt/include/chsys.h"
 1931              		.file 18 "./lib/chibios/os/rt/include/chregistry.h"
 1932              		.file 19 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 1933              		.file 20 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 1934              		.file 21 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 1935              		.file 22 "./lib/chibios/os/hal/include/hal_dac.h"
 1936              		.file 23 "./lib/chibios/os/hal/ports/STM32/LLD/DACv1/hal_dac_lld.h"
 1937              		.file 24 "./lib/chibios/os/hal/include/hal_gpt.h"
 1938              		.file 25 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_gpt_lld.h"
 1939              		.file 26 "./lib/chibios/os/hal/include/hal_i2c.h"
 1940              		.file 27 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 1941              		.file 28 "./lib/chibios/os/hal/include/hal_pwm.h"
 1942              		.file 29 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 1943              		.file 30 "./lib/chibios/os/hal/include/hal_usb.h"
 1944              		.file 31 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 1945              		.file 32 "tmk_core/common/report.h"
 1946              		.file 33 "tmk_core/common/host.h"
 1947              		.file 34 "tmk_core/common/action.h"
 1948              		.file 35 "tmk_core/common/debug.h"
 1949              		.file 36 "quantum/keycode_config.h"
 1950              		.file 37 "quantum/keymap.h"
 1951              		.file 38 "tmk_core/common/timer.h"
 1952              		.file 39 "tmk_core/common/action_layer.h"
 1953              		.file 40 "tmk_core/common/action_util.h"
 1954              		.file 41 "tmk_core/common/command.h"
 1955              		.file 42 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 1956              		.file 43 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 1957              		.file 44 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 1958              		.file 45 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 1959              		.file 46 "quantum/audio/luts.h"
 1960              		.file 47 "tmk_core/common/keycode.h"
 1961              		.file 48 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/math.h"
 1962              		.file 49 "quantum/process_keycode/process_music.h"
 1963              		.file 50 "quantum/quantum.h"
 1964              		.file 51 "tmk_core/common/mousekey.h"
 1965              		.file 52 "tmk_core/common/chibios/printf.h"
 1966              		.file 53 "tmk_core/common/eeconfig.h"
 1967              		.file 54 "quantum/audio/audio.h"
 1968              		.file 55 "tmk_core/common/bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 command.c
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:16     .text.mousekey_console_help:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:22     .text.mousekey_console_help:0000000000000000 mousekey_console_help
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:52     .text.mousekey_console_help:0000000000000018 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:58     .text.mousekey_param_inc:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:64     .text.mousekey_param_inc:0000000000000000 mousekey_param_inc
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:79     .text.mousekey_param_inc:000000000000000a $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:85     .text.mousekey_param_inc:0000000000000010 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:220    .text.mousekey_param_inc:0000000000000098 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:236    .text.mousekey_param_dec:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:242    .text.mousekey_param_dec:0000000000000000 mousekey_param_dec
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:257    .text.mousekey_param_dec:000000000000000a $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:263    .text.mousekey_param_dec:0000000000000010 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:404    .text.mousekey_param_dec:0000000000000098 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:420    .text.switch_default_layer:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:426    .text.switch_default_layer:0000000000000000 switch_default_layer
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:462    .text.switch_default_layer:000000000000001c $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:467    .text.command_common:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:473    .text.command_common:0000000000000000 command_common
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:492    .text.command_common:000000000000000e $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:555    .text.command_common:000000000000008c $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1098   .text.command_common:0000000000000384 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1154   .text.command_common:0000000000000458 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1178   .text.command_common:000000000000046c $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1183   .text.command_extra:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1190   .text.command_extra:0000000000000000 command_extra
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1206   .text.command_console_extra:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1213   .text.command_console_extra:0000000000000000 command_console_extra
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1225   .text.numkey2num:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1232   .text.numkey2num:0000000000000000 numkey2num
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1254   .text.numkey2num:0000000000000010 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1259   .text.command_proc:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1266   .text.command_proc:0000000000000000 command_proc
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1692   .text.command_proc:00000000000001e4 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1726   .bss.command_state:0000000000000000 command_state
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1727   .bss.command_state:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1732   .bss.mousekey_param:0000000000000000 mousekey_param
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1733   .bss.mousekey_param:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc9jD51J.s:1738   .rodata.CSWTCH.70:0000000000000000 CSWTCH.70

UNDEFINED SYMBOLS
tfp_printf
mk_delay
mk_interval
mk_max_speed
mk_time_to_max
mk_wheel_max_speed
mk_wheel_time_to_max
default_layer_set
clear_keyboard
eeconfig_read_default_layer
eeconfig_read_debug
eeconfig_read_keymap
eeconfig_init
stop_all_notes
shutdown_user
bootloader_jump
host_keyboard_leds
timer_read32
debug_config
keyboard_protocol
keyboard_idle
keymap_config
get_mods
