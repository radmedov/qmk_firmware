   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"util.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.bitpop,"ax",%progbits
  16              		.align	1
  17              		.global	bitpop
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	bitpop:
  24              	.LFB0:
  25              		.file 1 "tmk_core/common/util.c"
   1:tmk_core/common/util.c **** /*
   2:tmk_core/common/util.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/util.c **** 
   4:tmk_core/common/util.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/util.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/util.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/util.c **** (at your option) any later version.
   8:tmk_core/common/util.c **** 
   9:tmk_core/common/util.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/util.c **** GNU General Public License for more details.
  13:tmk_core/common/util.c **** 
  14:tmk_core/common/util.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/util.c **** */
  17:tmk_core/common/util.c **** 
  18:tmk_core/common/util.c **** #include "util.h"
  19:tmk_core/common/util.c **** 
  20:tmk_core/common/util.c **** // bit population - return number of on-bit
  21:tmk_core/common/util.c **** uint8_t bitpop(uint8_t bits) {
  26              		.loc 1 21 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32              		.loc 1 21 0
  33 0000 0346     		mov	r3, r0
  22:tmk_core/common/util.c ****     uint8_t c;
  23:tmk_core/common/util.c ****     for (c = 0; bits; c++) bits &= bits - 1;
  34              		.loc 1 23 0
  35 0002 0022     		movs	r2, #0
  36              	.LVL1:
  37              	.L2:
  38 0004 D0B2     		uxtb	r0, r2
  39              	.LVL2:
  40 0006 0132     		adds	r2, r2, #1
  41              		.loc 1 23 0 is_stmt 0 discriminator 1
  42 0008 03B9     		cbnz	r3, .L3
  24:tmk_core/common/util.c ****     return c;
  25:tmk_core/common/util.c ****     /*
  26:tmk_core/common/util.c ****         const uint8_t bit_count[] = { 0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4 };
  27:tmk_core/common/util.c ****         return bit_count[bits>>4] + bit_count[bits&0x0F]
  28:tmk_core/common/util.c ****     */
  29:tmk_core/common/util.c **** }
  43              		.loc 1 29 0 is_stmt 1
  44 000a 7047     		bx	lr
  45              	.L3:
  23:tmk_core/common/util.c ****     return c;
  46              		.loc 1 23 0 discriminator 3
  47 000c 591E     		subs	r1, r3, #1
  48 000e 0B40     		ands	r3, r3, r1
  49              	.LVL3:
  50 0010 F8E7     		b	.L2
  51              		.cfi_endproc
  52              	.LFE0:
  54              		.section	.text.bitpop16,"ax",%progbits
  55              		.align	1
  56              		.global	bitpop16
  57              		.syntax unified
  58              		.thumb
  59              		.thumb_func
  60              		.fpu softvfp
  62              	bitpop16:
  63              	.LFB1:
  30:tmk_core/common/util.c **** 
  31:tmk_core/common/util.c **** uint8_t bitpop16(uint16_t bits) {
  64              		.loc 1 31 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              		@ link register save eliminated.
  69              	.LVL4:
  70              		.loc 1 31 0
  71 0000 0346     		mov	r3, r0
  32:tmk_core/common/util.c ****     uint8_t c;
  33:tmk_core/common/util.c ****     for (c = 0; bits; c++) bits &= bits - 1;
  72              		.loc 1 33 0
  73 0002 0022     		movs	r2, #0
  74              	.LVL5:
  75              	.L5:
  76 0004 D0B2     		uxtb	r0, r2
  77              	.LVL6:
  78 0006 0132     		adds	r2, r2, #1
  79              		.loc 1 33 0 is_stmt 0 discriminator 1
  80 0008 03B9     		cbnz	r3, .L6
  34:tmk_core/common/util.c ****     return c;
  35:tmk_core/common/util.c **** }
  81              		.loc 1 35 0 is_stmt 1
  82 000a 7047     		bx	lr
  83              	.L6:
  33:tmk_core/common/util.c ****     return c;
  84              		.loc 1 33 0 discriminator 3
  85 000c 591E     		subs	r1, r3, #1
  86 000e 0B40     		ands	r3, r3, r1
  87              	.LVL7:
  88 0010 F8E7     		b	.L5
  89              		.cfi_endproc
  90              	.LFE1:
  92              		.section	.text.bitpop32,"ax",%progbits
  93              		.align	1
  94              		.global	bitpop32
  95              		.syntax unified
  96              		.thumb
  97              		.thumb_func
  98              		.fpu softvfp
 100              	bitpop32:
 101              	.LFB2:
  36:tmk_core/common/util.c **** 
  37:tmk_core/common/util.c **** uint8_t bitpop32(uint32_t bits) {
 102              		.loc 1 37 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106              		@ link register save eliminated.
 107              	.LVL8:
 108              		.loc 1 37 0
 109 0000 0346     		mov	r3, r0
  38:tmk_core/common/util.c ****     uint8_t c;
  39:tmk_core/common/util.c ****     for (c = 0; bits; c++) bits &= bits - 1;
 110              		.loc 1 39 0
 111 0002 0022     		movs	r2, #0
 112              	.LVL9:
 113              	.L8:
 114 0004 D0B2     		uxtb	r0, r2
 115              	.LVL10:
 116 0006 0132     		adds	r2, r2, #1
 117              		.loc 1 39 0 is_stmt 0 discriminator 1
 118 0008 03B9     		cbnz	r3, .L9
  40:tmk_core/common/util.c ****     return c;
  41:tmk_core/common/util.c **** }
 119              		.loc 1 41 0 is_stmt 1
 120 000a 7047     		bx	lr
 121              	.L9:
  39:tmk_core/common/util.c ****     return c;
 122              		.loc 1 39 0 discriminator 3
 123 000c 591E     		subs	r1, r3, #1
 124 000e 0B40     		ands	r3, r3, r1
 125              	.LVL11:
 126 0010 F8E7     		b	.L8
 127              		.cfi_endproc
 128              	.LFE2:
 130              		.section	.text.biton,"ax",%progbits
 131              		.align	1
 132              		.global	biton
 133              		.syntax unified
 134              		.thumb
 135              		.thumb_func
 136              		.fpu softvfp
 138              	biton:
 139              	.LFB3:
  42:tmk_core/common/util.c **** 
  43:tmk_core/common/util.c **** // most significant on-bit - return highest location of on-bit
  44:tmk_core/common/util.c **** // NOTE: return 0 when bit0 is on or all bits are off
  45:tmk_core/common/util.c **** uint8_t biton(uint8_t bits) {
 140              		.loc 1 45 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              		@ link register save eliminated.
 145              	.LVL12:
  46:tmk_core/common/util.c ****     uint8_t n = 0;
  47:tmk_core/common/util.c ****     if (bits >> 4) {
 146              		.loc 1 47 0
 147 0000 0209     		lsrs	r2, r0, #4
 148 0002 002A     		cmp	r2, #0
  45:tmk_core/common/util.c ****     uint8_t n = 0;
 149              		.loc 1 45 0
 150 0004 0346     		mov	r3, r0
 151              		.loc 1 47 0
 152 0006 0BBF     		itete	eq
 153 0008 0346     		moveq	r3, r0
 154 000a 1346     		movne	r3, r2
 155 000c 0020     		moveq	r0, #0
 156              	.LVL13:
 157 000e 0420     		movne	r0, #4
 158              	.LVL14:
  48:tmk_core/common/util.c ****         bits >>= 4;
  49:tmk_core/common/util.c ****         n += 4;
  50:tmk_core/common/util.c ****     }
  51:tmk_core/common/util.c ****     if (bits >> 2) {
 159              		.loc 1 51 0
 160 0010 9A08     		lsrs	r2, r3, #2
 161              	.LVL15:
  52:tmk_core/common/util.c ****         bits >>= 2;
  53:tmk_core/common/util.c ****         n += 2;
 162              		.loc 1 53 0
 163 0012 18BF     		it	ne
 164 0014 1346     		movne	r3, r2
  54:tmk_core/common/util.c ****     }
  55:tmk_core/common/util.c ****     if (bits >> 1) {
 165              		.loc 1 55 0
 166 0016 C3F34703 		ubfx	r3, r3, #1, #8
  53:tmk_core/common/util.c ****     }
 167              		.loc 1 53 0
 168 001a 18BF     		it	ne
 169 001c 0230     		addne	r0, r0, #2
 170              	.LVL16:
 171              		.loc 1 55 0
 172 001e 0BB1     		cbz	r3, .L13
 173              	.LVL17:
  56:tmk_core/common/util.c ****         bits >>= 1;
  57:tmk_core/common/util.c ****         n += 1;
 174              		.loc 1 57 0
 175 0020 0130     		adds	r0, r0, #1
 176              	.LVL18:
 177 0022 C0B2     		uxtb	r0, r0
 178              	.LVL19:
 179              	.L13:
  58:tmk_core/common/util.c ****     }
  59:tmk_core/common/util.c ****     return n;
  60:tmk_core/common/util.c **** }
 180              		.loc 1 60 0
 181 0024 7047     		bx	lr
 182              		.cfi_endproc
 183              	.LFE3:
 185              		.section	.text.biton16,"ax",%progbits
 186              		.align	1
 187              		.global	biton16
 188              		.syntax unified
 189              		.thumb
 190              		.thumb_func
 191              		.fpu softvfp
 193              	biton16:
 194              	.LFB4:
  61:tmk_core/common/util.c **** 
  62:tmk_core/common/util.c **** uint8_t biton16(uint16_t bits) {
 195              		.loc 1 62 0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199              		@ link register save eliminated.
 200              	.LVL20:
  63:tmk_core/common/util.c ****     uint8_t n = 0;
  64:tmk_core/common/util.c ****     if (bits >> 8) {
 201              		.loc 1 64 0
 202 0000 030A     		lsrs	r3, r0, #8
 203 0002 002B     		cmp	r3, #0
 204 0004 16BF     		itet	ne
 205 0006 1846     		movne	r0, r3
 206              	.LVL21:
 207 0008 0023     		moveq	r3, #0
 208 000a 0823     		movne	r3, #8
 209              	.LVL22:
  65:tmk_core/common/util.c ****         bits >>= 8;
  66:tmk_core/common/util.c ****         n += 8;
  67:tmk_core/common/util.c ****     }
  68:tmk_core/common/util.c ****     if (bits >> 4) {
 210              		.loc 1 68 0
 211 000c 0209     		lsrs	r2, r0, #4
 212              	.LVL23:
  69:tmk_core/common/util.c ****         bits >>= 4;
  70:tmk_core/common/util.c ****         n += 4;
 213              		.loc 1 70 0
 214 000e 18BF     		it	ne
 215 0010 1046     		movne	r0, r2
  71:tmk_core/common/util.c ****     }
  72:tmk_core/common/util.c ****     if (bits >> 2) {
 216              		.loc 1 72 0
 217 0012 C0F38F02 		ubfx	r2, r0, #2, #16
 218              	.LVL24:
  70:tmk_core/common/util.c ****     }
 219              		.loc 1 70 0
 220 0016 18BF     		it	ne
 221 0018 0433     		addne	r3, r3, #4
 222              	.LVL25:
 223              		.loc 1 72 0
 224 001a 12B1     		cbz	r2, .L24
 225              	.LVL26:
  73:tmk_core/common/util.c ****         bits >>= 2;
  74:tmk_core/common/util.c ****         n += 2;
 226              		.loc 1 74 0
 227 001c 0233     		adds	r3, r3, #2
 228              	.LVL27:
 229 001e DBB2     		uxtb	r3, r3
 230              	.LVL28:
 231 0020 1046     		mov	r0, r2
 232              	.LVL29:
 233              	.L24:
  75:tmk_core/common/util.c ****     }
  76:tmk_core/common/util.c ****     if (bits >> 1) {
 234              		.loc 1 76 0
 235 0022 C0F34F00 		ubfx	r0, r0, #1, #16
 236              	.LVL30:
 237 0026 08B1     		cbz	r0, .L25
 238              	.LVL31:
  77:tmk_core/common/util.c ****         bits >>= 1;
  78:tmk_core/common/util.c ****         n += 1;
 239              		.loc 1 78 0
 240 0028 0133     		adds	r3, r3, #1
 241              	.LVL32:
 242 002a DBB2     		uxtb	r3, r3
 243              	.LVL33:
 244              	.L25:
  79:tmk_core/common/util.c ****     }
  80:tmk_core/common/util.c ****     return n;
  81:tmk_core/common/util.c **** }
 245              		.loc 1 81 0
 246 002c 1846     		mov	r0, r3
 247 002e 7047     		bx	lr
 248              		.cfi_endproc
 249              	.LFE4:
 251              		.section	.text.biton32,"ax",%progbits
 252              		.align	1
 253              		.global	biton32
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu softvfp
 259              	biton32:
 260              	.LFB5:
  82:tmk_core/common/util.c **** 
  83:tmk_core/common/util.c **** uint8_t biton32(uint32_t bits) {
 261              		.loc 1 83 0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265              		@ link register save eliminated.
 266              	.LVL34:
  84:tmk_core/common/util.c ****     uint8_t n = 0;
  85:tmk_core/common/util.c ****     if (bits >> 16) {
 267              		.loc 1 85 0
 268 0000 030C     		lsrs	r3, r0, #16
 269 0002 002B     		cmp	r3, #0
 270 0004 16BF     		itet	ne
 271 0006 1846     		movne	r0, r3
 272              	.LVL35:
 273 0008 0023     		moveq	r3, #0
 274 000a 1023     		movne	r3, #16
 275              	.LVL36:
  86:tmk_core/common/util.c ****         bits >>= 16;
  87:tmk_core/common/util.c ****         n += 16;
  88:tmk_core/common/util.c ****     }
  89:tmk_core/common/util.c ****     if (bits >> 8) {
 276              		.loc 1 89 0
 277 000c 020A     		lsrs	r2, r0, #8
 278              	.LVL37:
  90:tmk_core/common/util.c ****         bits >>= 8;
  91:tmk_core/common/util.c ****         n += 8;
 279              		.loc 1 91 0
 280 000e 1CBF     		itt	ne
 281 0010 1046     		movne	r0, r2
 282 0012 0833     		addne	r3, r3, #8
 283              	.LVL38:
  92:tmk_core/common/util.c ****     }
  93:tmk_core/common/util.c ****     if (bits >> 4) {
 284              		.loc 1 93 0
 285 0014 0209     		lsrs	r2, r0, #4
 286              	.LVL39:
  94:tmk_core/common/util.c ****         bits >>= 4;
  95:tmk_core/common/util.c ****         n += 4;
 287              		.loc 1 95 0
 288 0016 1EBF     		ittt	ne
 289 0018 0433     		addne	r3, r3, #4
 290              	.LVL40:
 291 001a 1046     		movne	r0, r2
 292 001c DBB2     		uxtbne	r3, r3
 293              	.LVL41:
  96:tmk_core/common/util.c ****     }
  97:tmk_core/common/util.c ****     if (bits >> 2) {
 294              		.loc 1 97 0
 295 001e 8208     		lsrs	r2, r0, #2
 296              	.LVL42:
  98:tmk_core/common/util.c ****         bits >>= 2;
  99:tmk_core/common/util.c ****         n += 2;
 297              		.loc 1 99 0
 298 0020 1EBF     		ittt	ne
 299 0022 0233     		addne	r3, r3, #2
 300              	.LVL43:
 301 0024 1046     		movne	r0, r2
 302 0026 DBB2     		uxtbne	r3, r3
 303              	.LVL44:
 100:tmk_core/common/util.c ****     }
 101:tmk_core/common/util.c ****     if (bits >> 1) {
 304              		.loc 1 101 0
 305 0028 4208     		lsrs	r2, r0, #1
 306              	.LVL45:
 102:tmk_core/common/util.c ****         bits >>= 1;
 103:tmk_core/common/util.c ****         n += 1;
 307              		.loc 1 103 0
 308 002a 1CBF     		itt	ne
 309 002c 0133     		addne	r3, r3, #1
 310              	.LVL46:
 311 002e DBB2     		uxtbne	r3, r3
 312              	.LVL47:
 104:tmk_core/common/util.c ****     }
 105:tmk_core/common/util.c ****     return n;
 106:tmk_core/common/util.c **** }
 313              		.loc 1 106 0
 314 0030 1846     		mov	r0, r3
 315 0032 7047     		bx	lr
 316              		.cfi_endproc
 317              	.LFE5:
 319              		.section	.text.bitrev,"ax",%progbits
 320              		.align	1
 321              		.global	bitrev
 322              		.syntax unified
 323              		.thumb
 324              		.thumb_func
 325              		.fpu softvfp
 327              	bitrev:
 328              	.LFB6:
 107:tmk_core/common/util.c **** 
 108:tmk_core/common/util.c **** uint8_t bitrev(uint8_t bits) {
 329              		.loc 1 108 0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 0
 332              		@ frame_needed = 0, uses_anonymous_args = 0
 333              		@ link register save eliminated.
 334              	.LVL48:
 109:tmk_core/common/util.c ****     bits = (bits & 0x0f) << 4 | (bits & 0xf0) >> 4;
 335              		.loc 1 109 0
 336 0000 0309     		lsrs	r3, r0, #4
 337 0002 43EA0010 		orr	r0, r3, r0, lsl #4
 338              	.LVL49:
 110:tmk_core/common/util.c ****     bits = (bits & 0b00110011) << 2 | (bits & 0b11001100) >> 2;
 339              		.loc 1 110 0
 340 0006 C0B2     		uxtb	r0, r0
 341              	.LVL50:
 342 0008 8300     		lsls	r3, r0, #2
 343 000a 8010     		asrs	r0, r0, #2
 344              	.LVL51:
 345 000c 00F03300 		and	r0, r0, #51
 346 0010 03F0CC03 		and	r3, r3, #204
 111:tmk_core/common/util.c ****     bits = (bits & 0b01010101) << 1 | (bits & 0b10101010) >> 1;
 347              		.loc 1 111 0
 348 0014 0343     		orrs	r3, r3, r0
 349              	.LVL52:
 350 0016 5800     		lsls	r0, r3, #1
 351 0018 5B10     		asrs	r3, r3, #1
 352              	.LVL53:
 353 001a 03F05503 		and	r3, r3, #85
 354 001e 00F0AA00 		and	r0, r0, #170
 112:tmk_core/common/util.c ****     return bits;
 113:tmk_core/common/util.c **** }
 355              		.loc 1 113 0
 356 0022 1843     		orrs	r0, r0, r3
 357 0024 7047     		bx	lr
 358              		.cfi_endproc
 359              	.LFE6:
 361              		.section	.text.bitrev16,"ax",%progbits
 362              		.align	1
 363              		.global	bitrev16
 364              		.syntax unified
 365              		.thumb
 366              		.thumb_func
 367              		.fpu softvfp
 369              	bitrev16:
 370              	.LFB7:
 114:tmk_core/common/util.c **** 
 115:tmk_core/common/util.c **** uint16_t bitrev16(uint16_t bits) {
 371              		.loc 1 115 0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375              	.LVL54:
 376 0000 0146     		mov	r1, r0
 377 0002 08B5     		push	{r3, lr}
 378              		.cfi_def_cfa_offset 8
 379              		.cfi_offset 3, -8
 380              		.cfi_offset 14, -4
 116:tmk_core/common/util.c ****     bits = bitrev(bits & 0x00ff) << 8 | bitrev((bits & 0xff00) >> 8);
 381              		.loc 1 116 0
 382 0004 C0B2     		uxtb	r0, r0
 383              	.LVL55:
 384 0006 FFF7FEFF 		bl	bitrev
 385              	.LVL56:
 386 000a 0246     		mov	r2, r0
 387 000c 080A     		lsrs	r0, r1, #8
 388 000e FFF7FEFF 		bl	bitrev
 389              	.LVL57:
 390 0012 40EA0220 		orr	r0, r0, r2, lsl #8
 391              	.LVL58:
 117:tmk_core/common/util.c ****     return bits;
 118:tmk_core/common/util.c **** }
 392              		.loc 1 118 0
 393 0016 80B2     		uxth	r0, r0
 394 0018 08BD     		pop	{r3, pc}
 395              		.cfi_endproc
 396              	.LFE7:
 398              		.section	.text.bitrev32,"ax",%progbits
 399              		.align	1
 400              		.global	bitrev32
 401              		.syntax unified
 402              		.thumb
 403              		.thumb_func
 404              		.fpu softvfp
 406              	bitrev32:
 407              	.LFB8:
 119:tmk_core/common/util.c **** 
 120:tmk_core/common/util.c **** uint32_t bitrev32(uint32_t bits) {
 408              		.loc 1 120 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412              	.LVL59:
 413 0000 38B5     		push	{r3, r4, r5, lr}
 414              		.cfi_def_cfa_offset 16
 415              		.cfi_offset 3, -16
 416              		.cfi_offset 4, -12
 417              		.cfi_offset 5, -8
 418              		.cfi_offset 14, -4
 419              		.loc 1 120 0
 420 0002 0446     		mov	r4, r0
 121:tmk_core/common/util.c ****     bits = (uint32_t)bitrev16(bits & 0x0000ffff) << 16 | bitrev16((bits & 0xffff0000) >> 16);
 421              		.loc 1 121 0
 422 0004 80B2     		uxth	r0, r0
 423              	.LVL60:
 424 0006 FFF7FEFF 		bl	bitrev16
 425              	.LVL61:
 426 000a 0546     		mov	r5, r0
 427 000c 200C     		lsrs	r0, r4, #16
 428 000e FFF7FEFF 		bl	bitrev16
 429              	.LVL62:
 122:tmk_core/common/util.c ****     return bits;
 123:tmk_core/common/util.c **** }
 430              		.loc 1 123 0
 431 0012 40EA0540 		orr	r0, r0, r5, lsl #16
 432              	.LVL63:
 433 0016 38BD     		pop	{r3, r4, r5, pc}
 434              		.cfi_endproc
 435              	.LFE8:
 437              		.text
 438              	.Letext0:
 439              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 440              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 util.c
/var/tmp//cc4Aum6E.s:16     .text.bitpop:0000000000000000 $t
/var/tmp//cc4Aum6E.s:23     .text.bitpop:0000000000000000 bitpop
/var/tmp//cc4Aum6E.s:55     .text.bitpop16:0000000000000000 $t
/var/tmp//cc4Aum6E.s:62     .text.bitpop16:0000000000000000 bitpop16
/var/tmp//cc4Aum6E.s:93     .text.bitpop32:0000000000000000 $t
/var/tmp//cc4Aum6E.s:100    .text.bitpop32:0000000000000000 bitpop32
/var/tmp//cc4Aum6E.s:131    .text.biton:0000000000000000 $t
/var/tmp//cc4Aum6E.s:138    .text.biton:0000000000000000 biton
/var/tmp//cc4Aum6E.s:186    .text.biton16:0000000000000000 $t
/var/tmp//cc4Aum6E.s:193    .text.biton16:0000000000000000 biton16
/var/tmp//cc4Aum6E.s:252    .text.biton32:0000000000000000 $t
/var/tmp//cc4Aum6E.s:259    .text.biton32:0000000000000000 biton32
/var/tmp//cc4Aum6E.s:320    .text.bitrev:0000000000000000 $t
/var/tmp//cc4Aum6E.s:327    .text.bitrev:0000000000000000 bitrev
/var/tmp//cc4Aum6E.s:362    .text.bitrev16:0000000000000000 $t
/var/tmp//cc4Aum6E.s:369    .text.bitrev16:0000000000000000 bitrev16
/var/tmp//cc4Aum6E.s:399    .text.bitrev32:0000000000000000 $t
/var/tmp//cc4Aum6E.s:406    .text.bitrev32:0000000000000000 bitrev32

NO UNDEFINED SYMBOLS
