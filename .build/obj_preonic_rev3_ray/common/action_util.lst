   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"action_util.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.add_key,"ax",%progbits
  16              		.align	1
  17              		.global	add_key
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	add_key:
  24              	.LFB279:
  25              		.file 1 "tmk_core/common/action_util.h"
   1:tmk_core/common/action_util.h **** /*
   2:tmk_core/common/action_util.h **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action_util.h **** 
   4:tmk_core/common/action_util.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action_util.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action_util.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action_util.h **** (at your option) any later version.
   8:tmk_core/common/action_util.h **** 
   9:tmk_core/common/action_util.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action_util.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action_util.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action_util.h **** GNU General Public License for more details.
  13:tmk_core/common/action_util.h **** 
  14:tmk_core/common/action_util.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action_util.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action_util.h **** */
  17:tmk_core/common/action_util.h **** #ifndef ACTION_UTIL_H
  18:tmk_core/common/action_util.h **** #define ACTION_UTIL_H
  19:tmk_core/common/action_util.h **** 
  20:tmk_core/common/action_util.h **** #include <stdint.h>
  21:tmk_core/common/action_util.h **** #include "report.h"
  22:tmk_core/common/action_util.h **** 
  23:tmk_core/common/action_util.h **** #ifdef __cplusplus
  24:tmk_core/common/action_util.h **** extern "C" {
  25:tmk_core/common/action_util.h **** #endif
  26:tmk_core/common/action_util.h **** 
  27:tmk_core/common/action_util.h **** extern report_keyboard_t *keyboard_report;
  28:tmk_core/common/action_util.h **** 
  29:tmk_core/common/action_util.h **** void send_keyboard_report(void);
  30:tmk_core/common/action_util.h **** 
  31:tmk_core/common/action_util.h **** /* key */
  32:tmk_core/common/action_util.h **** inline void add_key(uint8_t key) { add_key_to_report(keyboard_report, key); }
  26              		.loc 1 32 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32              		.loc 1 32 0
  33 0000 024B     		ldr	r3, .L2
  34 0002 0146     		mov	r1, r0
  35 0004 1868     		ldr	r0, [r3]
  36              	.LVL1:
  37 0006 FFF7FEBF 		b	add_key_to_report
  38              	.LVL2:
  39              	.L3:
  40 000a 00BF     		.align	2
  41              	.L2:
  42 000c 00000000 		.word	.LANCHOR0
  43              		.cfi_endproc
  44              	.LFE279:
  46              		.section	.text.del_key,"ax",%progbits
  47              		.align	1
  48              		.global	del_key
  49              		.syntax unified
  50              		.thumb
  51              		.thumb_func
  52              		.fpu softvfp
  54              	del_key:
  55              	.LFB280:
  33:tmk_core/common/action_util.h **** 
  34:tmk_core/common/action_util.h **** inline void del_key(uint8_t key) { del_key_from_report(keyboard_report, key); }
  56              		.loc 1 34 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60              		@ link register save eliminated.
  61              	.LVL3:
  62              		.loc 1 34 0
  63 0000 024B     		ldr	r3, .L5
  64 0002 0146     		mov	r1, r0
  65 0004 1868     		ldr	r0, [r3]
  66              	.LVL4:
  67 0006 FFF7FEBF 		b	del_key_from_report
  68              	.LVL5:
  69              	.L6:
  70 000a 00BF     		.align	2
  71              	.L5:
  72 000c 00000000 		.word	.LANCHOR0
  73              		.cfi_endproc
  74              	.LFE280:
  76              		.section	.text.clear_keys,"ax",%progbits
  77              		.align	1
  78              		.global	clear_keys
  79              		.syntax unified
  80              		.thumb
  81              		.thumb_func
  82              		.fpu softvfp
  84              	clear_keys:
  85              	.LFB281:
  35:tmk_core/common/action_util.h **** 
  36:tmk_core/common/action_util.h **** inline void clear_keys(void) { clear_keys_from_report(keyboard_report); }
  86              		.loc 1 36 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91              		.loc 1 36 0
  92 0000 014B     		ldr	r3, .L8
  93 0002 1868     		ldr	r0, [r3]
  94 0004 FFF7FEBF 		b	clear_keys_from_report
  95              	.LVL6:
  96              	.L9:
  97              		.align	2
  98              	.L8:
  99 0008 00000000 		.word	.LANCHOR0
 100              		.cfi_endproc
 101              	.LFE281:
 103              		.section	.text.get_oneshot_locked_mods,"ax",%progbits
 104              		.align	1
 105              		.global	get_oneshot_locked_mods
 106              		.syntax unified
 107              		.thumb
 108              		.thumb_func
 109              		.fpu softvfp
 111              	get_oneshot_locked_mods:
 112              	.LFB287:
 113              		.file 2 "tmk_core/common/action_util.c"
   1:tmk_core/common/action_util.c **** /*
   2:tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action_util.c **** 
   4:tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action_util.c **** (at your option) any later version.
   8:tmk_core/common/action_util.c **** 
   9:tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:tmk_core/common/action_util.c **** 
  14:tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action_util.c **** */
  17:tmk_core/common/action_util.c **** #include "host.h"
  18:tmk_core/common/action_util.c **** #include "report.h"
  19:tmk_core/common/action_util.c **** #include "debug.h"
  20:tmk_core/common/action_util.c **** #include "action_util.h"
  21:tmk_core/common/action_util.c **** #include "action_layer.h"
  22:tmk_core/common/action_util.c **** #include "timer.h"
  23:tmk_core/common/action_util.c **** #include "keycode_config.h"
  24:tmk_core/common/action_util.c **** 
  25:tmk_core/common/action_util.c **** extern keymap_config_t keymap_config;
  26:tmk_core/common/action_util.c **** 
  27:tmk_core/common/action_util.c **** static uint8_t real_mods  = 0;
  28:tmk_core/common/action_util.c **** static uint8_t weak_mods  = 0;
  29:tmk_core/common/action_util.c **** static uint8_t macro_mods = 0;
  30:tmk_core/common/action_util.c **** 
  31:tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  32:tmk_core/common/action_util.c **** #    define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  33:tmk_core/common/action_util.c **** #    define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  34:tmk_core/common/action_util.c **** #    define RO_INC(a) RO_ADD(a, 1)
  35:tmk_core/common/action_util.c **** #    define RO_DEC(a) RO_SUB(a, 1)
  36:tmk_core/common/action_util.c **** static int8_t cb_head  = 0;
  37:tmk_core/common/action_util.c **** static int8_t cb_tail  = 0;
  38:tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  39:tmk_core/common/action_util.c **** #endif
  40:tmk_core/common/action_util.c **** 
  41:tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  42:tmk_core/common/action_util.c **** // report_keyboard_t keyboard_report = {};
  43:tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  44:tmk_core/common/action_util.c **** 
  45:tmk_core/common/action_util.c **** extern inline void add_key(uint8_t key);
  46:tmk_core/common/action_util.c **** extern inline void del_key(uint8_t key);
  47:tmk_core/common/action_util.c **** extern inline void clear_keys(void);
  48:tmk_core/common/action_util.c **** 
  49:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  50:tmk_core/common/action_util.c **** static uint8_t oneshot_mods        = 0;
  51:tmk_core/common/action_util.c **** static uint8_t oneshot_locked_mods = 0;
  52:tmk_core/common/action_util.c **** uint8_t        get_oneshot_locked_mods(void) { return oneshot_locked_mods; }
 114              		.loc 2 52 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118              		@ link register save eliminated.
 119              		.loc 2 52 0
 120 0000 014B     		ldr	r3, .L11
 121 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 122 0004 7047     		bx	lr
 123              	.L12:
 124 0006 00BF     		.align	2
 125              	.L11:
 126 0008 00000000 		.word	.LANCHOR1
 127              		.cfi_endproc
 128              	.LFE287:
 130              		.section	.text.has_oneshot_mods_timed_out,"ax",%progbits
 131              		.align	1
 132              		.global	has_oneshot_mods_timed_out
 133              		.syntax unified
 134              		.thumb
 135              		.thumb_func
 136              		.fpu softvfp
 138              	has_oneshot_mods_timed_out:
 139              	.LFB290:
  53:tmk_core/common/action_util.c **** void           set_oneshot_locked_mods(uint8_t mods) {
  54:tmk_core/common/action_util.c ****     if (mods != oneshot_locked_mods) {
  55:tmk_core/common/action_util.c ****         oneshot_locked_mods = mods;
  56:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
  57:tmk_core/common/action_util.c ****     }
  58:tmk_core/common/action_util.c **** }
  59:tmk_core/common/action_util.c **** void clear_oneshot_locked_mods(void) {
  60:tmk_core/common/action_util.c ****     if (oneshot_locked_mods) {
  61:tmk_core/common/action_util.c ****         oneshot_locked_mods = 0;
  62:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
  63:tmk_core/common/action_util.c ****     }
  64:tmk_core/common/action_util.c **** }
  65:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  66:tmk_core/common/action_util.c **** static uint16_t oneshot_time = 0;
  67:tmk_core/common/action_util.c **** bool            has_oneshot_mods_timed_out(void) { return TIMER_DIFF_16(timer_read(), oneshot_time)
  68:tmk_core/common/action_util.c **** #    else
  69:tmk_core/common/action_util.c **** bool has_oneshot_mods_timed_out(void) { return false; }
 140              		.loc 2 69 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              		@ link register save eliminated.
 145              		.loc 2 69 0
 146 0000 0020     		movs	r0, #0
 147 0002 7047     		bx	lr
 148              		.cfi_endproc
 149              	.LFE290:
 151              		.section	.text.get_oneshot_layer,"ax",%progbits
 152              		.align	1
 153              		.global	get_oneshot_layer
 154              		.syntax unified
 155              		.thumb
 156              		.thumb_func
 157              		.fpu softvfp
 159              	get_oneshot_layer:
 160              	.LFB291:
  70:tmk_core/common/action_util.c **** #    endif
  71:tmk_core/common/action_util.c **** #endif
  72:tmk_core/common/action_util.c **** 
  73:tmk_core/common/action_util.c **** /* oneshot layer */
  74:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  75:tmk_core/common/action_util.c **** /** \brief oneshot_layer_data bits
  76:tmk_core/common/action_util.c ****  * LLLL LSSS
  77:tmk_core/common/action_util.c ****  * where:
  78:tmk_core/common/action_util.c ****  *   L => are layer bits
  79:tmk_core/common/action_util.c ****  *   S => oneshot state bits
  80:tmk_core/common/action_util.c ****  */
  81:tmk_core/common/action_util.c **** static int8_t oneshot_layer_data = 0;
  82:tmk_core/common/action_util.c **** 
  83:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
 161              		.loc 2 83 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165              		@ link register save eliminated.
 166              		.loc 2 83 0
 167 0000 024B     		ldr	r3, .L15
 168 0002 93F90000 		ldrsb	r0, [r3]
 169 0006 C0F3C700 		ubfx	r0, r0, #3, #8
 170 000a 7047     		bx	lr
 171              	.L16:
 172              		.align	2
 173              	.L15:
 174 000c 00000000 		.word	.LANCHOR2
 175              		.cfi_endproc
 176              	.LFE291:
 178              		.section	.text.get_oneshot_layer_state,"ax",%progbits
 179              		.align	1
 180              		.global	get_oneshot_layer_state
 181              		.syntax unified
 182              		.thumb
 183              		.thumb_func
 184              		.fpu softvfp
 186              	get_oneshot_layer_state:
 187              	.LFB292:
  84:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 188              		.loc 2 84 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 193              		.loc 2 84 0
 194 0000 024B     		ldr	r3, .L18
 195 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 196 0004 00F00700 		and	r0, r0, #7
 197 0008 7047     		bx	lr
 198              	.L19:
 199 000a 00BF     		.align	2
 200              	.L18:
 201 000c 00000000 		.word	.LANCHOR2
 202              		.cfi_endproc
 203              	.LFE292:
 205              		.section	.text.is_oneshot_layer_active,"ax",%progbits
 206              		.align	1
 207              		.global	is_oneshot_layer_active
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 211              		.fpu softvfp
 213              	is_oneshot_layer_active:
 214              	.LFB296:
  85:tmk_core/common/action_util.c **** 
  86:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  87:tmk_core/common/action_util.c **** static uint16_t oneshot_layer_time = 0;
  88:tmk_core/common/action_util.c **** inline bool     has_oneshot_layer_timed_out() { return TIMER_DIFF_16(timer_read(), oneshot_layer_ti
  89:tmk_core/common/action_util.c **** #    endif
  90:tmk_core/common/action_util.c **** 
  91:tmk_core/common/action_util.c **** /** \brief Set oneshot layer
  92:tmk_core/common/action_util.c ****  *
  93:tmk_core/common/action_util.c ****  * FIXME: needs doc
  94:tmk_core/common/action_util.c ****  */
  95:tmk_core/common/action_util.c **** void set_oneshot_layer(uint8_t layer, uint8_t state) {
  96:tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
  97:tmk_core/common/action_util.c ****     layer_on(layer);
  98:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  99:tmk_core/common/action_util.c ****     oneshot_layer_time = timer_read();
 100:tmk_core/common/action_util.c **** #    endif
 101:tmk_core/common/action_util.c ****     oneshot_layer_changed_kb(get_oneshot_layer());
 102:tmk_core/common/action_util.c **** }
 103:tmk_core/common/action_util.c **** /** \brief Reset oneshot layer
 104:tmk_core/common/action_util.c ****  *
 105:tmk_core/common/action_util.c ****  * FIXME: needs doc
 106:tmk_core/common/action_util.c ****  */
 107:tmk_core/common/action_util.c **** void reset_oneshot_layer(void) {
 108:tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 109:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 110:tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 111:tmk_core/common/action_util.c **** #    endif
 112:tmk_core/common/action_util.c ****     oneshot_layer_changed_kb(get_oneshot_layer());
 113:tmk_core/common/action_util.c **** }
 114:tmk_core/common/action_util.c **** /** \brief Clear oneshot layer
 115:tmk_core/common/action_util.c ****  *
 116:tmk_core/common/action_util.c ****  * FIXME: needs doc
 117:tmk_core/common/action_util.c ****  */
 118:tmk_core/common/action_util.c **** void clear_oneshot_layer_state(oneshot_fullfillment_t state) {
 119:tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 120:tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 121:tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 122:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 123:tmk_core/common/action_util.c ****         reset_oneshot_layer();
 124:tmk_core/common/action_util.c ****     }
 125:tmk_core/common/action_util.c **** }
 126:tmk_core/common/action_util.c **** /** \brief Is oneshot layer active
 127:tmk_core/common/action_util.c ****  *
 128:tmk_core/common/action_util.c ****  * FIXME: needs doc
 129:tmk_core/common/action_util.c ****  */
 130:tmk_core/common/action_util.c **** bool is_oneshot_layer_active(void) { return get_oneshot_layer_state(); }
 215              		.loc 2 130 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              		@ link register save eliminated.
 220              	.LBB12:
 221              	.LBB13:
  84:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 222              		.loc 2 84 0
 223 0000 034B     		ldr	r3, .L21
 224 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 225              	.LBE13:
 226              	.LBE12:
 227              		.loc 2 130 0
 228 0004 10F00700 		ands	r0, r0, #7
 229 0008 18BF     		it	ne
 230 000a 0120     		movne	r0, #1
 231 000c 7047     		bx	lr
 232              	.L22:
 233 000e 00BF     		.align	2
 234              	.L21:
 235 0010 00000000 		.word	.LANCHOR2
 236              		.cfi_endproc
 237              	.LFE296:
 239              		.section	.text.get_mods,"ax",%progbits
 240              		.align	1
 241              		.global	get_mods
 242              		.syntax unified
 243              		.thumb
 244              		.thumb_func
 245              		.fpu softvfp
 247              	get_mods:
 248              	.LFB298:
 131:tmk_core/common/action_util.c **** #endif
 132:tmk_core/common/action_util.c **** 
 133:tmk_core/common/action_util.c **** /** \brief Send keyboard report
 134:tmk_core/common/action_util.c ****  *
 135:tmk_core/common/action_util.c ****  * FIXME: needs doc
 136:tmk_core/common/action_util.c ****  */
 137:tmk_core/common/action_util.c **** void send_keyboard_report(void) {
 138:tmk_core/common/action_util.c ****     keyboard_report->mods = real_mods;
 139:tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 140:tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 141:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 142:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 143:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 144:tmk_core/common/action_util.c ****         if (has_oneshot_mods_timed_out()) {
 145:tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 146:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 147:tmk_core/common/action_util.c ****         }
 148:tmk_core/common/action_util.c **** #    endif
 149:tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
 150:tmk_core/common/action_util.c ****         if (has_anykey(keyboard_report)) {
 151:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 152:tmk_core/common/action_util.c ****         }
 153:tmk_core/common/action_util.c ****     }
 154:tmk_core/common/action_util.c **** 
 155:tmk_core/common/action_util.c **** #endif
 156:tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
 157:tmk_core/common/action_util.c **** }
 158:tmk_core/common/action_util.c **** 
 159:tmk_core/common/action_util.c **** /** \brief Get mods
 160:tmk_core/common/action_util.c ****  *
 161:tmk_core/common/action_util.c ****  * FIXME: needs doc
 162:tmk_core/common/action_util.c ****  */
 163:tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 249              		.loc 2 163 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              		@ link register save eliminated.
 254              		.loc 2 163 0
 255 0000 014B     		ldr	r3, .L24
 256 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 257 0004 7047     		bx	lr
 258              	.L25:
 259 0006 00BF     		.align	2
 260              	.L24:
 261 0008 00000000 		.word	.LANCHOR3
 262              		.cfi_endproc
 263              	.LFE298:
 265              		.section	.text.add_mods,"ax",%progbits
 266              		.align	1
 267              		.global	add_mods
 268              		.syntax unified
 269              		.thumb
 270              		.thumb_func
 271              		.fpu softvfp
 273              	add_mods:
 274              	.LFB299:
 164:tmk_core/common/action_util.c **** /** \brief add mods
 165:tmk_core/common/action_util.c ****  *
 166:tmk_core/common/action_util.c ****  * FIXME: needs doc
 167:tmk_core/common/action_util.c ****  */
 168:tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 275              		.loc 2 168 0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              		@ link register save eliminated.
 280              	.LVL7:
 281              		.loc 2 168 0
 282 0000 024A     		ldr	r2, .L27
 283 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 284 0004 1843     		orrs	r0, r0, r3
 285              	.LVL8:
 286 0006 1070     		strb	r0, [r2]
 287 0008 7047     		bx	lr
 288              	.L28:
 289 000a 00BF     		.align	2
 290              	.L27:
 291 000c 00000000 		.word	.LANCHOR3
 292              		.cfi_endproc
 293              	.LFE299:
 295              		.section	.text.del_mods,"ax",%progbits
 296              		.align	1
 297              		.global	del_mods
 298              		.syntax unified
 299              		.thumb
 300              		.thumb_func
 301              		.fpu softvfp
 303              	del_mods:
 304              	.LFB300:
 169:tmk_core/common/action_util.c **** /** \brief del mods
 170:tmk_core/common/action_util.c ****  *
 171:tmk_core/common/action_util.c ****  * FIXME: needs doc
 172:tmk_core/common/action_util.c ****  */
 173:tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 305              		.loc 2 173 0
 306              		.cfi_startproc
 307              		@ args = 0, pretend = 0, frame = 0
 308              		@ frame_needed = 0, uses_anonymous_args = 0
 309              		@ link register save eliminated.
 310              	.LVL9:
 311              		.loc 2 173 0
 312 0000 024A     		ldr	r2, .L30
 313 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 314 0004 23EA0000 		bic	r0, r3, r0
 315              	.LVL10:
 316 0008 1070     		strb	r0, [r2]
 317 000a 7047     		bx	lr
 318              	.L31:
 319              		.align	2
 320              	.L30:
 321 000c 00000000 		.word	.LANCHOR3
 322              		.cfi_endproc
 323              	.LFE300:
 325              		.section	.text.set_mods,"ax",%progbits
 326              		.align	1
 327              		.global	set_mods
 328              		.syntax unified
 329              		.thumb
 330              		.thumb_func
 331              		.fpu softvfp
 333              	set_mods:
 334              	.LFB301:
 174:tmk_core/common/action_util.c **** /** \brief set mods
 175:tmk_core/common/action_util.c ****  *
 176:tmk_core/common/action_util.c ****  * FIXME: needs doc
 177:tmk_core/common/action_util.c ****  */
 178:tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 335              		.loc 2 178 0
 336              		.cfi_startproc
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              		@ link register save eliminated.
 340              	.LVL11:
 341              		.loc 2 178 0
 342 0000 014B     		ldr	r3, .L33
 343 0002 1870     		strb	r0, [r3]
 344 0004 7047     		bx	lr
 345              	.L34:
 346 0006 00BF     		.align	2
 347              	.L33:
 348 0008 00000000 		.word	.LANCHOR3
 349              		.cfi_endproc
 350              	.LFE301:
 352              		.section	.text.clear_mods,"ax",%progbits
 353              		.align	1
 354              		.global	clear_mods
 355              		.syntax unified
 356              		.thumb
 357              		.thumb_func
 358              		.fpu softvfp
 360              	clear_mods:
 361              	.LFB302:
 179:tmk_core/common/action_util.c **** /** \brief clear mods
 180:tmk_core/common/action_util.c ****  *
 181:tmk_core/common/action_util.c ****  * FIXME: needs doc
 182:tmk_core/common/action_util.c ****  */
 183:tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 362              		.loc 2 183 0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 366              		@ link register save eliminated.
 367              		.loc 2 183 0
 368 0000 014B     		ldr	r3, .L36
 369 0002 0022     		movs	r2, #0
 370 0004 1A70     		strb	r2, [r3]
 371 0006 7047     		bx	lr
 372              	.L37:
 373              		.align	2
 374              	.L36:
 375 0008 00000000 		.word	.LANCHOR3
 376              		.cfi_endproc
 377              	.LFE302:
 379              		.section	.text.get_weak_mods,"ax",%progbits
 380              		.align	1
 381              		.global	get_weak_mods
 382              		.syntax unified
 383              		.thumb
 384              		.thumb_func
 385              		.fpu softvfp
 387              	get_weak_mods:
 388              	.LFB303:
 184:tmk_core/common/action_util.c **** 
 185:tmk_core/common/action_util.c **** /** \brief get weak mods
 186:tmk_core/common/action_util.c ****  *
 187:tmk_core/common/action_util.c ****  * FIXME: needs doc
 188:tmk_core/common/action_util.c ****  */
 189:tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 389              		.loc 2 189 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 0
 392              		@ frame_needed = 0, uses_anonymous_args = 0
 393              		@ link register save eliminated.
 394              		.loc 2 189 0
 395 0000 014B     		ldr	r3, .L39
 396 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 397 0004 7047     		bx	lr
 398              	.L40:
 399 0006 00BF     		.align	2
 400              	.L39:
 401 0008 00000000 		.word	.LANCHOR4
 402              		.cfi_endproc
 403              	.LFE303:
 405              		.section	.text.add_weak_mods,"ax",%progbits
 406              		.align	1
 407              		.global	add_weak_mods
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 411              		.fpu softvfp
 413              	add_weak_mods:
 414              	.LFB304:
 190:tmk_core/common/action_util.c **** /** \brief add weak mods
 191:tmk_core/common/action_util.c ****  *
 192:tmk_core/common/action_util.c ****  * FIXME: needs doc
 193:tmk_core/common/action_util.c ****  */
 194:tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 415              		.loc 2 194 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 0, uses_anonymous_args = 0
 419              		@ link register save eliminated.
 420              	.LVL12:
 421              		.loc 2 194 0
 422 0000 024A     		ldr	r2, .L42
 423 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 424 0004 1843     		orrs	r0, r0, r3
 425              	.LVL13:
 426 0006 1070     		strb	r0, [r2]
 427 0008 7047     		bx	lr
 428              	.L43:
 429 000a 00BF     		.align	2
 430              	.L42:
 431 000c 00000000 		.word	.LANCHOR4
 432              		.cfi_endproc
 433              	.LFE304:
 435              		.section	.text.del_weak_mods,"ax",%progbits
 436              		.align	1
 437              		.global	del_weak_mods
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 441              		.fpu softvfp
 443              	del_weak_mods:
 444              	.LFB305:
 195:tmk_core/common/action_util.c **** /** \brief del weak mods
 196:tmk_core/common/action_util.c ****  *
 197:tmk_core/common/action_util.c ****  * FIXME: needs doc
 198:tmk_core/common/action_util.c ****  */
 199:tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 445              		.loc 2 199 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449              		@ link register save eliminated.
 450              	.LVL14:
 451              		.loc 2 199 0
 452 0000 024A     		ldr	r2, .L45
 453 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 454 0004 23EA0000 		bic	r0, r3, r0
 455              	.LVL15:
 456 0008 1070     		strb	r0, [r2]
 457 000a 7047     		bx	lr
 458              	.L46:
 459              		.align	2
 460              	.L45:
 461 000c 00000000 		.word	.LANCHOR4
 462              		.cfi_endproc
 463              	.LFE305:
 465              		.section	.text.set_weak_mods,"ax",%progbits
 466              		.align	1
 467              		.global	set_weak_mods
 468              		.syntax unified
 469              		.thumb
 470              		.thumb_func
 471              		.fpu softvfp
 473              	set_weak_mods:
 474              	.LFB306:
 200:tmk_core/common/action_util.c **** /** \brief set weak mods
 201:tmk_core/common/action_util.c ****  *
 202:tmk_core/common/action_util.c ****  * FIXME: needs doc
 203:tmk_core/common/action_util.c ****  */
 204:tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 475              		.loc 2 204 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              		@ link register save eliminated.
 480              	.LVL16:
 481              		.loc 2 204 0
 482 0000 014B     		ldr	r3, .L48
 483 0002 1870     		strb	r0, [r3]
 484 0004 7047     		bx	lr
 485              	.L49:
 486 0006 00BF     		.align	2
 487              	.L48:
 488 0008 00000000 		.word	.LANCHOR4
 489              		.cfi_endproc
 490              	.LFE306:
 492              		.section	.text.clear_weak_mods,"ax",%progbits
 493              		.align	1
 494              		.global	clear_weak_mods
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
 498              		.fpu softvfp
 500              	clear_weak_mods:
 501              	.LFB307:
 205:tmk_core/common/action_util.c **** /** \brief clear weak mods
 206:tmk_core/common/action_util.c ****  *
 207:tmk_core/common/action_util.c ****  * FIXME: needs doc
 208:tmk_core/common/action_util.c ****  */
 209:tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 502              		.loc 2 209 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 0
 505              		@ frame_needed = 0, uses_anonymous_args = 0
 506              		@ link register save eliminated.
 507              		.loc 2 209 0
 508 0000 014B     		ldr	r3, .L51
 509 0002 0022     		movs	r2, #0
 510 0004 1A70     		strb	r2, [r3]
 511 0006 7047     		bx	lr
 512              	.L52:
 513              		.align	2
 514              	.L51:
 515 0008 00000000 		.word	.LANCHOR4
 516              		.cfi_endproc
 517              	.LFE307:
 519              		.section	.text.get_macro_mods,"ax",%progbits
 520              		.align	1
 521              		.global	get_macro_mods
 522              		.syntax unified
 523              		.thumb
 524              		.thumb_func
 525              		.fpu softvfp
 527              	get_macro_mods:
 528              	.LFB308:
 210:tmk_core/common/action_util.c **** 
 211:tmk_core/common/action_util.c **** /* macro modifier */
 212:tmk_core/common/action_util.c **** /** \brief get macro mods
 213:tmk_core/common/action_util.c ****  *
 214:tmk_core/common/action_util.c ****  * FIXME: needs doc
 215:tmk_core/common/action_util.c ****  */
 216:tmk_core/common/action_util.c **** uint8_t get_macro_mods(void) { return macro_mods; }
 529              		.loc 2 216 0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 0
 532              		@ frame_needed = 0, uses_anonymous_args = 0
 533              		@ link register save eliminated.
 534              		.loc 2 216 0
 535 0000 014B     		ldr	r3, .L54
 536 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 537 0004 7047     		bx	lr
 538              	.L55:
 539 0006 00BF     		.align	2
 540              	.L54:
 541 0008 00000000 		.word	.LANCHOR5
 542              		.cfi_endproc
 543              	.LFE308:
 545              		.section	.text.add_macro_mods,"ax",%progbits
 546              		.align	1
 547              		.global	add_macro_mods
 548              		.syntax unified
 549              		.thumb
 550              		.thumb_func
 551              		.fpu softvfp
 553              	add_macro_mods:
 554              	.LFB309:
 217:tmk_core/common/action_util.c **** /** \brief add macro mods
 218:tmk_core/common/action_util.c ****  *
 219:tmk_core/common/action_util.c ****  * FIXME: needs doc
 220:tmk_core/common/action_util.c ****  */
 221:tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 555              		.loc 2 221 0
 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 0
 558              		@ frame_needed = 0, uses_anonymous_args = 0
 559              		@ link register save eliminated.
 560              	.LVL17:
 561              		.loc 2 221 0
 562 0000 024A     		ldr	r2, .L57
 563 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 564 0004 1843     		orrs	r0, r0, r3
 565              	.LVL18:
 566 0006 1070     		strb	r0, [r2]
 567 0008 7047     		bx	lr
 568              	.L58:
 569 000a 00BF     		.align	2
 570              	.L57:
 571 000c 00000000 		.word	.LANCHOR5
 572              		.cfi_endproc
 573              	.LFE309:
 575              		.section	.text.del_macro_mods,"ax",%progbits
 576              		.align	1
 577              		.global	del_macro_mods
 578              		.syntax unified
 579              		.thumb
 580              		.thumb_func
 581              		.fpu softvfp
 583              	del_macro_mods:
 584              	.LFB310:
 222:tmk_core/common/action_util.c **** /** \brief del macro mods
 223:tmk_core/common/action_util.c ****  *
 224:tmk_core/common/action_util.c ****  * FIXME: needs doc
 225:tmk_core/common/action_util.c ****  */
 226:tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 585              		.loc 2 226 0
 586              		.cfi_startproc
 587              		@ args = 0, pretend = 0, frame = 0
 588              		@ frame_needed = 0, uses_anonymous_args = 0
 589              		@ link register save eliminated.
 590              	.LVL19:
 591              		.loc 2 226 0
 592 0000 024A     		ldr	r2, .L60
 593 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 594 0004 23EA0000 		bic	r0, r3, r0
 595              	.LVL20:
 596 0008 1070     		strb	r0, [r2]
 597 000a 7047     		bx	lr
 598              	.L61:
 599              		.align	2
 600              	.L60:
 601 000c 00000000 		.word	.LANCHOR5
 602              		.cfi_endproc
 603              	.LFE310:
 605              		.section	.text.set_macro_mods,"ax",%progbits
 606              		.align	1
 607              		.global	set_macro_mods
 608              		.syntax unified
 609              		.thumb
 610              		.thumb_func
 611              		.fpu softvfp
 613              	set_macro_mods:
 614              	.LFB311:
 227:tmk_core/common/action_util.c **** /** \brief set macro mods
 228:tmk_core/common/action_util.c ****  *
 229:tmk_core/common/action_util.c ****  * FIXME: needs doc
 230:tmk_core/common/action_util.c ****  */
 231:tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 615              		.loc 2 231 0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 0
 618              		@ frame_needed = 0, uses_anonymous_args = 0
 619              		@ link register save eliminated.
 620              	.LVL21:
 621              		.loc 2 231 0
 622 0000 014B     		ldr	r3, .L63
 623 0002 1870     		strb	r0, [r3]
 624 0004 7047     		bx	lr
 625              	.L64:
 626 0006 00BF     		.align	2
 627              	.L63:
 628 0008 00000000 		.word	.LANCHOR5
 629              		.cfi_endproc
 630              	.LFE311:
 632              		.section	.text.clear_macro_mods,"ax",%progbits
 633              		.align	1
 634              		.global	clear_macro_mods
 635              		.syntax unified
 636              		.thumb
 637              		.thumb_func
 638              		.fpu softvfp
 640              	clear_macro_mods:
 641              	.LFB312:
 232:tmk_core/common/action_util.c **** /** \brief clear macro mods
 233:tmk_core/common/action_util.c ****  *
 234:tmk_core/common/action_util.c ****  * FIXME: needs doc
 235:tmk_core/common/action_util.c ****  */
 236:tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 642              		.loc 2 236 0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 0
 645              		@ frame_needed = 0, uses_anonymous_args = 0
 646              		@ link register save eliminated.
 647              		.loc 2 236 0
 648 0000 014B     		ldr	r3, .L66
 649 0002 0022     		movs	r2, #0
 650 0004 1A70     		strb	r2, [r3]
 651 0006 7047     		bx	lr
 652              	.L67:
 653              		.align	2
 654              	.L66:
 655 0008 00000000 		.word	.LANCHOR5
 656              		.cfi_endproc
 657              	.LFE312:
 659              		.section	.text.get_oneshot_mods,"ax",%progbits
 660              		.align	1
 661              		.global	get_oneshot_mods
 662              		.syntax unified
 663              		.thumb
 664              		.thumb_func
 665              		.fpu softvfp
 667              	get_oneshot_mods:
 668              	.LFB315:
 237:tmk_core/common/action_util.c **** 
 238:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 239:tmk_core/common/action_util.c **** /** \brief set oneshot mods
 240:tmk_core/common/action_util.c ****  *
 241:tmk_core/common/action_util.c ****  * FIXME: needs doc
 242:tmk_core/common/action_util.c ****  */
 243:tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods) {
 244:tmk_core/common/action_util.c ****     if (oneshot_mods != mods) {
 245:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 246:tmk_core/common/action_util.c ****         oneshot_time = timer_read();
 247:tmk_core/common/action_util.c **** #    endif
 248:tmk_core/common/action_util.c ****         oneshot_mods = mods;
 249:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(mods);
 250:tmk_core/common/action_util.c ****     }
 251:tmk_core/common/action_util.c **** }
 252:tmk_core/common/action_util.c **** /** \brief clear oneshot mods
 253:tmk_core/common/action_util.c ****  *
 254:tmk_core/common/action_util.c ****  * FIXME: needs doc
 255:tmk_core/common/action_util.c ****  */
 256:tmk_core/common/action_util.c **** void clear_oneshot_mods(void) {
 257:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 258:tmk_core/common/action_util.c ****         oneshot_mods = 0;
 259:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 260:tmk_core/common/action_util.c ****         oneshot_time = 0;
 261:tmk_core/common/action_util.c **** #    endif
 262:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(oneshot_mods);
 263:tmk_core/common/action_util.c ****     }
 264:tmk_core/common/action_util.c **** }
 265:tmk_core/common/action_util.c **** /** \brief get oneshot mods
 266:tmk_core/common/action_util.c ****  *
 267:tmk_core/common/action_util.c ****  * FIXME: needs doc
 268:tmk_core/common/action_util.c ****  */
 269:tmk_core/common/action_util.c **** uint8_t get_oneshot_mods(void) { return oneshot_mods; }
 669              		.loc 2 269 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 0
 672              		@ frame_needed = 0, uses_anonymous_args = 0
 673              		@ link register save eliminated.
 674              		.loc 2 269 0
 675 0000 014B     		ldr	r3, .L69
 676 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 677 0004 7047     		bx	lr
 678              	.L70:
 679 0006 00BF     		.align	2
 680              	.L69:
 681 0008 00000000 		.word	.LANCHOR6
 682              		.cfi_endproc
 683              	.LFE315:
 685              		.section	.text.oneshot_locked_mods_changed_user,"ax",%progbits
 686              		.align	1
 687              		.weak	oneshot_locked_mods_changed_user
 688              		.syntax unified
 689              		.thumb
 690              		.thumb_func
 691              		.fpu softvfp
 693              	oneshot_locked_mods_changed_user:
 694              	.LFB316:
 270:tmk_core/common/action_util.c **** #endif
 271:tmk_core/common/action_util.c **** 
 272:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 273:tmk_core/common/action_util.c ****  *
 274:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 275:tmk_core/common/action_util.c ****  */
 276:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_locked_mods_changed_user(uint8_t mods) {}
 695              		.loc 2 276 0
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 0
 698              		@ frame_needed = 0, uses_anonymous_args = 0
 699              		@ link register save eliminated.
 700              	.LVL22:
 701              		.loc 2 276 0
 702 0000 7047     		bx	lr
 703              		.cfi_endproc
 704              	.LFE316:
 706              		.section	.text.oneshot_locked_mods_changed_kb,"ax",%progbits
 707              		.align	1
 708              		.weak	oneshot_locked_mods_changed_kb
 709              		.syntax unified
 710              		.thumb
 711              		.thumb_func
 712              		.fpu softvfp
 714              	oneshot_locked_mods_changed_kb:
 715              	.LFB317:
 277:tmk_core/common/action_util.c **** 
 278:tmk_core/common/action_util.c **** /** \brief Called when the locked one shot modifiers have been changed.
 279:tmk_core/common/action_util.c ****  *
 280:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 281:tmk_core/common/action_util.c ****  */
 282:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_locked_mods_changed_kb(uint8_t mods) { oneshot_locked_mods_chang
 716              		.loc 2 282 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 0, uses_anonymous_args = 0
 720              	.LVL23:
 721 0000 08B5     		push	{r3, lr}
 722              		.cfi_def_cfa_offset 8
 723              		.cfi_offset 3, -8
 724              		.cfi_offset 14, -4
 725              		.loc 2 282 0
 726 0002 FFF7FEFF 		bl	oneshot_locked_mods_changed_user
 727              	.LVL24:
 728 0006 08BD     		pop	{r3, pc}
 729              		.cfi_endproc
 730              	.LFE317:
 732              		.section	.text.set_oneshot_locked_mods,"ax",%progbits
 733              		.align	1
 734              		.global	set_oneshot_locked_mods
 735              		.syntax unified
 736              		.thumb
 737              		.thumb_func
 738              		.fpu softvfp
 740              	set_oneshot_locked_mods:
 741              	.LFB288:
  53:tmk_core/common/action_util.c ****     if (mods != oneshot_locked_mods) {
 742              		.loc 2 53 0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 0
 745              		@ frame_needed = 0, uses_anonymous_args = 0
 746              	.LVL25:
 747 0000 08B5     		push	{r3, lr}
 748              		.cfi_def_cfa_offset 8
 749              		.cfi_offset 3, -8
 750              		.cfi_offset 14, -4
  54:tmk_core/common/action_util.c ****         oneshot_locked_mods = mods;
 751              		.loc 2 54 0
 752 0002 044B     		ldr	r3, .L75
 753 0004 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 754 0006 8142     		cmp	r1, r0
 755 0008 02D0     		beq	.L73
  55:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
 756              		.loc 2 55 0
 757 000a 1870     		strb	r0, [r3]
  56:tmk_core/common/action_util.c ****     }
 758              		.loc 2 56 0
 759 000c FFF7FEFF 		bl	oneshot_locked_mods_changed_kb
 760              	.LVL26:
 761              	.L73:
  58:tmk_core/common/action_util.c **** void clear_oneshot_locked_mods(void) {
 762              		.loc 2 58 0
 763 0010 08BD     		pop	{r3, pc}
 764              	.L76:
 765 0012 00BF     		.align	2
 766              	.L75:
 767 0014 00000000 		.word	.LANCHOR1
 768              		.cfi_endproc
 769              	.LFE288:
 771              		.section	.text.clear_oneshot_locked_mods,"ax",%progbits
 772              		.align	1
 773              		.global	clear_oneshot_locked_mods
 774              		.syntax unified
 775              		.thumb
 776              		.thumb_func
 777              		.fpu softvfp
 779              	clear_oneshot_locked_mods:
 780              	.LFB289:
  59:tmk_core/common/action_util.c ****     if (oneshot_locked_mods) {
 781              		.loc 2 59 0
 782              		.cfi_startproc
 783              		@ args = 0, pretend = 0, frame = 0
 784              		@ frame_needed = 0, uses_anonymous_args = 0
 785 0000 08B5     		push	{r3, lr}
 786              		.cfi_def_cfa_offset 8
 787              		.cfi_offset 3, -8
 788              		.cfi_offset 14, -4
  60:tmk_core/common/action_util.c ****         oneshot_locked_mods = 0;
 789              		.loc 2 60 0
 790 0002 044B     		ldr	r3, .L82
 791 0004 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 792 0006 1AB1     		cbz	r2, .L77
  61:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
 793              		.loc 2 61 0
 794 0008 0020     		movs	r0, #0
 795 000a 1870     		strb	r0, [r3]
  62:tmk_core/common/action_util.c ****     }
 796              		.loc 2 62 0
 797 000c FFF7FEFF 		bl	oneshot_locked_mods_changed_kb
 798              	.LVL27:
 799              	.L77:
  64:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 800              		.loc 2 64 0
 801 0010 08BD     		pop	{r3, pc}
 802              	.L83:
 803 0012 00BF     		.align	2
 804              	.L82:
 805 0014 00000000 		.word	.LANCHOR1
 806              		.cfi_endproc
 807              	.LFE289:
 809              		.section	.text.oneshot_mods_changed_user,"ax",%progbits
 810              		.align	1
 811              		.weak	oneshot_mods_changed_user
 812              		.syntax unified
 813              		.thumb
 814              		.thumb_func
 815              		.fpu softvfp
 817              	oneshot_mods_changed_user:
 818              	.LFB325:
 819              		.cfi_startproc
 820              		@ args = 0, pretend = 0, frame = 0
 821              		@ frame_needed = 0, uses_anonymous_args = 0
 822              		@ link register save eliminated.
 823 0000 7047     		bx	lr
 824              		.cfi_endproc
 825              	.LFE325:
 827              		.section	.text.oneshot_mods_changed_kb,"ax",%progbits
 828              		.align	1
 829              		.weak	oneshot_mods_changed_kb
 830              		.syntax unified
 831              		.thumb
 832              		.thumb_func
 833              		.fpu softvfp
 835              	oneshot_mods_changed_kb:
 836              	.LFB319:
 283:tmk_core/common/action_util.c **** 
 284:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 285:tmk_core/common/action_util.c ****  *
 286:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 287:tmk_core/common/action_util.c ****  */
 288:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_mods_changed_user(uint8_t mods) {}
 289:tmk_core/common/action_util.c **** 
 290:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 291:tmk_core/common/action_util.c ****  *
 292:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 293:tmk_core/common/action_util.c ****  */
 294:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_mods_changed_kb(uint8_t mods) { oneshot_mods_changed_user(mods);
 837              		.loc 2 294 0
 838              		.cfi_startproc
 839              		@ args = 0, pretend = 0, frame = 0
 840              		@ frame_needed = 0, uses_anonymous_args = 0
 841              	.LVL28:
 842              		.loc 2 294 0
 843 0000 08B5     		push	{r3, lr}
 844              		.cfi_def_cfa_offset 8
 845              		.cfi_offset 3, -8
 846              		.cfi_offset 14, -4
 847              		.loc 2 294 0
 848 0002 FFF7FEFF 		bl	oneshot_mods_changed_user
 849              	.LVL29:
 850 0006 08BD     		pop	{r3, pc}
 851              		.cfi_endproc
 852              	.LFE319:
 854              		.section	.text.set_oneshot_mods,"ax",%progbits
 855              		.align	1
 856              		.global	set_oneshot_mods
 857              		.syntax unified
 858              		.thumb
 859              		.thumb_func
 860              		.fpu softvfp
 862              	set_oneshot_mods:
 863              	.LFB313:
 243:tmk_core/common/action_util.c ****     if (oneshot_mods != mods) {
 864              		.loc 2 243 0
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 0
 867              		@ frame_needed = 0, uses_anonymous_args = 0
 868              	.LVL30:
 869 0000 08B5     		push	{r3, lr}
 870              		.cfi_def_cfa_offset 8
 871              		.cfi_offset 3, -8
 872              		.cfi_offset 14, -4
 244:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 873              		.loc 2 244 0
 874 0002 044B     		ldr	r3, .L88
 875 0004 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 876 0006 8142     		cmp	r1, r0
 877 0008 02D0     		beq	.L86
 248:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(mods);
 878              		.loc 2 248 0
 879 000a 1870     		strb	r0, [r3]
 249:tmk_core/common/action_util.c ****     }
 880              		.loc 2 249 0
 881 000c FFF7FEFF 		bl	oneshot_mods_changed_kb
 882              	.LVL31:
 883              	.L86:
 251:tmk_core/common/action_util.c **** /** \brief clear oneshot mods
 884              		.loc 2 251 0
 885 0010 08BD     		pop	{r3, pc}
 886              	.L89:
 887 0012 00BF     		.align	2
 888              	.L88:
 889 0014 00000000 		.word	.LANCHOR6
 890              		.cfi_endproc
 891              	.LFE313:
 893              		.section	.text.clear_oneshot_mods,"ax",%progbits
 894              		.align	1
 895              		.global	clear_oneshot_mods
 896              		.syntax unified
 897              		.thumb
 898              		.thumb_func
 899              		.fpu softvfp
 901              	clear_oneshot_mods:
 902              	.LFB314:
 256:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 903              		.loc 2 256 0
 904              		.cfi_startproc
 905              		@ args = 0, pretend = 0, frame = 0
 906              		@ frame_needed = 0, uses_anonymous_args = 0
 907 0000 08B5     		push	{r3, lr}
 908              		.cfi_def_cfa_offset 8
 909              		.cfi_offset 3, -8
 910              		.cfi_offset 14, -4
 257:tmk_core/common/action_util.c ****         oneshot_mods = 0;
 911              		.loc 2 257 0
 912 0002 044B     		ldr	r3, .L95
 913 0004 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 914 0006 1AB1     		cbz	r2, .L90
 915              	.LBB16:
 916              	.LBB17:
 258:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 917              		.loc 2 258 0
 918 0008 0020     		movs	r0, #0
 919 000a 1870     		strb	r0, [r3]
 262:tmk_core/common/action_util.c ****     }
 920              		.loc 2 262 0
 921 000c FFF7FEFF 		bl	oneshot_mods_changed_kb
 922              	.LVL32:
 923              	.L90:
 924              	.LBE17:
 925              	.LBE16:
 264:tmk_core/common/action_util.c **** /** \brief get oneshot mods
 926              		.loc 2 264 0
 927 0010 08BD     		pop	{r3, pc}
 928              	.L96:
 929 0012 00BF     		.align	2
 930              	.L95:
 931 0014 00000000 		.word	.LANCHOR6
 932              		.cfi_endproc
 933              	.LFE314:
 935              		.section	.text.send_keyboard_report,"ax",%progbits
 936              		.align	1
 937              		.global	send_keyboard_report
 938              		.syntax unified
 939              		.thumb
 940              		.thumb_func
 941              		.fpu softvfp
 943              	send_keyboard_report:
 944              	.LFB297:
 137:tmk_core/common/action_util.c ****     keyboard_report->mods = real_mods;
 945              		.loc 2 137 0
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 0
 948              		@ frame_needed = 0, uses_anonymous_args = 0
 949 0000 10B5     		push	{r4, lr}
 950              		.cfi_def_cfa_offset 8
 951              		.cfi_offset 4, -8
 952              		.cfi_offset 14, -4
 139:tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 953              		.loc 2 139 0
 954 0002 0D4B     		ldr	r3, .L104
 955 0004 0D49     		ldr	r1, .L104+4
 956 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 957 0008 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 138:tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 958              		.loc 2 138 0
 959 000a 0D4C     		ldr	r4, .L104+8
 139:tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 960              		.loc 2 139 0
 961 000c 0B43     		orrs	r3, r3, r1
 140:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 962              		.loc 2 140 0
 963 000e 0D49     		ldr	r1, .L104+12
 138:tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 964              		.loc 2 138 0
 965 0010 2068     		ldr	r0, [r4]
 140:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 966              		.loc 2 140 0
 967 0012 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 968 0014 0B43     		orrs	r3, r3, r1
 142:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 969              		.loc 2 142 0
 970 0016 0C49     		ldr	r1, .L104+16
 140:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 971              		.loc 2 140 0
 972 0018 0370     		strb	r3, [r0]
 142:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 973              		.loc 2 142 0
 974 001a 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 975 001c 31B1     		cbz	r1, .L99
 149:tmk_core/common/action_util.c ****         if (has_anykey(keyboard_report)) {
 976              		.loc 2 149 0
 977 001e 0B43     		orrs	r3, r3, r1
 978 0020 0370     		strb	r3, [r0]
 150:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 979              		.loc 2 150 0
 980 0022 FFF7FEFF 		bl	has_anykey
 981              	.LVL33:
 982 0026 08B1     		cbz	r0, .L99
 151:tmk_core/common/action_util.c ****         }
 983              		.loc 2 151 0
 984 0028 FFF7FEFF 		bl	clear_oneshot_mods
 985              	.LVL34:
 986              	.L99:
 156:tmk_core/common/action_util.c **** }
 987              		.loc 2 156 0
 988 002c 2068     		ldr	r0, [r4]
 157:tmk_core/common/action_util.c **** 
 989              		.loc 2 157 0
 990 002e BDE81040 		pop	{r4, lr}
 991              		.cfi_restore 14
 992              		.cfi_restore 4
 993              		.cfi_def_cfa_offset 0
 156:tmk_core/common/action_util.c **** }
 994              		.loc 2 156 0
 995 0032 FFF7FEBF 		b	host_keyboard_send
 996              	.LVL35:
 997              	.L105:
 998 0036 00BF     		.align	2
 999              	.L104:
 1000 0038 00000000 		.word	.LANCHOR3
 1001 003c 00000000 		.word	.LANCHOR4
 1002 0040 00000000 		.word	.LANCHOR0
 1003 0044 00000000 		.word	.LANCHOR5
 1004 0048 00000000 		.word	.LANCHOR6
 1005              		.cfi_endproc
 1006              	.LFE297:
 1008              		.section	.text.oneshot_layer_changed_user,"ax",%progbits
 1009              		.align	1
 1010              		.weak	oneshot_layer_changed_user
 1011              		.syntax unified
 1012              		.thumb
 1013              		.thumb_func
 1014              		.fpu softvfp
 1016              	oneshot_layer_changed_user:
 1017              	.LFB327:
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              		@ link register save eliminated.
 1022 0000 7047     		bx	lr
 1023              		.cfi_endproc
 1024              	.LFE327:
 1026              		.section	.text.oneshot_layer_changed_kb,"ax",%progbits
 1027              		.align	1
 1028              		.weak	oneshot_layer_changed_kb
 1029              		.syntax unified
 1030              		.thumb
 1031              		.thumb_func
 1032              		.fpu softvfp
 1034              	oneshot_layer_changed_kb:
 1035              	.LFB321:
 295:tmk_core/common/action_util.c **** 
 296:tmk_core/common/action_util.c **** /** \brief Called when the one shot layers have been changed.
 297:tmk_core/common/action_util.c ****  *
 298:tmk_core/common/action_util.c ****  * \param layer Contains the layer that is toggled on, or zero when toggled off.
 299:tmk_core/common/action_util.c ****  */
 300:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_layer_changed_user(uint8_t layer) {}
 301:tmk_core/common/action_util.c **** 
 302:tmk_core/common/action_util.c **** /** \brief Called when the one shot layers have been changed.
 303:tmk_core/common/action_util.c ****  *
 304:tmk_core/common/action_util.c ****  * \param layer Contains the layer that is toggled on, or zero when toggled off.
 305:tmk_core/common/action_util.c ****  */
 306:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_layer_changed_kb(uint8_t layer) { oneshot_layer_changed_user(lay
 1036              		.loc 2 306 0
 1037              		.cfi_startproc
 1038              		@ args = 0, pretend = 0, frame = 0
 1039              		@ frame_needed = 0, uses_anonymous_args = 0
 1040              	.LVL36:
 1041              		.loc 2 306 0
 1042 0000 08B5     		push	{r3, lr}
 1043              		.cfi_def_cfa_offset 8
 1044              		.cfi_offset 3, -8
 1045              		.cfi_offset 14, -4
 1046              		.loc 2 306 0
 1047 0002 FFF7FEFF 		bl	oneshot_layer_changed_user
 1048              	.LVL37:
 1049 0006 08BD     		pop	{r3, pc}
 1050              		.cfi_endproc
 1051              	.LFE321:
 1053              		.section	.text.set_oneshot_layer,"ax",%progbits
 1054              		.align	1
 1055              		.global	set_oneshot_layer
 1056              		.syntax unified
 1057              		.thumb
 1058              		.thumb_func
 1059              		.fpu softvfp
 1061              	set_oneshot_layer:
 1062              	.LFB293:
  95:tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
 1063              		.loc 2 95 0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 0
 1066              		@ frame_needed = 0, uses_anonymous_args = 0
 1067              	.LVL38:
 1068 0000 10B5     		push	{r4, lr}
 1069              		.cfi_def_cfa_offset 8
 1070              		.cfi_offset 4, -8
 1071              		.cfi_offset 14, -4
  96:tmk_core/common/action_util.c ****     layer_on(layer);
 1072              		.loc 2 96 0
 1073 0002 064C     		ldr	r4, .L109
 1074 0004 41EAC001 		orr	r1, r1, r0, lsl #3
 1075              	.LVL39:
 1076 0008 2170     		strb	r1, [r4]
  97:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 1077              		.loc 2 97 0
 1078 000a FFF7FEFF 		bl	layer_on
 1079              	.LVL40:
 1080              	.LBB18:
 1081              	.LBB19:
  83:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 1082              		.loc 2 83 0
 1083 000e 94F90000 		ldrsb	r0, [r4]
 1084              	.LBE19:
 1085              	.LBE18:
 101:tmk_core/common/action_util.c **** }
 1086              		.loc 2 101 0
 1087 0012 C0F3C700 		ubfx	r0, r0, #3, #8
 1088 0016 FFF7FEFF 		bl	oneshot_layer_changed_kb
 1089              	.LVL41:
 102:tmk_core/common/action_util.c **** /** \brief Reset oneshot layer
 1090              		.loc 2 102 0
 1091 001a 10BD     		pop	{r4, pc}
 1092              	.L110:
 1093              		.align	2
 1094              	.L109:
 1095 001c 00000000 		.word	.LANCHOR2
 1096              		.cfi_endproc
 1097              	.LFE293:
 1099              		.section	.text.reset_oneshot_layer,"ax",%progbits
 1100              		.align	1
 1101              		.global	reset_oneshot_layer
 1102              		.syntax unified
 1103              		.thumb
 1104              		.thumb_func
 1105              		.fpu softvfp
 1107              	reset_oneshot_layer:
 1108              	.LFB294:
 107:tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 1109              		.loc 2 107 0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 0
 1112              		@ frame_needed = 0, uses_anonymous_args = 0
 1113 0000 08B5     		push	{r3, lr}
 1114              		.cfi_def_cfa_offset 8
 1115              		.cfi_offset 3, -8
 1116              		.cfi_offset 14, -4
 108:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 1117              		.loc 2 108 0
 1118 0002 034B     		ldr	r3, .L112
 1119 0004 0020     		movs	r0, #0
 1120 0006 1870     		strb	r0, [r3]
 112:tmk_core/common/action_util.c **** }
 1121              		.loc 2 112 0
 1122 0008 FFF7FEFF 		bl	oneshot_layer_changed_kb
 1123              	.LVL42:
 113:tmk_core/common/action_util.c **** /** \brief Clear oneshot layer
 1124              		.loc 2 113 0
 1125 000c 08BD     		pop	{r3, pc}
 1126              	.L113:
 1127 000e 00BF     		.align	2
 1128              	.L112:
 1129 0010 00000000 		.word	.LANCHOR2
 1130              		.cfi_endproc
 1131              	.LFE294:
 1133              		.section	.text.clear_oneshot_layer_state,"ax",%progbits
 1134              		.align	1
 1135              		.global	clear_oneshot_layer_state
 1136              		.syntax unified
 1137              		.thumb
 1138              		.thumb_func
 1139              		.fpu softvfp
 1141              	clear_oneshot_layer_state:
 1142              	.LFB295:
 118:tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 1143              		.loc 2 118 0
 1144              		.cfi_startproc
 1145              		@ args = 0, pretend = 0, frame = 0
 1146              		@ frame_needed = 0, uses_anonymous_args = 0
 1147              	.LVL43:
 1148 0000 08B5     		push	{r3, lr}
 1149              		.cfi_def_cfa_offset 8
 1150              		.cfi_offset 3, -8
 1151              		.cfi_offset 14, -4
 119:tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 1152              		.loc 2 119 0
 1153 0002 0A4A     		ldr	r2, .L116
 1154 0004 92F90030 		ldrsb	r3, [r2]
 1155              	.LVL44:
 120:tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 1156              		.loc 2 120 0
 1157 0008 23EA0000 		bic	r0, r3, r0
 1158              	.LVL45:
 1159 000c 40B2     		sxtb	r0, r0
 1160 000e 1070     		strb	r0, [r2]
 121:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 1161              		.loc 2 121 0
 1162 0010 4207     		lsls	r2, r0, #29
 1163 0012 0AD1     		bne	.L114
 121:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 1164              		.loc 2 121 0 is_stmt 0 discriminator 1
 1165 0014 DBB2     		uxtb	r3, r3
 1166 0016 8342     		cmp	r3, r0
 1167 0018 07D0     		beq	.L114
 122:tmk_core/common/action_util.c ****         reset_oneshot_layer();
 1168              		.loc 2 122 0 is_stmt 1
 1169 001a C0F3C700 		ubfx	r0, r0, #3, #8
 1170 001e FFF7FEFF 		bl	layer_off
 1171              	.LVL46:
 125:tmk_core/common/action_util.c **** /** \brief Is oneshot layer active
 1172              		.loc 2 125 0
 1173 0022 BDE80840 		pop	{r3, lr}
 1174              		.cfi_remember_state
 1175              		.cfi_restore 14
 1176              		.cfi_restore 3
 1177              		.cfi_def_cfa_offset 0
 123:tmk_core/common/action_util.c ****     }
 1178              		.loc 2 123 0
 1179 0026 FFF7FEBF 		b	reset_oneshot_layer
 1180              	.LVL47:
 1181              	.L114:
 1182              		.cfi_restore_state
 125:tmk_core/common/action_util.c **** /** \brief Is oneshot layer active
 1183              		.loc 2 125 0
 1184 002a 08BD     		pop	{r3, pc}
 1185              	.L117:
 1186              		.align	2
 1187              	.L116:
 1188 002c 00000000 		.word	.LANCHOR2
 1189              		.cfi_endproc
 1190              	.LFE295:
 1192              		.section	.text.has_anymod,"ax",%progbits
 1193              		.align	1
 1194              		.global	has_anymod
 1195              		.syntax unified
 1196              		.thumb
 1197              		.thumb_func
 1198              		.fpu softvfp
 1200              	has_anymod:
 1201              	.LFB322:
 307:tmk_core/common/action_util.c **** 
 308:tmk_core/common/action_util.c **** /** \brief inspect keyboard state
 309:tmk_core/common/action_util.c ****  *
 310:tmk_core/common/action_util.c ****  * FIXME: needs doc
 311:tmk_core/common/action_util.c ****  */
 312:tmk_core/common/action_util.c **** uint8_t has_anymod(void) { return bitpop(real_mods); }
 1202              		.loc 2 312 0
 1203              		.cfi_startproc
 1204              		@ args = 0, pretend = 0, frame = 0
 1205              		@ frame_needed = 0, uses_anonymous_args = 0
 1206              		@ link register save eliminated.
 1207              		.loc 2 312 0
 1208 0000 014B     		ldr	r3, .L119
 1209 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1210 0004 FFF7FEBF 		b	bitpop
 1211              	.LVL48:
 1212              	.L120:
 1213              		.align	2
 1214              	.L119:
 1215 0008 00000000 		.word	.LANCHOR3
 1216              		.cfi_endproc
 1217              	.LFE322:
 1219              		.global	keyboard_report
 1220              		.section	.bss.__compound_literal.0,"aw",%nobits
 1223              	__compound_literal.0:
 1224 0000 00000000 		.space	32
 1224      00000000 
 1224      00000000 
 1224      00000000 
 1224      00000000 
 1225              		.section	.bss.macro_mods,"aw",%nobits
 1226              		.set	.LANCHOR5,. + 0
 1229              	macro_mods:
 1230 0000 00       		.space	1
 1231              		.section	.bss.oneshot_layer_data,"aw",%nobits
 1232              		.set	.LANCHOR2,. + 0
 1235              	oneshot_layer_data:
 1236 0000 00       		.space	1
 1237              		.section	.bss.oneshot_locked_mods,"aw",%nobits
 1238              		.set	.LANCHOR1,. + 0
 1241              	oneshot_locked_mods:
 1242 0000 00       		.space	1
 1243              		.section	.bss.oneshot_mods,"aw",%nobits
 1244              		.set	.LANCHOR6,. + 0
 1247              	oneshot_mods:
 1248 0000 00       		.space	1
 1249              		.section	.bss.real_mods,"aw",%nobits
 1250              		.set	.LANCHOR3,. + 0
 1253              	real_mods:
 1254 0000 00       		.space	1
 1255              		.section	.bss.weak_mods,"aw",%nobits
 1256              		.set	.LANCHOR4,. + 0
 1259              	weak_mods:
 1260 0000 00       		.space	1
 1261              		.section	.data.keyboard_report,"aw",%progbits
 1262              		.align	2
 1263              		.set	.LANCHOR0,. + 0
 1266              	keyboard_report:
 1267 0000 00000000 		.word	__compound_literal.0
 1268              		.text
 1269              	.Letext0:
 1270              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 1271              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 1272              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 1273              		.file 6 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 1274              		.file 7 "./lib/chibios/os/rt/include/chsystypes.h"
 1275              		.file 8 "./lib/chibios/os/rt/include/chschd.h"
 1276              		.file 9 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 1277              		.file 10 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 1278              		.file 11 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/stm32f303xc.h"
 1279              		.file 12 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 1280              		.file 13 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 1281              		.file 14 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 1282              		.file 15 "./lib/chibios/os/rt/include/chtm.h"
 1283              		.file 16 "./lib/chibios/os/rt/include/chsem.h"
 1284              		.file 17 "./lib/chibios/os/rt/include/chmtx.h"
 1285              		.file 18 "./lib/chibios/os/rt/include/chsys.h"
 1286              		.file 19 "./lib/chibios/os/rt/include/chregistry.h"
 1287              		.file 20 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 1288              		.file 21 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 1289              		.file 22 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 1290              		.file 23 "./lib/chibios/os/hal/include/hal_dac.h"
 1291              		.file 24 "./lib/chibios/os/hal/ports/STM32/LLD/DACv1/hal_dac_lld.h"
 1292              		.file 25 "./lib/chibios/os/hal/include/hal_gpt.h"
 1293              		.file 26 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_gpt_lld.h"
 1294              		.file 27 "./lib/chibios/os/hal/include/hal_i2c.h"
 1295              		.file 28 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 1296              		.file 29 "./lib/chibios/os/hal/include/hal_pwm.h"
 1297              		.file 30 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 1298              		.file 31 "./lib/chibios/os/hal/include/hal_usb.h"
 1299              		.file 32 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 1300              		.file 33 "tmk_core/common/report.h"
 1301              		.file 34 "tmk_core/common/host.h"
 1302              		.file 35 "tmk_core/common/debug.h"
 1303              		.file 36 "tmk_core/common/action.h"
 1304              		.file 37 "tmk_core/common/action_layer.h"
 1305              		.file 38 "tmk_core/common/timer.h"
 1306              		.file 39 "quantum/keycode_config.h"
 1307              		.file 40 "tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
/var/tmp//ccUrKCLt.s:16     .text.add_key:0000000000000000 $t
/var/tmp//ccUrKCLt.s:23     .text.add_key:0000000000000000 add_key
/var/tmp//ccUrKCLt.s:42     .text.add_key:000000000000000c $d
/var/tmp//ccUrKCLt.s:47     .text.del_key:0000000000000000 $t
/var/tmp//ccUrKCLt.s:54     .text.del_key:0000000000000000 del_key
/var/tmp//ccUrKCLt.s:72     .text.del_key:000000000000000c $d
/var/tmp//ccUrKCLt.s:77     .text.clear_keys:0000000000000000 $t
/var/tmp//ccUrKCLt.s:84     .text.clear_keys:0000000000000000 clear_keys
/var/tmp//ccUrKCLt.s:99     .text.clear_keys:0000000000000008 $d
/var/tmp//ccUrKCLt.s:104    .text.get_oneshot_locked_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:111    .text.get_oneshot_locked_mods:0000000000000000 get_oneshot_locked_mods
/var/tmp//ccUrKCLt.s:126    .text.get_oneshot_locked_mods:0000000000000008 $d
/var/tmp//ccUrKCLt.s:131    .text.has_oneshot_mods_timed_out:0000000000000000 $t
/var/tmp//ccUrKCLt.s:138    .text.has_oneshot_mods_timed_out:0000000000000000 has_oneshot_mods_timed_out
/var/tmp//ccUrKCLt.s:152    .text.get_oneshot_layer:0000000000000000 $t
/var/tmp//ccUrKCLt.s:159    .text.get_oneshot_layer:0000000000000000 get_oneshot_layer
/var/tmp//ccUrKCLt.s:174    .text.get_oneshot_layer:000000000000000c $d
/var/tmp//ccUrKCLt.s:179    .text.get_oneshot_layer_state:0000000000000000 $t
/var/tmp//ccUrKCLt.s:186    .text.get_oneshot_layer_state:0000000000000000 get_oneshot_layer_state
/var/tmp//ccUrKCLt.s:201    .text.get_oneshot_layer_state:000000000000000c $d
/var/tmp//ccUrKCLt.s:206    .text.is_oneshot_layer_active:0000000000000000 $t
/var/tmp//ccUrKCLt.s:213    .text.is_oneshot_layer_active:0000000000000000 is_oneshot_layer_active
/var/tmp//ccUrKCLt.s:235    .text.is_oneshot_layer_active:0000000000000010 $d
/var/tmp//ccUrKCLt.s:240    .text.get_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:247    .text.get_mods:0000000000000000 get_mods
/var/tmp//ccUrKCLt.s:261    .text.get_mods:0000000000000008 $d
/var/tmp//ccUrKCLt.s:266    .text.add_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:273    .text.add_mods:0000000000000000 add_mods
/var/tmp//ccUrKCLt.s:291    .text.add_mods:000000000000000c $d
/var/tmp//ccUrKCLt.s:296    .text.del_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:303    .text.del_mods:0000000000000000 del_mods
/var/tmp//ccUrKCLt.s:321    .text.del_mods:000000000000000c $d
/var/tmp//ccUrKCLt.s:326    .text.set_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:333    .text.set_mods:0000000000000000 set_mods
/var/tmp//ccUrKCLt.s:348    .text.set_mods:0000000000000008 $d
/var/tmp//ccUrKCLt.s:353    .text.clear_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:360    .text.clear_mods:0000000000000000 clear_mods
/var/tmp//ccUrKCLt.s:375    .text.clear_mods:0000000000000008 $d
/var/tmp//ccUrKCLt.s:380    .text.get_weak_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:387    .text.get_weak_mods:0000000000000000 get_weak_mods
/var/tmp//ccUrKCLt.s:401    .text.get_weak_mods:0000000000000008 $d
/var/tmp//ccUrKCLt.s:406    .text.add_weak_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:413    .text.add_weak_mods:0000000000000000 add_weak_mods
/var/tmp//ccUrKCLt.s:431    .text.add_weak_mods:000000000000000c $d
/var/tmp//ccUrKCLt.s:436    .text.del_weak_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:443    .text.del_weak_mods:0000000000000000 del_weak_mods
/var/tmp//ccUrKCLt.s:461    .text.del_weak_mods:000000000000000c $d
/var/tmp//ccUrKCLt.s:466    .text.set_weak_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:473    .text.set_weak_mods:0000000000000000 set_weak_mods
/var/tmp//ccUrKCLt.s:488    .text.set_weak_mods:0000000000000008 $d
/var/tmp//ccUrKCLt.s:493    .text.clear_weak_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:500    .text.clear_weak_mods:0000000000000000 clear_weak_mods
/var/tmp//ccUrKCLt.s:515    .text.clear_weak_mods:0000000000000008 $d
/var/tmp//ccUrKCLt.s:520    .text.get_macro_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:527    .text.get_macro_mods:0000000000000000 get_macro_mods
/var/tmp//ccUrKCLt.s:541    .text.get_macro_mods:0000000000000008 $d
/var/tmp//ccUrKCLt.s:546    .text.add_macro_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:553    .text.add_macro_mods:0000000000000000 add_macro_mods
/var/tmp//ccUrKCLt.s:571    .text.add_macro_mods:000000000000000c $d
/var/tmp//ccUrKCLt.s:576    .text.del_macro_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:583    .text.del_macro_mods:0000000000000000 del_macro_mods
/var/tmp//ccUrKCLt.s:601    .text.del_macro_mods:000000000000000c $d
/var/tmp//ccUrKCLt.s:606    .text.set_macro_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:613    .text.set_macro_mods:0000000000000000 set_macro_mods
/var/tmp//ccUrKCLt.s:628    .text.set_macro_mods:0000000000000008 $d
/var/tmp//ccUrKCLt.s:633    .text.clear_macro_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:640    .text.clear_macro_mods:0000000000000000 clear_macro_mods
/var/tmp//ccUrKCLt.s:655    .text.clear_macro_mods:0000000000000008 $d
/var/tmp//ccUrKCLt.s:660    .text.get_oneshot_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:667    .text.get_oneshot_mods:0000000000000000 get_oneshot_mods
/var/tmp//ccUrKCLt.s:681    .text.get_oneshot_mods:0000000000000008 $d
/var/tmp//ccUrKCLt.s:686    .text.oneshot_locked_mods_changed_user:0000000000000000 $t
/var/tmp//ccUrKCLt.s:693    .text.oneshot_locked_mods_changed_user:0000000000000000 oneshot_locked_mods_changed_user
/var/tmp//ccUrKCLt.s:707    .text.oneshot_locked_mods_changed_kb:0000000000000000 $t
/var/tmp//ccUrKCLt.s:714    .text.oneshot_locked_mods_changed_kb:0000000000000000 oneshot_locked_mods_changed_kb
/var/tmp//ccUrKCLt.s:733    .text.set_oneshot_locked_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:740    .text.set_oneshot_locked_mods:0000000000000000 set_oneshot_locked_mods
/var/tmp//ccUrKCLt.s:767    .text.set_oneshot_locked_mods:0000000000000014 $d
/var/tmp//ccUrKCLt.s:772    .text.clear_oneshot_locked_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:779    .text.clear_oneshot_locked_mods:0000000000000000 clear_oneshot_locked_mods
/var/tmp//ccUrKCLt.s:805    .text.clear_oneshot_locked_mods:0000000000000014 $d
/var/tmp//ccUrKCLt.s:810    .text.oneshot_mods_changed_user:0000000000000000 $t
/var/tmp//ccUrKCLt.s:817    .text.oneshot_mods_changed_user:0000000000000000 oneshot_mods_changed_user
/var/tmp//ccUrKCLt.s:828    .text.oneshot_mods_changed_kb:0000000000000000 $t
/var/tmp//ccUrKCLt.s:835    .text.oneshot_mods_changed_kb:0000000000000000 oneshot_mods_changed_kb
/var/tmp//ccUrKCLt.s:855    .text.set_oneshot_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:862    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
/var/tmp//ccUrKCLt.s:889    .text.set_oneshot_mods:0000000000000014 $d
/var/tmp//ccUrKCLt.s:894    .text.clear_oneshot_mods:0000000000000000 $t
/var/tmp//ccUrKCLt.s:901    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
/var/tmp//ccUrKCLt.s:931    .text.clear_oneshot_mods:0000000000000014 $d
/var/tmp//ccUrKCLt.s:936    .text.send_keyboard_report:0000000000000000 $t
/var/tmp//ccUrKCLt.s:943    .text.send_keyboard_report:0000000000000000 send_keyboard_report
/var/tmp//ccUrKCLt.s:1000   .text.send_keyboard_report:0000000000000038 $d
/var/tmp//ccUrKCLt.s:1009   .text.oneshot_layer_changed_user:0000000000000000 $t
/var/tmp//ccUrKCLt.s:1016   .text.oneshot_layer_changed_user:0000000000000000 oneshot_layer_changed_user
/var/tmp//ccUrKCLt.s:1027   .text.oneshot_layer_changed_kb:0000000000000000 $t
/var/tmp//ccUrKCLt.s:1034   .text.oneshot_layer_changed_kb:0000000000000000 oneshot_layer_changed_kb
/var/tmp//ccUrKCLt.s:1054   .text.set_oneshot_layer:0000000000000000 $t
/var/tmp//ccUrKCLt.s:1061   .text.set_oneshot_layer:0000000000000000 set_oneshot_layer
/var/tmp//ccUrKCLt.s:1095   .text.set_oneshot_layer:000000000000001c $d
/var/tmp//ccUrKCLt.s:1100   .text.reset_oneshot_layer:0000000000000000 $t
/var/tmp//ccUrKCLt.s:1107   .text.reset_oneshot_layer:0000000000000000 reset_oneshot_layer
/var/tmp//ccUrKCLt.s:1129   .text.reset_oneshot_layer:0000000000000010 $d
/var/tmp//ccUrKCLt.s:1134   .text.clear_oneshot_layer_state:0000000000000000 $t
/var/tmp//ccUrKCLt.s:1141   .text.clear_oneshot_layer_state:0000000000000000 clear_oneshot_layer_state
/var/tmp//ccUrKCLt.s:1188   .text.clear_oneshot_layer_state:000000000000002c $d
/var/tmp//ccUrKCLt.s:1193   .text.has_anymod:0000000000000000 $t
/var/tmp//ccUrKCLt.s:1200   .text.has_anymod:0000000000000000 has_anymod
/var/tmp//ccUrKCLt.s:1215   .text.has_anymod:0000000000000008 $d
/var/tmp//ccUrKCLt.s:1266   .data.keyboard_report:0000000000000000 keyboard_report
/var/tmp//ccUrKCLt.s:1223   .bss.__compound_literal.0:0000000000000000 __compound_literal.0
/var/tmp//ccUrKCLt.s:1224   .bss.__compound_literal.0:0000000000000000 $d
/var/tmp//ccUrKCLt.s:1229   .bss.macro_mods:0000000000000000 macro_mods
/var/tmp//ccUrKCLt.s:1230   .bss.macro_mods:0000000000000000 $d
/var/tmp//ccUrKCLt.s:1235   .bss.oneshot_layer_data:0000000000000000 oneshot_layer_data
/var/tmp//ccUrKCLt.s:1236   .bss.oneshot_layer_data:0000000000000000 $d
/var/tmp//ccUrKCLt.s:1241   .bss.oneshot_locked_mods:0000000000000000 oneshot_locked_mods
/var/tmp//ccUrKCLt.s:1242   .bss.oneshot_locked_mods:0000000000000000 $d
/var/tmp//ccUrKCLt.s:1247   .bss.oneshot_mods:0000000000000000 oneshot_mods
/var/tmp//ccUrKCLt.s:1248   .bss.oneshot_mods:0000000000000000 $d
/var/tmp//ccUrKCLt.s:1253   .bss.real_mods:0000000000000000 real_mods
/var/tmp//ccUrKCLt.s:1254   .bss.real_mods:0000000000000000 $d
/var/tmp//ccUrKCLt.s:1259   .bss.weak_mods:0000000000000000 weak_mods
/var/tmp//ccUrKCLt.s:1260   .bss.weak_mods:0000000000000000 $d
/var/tmp//ccUrKCLt.s:1262   .data.keyboard_report:0000000000000000 $d

UNDEFINED SYMBOLS
add_key_to_report
del_key_from_report
clear_keys_from_report
has_anykey
host_keyboard_send
layer_on
layer_off
bitpop
