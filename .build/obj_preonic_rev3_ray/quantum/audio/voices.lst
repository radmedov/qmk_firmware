   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"voices.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.set_voice,"ax",%progbits
  16              		.align	1
  17              		.global	set_voice
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	set_voice:
  24              	.LFB287:
  25              		.file 1 "quantum/audio/voices.c"
   1:quantum/audio/voices.c **** /* Copyright 2016 Jack Humbert
   2:quantum/audio/voices.c ****  *
   3:quantum/audio/voices.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/audio/voices.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/audio/voices.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/audio/voices.c ****  * (at your option) any later version.
   7:quantum/audio/voices.c ****  *
   8:quantum/audio/voices.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/audio/voices.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/audio/voices.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/audio/voices.c ****  * GNU General Public License for more details.
  12:quantum/audio/voices.c ****  *
  13:quantum/audio/voices.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/audio/voices.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/audio/voices.c ****  */
  16:quantum/audio/voices.c **** #include "voices.h"
  17:quantum/audio/voices.c **** #include "audio.h"
  18:quantum/audio/voices.c **** #include "stdlib.h"
  19:quantum/audio/voices.c **** 
  20:quantum/audio/voices.c **** // these are imported from audio.c
  21:quantum/audio/voices.c **** extern uint16_t envelope_index;
  22:quantum/audio/voices.c **** extern float    note_timbre;
  23:quantum/audio/voices.c **** extern float    polyphony_rate;
  24:quantum/audio/voices.c **** extern bool     glissando;
  25:quantum/audio/voices.c **** 
  26:quantum/audio/voices.c **** voice_type voice = default_voice;
  27:quantum/audio/voices.c **** 
  28:quantum/audio/voices.c **** void set_voice(voice_type v) { voice = v; }
  26              		.loc 1 28 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32              		.loc 1 28 0
  33 0000 014B     		ldr	r3, .L2
  34 0002 1870     		strb	r0, [r3]
  35 0004 7047     		bx	lr
  36              	.L3:
  37 0006 00BF     		.align	2
  38              	.L2:
  39 0008 00000000 		.word	.LANCHOR0
  40              		.cfi_endproc
  41              	.LFE287:
  43              		.section	.text.voice_iterate,"ax",%progbits
  44              		.align	1
  45              		.global	voice_iterate
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu softvfp
  51              	voice_iterate:
  52              	.LFB288:
  29:quantum/audio/voices.c **** 
  30:quantum/audio/voices.c **** void voice_iterate() { voice = (voice + 1) % number_of_voices; }
  53              		.loc 1 30 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              		.loc 1 30 0
  59 0000 014B     		ldr	r3, .L5
  60 0002 0022     		movs	r2, #0
  61 0004 1A70     		strb	r2, [r3]
  62 0006 7047     		bx	lr
  63              	.L6:
  64              		.align	2
  65              	.L5:
  66 0008 00000000 		.word	.LANCHOR0
  67              		.cfi_endproc
  68              	.LFE288:
  70              		.section	.text.voice_deiterate,"ax",%progbits
  71              		.align	1
  72              		.global	voice_deiterate
  73              		.syntax unified
  74              		.thumb
  75              		.thumb_func
  76              		.fpu softvfp
  78              	voice_deiterate:
  79              	.LFB292:
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  84 0000 014B     		ldr	r3, .L8
  85 0002 0022     		movs	r2, #0
  86 0004 1A70     		strb	r2, [r3]
  87 0006 7047     		bx	lr
  88              	.L9:
  89              		.align	2
  90              	.L8:
  91 0008 00000000 		.word	.LANCHOR0
  92              		.cfi_endproc
  93              	.LFE292:
  95              		.section	.text.voice_envelope,"ax",%progbits
  96              		.align	1
  97              		.global	voice_envelope
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 101              		.fpu softvfp
 103              	voice_envelope:
 104              	.LFB290:
  31:quantum/audio/voices.c **** 
  32:quantum/audio/voices.c **** void voice_deiterate() { voice = (voice - 1 + number_of_voices) % number_of_voices; }
  33:quantum/audio/voices.c **** 
  34:quantum/audio/voices.c **** float voice_envelope(float frequency) {
 105              		.loc 1 34 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 110              	.LVL1:
  35:quantum/audio/voices.c ****     // envelope_index ranges from 0 to 0xFFFF, which is preserved at 880.0 Hz
  36:quantum/audio/voices.c ****     __attribute__((unused)) uint16_t compensated_index = (uint16_t)((float)envelope_index * (880.0 
  37:quantum/audio/voices.c **** 
  38:quantum/audio/voices.c ****     switch (voice) {
 111              		.loc 1 38 0
 112 0000 064B     		ldr	r3, .L13
 113 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 114 0004 43B9     		cbnz	r3, .L11
  39:quantum/audio/voices.c ****         case default_voice:
  40:quantum/audio/voices.c ****             glissando      = false;
 115              		.loc 1 40 0
 116 0006 064A     		ldr	r2, .L13+4
 117 0008 1370     		strb	r3, [r2]
  41:quantum/audio/voices.c ****             note_timbre    = TIMBRE_50;
 118              		.loc 1 41 0
 119 000a 064B     		ldr	r3, .L13+8
 120 000c 4FF07C52 		mov	r2, #1056964608
 121 0010 1A60     		str	r2, [r3]	@ float
  42:quantum/audio/voices.c ****             polyphony_rate = 0;
 122              		.loc 1 42 0
 123 0012 054B     		ldr	r3, .L13+12
 124 0014 0022     		movs	r2, #0
 125 0016 1A60     		str	r2, [r3]	@ float
 126              	.L11:
  43:quantum/audio/voices.c ****             break;
  44:quantum/audio/voices.c **** 
  45:quantum/audio/voices.c **** #ifdef AUDIO_VOICES
  46:quantum/audio/voices.c **** 
  47:quantum/audio/voices.c ****         case something:
  48:quantum/audio/voices.c ****             glissando      = false;
  49:quantum/audio/voices.c ****             polyphony_rate = 0;
  50:quantum/audio/voices.c ****             switch (compensated_index) {
  51:quantum/audio/voices.c ****                 case 0 ... 9:
  52:quantum/audio/voices.c ****                     note_timbre = TIMBRE_12;
  53:quantum/audio/voices.c ****                     break;
  54:quantum/audio/voices.c **** 
  55:quantum/audio/voices.c ****                 case 10 ... 19:
  56:quantum/audio/voices.c ****                     note_timbre = TIMBRE_25;
  57:quantum/audio/voices.c ****                     break;
  58:quantum/audio/voices.c **** 
  59:quantum/audio/voices.c ****                 case 20 ... 200:
  60:quantum/audio/voices.c ****                     note_timbre = .125 + .125;
  61:quantum/audio/voices.c ****                     break;
  62:quantum/audio/voices.c **** 
  63:quantum/audio/voices.c ****                 default:
  64:quantum/audio/voices.c ****                     note_timbre = .125;
  65:quantum/audio/voices.c ****                     break;
  66:quantum/audio/voices.c ****             }
  67:quantum/audio/voices.c ****             break;
  68:quantum/audio/voices.c **** 
  69:quantum/audio/voices.c ****         case drums:
  70:quantum/audio/voices.c ****             glissando      = false;
  71:quantum/audio/voices.c ****             polyphony_rate = 0;
  72:quantum/audio/voices.c ****             // switch (compensated_index) {
  73:quantum/audio/voices.c ****             //     case 0 ... 10:
  74:quantum/audio/voices.c ****             //         note_timbre = 0.5;
  75:quantum/audio/voices.c ****             //         break;
  76:quantum/audio/voices.c ****             //     case 11 ... 20:
  77:quantum/audio/voices.c ****             //         note_timbre = 0.5 * (21 - compensated_index) / 10;
  78:quantum/audio/voices.c ****             //         break;
  79:quantum/audio/voices.c ****             //     default:
  80:quantum/audio/voices.c ****             //         note_timbre = 0;
  81:quantum/audio/voices.c ****             //         break;
  82:quantum/audio/voices.c ****             // }
  83:quantum/audio/voices.c ****             // frequency = (rand() % (int)(frequency * 1.2 - frequency)) + (frequency * 0.8);
  84:quantum/audio/voices.c **** 
  85:quantum/audio/voices.c ****             if (frequency < 80.0) {
  86:quantum/audio/voices.c ****             } else if (frequency < 160.0) {
  87:quantum/audio/voices.c ****                 // Bass drum: 60 - 100 Hz
  88:quantum/audio/voices.c ****                 frequency = (rand() % (int)(40)) + 60;
  89:quantum/audio/voices.c ****                 switch (envelope_index) {
  90:quantum/audio/voices.c ****                     case 0 ... 10:
  91:quantum/audio/voices.c ****                         note_timbre = 0.5;
  92:quantum/audio/voices.c ****                         break;
  93:quantum/audio/voices.c ****                     case 11 ... 20:
  94:quantum/audio/voices.c ****                         note_timbre = 0.5 * (21 - envelope_index) / 10;
  95:quantum/audio/voices.c ****                         break;
  96:quantum/audio/voices.c ****                     default:
  97:quantum/audio/voices.c ****                         note_timbre = 0;
  98:quantum/audio/voices.c ****                         break;
  99:quantum/audio/voices.c ****                 }
 100:quantum/audio/voices.c **** 
 101:quantum/audio/voices.c ****             } else if (frequency < 320.0) {
 102:quantum/audio/voices.c ****                 // Snare drum: 1 - 2 KHz
 103:quantum/audio/voices.c ****                 frequency = (rand() % (int)(1000)) + 1000;
 104:quantum/audio/voices.c ****                 switch (envelope_index) {
 105:quantum/audio/voices.c ****                     case 0 ... 5:
 106:quantum/audio/voices.c ****                         note_timbre = 0.5;
 107:quantum/audio/voices.c ****                         break;
 108:quantum/audio/voices.c ****                     case 6 ... 20:
 109:quantum/audio/voices.c ****                         note_timbre = 0.5 * (21 - envelope_index) / 15;
 110:quantum/audio/voices.c ****                         break;
 111:quantum/audio/voices.c ****                     default:
 112:quantum/audio/voices.c ****                         note_timbre = 0;
 113:quantum/audio/voices.c ****                         break;
 114:quantum/audio/voices.c ****                 }
 115:quantum/audio/voices.c **** 
 116:quantum/audio/voices.c ****             } else if (frequency < 640.0) {
 117:quantum/audio/voices.c ****                 // Closed Hi-hat: 3 - 5 KHz
 118:quantum/audio/voices.c ****                 frequency = (rand() % (int)(2000)) + 3000;
 119:quantum/audio/voices.c ****                 switch (envelope_index) {
 120:quantum/audio/voices.c ****                     case 0 ... 15:
 121:quantum/audio/voices.c ****                         note_timbre = 0.5;
 122:quantum/audio/voices.c ****                         break;
 123:quantum/audio/voices.c ****                     case 16 ... 20:
 124:quantum/audio/voices.c ****                         note_timbre = 0.5 * (21 - envelope_index) / 5;
 125:quantum/audio/voices.c ****                         break;
 126:quantum/audio/voices.c ****                     default:
 127:quantum/audio/voices.c ****                         note_timbre = 0;
 128:quantum/audio/voices.c ****                         break;
 129:quantum/audio/voices.c ****                 }
 130:quantum/audio/voices.c **** 
 131:quantum/audio/voices.c ****             } else if (frequency < 1280.0) {
 132:quantum/audio/voices.c ****                 // Open Hi-hat: 3 - 5 KHz
 133:quantum/audio/voices.c ****                 frequency = (rand() % (int)(2000)) + 3000;
 134:quantum/audio/voices.c ****                 switch (envelope_index) {
 135:quantum/audio/voices.c ****                     case 0 ... 35:
 136:quantum/audio/voices.c ****                         note_timbre = 0.5;
 137:quantum/audio/voices.c ****                         break;
 138:quantum/audio/voices.c ****                     case 36 ... 50:
 139:quantum/audio/voices.c ****                         note_timbre = 0.5 * (51 - envelope_index) / 15;
 140:quantum/audio/voices.c ****                         break;
 141:quantum/audio/voices.c ****                     default:
 142:quantum/audio/voices.c ****                         note_timbre = 0;
 143:quantum/audio/voices.c ****                         break;
 144:quantum/audio/voices.c ****                 }
 145:quantum/audio/voices.c ****             }
 146:quantum/audio/voices.c ****             break;
 147:quantum/audio/voices.c ****         case butts_fader:
 148:quantum/audio/voices.c ****             glissando      = true;
 149:quantum/audio/voices.c ****             polyphony_rate = 0;
 150:quantum/audio/voices.c ****             switch (compensated_index) {
 151:quantum/audio/voices.c ****                 case 0 ... 9:
 152:quantum/audio/voices.c ****                     frequency   = frequency / 4;
 153:quantum/audio/voices.c ****                     note_timbre = TIMBRE_12;
 154:quantum/audio/voices.c ****                     break;
 155:quantum/audio/voices.c **** 
 156:quantum/audio/voices.c ****                 case 10 ... 19:
 157:quantum/audio/voices.c ****                     frequency   = frequency / 2;
 158:quantum/audio/voices.c ****                     note_timbre = TIMBRE_12;
 159:quantum/audio/voices.c ****                     break;
 160:quantum/audio/voices.c **** 
 161:quantum/audio/voices.c ****                 case 20 ... 200:
 162:quantum/audio/voices.c ****                     note_timbre = .125 - pow(((float)compensated_index - 20) / (200 - 20), 2) * .12
 163:quantum/audio/voices.c ****                     break;
 164:quantum/audio/voices.c **** 
 165:quantum/audio/voices.c ****                 default:
 166:quantum/audio/voices.c ****                     note_timbre = 0;
 167:quantum/audio/voices.c ****                     break;
 168:quantum/audio/voices.c ****             }
 169:quantum/audio/voices.c ****             break;
 170:quantum/audio/voices.c **** 
 171:quantum/audio/voices.c ****             // case octave_crunch:
 172:quantum/audio/voices.c ****             //     polyphony_rate = 0;
 173:quantum/audio/voices.c ****             //     switch (compensated_index) {
 174:quantum/audio/voices.c ****             //         case 0 ... 9:
 175:quantum/audio/voices.c ****             //         case 20 ... 24:
 176:quantum/audio/voices.c ****             //         case 30 ... 32:
 177:quantum/audio/voices.c ****             //             frequency = frequency / 2;
 178:quantum/audio/voices.c ****             //             note_timbre = TIMBRE_12;
 179:quantum/audio/voices.c ****             //         break;
 180:quantum/audio/voices.c **** 
 181:quantum/audio/voices.c ****             //         case 10 ... 19:
 182:quantum/audio/voices.c ****             //         case 25 ... 29:
 183:quantum/audio/voices.c ****             //         case 33 ... 35:
 184:quantum/audio/voices.c ****             //             frequency = frequency * 2;
 185:quantum/audio/voices.c ****             //             note_timbre = TIMBRE_12;
 186:quantum/audio/voices.c ****             //          break;
 187:quantum/audio/voices.c **** 
 188:quantum/audio/voices.c ****             //         default:
 189:quantum/audio/voices.c ****             //             note_timbre = TIMBRE_12;
 190:quantum/audio/voices.c ****             //         	break;
 191:quantum/audio/voices.c ****             //     }
 192:quantum/audio/voices.c ****             //  break;
 193:quantum/audio/voices.c **** 
 194:quantum/audio/voices.c ****         case duty_osc:
 195:quantum/audio/voices.c ****             // This slows the loop down a substantial amount, so higher notes may freeze
 196:quantum/audio/voices.c ****             glissando      = true;
 197:quantum/audio/voices.c ****             polyphony_rate = 0;
 198:quantum/audio/voices.c ****             switch (compensated_index) {
 199:quantum/audio/voices.c ****                 default:
 200:quantum/audio/voices.c **** #    define OCS_SPEED 10
 201:quantum/audio/voices.c **** #    define OCS_AMP .25
 202:quantum/audio/voices.c ****                     // sine wave is slow
 203:quantum/audio/voices.c ****                     // note_timbre = (sin((float)compensated_index/10000*OCS_SPEED) * OCS_AMP / 2) 
 204:quantum/audio/voices.c ****                     // triangle wave is a bit faster
 205:quantum/audio/voices.c ****                     note_timbre = (float)abs((compensated_index * OCS_SPEED % 3000) - 1500) * (OCS_
 206:quantum/audio/voices.c ****                     break;
 207:quantum/audio/voices.c ****             }
 208:quantum/audio/voices.c ****             break;
 209:quantum/audio/voices.c **** 
 210:quantum/audio/voices.c ****         case duty_octave_down:
 211:quantum/audio/voices.c ****             glissando      = true;
 212:quantum/audio/voices.c ****             polyphony_rate = 0;
 213:quantum/audio/voices.c ****             note_timbre    = (envelope_index % 2) * .125 + .375 * 2;
 214:quantum/audio/voices.c ****             if ((envelope_index % 4) == 0) note_timbre = 0.5;
 215:quantum/audio/voices.c ****             if ((envelope_index % 8) == 0) note_timbre = 0;
 216:quantum/audio/voices.c ****             break;
 217:quantum/audio/voices.c ****         case delayed_vibrato:
 218:quantum/audio/voices.c ****             glissando      = true;
 219:quantum/audio/voices.c ****             polyphony_rate = 0;
 220:quantum/audio/voices.c ****             note_timbre    = TIMBRE_50;
 221:quantum/audio/voices.c **** #    define VOICE_VIBRATO_DELAY 150
 222:quantum/audio/voices.c **** #    define VOICE_VIBRATO_SPEED 50
 223:quantum/audio/voices.c ****             switch (compensated_index) {
 224:quantum/audio/voices.c ****                 case 0 ... VOICE_VIBRATO_DELAY:
 225:quantum/audio/voices.c ****                     break;
 226:quantum/audio/voices.c ****                 default:
 227:quantum/audio/voices.c ****                     frequency = frequency * vibrato_lut[(int)fmod((((float)compensated_index - (VOI
 228:quantum/audio/voices.c ****                     break;
 229:quantum/audio/voices.c ****             }
 230:quantum/audio/voices.c ****             break;
 231:quantum/audio/voices.c ****             // case delayed_vibrato_octave:
 232:quantum/audio/voices.c ****             //     polyphony_rate = 0;
 233:quantum/audio/voices.c ****             //     if ((envelope_index % 2) == 1) {
 234:quantum/audio/voices.c ****             //         note_timbre = 0.55;
 235:quantum/audio/voices.c ****             //     } else {
 236:quantum/audio/voices.c ****             //         note_timbre = 0.45;
 237:quantum/audio/voices.c ****             //     }
 238:quantum/audio/voices.c ****             //     #define VOICE_VIBRATO_DELAY 150
 239:quantum/audio/voices.c ****             //     #define VOICE_VIBRATO_SPEED 50
 240:quantum/audio/voices.c ****             //     switch (compensated_index) {
 241:quantum/audio/voices.c ****             //         case 0 ... VOICE_VIBRATO_DELAY:
 242:quantum/audio/voices.c ****             //             break;
 243:quantum/audio/voices.c ****             //         default:
 244:quantum/audio/voices.c ****             //             frequency = frequency * VIBRATO_LUT[(int)fmod((((float)compensated_index
 245:quantum/audio/voices.c ****             //             break;
 246:quantum/audio/voices.c ****             //     }
 247:quantum/audio/voices.c ****             //     break;
 248:quantum/audio/voices.c ****             // case duty_fifth_down:
 249:quantum/audio/voices.c ****             //     note_timbre = 0.5;
 250:quantum/audio/voices.c ****             //     if ((envelope_index % 3) == 0)
 251:quantum/audio/voices.c ****             //         note_timbre = 0.75;
 252:quantum/audio/voices.c ****             //     break;
 253:quantum/audio/voices.c ****             // case duty_fourth_down:
 254:quantum/audio/voices.c ****             //     note_timbre = 0.0;
 255:quantum/audio/voices.c ****             //     if ((envelope_index % 12) == 0)
 256:quantum/audio/voices.c ****             //         note_timbre = 0.75;
 257:quantum/audio/voices.c ****             //     if (((envelope_index % 12) % 4) != 1)
 258:quantum/audio/voices.c ****             //         note_timbre = 0.75;
 259:quantum/audio/voices.c ****             //     break;
 260:quantum/audio/voices.c ****             // case duty_third_down:
 261:quantum/audio/voices.c ****             //     note_timbre = 0.5;
 262:quantum/audio/voices.c ****             //     if ((envelope_index % 5) == 0)
 263:quantum/audio/voices.c ****             //         note_timbre = 0.75;
 264:quantum/audio/voices.c ****             //     break;
 265:quantum/audio/voices.c ****             // case duty_fifth_third_down:
 266:quantum/audio/voices.c ****             //     note_timbre = 0.5;
 267:quantum/audio/voices.c ****             //     if ((envelope_index % 5) == 0)
 268:quantum/audio/voices.c ****             //         note_timbre = 0.75;
 269:quantum/audio/voices.c ****             //     if ((envelope_index % 3) == 0)
 270:quantum/audio/voices.c ****             //         note_timbre = 0.25;
 271:quantum/audio/voices.c ****             //     break;
 272:quantum/audio/voices.c **** 
 273:quantum/audio/voices.c **** #endif
 274:quantum/audio/voices.c **** 
 275:quantum/audio/voices.c ****         default:
 276:quantum/audio/voices.c ****             break;
 277:quantum/audio/voices.c ****     }
 278:quantum/audio/voices.c **** 
 279:quantum/audio/voices.c ****     return frequency;
 280:quantum/audio/voices.c **** }
 127              		.loc 1 280 0
 128 0018 7047     		bx	lr
 129              	.L14:
 130 001a 00BF     		.align	2
 131              	.L13:
 132 001c 00000000 		.word	.LANCHOR0
 133 0020 00000000 		.word	glissando
 134 0024 00000000 		.word	note_timbre
 135 0028 00000000 		.word	polyphony_rate
 136              		.cfi_endproc
 137              	.LFE290:
 139              		.global	voice
 140              		.section	.bss.voice,"aw",%nobits
 141              		.set	.LANCHOR0,. + 0
 144              	voice:
 145 0000 00       		.space	1
 146              		.text
 147              	.Letext0:
 148              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 149              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 150              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 151              		.file 5 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 152              		.file 6 "./lib/chibios/os/rt/include/chsystypes.h"
 153              		.file 7 "./lib/chibios/os/rt/include/chschd.h"
 154              		.file 8 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 155              		.file 9 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 156              		.file 10 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/stm32f303xc.h"
 157              		.file 11 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 158              		.file 12 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 159              		.file 13 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 160              		.file 14 "./lib/chibios/os/rt/include/chtm.h"
 161              		.file 15 "./lib/chibios/os/rt/include/chsem.h"
 162              		.file 16 "./lib/chibios/os/rt/include/chmtx.h"
 163              		.file 17 "./lib/chibios/os/rt/include/chsys.h"
 164              		.file 18 "./lib/chibios/os/rt/include/chregistry.h"
 165              		.file 19 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 166              		.file 20 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 167              		.file 21 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 168              		.file 22 "./lib/chibios/os/hal/include/hal_dac.h"
 169              		.file 23 "./lib/chibios/os/hal/ports/STM32/LLD/DACv1/hal_dac_lld.h"
 170              		.file 24 "./lib/chibios/os/hal/include/hal_gpt.h"
 171              		.file 25 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_gpt_lld.h"
 172              		.file 26 "./lib/chibios/os/hal/include/hal_i2c.h"
 173              		.file 27 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 174              		.file 28 "./lib/chibios/os/hal/include/hal_pwm.h"
 175              		.file 29 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 176              		.file 30 "./lib/chibios/os/hal/include/hal_usb.h"
 177              		.file 31 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 178              		.file 32 "quantum/audio/luts.h"
 179              		.file 33 "quantum/audio/voices.h"
 180              		.file 34 "tmk_core/common/action.h"
 181              		.file 35 "tmk_core/common/report.h"
 182              		.file 36 "tmk_core/common/host.h"
 183              		.file 37 "tmk_core/common/debug.h"
 184              		.file 38 "quantum/keycode_config.h"
 185              		.file 39 "quantum/keymap.h"
 186              		.file 40 "tmk_core/common/action_layer.h"
 187              		.file 41 "tmk_core/common/timer.h"
 188              		.file 42 "tmk_core/common/action_util.h"
 189              		.file 43 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 190              		.file 44 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 191              		.file 45 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 192              		.file 46 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 193              		.file 47 "quantum/process_keycode/process_music.h"
 194              		.file 48 "quantum/quantum.h"
 195              		.file 49 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/math.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 voices.c
/var/tmp//ccYQhvSG.s:16     .text.set_voice:0000000000000000 $t
/var/tmp//ccYQhvSG.s:23     .text.set_voice:0000000000000000 set_voice
/var/tmp//ccYQhvSG.s:39     .text.set_voice:0000000000000008 $d
/var/tmp//ccYQhvSG.s:44     .text.voice_iterate:0000000000000000 $t
/var/tmp//ccYQhvSG.s:51     .text.voice_iterate:0000000000000000 voice_iterate
/var/tmp//ccYQhvSG.s:66     .text.voice_iterate:0000000000000008 $d
/var/tmp//ccYQhvSG.s:71     .text.voice_deiterate:0000000000000000 $t
/var/tmp//ccYQhvSG.s:78     .text.voice_deiterate:0000000000000000 voice_deiterate
/var/tmp//ccYQhvSG.s:91     .text.voice_deiterate:0000000000000008 $d
/var/tmp//ccYQhvSG.s:96     .text.voice_envelope:0000000000000000 $t
/var/tmp//ccYQhvSG.s:103    .text.voice_envelope:0000000000000000 voice_envelope
/var/tmp//ccYQhvSG.s:132    .text.voice_envelope:000000000000001c $d
/var/tmp//ccYQhvSG.s:144    .bss.voice:0000000000000000 voice
/var/tmp//ccYQhvSG.s:145    .bss.voice:0000000000000000 $d

UNDEFINED SYMBOLS
glissando
note_timbre
polyphony_rate
