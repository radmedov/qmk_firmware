   1               		.file	"sym_g.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.debounce_init,"ax",@progbits
  11               	.global	debounce_init
  13               	debounce_init:
  14               	.LFB112:
  15               		.file 1 "quantum/debounce/sym_g.c"
   1:quantum/debounce/sym_g.c **** /*
   2:quantum/debounce/sym_g.c **** Copyright 2017 Alex Ong<the.onga@gmail.com>
   3:quantum/debounce/sym_g.c **** This program is free software: you can redistribute it and/or modify
   4:quantum/debounce/sym_g.c **** it under the terms of the GNU General Public License as published by
   5:quantum/debounce/sym_g.c **** the Free Software Foundation, either version 2 of the License, or
   6:quantum/debounce/sym_g.c **** (at your option) any later version.
   7:quantum/debounce/sym_g.c **** This program is distributed in the hope that it will be useful,
   8:quantum/debounce/sym_g.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
   9:quantum/debounce/sym_g.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  10:quantum/debounce/sym_g.c **** GNU General Public License for more details.
  11:quantum/debounce/sym_g.c **** You should have received a copy of the GNU General Public License
  12:quantum/debounce/sym_g.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  13:quantum/debounce/sym_g.c **** */
  14:quantum/debounce/sym_g.c **** 
  15:quantum/debounce/sym_g.c **** /*
  16:quantum/debounce/sym_g.c **** Basic global debounce algorithm. Used in 99% of keyboards at time of implementation
  17:quantum/debounce/sym_g.c **** When no state changes have occured for DEBOUNCE milliseconds, we push the state.
  18:quantum/debounce/sym_g.c **** */
  19:quantum/debounce/sym_g.c **** #include "matrix.h"
  20:quantum/debounce/sym_g.c **** #include "timer.h"
  21:quantum/debounce/sym_g.c **** #include "quantum.h"
  22:quantum/debounce/sym_g.c **** #ifndef DEBOUNCE
  23:quantum/debounce/sym_g.c **** #    define DEBOUNCE 5
  24:quantum/debounce/sym_g.c **** #endif
  25:quantum/debounce/sym_g.c **** 
  26:quantum/debounce/sym_g.c **** void        debounce_init(uint8_t num_rows) {}
  16               		.loc 1 26 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               	/* epilogue start */
  24               		.loc 1 26 0
  25 0000 0895      		ret
  26               		.cfi_endproc
  27               	.LFE112:
  29               		.section	.text.debounce,"ax",@progbits
  30               	.global	debounce
  32               	debounce:
  33               	.LFB113:
  27:quantum/debounce/sym_g.c **** static bool debouncing = false;
  28:quantum/debounce/sym_g.c **** 
  29:quantum/debounce/sym_g.c **** #if DEBOUNCE > 0
  30:quantum/debounce/sym_g.c **** static uint16_t debouncing_time;
  31:quantum/debounce/sym_g.c **** void            debounce(matrix_row_t raw[], matrix_row_t cooked[], uint8_t num_rows, bool changed)
  34               		.loc 1 31 0
  35               		.cfi_startproc
  36               	.LVL1:
  37 0000 FF92      		push r15
  38               	.LCFI0:
  39               		.cfi_def_cfa_offset 3
  40               		.cfi_offset 15, -2
  41 0002 0F93      		push r16
  42               	.LCFI1:
  43               		.cfi_def_cfa_offset 4
  44               		.cfi_offset 16, -3
  45 0004 1F93      		push r17
  46               	.LCFI2:
  47               		.cfi_def_cfa_offset 5
  48               		.cfi_offset 17, -4
  49 0006 CF93      		push r28
  50               	.LCFI3:
  51               		.cfi_def_cfa_offset 6
  52               		.cfi_offset 28, -5
  53 0008 DF93      		push r29
  54               	.LCFI4:
  55               		.cfi_def_cfa_offset 7
  56               		.cfi_offset 29, -6
  57               	/* prologue: function */
  58               	/* frame size = 0 */
  59               	/* stack size = 5 */
  60               	.L__stack_usage = 5
  61 000a 8C01      		movw r16,r24
  62 000c F62E      		mov r15,r22
  63 000e D72F      		mov r29,r23
  64 0010 C42F      		mov r28,r20
  32:quantum/debounce/sym_g.c ****     if (changed) {
  65               		.loc 1 32 0
  66 0012 2223      		tst r18
  67 0014 01F0      		breq .L3
  33:quantum/debounce/sym_g.c ****         debouncing      = true;
  68               		.loc 1 33 0
  69 0016 81E0      		ldi r24,lo8(1)
  70               	.LVL2:
  71 0018 8093 0000 		sts debouncing,r24
  34:quantum/debounce/sym_g.c ****         debouncing_time = timer_read();
  72               		.loc 1 34 0
  73 001c 0E94 0000 		call timer_read
  74               	.LVL3:
  75 0020 9093 0000 		sts debouncing_time+1,r25
  76 0024 8093 0000 		sts debouncing_time,r24
  77               	.L3:
  35:quantum/debounce/sym_g.c ****     }
  36:quantum/debounce/sym_g.c **** 
  37:quantum/debounce/sym_g.c ****     if (debouncing && timer_elapsed(debouncing_time) > DEBOUNCE) {
  78               		.loc 1 37 0
  79 0028 8091 0000 		lds r24,debouncing
  80 002c 8823      		tst r24
  81 002e 01F0      		breq .L2
  82               		.loc 1 37 0 is_stmt 0 discriminator 1
  83 0030 8091 0000 		lds r24,debouncing_time
  84 0034 9091 0000 		lds r25,debouncing_time+1
  85 0038 0E94 0000 		call timer_elapsed
  86               	.LVL4:
  87 003c 0697      		sbiw r24,6
  88 003e 00F0      		brlo .L2
  89 0040 EF2D      		mov r30,r15
  90 0042 FD2F      		mov r31,r29
  91               		.loc 1 37 0
  92 0044 D801      		movw r26,r16
  93               	.LBB2:
  38:quantum/debounce/sym_g.c ****         for (int i = 0; i < num_rows; i++) {
  94               		.loc 1 38 0 is_stmt 1
  95 0046 D0E0      		ldi r29,0
  96               	.L7:
  97               	.LVL5:
  98               		.loc 1 38 0 is_stmt 0 discriminator 1
  99 0048 CD01      		movw r24,r26
 100 004a 801B      		sub r24,r16
 101 004c 910B      		sbc r25,r17
 102 004e 8C17      		cp r24,r28
 103 0050 9D07      		cpc r25,r29
 104 0052 04F0      		brlt .L8
 105               	.LBE2:
  39:quantum/debounce/sym_g.c ****             cooked[i] = raw[i];
  40:quantum/debounce/sym_g.c ****         }
  41:quantum/debounce/sym_g.c ****         debouncing = false;
 106               		.loc 1 41 0 is_stmt 1
 107 0054 1092 0000 		sts debouncing,__zero_reg__
 108               	.LVL6:
 109               	.L2:
 110               	/* epilogue start */
  42:quantum/debounce/sym_g.c ****     }
  43:quantum/debounce/sym_g.c **** }
 111               		.loc 1 43 0
 112 0058 DF91      		pop r29
 113 005a CF91      		pop r28
 114               	.LVL7:
 115 005c 1F91      		pop r17
 116 005e 0F91      		pop r16
 117               	.LVL8:
 118 0060 FF90      		pop r15
 119 0062 0895      		ret
 120               	.LVL9:
 121               	.L8:
 122               	.LBB3:
  39:quantum/debounce/sym_g.c ****             cooked[i] = raw[i];
 123               		.loc 1 39 0 discriminator 3
 124 0064 8D91      		ld r24,X+
 125               	.LVL10:
 126 0066 8193      		st Z+,r24
 127               	.LVL11:
 128 0068 00C0      		rjmp .L7
 129               	.LBE3:
 130               		.cfi_endproc
 131               	.LFE113:
 133               		.section	.text.debounce_active,"ax",@progbits
 134               	.global	debounce_active
 136               	debounce_active:
 137               	.LFB114:
  44:quantum/debounce/sym_g.c **** #else  // no debouncing.
  45:quantum/debounce/sym_g.c **** void debounce(matrix_row_t raw[], matrix_row_t cooked[], uint8_t num_rows, bool changed) {
  46:quantum/debounce/sym_g.c ****     for (int i = 0; i < num_rows; i++) {
  47:quantum/debounce/sym_g.c ****         cooked[i] = raw[i];
  48:quantum/debounce/sym_g.c ****     }
  49:quantum/debounce/sym_g.c **** }
  50:quantum/debounce/sym_g.c **** #endif
  51:quantum/debounce/sym_g.c **** 
  52:quantum/debounce/sym_g.c **** bool debounce_active(void) { return debouncing; }
 138               		.loc 1 52 0
 139               		.cfi_startproc
 140               	/* prologue: function */
 141               	/* frame size = 0 */
 142               	/* stack size = 0 */
 143               	.L__stack_usage = 0
 144               		.loc 1 52 0
 145 0000 8091 0000 		lds r24,debouncing
 146               	/* epilogue start */
 147 0004 0895      		ret
 148               		.cfi_endproc
 149               	.LFE114:
 151               		.section	.bss.debouncing_time,"aw",@nobits
 154               	debouncing_time:
 155 0000 0000      		.zero	2
 156               		.section	.bss.debouncing,"aw",@nobits
 159               	debouncing:
 160 0000 00        		.zero	1
 161               		.text
 162               	.Letext0:
 163               		.file 2 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/stdint.h"
 164               		.file 3 "tmk_core/common/matrix.h"
 165               		.file 4 "/usr/local/Cellar/avr-gcc@7/7.4.0/lib/avr-gcc/7/gcc/avr/7.4.0/include/stddef.h"
 166               		.file 5 "tmk_core/common/timer.h"
 167               		.file 6 "tmk_core/common/action.h"
 168               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 169               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 170               		.file 9 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 171               		.file 10 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 172               		.file 11 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/stdio.h"
 173               		.file 12 "tmk_core/common/report.h"
 174               		.file 13 "tmk_core/common/host.h"
 175               		.file 14 "tmk_core/common/debug.h"
 176               		.file 15 "quantum/keycode_config.h"
 177               		.file 16 "quantum/keymap.h"
 178               		.file 17 "./quantum/color.h"
 179               		.file 18 "quantum/rgblight.h"
 180               		.file 19 "tmk_core/common/action_layer.h"
 181               		.file 20 "tmk_core/common/action_util.h"
 182               		.file 21 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/stdlib.h"
 183               		.file 22 "quantum/quantum.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 sym_g.c
/var/tmp//cc92QMhw.s:2      *ABS*:000000000000003e __SP_H__
/var/tmp//cc92QMhw.s:3      *ABS*:000000000000003d __SP_L__
/var/tmp//cc92QMhw.s:4      *ABS*:000000000000003f __SREG__
/var/tmp//cc92QMhw.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/tmp//cc92QMhw.s:6      *ABS*:0000000000000001 __zero_reg__
/var/tmp//cc92QMhw.s:13     .text.debounce_init:0000000000000000 debounce_init
/var/tmp//cc92QMhw.s:32     .text.debounce:0000000000000000 debounce
/var/tmp//cc92QMhw.s:159    .bss.debouncing:0000000000000000 debouncing
/var/tmp//cc92QMhw.s:154    .bss.debouncing_time:0000000000000000 debouncing_time
/var/tmp//cc92QMhw.s:136    .text.debounce_active:0000000000000000 debounce_active

UNDEFINED SYMBOLS
timer_read
timer_elapsed
__do_clear_bss
