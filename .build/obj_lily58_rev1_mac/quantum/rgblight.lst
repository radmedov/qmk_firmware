   1               		.file	"rgblight.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.rgblight_effect_dummy,"ax",@progbits
  12               	rgblight_effect_dummy:
  13               	.LFB156:
  14               		.file 1 "quantum/rgblight.c"
   1:quantum/rgblight.c **** /* Copyright 2016-2017 Yang Liu
   2:quantum/rgblight.c ****  *
   3:quantum/rgblight.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/rgblight.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/rgblight.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/rgblight.c ****  * (at your option) any later version.
   7:quantum/rgblight.c ****  *
   8:quantum/rgblight.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/rgblight.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/rgblight.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/rgblight.c ****  * GNU General Public License for more details.
  12:quantum/rgblight.c ****  *
  13:quantum/rgblight.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/rgblight.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/rgblight.c ****  */
  16:quantum/rgblight.c **** #include <math.h>
  17:quantum/rgblight.c **** #include <string.h>
  18:quantum/rgblight.c **** #ifdef __AVR__
  19:quantum/rgblight.c **** #    include <avr/eeprom.h>
  20:quantum/rgblight.c **** #    include <avr/interrupt.h>
  21:quantum/rgblight.c **** #endif
  22:quantum/rgblight.c **** #ifdef STM32_EEPROM_ENABLE
  23:quantum/rgblight.c **** #    include "hal.h"
  24:quantum/rgblight.c **** #    include "eeprom.h"
  25:quantum/rgblight.c **** #    include "eeprom_stm32.h"
  26:quantum/rgblight.c **** #endif
  27:quantum/rgblight.c **** #include "wait.h"
  28:quantum/rgblight.c **** #include "progmem.h"
  29:quantum/rgblight.c **** #include "timer.h"
  30:quantum/rgblight.c **** #include "rgblight.h"
  31:quantum/rgblight.c **** #include "color.h"
  32:quantum/rgblight.c **** #include "debug.h"
  33:quantum/rgblight.c **** #include "led_tables.h"
  34:quantum/rgblight.c **** #include "lib/lib8tion/lib8tion.h"
  35:quantum/rgblight.c **** #ifdef VELOCIKEY_ENABLE
  36:quantum/rgblight.c **** #    include "velocikey.h"
  37:quantum/rgblight.c **** #endif
  38:quantum/rgblight.c **** 
  39:quantum/rgblight.c **** #ifdef RGBLIGHT_SPLIT
  40:quantum/rgblight.c **** /* for split keyboard */
  41:quantum/rgblight.c **** #    define RGBLIGHT_SPLIT_SET_CHANGE_MODE rgblight_status.change_flags |= RGBLIGHT_STATUS_CHANGE_M
  42:quantum/rgblight.c **** #    define RGBLIGHT_SPLIT_SET_CHANGE_HSVS rgblight_status.change_flags |= RGBLIGHT_STATUS_CHANGE_H
  43:quantum/rgblight.c **** #    define RGBLIGHT_SPLIT_SET_CHANGE_MODEHSVS rgblight_status.change_flags |= (RGBLIGHT_STATUS_CHA
  44:quantum/rgblight.c **** #    define RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE rgblight_status.change_flags |= RGBLIGHT_STATUS_
  45:quantum/rgblight.c **** #    define RGBLIGHT_SPLIT_ANIMATION_TICK rgblight_status.change_flags |= RGBLIGHT_STATUS_ANIMATION
  46:quantum/rgblight.c **** #else
  47:quantum/rgblight.c **** #    define RGBLIGHT_SPLIT_SET_CHANGE_MODE
  48:quantum/rgblight.c **** #    define RGBLIGHT_SPLIT_SET_CHANGE_HSVS
  49:quantum/rgblight.c **** #    define RGBLIGHT_SPLIT_SET_CHANGE_MODEHSVS
  50:quantum/rgblight.c **** #    define RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE
  51:quantum/rgblight.c **** #    define RGBLIGHT_SPLIT_ANIMATION_TICK
  52:quantum/rgblight.c **** #endif
  53:quantum/rgblight.c **** 
  54:quantum/rgblight.c **** #define _RGBM_SINGLE_STATIC(sym) RGBLIGHT_MODE_##sym,
  55:quantum/rgblight.c **** #define _RGBM_SINGLE_DYNAMIC(sym)
  56:quantum/rgblight.c **** #define _RGBM_MULTI_STATIC(sym) RGBLIGHT_MODE_##sym,
  57:quantum/rgblight.c **** #define _RGBM_MULTI_DYNAMIC(sym)
  58:quantum/rgblight.c **** #define _RGBM_TMP_STATIC(sym, msym) RGBLIGHT_MODE_##sym,
  59:quantum/rgblight.c **** #define _RGBM_TMP_DYNAMIC(sym, msym)
  60:quantum/rgblight.c **** static uint8_t static_effect_table[] = {
  61:quantum/rgblight.c **** #include "rgblight_modes.h"
  62:quantum/rgblight.c **** };
  63:quantum/rgblight.c **** 
  64:quantum/rgblight.c **** #define _RGBM_SINGLE_STATIC(sym) RGBLIGHT_MODE_##sym,
  65:quantum/rgblight.c **** #define _RGBM_SINGLE_DYNAMIC(sym) RGBLIGHT_MODE_##sym,
  66:quantum/rgblight.c **** #define _RGBM_MULTI_STATIC(sym) RGBLIGHT_MODE_##sym,
  67:quantum/rgblight.c **** #define _RGBM_MULTI_DYNAMIC(sym) RGBLIGHT_MODE_##sym,
  68:quantum/rgblight.c **** #define _RGBM_TMP_STATIC(sym, msym) RGBLIGHT_MODE_##msym,
  69:quantum/rgblight.c **** #define _RGBM_TMP_DYNAMIC(sym, msym) RGBLIGHT_MODE_##msym,
  70:quantum/rgblight.c **** static uint8_t mode_base_table[] = {
  71:quantum/rgblight.c ****     0,  // RGBLIGHT_MODE_zero
  72:quantum/rgblight.c **** #include "rgblight_modes.h"
  73:quantum/rgblight.c **** };
  74:quantum/rgblight.c **** 
  75:quantum/rgblight.c **** static inline int is_static_effect(uint8_t mode) { return memchr(static_effect_table, mode, sizeof(
  76:quantum/rgblight.c **** 
  77:quantum/rgblight.c **** #ifdef RGBLIGHT_LED_MAP
  78:quantum/rgblight.c **** const uint8_t led_map[] PROGMEM = RGBLIGHT_LED_MAP;
  79:quantum/rgblight.c **** #endif
  80:quantum/rgblight.c **** 
  81:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_STATIC_GRADIENT
  82:quantum/rgblight.c **** __attribute__((weak)) const uint8_t RGBLED_GRADIENT_RANGES[] PROGMEM = {255, 170, 127, 85, 64};
  83:quantum/rgblight.c **** #endif
  84:quantum/rgblight.c **** 
  85:quantum/rgblight.c **** rgblight_config_t rgblight_config;
  86:quantum/rgblight.c **** rgblight_status_t rgblight_status         = {.timer_enabled = false};
  87:quantum/rgblight.c **** bool              is_rgblight_initialized = false;
  88:quantum/rgblight.c **** 
  89:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
  90:quantum/rgblight.c **** animation_status_t animation_status = {};
  91:quantum/rgblight.c **** #endif
  92:quantum/rgblight.c **** 
  93:quantum/rgblight.c **** #ifndef LED_ARRAY
  94:quantum/rgblight.c **** LED_TYPE led[RGBLED_NUM];
  95:quantum/rgblight.c **** #    define LED_ARRAY led
  96:quantum/rgblight.c **** #endif
  97:quantum/rgblight.c **** 
  98:quantum/rgblight.c **** static uint8_t clipping_start_pos = 0;
  99:quantum/rgblight.c **** static uint8_t clipping_num_leds  = RGBLED_NUM;
 100:quantum/rgblight.c **** static uint8_t effect_start_pos   = 0;
 101:quantum/rgblight.c **** static uint8_t effect_end_pos     = RGBLED_NUM;
 102:quantum/rgblight.c **** static uint8_t effect_num_leds    = RGBLED_NUM;
 103:quantum/rgblight.c **** 
 104:quantum/rgblight.c **** void rgblight_set_clipping_range(uint8_t start_pos, uint8_t num_leds) {
 105:quantum/rgblight.c ****     clipping_start_pos = start_pos;
 106:quantum/rgblight.c ****     clipping_num_leds  = num_leds;
 107:quantum/rgblight.c **** }
 108:quantum/rgblight.c **** 
 109:quantum/rgblight.c **** void rgblight_set_effect_range(uint8_t start_pos, uint8_t num_leds) {
 110:quantum/rgblight.c ****     if (start_pos >= RGBLED_NUM) return;
 111:quantum/rgblight.c ****     if (start_pos + num_leds > RGBLED_NUM) return;
 112:quantum/rgblight.c ****     effect_start_pos = start_pos;
 113:quantum/rgblight.c ****     effect_end_pos   = start_pos + num_leds;
 114:quantum/rgblight.c ****     effect_num_leds  = num_leds;
 115:quantum/rgblight.c **** }
 116:quantum/rgblight.c **** 
 117:quantum/rgblight.c **** void sethsv_raw(uint8_t hue, uint8_t sat, uint8_t val, LED_TYPE *led1) {
 118:quantum/rgblight.c ****     HSV hsv = {hue, sat, val};
 119:quantum/rgblight.c ****     RGB rgb = hsv_to_rgb(hsv);
 120:quantum/rgblight.c ****     setrgb(rgb.r, rgb.g, rgb.b, led1);
 121:quantum/rgblight.c **** }
 122:quantum/rgblight.c **** 
 123:quantum/rgblight.c **** void sethsv(uint8_t hue, uint8_t sat, uint8_t val, LED_TYPE *led1) { sethsv_raw(hue, sat, val > RGB
 124:quantum/rgblight.c **** 
 125:quantum/rgblight.c **** void setrgb(uint8_t r, uint8_t g, uint8_t b, LED_TYPE *led1) {
 126:quantum/rgblight.c ****     (*led1).r = r;
 127:quantum/rgblight.c ****     (*led1).g = g;
 128:quantum/rgblight.c ****     (*led1).b = b;
 129:quantum/rgblight.c **** }
 130:quantum/rgblight.c **** 
 131:quantum/rgblight.c **** void rgblight_check_config(void) {
 132:quantum/rgblight.c ****     /* Add some out of bound checks for RGB light config */
 133:quantum/rgblight.c **** 
 134:quantum/rgblight.c ****     if (rgblight_config.mode < RGBLIGHT_MODE_STATIC_LIGHT) {
 135:quantum/rgblight.c ****         rgblight_config.mode = RGBLIGHT_MODE_STATIC_LIGHT;
 136:quantum/rgblight.c ****     } else if (rgblight_config.mode > RGBLIGHT_MODES) {
 137:quantum/rgblight.c ****         rgblight_config.mode = RGBLIGHT_MODES;
 138:quantum/rgblight.c ****     }
 139:quantum/rgblight.c **** 
 140:quantum/rgblight.c ****     if (rgblight_config.val > RGBLIGHT_LIMIT_VAL) {
 141:quantum/rgblight.c ****         rgblight_config.val = RGBLIGHT_LIMIT_VAL;
 142:quantum/rgblight.c ****     }
 143:quantum/rgblight.c **** }
 144:quantum/rgblight.c **** 
 145:quantum/rgblight.c **** uint32_t eeconfig_read_rgblight(void) {
 146:quantum/rgblight.c **** #if defined(__AVR__) || defined(STM32_EEPROM_ENABLE) || defined(PROTOCOL_ARM_ATSAM) || defined(EEPR
 147:quantum/rgblight.c ****     return eeprom_read_dword(EECONFIG_RGBLIGHT);
 148:quantum/rgblight.c **** #else
 149:quantum/rgblight.c ****     return 0;
 150:quantum/rgblight.c **** #endif
 151:quantum/rgblight.c **** }
 152:quantum/rgblight.c **** 
 153:quantum/rgblight.c **** void eeconfig_update_rgblight(uint32_t val) {
 154:quantum/rgblight.c **** #if defined(__AVR__) || defined(STM32_EEPROM_ENABLE) || defined(PROTOCOL_ARM_ATSAM) || defined(EEPR
 155:quantum/rgblight.c ****     rgblight_check_config();
 156:quantum/rgblight.c ****     eeprom_update_dword(EECONFIG_RGBLIGHT, val);
 157:quantum/rgblight.c **** #endif
 158:quantum/rgblight.c **** }
 159:quantum/rgblight.c **** 
 160:quantum/rgblight.c **** void eeconfig_update_rgblight_default(void) {
 161:quantum/rgblight.c ****     rgblight_config.enable = 1;
 162:quantum/rgblight.c ****     rgblight_config.mode   = RGBLIGHT_MODE_STATIC_LIGHT;
 163:quantum/rgblight.c ****     rgblight_config.hue    = 0;
 164:quantum/rgblight.c ****     rgblight_config.sat    = UINT8_MAX;
 165:quantum/rgblight.c ****     rgblight_config.val    = RGBLIGHT_LIMIT_VAL;
 166:quantum/rgblight.c ****     rgblight_config.speed  = 0;
 167:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_MODEHSVS;
 168:quantum/rgblight.c ****     eeconfig_update_rgblight(rgblight_config.raw);
 169:quantum/rgblight.c **** }
 170:quantum/rgblight.c **** 
 171:quantum/rgblight.c **** void eeconfig_debug_rgblight(void) {
 172:quantum/rgblight.c ****     dprintf("rgblight_config EEPROM:\n");
 173:quantum/rgblight.c ****     dprintf("rgblight_config.enable = %d\n", rgblight_config.enable);
 174:quantum/rgblight.c ****     dprintf("rghlight_config.mode = %d\n", rgblight_config.mode);
 175:quantum/rgblight.c ****     dprintf("rgblight_config.hue = %d\n", rgblight_config.hue);
 176:quantum/rgblight.c ****     dprintf("rgblight_config.sat = %d\n", rgblight_config.sat);
 177:quantum/rgblight.c ****     dprintf("rgblight_config.val = %d\n", rgblight_config.val);
 178:quantum/rgblight.c ****     dprintf("rgblight_config.speed = %d\n", rgblight_config.speed);
 179:quantum/rgblight.c **** }
 180:quantum/rgblight.c **** 
 181:quantum/rgblight.c **** void rgblight_init(void) {
 182:quantum/rgblight.c ****     /* if already initialized, don't do it again.
 183:quantum/rgblight.c ****        If you must do it again, extern this and set to false, first.
 184:quantum/rgblight.c ****        This is a dirty, dirty hack until proper hooks can be added for keyboard startup. */
 185:quantum/rgblight.c ****     if (is_rgblight_initialized) {
 186:quantum/rgblight.c ****         return;
 187:quantum/rgblight.c ****     }
 188:quantum/rgblight.c **** 
 189:quantum/rgblight.c ****     debug_enable = 1;  // Debug ON!
 190:quantum/rgblight.c ****     dprintf("rgblight_init called.\n");
 191:quantum/rgblight.c ****     dprintf("rgblight_init start!\n");
 192:quantum/rgblight.c ****     if (!eeconfig_is_enabled()) {
 193:quantum/rgblight.c ****         dprintf("rgblight_init eeconfig is not enabled.\n");
 194:quantum/rgblight.c ****         eeconfig_init();
 195:quantum/rgblight.c ****         eeconfig_update_rgblight_default();
 196:quantum/rgblight.c ****     }
 197:quantum/rgblight.c ****     rgblight_config.raw = eeconfig_read_rgblight();
 198:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_MODEHSVS;
 199:quantum/rgblight.c ****     if (!rgblight_config.mode) {
 200:quantum/rgblight.c ****         dprintf("rgblight_init rgblight_config.mode = 0. Write default values to EEPROM.\n");
 201:quantum/rgblight.c ****         eeconfig_update_rgblight_default();
 202:quantum/rgblight.c ****         rgblight_config.raw = eeconfig_read_rgblight();
 203:quantum/rgblight.c ****     }
 204:quantum/rgblight.c ****     rgblight_check_config();
 205:quantum/rgblight.c **** 
 206:quantum/rgblight.c ****     eeconfig_debug_rgblight();  // display current eeprom values
 207:quantum/rgblight.c **** 
 208:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 209:quantum/rgblight.c ****     rgblight_timer_init();  // setup the timer
 210:quantum/rgblight.c **** #endif
 211:quantum/rgblight.c **** 
 212:quantum/rgblight.c ****     if (rgblight_config.enable) {
 213:quantum/rgblight.c ****         rgblight_mode_noeeprom(rgblight_config.mode);
 214:quantum/rgblight.c ****     }
 215:quantum/rgblight.c **** 
 216:quantum/rgblight.c ****     is_rgblight_initialized = true;
 217:quantum/rgblight.c **** }
 218:quantum/rgblight.c **** 
 219:quantum/rgblight.c **** uint32_t rgblight_read_dword(void) { return rgblight_config.raw; }
 220:quantum/rgblight.c **** 
 221:quantum/rgblight.c **** void rgblight_update_dword(uint32_t dword) {
 222:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_MODEHSVS;
 223:quantum/rgblight.c ****     rgblight_config.raw = dword;
 224:quantum/rgblight.c ****     if (rgblight_config.enable)
 225:quantum/rgblight.c ****         rgblight_mode_noeeprom(rgblight_config.mode);
 226:quantum/rgblight.c ****     else {
 227:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 228:quantum/rgblight.c ****         rgblight_timer_disable();
 229:quantum/rgblight.c **** #endif
 230:quantum/rgblight.c ****         rgblight_set();
 231:quantum/rgblight.c ****     }
 232:quantum/rgblight.c **** }
 233:quantum/rgblight.c **** 
 234:quantum/rgblight.c **** void rgblight_increase(void) {
 235:quantum/rgblight.c ****     uint8_t mode = 0;
 236:quantum/rgblight.c ****     if (rgblight_config.mode < RGBLIGHT_MODES) {
 237:quantum/rgblight.c ****         mode = rgblight_config.mode + 1;
 238:quantum/rgblight.c ****     }
 239:quantum/rgblight.c ****     rgblight_mode(mode);
 240:quantum/rgblight.c **** }
 241:quantum/rgblight.c **** void rgblight_decrease(void) {
 242:quantum/rgblight.c ****     uint8_t mode = 0;
 243:quantum/rgblight.c ****     // Mode will never be < 1. If it ever is, eeprom needs to be initialized.
 244:quantum/rgblight.c ****     if (rgblight_config.mode > RGBLIGHT_MODE_STATIC_LIGHT) {
 245:quantum/rgblight.c ****         mode = rgblight_config.mode - 1;
 246:quantum/rgblight.c ****     }
 247:quantum/rgblight.c ****     rgblight_mode(mode);
 248:quantum/rgblight.c **** }
 249:quantum/rgblight.c **** void rgblight_step_helper(bool write_to_eeprom) {
 250:quantum/rgblight.c ****     uint8_t mode = 0;
 251:quantum/rgblight.c ****     mode         = rgblight_config.mode + 1;
 252:quantum/rgblight.c ****     if (mode > RGBLIGHT_MODES) {
 253:quantum/rgblight.c ****         mode = 1;
 254:quantum/rgblight.c ****     }
 255:quantum/rgblight.c ****     rgblight_mode_eeprom_helper(mode, write_to_eeprom);
 256:quantum/rgblight.c **** }
 257:quantum/rgblight.c **** void rgblight_step_noeeprom(void) { rgblight_step_helper(false); }
 258:quantum/rgblight.c **** void rgblight_step(void) { rgblight_step_helper(true); }
 259:quantum/rgblight.c **** void rgblight_step_reverse_helper(bool write_to_eeprom) {
 260:quantum/rgblight.c ****     uint8_t mode = 0;
 261:quantum/rgblight.c ****     mode         = rgblight_config.mode - 1;
 262:quantum/rgblight.c ****     if (mode < 1) {
 263:quantum/rgblight.c ****         mode = RGBLIGHT_MODES;
 264:quantum/rgblight.c ****     }
 265:quantum/rgblight.c ****     rgblight_mode_eeprom_helper(mode, write_to_eeprom);
 266:quantum/rgblight.c **** }
 267:quantum/rgblight.c **** void rgblight_step_reverse_noeeprom(void) { rgblight_step_reverse_helper(false); }
 268:quantum/rgblight.c **** void rgblight_step_reverse(void) { rgblight_step_reverse_helper(true); }
 269:quantum/rgblight.c **** 
 270:quantum/rgblight.c **** uint8_t rgblight_get_mode(void) {
 271:quantum/rgblight.c ****     if (!rgblight_config.enable) {
 272:quantum/rgblight.c ****         return false;
 273:quantum/rgblight.c ****     }
 274:quantum/rgblight.c **** 
 275:quantum/rgblight.c ****     return rgblight_config.mode;
 276:quantum/rgblight.c **** }
 277:quantum/rgblight.c **** 
 278:quantum/rgblight.c **** void rgblight_mode_eeprom_helper(uint8_t mode, bool write_to_eeprom) {
 279:quantum/rgblight.c ****     if (!rgblight_config.enable) {
 280:quantum/rgblight.c ****         return;
 281:quantum/rgblight.c ****     }
 282:quantum/rgblight.c ****     if (mode < RGBLIGHT_MODE_STATIC_LIGHT) {
 283:quantum/rgblight.c ****         rgblight_config.mode = RGBLIGHT_MODE_STATIC_LIGHT;
 284:quantum/rgblight.c ****     } else if (mode > RGBLIGHT_MODES) {
 285:quantum/rgblight.c ****         rgblight_config.mode = RGBLIGHT_MODES;
 286:quantum/rgblight.c ****     } else {
 287:quantum/rgblight.c ****         rgblight_config.mode = mode;
 288:quantum/rgblight.c ****     }
 289:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_MODE;
 290:quantum/rgblight.c ****     if (write_to_eeprom) {
 291:quantum/rgblight.c ****         eeconfig_update_rgblight(rgblight_config.raw);
 292:quantum/rgblight.c ****         dprintf("rgblight mode [EEPROM]: %u\n", rgblight_config.mode);
 293:quantum/rgblight.c ****     } else {
 294:quantum/rgblight.c ****         dprintf("rgblight mode [NOEEPROM]: %u\n", rgblight_config.mode);
 295:quantum/rgblight.c ****     }
 296:quantum/rgblight.c ****     if (is_static_effect(rgblight_config.mode)) {
 297:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 298:quantum/rgblight.c ****         rgblight_timer_disable();
 299:quantum/rgblight.c **** #endif
 300:quantum/rgblight.c ****     } else {
 301:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 302:quantum/rgblight.c ****         rgblight_timer_enable();
 303:quantum/rgblight.c **** #endif
 304:quantum/rgblight.c ****     }
 305:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 306:quantum/rgblight.c ****     animation_status.restart = true;
 307:quantum/rgblight.c **** #endif
 308:quantum/rgblight.c ****     rgblight_sethsv_noeeprom(rgblight_config.hue, rgblight_config.sat, rgblight_config.val);
 309:quantum/rgblight.c **** }
 310:quantum/rgblight.c **** 
 311:quantum/rgblight.c **** void rgblight_mode(uint8_t mode) { rgblight_mode_eeprom_helper(mode, true); }
 312:quantum/rgblight.c **** 
 313:quantum/rgblight.c **** void rgblight_mode_noeeprom(uint8_t mode) { rgblight_mode_eeprom_helper(mode, false); }
 314:quantum/rgblight.c **** 
 315:quantum/rgblight.c **** void rgblight_toggle(void) {
 316:quantum/rgblight.c ****     dprintf("rgblight toggle [EEPROM]: rgblight_config.enable = %u\n", !rgblight_config.enable);
 317:quantum/rgblight.c ****     if (rgblight_config.enable) {
 318:quantum/rgblight.c ****         rgblight_disable();
 319:quantum/rgblight.c ****     } else {
 320:quantum/rgblight.c ****         rgblight_enable();
 321:quantum/rgblight.c ****     }
 322:quantum/rgblight.c **** }
 323:quantum/rgblight.c **** 
 324:quantum/rgblight.c **** void rgblight_toggle_noeeprom(void) {
 325:quantum/rgblight.c ****     dprintf("rgblight toggle [NOEEPROM]: rgblight_config.enable = %u\n", !rgblight_config.enable);
 326:quantum/rgblight.c ****     if (rgblight_config.enable) {
 327:quantum/rgblight.c ****         rgblight_disable_noeeprom();
 328:quantum/rgblight.c ****     } else {
 329:quantum/rgblight.c ****         rgblight_enable_noeeprom();
 330:quantum/rgblight.c ****     }
 331:quantum/rgblight.c **** }
 332:quantum/rgblight.c **** 
 333:quantum/rgblight.c **** void rgblight_enable(void) {
 334:quantum/rgblight.c ****     rgblight_config.enable = 1;
 335:quantum/rgblight.c ****     // No need to update EEPROM here. rgblight_mode() will do that, actually
 336:quantum/rgblight.c ****     // eeconfig_update_rgblight(rgblight_config.raw);
 337:quantum/rgblight.c ****     dprintf("rgblight enable [EEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 338:quantum/rgblight.c ****     rgblight_mode(rgblight_config.mode);
 339:quantum/rgblight.c **** }
 340:quantum/rgblight.c **** 
 341:quantum/rgblight.c **** void rgblight_enable_noeeprom(void) {
 342:quantum/rgblight.c ****     rgblight_config.enable = 1;
 343:quantum/rgblight.c ****     dprintf("rgblight enable [NOEEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 344:quantum/rgblight.c ****     rgblight_mode_noeeprom(rgblight_config.mode);
 345:quantum/rgblight.c **** }
 346:quantum/rgblight.c **** 
 347:quantum/rgblight.c **** void rgblight_disable(void) {
 348:quantum/rgblight.c ****     rgblight_config.enable = 0;
 349:quantum/rgblight.c ****     eeconfig_update_rgblight(rgblight_config.raw);
 350:quantum/rgblight.c ****     dprintf("rgblight disable [EEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 351:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 352:quantum/rgblight.c ****     rgblight_timer_disable();
 353:quantum/rgblight.c **** #endif
 354:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_MODE;
 355:quantum/rgblight.c ****     wait_ms(50);
 356:quantum/rgblight.c ****     rgblight_set();
 357:quantum/rgblight.c **** }
 358:quantum/rgblight.c **** 
 359:quantum/rgblight.c **** void rgblight_disable_noeeprom(void) {
 360:quantum/rgblight.c ****     rgblight_config.enable = 0;
 361:quantum/rgblight.c ****     dprintf("rgblight disable [NOEEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 362:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 363:quantum/rgblight.c ****     rgblight_timer_disable();
 364:quantum/rgblight.c **** #endif
 365:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_MODE;
 366:quantum/rgblight.c ****     wait_ms(50);
 367:quantum/rgblight.c ****     rgblight_set();
 368:quantum/rgblight.c **** }
 369:quantum/rgblight.c **** 
 370:quantum/rgblight.c **** void rgblight_increase_hue_helper(bool write_to_eeprom) {
 371:quantum/rgblight.c ****     uint8_t hue = rgblight_config.hue + RGBLIGHT_HUE_STEP;
 372:quantum/rgblight.c ****     rgblight_sethsv_eeprom_helper(hue, rgblight_config.sat, rgblight_config.val, write_to_eeprom);
 373:quantum/rgblight.c **** }
 374:quantum/rgblight.c **** void rgblight_increase_hue_noeeprom(void) { rgblight_increase_hue_helper(false); }
 375:quantum/rgblight.c **** void rgblight_increase_hue(void) { rgblight_increase_hue_helper(true); }
 376:quantum/rgblight.c **** void rgblight_decrease_hue_helper(bool write_to_eeprom) {
 377:quantum/rgblight.c ****     uint8_t hue = rgblight_config.hue - RGBLIGHT_HUE_STEP;
 378:quantum/rgblight.c ****     rgblight_sethsv_eeprom_helper(hue, rgblight_config.sat, rgblight_config.val, write_to_eeprom);
 379:quantum/rgblight.c **** }
 380:quantum/rgblight.c **** void rgblight_decrease_hue_noeeprom(void) { rgblight_decrease_hue_helper(false); }
 381:quantum/rgblight.c **** void rgblight_decrease_hue(void) { rgblight_decrease_hue_helper(true); }
 382:quantum/rgblight.c **** void rgblight_increase_sat_helper(bool write_to_eeprom) {
 383:quantum/rgblight.c ****     uint8_t sat = qadd8(rgblight_config.sat, RGBLIGHT_SAT_STEP);
 384:quantum/rgblight.c ****     rgblight_sethsv_eeprom_helper(rgblight_config.hue, sat, rgblight_config.val, write_to_eeprom);
 385:quantum/rgblight.c **** }
 386:quantum/rgblight.c **** void rgblight_increase_sat_noeeprom(void) { rgblight_increase_sat_helper(false); }
 387:quantum/rgblight.c **** void rgblight_increase_sat(void) { rgblight_increase_sat_helper(true); }
 388:quantum/rgblight.c **** void rgblight_decrease_sat_helper(bool write_to_eeprom) {
 389:quantum/rgblight.c ****     uint8_t sat = qsub8(rgblight_config.sat, RGBLIGHT_SAT_STEP);
 390:quantum/rgblight.c ****     rgblight_sethsv_eeprom_helper(rgblight_config.hue, sat, rgblight_config.val, write_to_eeprom);
 391:quantum/rgblight.c **** }
 392:quantum/rgblight.c **** void rgblight_decrease_sat_noeeprom(void) { rgblight_decrease_sat_helper(false); }
 393:quantum/rgblight.c **** void rgblight_decrease_sat(void) { rgblight_decrease_sat_helper(true); }
 394:quantum/rgblight.c **** void rgblight_increase_val_helper(bool write_to_eeprom) {
 395:quantum/rgblight.c ****     uint8_t val = qadd8(rgblight_config.val, RGBLIGHT_VAL_STEP);
 396:quantum/rgblight.c ****     rgblight_sethsv_eeprom_helper(rgblight_config.hue, rgblight_config.sat, val, write_to_eeprom);
 397:quantum/rgblight.c **** }
 398:quantum/rgblight.c **** void rgblight_increase_val_noeeprom(void) { rgblight_increase_val_helper(false); }
 399:quantum/rgblight.c **** void rgblight_increase_val(void) { rgblight_increase_val_helper(true); }
 400:quantum/rgblight.c **** void rgblight_decrease_val_helper(bool write_to_eeprom) {
 401:quantum/rgblight.c ****     uint8_t val = qsub8(rgblight_config.val, RGBLIGHT_VAL_STEP);
 402:quantum/rgblight.c ****     rgblight_sethsv_eeprom_helper(rgblight_config.hue, rgblight_config.sat, val, write_to_eeprom);
 403:quantum/rgblight.c **** }
 404:quantum/rgblight.c **** void rgblight_decrease_val_noeeprom(void) { rgblight_decrease_val_helper(false); }
 405:quantum/rgblight.c **** void rgblight_decrease_val(void) { rgblight_decrease_val_helper(true); }
 406:quantum/rgblight.c **** void rgblight_increase_speed(void) {
 407:quantum/rgblight.c ****     if (rgblight_config.speed < 3) rgblight_config.speed++;
 408:quantum/rgblight.c ****     // RGBLIGHT_SPLIT_SET_CHANGE_HSVS; // NEED?
 409:quantum/rgblight.c ****     eeconfig_update_rgblight(rgblight_config.raw);  // EECONFIG needs to be increased to support th
 410:quantum/rgblight.c **** }
 411:quantum/rgblight.c **** 
 412:quantum/rgblight.c **** void rgblight_decrease_speed(void) {
 413:quantum/rgblight.c ****     if (rgblight_config.speed > 0) rgblight_config.speed--;
 414:quantum/rgblight.c ****     // RGBLIGHT_SPLIT_SET_CHANGE_HSVS; // NEED??
 415:quantum/rgblight.c ****     eeconfig_update_rgblight(rgblight_config.raw);  // EECONFIG needs to be increased to support th
 416:quantum/rgblight.c **** }
 417:quantum/rgblight.c **** 
 418:quantum/rgblight.c **** void rgblight_sethsv_noeeprom_old(uint8_t hue, uint8_t sat, uint8_t val) {
 419:quantum/rgblight.c ****     if (rgblight_config.enable) {
 420:quantum/rgblight.c ****         LED_TYPE tmp_led;
 421:quantum/rgblight.c ****         sethsv(hue, sat, val, &tmp_led);
 422:quantum/rgblight.c ****         rgblight_setrgb(tmp_led.r, tmp_led.g, tmp_led.b);
 423:quantum/rgblight.c ****     }
 424:quantum/rgblight.c **** }
 425:quantum/rgblight.c **** 
 426:quantum/rgblight.c **** void rgblight_sethsv_eeprom_helper(uint8_t hue, uint8_t sat, uint8_t val, bool write_to_eeprom) {
 427:quantum/rgblight.c ****     if (rgblight_config.enable) {
 428:quantum/rgblight.c ****         rgblight_status.base_mode = mode_base_table[rgblight_config.mode];
 429:quantum/rgblight.c ****         if (rgblight_config.mode == RGBLIGHT_MODE_STATIC_LIGHT) {
 430:quantum/rgblight.c ****             // same static color
 431:quantum/rgblight.c ****             LED_TYPE tmp_led;
 432:quantum/rgblight.c ****             sethsv(hue, sat, val, &tmp_led);
 433:quantum/rgblight.c ****             rgblight_setrgb(tmp_led.r, tmp_led.g, tmp_led.b);
 434:quantum/rgblight.c ****         } else {
 435:quantum/rgblight.c ****             // all LEDs in same color
 436:quantum/rgblight.c ****             if (1 == 0) {  // dummy
 437:quantum/rgblight.c ****             }
 438:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_BREATHING
 439:quantum/rgblight.c ****             else if (rgblight_status.base_mode == RGBLIGHT_MODE_BREATHING) {
 440:quantum/rgblight.c ****                 // breathing mode, ignore the change of val, use in memory value instead
 441:quantum/rgblight.c ****                 val = rgblight_config.val;
 442:quantum/rgblight.c ****             }
 443:quantum/rgblight.c **** #endif
 444:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_RAINBOW_MOOD
 445:quantum/rgblight.c ****             else if (rgblight_status.base_mode == RGBLIGHT_MODE_RAINBOW_MOOD) {
 446:quantum/rgblight.c ****                 // rainbow mood, ignore the change of hue
 447:quantum/rgblight.c ****                 hue = rgblight_config.hue;
 448:quantum/rgblight.c ****             }
 449:quantum/rgblight.c **** #endif
 450:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_RAINBOW_SWIRL
 451:quantum/rgblight.c ****             else if (rgblight_status.base_mode == RGBLIGHT_MODE_RAINBOW_SWIRL) {
 452:quantum/rgblight.c ****                 // rainbow swirl, ignore the change of hue
 453:quantum/rgblight.c ****                 hue = rgblight_config.hue;
 454:quantum/rgblight.c ****             }
 455:quantum/rgblight.c **** #endif
 456:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_STATIC_GRADIENT
 457:quantum/rgblight.c ****             else if (rgblight_status.base_mode == RGBLIGHT_MODE_STATIC_GRADIENT) {
 458:quantum/rgblight.c ****                 // static gradient
 459:quantum/rgblight.c ****                 uint8_t delta     = rgblight_config.mode - rgblight_status.base_mode;
 460:quantum/rgblight.c ****                 bool    direction = (delta % 2) == 0;
 461:quantum/rgblight.c **** #    ifdef __AVR__
 462:quantum/rgblight.c ****                 // probably due to how pgm_read_word is defined for ARM, but the ARM compiler reall
 463:quantum/rgblight.c ****                 uint8_t range = pgm_read_word(&RGBLED_GRADIENT_RANGES[delta / 2]);
 464:quantum/rgblight.c **** #    else
 465:quantum/rgblight.c ****                 uint8_t range = RGBLED_GRADIENT_RANGES[delta / 2];
 466:quantum/rgblight.c **** #    endif
 467:quantum/rgblight.c ****                 for (uint8_t i = 0; i < effect_num_leds; i++) {
 468:quantum/rgblight.c ****                     uint8_t _hue = ((uint16_t)i * (uint16_t)range) / effect_num_leds;
 469:quantum/rgblight.c ****                     if (direction) {
 470:quantum/rgblight.c ****                         _hue = hue + _hue;
 471:quantum/rgblight.c ****                     } else {
 472:quantum/rgblight.c ****                         _hue = hue - _hue;
 473:quantum/rgblight.c ****                     }
 474:quantum/rgblight.c ****                     dprintf("rgblight rainbow set hsv: %d,%d,%d,%u\n", i, _hue, direction, range);
 475:quantum/rgblight.c ****                     sethsv(_hue, sat, val, (LED_TYPE *)&led[i + effect_start_pos]);
 476:quantum/rgblight.c ****                 }
 477:quantum/rgblight.c ****                 rgblight_set();
 478:quantum/rgblight.c ****             }
 479:quantum/rgblight.c **** #endif
 480:quantum/rgblight.c ****         }
 481:quantum/rgblight.c **** #ifdef RGBLIGHT_SPLIT
 482:quantum/rgblight.c ****         if (rgblight_config.hue != hue || rgblight_config.sat != sat || rgblight_config.val != val)
 483:quantum/rgblight.c ****             RGBLIGHT_SPLIT_SET_CHANGE_HSVS;
 484:quantum/rgblight.c ****         }
 485:quantum/rgblight.c **** #endif
 486:quantum/rgblight.c ****         rgblight_config.hue = hue;
 487:quantum/rgblight.c ****         rgblight_config.sat = sat;
 488:quantum/rgblight.c ****         rgblight_config.val = val;
 489:quantum/rgblight.c ****         if (write_to_eeprom) {
 490:quantum/rgblight.c ****             eeconfig_update_rgblight(rgblight_config.raw);
 491:quantum/rgblight.c ****             dprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.s
 492:quantum/rgblight.c ****         } else {
 493:quantum/rgblight.c ****             dprintf("rgblight set hsv [NOEEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config
 494:quantum/rgblight.c ****         }
 495:quantum/rgblight.c ****     }
 496:quantum/rgblight.c **** }
 497:quantum/rgblight.c **** 
 498:quantum/rgblight.c **** void rgblight_sethsv(uint8_t hue, uint8_t sat, uint8_t val) { rgblight_sethsv_eeprom_helper(hue, sa
 499:quantum/rgblight.c **** 
 500:quantum/rgblight.c **** void rgblight_sethsv_noeeprom(uint8_t hue, uint8_t sat, uint8_t val) { rgblight_sethsv_eeprom_helpe
 501:quantum/rgblight.c **** 
 502:quantum/rgblight.c **** uint8_t rgblight_get_hue(void) { return rgblight_config.hue; }
 503:quantum/rgblight.c **** 
 504:quantum/rgblight.c **** uint8_t rgblight_get_sat(void) { return rgblight_config.sat; }
 505:quantum/rgblight.c **** 
 506:quantum/rgblight.c **** uint8_t rgblight_get_val(void) { return rgblight_config.val; }
 507:quantum/rgblight.c **** 
 508:quantum/rgblight.c **** void rgblight_setrgb(uint8_t r, uint8_t g, uint8_t b) {
 509:quantum/rgblight.c ****     if (!rgblight_config.enable) {
 510:quantum/rgblight.c ****         return;
 511:quantum/rgblight.c ****     }
 512:quantum/rgblight.c **** 
 513:quantum/rgblight.c ****     for (uint8_t i = effect_start_pos; i < effect_end_pos; i++) {
 514:quantum/rgblight.c ****         led[i].r = r;
 515:quantum/rgblight.c ****         led[i].g = g;
 516:quantum/rgblight.c ****         led[i].b = b;
 517:quantum/rgblight.c ****     }
 518:quantum/rgblight.c ****     rgblight_set();
 519:quantum/rgblight.c **** }
 520:quantum/rgblight.c **** 
 521:quantum/rgblight.c **** void rgblight_setrgb_at(uint8_t r, uint8_t g, uint8_t b, uint8_t index) {
 522:quantum/rgblight.c ****     if (!rgblight_config.enable || index >= RGBLED_NUM) {
 523:quantum/rgblight.c ****         return;
 524:quantum/rgblight.c ****     }
 525:quantum/rgblight.c **** 
 526:quantum/rgblight.c ****     led[index].r = r;
 527:quantum/rgblight.c ****     led[index].g = g;
 528:quantum/rgblight.c ****     led[index].b = b;
 529:quantum/rgblight.c ****     rgblight_set();
 530:quantum/rgblight.c **** }
 531:quantum/rgblight.c **** 
 532:quantum/rgblight.c **** void rgblight_sethsv_at(uint8_t hue, uint8_t sat, uint8_t val, uint8_t index) {
 533:quantum/rgblight.c ****     if (!rgblight_config.enable) {
 534:quantum/rgblight.c ****         return;
 535:quantum/rgblight.c ****     }
 536:quantum/rgblight.c **** 
 537:quantum/rgblight.c ****     LED_TYPE tmp_led;
 538:quantum/rgblight.c ****     sethsv(hue, sat, val, &tmp_led);
 539:quantum/rgblight.c ****     rgblight_setrgb_at(tmp_led.r, tmp_led.g, tmp_led.b, index);
 540:quantum/rgblight.c **** }
 541:quantum/rgblight.c **** 
 542:quantum/rgblight.c **** #if defined(RGBLIGHT_EFFECT_BREATHING) || defined(RGBLIGHT_EFFECT_RAINBOW_MOOD) || defined(RGBLIGHT
 543:quantum/rgblight.c **** 
 544:quantum/rgblight.c **** static uint8_t get_interval_time(const uint8_t *default_interval_address, uint8_t velocikey_min, ui
 545:quantum/rgblight.c ****     return
 546:quantum/rgblight.c **** #    ifdef VELOCIKEY_ENABLE
 547:quantum/rgblight.c ****         velocikey_enabled() ? velocikey_match_speed(velocikey_min, velocikey_max) :
 548:quantum/rgblight.c **** #    endif
 549:quantum/rgblight.c ****                             pgm_read_byte(default_interval_address);
 550:quantum/rgblight.c **** }
 551:quantum/rgblight.c **** 
 552:quantum/rgblight.c **** #endif
 553:quantum/rgblight.c **** 
 554:quantum/rgblight.c **** void rgblight_setrgb_range(uint8_t r, uint8_t g, uint8_t b, uint8_t start, uint8_t end) {
 555:quantum/rgblight.c ****     if (!rgblight_config.enable || start < 0 || start >= end || end > RGBLED_NUM) {
 556:quantum/rgblight.c ****         return;
 557:quantum/rgblight.c ****     }
 558:quantum/rgblight.c **** 
 559:quantum/rgblight.c ****     for (uint8_t i = start; i < end; i++) {
 560:quantum/rgblight.c ****         led[i].r = r;
 561:quantum/rgblight.c ****         led[i].g = g;
 562:quantum/rgblight.c ****         led[i].b = b;
 563:quantum/rgblight.c ****     }
 564:quantum/rgblight.c ****     rgblight_set();
 565:quantum/rgblight.c ****     wait_ms(1);
 566:quantum/rgblight.c **** }
 567:quantum/rgblight.c **** 
 568:quantum/rgblight.c **** void rgblight_sethsv_range(uint8_t hue, uint8_t sat, uint8_t val, uint8_t start, uint8_t end) {
 569:quantum/rgblight.c ****     if (!rgblight_config.enable) {
 570:quantum/rgblight.c ****         return;
 571:quantum/rgblight.c ****     }
 572:quantum/rgblight.c **** 
 573:quantum/rgblight.c ****     LED_TYPE tmp_led;
 574:quantum/rgblight.c ****     sethsv(hue, sat, val, &tmp_led);
 575:quantum/rgblight.c ****     rgblight_setrgb_range(tmp_led.r, tmp_led.g, tmp_led.b, start, end);
 576:quantum/rgblight.c **** }
 577:quantum/rgblight.c **** 
 578:quantum/rgblight.c **** #ifndef RGBLIGHT_SPLIT
 579:quantum/rgblight.c **** void rgblight_setrgb_master(uint8_t r, uint8_t g, uint8_t b) { rgblight_setrgb_range(r, g, b, 0, (u
 580:quantum/rgblight.c **** 
 581:quantum/rgblight.c **** void rgblight_setrgb_slave(uint8_t r, uint8_t g, uint8_t b) { rgblight_setrgb_range(r, g, b, (uint8
 582:quantum/rgblight.c **** 
 583:quantum/rgblight.c **** void rgblight_sethsv_master(uint8_t hue, uint8_t sat, uint8_t val) { rgblight_sethsv_range(hue, sat
 584:quantum/rgblight.c **** 
 585:quantum/rgblight.c **** void rgblight_sethsv_slave(uint8_t hue, uint8_t sat, uint8_t val) { rgblight_sethsv_range(hue, sat,
 586:quantum/rgblight.c **** #endif  // ifndef RGBLIGHT_SPLIT
 587:quantum/rgblight.c **** 
 588:quantum/rgblight.c **** #ifndef RGBLIGHT_CUSTOM_DRIVER
 589:quantum/rgblight.c **** void rgblight_set(void) {
 590:quantum/rgblight.c ****     LED_TYPE *start_led;
 591:quantum/rgblight.c ****     uint16_t  num_leds = clipping_num_leds;
 592:quantum/rgblight.c **** 
 593:quantum/rgblight.c ****     if (!rgblight_config.enable) {
 594:quantum/rgblight.c ****         for (uint8_t i = effect_start_pos; i < effect_end_pos; i++) {
 595:quantum/rgblight.c ****             led[i].r = 0;
 596:quantum/rgblight.c ****             led[i].g = 0;
 597:quantum/rgblight.c ****             led[i].b = 0;
 598:quantum/rgblight.c ****         }
 599:quantum/rgblight.c ****     }
 600:quantum/rgblight.c **** #    ifdef RGBLIGHT_LED_MAP
 601:quantum/rgblight.c ****     LED_TYPE led0[RGBLED_NUM];
 602:quantum/rgblight.c ****     for (uint8_t i = 0; i < RGBLED_NUM; i++) {
 603:quantum/rgblight.c ****         led0[i] = led[pgm_read_byte(&led_map[i])];
 604:quantum/rgblight.c ****     }
 605:quantum/rgblight.c ****     start_led = led0 + clipping_start_pos;
 606:quantum/rgblight.c **** #    else
 607:quantum/rgblight.c ****     start_led = led + clipping_start_pos;
 608:quantum/rgblight.c **** #    endif
 609:quantum/rgblight.c **** #    ifdef RGBW
 610:quantum/rgblight.c ****     ws2812_setleds_rgbw(start_led, num_leds);
 611:quantum/rgblight.c **** #    else
 612:quantum/rgblight.c ****     ws2812_setleds(start_led, num_leds);
 613:quantum/rgblight.c **** #    endif
 614:quantum/rgblight.c **** }
 615:quantum/rgblight.c **** #endif
 616:quantum/rgblight.c **** 
 617:quantum/rgblight.c **** #ifdef RGBLIGHT_SPLIT
 618:quantum/rgblight.c **** /* for split keyboard master side */
 619:quantum/rgblight.c **** uint8_t rgblight_get_change_flags(void) { return rgblight_status.change_flags; }
 620:quantum/rgblight.c **** 
 621:quantum/rgblight.c **** void rgblight_clear_change_flags(void) { rgblight_status.change_flags = 0; }
 622:quantum/rgblight.c **** 
 623:quantum/rgblight.c **** void rgblight_get_syncinfo(rgblight_syncinfo_t *syncinfo) {
 624:quantum/rgblight.c ****     syncinfo->config = rgblight_config;
 625:quantum/rgblight.c ****     syncinfo->status = rgblight_status;
 626:quantum/rgblight.c **** }
 627:quantum/rgblight.c **** 
 628:quantum/rgblight.c **** /* for split keyboard slave side */
 629:quantum/rgblight.c **** void rgblight_update_sync(rgblight_syncinfo_t *syncinfo, bool write_to_eeprom) {
 630:quantum/rgblight.c ****     if (syncinfo->status.change_flags & RGBLIGHT_STATUS_CHANGE_MODE) {
 631:quantum/rgblight.c ****         if (syncinfo->config.enable) {
 632:quantum/rgblight.c ****             rgblight_config.enable = 1;  // == rgblight_enable_noeeprom();
 633:quantum/rgblight.c ****             rgblight_mode_eeprom_helper(syncinfo->config.mode, write_to_eeprom);
 634:quantum/rgblight.c ****         } else {
 635:quantum/rgblight.c ****             rgblight_disable_noeeprom();
 636:quantum/rgblight.c ****         }
 637:quantum/rgblight.c ****     }
 638:quantum/rgblight.c ****     if (syncinfo->status.change_flags & RGBLIGHT_STATUS_CHANGE_HSVS) {
 639:quantum/rgblight.c ****         rgblight_sethsv_eeprom_helper(syncinfo->config.hue, syncinfo->config.sat, syncinfo->config.
 640:quantum/rgblight.c ****         // rgblight_config.speed = config->speed; // NEED???
 641:quantum/rgblight.c ****     }
 642:quantum/rgblight.c **** #    ifdef RGBLIGHT_USE_TIMER
 643:quantum/rgblight.c ****     if (syncinfo->status.change_flags & RGBLIGHT_STATUS_CHANGE_TIMER) {
 644:quantum/rgblight.c ****         if (syncinfo->status.timer_enabled) {
 645:quantum/rgblight.c ****             rgblight_timer_enable();
 646:quantum/rgblight.c ****         } else {
 647:quantum/rgblight.c ****             rgblight_timer_disable();
 648:quantum/rgblight.c ****         }
 649:quantum/rgblight.c ****     }
 650:quantum/rgblight.c **** #        ifndef RGBLIGHT_SPLIT_NO_ANIMATION_SYNC
 651:quantum/rgblight.c ****     if (syncinfo->status.change_flags & RGBLIGHT_STATUS_ANIMATION_TICK) {
 652:quantum/rgblight.c ****         animation_status.restart = true;
 653:quantum/rgblight.c ****     }
 654:quantum/rgblight.c **** #        endif /* RGBLIGHT_SPLIT_NO_ANIMATION_SYNC */
 655:quantum/rgblight.c **** #    endif     /* RGBLIGHT_USE_TIMER */
 656:quantum/rgblight.c **** }
 657:quantum/rgblight.c **** #endif /* RGBLIGHT_SPLIT */
 658:quantum/rgblight.c **** 
 659:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 660:quantum/rgblight.c **** 
 661:quantum/rgblight.c **** typedef void (*effect_func_t)(animation_status_t *anim);
 662:quantum/rgblight.c **** 
 663:quantum/rgblight.c **** // Animation timer -- use system timer (AVR Timer0)
 664:quantum/rgblight.c **** void rgblight_timer_init(void) {
 665:quantum/rgblight.c ****     // OLD!!!! Animation timer -- AVR Timer3
 666:quantum/rgblight.c ****     // static uint8_t rgblight_timer_is_init = 0;
 667:quantum/rgblight.c ****     // if (rgblight_timer_is_init) {
 668:quantum/rgblight.c ****     //   return;
 669:quantum/rgblight.c ****     // }
 670:quantum/rgblight.c ****     // rgblight_timer_is_init = 1;
 671:quantum/rgblight.c ****     // /* Timer 3 setup */
 672:quantum/rgblight.c ****     // TCCR3B = _BV(WGM32) // CTC mode OCR3A as TOP
 673:quantum/rgblight.c ****     //       | _BV(CS30); // Clock selelct: clk/1
 674:quantum/rgblight.c ****     // /* Set TOP value */
 675:quantum/rgblight.c ****     // uint8_t sreg = SREG;
 676:quantum/rgblight.c ****     // cli();
 677:quantum/rgblight.c ****     // OCR3AH = (RGBLED_TIMER_TOP >> 8) & 0xff;
 678:quantum/rgblight.c ****     // OCR3AL = RGBLED_TIMER_TOP & 0xff;
 679:quantum/rgblight.c ****     // SREG = sreg;
 680:quantum/rgblight.c **** 
 681:quantum/rgblight.c ****     rgblight_status.timer_enabled = false;
 682:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 683:quantum/rgblight.c **** }
 684:quantum/rgblight.c **** void rgblight_timer_enable(void) {
 685:quantum/rgblight.c ****     if (!is_static_effect(rgblight_config.mode)) {
 686:quantum/rgblight.c ****         rgblight_status.timer_enabled = true;
 687:quantum/rgblight.c ****     }
 688:quantum/rgblight.c ****     animation_status.last_timer = timer_read();
 689:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 690:quantum/rgblight.c ****     dprintf("rgblight timer enabled.\n");
 691:quantum/rgblight.c **** }
 692:quantum/rgblight.c **** void rgblight_timer_disable(void) {
 693:quantum/rgblight.c ****     rgblight_status.timer_enabled = false;
 694:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 695:quantum/rgblight.c ****     dprintf("rgblight timer disable.\n");
 696:quantum/rgblight.c **** }
 697:quantum/rgblight.c **** void rgblight_timer_toggle(void) {
 698:quantum/rgblight.c ****     dprintf("rgblight timer toggle.\n");
 699:quantum/rgblight.c ****     if (rgblight_status.timer_enabled) {
 700:quantum/rgblight.c ****         rgblight_timer_disable();
 701:quantum/rgblight.c ****     } else {
 702:quantum/rgblight.c ****         rgblight_timer_enable();
 703:quantum/rgblight.c ****     }
 704:quantum/rgblight.c **** }
 705:quantum/rgblight.c **** 
 706:quantum/rgblight.c **** void rgblight_show_solid_color(uint8_t r, uint8_t g, uint8_t b) {
 707:quantum/rgblight.c ****     rgblight_enable();
 708:quantum/rgblight.c ****     rgblight_mode(RGBLIGHT_MODE_STATIC_LIGHT);
 709:quantum/rgblight.c ****     rgblight_setrgb(r, g, b);
 710:quantum/rgblight.c **** }
 711:quantum/rgblight.c **** 
 712:quantum/rgblight.c **** static void rgblight_effect_dummy(animation_status_t *anim) {
  15               		.loc 1 712 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	/* epilogue start */
 713:quantum/rgblight.c ****     // do nothing
 714:quantum/rgblight.c ****     /********
 715:quantum/rgblight.c ****     dprintf("rgblight_task() what happened?\n");
 716:quantum/rgblight.c ****     dprintf("is_static_effect %d\n", is_static_effect(rgblight_config.mode));
 717:quantum/rgblight.c ****     dprintf("mode = %d, base_mode = %d, timer_enabled %d, ",
 718:quantum/rgblight.c ****             rgblight_config.mode, rgblight_status.base_mode,
 719:quantum/rgblight.c ****             rgblight_status.timer_enabled);
 720:quantum/rgblight.c ****     dprintf("last_timer = %d\n",anim->last_timer);
 721:quantum/rgblight.c ****     **/
 722:quantum/rgblight.c **** }
  23               		.loc 1 722 0
  24 0000 0895      		ret
  25               		.cfi_endproc
  26               	.LFE156:
  28               		.section	.text.rgblight_set_clipping_range,"ax",@progbits
  29               	.global	rgblight_set_clipping_range
  31               	rgblight_set_clipping_range:
  32               	.LFB82:
 104:quantum/rgblight.c ****     clipping_start_pos = start_pos;
  33               		.loc 1 104 0
  34               		.cfi_startproc
  35               	.LVL1:
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
 105:quantum/rgblight.c ****     clipping_num_leds  = num_leds;
  40               		.loc 1 105 0
  41 0000 8093 0000 		sts clipping_start_pos,r24
 106:quantum/rgblight.c **** }
  42               		.loc 1 106 0
  43 0004 6093 0000 		sts clipping_num_leds,r22
  44               	/* epilogue start */
 107:quantum/rgblight.c **** 
  45               		.loc 1 107 0
  46 0008 0895      		ret
  47               		.cfi_endproc
  48               	.LFE82:
  50               		.section	.text.rgblight_set_effect_range,"ax",@progbits
  51               	.global	rgblight_set_effect_range
  53               	rgblight_set_effect_range:
  54               	.LFB83:
 109:quantum/rgblight.c ****     if (start_pos >= RGBLED_NUM) return;
  55               		.loc 1 109 0
  56               		.cfi_startproc
  57               	.LVL2:
  58               	/* prologue: function */
  59               	/* frame size = 0 */
  60               	/* stack size = 0 */
  61               	.L__stack_usage = 0
 110:quantum/rgblight.c ****     if (start_pos + num_leds > RGBLED_NUM) return;
  62               		.loc 1 110 0
  63 0000 8D31      		cpi r24,lo8(29)
  64 0002 00F4      		brsh .L3
 111:quantum/rgblight.c ****     effect_start_pos = start_pos;
  65               		.loc 1 111 0
  66 0004 482F      		mov r20,r24
  67 0006 460F      		add r20,r22
  68 0008 5527      		clr r21
  69 000a 551F      		rol r21
  70 000c 4E31      		cpi r20,30
  71 000e 5105      		cpc r21,__zero_reg__
  72 0010 04F4      		brge .L3
 112:quantum/rgblight.c ****     effect_end_pos   = start_pos + num_leds;
  73               		.loc 1 112 0
  74 0012 8093 0000 		sts effect_start_pos,r24
 113:quantum/rgblight.c ****     effect_num_leds  = num_leds;
  75               		.loc 1 113 0
  76 0016 860F      		add r24,r22
  77               	.LVL3:
  78 0018 8093 0000 		sts effect_end_pos,r24
 114:quantum/rgblight.c **** }
  79               		.loc 1 114 0
  80 001c 6093 0000 		sts effect_num_leds,r22
  81               	.LVL4:
  82               	.L3:
  83               	/* epilogue start */
 115:quantum/rgblight.c **** 
  84               		.loc 1 115 0
  85 0020 0895      		ret
  86               		.cfi_endproc
  87               	.LFE83:
  89               		.section	.text.sethsv_raw,"ax",@progbits
  90               	.global	sethsv_raw
  92               	sethsv_raw:
  93               	.LFB84:
 117:quantum/rgblight.c ****     HSV hsv = {hue, sat, val};
  94               		.loc 1 117 0
  95               		.cfi_startproc
  96               	.LVL5:
  97 0000 CF93      		push r28
  98               	.LCFI0:
  99               		.cfi_def_cfa_offset 3
 100               		.cfi_offset 28, -2
 101 0002 DF93      		push r29
 102               	.LCFI1:
 103               		.cfi_def_cfa_offset 4
 104               		.cfi_offset 29, -3
 105               	/* prologue: function */
 106               	/* frame size = 0 */
 107               	/* stack size = 2 */
 108               	.L__stack_usage = 2
 109 0004 762F      		mov r23,r22
 110 0006 E901      		movw r28,r18
 119:quantum/rgblight.c ****     setrgb(rgb.r, rgb.g, rgb.b, led1);
 111               		.loc 1 119 0
 112 0008 682F      		mov r22,r24
 113               	.LVL6:
 114 000a 842F      		mov r24,r20
 115               	.LVL7:
 116 000c 0E94 0000 		call hsv_to_rgb
 117               	.LVL8:
 118               	.LBB20:
 119               	.LBB21:
 126:quantum/rgblight.c ****     (*led1).g = g;
 120               		.loc 1 126 0
 121 0010 7983      		std Y+1,r23
 127:quantum/rgblight.c ****     (*led1).b = b;
 122               		.loc 1 127 0
 123 0012 6883      		st Y,r22
 128:quantum/rgblight.c **** }
 124               		.loc 1 128 0
 125 0014 8A83      		std Y+2,r24
 126               	.LVL9:
 127               	/* epilogue start */
 128               	.LBE21:
 129               	.LBE20:
 121:quantum/rgblight.c **** 
 130               		.loc 1 121 0
 131 0016 DF91      		pop r29
 132 0018 CF91      		pop r28
 133               	.LVL10:
 134 001a 0895      		ret
 135               		.cfi_endproc
 136               	.LFE84:
 138               		.section	.text.sethsv,"ax",@progbits
 139               	.global	sethsv
 141               	sethsv:
 142               	.LFB85:
 123:quantum/rgblight.c **** 
 143               		.loc 1 123 0
 144               		.cfi_startproc
 145               	.LVL11:
 146               	/* prologue: function */
 147               	/* frame size = 0 */
 148               	/* stack size = 0 */
 149               	.L__stack_usage = 0
 123:quantum/rgblight.c **** 
 150               		.loc 1 123 0
 151 0000 4937      		cpi r20,lo8(121)
 152 0002 00F0      		brlo .L7
 153 0004 48E7      		ldi r20,lo8(120)
 154               	.LVL12:
 155               	.L7:
 156 0006 0C94 0000 		jmp sethsv_raw
 157               	.LVL13:
 158               		.cfi_endproc
 159               	.LFE85:
 161               		.section	.text.setrgb,"ax",@progbits
 162               	.global	setrgb
 164               	setrgb:
 165               	.LFB86:
 125:quantum/rgblight.c ****     (*led1).r = r;
 166               		.loc 1 125 0
 167               		.cfi_startproc
 168               	.LVL14:
 169               	/* prologue: function */
 170               	/* frame size = 0 */
 171               	/* stack size = 0 */
 172               	.L__stack_usage = 0
 173 0000 F901      		movw r30,r18
 126:quantum/rgblight.c ****     (*led1).g = g;
 174               		.loc 1 126 0
 175 0002 8183      		std Z+1,r24
 127:quantum/rgblight.c ****     (*led1).b = b;
 176               		.loc 1 127 0
 177 0004 6083      		st Z,r22
 128:quantum/rgblight.c **** }
 178               		.loc 1 128 0
 179 0006 4283      		std Z+2,r20
 180               	/* epilogue start */
 129:quantum/rgblight.c **** 
 181               		.loc 1 129 0
 182 0008 0895      		ret
 183               		.cfi_endproc
 184               	.LFE86:
 186               		.section	.text.rgblight_check_config,"ax",@progbits
 187               	.global	rgblight_check_config
 189               	rgblight_check_config:
 190               	.LFB87:
 131:quantum/rgblight.c ****     /* Add some out of bound checks for RGB light config */
 191               		.loc 1 131 0
 192               		.cfi_startproc
 193               	/* prologue: function */
 194               	/* frame size = 0 */
 195               	/* stack size = 0 */
 196               	.L__stack_usage = 0
 134:quantum/rgblight.c ****         rgblight_config.mode = RGBLIGHT_MODE_STATIC_LIGHT;
 197               		.loc 1 134 0
 198 0000 8091 0000 		lds r24,rgblight_config
 199 0004 982F      		mov r25,r24
 200 0006 9E7F      		andi r25,lo8(-2)
 201 0008 01F4      		brne .L10
 135:quantum/rgblight.c ****     } else if (rgblight_config.mode > RGBLIGHT_MODES) {
 202               		.loc 1 135 0
 203 000a 8170      		andi r24,lo8(1)
 204 000c 8260      		ori r24,lo8(2)
 205               	.L13:
 137:quantum/rgblight.c ****     }
 206               		.loc 1 137 0
 207 000e 8093 0000 		sts rgblight_config,r24
 208               	.L11:
 140:quantum/rgblight.c ****         rgblight_config.val = RGBLIGHT_LIMIT_VAL;
 209               		.loc 1 140 0
 210 0012 8091 0000 		lds r24,rgblight_config+3
 211 0016 8937      		cpi r24,lo8(121)
 212 0018 00F0      		brlo .L9
 141:quantum/rgblight.c ****     }
 213               		.loc 1 141 0
 214 001a 88E7      		ldi r24,lo8(120)
 215 001c 8093 0000 		sts rgblight_config+3,r24
 216               	.L9:
 217               	/* epilogue start */
 143:quantum/rgblight.c **** 
 218               		.loc 1 143 0
 219 0020 0895      		ret
 220               	.L10:
 136:quantum/rgblight.c ****         rgblight_config.mode = RGBLIGHT_MODES;
 221               		.loc 1 136 0
 222 0022 8A34      		cpi r24,lo8(74)
 223 0024 00F0      		brlo .L11
 137:quantum/rgblight.c ****     }
 224               		.loc 1 137 0
 225 0026 8170      		andi r24,lo8(1)
 226 0028 8864      		ori r24,lo8(72)
 227 002a 00C0      		rjmp .L13
 228               		.cfi_endproc
 229               	.LFE87:
 231               		.section	.text.eeconfig_read_rgblight,"ax",@progbits
 232               	.global	eeconfig_read_rgblight
 234               	eeconfig_read_rgblight:
 235               	.LFB88:
 145:quantum/rgblight.c **** #if defined(__AVR__) || defined(STM32_EEPROM_ENABLE) || defined(PROTOCOL_ARM_ATSAM) || defined(EEPR
 236               		.loc 1 145 0
 237               		.cfi_startproc
 238               	/* prologue: function */
 239               	/* frame size = 0 */
 240               	/* stack size = 0 */
 241               	.L__stack_usage = 0
 147:quantum/rgblight.c **** #else
 242               		.loc 1 147 0
 243 0000 88E0      		ldi r24,lo8(8)
 244 0002 90E0      		ldi r25,0
 245 0004 0C94 0000 		jmp eeprom_read_dword
 246               	.LVL15:
 247               		.cfi_endproc
 248               	.LFE88:
 250               		.section	.text.eeconfig_update_rgblight,"ax",@progbits
 251               	.global	eeconfig_update_rgblight
 253               	eeconfig_update_rgblight:
 254               	.LFB89:
 153:quantum/rgblight.c **** #if defined(__AVR__) || defined(STM32_EEPROM_ENABLE) || defined(PROTOCOL_ARM_ATSAM) || defined(EEPR
 255               		.loc 1 153 0
 256               		.cfi_startproc
 257               	.LVL16:
 258 0000 CF92      		push r12
 259               	.LCFI2:
 260               		.cfi_def_cfa_offset 3
 261               		.cfi_offset 12, -2
 262 0002 DF92      		push r13
 263               	.LCFI3:
 264               		.cfi_def_cfa_offset 4
 265               		.cfi_offset 13, -3
 266 0004 EF92      		push r14
 267               	.LCFI4:
 268               		.cfi_def_cfa_offset 5
 269               		.cfi_offset 14, -4
 270 0006 FF92      		push r15
 271               	.LCFI5:
 272               		.cfi_def_cfa_offset 6
 273               		.cfi_offset 15, -5
 274               	/* prologue: function */
 275               	/* frame size = 0 */
 276               	/* stack size = 4 */
 277               	.L__stack_usage = 4
 278 0008 6B01      		movw r12,r22
 279 000a 7C01      		movw r14,r24
 155:quantum/rgblight.c ****     eeprom_update_dword(EECONFIG_RGBLIGHT, val);
 280               		.loc 1 155 0
 281 000c 0E94 0000 		call rgblight_check_config
 282               	.LVL17:
 156:quantum/rgblight.c **** #endif
 283               		.loc 1 156 0
 284 0010 B701      		movw r22,r14
 285 0012 A601      		movw r20,r12
 286 0014 88E0      		ldi r24,lo8(8)
 287 0016 90E0      		ldi r25,0
 288               	/* epilogue start */
 158:quantum/rgblight.c **** 
 289               		.loc 1 158 0
 290 0018 FF90      		pop r15
 291 001a EF90      		pop r14
 292 001c DF90      		pop r13
 293 001e CF90      		pop r12
 156:quantum/rgblight.c **** #endif
 294               		.loc 1 156 0
 295 0020 0C94 0000 		jmp eeprom_update_dword
 296               	.LVL18:
 297               		.cfi_endproc
 298               	.LFE89:
 300               		.section	.text.eeconfig_update_rgblight_default,"ax",@progbits
 301               	.global	eeconfig_update_rgblight_default
 303               	eeconfig_update_rgblight_default:
 304               	.LFB90:
 160:quantum/rgblight.c ****     rgblight_config.enable = 1;
 305               		.loc 1 160 0
 306               		.cfi_startproc
 307               	/* prologue: function */
 308               	/* frame size = 0 */
 309               	/* stack size = 0 */
 310               	.L__stack_usage = 0
 161:quantum/rgblight.c ****     rgblight_config.mode   = RGBLIGHT_MODE_STATIC_LIGHT;
 311               		.loc 1 161 0
 312 0000 E0E0      		ldi r30,lo8(rgblight_config)
 313 0002 F0E0      		ldi r31,hi8(rgblight_config)
 162:quantum/rgblight.c ****     rgblight_config.hue    = 0;
 314               		.loc 1 162 0
 315 0004 83E0      		ldi r24,lo8(3)
 316 0006 8083      		st Z,r24
 163:quantum/rgblight.c ****     rgblight_config.sat    = UINT8_MAX;
 317               		.loc 1 163 0
 318 0008 1182      		std Z+1,__zero_reg__
 164:quantum/rgblight.c ****     rgblight_config.val    = RGBLIGHT_LIMIT_VAL;
 319               		.loc 1 164 0
 320 000a 8FEF      		ldi r24,lo8(-1)
 321 000c 8283      		std Z+2,r24
 165:quantum/rgblight.c ****     rgblight_config.speed  = 0;
 322               		.loc 1 165 0
 323 000e 88E7      		ldi r24,lo8(120)
 324 0010 8383      		std Z+3,r24
 166:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_MODEHSVS;
 325               		.loc 1 166 0
 326 0012 1482      		std Z+4,__zero_reg__
 168:quantum/rgblight.c **** }
 327               		.loc 1 168 0
 328 0014 6081      		ld r22,Z
 329 0016 7181      		ldd r23,Z+1
 330 0018 8281      		ldd r24,Z+2
 331 001a 9381      		ldd r25,Z+3
 332 001c 0C94 0000 		jmp eeconfig_update_rgblight
 333               	.LVL19:
 334               		.cfi_endproc
 335               	.LFE90:
 337               		.section	.text.eeconfig_debug_rgblight,"ax",@progbits
 338               	.global	eeconfig_debug_rgblight
 340               	eeconfig_debug_rgblight:
 341               	.LFB91:
 171:quantum/rgblight.c ****     dprintf("rgblight_config EEPROM:\n");
 342               		.loc 1 171 0
 343               		.cfi_startproc
 344               	/* prologue: function */
 345               	/* frame size = 0 */
 346               	/* stack size = 0 */
 347               	.L__stack_usage = 0
 348               	/* epilogue start */
 179:quantum/rgblight.c **** 
 349               		.loc 1 179 0
 350 0000 0895      		ret
 351               		.cfi_endproc
 352               	.LFE91:
 354               		.section	.text.rgblight_read_dword,"ax",@progbits
 355               	.global	rgblight_read_dword
 357               	rgblight_read_dword:
 358               	.LFB93:
 219:quantum/rgblight.c **** 
 359               		.loc 1 219 0
 360               		.cfi_startproc
 361               	/* prologue: function */
 362               	/* frame size = 0 */
 363               	/* stack size = 0 */
 364               	.L__stack_usage = 0
 219:quantum/rgblight.c **** 
 365               		.loc 1 219 0
 366 0000 6091 0000 		lds r22,rgblight_config
 367 0004 7091 0000 		lds r23,rgblight_config+1
 368 0008 8091 0000 		lds r24,rgblight_config+2
 369 000c 9091 0000 		lds r25,rgblight_config+3
 370               	/* epilogue start */
 371 0010 0895      		ret
 372               		.cfi_endproc
 373               	.LFE93:
 375               		.section	.text.rgblight_get_mode,"ax",@progbits
 376               	.global	rgblight_get_mode
 378               	rgblight_get_mode:
 379               	.LFB103:
 270:quantum/rgblight.c ****     if (!rgblight_config.enable) {
 380               		.loc 1 270 0
 381               		.cfi_startproc
 382               	/* prologue: function */
 383               	/* frame size = 0 */
 384               	/* stack size = 0 */
 385               	.L__stack_usage = 0
 271:quantum/rgblight.c ****         return false;
 386               		.loc 1 271 0
 387 0000 8091 0000 		lds r24,rgblight_config
 388 0004 80FF      		sbrs r24,0
 389 0006 00C0      		rjmp .L21
 275:quantum/rgblight.c **** }
 390               		.loc 1 275 0
 391 0008 8695      		lsr r24
 392 000a 0895      		ret
 393               	.L21:
 272:quantum/rgblight.c ****     }
 394               		.loc 1 272 0
 395 000c 80E0      		ldi r24,0
 396               	/* epilogue start */
 276:quantum/rgblight.c **** 
 397               		.loc 1 276 0
 398 000e 0895      		ret
 399               		.cfi_endproc
 400               	.LFE103:
 402               		.section	.text.rgblight_increase_speed,"ax",@progbits
 403               	.global	rgblight_increase_speed
 405               	rgblight_increase_speed:
 406               	.LFB131:
 406:quantum/rgblight.c ****     if (rgblight_config.speed < 3) rgblight_config.speed++;
 407               		.loc 1 406 0
 408               		.cfi_startproc
 409               	/* prologue: function */
 410               	/* frame size = 0 */
 411               	/* stack size = 0 */
 412               	.L__stack_usage = 0
 407:quantum/rgblight.c ****     // RGBLIGHT_SPLIT_SET_CHANGE_HSVS; // NEED?
 413               		.loc 1 407 0
 414 0000 8091 0000 		lds r24,rgblight_config+4
 415 0004 8330      		cpi r24,lo8(3)
 416 0006 00F4      		brsh .L23
 407:quantum/rgblight.c ****     // RGBLIGHT_SPLIT_SET_CHANGE_HSVS; // NEED?
 417               		.loc 1 407 0 is_stmt 0 discriminator 1
 418 0008 8F5F      		subi r24,lo8(-(1))
 419 000a 8093 0000 		sts rgblight_config+4,r24
 420               	.L23:
 409:quantum/rgblight.c **** }
 421               		.loc 1 409 0 is_stmt 1
 422 000e 6091 0000 		lds r22,rgblight_config
 423 0012 7091 0000 		lds r23,rgblight_config+1
 424 0016 8091 0000 		lds r24,rgblight_config+2
 425 001a 9091 0000 		lds r25,rgblight_config+3
 426 001e 0C94 0000 		jmp eeconfig_update_rgblight
 427               	.LVL20:
 428               		.cfi_endproc
 429               	.LFE131:
 431               		.section	.text.rgblight_decrease_speed,"ax",@progbits
 432               	.global	rgblight_decrease_speed
 434               	rgblight_decrease_speed:
 435               	.LFB132:
 412:quantum/rgblight.c ****     if (rgblight_config.speed > 0) rgblight_config.speed--;
 436               		.loc 1 412 0
 437               		.cfi_startproc
 438               	/* prologue: function */
 439               	/* frame size = 0 */
 440               	/* stack size = 0 */
 441               	.L__stack_usage = 0
 413:quantum/rgblight.c ****     // RGBLIGHT_SPLIT_SET_CHANGE_HSVS; // NEED??
 442               		.loc 1 413 0
 443 0000 8091 0000 		lds r24,rgblight_config+4
 444 0004 8823      		tst r24
 445 0006 01F0      		breq .L25
 413:quantum/rgblight.c ****     // RGBLIGHT_SPLIT_SET_CHANGE_HSVS; // NEED??
 446               		.loc 1 413 0 is_stmt 0 discriminator 1
 447 0008 8150      		subi r24,lo8(-(-1))
 448 000a 8093 0000 		sts rgblight_config+4,r24
 449               	.L25:
 415:quantum/rgblight.c **** }
 450               		.loc 1 415 0 is_stmt 1
 451 000e 6091 0000 		lds r22,rgblight_config
 452 0012 7091 0000 		lds r23,rgblight_config+1
 453 0016 8091 0000 		lds r24,rgblight_config+2
 454 001a 9091 0000 		lds r25,rgblight_config+3
 455 001e 0C94 0000 		jmp eeconfig_update_rgblight
 456               	.LVL21:
 457               		.cfi_endproc
 458               	.LFE132:
 460               		.section	.text.rgblight_get_hue,"ax",@progbits
 461               	.global	rgblight_get_hue
 463               	rgblight_get_hue:
 464               	.LFB137:
 502:quantum/rgblight.c **** 
 465               		.loc 1 502 0
 466               		.cfi_startproc
 467               	/* prologue: function */
 468               	/* frame size = 0 */
 469               	/* stack size = 0 */
 470               	.L__stack_usage = 0
 502:quantum/rgblight.c **** 
 471               		.loc 1 502 0
 472 0000 8091 0000 		lds r24,rgblight_config+1
 473               	/* epilogue start */
 474 0004 0895      		ret
 475               		.cfi_endproc
 476               	.LFE137:
 478               		.section	.text.rgblight_get_sat,"ax",@progbits
 479               	.global	rgblight_get_sat
 481               	rgblight_get_sat:
 482               	.LFB138:
 504:quantum/rgblight.c **** 
 483               		.loc 1 504 0
 484               		.cfi_startproc
 485               	/* prologue: function */
 486               	/* frame size = 0 */
 487               	/* stack size = 0 */
 488               	.L__stack_usage = 0
 504:quantum/rgblight.c **** 
 489               		.loc 1 504 0
 490 0000 8091 0000 		lds r24,rgblight_config+2
 491               	/* epilogue start */
 492 0004 0895      		ret
 493               		.cfi_endproc
 494               	.LFE138:
 496               		.section	.text.rgblight_get_val,"ax",@progbits
 497               	.global	rgblight_get_val
 499               	rgblight_get_val:
 500               	.LFB139:
 506:quantum/rgblight.c **** 
 501               		.loc 1 506 0
 502               		.cfi_startproc
 503               	/* prologue: function */
 504               	/* frame size = 0 */
 505               	/* stack size = 0 */
 506               	.L__stack_usage = 0
 506:quantum/rgblight.c **** 
 507               		.loc 1 506 0
 508 0000 8091 0000 		lds r24,rgblight_config+3
 509               	/* epilogue start */
 510 0004 0895      		ret
 511               		.cfi_endproc
 512               	.LFE139:
 514               		.section	.text.rgblight_set,"ax",@progbits
 515               	.global	rgblight_set
 517               	rgblight_set:
 518               	.LFB150:
 589:quantum/rgblight.c ****     LED_TYPE *start_led;
 519               		.loc 1 589 0
 520               		.cfi_startproc
 521               	/* prologue: function */
 522               	/* frame size = 0 */
 523               	/* stack size = 0 */
 524               	.L__stack_usage = 0
 591:quantum/rgblight.c **** 
 525               		.loc 1 591 0
 526 0000 6091 0000 		lds r22,clipping_num_leds
 527 0004 70E0      		ldi r23,0
 528               	.LVL22:
 593:quantum/rgblight.c ****         for (uint8_t i = effect_start_pos; i < effect_end_pos; i++) {
 529               		.loc 1 593 0
 530 0006 8091 0000 		lds r24,rgblight_config
 531 000a 80FF      		sbrs r24,0
 532 000c 00C0      		rjmp .L33
 533               	.L36:
 534               	.LVL23:
 607:quantum/rgblight.c **** #    endif
 535               		.loc 1 607 0
 536 000e 8091 0000 		lds r24,clipping_start_pos
 537 0012 23E0      		ldi r18,lo8(3)
 538 0014 829F      		mul r24,r18
 539 0016 C001      		movw r24,r0
 540 0018 1124      		clr __zero_reg__
 612:quantum/rgblight.c **** #    endif
 541               		.loc 1 612 0
 542 001a 8050      		subi r24,lo8(-(led))
 543 001c 9040      		sbci r25,hi8(-(led))
 544 001e 0C94 0000 		jmp ws2812_setleds
 545               	.LVL24:
 546               	.L33:
 547               	.LBB22:
 594:quantum/rgblight.c ****             led[i].r = 0;
 548               		.loc 1 594 0
 549 0022 8091 0000 		lds r24,effect_start_pos
 550               	.LVL25:
 551 0026 9091 0000 		lds r25,effect_end_pos
 552 002a 23E0      		ldi r18,lo8(3)
 553 002c 829F      		mul r24,r18
 554 002e F001      		movw r30,r0
 555 0030 1124      		clr __zero_reg__
 556 0032 E050      		subi r30,lo8(-(led))
 557 0034 F040      		sbci r31,hi8(-(led))
 558               	.L34:
 594:quantum/rgblight.c ****             led[i].r = 0;
 559               		.loc 1 594 0 is_stmt 0 discriminator 1
 560 0036 8917      		cp r24,r25
 561 0038 00F4      		brsh .L36
 595:quantum/rgblight.c ****             led[i].g = 0;
 562               		.loc 1 595 0 is_stmt 1 discriminator 3
 563 003a 1182      		std Z+1,__zero_reg__
 596:quantum/rgblight.c ****             led[i].b = 0;
 564               		.loc 1 596 0 discriminator 3
 565 003c 1082      		st Z,__zero_reg__
 597:quantum/rgblight.c ****         }
 566               		.loc 1 597 0 discriminator 3
 567 003e 1282      		std Z+2,__zero_reg__
 594:quantum/rgblight.c ****             led[i].r = 0;
 568               		.loc 1 594 0 discriminator 3
 569 0040 8F5F      		subi r24,lo8(-(1))
 570               	.LVL26:
 571 0042 3396      		adiw r30,3
 572 0044 00C0      		rjmp .L34
 573               	.LBE22:
 574               		.cfi_endproc
 575               	.LFE150:
 577               		.section	.text.rgblight_setrgb,"ax",@progbits
 578               	.global	rgblight_setrgb
 580               	rgblight_setrgb:
 581               	.LFB140:
 508:quantum/rgblight.c ****     if (!rgblight_config.enable) {
 582               		.loc 1 508 0
 583               		.cfi_startproc
 584               	.LVL27:
 585               	/* prologue: function */
 586               	/* frame size = 0 */
 587               	/* stack size = 0 */
 588               	.L__stack_usage = 0
 509:quantum/rgblight.c ****         return;
 589               		.loc 1 509 0
 590 0000 9091 0000 		lds r25,rgblight_config
 591 0004 90FF      		sbrs r25,0
 592 0006 00C0      		rjmp .L37
 593               	.LBB23:
 513:quantum/rgblight.c ****         led[i].r = r;
 594               		.loc 1 513 0
 595 0008 9091 0000 		lds r25,effect_start_pos
 596               	.LVL28:
 597 000c 2091 0000 		lds r18,effect_end_pos
 598 0010 33E0      		ldi r19,lo8(3)
 599 0012 939F      		mul r25,r19
 600 0014 F001      		movw r30,r0
 601 0016 1124      		clr __zero_reg__
 602 0018 E050      		subi r30,lo8(-(led))
 603 001a F040      		sbci r31,hi8(-(led))
 604               	.L39:
 513:quantum/rgblight.c ****         led[i].r = r;
 605               		.loc 1 513 0 is_stmt 0 discriminator 1
 606 001c 9217      		cp r25,r18
 607 001e 00F0      		brlo .L40
 608               	.LBE23:
 518:quantum/rgblight.c **** }
 609               		.loc 1 518 0 is_stmt 1
 610 0020 0C94 0000 		jmp rgblight_set
 611               	.LVL29:
 612               	.L40:
 613               	.LBB24:
 514:quantum/rgblight.c ****         led[i].g = g;
 614               		.loc 1 514 0 discriminator 3
 615 0024 8183      		std Z+1,r24
 515:quantum/rgblight.c ****         led[i].b = b;
 616               		.loc 1 515 0 discriminator 3
 617 0026 6083      		st Z,r22
 516:quantum/rgblight.c ****     }
 618               		.loc 1 516 0 discriminator 3
 619 0028 4283      		std Z+2,r20
 513:quantum/rgblight.c ****         led[i].r = r;
 620               		.loc 1 513 0 discriminator 3
 621 002a 9F5F      		subi r25,lo8(-(1))
 622               	.LVL30:
 623 002c 3396      		adiw r30,3
 624 002e 00C0      		rjmp .L39
 625               	.LVL31:
 626               	.L37:
 627               	/* epilogue start */
 628               	.LBE24:
 519:quantum/rgblight.c **** 
 629               		.loc 1 519 0
 630 0030 0895      		ret
 631               		.cfi_endproc
 632               	.LFE140:
 634               		.section	.text.rgblight_sethsv_noeeprom_old,"ax",@progbits
 635               	.global	rgblight_sethsv_noeeprom_old
 637               	rgblight_sethsv_noeeprom_old:
 638               	.LFB133:
 418:quantum/rgblight.c ****     if (rgblight_config.enable) {
 639               		.loc 1 418 0
 640               		.cfi_startproc
 641               	.LVL32:
 642 0000 CF93      		push r28
 643               	.LCFI6:
 644               		.cfi_def_cfa_offset 3
 645               		.cfi_offset 28, -2
 646 0002 DF93      		push r29
 647               	.LCFI7:
 648               		.cfi_def_cfa_offset 4
 649               		.cfi_offset 29, -3
 650 0004 00D0      		rcall .
 651 0006 1F92      		push __zero_reg__
 652               	.LCFI8:
 653               		.cfi_def_cfa_offset 7
 654 0008 CDB7      		in r28,__SP_L__
 655 000a DEB7      		in r29,__SP_H__
 656               	.LCFI9:
 657               		.cfi_def_cfa_register 28
 658               	/* prologue: function */
 659               	/* frame size = 3 */
 660               	/* stack size = 5 */
 661               	.L__stack_usage = 5
 419:quantum/rgblight.c ****         LED_TYPE tmp_led;
 662               		.loc 1 419 0
 663 000c 9091 0000 		lds r25,rgblight_config
 664 0010 90FF      		sbrs r25,0
 665 0012 00C0      		rjmp .L41
 666               	.LBB25:
 421:quantum/rgblight.c ****         rgblight_setrgb(tmp_led.r, tmp_led.g, tmp_led.b);
 667               		.loc 1 421 0
 668 0014 9E01      		movw r18,r28
 669 0016 2F5F      		subi r18,-1
 670 0018 3F4F      		sbci r19,-1
 671 001a 0E94 0000 		call sethsv
 672               	.LVL33:
 422:quantum/rgblight.c ****     }
 673               		.loc 1 422 0
 674 001e 4B81      		ldd r20,Y+3
 675 0020 6981      		ldd r22,Y+1
 676 0022 8A81      		ldd r24,Y+2
 677 0024 0E94 0000 		call rgblight_setrgb
 678               	.LVL34:
 679               	.L41:
 680               	/* epilogue start */
 681               	.LBE25:
 424:quantum/rgblight.c **** 
 682               		.loc 1 424 0
 683 0028 0F90      		pop __tmp_reg__
 684 002a 0F90      		pop __tmp_reg__
 685 002c 0F90      		pop __tmp_reg__
 686 002e DF91      		pop r29
 687 0030 CF91      		pop r28
 688 0032 0895      		ret
 689               		.cfi_endproc
 690               	.LFE133:
 692               		.section	.text.rgblight_effect_breathing,"ax",@progbits
 693               	.global	rgblight_effect_breathing
 695               	rgblight_effect_breathing:
 696               	.LFB158:
 723:quantum/rgblight.c **** 
 724:quantum/rgblight.c **** void rgblight_task(void) {
 725:quantum/rgblight.c ****     if (rgblight_status.timer_enabled) {
 726:quantum/rgblight.c ****         effect_func_t effect_func   = rgblight_effect_dummy;
 727:quantum/rgblight.c ****         uint16_t      interval_time = 2000;  // dummy interval
 728:quantum/rgblight.c ****         uint8_t       delta         = rgblight_config.mode - rgblight_status.base_mode;
 729:quantum/rgblight.c ****         animation_status.delta      = delta;
 730:quantum/rgblight.c **** 
 731:quantum/rgblight.c ****         // static light mode, do nothing here
 732:quantum/rgblight.c ****         if (1 == 0) {  // dummy
 733:quantum/rgblight.c ****         }
 734:quantum/rgblight.c **** #    ifdef RGBLIGHT_EFFECT_BREATHING
 735:quantum/rgblight.c ****         else if (rgblight_status.base_mode == RGBLIGHT_MODE_BREATHING) {
 736:quantum/rgblight.c ****             // breathing mode
 737:quantum/rgblight.c ****             interval_time = get_interval_time(&RGBLED_BREATHING_INTERVALS[delta], 1, 100);
 738:quantum/rgblight.c ****             effect_func   = rgblight_effect_breathing;
 739:quantum/rgblight.c ****         }
 740:quantum/rgblight.c **** #    endif
 741:quantum/rgblight.c **** #    ifdef RGBLIGHT_EFFECT_RAINBOW_MOOD
 742:quantum/rgblight.c ****         else if (rgblight_status.base_mode == RGBLIGHT_MODE_RAINBOW_MOOD) {
 743:quantum/rgblight.c ****             // rainbow mood mode
 744:quantum/rgblight.c ****             interval_time = get_interval_time(&RGBLED_RAINBOW_MOOD_INTERVALS[delta], 5, 100);
 745:quantum/rgblight.c ****             effect_func   = rgblight_effect_rainbow_mood;
 746:quantum/rgblight.c ****         }
 747:quantum/rgblight.c **** #    endif
 748:quantum/rgblight.c **** #    ifdef RGBLIGHT_EFFECT_RAINBOW_SWIRL
 749:quantum/rgblight.c ****         else if (rgblight_status.base_mode == RGBLIGHT_MODE_RAINBOW_SWIRL) {
 750:quantum/rgblight.c ****             // rainbow swirl mode
 751:quantum/rgblight.c ****             interval_time = get_interval_time(&RGBLED_RAINBOW_SWIRL_INTERVALS[delta / 2], 1, 100);
 752:quantum/rgblight.c ****             effect_func   = rgblight_effect_rainbow_swirl;
 753:quantum/rgblight.c ****         }
 754:quantum/rgblight.c **** #    endif
 755:quantum/rgblight.c **** #    ifdef RGBLIGHT_EFFECT_SNAKE
 756:quantum/rgblight.c ****         else if (rgblight_status.base_mode == RGBLIGHT_MODE_SNAKE) {
 757:quantum/rgblight.c ****             // snake mode
 758:quantum/rgblight.c ****             interval_time = get_interval_time(&RGBLED_SNAKE_INTERVALS[delta / 2], 1, 200);
 759:quantum/rgblight.c ****             effect_func   = rgblight_effect_snake;
 760:quantum/rgblight.c ****         }
 761:quantum/rgblight.c **** #    endif
 762:quantum/rgblight.c **** #    ifdef RGBLIGHT_EFFECT_KNIGHT
 763:quantum/rgblight.c ****         else if (rgblight_status.base_mode == RGBLIGHT_MODE_KNIGHT) {
 764:quantum/rgblight.c ****             // knight mode
 765:quantum/rgblight.c ****             interval_time = get_interval_time(&RGBLED_KNIGHT_INTERVALS[delta], 5, 100);
 766:quantum/rgblight.c ****             effect_func   = rgblight_effect_knight;
 767:quantum/rgblight.c ****         }
 768:quantum/rgblight.c **** #    endif
 769:quantum/rgblight.c **** #    ifdef RGBLIGHT_EFFECT_CHRISTMAS
 770:quantum/rgblight.c ****         else if (rgblight_status.base_mode == RGBLIGHT_MODE_CHRISTMAS) {
 771:quantum/rgblight.c ****             // christmas mode
 772:quantum/rgblight.c ****             interval_time = RGBLIGHT_EFFECT_CHRISTMAS_INTERVAL;
 773:quantum/rgblight.c ****             effect_func   = (effect_func_t)rgblight_effect_christmas;
 774:quantum/rgblight.c ****         }
 775:quantum/rgblight.c **** #    endif
 776:quantum/rgblight.c **** #    ifdef RGBLIGHT_EFFECT_RGB_TEST
 777:quantum/rgblight.c ****         else if (rgblight_status.base_mode == RGBLIGHT_MODE_RGB_TEST) {
 778:quantum/rgblight.c ****             // RGB test mode
 779:quantum/rgblight.c ****             interval_time = pgm_read_word(&RGBLED_RGBTEST_INTERVALS[0]);
 780:quantum/rgblight.c ****             effect_func   = (effect_func_t)rgblight_effect_rgbtest;
 781:quantum/rgblight.c ****         }
 782:quantum/rgblight.c **** #    endif
 783:quantum/rgblight.c **** #    ifdef RGBLIGHT_EFFECT_ALTERNATING
 784:quantum/rgblight.c ****         else if (rgblight_status.base_mode == RGBLIGHT_MODE_ALTERNATING) {
 785:quantum/rgblight.c ****             interval_time = 500;
 786:quantum/rgblight.c ****             effect_func   = (effect_func_t)rgblight_effect_alternating;
 787:quantum/rgblight.c ****         }
 788:quantum/rgblight.c **** #    endif
 789:quantum/rgblight.c ****         if (animation_status.restart) {
 790:quantum/rgblight.c ****             animation_status.restart    = false;
 791:quantum/rgblight.c ****             animation_status.last_timer = timer_read() - interval_time - 1;
 792:quantum/rgblight.c ****             animation_status.pos16      = 0;  // restart signal to local each effect
 793:quantum/rgblight.c ****         }
 794:quantum/rgblight.c ****         if (timer_elapsed(animation_status.last_timer) >= interval_time) {
 795:quantum/rgblight.c **** #    if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 796:quantum/rgblight.c ****             static uint16_t report_last_timer = 0;
 797:quantum/rgblight.c ****             static bool     tick_flag         = false;
 798:quantum/rgblight.c ****             uint16_t        oldpos16;
 799:quantum/rgblight.c ****             if (tick_flag) {
 800:quantum/rgblight.c ****                 tick_flag = false;
 801:quantum/rgblight.c ****                 if (timer_elapsed(report_last_timer) >= 30000) {
 802:quantum/rgblight.c ****                     report_last_timer = timer_read();
 803:quantum/rgblight.c ****                     dprintf("rgblight animation tick report to slave\n");
 804:quantum/rgblight.c ****                     RGBLIGHT_SPLIT_ANIMATION_TICK;
 805:quantum/rgblight.c ****                 }
 806:quantum/rgblight.c ****             }
 807:quantum/rgblight.c ****             oldpos16 = animation_status.pos16;
 808:quantum/rgblight.c **** #    endif
 809:quantum/rgblight.c ****             animation_status.last_timer += interval_time;
 810:quantum/rgblight.c ****             effect_func(&animation_status);
 811:quantum/rgblight.c **** #    if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 812:quantum/rgblight.c ****             if (animation_status.pos16 == 0 && oldpos16 != 0) {
 813:quantum/rgblight.c ****                 tick_flag = true;
 814:quantum/rgblight.c ****             }
 815:quantum/rgblight.c **** #    endif
 816:quantum/rgblight.c ****         }
 817:quantum/rgblight.c ****     }
 818:quantum/rgblight.c **** }
 819:quantum/rgblight.c **** 
 820:quantum/rgblight.c **** #endif /* RGBLIGHT_USE_TIMER */
 821:quantum/rgblight.c **** 
 822:quantum/rgblight.c **** // Effects
 823:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_BREATHING
 824:quantum/rgblight.c **** 
 825:quantum/rgblight.c **** #    ifndef RGBLIGHT_EFFECT_BREATHE_CENTER
 826:quantum/rgblight.c **** #        ifndef RGBLIGHT_BREATHE_TABLE_SIZE
 827:quantum/rgblight.c **** #            define RGBLIGHT_BREATHE_TABLE_SIZE 256  // 256 or 128 or 64
 828:quantum/rgblight.c **** #        endif
 829:quantum/rgblight.c **** #        include <rgblight_breathe_table.h>
 830:quantum/rgblight.c **** #    endif
 831:quantum/rgblight.c **** 
 832:quantum/rgblight.c **** __attribute__((weak)) const uint8_t RGBLED_BREATHING_INTERVALS[] PROGMEM = {30, 20, 10, 5};
 833:quantum/rgblight.c **** 
 834:quantum/rgblight.c **** void rgblight_effect_breathing(animation_status_t *anim) {
 697               		.loc 1 834 0
 698               		.cfi_startproc
 699               	.LVL35:
 700 0000 CF93      		push r28
 701               	.LCFI10:
 702               		.cfi_def_cfa_offset 3
 703               		.cfi_offset 28, -2
 704 0002 DF93      		push r29
 705               	.LCFI11:
 706               		.cfi_def_cfa_offset 4
 707               		.cfi_offset 29, -3
 708               	/* prologue: function */
 709               	/* frame size = 0 */
 710               	/* stack size = 2 */
 711               	.L__stack_usage = 2
 712 0004 EC01      		movw r28,r24
 713               	.LVL36:
 714               	.LBB26:
 835:quantum/rgblight.c ****     float val;
 836:quantum/rgblight.c **** 
 837:quantum/rgblight.c ****     // http://sean.voisen.org/blog/2011/10/breathing-led-with-arduino/
 838:quantum/rgblight.c **** #    ifdef RGBLIGHT_EFFECT_BREATHE_TABLE
 839:quantum/rgblight.c ****     val = pgm_read_byte(&rgblight_effect_breathe_table[anim->pos / table_scale]);
 715               		.loc 1 839 0
 716 0006 EC81      		ldd r30,Y+4
 717 0008 F0E0      		ldi r31,0
 718 000a E050      		subi r30,lo8(-(rgblight_effect_breathe_table))
 719 000c F040      		sbci r31,hi8(-(rgblight_effect_breathe_table))
 720               	/* #APP */
 721               	 ;  839 "quantum/rgblight.c" 1
 722 000e 4491      		lpm r20, Z
 723               		
 724               	 ;  0 "" 2
 725               	.LVL37:
 726               	/* #NOAPP */
 727               	.LBE26:
 840:quantum/rgblight.c **** #    else
 841:quantum/rgblight.c ****     val = (exp(sin((anim->pos / 255.0) * M_PI)) - RGBLIGHT_EFFECT_BREATHE_CENTER / M_E) * (RGBLIGHT
 842:quantum/rgblight.c **** #    endif
 843:quantum/rgblight.c ****     rgblight_sethsv_noeeprom_old(rgblight_config.hue, rgblight_config.sat, val);
 728               		.loc 1 843 0
 729 0010 E0E0      		ldi r30,lo8(rgblight_config)
 730 0012 F0E0      		ldi r31,hi8(rgblight_config)
 731 0014 6281      		ldd r22,Z+2
 732 0016 8181      		ldd r24,Z+1
 733               	.LVL38:
 734 0018 0E94 0000 		call rgblight_sethsv_noeeprom_old
 735               	.LVL39:
 844:quantum/rgblight.c ****     anim->pos = (anim->pos + 1);
 736               		.loc 1 844 0
 737 001c 8C81      		ldd r24,Y+4
 738 001e 8F5F      		subi r24,lo8(-(1))
 739 0020 8C83      		std Y+4,r24
 740               	/* epilogue start */
 845:quantum/rgblight.c **** }
 741               		.loc 1 845 0
 742 0022 DF91      		pop r29
 743 0024 CF91      		pop r28
 744               	.LVL40:
 745 0026 0895      		ret
 746               		.cfi_endproc
 747               	.LFE158:
 749               		.section	.text.rgblight_effect_rainbow_mood,"ax",@progbits
 750               	.global	rgblight_effect_rainbow_mood
 752               	rgblight_effect_rainbow_mood:
 753               	.LFB159:
 846:quantum/rgblight.c **** #endif
 847:quantum/rgblight.c **** 
 848:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_RAINBOW_MOOD
 849:quantum/rgblight.c **** __attribute__((weak)) const uint8_t RGBLED_RAINBOW_MOOD_INTERVALS[] PROGMEM = {120, 60, 30};
 850:quantum/rgblight.c **** 
 851:quantum/rgblight.c **** void rgblight_effect_rainbow_mood(animation_status_t *anim) {
 754               		.loc 1 851 0
 755               		.cfi_startproc
 756               	.LVL41:
 757 0000 CF93      		push r28
 758               	.LCFI12:
 759               		.cfi_def_cfa_offset 3
 760               		.cfi_offset 28, -2
 761 0002 DF93      		push r29
 762               	.LCFI13:
 763               		.cfi_def_cfa_offset 4
 764               		.cfi_offset 29, -3
 765               	/* prologue: function */
 766               	/* frame size = 0 */
 767               	/* stack size = 2 */
 768               	.L__stack_usage = 2
 769 0004 EC01      		movw r28,r24
 852:quantum/rgblight.c ****     rgblight_sethsv_noeeprom_old(anim->current_hue, rgblight_config.sat, rgblight_config.val);
 770               		.loc 1 852 0
 771 0006 E0E0      		ldi r30,lo8(rgblight_config)
 772 0008 F0E0      		ldi r31,hi8(rgblight_config)
 773 000a 4381      		ldd r20,Z+3
 774 000c 6281      		ldd r22,Z+2
 775 000e 8C81      		ldd r24,Y+4
 776               	.LVL42:
 777 0010 0E94 0000 		call rgblight_sethsv_noeeprom_old
 778               	.LVL43:
 853:quantum/rgblight.c ****     anim->current_hue++;
 779               		.loc 1 853 0
 780 0014 8C81      		ldd r24,Y+4
 781 0016 8F5F      		subi r24,lo8(-(1))
 782 0018 8C83      		std Y+4,r24
 783               	/* epilogue start */
 854:quantum/rgblight.c **** }
 784               		.loc 1 854 0
 785 001a DF91      		pop r29
 786 001c CF91      		pop r28
 787               	.LVL44:
 788 001e 0895      		ret
 789               		.cfi_endproc
 790               	.LFE159:
 792               		.section	.text.rgblight_effect_rgbtest,"ax",@progbits
 793               	.global	rgblight_effect_rgbtest
 795               	rgblight_effect_rgbtest:
 796               	.LFB164:
 855:quantum/rgblight.c **** #endif
 856:quantum/rgblight.c **** 
 857:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_RAINBOW_SWIRL
 858:quantum/rgblight.c **** #    ifndef RGBLIGHT_RAINBOW_SWIRL_RANGE
 859:quantum/rgblight.c **** #        define RGBLIGHT_RAINBOW_SWIRL_RANGE 255
 860:quantum/rgblight.c **** #    endif
 861:quantum/rgblight.c **** 
 862:quantum/rgblight.c **** __attribute__((weak)) const uint8_t RGBLED_RAINBOW_SWIRL_INTERVALS[] PROGMEM = {100, 50, 20};
 863:quantum/rgblight.c **** 
 864:quantum/rgblight.c **** void rgblight_effect_rainbow_swirl(animation_status_t *anim) {
 865:quantum/rgblight.c ****     uint8_t hue;
 866:quantum/rgblight.c ****     uint8_t i;
 867:quantum/rgblight.c **** 
 868:quantum/rgblight.c ****     for (i = 0; i < effect_num_leds; i++) {
 869:quantum/rgblight.c ****         hue = (RGBLIGHT_RAINBOW_SWIRL_RANGE / effect_num_leds * i + anim->current_hue);
 870:quantum/rgblight.c ****         sethsv(hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[i + effect_start_pos
 871:quantum/rgblight.c ****     }
 872:quantum/rgblight.c ****     rgblight_set();
 873:quantum/rgblight.c **** 
 874:quantum/rgblight.c ****     if (anim->delta % 2) {
 875:quantum/rgblight.c ****         anim->current_hue++;
 876:quantum/rgblight.c ****     } else {
 877:quantum/rgblight.c ****         anim->current_hue--;
 878:quantum/rgblight.c ****     }
 879:quantum/rgblight.c **** }
 880:quantum/rgblight.c **** #endif
 881:quantum/rgblight.c **** 
 882:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_SNAKE
 883:quantum/rgblight.c **** __attribute__((weak)) const uint8_t RGBLED_SNAKE_INTERVALS[] PROGMEM = {100, 50, 20};
 884:quantum/rgblight.c **** 
 885:quantum/rgblight.c **** void rgblight_effect_snake(animation_status_t *anim) {
 886:quantum/rgblight.c ****     static uint8_t pos = 0;
 887:quantum/rgblight.c ****     uint8_t        i, j;
 888:quantum/rgblight.c ****     int8_t         k;
 889:quantum/rgblight.c ****     int8_t         increment = 1;
 890:quantum/rgblight.c **** 
 891:quantum/rgblight.c ****     if (anim->delta % 2) {
 892:quantum/rgblight.c ****         increment = -1;
 893:quantum/rgblight.c ****     }
 894:quantum/rgblight.c **** 
 895:quantum/rgblight.c **** #    if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 896:quantum/rgblight.c ****     if (anim->pos == 0) {  // restart signal
 897:quantum/rgblight.c ****         if (increment == 1) {
 898:quantum/rgblight.c ****             pos = effect_num_leds - 1;
 899:quantum/rgblight.c ****         } else {
 900:quantum/rgblight.c ****             pos = 0;
 901:quantum/rgblight.c ****         }
 902:quantum/rgblight.c ****         anim->pos = 1;
 903:quantum/rgblight.c ****     }
 904:quantum/rgblight.c **** #    endif
 905:quantum/rgblight.c **** 
 906:quantum/rgblight.c ****     for (i = 0; i < effect_num_leds; i++) {
 907:quantum/rgblight.c ****         LED_TYPE *ledp = led + i + effect_start_pos;
 908:quantum/rgblight.c ****         ledp->r        = 0;
 909:quantum/rgblight.c ****         ledp->g        = 0;
 910:quantum/rgblight.c ****         ledp->b        = 0;
 911:quantum/rgblight.c ****         for (j = 0; j < RGBLIGHT_EFFECT_SNAKE_LENGTH; j++) {
 912:quantum/rgblight.c ****             k = pos + j * increment;
 913:quantum/rgblight.c ****             if (k < 0) {
 914:quantum/rgblight.c ****                 k = k + effect_num_leds;
 915:quantum/rgblight.c ****             }
 916:quantum/rgblight.c ****             if (i == k) {
 917:quantum/rgblight.c ****                 sethsv(rgblight_config.hue, rgblight_config.sat, (uint8_t)(rgblight_config.val * (R
 918:quantum/rgblight.c ****             }
 919:quantum/rgblight.c ****         }
 920:quantum/rgblight.c ****     }
 921:quantum/rgblight.c ****     rgblight_set();
 922:quantum/rgblight.c ****     if (increment == 1) {
 923:quantum/rgblight.c ****         if (pos - 1 < 0) {
 924:quantum/rgblight.c ****             pos = effect_num_leds - 1;
 925:quantum/rgblight.c **** #    if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 926:quantum/rgblight.c ****             anim->pos = 0;
 927:quantum/rgblight.c **** #    endif
 928:quantum/rgblight.c ****         } else {
 929:quantum/rgblight.c ****             pos -= 1;
 930:quantum/rgblight.c **** #    if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 931:quantum/rgblight.c ****             anim->pos = 1;
 932:quantum/rgblight.c **** #    endif
 933:quantum/rgblight.c ****         }
 934:quantum/rgblight.c ****     } else {
 935:quantum/rgblight.c ****         pos = (pos + 1) % effect_num_leds;
 936:quantum/rgblight.c **** #    if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 937:quantum/rgblight.c ****         anim->pos = pos;
 938:quantum/rgblight.c **** #    endif
 939:quantum/rgblight.c ****     }
 940:quantum/rgblight.c **** }
 941:quantum/rgblight.c **** #endif
 942:quantum/rgblight.c **** 
 943:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_KNIGHT
 944:quantum/rgblight.c **** __attribute__((weak)) const uint8_t RGBLED_KNIGHT_INTERVALS[] PROGMEM = {127, 63, 31};
 945:quantum/rgblight.c **** 
 946:quantum/rgblight.c **** void rgblight_effect_knight(animation_status_t *anim) {
 947:quantum/rgblight.c ****     static int8_t low_bound  = 0;
 948:quantum/rgblight.c ****     static int8_t high_bound = RGBLIGHT_EFFECT_KNIGHT_LENGTH - 1;
 949:quantum/rgblight.c ****     static int8_t increment  = 1;
 950:quantum/rgblight.c ****     uint8_t       i, cur;
 951:quantum/rgblight.c **** 
 952:quantum/rgblight.c **** #    if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 953:quantum/rgblight.c ****     if (anim->pos == 0) {  // restart signal
 954:quantum/rgblight.c ****         anim->pos  = 1;
 955:quantum/rgblight.c ****         low_bound  = 0;
 956:quantum/rgblight.c ****         high_bound = RGBLIGHT_EFFECT_KNIGHT_LENGTH - 1;
 957:quantum/rgblight.c ****         increment  = 1;
 958:quantum/rgblight.c ****     }
 959:quantum/rgblight.c **** #    endif
 960:quantum/rgblight.c ****     // Set all the LEDs to 0
 961:quantum/rgblight.c ****     for (i = effect_start_pos; i < effect_end_pos; i++) {
 962:quantum/rgblight.c ****         led[i].r = 0;
 963:quantum/rgblight.c ****         led[i].g = 0;
 964:quantum/rgblight.c ****         led[i].b = 0;
 965:quantum/rgblight.c ****     }
 966:quantum/rgblight.c ****     // Determine which LEDs should be lit up
 967:quantum/rgblight.c ****     for (i = 0; i < RGBLIGHT_EFFECT_KNIGHT_LED_NUM; i++) {
 968:quantum/rgblight.c ****         cur = (i + RGBLIGHT_EFFECT_KNIGHT_OFFSET) % effect_num_leds + effect_start_pos;
 969:quantum/rgblight.c **** 
 970:quantum/rgblight.c ****         if (i >= low_bound && i <= high_bound) {
 971:quantum/rgblight.c ****             sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[
 972:quantum/rgblight.c ****         } else {
 973:quantum/rgblight.c ****             led[cur].r = 0;
 974:quantum/rgblight.c ****             led[cur].g = 0;
 975:quantum/rgblight.c ****             led[cur].b = 0;
 976:quantum/rgblight.c ****         }
 977:quantum/rgblight.c ****     }
 978:quantum/rgblight.c ****     rgblight_set();
 979:quantum/rgblight.c **** 
 980:quantum/rgblight.c ****     // Move from low_bound to high_bound changing the direction we increment each
 981:quantum/rgblight.c ****     // time a boundary is hit.
 982:quantum/rgblight.c ****     low_bound += increment;
 983:quantum/rgblight.c ****     high_bound += increment;
 984:quantum/rgblight.c **** 
 985:quantum/rgblight.c ****     if (high_bound <= 0 || low_bound >= RGBLIGHT_EFFECT_KNIGHT_LED_NUM - 1) {
 986:quantum/rgblight.c ****         increment = -increment;
 987:quantum/rgblight.c **** #    if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 988:quantum/rgblight.c ****         if (increment == 1) {
 989:quantum/rgblight.c ****             anim->pos = 0;
 990:quantum/rgblight.c ****         }
 991:quantum/rgblight.c **** #    endif
 992:quantum/rgblight.c ****     }
 993:quantum/rgblight.c **** }
 994:quantum/rgblight.c **** #endif
 995:quantum/rgblight.c **** 
 996:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_CHRISTMAS
 997:quantum/rgblight.c **** void rgblight_effect_christmas(animation_status_t *anim) {
 998:quantum/rgblight.c ****     uint8_t hue;
 999:quantum/rgblight.c ****     uint8_t i;
1000:quantum/rgblight.c **** 
1001:quantum/rgblight.c ****     anim->current_offset = (anim->current_offset + 1) % 2;
1002:quantum/rgblight.c ****     for (i = 0; i < effect_num_leds; i++) {
1003:quantum/rgblight.c ****         hue = 0 + ((i / RGBLIGHT_EFFECT_CHRISTMAS_STEP + anim->current_offset) % 2) * 85;
1004:quantum/rgblight.c ****         sethsv(hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[i + effect_start_pos
1005:quantum/rgblight.c ****     }
1006:quantum/rgblight.c ****     rgblight_set();
1007:quantum/rgblight.c **** }
1008:quantum/rgblight.c **** #endif
1009:quantum/rgblight.c **** 
1010:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_RGB_TEST
1011:quantum/rgblight.c **** __attribute__((weak)) const uint16_t RGBLED_RGBTEST_INTERVALS[] PROGMEM = {1024};
1012:quantum/rgblight.c **** 
1013:quantum/rgblight.c **** void rgblight_effect_rgbtest(animation_status_t *anim) {
 797               		.loc 1 1013 0
 798               		.cfi_startproc
 799               	.LVL45:
 800 0000 0F93      		push r16
 801               	.LCFI14:
 802               		.cfi_def_cfa_offset 3
 803               		.cfi_offset 16, -2
 804 0002 1F93      		push r17
 805               	.LCFI15:
 806               		.cfi_def_cfa_offset 4
 807               		.cfi_offset 17, -3
 808 0004 CF93      		push r28
 809               	.LCFI16:
 810               		.cfi_def_cfa_offset 5
 811               		.cfi_offset 28, -4
 812 0006 DF93      		push r29
 813               	.LCFI17:
 814               		.cfi_def_cfa_offset 6
 815               		.cfi_offset 29, -5
 816 0008 00D0      		rcall .
 817 000a 1F92      		push __zero_reg__
 818               	.LCFI18:
 819               		.cfi_def_cfa_offset 9
 820 000c CDB7      		in r28,__SP_L__
 821 000e DEB7      		in r29,__SP_H__
 822               	.LCFI19:
 823               		.cfi_def_cfa_register 28
 824               	/* prologue: function */
 825               	/* frame size = 3 */
 826               	/* stack size = 7 */
 827               	.L__stack_usage = 7
 828 0010 8C01      		movw r16,r24
1014:quantum/rgblight.c ****     static uint8_t maxval = 0;
1015:quantum/rgblight.c ****     uint8_t        g;
1016:quantum/rgblight.c ****     uint8_t        r;
1017:quantum/rgblight.c ****     uint8_t        b;
1018:quantum/rgblight.c **** 
1019:quantum/rgblight.c ****     if (maxval == 0) {
 829               		.loc 1 1019 0
 830 0012 8091 0000 		lds r24,maxval.3190
 831               	.LVL46:
 832 0016 8111      		cpse r24,__zero_reg__
 833 0018 00C0      		rjmp .L49
 834               	.LBB27:
1020:quantum/rgblight.c ****         LED_TYPE tmp_led;
1021:quantum/rgblight.c ****         sethsv(0, 255, RGBLIGHT_LIMIT_VAL, &tmp_led);
 835               		.loc 1 1021 0
 836 001a 9E01      		movw r18,r28
 837 001c 2F5F      		subi r18,-1
 838 001e 3F4F      		sbci r19,-1
 839 0020 48E7      		ldi r20,lo8(120)
 840 0022 6FEF      		ldi r22,lo8(-1)
 841 0024 0E94 0000 		call sethsv
 842               	.LVL47:
1022:quantum/rgblight.c ****         maxval = tmp_led.r;
 843               		.loc 1 1022 0
 844 0028 8A81      		ldd r24,Y+2
 845 002a 8093 0000 		sts maxval.3190,r24
 846               	.L49:
 847               	.LVL48:
 848               	.LBE27:
1023:quantum/rgblight.c ****     }
1024:quantum/rgblight.c ****     g = r = b = 0;
1025:quantum/rgblight.c ****     switch (anim->pos) {
 849               		.loc 1 1025 0
 850 002e F801      		movw r30,r16
 851 0030 8481      		ldd r24,Z+4
 852 0032 8130      		cpi r24,lo8(1)
 853 0034 01F0      		breq .L51
 854 0036 00F0      		brlo .L52
1026:quantum/rgblight.c ****         case 0:
1027:quantum/rgblight.c ****             r = maxval;
1028:quantum/rgblight.c ****             break;
1029:quantum/rgblight.c ****         case 1:
1030:quantum/rgblight.c ****             g = maxval;
1031:quantum/rgblight.c ****             break;
1032:quantum/rgblight.c ****         case 2:
1033:quantum/rgblight.c ****             b = maxval;
 855               		.loc 1 1033 0
 856 0038 4091 0000 		lds r20,maxval.3190
1025:quantum/rgblight.c ****         case 0:
 857               		.loc 1 1025 0
 858 003c 8230      		cpi r24,lo8(2)
 859 003e 01F0      		breq .L57
1024:quantum/rgblight.c ****     switch (anim->pos) {
 860               		.loc 1 1024 0
 861 0040 40E0      		ldi r20,0
 862               	.L57:
 863 0042 80E0      		ldi r24,0
 864 0044 00C0      		rjmp .L56
 865               	.L52:
1027:quantum/rgblight.c ****             break;
 866               		.loc 1 1027 0
 867 0046 8091 0000 		lds r24,maxval.3190
 868               	.LVL49:
1024:quantum/rgblight.c ****     switch (anim->pos) {
 869               		.loc 1 1024 0
 870 004a 40E0      		ldi r20,0
 871               	.LVL50:
 872               	.L56:
 873 004c 60E0      		ldi r22,0
 874 004e 00C0      		rjmp .L50
 875               	.LVL51:
 876               	.L51:
1030:quantum/rgblight.c ****             break;
 877               		.loc 1 1030 0
 878 0050 6091 0000 		lds r22,maxval.3190
 879               	.LVL52:
1024:quantum/rgblight.c ****     switch (anim->pos) {
 880               		.loc 1 1024 0
 881 0054 40E0      		ldi r20,0
 882 0056 80E0      		ldi r24,0
 883               	.LVL53:
 884               	.L50:
1034:quantum/rgblight.c ****             break;
1035:quantum/rgblight.c ****     }
1036:quantum/rgblight.c ****     rgblight_setrgb(r, g, b);
 885               		.loc 1 1036 0
 886 0058 0E94 0000 		call rgblight_setrgb
 887               	.LVL54:
1037:quantum/rgblight.c ****     anim->pos = (anim->pos + 1) % 3;
 888               		.loc 1 1037 0
 889 005c F801      		movw r30,r16
 890 005e 8481      		ldd r24,Z+4
 891 0060 90E0      		ldi r25,0
 892 0062 0196      		adiw r24,1
 893 0064 63E0      		ldi r22,lo8(3)
 894 0066 70E0      		ldi r23,0
 895 0068 0E94 0000 		call __divmodhi4
 896 006c 8483      		std Z+4,r24
 897               	/* epilogue start */
1038:quantum/rgblight.c **** }
 898               		.loc 1 1038 0
 899 006e 0F90      		pop __tmp_reg__
 900 0070 0F90      		pop __tmp_reg__
 901 0072 0F90      		pop __tmp_reg__
 902 0074 DF91      		pop r29
 903 0076 CF91      		pop r28
 904 0078 1F91      		pop r17
 905 007a 0F91      		pop r16
 906               	.LVL55:
 907 007c 0895      		ret
 908               		.cfi_endproc
 909               	.LFE164:
 911               		.section	.text.rgblight_sethsv_eeprom_helper,"ax",@progbits
 912               	.global	rgblight_sethsv_eeprom_helper
 914               	rgblight_sethsv_eeprom_helper:
 915               	.LFB134:
 426:quantum/rgblight.c ****     if (rgblight_config.enable) {
 916               		.loc 1 426 0
 917               		.cfi_startproc
 918               	.LVL56:
 919 0000 AF92      		push r10
 920               	.LCFI20:
 921               		.cfi_def_cfa_offset 3
 922               		.cfi_offset 10, -2
 923 0002 BF92      		push r11
 924               	.LCFI21:
 925               		.cfi_def_cfa_offset 4
 926               		.cfi_offset 11, -3
 927 0004 CF92      		push r12
 928               	.LCFI22:
 929               		.cfi_def_cfa_offset 5
 930               		.cfi_offset 12, -4
 931 0006 DF92      		push r13
 932               	.LCFI23:
 933               		.cfi_def_cfa_offset 6
 934               		.cfi_offset 13, -5
 935 0008 EF92      		push r14
 936               	.LCFI24:
 937               		.cfi_def_cfa_offset 7
 938               		.cfi_offset 14, -6
 939 000a FF92      		push r15
 940               	.LCFI25:
 941               		.cfi_def_cfa_offset 8
 942               		.cfi_offset 15, -7
 943 000c 0F93      		push r16
 944               	.LCFI26:
 945               		.cfi_def_cfa_offset 9
 946               		.cfi_offset 16, -8
 947 000e 1F93      		push r17
 948               	.LCFI27:
 949               		.cfi_def_cfa_offset 10
 950               		.cfi_offset 17, -9
 951 0010 CF93      		push r28
 952               	.LCFI28:
 953               		.cfi_def_cfa_offset 11
 954               		.cfi_offset 28, -10
 955 0012 DF93      		push r29
 956               	.LCFI29:
 957               		.cfi_def_cfa_offset 12
 958               		.cfi_offset 29, -11
 959 0014 00D0      		rcall .
 960 0016 1F92      		push __zero_reg__
 961               	.LCFI30:
 962               		.cfi_def_cfa_offset 15
 963 0018 CDB7      		in r28,__SP_L__
 964 001a DEB7      		in r29,__SP_H__
 965               	.LCFI31:
 966               		.cfi_def_cfa_register 28
 967               	/* prologue: function */
 968               	/* frame size = 3 */
 969               	/* stack size = 13 */
 970               	.L__stack_usage = 13
 971 001c 182F      		mov r17,r24
 972 001e F62E      		mov r15,r22
 973 0020 042F      		mov r16,r20
 974 0022 E22E      		mov r14,r18
 427:quantum/rgblight.c ****         rgblight_status.base_mode = mode_base_table[rgblight_config.mode];
 975               		.loc 1 427 0
 976 0024 9091 0000 		lds r25,rgblight_config
 977 0028 90FF      		sbrs r25,0
 978 002a 00C0      		rjmp .L58
 428:quantum/rgblight.c ****         if (rgblight_config.mode == RGBLIGHT_MODE_STATIC_LIGHT) {
 979               		.loc 1 428 0
 980 002c E92F      		mov r30,r25
 981 002e E695      		lsr r30
 982 0030 AE2F      		mov r26,r30
 983 0032 B0E0      		ldi r27,0
 984 0034 A050      		subi r26,lo8(-(mode_base_table))
 985 0036 B040      		sbci r27,hi8(-(mode_base_table))
 986 0038 8C91      		ld r24,X
 987               	.LVL57:
 988 003a 8093 0000 		sts rgblight_status,r24
 429:quantum/rgblight.c ****             // same static color
 989               		.loc 1 429 0
 990 003e 9E7F      		andi r25,lo8(-2)
 991 0040 9230      		cpi r25,lo8(2)
 992 0042 01F4      		brne .L61
 993               	.LBB28:
 432:quantum/rgblight.c ****             rgblight_setrgb(tmp_led.r, tmp_led.g, tmp_led.b);
 994               		.loc 1 432 0
 995 0044 9E01      		movw r18,r28
 996               	.LVL58:
 997 0046 2F5F      		subi r18,-1
 998 0048 3F4F      		sbci r19,-1
 999 004a 812F      		mov r24,r17
 1000 004c 0E94 0000 		call sethsv
 1001               	.LVL59:
 433:quantum/rgblight.c ****         } else {
 1002               		.loc 1 433 0
 1003 0050 4B81      		ldd r20,Y+3
 1004 0052 6981      		ldd r22,Y+1
 1005 0054 8A81      		ldd r24,Y+2
 1006 0056 0E94 0000 		call rgblight_setrgb
 1007               	.LVL60:
 1008               	.L62:
 1009               	.LBE28:
 486:quantum/rgblight.c ****         rgblight_config.sat = sat;
 1010               		.loc 1 486 0
 1011 005a 1093 0000 		sts rgblight_config+1,r17
 487:quantum/rgblight.c ****         rgblight_config.val = val;
 1012               		.loc 1 487 0
 1013 005e F092 0000 		sts rgblight_config+2,r15
 488:quantum/rgblight.c ****         if (write_to_eeprom) {
 1014               		.loc 1 488 0
 1015 0062 0093 0000 		sts rgblight_config+3,r16
 489:quantum/rgblight.c ****             eeconfig_update_rgblight(rgblight_config.raw);
 1016               		.loc 1 489 0
 1017 0066 EE20      		tst r14
 1018 0068 01F0      		breq .L58
 490:quantum/rgblight.c ****             dprintf("rgblight set hsv [EEPROM]: %u,%u,%u\n", rgblight_config.hue, rgblight_config.s
 1019               		.loc 1 490 0
 1020 006a 6091 0000 		lds r22,rgblight_config
 1021 006e 7091 0000 		lds r23,rgblight_config+1
 1022 0072 8091 0000 		lds r24,rgblight_config+2
 1023 0076 9091 0000 		lds r25,rgblight_config+3
 1024 007a 0E94 0000 		call eeconfig_update_rgblight
 1025               	.LVL61:
 1026               	.L58:
 1027               	/* epilogue start */
 496:quantum/rgblight.c **** 
 1028               		.loc 1 496 0
 1029 007e 0F90      		pop __tmp_reg__
 1030 0080 0F90      		pop __tmp_reg__
 1031 0082 0F90      		pop __tmp_reg__
 1032 0084 DF91      		pop r29
 1033 0086 CF91      		pop r28
 1034 0088 1F91      		pop r17
 1035               	.LVL62:
 1036 008a 0F91      		pop r16
 1037               	.LVL63:
 1038 008c FF90      		pop r15
 1039               	.LVL64:
 1040 008e EF90      		pop r14
 1041               	.LVL65:
 1042 0090 DF90      		pop r13
 1043 0092 CF90      		pop r12
 1044 0094 BF90      		pop r11
 1045 0096 AF90      		pop r10
 1046 0098 0895      		ret
 1047               	.LVL66:
 1048               	.L61:
 439:quantum/rgblight.c ****                 // breathing mode, ignore the change of val, use in memory value instead
 1049               		.loc 1 439 0
 1050 009a 8230      		cpi r24,lo8(2)
 1051 009c 01F4      		brne .L63
 441:quantum/rgblight.c ****             }
 1052               		.loc 1 441 0
 1053 009e 0091 0000 		lds r16,rgblight_config+3
 1054               	.LVL67:
 1055 00a2 00C0      		rjmp .L62
 1056               	.L63:
 445:quantum/rgblight.c ****                 // rainbow mood, ignore the change of hue
 1057               		.loc 1 445 0
 1058 00a4 8630      		cpi r24,lo8(6)
 1059 00a6 01F4      		brne .L64
 1060               	.L65:
 447:quantum/rgblight.c ****             }
 1061               		.loc 1 447 0
 1062 00a8 1091 0000 		lds r17,rgblight_config+1
 1063               	.LVL68:
 1064 00ac 00C0      		rjmp .L62
 1065               	.L64:
 451:quantum/rgblight.c ****                 // rainbow swirl, ignore the change of hue
 1066               		.loc 1 451 0
 1067 00ae 8930      		cpi r24,lo8(9)
 1068 00b0 01F0      		breq .L65
 457:quantum/rgblight.c ****                 // static gradient
 1069               		.loc 1 457 0
 1070 00b2 8931      		cpi r24,lo8(25)
 1071 00b4 01F4      		brne .L62
 1072               	.LBB29:
 459:quantum/rgblight.c ****                 bool    direction = (delta % 2) == 0;
 1073               		.loc 1 459 0
 1074 00b6 E951      		subi r30,lo8(-(-25))
 1075               	.LVL69:
 460:quantum/rgblight.c **** #    ifdef __AVR__
 1076               		.loc 1 460 0
 1077 00b8 8E2F      		mov r24,r30
 1078 00ba 8170      		andi r24,lo8(1)
 1079 00bc D82E      		mov r13,r24
 1080               	.LVL70:
 1081               	.LBB30:
 463:quantum/rgblight.c **** #    else
 1082               		.loc 1 463 0
 1083 00be E695      		lsr r30
 1084               	.LVL71:
 1085 00c0 F0E0      		ldi r31,0
 1086 00c2 E050      		subi r30,lo8(-(RGBLED_GRADIENT_RANGES))
 1087 00c4 F040      		sbci r31,hi8(-(RGBLED_GRADIENT_RANGES))
 1088               	.LVL72:
 1089               	/* #APP */
 1090               	 ;  463 "quantum/rgblight.c" 1
 1091 00c6 A590      		lpm r10, Z+
 1092 00c8 B490      		lpm r11, Z
 1093               		
 1094               	 ;  0 "" 2
 1095               	.LVL73:
 1096               	/* #NOAPP */
 1097               	.LBE30:
 1098               	.LBB31:
 467:quantum/rgblight.c ****                     uint8_t _hue = ((uint16_t)i * (uint16_t)range) / effect_num_leds;
 1099               		.loc 1 467 0
 1100 00ca C12C      		mov r12,__zero_reg__
 1101               	.LBB32:
 468:quantum/rgblight.c ****                     if (direction) {
 1102               		.loc 1 468 0
 1103 00cc BB24      		clr r11
 1104               	.LVL74:
 1105               	.L66:
 1106               	.LBE32:
 467:quantum/rgblight.c ****                     uint8_t _hue = ((uint16_t)i * (uint16_t)range) / effect_num_leds;
 1107               		.loc 1 467 0 discriminator 1
 1108 00ce 6091 0000 		lds r22,effect_num_leds
 1109 00d2 C616      		cp r12,r22
 1110 00d4 00F0      		brlo .L69
 1111               	.LBE31:
 477:quantum/rgblight.c ****             }
 1112               		.loc 1 477 0
 1113 00d6 0E94 0000 		call rgblight_set
 1114               	.LVL75:
 1115 00da 00C0      		rjmp .L62
 1116               	.L69:
 1117               	.LBB35:
 1118               	.LBB33:
 468:quantum/rgblight.c ****                     if (direction) {
 1119               		.loc 1 468 0
 1120 00dc 2C2D      		mov r18,r12
 1121 00de 30E0      		ldi r19,0
 1122 00e0 A29E      		mul r10,r18
 1123 00e2 C001      		movw r24,r0
 1124 00e4 A39E      		mul r10,r19
 1125 00e6 900D      		add r25,r0
 1126 00e8 B29E      		mul r11,r18
 1127 00ea 900D      		add r25,r0
 1128 00ec 1124      		clr r1
 1129 00ee 70E0      		ldi r23,0
 1130 00f0 0E94 0000 		call __udivmodhi4
 1131               	.LVL76:
 470:quantum/rgblight.c ****                     } else {
 1132               		.loc 1 470 0
 1133 00f4 812F      		mov r24,r17
 469:quantum/rgblight.c ****                         _hue = hue + _hue;
 1134               		.loc 1 469 0
 1135 00f6 D110      		cpse r13,__zero_reg__
 1136 00f8 00C0      		rjmp .L67
 470:quantum/rgblight.c ****                     } else {
 1137               		.loc 1 470 0
 1138 00fa 860F      		add r24,r22
 1139               	.LVL77:
 1140               	.L68:
 475:quantum/rgblight.c ****                 }
 1141               		.loc 1 475 0 discriminator 2
 1142 00fc 4091 0000 		lds r20,effect_start_pos
 1143 0100 420F      		add r20,r18
 1144 0102 532F      		mov r21,r19
 1145 0104 511D      		adc r21,__zero_reg__
 1146 0106 9A01      		movw r18,r20
 1147 0108 220F      		lsl r18
 1148 010a 331F      		rol r19
 1149 010c 240F      		add r18,r20
 1150 010e 351F      		adc r19,r21
 1151 0110 2050      		subi r18,lo8(-(led))
 1152 0112 3040      		sbci r19,hi8(-(led))
 1153 0114 402F      		mov r20,r16
 1154 0116 6F2D      		mov r22,r15
 1155 0118 0E94 0000 		call sethsv
 1156               	.LVL78:
 1157               	.LBE33:
 467:quantum/rgblight.c ****                     uint8_t _hue = ((uint16_t)i * (uint16_t)range) / effect_num_leds;
 1158               		.loc 1 467 0 discriminator 2
 1159 011c C394      		inc r12
 1160               	.LVL79:
 1161 011e 00C0      		rjmp .L66
 1162               	.LVL80:
 1163               	.L67:
 1164               	.LBB34:
 472:quantum/rgblight.c ****                     }
 1165               		.loc 1 472 0
 1166 0120 861B      		sub r24,r22
 1167               	.LVL81:
 1168 0122 00C0      		rjmp .L68
 1169               	.LBE34:
 1170               	.LBE35:
 1171               	.LBE29:
 1172               		.cfi_endproc
 1173               	.LFE134:
 1175               		.section	.text.rgblight_increase_hue_helper,"ax",@progbits
 1176               	.global	rgblight_increase_hue_helper
 1178               	rgblight_increase_hue_helper:
 1179               	.LFB113:
 370:quantum/rgblight.c ****     uint8_t hue = rgblight_config.hue + RGBLIGHT_HUE_STEP;
 1180               		.loc 1 370 0
 1181               		.cfi_startproc
 1182               	.LVL82:
 1183               	/* prologue: function */
 1184               	/* frame size = 0 */
 1185               	/* stack size = 0 */
 1186               	.L__stack_usage = 0
 372:quantum/rgblight.c **** }
 1187               		.loc 1 372 0
 1188 0000 E0E0      		ldi r30,lo8(rgblight_config)
 1189 0002 F0E0      		ldi r31,hi8(rgblight_config)
 371:quantum/rgblight.c ****     rgblight_sethsv_eeprom_helper(hue, rgblight_config.sat, rgblight_config.val, write_to_eeprom);
 1190               		.loc 1 371 0
 1191 0004 9181      		ldd r25,Z+1
 372:quantum/rgblight.c **** }
 1192               		.loc 1 372 0
 1193 0006 282F      		mov r18,r24
 1194 0008 4381      		ldd r20,Z+3
 1195 000a 6281      		ldd r22,Z+2
 1196 000c 8AE0      		ldi r24,lo8(10)
 1197               	.LVL83:
 1198 000e 890F      		add r24,r25
 1199               	.LVL84:
 1200 0010 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1201               	.LVL85:
 1202               		.cfi_endproc
 1203               	.LFE113:
 1205               		.section	.text.rgblight_increase_hue_noeeprom,"ax",@progbits
 1206               	.global	rgblight_increase_hue_noeeprom
 1208               	rgblight_increase_hue_noeeprom:
 1209               	.LFB114:
 374:quantum/rgblight.c **** void rgblight_increase_hue(void) { rgblight_increase_hue_helper(true); }
 1210               		.loc 1 374 0
 1211               		.cfi_startproc
 1212               	/* prologue: function */
 1213               	/* frame size = 0 */
 1214               	/* stack size = 0 */
 1215               	.L__stack_usage = 0
 374:quantum/rgblight.c **** void rgblight_increase_hue(void) { rgblight_increase_hue_helper(true); }
 1216               		.loc 1 374 0
 1217 0000 80E0      		ldi r24,0
 1218 0002 0C94 0000 		jmp rgblight_increase_hue_helper
 1219               	.LVL86:
 1220               		.cfi_endproc
 1221               	.LFE114:
 1223               		.section	.text.rgblight_increase_hue,"ax",@progbits
 1224               	.global	rgblight_increase_hue
 1226               	rgblight_increase_hue:
 1227               	.LFB115:
 375:quantum/rgblight.c **** void rgblight_decrease_hue_helper(bool write_to_eeprom) {
 1228               		.loc 1 375 0
 1229               		.cfi_startproc
 1230               	/* prologue: function */
 1231               	/* frame size = 0 */
 1232               	/* stack size = 0 */
 1233               	.L__stack_usage = 0
 375:quantum/rgblight.c **** void rgblight_decrease_hue_helper(bool write_to_eeprom) {
 1234               		.loc 1 375 0
 1235 0000 81E0      		ldi r24,lo8(1)
 1236 0002 0C94 0000 		jmp rgblight_increase_hue_helper
 1237               	.LVL87:
 1238               		.cfi_endproc
 1239               	.LFE115:
 1241               		.section	.text.rgblight_decrease_hue_helper,"ax",@progbits
 1242               	.global	rgblight_decrease_hue_helper
 1244               	rgblight_decrease_hue_helper:
 1245               	.LFB116:
 376:quantum/rgblight.c ****     uint8_t hue = rgblight_config.hue - RGBLIGHT_HUE_STEP;
 1246               		.loc 1 376 0
 1247               		.cfi_startproc
 1248               	.LVL88:
 1249               	/* prologue: function */
 1250               	/* frame size = 0 */
 1251               	/* stack size = 0 */
 1252               	.L__stack_usage = 0
 378:quantum/rgblight.c **** }
 1253               		.loc 1 378 0
 1254 0000 E0E0      		ldi r30,lo8(rgblight_config)
 1255 0002 F0E0      		ldi r31,hi8(rgblight_config)
 377:quantum/rgblight.c ****     rgblight_sethsv_eeprom_helper(hue, rgblight_config.sat, rgblight_config.val, write_to_eeprom);
 1256               		.loc 1 377 0
 1257 0004 9181      		ldd r25,Z+1
 378:quantum/rgblight.c **** }
 1258               		.loc 1 378 0
 1259 0006 282F      		mov r18,r24
 1260 0008 4381      		ldd r20,Z+3
 1261 000a 6281      		ldd r22,Z+2
 1262 000c 86EF      		ldi r24,lo8(-10)
 1263               	.LVL89:
 1264 000e 890F      		add r24,r25
 1265               	.LVL90:
 1266 0010 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1267               	.LVL91:
 1268               		.cfi_endproc
 1269               	.LFE116:
 1271               		.section	.text.rgblight_decrease_hue_noeeprom,"ax",@progbits
 1272               	.global	rgblight_decrease_hue_noeeprom
 1274               	rgblight_decrease_hue_noeeprom:
 1275               	.LFB117:
 380:quantum/rgblight.c **** void rgblight_decrease_hue(void) { rgblight_decrease_hue_helper(true); }
 1276               		.loc 1 380 0
 1277               		.cfi_startproc
 1278               	/* prologue: function */
 1279               	/* frame size = 0 */
 1280               	/* stack size = 0 */
 1281               	.L__stack_usage = 0
 380:quantum/rgblight.c **** void rgblight_decrease_hue(void) { rgblight_decrease_hue_helper(true); }
 1282               		.loc 1 380 0
 1283 0000 80E0      		ldi r24,0
 1284 0002 0C94 0000 		jmp rgblight_decrease_hue_helper
 1285               	.LVL92:
 1286               		.cfi_endproc
 1287               	.LFE117:
 1289               		.section	.text.rgblight_decrease_hue,"ax",@progbits
 1290               	.global	rgblight_decrease_hue
 1292               	rgblight_decrease_hue:
 1293               	.LFB118:
 381:quantum/rgblight.c **** void rgblight_increase_sat_helper(bool write_to_eeprom) {
 1294               		.loc 1 381 0
 1295               		.cfi_startproc
 1296               	/* prologue: function */
 1297               	/* frame size = 0 */
 1298               	/* stack size = 0 */
 1299               	.L__stack_usage = 0
 381:quantum/rgblight.c **** void rgblight_increase_sat_helper(bool write_to_eeprom) {
 1300               		.loc 1 381 0
 1301 0000 81E0      		ldi r24,lo8(1)
 1302 0002 0C94 0000 		jmp rgblight_decrease_hue_helper
 1303               	.LVL93:
 1304               		.cfi_endproc
 1305               	.LFE118:
 1307               		.section	.text.rgblight_increase_sat_helper,"ax",@progbits
 1308               	.global	rgblight_increase_sat_helper
 1310               	rgblight_increase_sat_helper:
 1311               	.LFB119:
 382:quantum/rgblight.c ****     uint8_t sat = qadd8(rgblight_config.sat, RGBLIGHT_SAT_STEP);
 1312               		.loc 1 382 0
 1313               		.cfi_startproc
 1314               	.LVL94:
 1315               	/* prologue: function */
 1316               	/* frame size = 0 */
 1317               	/* stack size = 0 */
 1318               	.L__stack_usage = 0
 383:quantum/rgblight.c ****     rgblight_sethsv_eeprom_helper(rgblight_config.hue, sat, rgblight_config.val, write_to_eeprom);
 1319               		.loc 1 383 0
 1320 0000 E0E0      		ldi r30,lo8(rgblight_config)
 1321 0002 F0E0      		ldi r31,hi8(rgblight_config)
 1322               	.LBB36:
 1323               	.LBB37:
 1324               		.file 2 "./lib/lib8tion/math8.h"
   1:./lib/lib8tion/math8.h **** #ifndef __INC_LIB8TION_MATH_H
   2:./lib/lib8tion/math8.h **** #define __INC_LIB8TION_MATH_H
   3:./lib/lib8tion/math8.h **** 
   4:./lib/lib8tion/math8.h **** #include "scale8.h"
   5:./lib/lib8tion/math8.h **** 
   6:./lib/lib8tion/math8.h **** ///@ingroup lib8tion
   7:./lib/lib8tion/math8.h **** 
   8:./lib/lib8tion/math8.h **** ///@defgroup Math Basic math operations
   9:./lib/lib8tion/math8.h **** /// Fast, efficient 8-bit math functions specifically
  10:./lib/lib8tion/math8.h **** /// designed for high-performance LED programming.
  11:./lib/lib8tion/math8.h **** ///
  12:./lib/lib8tion/math8.h **** /// Because of the AVR(Arduino) and ARM assembly language
  13:./lib/lib8tion/math8.h **** /// implementations provided, using these functions often
  14:./lib/lib8tion/math8.h **** /// results in smaller and faster code than the equivalent
  15:./lib/lib8tion/math8.h **** /// program using plain "C" arithmetic and logic.
  16:./lib/lib8tion/math8.h **** ///@{
  17:./lib/lib8tion/math8.h **** 
  18:./lib/lib8tion/math8.h **** 
  19:./lib/lib8tion/math8.h **** /// add one byte to another, saturating at 0xFF
  20:./lib/lib8tion/math8.h **** /// @param i - first byte to add
  21:./lib/lib8tion/math8.h **** /// @param j - second byte to add
  22:./lib/lib8tion/math8.h **** /// @returns the sum of i & j, capped at 0xFF
  23:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
  24:./lib/lib8tion/math8.h **** {
  25:./lib/lib8tion/math8.h **** #if QADD8_C == 1
  26:./lib/lib8tion/math8.h ****     uint16_t t = i + j;
  27:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
  28:./lib/lib8tion/math8.h ****     return t;
  29:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
  30:./lib/lib8tion/math8.h ****     asm volatile(
 1325               		.loc 2 30 0
 1326 0004 6281      		ldd r22,Z+2
 1327 0006 21E1      		ldi r18,lo8(17)
 1328               	/* #APP */
 1329               	 ;  30 "./lib/lib8tion/math8.h" 1
 1330 0008 620F      		add r22, r18    
 1331 000a 00F4      		brcc L_1073     
 1332 000c 6FEF      		ldi r22, 0xFF  
 1333               		L_1073: 
 1334               	 ;  0 "" 2
 1335               	.LVL95:
 1336               	/* #NOAPP */
 1337               	.LBE37:
 1338               	.LBE36:
 384:quantum/rgblight.c **** }
 1339               		.loc 1 384 0
 1340 000e 282F      		mov r18,r24
 1341 0010 4381      		ldd r20,Z+3
 1342 0012 8181      		ldd r24,Z+1
 1343               	.LVL96:
 1344 0014 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1345               	.LVL97:
 1346               		.cfi_endproc
 1347               	.LFE119:
 1349               		.section	.text.rgblight_increase_sat_noeeprom,"ax",@progbits
 1350               	.global	rgblight_increase_sat_noeeprom
 1352               	rgblight_increase_sat_noeeprom:
 1353               	.LFB120:
 386:quantum/rgblight.c **** void rgblight_increase_sat(void) { rgblight_increase_sat_helper(true); }
 1354               		.loc 1 386 0
 1355               		.cfi_startproc
 1356               	/* prologue: function */
 1357               	/* frame size = 0 */
 1358               	/* stack size = 0 */
 1359               	.L__stack_usage = 0
 386:quantum/rgblight.c **** void rgblight_increase_sat(void) { rgblight_increase_sat_helper(true); }
 1360               		.loc 1 386 0
 1361 0000 80E0      		ldi r24,0
 1362 0002 0C94 0000 		jmp rgblight_increase_sat_helper
 1363               	.LVL98:
 1364               		.cfi_endproc
 1365               	.LFE120:
 1367               		.section	.text.rgblight_increase_sat,"ax",@progbits
 1368               	.global	rgblight_increase_sat
 1370               	rgblight_increase_sat:
 1371               	.LFB121:
 387:quantum/rgblight.c **** void rgblight_decrease_sat_helper(bool write_to_eeprom) {
 1372               		.loc 1 387 0
 1373               		.cfi_startproc
 1374               	/* prologue: function */
 1375               	/* frame size = 0 */
 1376               	/* stack size = 0 */
 1377               	.L__stack_usage = 0
 387:quantum/rgblight.c **** void rgblight_decrease_sat_helper(bool write_to_eeprom) {
 1378               		.loc 1 387 0
 1379 0000 81E0      		ldi r24,lo8(1)
 1380 0002 0C94 0000 		jmp rgblight_increase_sat_helper
 1381               	.LVL99:
 1382               		.cfi_endproc
 1383               	.LFE121:
 1385               		.section	.text.rgblight_decrease_sat_helper,"ax",@progbits
 1386               	.global	rgblight_decrease_sat_helper
 1388               	rgblight_decrease_sat_helper:
 1389               	.LFB122:
 388:quantum/rgblight.c ****     uint8_t sat = qsub8(rgblight_config.sat, RGBLIGHT_SAT_STEP);
 1390               		.loc 1 388 0
 1391               		.cfi_startproc
 1392               	.LVL100:
 1393               	/* prologue: function */
 1394               	/* frame size = 0 */
 1395               	/* stack size = 0 */
 1396               	.L__stack_usage = 0
 389:quantum/rgblight.c ****     rgblight_sethsv_eeprom_helper(rgblight_config.hue, sat, rgblight_config.val, write_to_eeprom);
 1397               		.loc 1 389 0
 1398 0000 E0E0      		ldi r30,lo8(rgblight_config)
 1399 0002 F0E0      		ldi r31,hi8(rgblight_config)
 1400               	.LBB38:
 1401               	.LBB39:
  31:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the C flag */
  32:./lib/lib8tion/math8.h ****          "add %0, %1    \n\t"
  33:./lib/lib8tion/math8.h **** 
  34:./lib/lib8tion/math8.h ****          /* Now test the C flag.
  35:./lib/lib8tion/math8.h ****            If C is clear, we branch around a load of 0xFF into i.
  36:./lib/lib8tion/math8.h ****            If C is set, we go ahead and load 0xFF into i.
  37:./lib/lib8tion/math8.h ****          */
  38:./lib/lib8tion/math8.h ****          "brcc L_%=     \n\t"
  39:./lib/lib8tion/math8.h ****          "ldi %0, 0xFF  \n\t"
  40:./lib/lib8tion/math8.h ****          "L_%=: "
  41:./lib/lib8tion/math8.h ****          : "+a" (i)
  42:./lib/lib8tion/math8.h ****          : "a"  (j) );
  43:./lib/lib8tion/math8.h ****     return i;
  44:./lib/lib8tion/math8.h **** #elif QADD8_ARM_DSP_ASM == 1
  45:./lib/lib8tion/math8.h ****     asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
  46:./lib/lib8tion/math8.h ****     return i;
  47:./lib/lib8tion/math8.h **** #else
  48:./lib/lib8tion/math8.h **** #error "No implementation for qadd8 available."
  49:./lib/lib8tion/math8.h **** #endif
  50:./lib/lib8tion/math8.h **** }
  51:./lib/lib8tion/math8.h **** 
  52:./lib/lib8tion/math8.h **** /// Add one byte to another, saturating at 0x7F
  53:./lib/lib8tion/math8.h **** /// @param i - first byte to add
  54:./lib/lib8tion/math8.h **** /// @param j - second byte to add
  55:./lib/lib8tion/math8.h **** /// @returns the sum of i & j, capped at 0xFF
  56:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE int8_t qadd7( int8_t i, int8_t j)
  57:./lib/lib8tion/math8.h **** {
  58:./lib/lib8tion/math8.h **** #if QADD7_C == 1
  59:./lib/lib8tion/math8.h ****     int16_t t = i + j;
  60:./lib/lib8tion/math8.h ****     if (t > 127) t = 127;
  61:./lib/lib8tion/math8.h ****     return t;
  62:./lib/lib8tion/math8.h **** #elif QADD7_AVRASM == 1
  63:./lib/lib8tion/math8.h ****     asm volatile(
  64:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the V flag */
  65:./lib/lib8tion/math8.h ****          "add %0, %1    \n\t"
  66:./lib/lib8tion/math8.h **** 
  67:./lib/lib8tion/math8.h ****          /* Now test the V flag.
  68:./lib/lib8tion/math8.h ****           If V is clear, we branch around a load of 0x7F into i.
  69:./lib/lib8tion/math8.h ****           If V is set, we go ahead and load 0x7F into i.
  70:./lib/lib8tion/math8.h ****           */
  71:./lib/lib8tion/math8.h ****          "brvc L_%=     \n\t"
  72:./lib/lib8tion/math8.h ****          "ldi %0, 0x7F  \n\t"
  73:./lib/lib8tion/math8.h ****          "L_%=: "
  74:./lib/lib8tion/math8.h ****          : "+a" (i)
  75:./lib/lib8tion/math8.h ****          : "a"  (j) );
  76:./lib/lib8tion/math8.h **** 
  77:./lib/lib8tion/math8.h ****     return i;
  78:./lib/lib8tion/math8.h **** #elif QADD7_ARM_DSP_ASM == 1
  79:./lib/lib8tion/math8.h ****     asm volatile( "qadd8 %0, %0, %1" : "+r" (i) : "r" (j));
  80:./lib/lib8tion/math8.h ****     return i;
  81:./lib/lib8tion/math8.h **** #else
  82:./lib/lib8tion/math8.h **** #error "No implementation for qadd7 available."
  83:./lib/lib8tion/math8.h **** #endif
  84:./lib/lib8tion/math8.h **** }
  85:./lib/lib8tion/math8.h **** 
  86:./lib/lib8tion/math8.h **** /// subtract one byte from another, saturating at 0x00
  87:./lib/lib8tion/math8.h **** /// @returns i - j with a floor of 0
  88:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
  89:./lib/lib8tion/math8.h **** {
  90:./lib/lib8tion/math8.h **** #if QSUB8_C == 1
  91:./lib/lib8tion/math8.h ****     int16_t t = i - j;
  92:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
  93:./lib/lib8tion/math8.h ****     return t;
  94:./lib/lib8tion/math8.h **** #elif QSUB8_AVRASM == 1
  95:./lib/lib8tion/math8.h **** 
  96:./lib/lib8tion/math8.h ****     asm volatile(
 1402               		.loc 2 96 0
 1403 0004 6281      		ldd r22,Z+2
 1404 0006 21E1      		ldi r18,lo8(17)
 1405               	/* #APP */
 1406               	 ;  96 "./lib/lib8tion/math8.h" 1
 1407 0008 621B      		sub r22, r18    
 1408 000a 00F4      		brcc L_1117     
 1409 000c 60E0      		ldi r22, 0x00  
 1410               		L_1117: 
 1411               	 ;  0 "" 2
 1412               	.LVL101:
 1413               	/* #NOAPP */
 1414               	.LBE39:
 1415               	.LBE38:
 390:quantum/rgblight.c **** }
 1416               		.loc 1 390 0
 1417 000e 282F      		mov r18,r24
 1418 0010 4381      		ldd r20,Z+3
 1419 0012 8181      		ldd r24,Z+1
 1420               	.LVL102:
 1421 0014 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1422               	.LVL103:
 1423               		.cfi_endproc
 1424               	.LFE122:
 1426               		.section	.text.rgblight_decrease_sat_noeeprom,"ax",@progbits
 1427               	.global	rgblight_decrease_sat_noeeprom
 1429               	rgblight_decrease_sat_noeeprom:
 1430               	.LFB123:
 392:quantum/rgblight.c **** void rgblight_decrease_sat(void) { rgblight_decrease_sat_helper(true); }
 1431               		.loc 1 392 0
 1432               		.cfi_startproc
 1433               	/* prologue: function */
 1434               	/* frame size = 0 */
 1435               	/* stack size = 0 */
 1436               	.L__stack_usage = 0
 392:quantum/rgblight.c **** void rgblight_decrease_sat(void) { rgblight_decrease_sat_helper(true); }
 1437               		.loc 1 392 0
 1438 0000 80E0      		ldi r24,0
 1439 0002 0C94 0000 		jmp rgblight_decrease_sat_helper
 1440               	.LVL104:
 1441               		.cfi_endproc
 1442               	.LFE123:
 1444               		.section	.text.rgblight_decrease_sat,"ax",@progbits
 1445               	.global	rgblight_decrease_sat
 1447               	rgblight_decrease_sat:
 1448               	.LFB124:
 393:quantum/rgblight.c **** void rgblight_increase_val_helper(bool write_to_eeprom) {
 1449               		.loc 1 393 0
 1450               		.cfi_startproc
 1451               	/* prologue: function */
 1452               	/* frame size = 0 */
 1453               	/* stack size = 0 */
 1454               	.L__stack_usage = 0
 393:quantum/rgblight.c **** void rgblight_increase_val_helper(bool write_to_eeprom) {
 1455               		.loc 1 393 0
 1456 0000 81E0      		ldi r24,lo8(1)
 1457 0002 0C94 0000 		jmp rgblight_decrease_sat_helper
 1458               	.LVL105:
 1459               		.cfi_endproc
 1460               	.LFE124:
 1462               		.section	.text.rgblight_increase_val_helper,"ax",@progbits
 1463               	.global	rgblight_increase_val_helper
 1465               	rgblight_increase_val_helper:
 1466               	.LFB125:
 394:quantum/rgblight.c ****     uint8_t val = qadd8(rgblight_config.val, RGBLIGHT_VAL_STEP);
 1467               		.loc 1 394 0
 1468               		.cfi_startproc
 1469               	.LVL106:
 1470               	/* prologue: function */
 1471               	/* frame size = 0 */
 1472               	/* stack size = 0 */
 1473               	.L__stack_usage = 0
 395:quantum/rgblight.c ****     rgblight_sethsv_eeprom_helper(rgblight_config.hue, rgblight_config.sat, val, write_to_eeprom);
 1474               		.loc 1 395 0
 1475 0000 E0E0      		ldi r30,lo8(rgblight_config)
 1476 0002 F0E0      		ldi r31,hi8(rgblight_config)
 1477               	.LBB40:
 1478               	.LBB41:
  30:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the C flag */
 1479               		.loc 2 30 0
 1480 0004 4381      		ldd r20,Z+3
 1481 0006 21E1      		ldi r18,lo8(17)
 1482               	/* #APP */
 1483               	 ;  30 "./lib/lib8tion/math8.h" 1
 1484 0008 420F      		add r20, r18    
 1485 000a 00F4      		brcc L_1161     
 1486 000c 4FEF      		ldi r20, 0xFF  
 1487               		L_1161: 
 1488               	 ;  0 "" 2
 1489               	.LVL107:
 1490               	/* #NOAPP */
 1491               	.LBE41:
 1492               	.LBE40:
 396:quantum/rgblight.c **** }
 1493               		.loc 1 396 0
 1494 000e 282F      		mov r18,r24
 1495 0010 6281      		ldd r22,Z+2
 1496 0012 8181      		ldd r24,Z+1
 1497               	.LVL108:
 1498 0014 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1499               	.LVL109:
 1500               		.cfi_endproc
 1501               	.LFE125:
 1503               		.section	.text.rgblight_increase_val_noeeprom,"ax",@progbits
 1504               	.global	rgblight_increase_val_noeeprom
 1506               	rgblight_increase_val_noeeprom:
 1507               	.LFB126:
 398:quantum/rgblight.c **** void rgblight_increase_val(void) { rgblight_increase_val_helper(true); }
 1508               		.loc 1 398 0
 1509               		.cfi_startproc
 1510               	/* prologue: function */
 1511               	/* frame size = 0 */
 1512               	/* stack size = 0 */
 1513               	.L__stack_usage = 0
 398:quantum/rgblight.c **** void rgblight_increase_val(void) { rgblight_increase_val_helper(true); }
 1514               		.loc 1 398 0
 1515 0000 80E0      		ldi r24,0
 1516 0002 0C94 0000 		jmp rgblight_increase_val_helper
 1517               	.LVL110:
 1518               		.cfi_endproc
 1519               	.LFE126:
 1521               		.section	.text.rgblight_increase_val,"ax",@progbits
 1522               	.global	rgblight_increase_val
 1524               	rgblight_increase_val:
 1525               	.LFB127:
 399:quantum/rgblight.c **** void rgblight_decrease_val_helper(bool write_to_eeprom) {
 1526               		.loc 1 399 0
 1527               		.cfi_startproc
 1528               	/* prologue: function */
 1529               	/* frame size = 0 */
 1530               	/* stack size = 0 */
 1531               	.L__stack_usage = 0
 399:quantum/rgblight.c **** void rgblight_decrease_val_helper(bool write_to_eeprom) {
 1532               		.loc 1 399 0
 1533 0000 81E0      		ldi r24,lo8(1)
 1534 0002 0C94 0000 		jmp rgblight_increase_val_helper
 1535               	.LVL111:
 1536               		.cfi_endproc
 1537               	.LFE127:
 1539               		.section	.text.rgblight_decrease_val_helper,"ax",@progbits
 1540               	.global	rgblight_decrease_val_helper
 1542               	rgblight_decrease_val_helper:
 1543               	.LFB128:
 400:quantum/rgblight.c ****     uint8_t val = qsub8(rgblight_config.val, RGBLIGHT_VAL_STEP);
 1544               		.loc 1 400 0
 1545               		.cfi_startproc
 1546               	.LVL112:
 1547               	/* prologue: function */
 1548               	/* frame size = 0 */
 1549               	/* stack size = 0 */
 1550               	.L__stack_usage = 0
 401:quantum/rgblight.c ****     rgblight_sethsv_eeprom_helper(rgblight_config.hue, rgblight_config.sat, val, write_to_eeprom);
 1551               		.loc 1 401 0
 1552 0000 E0E0      		ldi r30,lo8(rgblight_config)
 1553 0002 F0E0      		ldi r31,hi8(rgblight_config)
 1554               	.LBB42:
 1555               	.LBB43:
 1556               		.loc 2 96 0
 1557 0004 4381      		ldd r20,Z+3
 1558 0006 21E1      		ldi r18,lo8(17)
 1559               	/* #APP */
 1560               	 ;  96 "./lib/lib8tion/math8.h" 1
 1561 0008 421B      		sub r20, r18    
 1562 000a 00F4      		brcc L_1205     
 1563 000c 40E0      		ldi r20, 0x00  
 1564               		L_1205: 
 1565               	 ;  0 "" 2
 1566               	.LVL113:
 1567               	/* #NOAPP */
 1568               	.LBE43:
 1569               	.LBE42:
 402:quantum/rgblight.c **** }
 1570               		.loc 1 402 0
 1571 000e 282F      		mov r18,r24
 1572 0010 6281      		ldd r22,Z+2
 1573 0012 8181      		ldd r24,Z+1
 1574               	.LVL114:
 1575 0014 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1576               	.LVL115:
 1577               		.cfi_endproc
 1578               	.LFE128:
 1580               		.section	.text.rgblight_decrease_val_noeeprom,"ax",@progbits
 1581               	.global	rgblight_decrease_val_noeeprom
 1583               	rgblight_decrease_val_noeeprom:
 1584               	.LFB129:
 404:quantum/rgblight.c **** void rgblight_decrease_val(void) { rgblight_decrease_val_helper(true); }
 1585               		.loc 1 404 0
 1586               		.cfi_startproc
 1587               	/* prologue: function */
 1588               	/* frame size = 0 */
 1589               	/* stack size = 0 */
 1590               	.L__stack_usage = 0
 404:quantum/rgblight.c **** void rgblight_decrease_val(void) { rgblight_decrease_val_helper(true); }
 1591               		.loc 1 404 0
 1592 0000 80E0      		ldi r24,0
 1593 0002 0C94 0000 		jmp rgblight_decrease_val_helper
 1594               	.LVL116:
 1595               		.cfi_endproc
 1596               	.LFE129:
 1598               		.section	.text.rgblight_decrease_val,"ax",@progbits
 1599               	.global	rgblight_decrease_val
 1601               	rgblight_decrease_val:
 1602               	.LFB130:
 405:quantum/rgblight.c **** void rgblight_increase_speed(void) {
 1603               		.loc 1 405 0
 1604               		.cfi_startproc
 1605               	/* prologue: function */
 1606               	/* frame size = 0 */
 1607               	/* stack size = 0 */
 1608               	.L__stack_usage = 0
 405:quantum/rgblight.c **** void rgblight_increase_speed(void) {
 1609               		.loc 1 405 0
 1610 0000 81E0      		ldi r24,lo8(1)
 1611 0002 0C94 0000 		jmp rgblight_decrease_val_helper
 1612               	.LVL117:
 1613               		.cfi_endproc
 1614               	.LFE130:
 1616               		.section	.text.rgblight_sethsv,"ax",@progbits
 1617               	.global	rgblight_sethsv
 1619               	rgblight_sethsv:
 1620               	.LFB135:
 498:quantum/rgblight.c **** 
 1621               		.loc 1 498 0
 1622               		.cfi_startproc
 1623               	.LVL118:
 1624               	/* prologue: function */
 1625               	/* frame size = 0 */
 1626               	/* stack size = 0 */
 1627               	.L__stack_usage = 0
 498:quantum/rgblight.c **** 
 1628               		.loc 1 498 0
 1629 0000 21E0      		ldi r18,lo8(1)
 1630 0002 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1631               	.LVL119:
 1632               		.cfi_endproc
 1633               	.LFE135:
 1635               		.section	.text.rgblight_sethsv_noeeprom,"ax",@progbits
 1636               	.global	rgblight_sethsv_noeeprom
 1638               	rgblight_sethsv_noeeprom:
 1639               	.LFB136:
 500:quantum/rgblight.c **** 
 1640               		.loc 1 500 0
 1641               		.cfi_startproc
 1642               	.LVL120:
 1643               	/* prologue: function */
 1644               	/* frame size = 0 */
 1645               	/* stack size = 0 */
 1646               	.L__stack_usage = 0
 500:quantum/rgblight.c **** 
 1647               		.loc 1 500 0
 1648 0000 20E0      		ldi r18,0
 1649 0002 0C94 0000 		jmp rgblight_sethsv_eeprom_helper
 1650               	.LVL121:
 1651               		.cfi_endproc
 1652               	.LFE136:
 1654               		.section	.text.rgblight_setrgb_at,"ax",@progbits
 1655               	.global	rgblight_setrgb_at
 1657               	rgblight_setrgb_at:
 1658               	.LFB141:
 521:quantum/rgblight.c ****     if (!rgblight_config.enable || index >= RGBLED_NUM) {
 1659               		.loc 1 521 0
 1660               		.cfi_startproc
 1661               	.LVL122:
 1662               	/* prologue: function */
 1663               	/* frame size = 0 */
 1664               	/* stack size = 0 */
 1665               	.L__stack_usage = 0
 522:quantum/rgblight.c ****         return;
 1666               		.loc 1 522 0
 1667 0000 9091 0000 		lds r25,rgblight_config
 1668 0004 90FF      		sbrs r25,0
 1669 0006 00C0      		rjmp .L97
 522:quantum/rgblight.c ****         return;
 1670               		.loc 1 522 0 is_stmt 0 discriminator 1
 1671 0008 2D31      		cpi r18,lo8(29)
 1672 000a 00F4      		brsh .L97
 526:quantum/rgblight.c ****     led[index].g = g;
 1673               		.loc 1 526 0 is_stmt 1
 1674 000c 30E0      		ldi r19,0
 1675 000e F901      		movw r30,r18
 1676 0010 EE0F      		lsl r30
 1677 0012 FF1F      		rol r31
 1678 0014 E20F      		add r30,r18
 1679 0016 F31F      		adc r31,r19
 1680 0018 E050      		subi r30,lo8(-(led))
 1681 001a F040      		sbci r31,hi8(-(led))
 1682 001c 8183      		std Z+1,r24
 527:quantum/rgblight.c ****     led[index].b = b;
 1683               		.loc 1 527 0
 1684 001e 6083      		st Z,r22
 528:quantum/rgblight.c ****     rgblight_set();
 1685               		.loc 1 528 0
 1686 0020 4283      		std Z+2,r20
 529:quantum/rgblight.c **** }
 1687               		.loc 1 529 0
 1688 0022 0C94 0000 		jmp rgblight_set
 1689               	.LVL123:
 1690               	.L97:
 1691               	/* epilogue start */
 530:quantum/rgblight.c **** 
 1692               		.loc 1 530 0
 1693 0026 0895      		ret
 1694               		.cfi_endproc
 1695               	.LFE141:
 1697               		.section	.text.rgblight_sethsv_at,"ax",@progbits
 1698               	.global	rgblight_sethsv_at
 1700               	rgblight_sethsv_at:
 1701               	.LFB142:
 532:quantum/rgblight.c ****     if (!rgblight_config.enable) {
 1702               		.loc 1 532 0
 1703               		.cfi_startproc
 1704               	.LVL124:
 1705 0000 1F93      		push r17
 1706               	.LCFI32:
 1707               		.cfi_def_cfa_offset 3
 1708               		.cfi_offset 17, -2
 1709 0002 CF93      		push r28
 1710               	.LCFI33:
 1711               		.cfi_def_cfa_offset 4
 1712               		.cfi_offset 28, -3
 1713 0004 DF93      		push r29
 1714               	.LCFI34:
 1715               		.cfi_def_cfa_offset 5
 1716               		.cfi_offset 29, -4
 1717 0006 00D0      		rcall .
 1718 0008 1F92      		push __zero_reg__
 1719               	.LCFI35:
 1720               		.cfi_def_cfa_offset 8
 1721 000a CDB7      		in r28,__SP_L__
 1722 000c DEB7      		in r29,__SP_H__
 1723               	.LCFI36:
 1724               		.cfi_def_cfa_register 28
 1725               	/* prologue: function */
 1726               	/* frame size = 3 */
 1727               	/* stack size = 6 */
 1728               	.L__stack_usage = 6
 1729 000e 122F      		mov r17,r18
 533:quantum/rgblight.c ****         return;
 1730               		.loc 1 533 0
 1731 0010 9091 0000 		lds r25,rgblight_config
 1732 0014 90FF      		sbrs r25,0
 1733 0016 00C0      		rjmp .L102
 538:quantum/rgblight.c ****     rgblight_setrgb_at(tmp_led.r, tmp_led.g, tmp_led.b, index);
 1734               		.loc 1 538 0
 1735 0018 9E01      		movw r18,r28
 1736               	.LVL125:
 1737 001a 2F5F      		subi r18,-1
 1738 001c 3F4F      		sbci r19,-1
 1739 001e 0E94 0000 		call sethsv
 1740               	.LVL126:
 539:quantum/rgblight.c **** }
 1741               		.loc 1 539 0
 1742 0022 212F      		mov r18,r17
 1743 0024 4B81      		ldd r20,Y+3
 1744 0026 6981      		ldd r22,Y+1
 1745 0028 8A81      		ldd r24,Y+2
 1746 002a 0E94 0000 		call rgblight_setrgb_at
 1747               	.LVL127:
 1748               	.L102:
 1749               	/* epilogue start */
 540:quantum/rgblight.c **** 
 1750               		.loc 1 540 0
 1751 002e 0F90      		pop __tmp_reg__
 1752 0030 0F90      		pop __tmp_reg__
 1753 0032 0F90      		pop __tmp_reg__
 1754 0034 DF91      		pop r29
 1755 0036 CF91      		pop r28
 1756 0038 1F91      		pop r17
 1757               	.LVL128:
 1758 003a 0895      		ret
 1759               		.cfi_endproc
 1760               	.LFE142:
 1762               		.section	.text.rgblight_setrgb_range,"ax",@progbits
 1763               	.global	rgblight_setrgb_range
 1765               	rgblight_setrgb_range:
 1766               	.LFB144:
 554:quantum/rgblight.c ****     if (!rgblight_config.enable || start < 0 || start >= end || end > RGBLED_NUM) {
 1767               		.loc 1 554 0
 1768               		.cfi_startproc
 1769               	.LVL129:
 1770 0000 0F93      		push r16
 1771               	.LCFI37:
 1772               		.cfi_def_cfa_offset 3
 1773               		.cfi_offset 16, -2
 1774               	/* prologue: function */
 1775               	/* frame size = 0 */
 1776               	/* stack size = 1 */
 1777               	.L__stack_usage = 1
 555:quantum/rgblight.c ****         return;
 1778               		.loc 1 555 0
 1779 0002 9091 0000 		lds r25,rgblight_config
 1780 0006 90FF      		sbrs r25,0
 1781 0008 00C0      		rjmp .L108
 555:quantum/rgblight.c ****         return;
 1782               		.loc 1 555 0 is_stmt 0 discriminator 1
 1783 000a 2017      		cp r18,r16
 1784 000c 00F4      		brsh .L108
 555:quantum/rgblight.c ****         return;
 1785               		.loc 1 555 0 discriminator 2
 1786 000e 0E31      		cpi r16,lo8(30)
 1787 0010 00F4      		brsh .L108
 1788 0012 93E0      		ldi r25,lo8(3)
 1789 0014 299F      		mul r18,r25
 1790 0016 F001      		movw r30,r0
 1791 0018 1124      		clr __zero_reg__
 1792 001a E050      		subi r30,lo8(-(led))
 1793 001c F040      		sbci r31,hi8(-(led))
 1794               	.LVL130:
 1795               	.L110:
 1796               	.LBB44:
 560:quantum/rgblight.c ****         led[i].g = g;
 1797               		.loc 1 560 0 is_stmt 1 discriminator 3
 1798 001e 8183      		std Z+1,r24
 561:quantum/rgblight.c ****         led[i].b = b;
 1799               		.loc 1 561 0 discriminator 3
 1800 0020 6083      		st Z,r22
 562:quantum/rgblight.c ****     }
 1801               		.loc 1 562 0 discriminator 3
 1802 0022 4283      		std Z+2,r20
 559:quantum/rgblight.c ****         led[i].r = r;
 1803               		.loc 1 559 0 discriminator 3
 1804 0024 2F5F      		subi r18,lo8(-(1))
 1805               	.LVL131:
 1806 0026 3396      		adiw r30,3
 1807 0028 0213      		cpse r16,r18
 1808 002a 00C0      		rjmp .L110
 1809               	.LBE44:
 564:quantum/rgblight.c ****     wait_ms(1);
 1810               		.loc 1 564 0
 1811 002c 0E94 0000 		call rgblight_set
 1812               	.LVL132:
 1813               	.LBB45:
 1814               	.LBB46:
 1815               		.file 3 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 1816               		.loc 3 187 0
 1817 0030 8FE9      		ldi r24,lo8(3999)
 1818 0032 9FE0      		ldi r25,hi8(3999)
 1819 0034 0197      	1:	sbiw r24,1
 1820 0036 01F4      		brne 1b
 1821 0038 00C0      		rjmp .
 1822 003a 0000      		nop
 1823               	.LVL133:
 1824               	.L108:
 1825               	/* epilogue start */
 1826               	.LBE46:
 1827               	.LBE45:
 566:quantum/rgblight.c **** 
 1828               		.loc 1 566 0
 1829 003c 0F91      		pop r16
 1830               	.LVL134:
 1831 003e 0895      		ret
 1832               		.cfi_endproc
 1833               	.LFE144:
 1835               		.section	.text.rgblight_sethsv_range,"ax",@progbits
 1836               	.global	rgblight_sethsv_range
 1838               	rgblight_sethsv_range:
 1839               	.LFB145:
 568:quantum/rgblight.c ****     if (!rgblight_config.enable) {
 1840               		.loc 1 568 0
 1841               		.cfi_startproc
 1842               	.LVL135:
 1843 0000 0F93      		push r16
 1844               	.LCFI38:
 1845               		.cfi_def_cfa_offset 3
 1846               		.cfi_offset 16, -2
 1847 0002 1F93      		push r17
 1848               	.LCFI39:
 1849               		.cfi_def_cfa_offset 4
 1850               		.cfi_offset 17, -3
 1851 0004 CF93      		push r28
 1852               	.LCFI40:
 1853               		.cfi_def_cfa_offset 5
 1854               		.cfi_offset 28, -4
 1855 0006 DF93      		push r29
 1856               	.LCFI41:
 1857               		.cfi_def_cfa_offset 6
 1858               		.cfi_offset 29, -5
 1859 0008 00D0      		rcall .
 1860 000a 1F92      		push __zero_reg__
 1861               	.LCFI42:
 1862               		.cfi_def_cfa_offset 9
 1863 000c CDB7      		in r28,__SP_L__
 1864 000e DEB7      		in r29,__SP_H__
 1865               	.LCFI43:
 1866               		.cfi_def_cfa_register 28
 1867               	/* prologue: function */
 1868               	/* frame size = 3 */
 1869               	/* stack size = 7 */
 1870               	.L__stack_usage = 7
 1871 0010 122F      		mov r17,r18
 569:quantum/rgblight.c ****         return;
 1872               		.loc 1 569 0
 1873 0012 9091 0000 		lds r25,rgblight_config
 1874 0016 90FF      		sbrs r25,0
 1875 0018 00C0      		rjmp .L115
 574:quantum/rgblight.c ****     rgblight_setrgb_range(tmp_led.r, tmp_led.g, tmp_led.b, start, end);
 1876               		.loc 1 574 0
 1877 001a 9E01      		movw r18,r28
 1878               	.LVL136:
 1879 001c 2F5F      		subi r18,-1
 1880 001e 3F4F      		sbci r19,-1
 1881 0020 0E94 0000 		call sethsv
 1882               	.LVL137:
 575:quantum/rgblight.c **** }
 1883               		.loc 1 575 0
 1884 0024 212F      		mov r18,r17
 1885 0026 4B81      		ldd r20,Y+3
 1886 0028 6981      		ldd r22,Y+1
 1887 002a 8A81      		ldd r24,Y+2
 1888 002c 0E94 0000 		call rgblight_setrgb_range
 1889               	.LVL138:
 1890               	.L115:
 1891               	/* epilogue start */
 576:quantum/rgblight.c **** 
 1892               		.loc 1 576 0
 1893 0030 0F90      		pop __tmp_reg__
 1894 0032 0F90      		pop __tmp_reg__
 1895 0034 0F90      		pop __tmp_reg__
 1896 0036 DF91      		pop r29
 1897 0038 CF91      		pop r28
 1898 003a 1F91      		pop r17
 1899               	.LVL139:
 1900 003c 0F91      		pop r16
 1901               	.LVL140:
 1902 003e 0895      		ret
 1903               		.cfi_endproc
 1904               	.LFE145:
 1906               		.section	.text.rgblight_sethsv_master,"ax",@progbits
 1907               	.global	rgblight_sethsv_master
 1909               	rgblight_sethsv_master:
 1910               	.LFB148:
 583:quantum/rgblight.c **** 
 1911               		.loc 1 583 0
 1912               		.cfi_startproc
 1913               	.LVL141:
 1914 0000 0F93      		push r16
 1915               	.LCFI44:
 1916               		.cfi_def_cfa_offset 3
 1917               		.cfi_offset 16, -2
 1918               	/* prologue: function */
 1919               	/* frame size = 0 */
 1920               	/* stack size = 1 */
 1921               	.L__stack_usage = 1
 583:quantum/rgblight.c **** 
 1922               		.loc 1 583 0
 1923 0002 0EE0      		ldi r16,lo8(14)
 1924 0004 20E0      		ldi r18,0
 1925 0006 0E94 0000 		call rgblight_sethsv_range
 1926               	.LVL142:
 1927               	/* epilogue start */
 1928 000a 0F91      		pop r16
 1929 000c 0895      		ret
 1930               		.cfi_endproc
 1931               	.LFE148:
 1933               		.section	.text.rgblight_sethsv_slave,"ax",@progbits
 1934               	.global	rgblight_sethsv_slave
 1936               	rgblight_sethsv_slave:
 1937               	.LFB149:
 585:quantum/rgblight.c **** #endif  // ifndef RGBLIGHT_SPLIT
 1938               		.loc 1 585 0
 1939               		.cfi_startproc
 1940               	.LVL143:
 1941 0000 0F93      		push r16
 1942               	.LCFI45:
 1943               		.cfi_def_cfa_offset 3
 1944               		.cfi_offset 16, -2
 1945               	/* prologue: function */
 1946               	/* frame size = 0 */
 1947               	/* stack size = 1 */
 1948               	.L__stack_usage = 1
 585:quantum/rgblight.c **** #endif  // ifndef RGBLIGHT_SPLIT
 1949               		.loc 1 585 0
 1950 0002 0DE1      		ldi r16,lo8(29)
 1951 0004 2EE0      		ldi r18,lo8(14)
 1952 0006 0E94 0000 		call rgblight_sethsv_range
 1953               	.LVL144:
 1954               	/* epilogue start */
 1955 000a 0F91      		pop r16
 1956 000c 0895      		ret
 1957               		.cfi_endproc
 1958               	.LFE149:
 1960               		.section	.text.rgblight_setrgb_master,"ax",@progbits
 1961               	.global	rgblight_setrgb_master
 1963               	rgblight_setrgb_master:
 1964               	.LFB146:
 579:quantum/rgblight.c **** 
 1965               		.loc 1 579 0
 1966               		.cfi_startproc
 1967               	.LVL145:
 1968 0000 0F93      		push r16
 1969               	.LCFI46:
 1970               		.cfi_def_cfa_offset 3
 1971               		.cfi_offset 16, -2
 1972               	/* prologue: function */
 1973               	/* frame size = 0 */
 1974               	/* stack size = 1 */
 1975               	.L__stack_usage = 1
 579:quantum/rgblight.c **** 
 1976               		.loc 1 579 0
 1977 0002 0EE0      		ldi r16,lo8(14)
 1978 0004 20E0      		ldi r18,0
 1979 0006 0E94 0000 		call rgblight_setrgb_range
 1980               	.LVL146:
 1981               	/* epilogue start */
 1982 000a 0F91      		pop r16
 1983 000c 0895      		ret
 1984               		.cfi_endproc
 1985               	.LFE146:
 1987               		.section	.text.rgblight_setrgb_slave,"ax",@progbits
 1988               	.global	rgblight_setrgb_slave
 1990               	rgblight_setrgb_slave:
 1991               	.LFB147:
 581:quantum/rgblight.c **** 
 1992               		.loc 1 581 0
 1993               		.cfi_startproc
 1994               	.LVL147:
 1995 0000 0F93      		push r16
 1996               	.LCFI47:
 1997               		.cfi_def_cfa_offset 3
 1998               		.cfi_offset 16, -2
 1999               	/* prologue: function */
 2000               	/* frame size = 0 */
 2001               	/* stack size = 1 */
 2002               	.L__stack_usage = 1
 581:quantum/rgblight.c **** 
 2003               		.loc 1 581 0
 2004 0002 0DE1      		ldi r16,lo8(29)
 2005 0004 2EE0      		ldi r18,lo8(14)
 2006 0006 0E94 0000 		call rgblight_setrgb_range
 2007               	.LVL148:
 2008               	/* epilogue start */
 2009 000a 0F91      		pop r16
 2010 000c 0895      		ret
 2011               		.cfi_endproc
 2012               	.LFE147:
 2014               		.section	.text.rgblight_effect_rainbow_swirl,"ax",@progbits
 2015               	.global	rgblight_effect_rainbow_swirl
 2017               	rgblight_effect_rainbow_swirl:
 2018               	.LFB160:
 864:quantum/rgblight.c ****     uint8_t hue;
 2019               		.loc 1 864 0
 2020               		.cfi_startproc
 2021               	.LVL149:
 2022 0000 EF92      		push r14
 2023               	.LCFI48:
 2024               		.cfi_def_cfa_offset 3
 2025               		.cfi_offset 14, -2
 2026 0002 FF92      		push r15
 2027               	.LCFI49:
 2028               		.cfi_def_cfa_offset 4
 2029               		.cfi_offset 15, -3
 2030 0004 1F93      		push r17
 2031               	.LCFI50:
 2032               		.cfi_def_cfa_offset 5
 2033               		.cfi_offset 17, -4
 2034 0006 CF93      		push r28
 2035               	.LCFI51:
 2036               		.cfi_def_cfa_offset 6
 2037               		.cfi_offset 28, -5
 2038 0008 DF93      		push r29
 2039               	.LCFI52:
 2040               		.cfi_def_cfa_offset 7
 2041               		.cfi_offset 29, -6
 2042               	/* prologue: function */
 2043               	/* frame size = 0 */
 2044               	/* stack size = 5 */
 2045               	.L__stack_usage = 5
 2046 000a EC01      		movw r28,r24
 2047               	.LVL150:
 868:quantum/rgblight.c ****         hue = (RGBLIGHT_RAINBOW_SWIRL_RANGE / effect_num_leds * i + anim->current_hue);
 2048               		.loc 1 868 0
 2049 000c 10E0      		ldi r17,0
 869:quantum/rgblight.c ****         sethsv(hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[i + effect_start_pos
 2050               		.loc 1 869 0
 2051 000e EE24      		clr r14
 2052 0010 EA94      		dec r14
 2053 0012 F12C      		mov r15,__zero_reg__
 2054               	.LVL151:
 2055               	.L126:
 868:quantum/rgblight.c ****         hue = (RGBLIGHT_RAINBOW_SWIRL_RANGE / effect_num_leds * i + anim->current_hue);
 2056               		.loc 1 868 0 discriminator 1
 2057 0014 6091 0000 		lds r22,effect_num_leds
 2058 0018 1617      		cp r17,r22
 2059 001a 00F0      		brlo .L127
 872:quantum/rgblight.c **** 
 2060               		.loc 1 872 0
 2061 001c 0E94 0000 		call rgblight_set
 2062               	.LVL152:
 874:quantum/rgblight.c ****         anim->current_hue++;
 2063               		.loc 1 874 0
 2064 0020 9A81      		ldd r25,Y+2
 2065 0022 8C81      		ldd r24,Y+4
 2066 0024 90FF      		sbrs r25,0
 2067 0026 00C0      		rjmp .L128
 875:quantum/rgblight.c ****     } else {
 2068               		.loc 1 875 0
 2069 0028 8F5F      		subi r24,lo8(-(1))
 2070               	.L130:
 877:quantum/rgblight.c ****     }
 2071               		.loc 1 877 0
 2072 002a 8C83      		std Y+4,r24
 2073               	/* epilogue start */
 879:quantum/rgblight.c **** #endif
 2074               		.loc 1 879 0
 2075 002c DF91      		pop r29
 2076 002e CF91      		pop r28
 2077               	.LVL153:
 2078 0030 1F91      		pop r17
 2079               	.LVL154:
 2080 0032 FF90      		pop r15
 2081 0034 EF90      		pop r14
 2082 0036 0895      		ret
 2083               	.LVL155:
 2084               	.L127:
 870:quantum/rgblight.c ****     }
 2085               		.loc 1 870 0 discriminator 3
 2086 0038 2091 0000 		lds r18,effect_start_pos
 2087 003c 422F      		mov r20,r18
 2088 003e 410F      		add r20,r17
 2089 0040 5527      		clr r21
 2090 0042 551F      		rol r21
 2091 0044 CA01      		movw r24,r20
 2092 0046 9A01      		movw r18,r20
 2093 0048 220F      		lsl r18
 2094 004a 331F      		rol r19
 2095 004c 280F      		add r18,r24
 2096 004e 391F      		adc r19,r25
 2097 0050 2050      		subi r18,lo8(-(led))
 2098 0052 3040      		sbci r19,hi8(-(led))
 869:quantum/rgblight.c ****         sethsv(hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[i + effect_start_pos
 2099               		.loc 1 869 0 discriminator 3
 2100 0054 70E0      		ldi r23,0
 2101 0056 C701      		movw r24,r14
 2102 0058 0E94 0000 		call __divmodhi4
 2103               	.LVL156:
 2104 005c 962F      		mov r25,r22
 2105 005e 8C81      		ldd r24,Y+4
 870:quantum/rgblight.c ****     }
 2106               		.loc 1 870 0 discriminator 3
 2107 0060 4091 0000 		lds r20,rgblight_config+3
 2108 0064 6091 0000 		lds r22,rgblight_config+2
 2109 0068 199F      		mul r17,r25
 2110 006a 800D      		add r24,r0
 2111 006c 1124      		clr __zero_reg__
 2112 006e 0E94 0000 		call sethsv
 2113               	.LVL157:
 868:quantum/rgblight.c ****         hue = (RGBLIGHT_RAINBOW_SWIRL_RANGE / effect_num_leds * i + anim->current_hue);
 2114               		.loc 1 868 0 discriminator 3
 2115 0072 1F5F      		subi r17,lo8(-(1))
 2116               	.LVL158:
 2117 0074 00C0      		rjmp .L126
 2118               	.L128:
 877:quantum/rgblight.c ****     }
 2119               		.loc 1 877 0
 2120 0076 8150      		subi r24,lo8(-(-1))
 2121 0078 00C0      		rjmp .L130
 2122               		.cfi_endproc
 2123               	.LFE160:
 2125               		.section	.text.rgblight_effect_snake,"ax",@progbits
 2126               	.global	rgblight_effect_snake
 2128               	rgblight_effect_snake:
 2129               	.LFB161:
 885:quantum/rgblight.c ****     static uint8_t pos = 0;
 2130               		.loc 1 885 0
 2131               		.cfi_startproc
 2132               	.LVL159:
 2133 0000 BF92      		push r11
 2134               	.LCFI53:
 2135               		.cfi_def_cfa_offset 3
 2136               		.cfi_offset 11, -2
 2137 0002 CF92      		push r12
 2138               	.LCFI54:
 2139               		.cfi_def_cfa_offset 4
 2140               		.cfi_offset 12, -3
 2141 0004 DF92      		push r13
 2142               	.LCFI55:
 2143               		.cfi_def_cfa_offset 5
 2144               		.cfi_offset 13, -4
 2145 0006 EF92      		push r14
 2146               	.LCFI56:
 2147               		.cfi_def_cfa_offset 6
 2148               		.cfi_offset 14, -5
 2149 0008 FF92      		push r15
 2150               	.LCFI57:
 2151               		.cfi_def_cfa_offset 7
 2152               		.cfi_offset 15, -6
 2153 000a 0F93      		push r16
 2154               	.LCFI58:
 2155               		.cfi_def_cfa_offset 8
 2156               		.cfi_offset 16, -7
 2157 000c 1F93      		push r17
 2158               	.LCFI59:
 2159               		.cfi_def_cfa_offset 9
 2160               		.cfi_offset 17, -8
 2161 000e CF93      		push r28
 2162               	.LCFI60:
 2163               		.cfi_def_cfa_offset 10
 2164               		.cfi_offset 28, -9
 2165 0010 DF93      		push r29
 2166               	.LCFI61:
 2167               		.cfi_def_cfa_offset 11
 2168               		.cfi_offset 29, -10
 2169               	/* prologue: function */
 2170               	/* frame size = 0 */
 2171               	/* stack size = 9 */
 2172               	.L__stack_usage = 9
 2173               	.LVL160:
 891:quantum/rgblight.c ****         increment = -1;
 2174               		.loc 1 891 0
 2175 0012 FC01      		movw r30,r24
 2176 0014 8281      		ldd r24,Z+2
 2177               	.LVL161:
 892:quantum/rgblight.c ****     }
 2178               		.loc 1 892 0
 2179 0016 0FEF      		ldi r16,lo8(-1)
 891:quantum/rgblight.c ****         increment = -1;
 2180               		.loc 1 891 0
 2181 0018 80FF      		sbrs r24,0
 889:quantum/rgblight.c **** 
 2182               		.loc 1 889 0
 2183 001a 01E0      		ldi r16,lo8(1)
 2184               	.L132:
 2185               	.LVL162:
 906:quantum/rgblight.c ****         LED_TYPE *ledp = led + i + effect_start_pos;
 2186               		.loc 1 906 0
 2187 001c 10E0      		ldi r17,0
 2188               	.LVL163:
 2189               	.L133:
 906:quantum/rgblight.c ****         LED_TYPE *ledp = led + i + effect_start_pos;
 2190               		.loc 1 906 0 is_stmt 0 discriminator 1
 2191 001e 8091 0000 		lds r24,effect_num_leds
 2192 0022 1817      		cp r17,r24
 2193 0024 00F0      		brlo .L137
 921:quantum/rgblight.c ****     if (increment == 1) {
 2194               		.loc 1 921 0 is_stmt 1
 2195 0026 0E94 0000 		call rgblight_set
 2196               	.LVL164:
 2197 002a 8091 0000 		lds r24,pos.3151
 922:quantum/rgblight.c ****         if (pos - 1 < 0) {
 2198               		.loc 1 922 0
 2199 002e 0130      		cpi r16,lo8(1)
 2200 0030 01F0      		breq .+2
 2201 0032 00C0      		rjmp .L138
 923:quantum/rgblight.c ****             pos = effect_num_leds - 1;
 2202               		.loc 1 923 0
 2203 0034 8111      		cpse r24,__zero_reg__
 2204 0036 00C0      		rjmp .L139
 924:quantum/rgblight.c **** #    if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 2205               		.loc 1 924 0
 2206 0038 8091 0000 		lds r24,effect_num_leds
 2207               	.L139:
 929:quantum/rgblight.c **** #    if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 2208               		.loc 1 929 0
 2209 003c 8150      		subi r24,lo8(-(-1))
 2210               	.L143:
 935:quantum/rgblight.c **** #    if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 2211               		.loc 1 935 0
 2212 003e 8093 0000 		sts pos.3151,r24
 2213               	/* epilogue start */
 940:quantum/rgblight.c **** #endif
 2214               		.loc 1 940 0
 2215 0042 DF91      		pop r29
 2216 0044 CF91      		pop r28
 2217 0046 1F91      		pop r17
 2218               	.LVL165:
 2219 0048 0F91      		pop r16
 2220               	.LVL166:
 2221 004a FF90      		pop r15
 2222 004c EF90      		pop r14
 2223 004e DF90      		pop r13
 2224 0050 CF90      		pop r12
 2225 0052 BF90      		pop r11
 2226 0054 0895      		ret
 2227               	.LVL167:
 2228               	.L137:
 2229               	.LBB47:
 907:quantum/rgblight.c ****         ledp->r        = 0;
 2230               		.loc 1 907 0
 2231 0056 C091 0000 		lds r28,effect_start_pos
 2232 005a C12E      		mov r12,r17
 2233 005c D12C      		mov r13,__zero_reg__
 2234 005e CC0D      		add r28,r12
 2235 0060 DD2D      		mov r29,r13
 2236 0062 D11D      		adc r29,__zero_reg__
 2237 0064 CE01      		movw r24,r28
 2238 0066 880F      		lsl r24
 2239 0068 991F      		rol r25
 2240 006a C80F      		add r28,r24
 2241 006c D91F      		adc r29,r25
 2242 006e C050      		subi r28,lo8(-(led))
 2243 0070 D040      		sbci r29,hi8(-(led))
 2244               	.LVL168:
 908:quantum/rgblight.c ****         ledp->g        = 0;
 2245               		.loc 1 908 0
 2246 0072 1982      		std Y+1,__zero_reg__
 909:quantum/rgblight.c ****         ledp->b        = 0;
 2247               		.loc 1 909 0
 2248 0074 1882      		st Y,__zero_reg__
 910:quantum/rgblight.c ****         for (j = 0; j < RGBLIGHT_EFFECT_SNAKE_LENGTH; j++) {
 2249               		.loc 1 910 0
 2250 0076 1A82      		std Y+2,__zero_reg__
 2251               	.LVL169:
 2252 0078 34E0      		ldi r19,lo8(4)
 2253 007a E32E      		mov r14,r19
 2254 007c F12C      		mov r15,__zero_reg__
 2255 007e B12C      		mov r11,__zero_reg__
 2256               	.LVL170:
 2257               	.L136:
 912:quantum/rgblight.c ****             if (k < 0) {
 2258               		.loc 1 912 0
 2259 0080 8091 0000 		lds r24,pos.3151
 2260 0084 8B0D      		add r24,r11
 2261               	.LVL171:
 913:quantum/rgblight.c ****                 k = k + effect_num_leds;
 2262               		.loc 1 913 0
 2263 0086 87FF      		sbrs r24,7
 2264 0088 00C0      		rjmp .L134
 914:quantum/rgblight.c ****             }
 2265               		.loc 1 914 0
 2266 008a 9091 0000 		lds r25,effect_num_leds
 2267 008e 890F      		add r24,r25
 2268               	.LVL172:
 2269               	.L134:
 916:quantum/rgblight.c ****                 sethsv(rgblight_config.hue, rgblight_config.sat, (uint8_t)(rgblight_config.val * (R
 2270               		.loc 1 916 0
 2271 0090 082E      		mov __tmp_reg__,r24
 2272 0092 000C      		lsl r0
 2273 0094 990B      		sbc r25,r25
 2274 0096 C816      		cp r12,r24
 2275 0098 D906      		cpc r13,r25
 2276 009a 01F4      		brne .L135
 917:quantum/rgblight.c ****             }
 2277               		.loc 1 917 0
 2278 009c 8091 0000 		lds r24,rgblight_config+3
 2279               	.LVL173:
 2280 00a0 8E9D      		mul r24,r14
 2281 00a2 A001      		movw r20,r0
 2282 00a4 8F9D      		mul r24,r15
 2283 00a6 500D      		add r21,r0
 2284 00a8 1124      		clr __zero_reg__
 2285 00aa 5595      		asr r21
 2286 00ac 4795      		ror r20
 2287 00ae 5595      		asr r21
 2288 00b0 4795      		ror r20
 2289 00b2 9E01      		movw r18,r28
 2290 00b4 6091 0000 		lds r22,rgblight_config+2
 2291 00b8 8091 0000 		lds r24,rgblight_config+1
 2292 00bc 0E94 0000 		call sethsv
 2293               	.LVL174:
 2294               	.L135:
 2295 00c0 B00E      		add r11,r16
 2296 00c2 F1E0      		ldi r31,1
 2297 00c4 EF1A      		sub r14,r31
 2298 00c6 F108      		sbc r15,__zero_reg__
 911:quantum/rgblight.c ****             k = pos + j * increment;
 2299               		.loc 1 911 0 discriminator 2
 2300 00c8 01F4      		brne .L136
 2301               	.LBE47:
 906:quantum/rgblight.c ****         LED_TYPE *ledp = led + i + effect_start_pos;
 2302               		.loc 1 906 0 discriminator 2
 2303 00ca 1F5F      		subi r17,lo8(-(1))
 2304               	.LVL175:
 2305 00cc 00C0      		rjmp .L133
 2306               	.LVL176:
 2307               	.L138:
 935:quantum/rgblight.c **** #    if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 2308               		.loc 1 935 0
 2309 00ce 90E0      		ldi r25,0
 2310 00d0 0196      		adiw r24,1
 2311 00d2 6091 0000 		lds r22,effect_num_leds
 2312 00d6 70E0      		ldi r23,0
 2313 00d8 0E94 0000 		call __divmodhi4
 2314 00dc 00C0      		rjmp .L143
 2315               		.cfi_endproc
 2316               	.LFE161:
 2318               		.section	.text.rgblight_effect_knight,"ax",@progbits
 2319               	.global	rgblight_effect_knight
 2321               	rgblight_effect_knight:
 2322               	.LFB162:
 946:quantum/rgblight.c ****     static int8_t low_bound  = 0;
 2323               		.loc 1 946 0
 2324               		.cfi_startproc
 2325               	.LVL177:
 2326 0000 0F93      		push r16
 2327               	.LCFI62:
 2328               		.cfi_def_cfa_offset 3
 2329               		.cfi_offset 16, -2
 2330 0002 1F93      		push r17
 2331               	.LCFI63:
 2332               		.cfi_def_cfa_offset 4
 2333               		.cfi_offset 17, -3
 2334 0004 CF93      		push r28
 2335               	.LCFI64:
 2336               		.cfi_def_cfa_offset 5
 2337               		.cfi_offset 28, -4
 2338 0006 DF93      		push r29
 2339               	.LCFI65:
 2340               		.cfi_def_cfa_offset 6
 2341               		.cfi_offset 29, -5
 2342               	/* prologue: function */
 2343               	/* frame size = 0 */
 2344               	/* stack size = 4 */
 2345               	.L__stack_usage = 4
 961:quantum/rgblight.c ****         led[i].r = 0;
 2346               		.loc 1 961 0
 2347 0008 8091 0000 		lds r24,effect_start_pos
 2348               	.LVL178:
 2349 000c 9091 0000 		lds r25,effect_end_pos
 2350 0010 23E0      		ldi r18,lo8(3)
 2351 0012 829F      		mul r24,r18
 2352 0014 F001      		movw r30,r0
 2353 0016 1124      		clr __zero_reg__
 2354 0018 E050      		subi r30,lo8(-(led))
 2355 001a F040      		sbci r31,hi8(-(led))
 2356               	.L145:
 961:quantum/rgblight.c ****         led[i].r = 0;
 2357               		.loc 1 961 0 is_stmt 0 discriminator 1
 2358 001c 8917      		cp r24,r25
 2359 001e 00F0      		brlo .L146
 967:quantum/rgblight.c ****         cur = (i + RGBLIGHT_EFFECT_KNIGHT_OFFSET) % effect_num_leds + effect_start_pos;
 2360               		.loc 1 967 0 is_stmt 1
 2361 0020 C0E0      		ldi r28,0
 971:quantum/rgblight.c ****         } else {
 2362               		.loc 1 971 0
 2363 0022 D3E0      		ldi r29,lo8(3)
 2364               	.LVL179:
 2365               	.L147:
 967:quantum/rgblight.c ****         cur = (i + RGBLIGHT_EFFECT_KNIGHT_OFFSET) % effect_num_leds + effect_start_pos;
 2366               		.loc 1 967 0 discriminator 1
 2367 0024 6091 0000 		lds r22,effect_num_leds
 2368 0028 C617      		cp r28,r22
 2369 002a 00F0      		brlo .L150
 978:quantum/rgblight.c **** 
 2370               		.loc 1 978 0
 2371 002c 0E94 0000 		call rgblight_set
 2372               	.LVL180:
 982:quantum/rgblight.c ****     high_bound += increment;
 2373               		.loc 1 982 0
 2374 0030 2091 0000 		lds r18,increment.3169
 2375 0034 8091 0000 		lds r24,low_bound.3167
 2376 0038 820F      		add r24,r18
 2377 003a 8093 0000 		sts low_bound.3167,r24
 983:quantum/rgblight.c **** 
 2378               		.loc 1 983 0
 2379 003e 9091 0000 		lds r25,high_bound.3168
 2380 0042 920F      		add r25,r18
 2381 0044 9093 0000 		sts high_bound.3168,r25
 985:quantum/rgblight.c ****         increment = -increment;
 2382               		.loc 1 985 0
 2383 0048 1916      		cp __zero_reg__,r25
 2384 004a 04F4      		brge .L151
 985:quantum/rgblight.c ****         increment = -increment;
 2385               		.loc 1 985 0 is_stmt 0 discriminator 1
 2386 004c 082E      		mov __tmp_reg__,r24
 2387 004e 000C      		lsl r0
 2388 0050 990B      		sbc r25,r25
 2389 0052 4091 0000 		lds r20,effect_num_leds
 2390 0056 4150      		subi r20,1
 2391 0058 550B      		sbc r21,r21
 2392 005a 8417      		cp r24,r20
 2393 005c 9507      		cpc r25,r21
 2394 005e 04F0      		brlt .L144
 2395               	.L151:
 986:quantum/rgblight.c **** #    if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 2396               		.loc 1 986 0 is_stmt 1
 2397 0060 2195      		neg r18
 2398 0062 2093 0000 		sts increment.3169,r18
 2399               	.L144:
 2400               	/* epilogue start */
 993:quantum/rgblight.c **** #endif
 2401               		.loc 1 993 0
 2402 0066 DF91      		pop r29
 2403 0068 CF91      		pop r28
 2404               	.LVL181:
 2405 006a 1F91      		pop r17
 2406 006c 0F91      		pop r16
 2407 006e 0895      		ret
 2408               	.LVL182:
 2409               	.L146:
 962:quantum/rgblight.c ****         led[i].g = 0;
 2410               		.loc 1 962 0 discriminator 3
 2411 0070 1182      		std Z+1,__zero_reg__
 963:quantum/rgblight.c ****         led[i].b = 0;
 2412               		.loc 1 963 0 discriminator 3
 2413 0072 1082      		st Z,__zero_reg__
 964:quantum/rgblight.c ****     }
 2414               		.loc 1 964 0 discriminator 3
 2415 0074 1282      		std Z+2,__zero_reg__
 961:quantum/rgblight.c ****         led[i].r = 0;
 2416               		.loc 1 961 0 discriminator 3
 2417 0076 8F5F      		subi r24,lo8(-(1))
 2418               	.LVL183:
 2419 0078 3396      		adiw r30,3
 2420 007a 00C0      		rjmp .L145
 2421               	.LVL184:
 2422               	.L150:
 968:quantum/rgblight.c **** 
 2423               		.loc 1 968 0
 2424 007c 0C2F      		mov r16,r28
 2425 007e 10E0      		ldi r17,0
 2426 0080 70E0      		ldi r23,0
 2427 0082 C801      		movw r24,r16
 2428 0084 0E94 0000 		call __divmodhi4
 2429 0088 2091 0000 		lds r18,effect_start_pos
 2430 008c 820F      		add r24,r18
 2431               	.LVL185:
 2432 008e 482F      		mov r20,r24
 2433 0090 50E0      		ldi r21,0
 970:quantum/rgblight.c ****             sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[
 2434               		.loc 1 970 0
 2435 0092 2091 0000 		lds r18,low_bound.3167
 2436 0096 022E      		mov __tmp_reg__,r18
 2437 0098 000C      		lsl r0
 2438 009a 330B      		sbc r19,r19
 2439 009c 0217      		cp r16,r18
 2440 009e 1307      		cpc r17,r19
 2441 00a0 04F0      		brlt .L148
 2442               	.LVL186:
 970:quantum/rgblight.c ****             sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[
 2443               		.loc 1 970 0 is_stmt 0 discriminator 1
 2444 00a2 2091 0000 		lds r18,high_bound.3168
 2445 00a6 022E      		mov __tmp_reg__,r18
 2446 00a8 000C      		lsl r0
 2447 00aa 330B      		sbc r19,r19
 2448 00ac 2017      		cp r18,r16
 2449 00ae 3107      		cpc r19,r17
 2450 00b0 04F0      		brlt .L148
 971:quantum/rgblight.c ****         } else {
 2451               		.loc 1 971 0 is_stmt 1
 2452 00b2 8D9F      		mul r24,r29
 2453 00b4 9001      		movw r18,r0
 2454 00b6 1124      		clr __zero_reg__
 2455 00b8 2050      		subi r18,lo8(-(led))
 2456 00ba 3040      		sbci r19,hi8(-(led))
 2457 00bc 4091 0000 		lds r20,rgblight_config+3
 2458 00c0 6091 0000 		lds r22,rgblight_config+2
 2459 00c4 8091 0000 		lds r24,rgblight_config+1
 2460               	.LVL187:
 2461 00c8 0E94 0000 		call sethsv
 2462               	.LVL188:
 2463               	.L149:
 967:quantum/rgblight.c ****         cur = (i + RGBLIGHT_EFFECT_KNIGHT_OFFSET) % effect_num_leds + effect_start_pos;
 2464               		.loc 1 967 0 discriminator 2
 2465 00cc CF5F      		subi r28,lo8(-(1))
 2466               	.LVL189:
 2467 00ce 00C0      		rjmp .L147
 2468               	.LVL190:
 2469               	.L148:
 973:quantum/rgblight.c ****             led[cur].g = 0;
 2470               		.loc 1 973 0
 2471 00d0 FA01      		movw r30,r20
 2472 00d2 EE0F      		lsl r30
 2473 00d4 FF1F      		rol r31
 2474 00d6 E40F      		add r30,r20
 2475 00d8 F51F      		adc r31,r21
 2476 00da E050      		subi r30,lo8(-(led))
 2477 00dc F040      		sbci r31,hi8(-(led))
 2478 00de 1182      		std Z+1,__zero_reg__
 974:quantum/rgblight.c ****             led[cur].b = 0;
 2479               		.loc 1 974 0
 2480 00e0 1082      		st Z,__zero_reg__
 975:quantum/rgblight.c ****         }
 2481               		.loc 1 975 0
 2482 00e2 1282      		std Z+2,__zero_reg__
 2483 00e4 00C0      		rjmp .L149
 2484               		.cfi_endproc
 2485               	.LFE162:
 2487               		.section	.text.rgblight_effect_christmas,"ax",@progbits
 2488               	.global	rgblight_effect_christmas
 2490               	rgblight_effect_christmas:
 2491               	.LFB163:
 997:quantum/rgblight.c ****     uint8_t hue;
 2492               		.loc 1 997 0
 2493               		.cfi_startproc
 2494               	.LVL191:
 2495 0000 0F93      		push r16
 2496               	.LCFI66:
 2497               		.cfi_def_cfa_offset 3
 2498               		.cfi_offset 16, -2
 2499 0002 1F93      		push r17
 2500               	.LCFI67:
 2501               		.cfi_def_cfa_offset 4
 2502               		.cfi_offset 17, -3
 2503 0004 CF93      		push r28
 2504               	.LCFI68:
 2505               		.cfi_def_cfa_offset 5
 2506               		.cfi_offset 28, -4
 2507 0006 DF93      		push r29
 2508               	.LCFI69:
 2509               		.cfi_def_cfa_offset 6
 2510               		.cfi_offset 29, -5
 2511               	/* prologue: function */
 2512               	/* frame size = 0 */
 2513               	/* stack size = 4 */
 2514               	.L__stack_usage = 4
 2515 0008 8C01      		movw r16,r24
1001:quantum/rgblight.c ****     for (i = 0; i < effect_num_leds; i++) {
 2516               		.loc 1 1001 0
 2517 000a FC01      		movw r30,r24
 2518 000c 8481      		ldd r24,Z+4
 2519 000e 9581      		ldd r25,Z+5
 2520               	.LVL192:
 2521 0010 0196      		adiw r24,1
 2522 0012 8170      		andi r24,1
 2523 0014 9927      		clr r25
 2524 0016 9583      		std Z+5,r25
 2525 0018 8483      		std Z+4,r24
 2526               	.LVL193:
1002:quantum/rgblight.c ****         hue = 0 + ((i / RGBLIGHT_EFFECT_CHRISTMAS_STEP + anim->current_offset) % 2) * 85;
 2527               		.loc 1 1002 0
 2528 001a C0E0      		ldi r28,0
1003:quantum/rgblight.c ****         sethsv(hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[i + effect_start_pos
 2529               		.loc 1 1003 0
 2530 001c D5E5      		ldi r29,lo8(85)
 2531               	.LVL194:
 2532               	.L154:
1002:quantum/rgblight.c ****         hue = 0 + ((i / RGBLIGHT_EFFECT_CHRISTMAS_STEP + anim->current_offset) % 2) * 85;
 2533               		.loc 1 1002 0 discriminator 1
 2534 001e 8091 0000 		lds r24,effect_num_leds
 2535 0022 C817      		cp r28,r24
 2536 0024 00F0      		brlo .L155
 2537               	/* epilogue start */
1007:quantum/rgblight.c **** #endif
 2538               		.loc 1 1007 0
 2539 0026 DF91      		pop r29
 2540 0028 CF91      		pop r28
 2541               	.LVL195:
 2542 002a 1F91      		pop r17
 2543 002c 0F91      		pop r16
 2544               	.LVL196:
1006:quantum/rgblight.c **** }
 2545               		.loc 1 1006 0
 2546 002e 0C94 0000 		jmp rgblight_set
 2547               	.LVL197:
 2548               	.L155:
1004:quantum/rgblight.c ****     }
 2549               		.loc 1 1004 0 discriminator 3
 2550 0032 2091 0000 		lds r18,effect_start_pos
 2551 0036 422F      		mov r20,r18
 2552 0038 4C0F      		add r20,r28
 2553 003a 5527      		clr r21
 2554 003c 551F      		rol r21
 2555 003e CA01      		movw r24,r20
 2556 0040 9A01      		movw r18,r20
 2557 0042 220F      		lsl r18
 2558 0044 331F      		rol r19
 2559 0046 280F      		add r18,r24
 2560 0048 391F      		adc r19,r25
 2561 004a 2050      		subi r18,lo8(-(led))
 2562 004c 3040      		sbci r19,hi8(-(led))
1003:quantum/rgblight.c ****         sethsv(hue, rgblight_config.sat, rgblight_config.val, (LED_TYPE *)&led[i + effect_start_pos
 2563               		.loc 1 1003 0 discriminator 3
 2564 004e 8C2F      		mov r24,r28
 2565 0050 8695      		lsr r24
 2566 0052 F801      		movw r30,r16
 2567 0054 4481      		ldd r20,Z+4
 2568 0056 5581      		ldd r21,Z+5
 2569 0058 840F      		add r24,r20
 2570 005a 952F      		mov r25,r21
 2571 005c 911D      		adc r25,__zero_reg__
 2572 005e 8170      		andi r24,lo8(1)
1004:quantum/rgblight.c ****     }
 2573               		.loc 1 1004 0 discriminator 3
 2574 0060 4091 0000 		lds r20,rgblight_config+3
 2575 0064 6091 0000 		lds r22,rgblight_config+2
 2576 0068 8D9F      		mul r24,r29
 2577 006a 802D      		mov r24,r0
 2578 006c 1124      		clr r1
 2579 006e 0E94 0000 		call sethsv
 2580               	.LVL198:
1002:quantum/rgblight.c ****         hue = 0 + ((i / RGBLIGHT_EFFECT_CHRISTMAS_STEP + anim->current_offset) % 2) * 85;
 2581               		.loc 1 1002 0 discriminator 3
 2582 0072 CF5F      		subi r28,lo8(-(1))
 2583               	.LVL199:
 2584 0074 00C0      		rjmp .L154
 2585               		.cfi_endproc
 2586               	.LFE163:
 2588               		.section	.text.rgblight_effect_alternating,"ax",@progbits
 2589               	.global	rgblight_effect_alternating
 2591               	rgblight_effect_alternating:
 2592               	.LFB165:
1039:quantum/rgblight.c **** #endif
1040:quantum/rgblight.c **** 
1041:quantum/rgblight.c **** #ifdef RGBLIGHT_EFFECT_ALTERNATING
1042:quantum/rgblight.c **** void rgblight_effect_alternating(animation_status_t *anim) {
 2593               		.loc 1 1042 0
 2594               		.cfi_startproc
 2595               	.LVL200:
 2596 0000 0F93      		push r16
 2597               	.LCFI70:
 2598               		.cfi_def_cfa_offset 3
 2599               		.cfi_offset 16, -2
 2600 0002 1F93      		push r17
 2601               	.LCFI71:
 2602               		.cfi_def_cfa_offset 4
 2603               		.cfi_offset 17, -3
 2604 0004 CF93      		push r28
 2605               	.LCFI72:
 2606               		.cfi_def_cfa_offset 5
 2607               		.cfi_offset 28, -4
 2608 0006 DF93      		push r29
 2609               	.LCFI73:
 2610               		.cfi_def_cfa_offset 6
 2611               		.cfi_offset 29, -5
 2612               	/* prologue: function */
 2613               	/* frame size = 0 */
 2614               	/* stack size = 4 */
 2615               	.L__stack_usage = 4
 2616 0008 EC01      		movw r28,r24
 2617               	.LVL201:
 2618               	.LBB48:
1043:quantum/rgblight.c ****     for (int i = 0; i < effect_num_leds; i++) {
 2619               		.loc 1 1043 0
 2620 000a 10E0      		ldi r17,0
 2621 000c 00E0      		ldi r16,0
 2622               	.LVL202:
 2623               	.L157:
 2624               		.loc 1 1043 0 is_stmt 0 discriminator 1
 2625 000e 9091 0000 		lds r25,effect_num_leds
 2626 0012 9017      		cp r25,r16
 2627 0014 1106      		cpc __zero_reg__,r17
 2628 0016 01F0      		breq .+2
 2629 0018 04F4      		brge .L161
 2630               	.LBE48:
1044:quantum/rgblight.c ****         LED_TYPE *ledp = led + i + effect_start_pos;
1045:quantum/rgblight.c ****         if (i < effect_num_leds / 2 && anim->pos) {
1046:quantum/rgblight.c ****             sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, ledp);
1047:quantum/rgblight.c ****         } else if (i >= effect_num_leds / 2 && !anim->pos) {
1048:quantum/rgblight.c ****             sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, ledp);
1049:quantum/rgblight.c ****         } else {
1050:quantum/rgblight.c ****             sethsv(rgblight_config.hue, rgblight_config.sat, 0, ledp);
1051:quantum/rgblight.c ****         }
1052:quantum/rgblight.c ****     }
1053:quantum/rgblight.c ****     rgblight_set();
 2631               		.loc 1 1053 0 is_stmt 1
 2632 001a 0E94 0000 		call rgblight_set
 2633               	.LVL203:
1054:quantum/rgblight.c ****     anim->pos = (anim->pos + 1) % 2;
 2634               		.loc 1 1054 0
 2635 001e 8C81      		ldd r24,Y+4
 2636 0020 90E0      		ldi r25,0
 2637 0022 0196      		adiw r24,1
 2638 0024 8170      		andi r24,1
 2639 0026 9927      		clr r25
 2640 0028 8C83      		std Y+4,r24
 2641               	/* epilogue start */
1055:quantum/rgblight.c **** }
 2642               		.loc 1 1055 0
 2643 002a DF91      		pop r29
 2644 002c CF91      		pop r28
 2645               	.LVL204:
 2646 002e 1F91      		pop r17
 2647 0030 0F91      		pop r16
 2648               	.LVL205:
 2649 0032 0895      		ret
 2650               	.LVL206:
 2651               	.L161:
 2652               	.LBB51:
 2653               	.LBB49:
1044:quantum/rgblight.c ****         LED_TYPE *ledp = led + i + effect_start_pos;
 2654               		.loc 1 1044 0
 2655 0034 2091 0000 		lds r18,effect_start_pos
 2656 0038 A801      		movw r20,r16
 2657 003a 420F      		add r20,r18
 2658 003c 511D      		adc r21,__zero_reg__
 2659 003e 9A01      		movw r18,r20
 2660 0040 220F      		lsl r18
 2661 0042 331F      		rol r19
 2662 0044 240F      		add r18,r20
 2663 0046 351F      		adc r19,r21
 2664 0048 2050      		subi r18,lo8(-(led))
 2665 004a 3040      		sbci r19,hi8(-(led))
 2666               	.LVL207:
 2667 004c 4C81      		ldd r20,Y+4
 2668 004e 6091 0000 		lds r22,rgblight_config+2
 2669 0052 8091 0000 		lds r24,rgblight_config+1
1045:quantum/rgblight.c ****             sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, ledp);
 2670               		.loc 1 1045 0
 2671 0056 9695      		lsr r25
 2672 0058 9017      		cp r25,r16
 2673 005a 1106      		cpc __zero_reg__,r17
 2674 005c 01F0      		breq .L158
 2675 005e 04F0      		brlt .L158
1045:quantum/rgblight.c ****             sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, ledp);
 2676               		.loc 1 1045 0 is_stmt 0 discriminator 1
 2677 0060 4423      		tst r20
 2678 0062 01F0      		breq .L159
 2679               	.L166:
1048:quantum/rgblight.c ****         } else {
 2680               		.loc 1 1048 0 is_stmt 1
 2681 0064 4091 0000 		lds r20,rgblight_config+3
 2682               	.L165:
1050:quantum/rgblight.c ****         }
 2683               		.loc 1 1050 0
 2684 0068 0E94 0000 		call sethsv
 2685               	.LVL208:
 2686               	.LBE49:
1043:quantum/rgblight.c ****         LED_TYPE *ledp = led + i + effect_start_pos;
 2687               		.loc 1 1043 0
 2688 006c 0F5F      		subi r16,-1
 2689 006e 1F4F      		sbci r17,-1
 2690               	.LVL209:
 2691 0070 00C0      		rjmp .L157
 2692               	.LVL210:
 2693               	.L158:
 2694               	.LBB50:
1047:quantum/rgblight.c ****             sethsv(rgblight_config.hue, rgblight_config.sat, rgblight_config.val, ledp);
 2695               		.loc 1 1047 0 discriminator 1
 2696 0072 4423      		tst r20
 2697 0074 01F0      		breq .L166
 2698               	.L159:
1050:quantum/rgblight.c ****         }
 2699               		.loc 1 1050 0
 2700 0076 40E0      		ldi r20,0
 2701 0078 00C0      		rjmp .L165
 2702               	.LBE50:
 2703               	.LBE51:
 2704               		.cfi_endproc
 2705               	.LFE165:
 2707               		.section	.text.rgblight_disable,"ax",@progbits
 2708               	.global	rgblight_disable
 2710               	rgblight_disable:
 2711               	.LFB111:
 347:quantum/rgblight.c ****     rgblight_config.enable = 0;
 2712               		.loc 1 347 0
 2713               		.cfi_startproc
 2714               	/* prologue: function */
 2715               	/* frame size = 0 */
 2716               	/* stack size = 0 */
 2717               	.L__stack_usage = 0
 348:quantum/rgblight.c ****     eeconfig_update_rgblight(rgblight_config.raw);
 2718               		.loc 1 348 0
 2719 0000 E0E0      		ldi r30,lo8(rgblight_config)
 2720 0002 F0E0      		ldi r31,hi8(rgblight_config)
 2721 0004 8081      		ld r24,Z
 2722 0006 8E7F      		andi r24,lo8(~(1<<0))
 2723 0008 8083      		st Z,r24
 349:quantum/rgblight.c ****     dprintf("rgblight disable [EEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 2724               		.loc 1 349 0
 2725 000a 6081      		ld r22,Z
 2726 000c 7181      		ldd r23,Z+1
 2727 000e 8281      		ldd r24,Z+2
 2728 0010 9381      		ldd r25,Z+3
 2729 0012 0E94 0000 		call eeconfig_update_rgblight
 2730               	.LVL211:
 2731               	.LBB56:
 2732               	.LBB57:
 681:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 2733               		.loc 1 681 0
 2734 0016 1092 0000 		sts rgblight_status+1,__zero_reg__
 2735               	.LVL212:
 2736               	.LBE57:
 2737               	.LBE56:
 2738               	.LBB58:
 2739               	.LBB59:
 2740               		.loc 3 187 0
 2741 001a 2FEF      		ldi r18,lo8(159999)
 2742 001c 80E7      		ldi r24,hi8(159999)
 2743 001e 92E0      		ldi r25,hlo8(159999)
 2744 0020 2150      	1:	subi r18,1
 2745 0022 8040      		sbci r24,0
 2746 0024 9040      		sbci r25,0
 2747 0026 01F4      		brne 1b
 2748 0028 00C0      		rjmp .
 2749 002a 0000      		nop
 2750               	.LVL213:
 2751               	.LBE59:
 2752               	.LBE58:
 356:quantum/rgblight.c **** }
 2753               		.loc 1 356 0
 2754 002c 0C94 0000 		jmp rgblight_set
 2755               	.LVL214:
 2756               		.cfi_endproc
 2757               	.LFE111:
 2759               		.section	.text.rgblight_disable_noeeprom,"ax",@progbits
 2760               	.global	rgblight_disable_noeeprom
 2762               	rgblight_disable_noeeprom:
 2763               	.LFB112:
 359:quantum/rgblight.c ****     rgblight_config.enable = 0;
 2764               		.loc 1 359 0
 2765               		.cfi_startproc
 2766               	/* prologue: function */
 2767               	/* frame size = 0 */
 2768               	/* stack size = 0 */
 2769               	.L__stack_usage = 0
 360:quantum/rgblight.c ****     dprintf("rgblight disable [NOEEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 2770               		.loc 1 360 0
 2771 0000 E0E0      		ldi r30,lo8(rgblight_config)
 2772 0002 F0E0      		ldi r31,hi8(rgblight_config)
 2773 0004 8081      		ld r24,Z
 2774 0006 8E7F      		andi r24,lo8(~(1<<0))
 2775 0008 8083      		st Z,r24
 2776               	.LBB64:
 2777               	.LBB65:
 681:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 2778               		.loc 1 681 0
 2779 000a 1092 0000 		sts rgblight_status+1,__zero_reg__
 2780               	.LVL215:
 2781               	.LBE65:
 2782               	.LBE64:
 2783               	.LBB66:
 2784               	.LBB67:
 2785               		.loc 3 187 0
 2786 000e 2FEF      		ldi r18,lo8(159999)
 2787 0010 80E7      		ldi r24,hi8(159999)
 2788 0012 92E0      		ldi r25,hlo8(159999)
 2789 0014 2150      	1:	subi r18,1
 2790 0016 8040      		sbci r24,0
 2791 0018 9040      		sbci r25,0
 2792 001a 01F4      		brne 1b
 2793 001c 00C0      		rjmp .
 2794 001e 0000      		nop
 2795               	.LVL216:
 2796               	.LBE67:
 2797               	.LBE66:
 367:quantum/rgblight.c **** }
 2798               		.loc 1 367 0
 2799 0020 0C94 0000 		jmp rgblight_set
 2800               	.LVL217:
 2801               		.cfi_endproc
 2802               	.LFE112:
 2804               		.section	.text.rgblight_timer_init,"ax",@progbits
 2805               	.global	rgblight_timer_init
 2807               	rgblight_timer_init:
 2808               	.LFB151:
 664:quantum/rgblight.c ****     // OLD!!!! Animation timer -- AVR Timer3
 2809               		.loc 1 664 0
 2810               		.cfi_startproc
 2811               	/* prologue: function */
 2812               	/* frame size = 0 */
 2813               	/* stack size = 0 */
 2814               	.L__stack_usage = 0
 681:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 2815               		.loc 1 681 0
 2816 0000 1092 0000 		sts rgblight_status+1,__zero_reg__
 2817               	/* epilogue start */
 683:quantum/rgblight.c **** void rgblight_timer_enable(void) {
 2818               		.loc 1 683 0
 2819 0004 0895      		ret
 2820               		.cfi_endproc
 2821               	.LFE151:
 2823               		.section	.text.rgblight_timer_enable,"ax",@progbits
 2824               	.global	rgblight_timer_enable
 2826               	rgblight_timer_enable:
 2827               	.LFB152:
 684:quantum/rgblight.c ****     if (!is_static_effect(rgblight_config.mode)) {
 2828               		.loc 1 684 0
 2829               		.cfi_startproc
 2830               	/* prologue: function */
 2831               	/* frame size = 0 */
 2832               	/* stack size = 0 */
 2833               	.L__stack_usage = 0
 2834               	.LVL218:
 685:quantum/rgblight.c ****         rgblight_status.timer_enabled = true;
 2835               		.loc 1 685 0
 2836 0000 6091 0000 		lds r22,rgblight_config
 2837 0004 6695      		lsr r22
 2838               	.LBB70:
 2839               	.LBB71:
  75:quantum/rgblight.c **** 
 2840               		.loc 1 75 0
 2841 0006 70E0      		ldi r23,0
 2842 0008 4BE0      		ldi r20,lo8(11)
 2843 000a 50E0      		ldi r21,0
 2844 000c 80E0      		ldi r24,lo8(static_effect_table)
 2845 000e 90E0      		ldi r25,hi8(static_effect_table)
 2846 0010 0E94 0000 		call memchr
 2847               	.LVL219:
 2848               	.LBE71:
 2849               	.LBE70:
 685:quantum/rgblight.c ****         rgblight_status.timer_enabled = true;
 2850               		.loc 1 685 0
 2851 0014 892B      		or r24,r25
 2852 0016 01F4      		brne .L171
 686:quantum/rgblight.c ****     }
 2853               		.loc 1 686 0
 2854 0018 81E0      		ldi r24,lo8(1)
 2855 001a 8093 0000 		sts rgblight_status+1,r24
 2856               	.L171:
 688:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 2857               		.loc 1 688 0
 2858 001e 0E94 0000 		call timer_read
 2859               	.LVL220:
 2860 0022 9093 0000 		sts animation_status+1,r25
 2861 0026 8093 0000 		sts animation_status,r24
 2862               	/* epilogue start */
 691:quantum/rgblight.c **** void rgblight_timer_disable(void) {
 2863               		.loc 1 691 0
 2864 002a 0895      		ret
 2865               		.cfi_endproc
 2866               	.LFE152:
 2868               		.section	.text.rgblight_mode_eeprom_helper,"ax",@progbits
 2869               	.global	rgblight_mode_eeprom_helper
 2871               	rgblight_mode_eeprom_helper:
 2872               	.LFB104:
 278:quantum/rgblight.c ****     if (!rgblight_config.enable) {
 2873               		.loc 1 278 0
 2874               		.cfi_startproc
 2875               	.LVL221:
 2876               	/* prologue: function */
 2877               	/* frame size = 0 */
 2878               	/* stack size = 0 */
 2879               	.L__stack_usage = 0
 279:quantum/rgblight.c ****         return;
 2880               		.loc 1 279 0
 2881 0000 9091 0000 		lds r25,rgblight_config
 2882 0004 90FF      		sbrs r25,0
 2883 0006 00C0      		rjmp .L172
 2884 0008 9170      		andi r25,lo8(1)
 282:quantum/rgblight.c ****         rgblight_config.mode = RGBLIGHT_MODE_STATIC_LIGHT;
 2885               		.loc 1 282 0
 2886 000a 8111      		cpse r24,__zero_reg__
 2887 000c 00C0      		rjmp .L174
 283:quantum/rgblight.c ****     } else if (mode > RGBLIGHT_MODES) {
 2888               		.loc 1 283 0
 2889 000e 9260      		ori r25,lo8(2)
 2890               	.LVL222:
 2891               	.L183:
 287:quantum/rgblight.c ****     }
 2892               		.loc 1 287 0
 2893 0010 9093 0000 		sts rgblight_config,r25
 290:quantum/rgblight.c ****         eeconfig_update_rgblight(rgblight_config.raw);
 2894               		.loc 1 290 0
 2895 0014 6623      		tst r22
 2896 0016 01F0      		breq .L177
 291:quantum/rgblight.c ****         dprintf("rgblight mode [EEPROM]: %u\n", rgblight_config.mode);
 2897               		.loc 1 291 0
 2898 0018 6091 0000 		lds r22,rgblight_config
 2899 001c 7091 0000 		lds r23,rgblight_config+1
 2900 0020 8091 0000 		lds r24,rgblight_config+2
 2901 0024 9091 0000 		lds r25,rgblight_config+3
 2902               	.LVL223:
 2903 0028 0E94 0000 		call eeconfig_update_rgblight
 2904               	.LVL224:
 2905               	.L177:
 296:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 2906               		.loc 1 296 0
 2907 002c 6091 0000 		lds r22,rgblight_config
 2908 0030 6695      		lsr r22
 2909               	.LBB76:
 2910               	.LBB77:
  75:quantum/rgblight.c **** 
 2911               		.loc 1 75 0
 2912 0032 70E0      		ldi r23,0
 2913 0034 4BE0      		ldi r20,lo8(11)
 2914 0036 50E0      		ldi r21,0
 2915 0038 80E0      		ldi r24,lo8(static_effect_table)
 2916 003a 90E0      		ldi r25,hi8(static_effect_table)
 2917 003c 0E94 0000 		call memchr
 2918               	.LVL225:
 2919               	.LBE77:
 2920               	.LBE76:
 296:quantum/rgblight.c **** #ifdef RGBLIGHT_USE_TIMER
 2921               		.loc 1 296 0
 2922 0040 892B      		or r24,r25
 2923 0042 01F0      		breq .L178
 2924               	.LBB78:
 2925               	.LBB79:
 681:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 2926               		.loc 1 681 0
 2927 0044 1092 0000 		sts rgblight_status+1,__zero_reg__
 2928               	.L179:
 2929               	.LBE79:
 2930               	.LBE78:
 306:quantum/rgblight.c **** #endif
 2931               		.loc 1 306 0
 2932 0048 81E0      		ldi r24,lo8(1)
 2933 004a 8093 0000 		sts animation_status+3,r24
 308:quantum/rgblight.c **** }
 2934               		.loc 1 308 0
 2935 004e 4091 0000 		lds r20,rgblight_config+3
 2936 0052 6091 0000 		lds r22,rgblight_config+2
 2937 0056 8091 0000 		lds r24,rgblight_config+1
 2938 005a 0C94 0000 		jmp rgblight_sethsv_noeeprom
 2939               	.LVL226:
 2940               	.L174:
 284:quantum/rgblight.c ****         rgblight_config.mode = RGBLIGHT_MODES;
 2941               		.loc 1 284 0
 2942 005e 8532      		cpi r24,lo8(37)
 2943 0060 00F0      		brlo .L176
 285:quantum/rgblight.c ****     } else {
 2944               		.loc 1 285 0
 2945 0062 9864      		ori r25,lo8(72)
 2946 0064 00C0      		rjmp .L183
 2947               	.L176:
 287:quantum/rgblight.c ****     }
 2948               		.loc 1 287 0
 2949 0066 880F      		lsl r24
 2950               	.LVL227:
 2951 0068 982B      		or r25,r24
 2952 006a 00C0      		rjmp .L183
 2953               	.LVL228:
 2954               	.L178:
 302:quantum/rgblight.c **** #endif
 2955               		.loc 1 302 0
 2956 006c 0E94 0000 		call rgblight_timer_enable
 2957               	.LVL229:
 2958 0070 00C0      		rjmp .L179
 2959               	.LVL230:
 2960               	.L172:
 2961               	/* epilogue start */
 309:quantum/rgblight.c **** 
 2962               		.loc 1 309 0
 2963 0072 0895      		ret
 2964               		.cfi_endproc
 2965               	.LFE104:
 2967               		.section	.text.rgblight_step_helper,"ax",@progbits
 2968               	.global	rgblight_step_helper
 2970               	rgblight_step_helper:
 2971               	.LFB97:
 249:quantum/rgblight.c ****     uint8_t mode = 0;
 2972               		.loc 1 249 0
 2973               		.cfi_startproc
 2974               	.LVL231:
 2975               	/* prologue: function */
 2976               	/* frame size = 0 */
 2977               	/* stack size = 0 */
 2978               	.L__stack_usage = 0
 2979 0000 682F      		mov r22,r24
 2980               	.LVL232:
 251:quantum/rgblight.c ****     if (mode > RGBLIGHT_MODES) {
 2981               		.loc 1 251 0
 2982 0002 9091 0000 		lds r25,rgblight_config
 2983 0006 9695      		lsr r25
 2984 0008 81E0      		ldi r24,lo8(1)
 2985               	.LVL233:
 2986 000a 890F      		add r24,r25
 2987               	.LVL234:
 252:quantum/rgblight.c ****         mode = 1;
 2988               		.loc 1 252 0
 2989 000c 8532      		cpi r24,lo8(37)
 2990 000e 00F0      		brlo .L185
 253:quantum/rgblight.c ****     }
 2991               		.loc 1 253 0
 2992 0010 81E0      		ldi r24,lo8(1)
 2993               	.LVL235:
 2994               	.L185:
 255:quantum/rgblight.c **** }
 2995               		.loc 1 255 0
 2996 0012 0C94 0000 		jmp rgblight_mode_eeprom_helper
 2997               	.LVL236:
 2998               		.cfi_endproc
 2999               	.LFE97:
 3001               		.section	.text.rgblight_step_noeeprom,"ax",@progbits
 3002               	.global	rgblight_step_noeeprom
 3004               	rgblight_step_noeeprom:
 3005               	.LFB98:
 257:quantum/rgblight.c **** void rgblight_step(void) { rgblight_step_helper(true); }
 3006               		.loc 1 257 0
 3007               		.cfi_startproc
 3008               	/* prologue: function */
 3009               	/* frame size = 0 */
 3010               	/* stack size = 0 */
 3011               	.L__stack_usage = 0
 257:quantum/rgblight.c **** void rgblight_step(void) { rgblight_step_helper(true); }
 3012               		.loc 1 257 0
 3013 0000 80E0      		ldi r24,0
 3014 0002 0C94 0000 		jmp rgblight_step_helper
 3015               	.LVL237:
 3016               		.cfi_endproc
 3017               	.LFE98:
 3019               		.section	.text.rgblight_step,"ax",@progbits
 3020               	.global	rgblight_step
 3022               	rgblight_step:
 3023               	.LFB99:
 258:quantum/rgblight.c **** void rgblight_step_reverse_helper(bool write_to_eeprom) {
 3024               		.loc 1 258 0
 3025               		.cfi_startproc
 3026               	/* prologue: function */
 3027               	/* frame size = 0 */
 3028               	/* stack size = 0 */
 3029               	.L__stack_usage = 0
 258:quantum/rgblight.c **** void rgblight_step_reverse_helper(bool write_to_eeprom) {
 3030               		.loc 1 258 0
 3031 0000 81E0      		ldi r24,lo8(1)
 3032 0002 0C94 0000 		jmp rgblight_step_helper
 3033               	.LVL238:
 3034               		.cfi_endproc
 3035               	.LFE99:
 3037               		.section	.text.rgblight_step_reverse_helper,"ax",@progbits
 3038               	.global	rgblight_step_reverse_helper
 3040               	rgblight_step_reverse_helper:
 3041               	.LFB100:
 259:quantum/rgblight.c ****     uint8_t mode = 0;
 3042               		.loc 1 259 0
 3043               		.cfi_startproc
 3044               	.LVL239:
 3045               	/* prologue: function */
 3046               	/* frame size = 0 */
 3047               	/* stack size = 0 */
 3048               	.L__stack_usage = 0
 3049 0000 682F      		mov r22,r24
 3050               	.LVL240:
 261:quantum/rgblight.c ****     if (mode < 1) {
 3051               		.loc 1 261 0
 3052 0002 9091 0000 		lds r25,rgblight_config
 3053 0006 9695      		lsr r25
 3054 0008 8FEF      		ldi r24,lo8(-1)
 3055               	.LVL241:
 3056 000a 890F      		add r24,r25
 3057               	.LVL242:
 262:quantum/rgblight.c ****         mode = RGBLIGHT_MODES;
 3058               		.loc 1 262 0
 3059 000c 01F4      		brne .L189
 263:quantum/rgblight.c ****     }
 3060               		.loc 1 263 0
 3061 000e 84E2      		ldi r24,lo8(36)
 3062               	.LVL243:
 3063               	.L189:
 265:quantum/rgblight.c **** }
 3064               		.loc 1 265 0
 3065 0010 0C94 0000 		jmp rgblight_mode_eeprom_helper
 3066               	.LVL244:
 3067               		.cfi_endproc
 3068               	.LFE100:
 3070               		.section	.text.rgblight_step_reverse_noeeprom,"ax",@progbits
 3071               	.global	rgblight_step_reverse_noeeprom
 3073               	rgblight_step_reverse_noeeprom:
 3074               	.LFB101:
 267:quantum/rgblight.c **** void rgblight_step_reverse(void) { rgblight_step_reverse_helper(true); }
 3075               		.loc 1 267 0
 3076               		.cfi_startproc
 3077               	/* prologue: function */
 3078               	/* frame size = 0 */
 3079               	/* stack size = 0 */
 3080               	.L__stack_usage = 0
 267:quantum/rgblight.c **** void rgblight_step_reverse(void) { rgblight_step_reverse_helper(true); }
 3081               		.loc 1 267 0
 3082 0000 80E0      		ldi r24,0
 3083 0002 0C94 0000 		jmp rgblight_step_reverse_helper
 3084               	.LVL245:
 3085               		.cfi_endproc
 3086               	.LFE101:
 3088               		.section	.text.rgblight_step_reverse,"ax",@progbits
 3089               	.global	rgblight_step_reverse
 3091               	rgblight_step_reverse:
 3092               	.LFB102:
 268:quantum/rgblight.c **** 
 3093               		.loc 1 268 0
 3094               		.cfi_startproc
 3095               	/* prologue: function */
 3096               	/* frame size = 0 */
 3097               	/* stack size = 0 */
 3098               	.L__stack_usage = 0
 268:quantum/rgblight.c **** 
 3099               		.loc 1 268 0
 3100 0000 81E0      		ldi r24,lo8(1)
 3101 0002 0C94 0000 		jmp rgblight_step_reverse_helper
 3102               	.LVL246:
 3103               		.cfi_endproc
 3104               	.LFE102:
 3106               		.section	.text.rgblight_mode,"ax",@progbits
 3107               	.global	rgblight_mode
 3109               	rgblight_mode:
 3110               	.LFB105:
 311:quantum/rgblight.c **** 
 3111               		.loc 1 311 0
 3112               		.cfi_startproc
 3113               	.LVL247:
 3114               	/* prologue: function */
 3115               	/* frame size = 0 */
 3116               	/* stack size = 0 */
 3117               	.L__stack_usage = 0
 311:quantum/rgblight.c **** 
 3118               		.loc 1 311 0
 3119 0000 61E0      		ldi r22,lo8(1)
 3120 0002 0C94 0000 		jmp rgblight_mode_eeprom_helper
 3121               	.LVL248:
 3122               		.cfi_endproc
 3123               	.LFE105:
 3125               		.section	.text.rgblight_increase,"ax",@progbits
 3126               	.global	rgblight_increase
 3128               	rgblight_increase:
 3129               	.LFB95:
 234:quantum/rgblight.c ****     uint8_t mode = 0;
 3130               		.loc 1 234 0
 3131               		.cfi_startproc
 3132               	/* prologue: function */
 3133               	/* frame size = 0 */
 3134               	/* stack size = 0 */
 3135               	.L__stack_usage = 0
 3136               	.LVL249:
 236:quantum/rgblight.c ****         mode = rgblight_config.mode + 1;
 3137               		.loc 1 236 0
 3138 0000 8091 0000 		lds r24,rgblight_config
 3139 0004 8695      		lsr r24
 3140 0006 8432      		cpi r24,lo8(36)
 3141 0008 00F4      		brsh .L195
 237:quantum/rgblight.c ****     }
 3142               		.loc 1 237 0
 3143 000a 8F5F      		subi r24,lo8(-(1))
 3144               	.LVL250:
 3145               	.L194:
 239:quantum/rgblight.c **** }
 3146               		.loc 1 239 0
 3147 000c 0C94 0000 		jmp rgblight_mode
 3148               	.LVL251:
 3149               	.L195:
 235:quantum/rgblight.c ****     if (rgblight_config.mode < RGBLIGHT_MODES) {
 3150               		.loc 1 235 0
 3151 0010 80E0      		ldi r24,0
 3152 0012 00C0      		rjmp .L194
 3153               		.cfi_endproc
 3154               	.LFE95:
 3156               		.section	.text.rgblight_decrease,"ax",@progbits
 3157               	.global	rgblight_decrease
 3159               	rgblight_decrease:
 3160               	.LFB96:
 241:quantum/rgblight.c ****     uint8_t mode = 0;
 3161               		.loc 1 241 0
 3162               		.cfi_startproc
 3163               	/* prologue: function */
 3164               	/* frame size = 0 */
 3165               	/* stack size = 0 */
 3166               	.L__stack_usage = 0
 3167               	.LVL252:
 244:quantum/rgblight.c ****         mode = rgblight_config.mode - 1;
 3168               		.loc 1 244 0
 3169 0000 8091 0000 		lds r24,rgblight_config
 3170 0004 8695      		lsr r24
 3171 0006 8230      		cpi r24,lo8(2)
 3172 0008 00F0      		brlo .L198
 245:quantum/rgblight.c ****     }
 3173               		.loc 1 245 0
 3174 000a 8150      		subi r24,lo8(-(-1))
 3175               	.LVL253:
 3176               	.L197:
 247:quantum/rgblight.c **** }
 3177               		.loc 1 247 0
 3178 000c 0C94 0000 		jmp rgblight_mode
 3179               	.LVL254:
 3180               	.L198:
 242:quantum/rgblight.c ****     // Mode will never be < 1. If it ever is, eeprom needs to be initialized.
 3181               		.loc 1 242 0
 3182 0010 80E0      		ldi r24,0
 3183 0012 00C0      		rjmp .L197
 3184               		.cfi_endproc
 3185               	.LFE96:
 3187               		.section	.text.rgblight_enable,"ax",@progbits
 3188               	.global	rgblight_enable
 3190               	rgblight_enable:
 3191               	.LFB109:
 333:quantum/rgblight.c ****     rgblight_config.enable = 1;
 3192               		.loc 1 333 0
 3193               		.cfi_startproc
 3194               	/* prologue: function */
 3195               	/* frame size = 0 */
 3196               	/* stack size = 0 */
 3197               	.L__stack_usage = 0
 334:quantum/rgblight.c ****     // No need to update EEPROM here. rgblight_mode() will do that, actually
 3198               		.loc 1 334 0
 3199 0000 E0E0      		ldi r30,lo8(rgblight_config)
 3200 0002 F0E0      		ldi r31,hi8(rgblight_config)
 3201 0004 8081      		ld r24,Z
 3202 0006 8160      		ori r24,lo8(1<<0)
 3203 0008 8083      		st Z,r24
 338:quantum/rgblight.c **** }
 3204               		.loc 1 338 0
 3205 000a 8695      		lsr r24
 3206 000c 0C94 0000 		jmp rgblight_mode
 3207               	.LVL255:
 3208               		.cfi_endproc
 3209               	.LFE109:
 3211               		.section	.text.rgblight_toggle,"ax",@progbits
 3212               	.global	rgblight_toggle
 3214               	rgblight_toggle:
 3215               	.LFB107:
 315:quantum/rgblight.c ****     dprintf("rgblight toggle [EEPROM]: rgblight_config.enable = %u\n", !rgblight_config.enable);
 3216               		.loc 1 315 0
 3217               		.cfi_startproc
 3218               	/* prologue: function */
 3219               	/* frame size = 0 */
 3220               	/* stack size = 0 */
 3221               	.L__stack_usage = 0
 317:quantum/rgblight.c ****         rgblight_disable();
 3222               		.loc 1 317 0
 3223 0000 8091 0000 		lds r24,rgblight_config
 3224 0004 80FD      		sbrc r24,0
 318:quantum/rgblight.c ****     } else {
 3225               		.loc 1 318 0
 3226 0006 0C94 0000 		jmp rgblight_disable
 3227               	.LVL256:
 3228               	.L201:
 320:quantum/rgblight.c ****     }
 3229               		.loc 1 320 0
 3230 000a 0C94 0000 		jmp rgblight_enable
 3231               	.LVL257:
 3232               		.cfi_endproc
 3233               	.LFE107:
 3235               		.section	.text.rgblight_mode_noeeprom,"ax",@progbits
 3236               	.global	rgblight_mode_noeeprom
 3238               	rgblight_mode_noeeprom:
 3239               	.LFB106:
 313:quantum/rgblight.c **** 
 3240               		.loc 1 313 0
 3241               		.cfi_startproc
 3242               	.LVL258:
 3243               	/* prologue: function */
 3244               	/* frame size = 0 */
 3245               	/* stack size = 0 */
 3246               	.L__stack_usage = 0
 313:quantum/rgblight.c **** 
 3247               		.loc 1 313 0
 3248 0000 60E0      		ldi r22,0
 3249 0002 0C94 0000 		jmp rgblight_mode_eeprom_helper
 3250               	.LVL259:
 3251               		.cfi_endproc
 3252               	.LFE106:
 3254               		.section	.text.rgblight_init,"ax",@progbits
 3255               	.global	rgblight_init
 3257               	rgblight_init:
 3258               	.LFB92:
 181:quantum/rgblight.c ****     /* if already initialized, don't do it again.
 3259               		.loc 1 181 0
 3260               		.cfi_startproc
 3261               	/* prologue: function */
 3262               	/* frame size = 0 */
 3263               	/* stack size = 0 */
 3264               	.L__stack_usage = 0
 185:quantum/rgblight.c ****         return;
 3265               		.loc 1 185 0
 3266 0000 8091 0000 		lds r24,is_rgblight_initialized
 3267 0004 8111      		cpse r24,__zero_reg__
 3268 0006 00C0      		rjmp .L203
 189:quantum/rgblight.c ****     dprintf("rgblight_init called.\n");
 3269               		.loc 1 189 0
 3270 0008 8091 0000 		lds r24,debug_config
 3271 000c 8160      		ori r24,lo8(1<<0)
 3272 000e 8093 0000 		sts debug_config,r24
 192:quantum/rgblight.c ****         dprintf("rgblight_init eeconfig is not enabled.\n");
 3273               		.loc 1 192 0
 3274 0012 0E94 0000 		call eeconfig_is_enabled
 3275               	.LVL260:
 3276 0016 8111      		cpse r24,__zero_reg__
 3277 0018 00C0      		rjmp .L205
 194:quantum/rgblight.c ****         eeconfig_update_rgblight_default();
 3278               		.loc 1 194 0
 3279 001a 0E94 0000 		call eeconfig_init
 3280               	.LVL261:
 195:quantum/rgblight.c ****     }
 3281               		.loc 1 195 0
 3282 001e 0E94 0000 		call eeconfig_update_rgblight_default
 3283               	.LVL262:
 3284               	.L205:
 197:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_MODEHSVS;
 3285               		.loc 1 197 0
 3286 0022 0E94 0000 		call eeconfig_read_rgblight
 3287               	.LVL263:
 3288 0026 6093 0000 		sts rgblight_config,r22
 3289 002a 7093 0000 		sts rgblight_config+1,r23
 3290 002e 8093 0000 		sts rgblight_config+2,r24
 3291 0032 9093 0000 		sts rgblight_config+3,r25
 199:quantum/rgblight.c ****         dprintf("rgblight_init rgblight_config.mode = 0. Write default values to EEPROM.\n");
 3292               		.loc 1 199 0
 3293 0036 6E7F      		andi r22,lo8(-2)
 3294 0038 01F4      		brne .L206
 201:quantum/rgblight.c ****         rgblight_config.raw = eeconfig_read_rgblight();
 3295               		.loc 1 201 0
 3296 003a 0E94 0000 		call eeconfig_update_rgblight_default
 3297               	.LVL264:
 202:quantum/rgblight.c ****     }
 3298               		.loc 1 202 0
 3299 003e 0E94 0000 		call eeconfig_read_rgblight
 3300               	.LVL265:
 3301 0042 6093 0000 		sts rgblight_config,r22
 3302 0046 7093 0000 		sts rgblight_config+1,r23
 3303 004a 8093 0000 		sts rgblight_config+2,r24
 3304 004e 9093 0000 		sts rgblight_config+3,r25
 3305               	.L206:
 204:quantum/rgblight.c **** 
 3306               		.loc 1 204 0
 3307 0052 0E94 0000 		call rgblight_check_config
 3308               	.LVL266:
 3309               	.LBB82:
 3310               	.LBB83:
 681:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 3311               		.loc 1 681 0
 3312 0056 1092 0000 		sts rgblight_status+1,__zero_reg__
 3313               	.LBE83:
 3314               	.LBE82:
 212:quantum/rgblight.c ****         rgblight_mode_noeeprom(rgblight_config.mode);
 3315               		.loc 1 212 0
 3316 005a 8091 0000 		lds r24,rgblight_config
 3317 005e 80FF      		sbrs r24,0
 3318 0060 00C0      		rjmp .L207
 213:quantum/rgblight.c ****     }
 3319               		.loc 1 213 0
 3320 0062 8695      		lsr r24
 3321 0064 0E94 0000 		call rgblight_mode_noeeprom
 3322               	.LVL267:
 3323               	.L207:
 216:quantum/rgblight.c **** }
 3324               		.loc 1 216 0
 3325 0068 81E0      		ldi r24,lo8(1)
 3326 006a 8093 0000 		sts is_rgblight_initialized,r24
 3327               	.L203:
 3328               	/* epilogue start */
 217:quantum/rgblight.c **** 
 3329               		.loc 1 217 0
 3330 006e 0895      		ret
 3331               		.cfi_endproc
 3332               	.LFE92:
 3334               		.section	.text.rgblight_enable_noeeprom,"ax",@progbits
 3335               	.global	rgblight_enable_noeeprom
 3337               	rgblight_enable_noeeprom:
 3338               	.LFB110:
 341:quantum/rgblight.c ****     rgblight_config.enable = 1;
 3339               		.loc 1 341 0
 3340               		.cfi_startproc
 3341               	/* prologue: function */
 3342               	/* frame size = 0 */
 3343               	/* stack size = 0 */
 3344               	.L__stack_usage = 0
 342:quantum/rgblight.c ****     dprintf("rgblight enable [NOEEPROM]: rgblight_config.enable = %u\n", rgblight_config.enable);
 3345               		.loc 1 342 0
 3346 0000 E0E0      		ldi r30,lo8(rgblight_config)
 3347 0002 F0E0      		ldi r31,hi8(rgblight_config)
 3348 0004 8081      		ld r24,Z
 3349 0006 8160      		ori r24,lo8(1<<0)
 3350 0008 8083      		st Z,r24
 344:quantum/rgblight.c **** }
 3351               		.loc 1 344 0
 3352 000a 8695      		lsr r24
 3353 000c 0C94 0000 		jmp rgblight_mode_noeeprom
 3354               	.LVL268:
 3355               		.cfi_endproc
 3356               	.LFE110:
 3358               		.section	.text.rgblight_toggle_noeeprom,"ax",@progbits
 3359               	.global	rgblight_toggle_noeeprom
 3361               	rgblight_toggle_noeeprom:
 3362               	.LFB108:
 324:quantum/rgblight.c ****     dprintf("rgblight toggle [NOEEPROM]: rgblight_config.enable = %u\n", !rgblight_config.enable);
 3363               		.loc 1 324 0
 3364               		.cfi_startproc
 3365               	/* prologue: function */
 3366               	/* frame size = 0 */
 3367               	/* stack size = 0 */
 3368               	.L__stack_usage = 0
 326:quantum/rgblight.c ****         rgblight_disable_noeeprom();
 3369               		.loc 1 326 0
 3370 0000 8091 0000 		lds r24,rgblight_config
 3371 0004 80FD      		sbrc r24,0
 327:quantum/rgblight.c ****     } else {
 3372               		.loc 1 327 0
 3373 0006 0C94 0000 		jmp rgblight_disable_noeeprom
 3374               	.LVL269:
 3375               	.L213:
 329:quantum/rgblight.c ****     }
 3376               		.loc 1 329 0
 3377 000a 0C94 0000 		jmp rgblight_enable_noeeprom
 3378               	.LVL270:
 3379               		.cfi_endproc
 3380               	.LFE108:
 3382               		.section	.text.rgblight_update_dword,"ax",@progbits
 3383               	.global	rgblight_update_dword
 3385               	rgblight_update_dword:
 3386               	.LFB94:
 221:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_MODEHSVS;
 3387               		.loc 1 221 0
 3388               		.cfi_startproc
 3389               	.LVL271:
 3390               	/* prologue: function */
 3391               	/* frame size = 0 */
 3392               	/* stack size = 0 */
 3393               	.L__stack_usage = 0
 223:quantum/rgblight.c ****     if (rgblight_config.enable)
 3394               		.loc 1 223 0
 3395 0000 6093 0000 		sts rgblight_config,r22
 3396 0004 7093 0000 		sts rgblight_config+1,r23
 3397 0008 8093 0000 		sts rgblight_config+2,r24
 3398 000c 9093 0000 		sts rgblight_config+3,r25
 224:quantum/rgblight.c ****         rgblight_mode_noeeprom(rgblight_config.mode);
 3399               		.loc 1 224 0
 3400 0010 60FF      		sbrs r22,0
 3401 0012 00C0      		rjmp .L215
 225:quantum/rgblight.c ****     else {
 3402               		.loc 1 225 0
 3403 0014 862F      		mov r24,r22
 3404 0016 8695      		lsr r24
 3405 0018 0C94 0000 		jmp rgblight_mode_noeeprom
 3406               	.LVL272:
 3407               	.L215:
 3408               	.LBB86:
 3409               	.LBB87:
 681:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 3410               		.loc 1 681 0
 3411 001c 1092 0000 		sts rgblight_status+1,__zero_reg__
 3412               	.LBE87:
 3413               	.LBE86:
 230:quantum/rgblight.c ****     }
 3414               		.loc 1 230 0
 3415 0020 0C94 0000 		jmp rgblight_set
 3416               	.LVL273:
 3417               		.cfi_endproc
 3418               	.LFE94:
 3420               		.section	.text.rgblight_timer_disable,"ax",@progbits
 3421               	.global	rgblight_timer_disable
 3423               	rgblight_timer_disable:
 3424               	.LFB168:
 3425               		.cfi_startproc
 3426               	/* prologue: function */
 3427               	/* frame size = 0 */
 3428               	/* stack size = 0 */
 3429               	.L__stack_usage = 0
 3430 0000 1092 0000 		sts rgblight_status+1,__zero_reg__
 3431               	/* epilogue start */
 3432 0004 0895      		ret
 3433               		.cfi_endproc
 3434               	.LFE168:
 3436               		.section	.text.rgblight_timer_toggle,"ax",@progbits
 3437               	.global	rgblight_timer_toggle
 3439               	rgblight_timer_toggle:
 3440               	.LFB154:
 697:quantum/rgblight.c ****     dprintf("rgblight timer toggle.\n");
 3441               		.loc 1 697 0
 3442               		.cfi_startproc
 3443               	/* prologue: function */
 3444               	/* frame size = 0 */
 3445               	/* stack size = 0 */
 3446               	.L__stack_usage = 0
 699:quantum/rgblight.c ****         rgblight_timer_disable();
 3447               		.loc 1 699 0
 3448 0000 8091 0000 		lds r24,rgblight_status+1
 3449 0004 8823      		tst r24
 3450 0006 01F0      		breq .L218
 3451               	.LBB90:
 3452               	.LBB91:
 681:quantum/rgblight.c ****     RGBLIGHT_SPLIT_SET_CHANGE_TIMER_ENABLE;
 3453               		.loc 1 681 0
 3454 0008 1092 0000 		sts rgblight_status+1,__zero_reg__
 3455               	/* epilogue start */
 3456               	.LBE91:
 3457               	.LBE90:
 704:quantum/rgblight.c **** 
 3458               		.loc 1 704 0
 3459 000c 0895      		ret
 3460               	.L218:
 702:quantum/rgblight.c ****     }
 3461               		.loc 1 702 0
 3462 000e 0C94 0000 		jmp rgblight_timer_enable
 3463               	.LVL274:
 3464               		.cfi_endproc
 3465               	.LFE154:
 3467               		.section	.text.rgblight_show_solid_color,"ax",@progbits
 3468               	.global	rgblight_show_solid_color
 3470               	rgblight_show_solid_color:
 3471               	.LFB155:
 706:quantum/rgblight.c ****     rgblight_enable();
 3472               		.loc 1 706 0
 3473               		.cfi_startproc
 3474               	.LVL275:
 3475 0000 1F93      		push r17
 3476               	.LCFI74:
 3477               		.cfi_def_cfa_offset 3
 3478               		.cfi_offset 17, -2
 3479 0002 CF93      		push r28
 3480               	.LCFI75:
 3481               		.cfi_def_cfa_offset 4
 3482               		.cfi_offset 28, -3
 3483 0004 DF93      		push r29
 3484               	.LCFI76:
 3485               		.cfi_def_cfa_offset 5
 3486               		.cfi_offset 29, -4
 3487               	/* prologue: function */
 3488               	/* frame size = 0 */
 3489               	/* stack size = 3 */
 3490               	.L__stack_usage = 3
 3491 0006 C82F      		mov r28,r24
 3492 0008 D62F      		mov r29,r22
 3493 000a 142F      		mov r17,r20
 707:quantum/rgblight.c ****     rgblight_mode(RGBLIGHT_MODE_STATIC_LIGHT);
 3494               		.loc 1 707 0
 3495 000c 0E94 0000 		call rgblight_enable
 3496               	.LVL276:
 708:quantum/rgblight.c ****     rgblight_setrgb(r, g, b);
 3497               		.loc 1 708 0
 3498 0010 81E0      		ldi r24,lo8(1)
 3499 0012 0E94 0000 		call rgblight_mode
 3500               	.LVL277:
 709:quantum/rgblight.c **** }
 3501               		.loc 1 709 0
 3502 0016 412F      		mov r20,r17
 3503 0018 6D2F      		mov r22,r29
 3504 001a 8C2F      		mov r24,r28
 3505               	/* epilogue start */
 710:quantum/rgblight.c **** 
 3506               		.loc 1 710 0
 3507 001c DF91      		pop r29
 3508               	.LVL278:
 3509 001e CF91      		pop r28
 3510               	.LVL279:
 3511 0020 1F91      		pop r17
 3512               	.LVL280:
 709:quantum/rgblight.c **** }
 3513               		.loc 1 709 0
 3514 0022 0C94 0000 		jmp rgblight_setrgb
 3515               	.LVL281:
 3516               		.cfi_endproc
 3517               	.LFE155:
 3519               		.section	.text.rgblight_task,"ax",@progbits
 3520               	.global	rgblight_task
 3522               	rgblight_task:
 3523               	.LFB157:
 724:quantum/rgblight.c ****     if (rgblight_status.timer_enabled) {
 3524               		.loc 1 724 0
 3525               		.cfi_startproc
 3526 0000 0F93      		push r16
 3527               	.LCFI77:
 3528               		.cfi_def_cfa_offset 3
 3529               		.cfi_offset 16, -2
 3530 0002 1F93      		push r17
 3531               	.LCFI78:
 3532               		.cfi_def_cfa_offset 4
 3533               		.cfi_offset 17, -3
 3534 0004 CF93      		push r28
 3535               	.LCFI79:
 3536               		.cfi_def_cfa_offset 5
 3537               		.cfi_offset 28, -4
 3538 0006 DF93      		push r29
 3539               	.LCFI80:
 3540               		.cfi_def_cfa_offset 6
 3541               		.cfi_offset 29, -5
 3542               	/* prologue: function */
 3543               	/* frame size = 0 */
 3544               	/* stack size = 4 */
 3545               	.L__stack_usage = 4
 725:quantum/rgblight.c ****         effect_func_t effect_func   = rgblight_effect_dummy;
 3546               		.loc 1 725 0
 3547 0008 8091 0000 		lds r24,rgblight_status+1
 3548 000c 8823      		tst r24
 3549 000e 01F4      		brne .+2
 3550 0010 00C0      		rjmp .L222
 3551               	.LVL282:
 3552               	.LBB109:
 728:quantum/rgblight.c ****         animation_status.delta      = delta;
 3553               		.loc 1 728 0
 3554 0012 8091 0000 		lds r24,rgblight_status
 3555 0016 E091 0000 		lds r30,rgblight_config
 3556 001a E695      		lsr r30
 3557 001c E81B      		sub r30,r24
 3558               	.LVL283:
 729:quantum/rgblight.c **** 
 3559               		.loc 1 729 0
 3560 001e E093 0000 		sts animation_status+2,r30
 735:quantum/rgblight.c ****             // breathing mode
 3561               		.loc 1 735 0
 3562 0022 8230      		cpi r24,lo8(2)
 3563 0024 01F4      		brne .L225
 3564               	.LVL284:
 737:quantum/rgblight.c ****             effect_func   = rgblight_effect_breathing;
 3565               		.loc 1 737 0
 3566 0026 F0E0      		ldi r31,0
 3567 0028 E050      		subi r30,lo8(-(RGBLED_BREATHING_INTERVALS))
 3568 002a F040      		sbci r31,hi8(-(RGBLED_BREATHING_INTERVALS))
 3569               	.LVL285:
 3570               	.LBB110:
 3571               	.LBB111:
 549:quantum/rgblight.c **** }
 3572               		.loc 1 549 0
 3573               	/* #APP */
 3574               	 ;  549 "quantum/rgblight.c" 1
 3575 002c E491      		lpm r30, Z
 3576               		
 3577               	 ;  0 "" 2
 3578               	.LVL286:
 3579               	/* #NOAPP */
 3580               	.LBE111:
 3581               	.LBE110:
 737:quantum/rgblight.c ****             effect_func   = rgblight_effect_breathing;
 3582               		.loc 1 737 0
 3583 002e CE2F      		mov r28,r30
 3584 0030 D0E0      		ldi r29,0
 3585               	.LVL287:
 738:quantum/rgblight.c ****         }
 3586               		.loc 1 738 0
 3587 0032 00E0      		ldi r16,lo8(gs(rgblight_effect_breathing))
 3588 0034 10E0      		ldi r17,hi8(gs(rgblight_effect_breathing))
 3589               	.LVL288:
 3590               	.L226:
 789:quantum/rgblight.c ****             animation_status.restart    = false;
 3591               		.loc 1 789 0
 3592 0036 8091 0000 		lds r24,animation_status+3
 3593 003a 8823      		tst r24
 3594 003c 01F0      		breq .L232
 790:quantum/rgblight.c ****             animation_status.last_timer = timer_read() - interval_time - 1;
 3595               		.loc 1 790 0
 3596 003e 1092 0000 		sts animation_status+3,__zero_reg__
 791:quantum/rgblight.c ****             animation_status.pos16      = 0;  // restart signal to local each effect
 3597               		.loc 1 791 0
 3598 0042 0E94 0000 		call timer_read
 3599               	.LVL289:
 3600 0046 9E01      		movw r18,r28
 3601 0048 2095      		com r18
 3602 004a 3095      		com r19
 3603 004c 820F      		add r24,r18
 3604 004e 931F      		adc r25,r19
 3605 0050 9093 0000 		sts animation_status+1,r25
 3606 0054 8093 0000 		sts animation_status,r24
 792:quantum/rgblight.c ****         }
 3607               		.loc 1 792 0
 3608 0058 1092 0000 		sts animation_status+4+1,__zero_reg__
 3609 005c 1092 0000 		sts animation_status+4,__zero_reg__
 3610               	.L232:
 794:quantum/rgblight.c **** #    if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 3611               		.loc 1 794 0
 3612 0060 8091 0000 		lds r24,animation_status
 3613 0064 9091 0000 		lds r25,animation_status+1
 3614 0068 0E94 0000 		call timer_elapsed
 3615               	.LVL290:
 3616 006c 8C17      		cp r24,r28
 3617 006e 9D07      		cpc r25,r29
 3618 0070 00F4      		brsh .+2
 3619 0072 00C0      		rjmp .L222
 809:quantum/rgblight.c ****             effect_func(&animation_status);
 3620               		.loc 1 809 0
 3621 0074 E091 0000 		lds r30,animation_status
 3622 0078 F091 0000 		lds r31,animation_status+1
 3623 007c CE0F      		add r28,r30
 3624 007e DF1F      		adc r29,r31
 3625               	.LVL291:
 3626 0080 D093 0000 		sts animation_status+1,r29
 3627 0084 C093 0000 		sts animation_status,r28
 810:quantum/rgblight.c **** #    if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 3628               		.loc 1 810 0
 3629 0088 80E0      		ldi r24,lo8(animation_status)
 3630 008a 90E0      		ldi r25,hi8(animation_status)
 3631 008c F801      		movw r30,r16
 3632               	/* epilogue start */
 3633               	.LBE109:
 818:quantum/rgblight.c **** 
 3634               		.loc 1 818 0
 3635 008e DF91      		pop r29
 3636 0090 CF91      		pop r28
 3637 0092 1F91      		pop r17
 3638 0094 0F91      		pop r16
 3639               	.LVL292:
 3640               	.LBB121:
 810:quantum/rgblight.c **** #    if defined(RGBLIGHT_SPLIT) && !defined(RGBLIGHT_SPLIT_NO_ANIMATION_SYNC)
 3641               		.loc 1 810 0
 3642 0096 0994      		ijmp
 3643               	.LVL293:
 3644               	.L225:
 742:quantum/rgblight.c ****             // rainbow mood mode
 3645               		.loc 1 742 0
 3646 0098 8630      		cpi r24,lo8(6)
 3647 009a 01F4      		brne .L227
 3648               	.LVL294:
 744:quantum/rgblight.c ****             effect_func   = rgblight_effect_rainbow_mood;
 3649               		.loc 1 744 0
 3650 009c F0E0      		ldi r31,0
 3651 009e E050      		subi r30,lo8(-(RGBLED_RAINBOW_MOOD_INTERVALS))
 3652 00a0 F040      		sbci r31,hi8(-(RGBLED_RAINBOW_MOOD_INTERVALS))
 3653               	.LVL295:
 3654               	.LBB112:
 3655               	.LBB113:
 549:quantum/rgblight.c **** }
 3656               		.loc 1 549 0
 3657               	/* #APP */
 3658               	 ;  549 "quantum/rgblight.c" 1
 3659 00a2 E491      		lpm r30, Z
 3660               		
 3661               	 ;  0 "" 2
 3662               	.LVL296:
 3663               	/* #NOAPP */
 3664               	.LBE113:
 3665               	.LBE112:
 744:quantum/rgblight.c ****             effect_func   = rgblight_effect_rainbow_mood;
 3666               		.loc 1 744 0
 3667 00a4 CE2F      		mov r28,r30
 3668 00a6 D0E0      		ldi r29,0
 3669               	.LVL297:
 745:quantum/rgblight.c ****         }
 3670               		.loc 1 745 0
 3671 00a8 00E0      		ldi r16,lo8(gs(rgblight_effect_rainbow_mood))
 3672 00aa 10E0      		ldi r17,hi8(gs(rgblight_effect_rainbow_mood))
 3673 00ac 00C0      		rjmp .L226
 3674               	.LVL298:
 3675               	.L227:
 749:quantum/rgblight.c ****             // rainbow swirl mode
 3676               		.loc 1 749 0
 3677 00ae 8930      		cpi r24,lo8(9)
 3678 00b0 01F4      		brne .L228
 3679               	.LVL299:
 751:quantum/rgblight.c ****             effect_func   = rgblight_effect_rainbow_swirl;
 3680               		.loc 1 751 0
 3681 00b2 E695      		lsr r30
 3682               	.LVL300:
 3683 00b4 F0E0      		ldi r31,0
 3684 00b6 E050      		subi r30,lo8(-(RGBLED_RAINBOW_SWIRL_INTERVALS))
 3685 00b8 F040      		sbci r31,hi8(-(RGBLED_RAINBOW_SWIRL_INTERVALS))
 3686               	.LBB114:
 3687               	.LBB115:
 549:quantum/rgblight.c **** }
 3688               		.loc 1 549 0
 3689               	/* #APP */
 3690               	 ;  549 "quantum/rgblight.c" 1
 3691 00ba E491      		lpm r30, Z
 3692               		
 3693               	 ;  0 "" 2
 3694               	.LVL301:
 3695               	/* #NOAPP */
 3696               	.LBE115:
 3697               	.LBE114:
 751:quantum/rgblight.c ****             effect_func   = rgblight_effect_rainbow_swirl;
 3698               		.loc 1 751 0
 3699 00bc CE2F      		mov r28,r30
 3700 00be D0E0      		ldi r29,0
 3701               	.LVL302:
 752:quantum/rgblight.c ****         }
 3702               		.loc 1 752 0
 3703 00c0 00E0      		ldi r16,lo8(gs(rgblight_effect_rainbow_swirl))
 3704 00c2 10E0      		ldi r17,hi8(gs(rgblight_effect_rainbow_swirl))
 3705 00c4 00C0      		rjmp .L226
 3706               	.LVL303:
 3707               	.L228:
 756:quantum/rgblight.c ****             // snake mode
 3708               		.loc 1 756 0
 3709 00c6 8F30      		cpi r24,lo8(15)
 3710 00c8 01F4      		brne .L229
 3711               	.LVL304:
 758:quantum/rgblight.c ****             effect_func   = rgblight_effect_snake;
 3712               		.loc 1 758 0
 3713 00ca E695      		lsr r30
 3714               	.LVL305:
 3715 00cc F0E0      		ldi r31,0
 3716 00ce E050      		subi r30,lo8(-(RGBLED_SNAKE_INTERVALS))
 3717 00d0 F040      		sbci r31,hi8(-(RGBLED_SNAKE_INTERVALS))
 3718               	.LBB116:
 3719               	.LBB117:
 549:quantum/rgblight.c **** }
 3720               		.loc 1 549 0
 3721               	/* #APP */
 3722               	 ;  549 "quantum/rgblight.c" 1
 3723 00d2 E491      		lpm r30, Z
 3724               		
 3725               	 ;  0 "" 2
 3726               	.LVL306:
 3727               	/* #NOAPP */
 3728               	.LBE117:
 3729               	.LBE116:
 758:quantum/rgblight.c ****             effect_func   = rgblight_effect_snake;
 3730               		.loc 1 758 0
 3731 00d4 CE2F      		mov r28,r30
 3732 00d6 D0E0      		ldi r29,0
 3733               	.LVL307:
 759:quantum/rgblight.c ****         }
 3734               		.loc 1 759 0
 3735 00d8 00E0      		ldi r16,lo8(gs(rgblight_effect_snake))
 3736 00da 10E0      		ldi r17,hi8(gs(rgblight_effect_snake))
 3737 00dc 00C0      		rjmp .L226
 3738               	.LVL308:
 3739               	.L229:
 763:quantum/rgblight.c ****             // knight mode
 3740               		.loc 1 763 0
 3741 00de 8531      		cpi r24,lo8(21)
 3742 00e0 01F4      		brne .L230
 3743               	.LVL309:
 765:quantum/rgblight.c ****             effect_func   = rgblight_effect_knight;
 3744               		.loc 1 765 0
 3745 00e2 F0E0      		ldi r31,0
 3746 00e4 E050      		subi r30,lo8(-(RGBLED_KNIGHT_INTERVALS))
 3747 00e6 F040      		sbci r31,hi8(-(RGBLED_KNIGHT_INTERVALS))
 3748               	.LVL310:
 3749               	.LBB118:
 3750               	.LBB119:
 549:quantum/rgblight.c **** }
 3751               		.loc 1 549 0
 3752               	/* #APP */
 3753               	 ;  549 "quantum/rgblight.c" 1
 3754 00e8 E491      		lpm r30, Z
 3755               		
 3756               	 ;  0 "" 2
 3757               	.LVL311:
 3758               	/* #NOAPP */
 3759               	.LBE119:
 3760               	.LBE118:
 765:quantum/rgblight.c ****             effect_func   = rgblight_effect_knight;
 3761               		.loc 1 765 0
 3762 00ea CE2F      		mov r28,r30
 3763 00ec D0E0      		ldi r29,0
 3764               	.LVL312:
 766:quantum/rgblight.c ****         }
 3765               		.loc 1 766 0
 3766 00ee 00E0      		ldi r16,lo8(gs(rgblight_effect_knight))
 3767 00f0 10E0      		ldi r17,hi8(gs(rgblight_effect_knight))
 3768 00f2 00C0      		rjmp .L226
 3769               	.LVL313:
 3770               	.L230:
 772:quantum/rgblight.c ****             effect_func   = (effect_func_t)rgblight_effect_christmas;
 3771               		.loc 1 772 0
 3772 00f4 C8EE      		ldi r28,lo8(-24)
 3773 00f6 D3E0      		ldi r29,lo8(3)
 773:quantum/rgblight.c ****         }
 3774               		.loc 1 773 0
 3775 00f8 00E0      		ldi r16,lo8(gs(rgblight_effect_christmas))
 3776 00fa 10E0      		ldi r17,hi8(gs(rgblight_effect_christmas))
 770:quantum/rgblight.c ****             // christmas mode
 3777               		.loc 1 770 0
 3778 00fc 8831      		cpi r24,lo8(24)
 3779 00fe 01F4      		brne .+2
 3780 0100 00C0      		rjmp .L226
 777:quantum/rgblight.c ****             // RGB test mode
 3781               		.loc 1 777 0
 3782 0102 8332      		cpi r24,lo8(35)
 3783 0104 01F4      		brne .L231
 3784               	.LVL314:
 3785               	.LBB120:
 779:quantum/rgblight.c ****             effect_func   = (effect_func_t)rgblight_effect_rgbtest;
 3786               		.loc 1 779 0
 3787 0106 E0E0      		ldi r30,lo8(RGBLED_RGBTEST_INTERVALS)
 3788 0108 F0E0      		ldi r31,hi8(RGBLED_RGBTEST_INTERVALS)
 3789               	.LVL315:
 3790               	/* #APP */
 3791               	 ;  779 "quantum/rgblight.c" 1
 3792 010a C591      		lpm r28, Z+
 3793 010c D491      		lpm r29, Z
 3794               		
 3795               	 ;  0 "" 2
 3796               	.LVL316:
 3797               	/* #NOAPP */
 3798               	.LBE120:
 780:quantum/rgblight.c ****         }
 3799               		.loc 1 780 0
 3800 010e 00E0      		ldi r16,lo8(gs(rgblight_effect_rgbtest))
 3801 0110 10E0      		ldi r17,hi8(gs(rgblight_effect_rgbtest))
 3802 0112 00C0      		rjmp .L226
 3803               	.LVL317:
 3804               	.L231:
 785:quantum/rgblight.c ****             effect_func   = (effect_func_t)rgblight_effect_alternating;
 3805               		.loc 1 785 0
 3806 0114 C4EF      		ldi r28,lo8(-12)
 3807 0116 D1E0      		ldi r29,lo8(1)
 786:quantum/rgblight.c ****         }
 3808               		.loc 1 786 0
 3809 0118 00E0      		ldi r16,lo8(gs(rgblight_effect_alternating))
 3810 011a 10E0      		ldi r17,hi8(gs(rgblight_effect_alternating))
 784:quantum/rgblight.c ****             interval_time = 500;
 3811               		.loc 1 784 0
 3812 011c 8432      		cpi r24,lo8(36)
 3813 011e 01F4      		brne .+2
 3814 0120 00C0      		rjmp .L226
 727:quantum/rgblight.c ****         uint8_t       delta         = rgblight_config.mode - rgblight_status.base_mode;
 3815               		.loc 1 727 0
 3816 0122 C0ED      		ldi r28,lo8(-48)
 3817 0124 D7E0      		ldi r29,lo8(7)
 726:quantum/rgblight.c ****         uint16_t      interval_time = 2000;  // dummy interval
 3818               		.loc 1 726 0
 3819 0126 00E0      		ldi r16,lo8(gs(rgblight_effect_dummy))
 3820 0128 10E0      		ldi r17,hi8(gs(rgblight_effect_dummy))
 3821 012a 00C0      		rjmp .L226
 3822               	.LVL318:
 3823               	.L222:
 3824               	/* epilogue start */
 3825               	.LBE121:
 818:quantum/rgblight.c **** 
 3826               		.loc 1 818 0
 3827 012c DF91      		pop r29
 3828 012e CF91      		pop r28
 3829 0130 1F91      		pop r17
 3830 0132 0F91      		pop r16
 3831 0134 0895      		ret
 3832               		.cfi_endproc
 3833               	.LFE157:
 3835               		.section	.bss.maxval.3190,"aw",@nobits
 3838               	maxval.3190:
 3839 0000 00        		.zero	1
 3840               		.section	.data.increment.3169,"aw",@progbits
 3843               	increment.3169:
 3844 0000 01        		.byte	1
 3845               		.section	.data.high_bound.3168,"aw",@progbits
 3848               	high_bound.3168:
 3849 0000 02        		.byte	2
 3850               		.section	.bss.low_bound.3167,"aw",@nobits
 3853               	low_bound.3167:
 3854 0000 00        		.zero	1
 3855               		.section	.bss.pos.3151,"aw",@nobits
 3858               	pos.3151:
 3859 0000 00        		.zero	1
 3860               		.weak	RGBLED_RGBTEST_INTERVALS
 3861               		.section	.progmem.data.RGBLED_RGBTEST_INTERVALS,"a",@progbits
 3864               	RGBLED_RGBTEST_INTERVALS:
 3865 0000 0004      		.word	1024
 3866               		.weak	RGBLED_KNIGHT_INTERVALS
 3867               		.section	.progmem.data.RGBLED_KNIGHT_INTERVALS,"a",@progbits
 3870               	RGBLED_KNIGHT_INTERVALS:
 3871 0000 7F        		.byte	127
 3872 0001 3F        		.byte	63
 3873 0002 1F        		.byte	31
 3874               		.weak	RGBLED_SNAKE_INTERVALS
 3875               		.section	.progmem.data.RGBLED_SNAKE_INTERVALS,"a",@progbits
 3878               	RGBLED_SNAKE_INTERVALS:
 3879 0000 64        		.byte	100
 3880 0001 32        		.byte	50
 3881 0002 14        		.byte	20
 3882               		.weak	RGBLED_RAINBOW_SWIRL_INTERVALS
 3883               		.section	.progmem.data.RGBLED_RAINBOW_SWIRL_INTERVALS,"a",@progbits
 3886               	RGBLED_RAINBOW_SWIRL_INTERVALS:
 3887 0000 64        		.byte	100
 3888 0001 32        		.byte	50
 3889 0002 14        		.byte	20
 3890               		.weak	RGBLED_RAINBOW_MOOD_INTERVALS
 3891               		.section	.progmem.data.RGBLED_RAINBOW_MOOD_INTERVALS,"a",@progbits
 3894               	RGBLED_RAINBOW_MOOD_INTERVALS:
 3895 0000 78        		.byte	120
 3896 0001 3C        		.byte	60
 3897 0002 1E        		.byte	30
 3898               		.weak	RGBLED_BREATHING_INTERVALS
 3899               		.section	.progmem.data.RGBLED_BREATHING_INTERVALS,"a",@progbits
 3902               	RGBLED_BREATHING_INTERVALS:
 3903 0000 1E        		.byte	30
 3904 0001 14        		.byte	20
 3905 0002 0A        		.byte	10
 3906 0003 05        		.byte	5
 3907               	.global	rgblight_effect_breathe_table
 3908               		.section	.progmem.data.rgblight_effect_breathe_table,"a",@progbits
 3911               	rgblight_effect_breathe_table:
 3912 0000 22        		.byte	34
 3913 0001 23        		.byte	35
 3914 0002 25        		.byte	37
 3915 0003 26        		.byte	38
 3916 0004 28        		.byte	40
 3917 0005 29        		.byte	41
 3918 0006 2A        		.byte	42
 3919 0007 2C        		.byte	44
 3920 0008 2D        		.byte	45
 3921 0009 2F        		.byte	47
 3922 000a 30        		.byte	48
 3923 000b 32        		.byte	50
 3924 000c 33        		.byte	51
 3925 000d 35        		.byte	53
 3926 000e 36        		.byte	54
 3927 000f 38        		.byte	56
 3928 0010 3A        		.byte	58
 3929 0011 3B        		.byte	59
 3930 0012 3D        		.byte	61
 3931 0013 3E        		.byte	62
 3932 0014 40        		.byte	64
 3933 0015 42        		.byte	66
 3934 0016 43        		.byte	67
 3935 0017 45        		.byte	69
 3936 0018 47        		.byte	71
 3937 0019 49        		.byte	73
 3938 001a 4A        		.byte	74
 3939 001b 4C        		.byte	76
 3940 001c 4E        		.byte	78
 3941 001d 50        		.byte	80
 3942 001e 51        		.byte	81
 3943 001f 53        		.byte	83
 3944 0020 55        		.byte	85
 3945 0021 57        		.byte	87
 3946 0022 59        		.byte	89
 3947 0023 5A        		.byte	90
 3948 0024 5C        		.byte	92
 3949 0025 5E        		.byte	94
 3950 0026 60        		.byte	96
 3951 0027 62        		.byte	98
 3952 0028 64        		.byte	100
 3953 0029 66        		.byte	102
 3954 002a 68        		.byte	104
 3955 002b 69        		.byte	105
 3956 002c 6B        		.byte	107
 3957 002d 6D        		.byte	109
 3958 002e 6F        		.byte	111
 3959 002f 71        		.byte	113
 3960 0030 73        		.byte	115
 3961 0031 75        		.byte	117
 3962 0032 77        		.byte	119
 3963 0033 79        		.byte	121
 3964 0034 7B        		.byte	123
 3965 0035 7D        		.byte	125
 3966 0036 7F        		.byte	127
 3967 0037 81        		.byte	-127
 3968 0038 83        		.byte	-125
 3969 0039 85        		.byte	-123
 3970 003a 87        		.byte	-121
 3971 003b 89        		.byte	-119
 3972 003c 8A        		.byte	-118
 3973 003d 8C        		.byte	-116
 3974 003e 8E        		.byte	-114
 3975 003f 90        		.byte	-112
 3976 0040 92        		.byte	-110
 3977 0041 94        		.byte	-108
 3978 0042 96        		.byte	-106
 3979 0043 98        		.byte	-104
 3980 0044 9A        		.byte	-102
 3981 0045 9C        		.byte	-100
 3982 0046 9E        		.byte	-98
 3983 0047 9F        		.byte	-97
 3984 0048 A1        		.byte	-95
 3985 0049 A3        		.byte	-93
 3986 004a A5        		.byte	-91
 3987 004b A7        		.byte	-89
 3988 004c A8        		.byte	-88
 3989 004d AA        		.byte	-86
 3990 004e AC        		.byte	-84
 3991 004f AE        		.byte	-82
 3992 0050 AF        		.byte	-81
 3993 0051 B1        		.byte	-79
 3994 0052 B3        		.byte	-77
 3995 0053 B4        		.byte	-76
 3996 0054 B6        		.byte	-74
 3997 0055 B8        		.byte	-72
 3998 0056 B9        		.byte	-71
 3999 0057 BB        		.byte	-69
 4000 0058 BC        		.byte	-68
 4001 0059 BE        		.byte	-66
 4002 005a BF        		.byte	-65
 4003 005b C1        		.byte	-63
 4004 005c C2        		.byte	-62
 4005 005d C3        		.byte	-61
 4006 005e C5        		.byte	-59
 4007 005f C6        		.byte	-58
 4008 0060 C7        		.byte	-57
 4009 0061 C9        		.byte	-55
 4010 0062 CA        		.byte	-54
 4011 0063 CB        		.byte	-53
 4012 0064 CC        		.byte	-52
 4013 0065 CD        		.byte	-51
 4014 0066 CE        		.byte	-50
 4015 0067 D0        		.byte	-48
 4016 0068 D1        		.byte	-47
 4017 0069 D2        		.byte	-46
 4018 006a D2        		.byte	-46
 4019 006b D3        		.byte	-45
 4020 006c D4        		.byte	-44
 4021 006d D5        		.byte	-43
 4022 006e D6        		.byte	-42
 4023 006f D7        		.byte	-41
 4024 0070 D7        		.byte	-41
 4025 0071 D8        		.byte	-40
 4026 0072 D9        		.byte	-39
 4027 0073 D9        		.byte	-39
 4028 0074 DA        		.byte	-38
 4029 0075 DA        		.byte	-38
 4030 0076 DB        		.byte	-37
 4031 0077 DB        		.byte	-37
 4032 0078 DB        		.byte	-37
 4033 0079 DC        		.byte	-36
 4034 007a DC        		.byte	-36
 4035 007b DC        		.byte	-36
 4036 007c DC        		.byte	-36
 4037 007d DC        		.byte	-36
 4038 007e DD        		.byte	-35
 4039 007f DD        		.byte	-35
 4040 0080 DD        		.byte	-35
 4041 0081 DD        		.byte	-35
 4042 0082 DC        		.byte	-36
 4043 0083 DC        		.byte	-36
 4044 0084 DC        		.byte	-36
 4045 0085 DC        		.byte	-36
 4046 0086 DC        		.byte	-36
 4047 0087 DB        		.byte	-37
 4048 0088 DB        		.byte	-37
 4049 0089 DB        		.byte	-37
 4050 008a DA        		.byte	-38
 4051 008b DA        		.byte	-38
 4052 008c D9        		.byte	-39
 4053 008d D9        		.byte	-39
 4054 008e D8        		.byte	-40
 4055 008f D7        		.byte	-41
 4056 0090 D7        		.byte	-41
 4057 0091 D6        		.byte	-42
 4058 0092 D5        		.byte	-43
 4059 0093 D4        		.byte	-44
 4060 0094 D3        		.byte	-45
 4061 0095 D2        		.byte	-46
 4062 0096 D2        		.byte	-46
 4063 0097 D1        		.byte	-47
 4064 0098 D0        		.byte	-48
 4065 0099 CE        		.byte	-50
 4066 009a CD        		.byte	-51
 4067 009b CC        		.byte	-52
 4068 009c CB        		.byte	-53
 4069 009d CA        		.byte	-54
 4070 009e C9        		.byte	-55
 4071 009f C7        		.byte	-57
 4072 00a0 C6        		.byte	-58
 4073 00a1 C5        		.byte	-59
 4074 00a2 C3        		.byte	-61
 4075 00a3 C2        		.byte	-62
 4076 00a4 C1        		.byte	-63
 4077 00a5 BF        		.byte	-65
 4078 00a6 BE        		.byte	-66
 4079 00a7 BC        		.byte	-68
 4080 00a8 BB        		.byte	-69
 4081 00a9 B9        		.byte	-71
 4082 00aa B8        		.byte	-72
 4083 00ab B6        		.byte	-74
 4084 00ac B4        		.byte	-76
 4085 00ad B3        		.byte	-77
 4086 00ae B1        		.byte	-79
 4087 00af AF        		.byte	-81
 4088 00b0 AE        		.byte	-82
 4089 00b1 AC        		.byte	-84
 4090 00b2 AA        		.byte	-86
 4091 00b3 A8        		.byte	-88
 4092 00b4 A7        		.byte	-89
 4093 00b5 A5        		.byte	-91
 4094 00b6 A3        		.byte	-93
 4095 00b7 A1        		.byte	-95
 4096 00b8 9F        		.byte	-97
 4097 00b9 9E        		.byte	-98
 4098 00ba 9C        		.byte	-100
 4099 00bb 9A        		.byte	-102
 4100 00bc 98        		.byte	-104
 4101 00bd 96        		.byte	-106
 4102 00be 94        		.byte	-108
 4103 00bf 92        		.byte	-110
 4104 00c0 90        		.byte	-112
 4105 00c1 8E        		.byte	-114
 4106 00c2 8C        		.byte	-116
 4107 00c3 8A        		.byte	-118
 4108 00c4 89        		.byte	-119
 4109 00c5 87        		.byte	-121
 4110 00c6 85        		.byte	-123
 4111 00c7 83        		.byte	-125
 4112 00c8 81        		.byte	-127
 4113 00c9 7F        		.byte	127
 4114 00ca 7D        		.byte	125
 4115 00cb 7B        		.byte	123
 4116 00cc 79        		.byte	121
 4117 00cd 77        		.byte	119
 4118 00ce 75        		.byte	117
 4119 00cf 73        		.byte	115
 4120 00d0 71        		.byte	113
 4121 00d1 6F        		.byte	111
 4122 00d2 6D        		.byte	109
 4123 00d3 6B        		.byte	107
 4124 00d4 69        		.byte	105
 4125 00d5 68        		.byte	104
 4126 00d6 66        		.byte	102
 4127 00d7 64        		.byte	100
 4128 00d8 62        		.byte	98
 4129 00d9 60        		.byte	96
 4130 00da 5E        		.byte	94
 4131 00db 5C        		.byte	92
 4132 00dc 5A        		.byte	90
 4133 00dd 59        		.byte	89
 4134 00de 57        		.byte	87
 4135 00df 55        		.byte	85
 4136 00e0 53        		.byte	83
 4137 00e1 51        		.byte	81
 4138 00e2 50        		.byte	80
 4139 00e3 4E        		.byte	78
 4140 00e4 4C        		.byte	76
 4141 00e5 4A        		.byte	74
 4142 00e6 49        		.byte	73
 4143 00e7 47        		.byte	71
 4144 00e8 45        		.byte	69
 4145 00e9 43        		.byte	67
 4146 00ea 42        		.byte	66
 4147 00eb 40        		.byte	64
 4148 00ec 3E        		.byte	62
 4149 00ed 3D        		.byte	61
 4150 00ee 3B        		.byte	59
 4151 00ef 3A        		.byte	58
 4152 00f0 38        		.byte	56
 4153 00f1 36        		.byte	54
 4154 00f2 35        		.byte	53
 4155 00f3 33        		.byte	51
 4156 00f4 32        		.byte	50
 4157 00f5 30        		.byte	48
 4158 00f6 2F        		.byte	47
 4159 00f7 2D        		.byte	45
 4160 00f8 2C        		.byte	44
 4161 00f9 2A        		.byte	42
 4162 00fa 29        		.byte	41
 4163 00fb 28        		.byte	40
 4164 00fc 26        		.byte	38
 4165 00fd 25        		.byte	37
 4166 00fe 23        		.byte	35
 4167 00ff 22        		.byte	34
 4168               		.section	.data.effect_num_leds,"aw",@progbits
 4171               	effect_num_leds:
 4172 0000 1D        		.byte	29
 4173               		.section	.data.effect_end_pos,"aw",@progbits
 4176               	effect_end_pos:
 4177 0000 1D        		.byte	29
 4178               		.section	.bss.effect_start_pos,"aw",@nobits
 4181               	effect_start_pos:
 4182 0000 00        		.zero	1
 4183               		.section	.data.clipping_num_leds,"aw",@progbits
 4186               	clipping_num_leds:
 4187 0000 1D        		.byte	29
 4188               		.section	.bss.clipping_start_pos,"aw",@nobits
 4191               	clipping_start_pos:
 4192 0000 00        		.zero	1
 4193               		.comm	led,87,1
 4194               	.global	animation_status
 4195               		.section	.bss.animation_status,"aw",@nobits
 4198               	animation_status:
 4199 0000 0000 0000 		.zero	6
 4199      0000 
 4200               	.global	is_rgblight_initialized
 4201               		.section	.bss.is_rgblight_initialized,"aw",@nobits
 4204               	is_rgblight_initialized:
 4205 0000 00        		.zero	1
 4206               	.global	rgblight_status
 4207               		.section	.bss.rgblight_status,"aw",@nobits
 4210               	rgblight_status:
 4211 0000 0000      		.zero	2
 4212               		.comm	rgblight_config,5,1
 4213               		.weak	RGBLED_GRADIENT_RANGES
 4214               		.section	.progmem.data.RGBLED_GRADIENT_RANGES,"a",@progbits
 4217               	RGBLED_GRADIENT_RANGES:
 4218 0000 FF        		.byte	-1
 4219 0001 AA        		.byte	-86
 4220 0002 7F        		.byte	127
 4221 0003 55        		.byte	85
 4222 0004 40        		.byte	64
 4223               		.section	.rodata.mode_base_table,"a",@progbits
 4226               	mode_base_table:
 4227 0000 00        		.byte	0
 4228 0001 01        		.byte	1
 4229 0002 02        		.byte	2
 4230 0003 02        		.byte	2
 4231 0004 02        		.byte	2
 4232 0005 02        		.byte	2
 4233 0006 06        		.byte	6
 4234 0007 06        		.byte	6
 4235 0008 06        		.byte	6
 4236 0009 09        		.byte	9
 4237 000a 09        		.byte	9
 4238 000b 09        		.byte	9
 4239 000c 09        		.byte	9
 4240 000d 09        		.byte	9
 4241 000e 09        		.byte	9
 4242 000f 0F        		.byte	15
 4243 0010 0F        		.byte	15
 4244 0011 0F        		.byte	15
 4245 0012 0F        		.byte	15
 4246 0013 0F        		.byte	15
 4247 0014 0F        		.byte	15
 4248 0015 15        		.byte	21
 4249 0016 15        		.byte	21
 4250 0017 15        		.byte	21
 4251 0018 18        		.byte	24
 4252 0019 19        		.byte	25
 4253 001a 19        		.byte	25
 4254 001b 19        		.byte	25
 4255 001c 19        		.byte	25
 4256 001d 19        		.byte	25
 4257 001e 19        		.byte	25
 4258 001f 19        		.byte	25
 4259 0020 19        		.byte	25
 4260 0021 19        		.byte	25
 4261 0022 19        		.byte	25
 4262 0023 23        		.byte	35
 4263 0024 24        		.byte	36
 4264               		.section	.data.static_effect_table,"aw",@progbits
 4267               	static_effect_table:
 4268 0000 01        		.byte	1
 4269 0001 19        		.byte	25
 4270 0002 1A        		.byte	26
 4271 0003 1B        		.byte	27
 4272 0004 1C        		.byte	28
 4273 0005 1D        		.byte	29
 4274 0006 1E        		.byte	30
 4275 0007 1F        		.byte	31
 4276 0008 20        		.byte	32
 4277 0009 21        		.byte	33
 4278 000a 22        		.byte	34
 4279               		.text
 4280               	.Letext0:
 4281               		.file 4 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/stdint.h"
 4282               		.file 5 "./quantum/color.h"
 4283               		.file 6 "tmk_core/common/timer.h"
 4284               		.file 7 "quantum/rgblight.h"
 4285               		.file 8 "tmk_core/common/debug.h"
 4286               		.file 9 "quantum/led_tables.h"
 4287               		.file 10 "./lib/lib8tion/random8.h"
 4288               		.file 11 "./lib/lib8tion/trig8.h"
 4289               		.file 12 "quantum/rgblight_breathe_table.h"
 4290               		.file 13 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/string.h"
 4291               		.file 14 "drivers/avr/ws2812.h"
 4292               		.file 15 "tmk_core/common/eeconfig.h"
 4293               		.file 16 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/eeprom.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 rgblight.c
/var/tmp//cc1GnqLn.s:2      *ABS*:000000000000003e __SP_H__
/var/tmp//cc1GnqLn.s:3      *ABS*:000000000000003d __SP_L__
/var/tmp//cc1GnqLn.s:4      *ABS*:000000000000003f __SREG__
/var/tmp//cc1GnqLn.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/tmp//cc1GnqLn.s:6      *ABS*:0000000000000001 __zero_reg__
/var/tmp//cc1GnqLn.s:12     .text.rgblight_effect_dummy:0000000000000000 rgblight_effect_dummy
/var/tmp//cc1GnqLn.s:31     .text.rgblight_set_clipping_range:0000000000000000 rgblight_set_clipping_range
/var/tmp//cc1GnqLn.s:4191   .bss.clipping_start_pos:0000000000000000 clipping_start_pos
/var/tmp//cc1GnqLn.s:4186   .data.clipping_num_leds:0000000000000000 clipping_num_leds
/var/tmp//cc1GnqLn.s:53     .text.rgblight_set_effect_range:0000000000000000 rgblight_set_effect_range
/var/tmp//cc1GnqLn.s:4181   .bss.effect_start_pos:0000000000000000 effect_start_pos
/var/tmp//cc1GnqLn.s:4176   .data.effect_end_pos:0000000000000000 effect_end_pos
/var/tmp//cc1GnqLn.s:4171   .data.effect_num_leds:0000000000000000 effect_num_leds
/var/tmp//cc1GnqLn.s:92     .text.sethsv_raw:0000000000000000 sethsv_raw
/var/tmp//cc1GnqLn.s:141    .text.sethsv:0000000000000000 sethsv
/var/tmp//cc1GnqLn.s:164    .text.setrgb:0000000000000000 setrgb
/var/tmp//cc1GnqLn.s:189    .text.rgblight_check_config:0000000000000000 rgblight_check_config
                            *COM*:0000000000000005 rgblight_config
/var/tmp//cc1GnqLn.s:234    .text.eeconfig_read_rgblight:0000000000000000 eeconfig_read_rgblight
/var/tmp//cc1GnqLn.s:253    .text.eeconfig_update_rgblight:0000000000000000 eeconfig_update_rgblight
/var/tmp//cc1GnqLn.s:303    .text.eeconfig_update_rgblight_default:0000000000000000 eeconfig_update_rgblight_default
/var/tmp//cc1GnqLn.s:340    .text.eeconfig_debug_rgblight:0000000000000000 eeconfig_debug_rgblight
/var/tmp//cc1GnqLn.s:357    .text.rgblight_read_dword:0000000000000000 rgblight_read_dword
/var/tmp//cc1GnqLn.s:378    .text.rgblight_get_mode:0000000000000000 rgblight_get_mode
/var/tmp//cc1GnqLn.s:405    .text.rgblight_increase_speed:0000000000000000 rgblight_increase_speed
/var/tmp//cc1GnqLn.s:434    .text.rgblight_decrease_speed:0000000000000000 rgblight_decrease_speed
/var/tmp//cc1GnqLn.s:463    .text.rgblight_get_hue:0000000000000000 rgblight_get_hue
/var/tmp//cc1GnqLn.s:481    .text.rgblight_get_sat:0000000000000000 rgblight_get_sat
/var/tmp//cc1GnqLn.s:499    .text.rgblight_get_val:0000000000000000 rgblight_get_val
/var/tmp//cc1GnqLn.s:517    .text.rgblight_set:0000000000000000 rgblight_set
                            *COM*:0000000000000057 led
/var/tmp//cc1GnqLn.s:580    .text.rgblight_setrgb:0000000000000000 rgblight_setrgb
/var/tmp//cc1GnqLn.s:637    .text.rgblight_sethsv_noeeprom_old:0000000000000000 rgblight_sethsv_noeeprom_old
/var/tmp//cc1GnqLn.s:695    .text.rgblight_effect_breathing:0000000000000000 rgblight_effect_breathing
/var/tmp//cc1GnqLn.s:3911   .progmem.data.rgblight_effect_breathe_table:0000000000000000 rgblight_effect_breathe_table
/var/tmp//cc1GnqLn.s:752    .text.rgblight_effect_rainbow_mood:0000000000000000 rgblight_effect_rainbow_mood
/var/tmp//cc1GnqLn.s:795    .text.rgblight_effect_rgbtest:0000000000000000 rgblight_effect_rgbtest
/var/tmp//cc1GnqLn.s:3838   .bss.maxval.3190:0000000000000000 maxval.3190
/var/tmp//cc1GnqLn.s:914    .text.rgblight_sethsv_eeprom_helper:0000000000000000 rgblight_sethsv_eeprom_helper
/var/tmp//cc1GnqLn.s:4226   .rodata.mode_base_table:0000000000000000 mode_base_table
/var/tmp//cc1GnqLn.s:4210   .bss.rgblight_status:0000000000000000 rgblight_status
/var/tmp//cc1GnqLn.s:4217   .progmem.data.RGBLED_GRADIENT_RANGES:0000000000000000 RGBLED_GRADIENT_RANGES
/var/tmp//cc1GnqLn.s:1178   .text.rgblight_increase_hue_helper:0000000000000000 rgblight_increase_hue_helper
/var/tmp//cc1GnqLn.s:1208   .text.rgblight_increase_hue_noeeprom:0000000000000000 rgblight_increase_hue_noeeprom
/var/tmp//cc1GnqLn.s:1226   .text.rgblight_increase_hue:0000000000000000 rgblight_increase_hue
/var/tmp//cc1GnqLn.s:1244   .text.rgblight_decrease_hue_helper:0000000000000000 rgblight_decrease_hue_helper
/var/tmp//cc1GnqLn.s:1274   .text.rgblight_decrease_hue_noeeprom:0000000000000000 rgblight_decrease_hue_noeeprom
/var/tmp//cc1GnqLn.s:1292   .text.rgblight_decrease_hue:0000000000000000 rgblight_decrease_hue
/var/tmp//cc1GnqLn.s:1310   .text.rgblight_increase_sat_helper:0000000000000000 rgblight_increase_sat_helper
/var/tmp//cc1GnqLn.s:1333   .text.rgblight_increase_sat_helper:000000000000000e L_1073
/var/tmp//cc1GnqLn.s:1352   .text.rgblight_increase_sat_noeeprom:0000000000000000 rgblight_increase_sat_noeeprom
/var/tmp//cc1GnqLn.s:1370   .text.rgblight_increase_sat:0000000000000000 rgblight_increase_sat
/var/tmp//cc1GnqLn.s:1388   .text.rgblight_decrease_sat_helper:0000000000000000 rgblight_decrease_sat_helper
/var/tmp//cc1GnqLn.s:1410   .text.rgblight_decrease_sat_helper:000000000000000e L_1117
/var/tmp//cc1GnqLn.s:1429   .text.rgblight_decrease_sat_noeeprom:0000000000000000 rgblight_decrease_sat_noeeprom
/var/tmp//cc1GnqLn.s:1447   .text.rgblight_decrease_sat:0000000000000000 rgblight_decrease_sat
/var/tmp//cc1GnqLn.s:1465   .text.rgblight_increase_val_helper:0000000000000000 rgblight_increase_val_helper
/var/tmp//cc1GnqLn.s:1487   .text.rgblight_increase_val_helper:000000000000000e L_1161
/var/tmp//cc1GnqLn.s:1506   .text.rgblight_increase_val_noeeprom:0000000000000000 rgblight_increase_val_noeeprom
/var/tmp//cc1GnqLn.s:1524   .text.rgblight_increase_val:0000000000000000 rgblight_increase_val
/var/tmp//cc1GnqLn.s:1542   .text.rgblight_decrease_val_helper:0000000000000000 rgblight_decrease_val_helper
/var/tmp//cc1GnqLn.s:1564   .text.rgblight_decrease_val_helper:000000000000000e L_1205
/var/tmp//cc1GnqLn.s:1583   .text.rgblight_decrease_val_noeeprom:0000000000000000 rgblight_decrease_val_noeeprom
/var/tmp//cc1GnqLn.s:1601   .text.rgblight_decrease_val:0000000000000000 rgblight_decrease_val
/var/tmp//cc1GnqLn.s:1619   .text.rgblight_sethsv:0000000000000000 rgblight_sethsv
/var/tmp//cc1GnqLn.s:1638   .text.rgblight_sethsv_noeeprom:0000000000000000 rgblight_sethsv_noeeprom
/var/tmp//cc1GnqLn.s:1657   .text.rgblight_setrgb_at:0000000000000000 rgblight_setrgb_at
/var/tmp//cc1GnqLn.s:1700   .text.rgblight_sethsv_at:0000000000000000 rgblight_sethsv_at
/var/tmp//cc1GnqLn.s:1765   .text.rgblight_setrgb_range:0000000000000000 rgblight_setrgb_range
/var/tmp//cc1GnqLn.s:1838   .text.rgblight_sethsv_range:0000000000000000 rgblight_sethsv_range
/var/tmp//cc1GnqLn.s:1909   .text.rgblight_sethsv_master:0000000000000000 rgblight_sethsv_master
/var/tmp//cc1GnqLn.s:1936   .text.rgblight_sethsv_slave:0000000000000000 rgblight_sethsv_slave
/var/tmp//cc1GnqLn.s:1963   .text.rgblight_setrgb_master:0000000000000000 rgblight_setrgb_master
/var/tmp//cc1GnqLn.s:1990   .text.rgblight_setrgb_slave:0000000000000000 rgblight_setrgb_slave
/var/tmp//cc1GnqLn.s:2017   .text.rgblight_effect_rainbow_swirl:0000000000000000 rgblight_effect_rainbow_swirl
/var/tmp//cc1GnqLn.s:2128   .text.rgblight_effect_snake:0000000000000000 rgblight_effect_snake
/var/tmp//cc1GnqLn.s:3858   .bss.pos.3151:0000000000000000 pos.3151
/var/tmp//cc1GnqLn.s:2321   .text.rgblight_effect_knight:0000000000000000 rgblight_effect_knight
/var/tmp//cc1GnqLn.s:3843   .data.increment.3169:0000000000000000 increment.3169
/var/tmp//cc1GnqLn.s:3853   .bss.low_bound.3167:0000000000000000 low_bound.3167
/var/tmp//cc1GnqLn.s:3848   .data.high_bound.3168:0000000000000000 high_bound.3168
/var/tmp//cc1GnqLn.s:2490   .text.rgblight_effect_christmas:0000000000000000 rgblight_effect_christmas
/var/tmp//cc1GnqLn.s:2591   .text.rgblight_effect_alternating:0000000000000000 rgblight_effect_alternating
/var/tmp//cc1GnqLn.s:2710   .text.rgblight_disable:0000000000000000 rgblight_disable
/var/tmp//cc1GnqLn.s:2762   .text.rgblight_disable_noeeprom:0000000000000000 rgblight_disable_noeeprom
/var/tmp//cc1GnqLn.s:2807   .text.rgblight_timer_init:0000000000000000 rgblight_timer_init
/var/tmp//cc1GnqLn.s:2826   .text.rgblight_timer_enable:0000000000000000 rgblight_timer_enable
/var/tmp//cc1GnqLn.s:4267   .data.static_effect_table:0000000000000000 static_effect_table
/var/tmp//cc1GnqLn.s:4198   .bss.animation_status:0000000000000000 animation_status
/var/tmp//cc1GnqLn.s:2871   .text.rgblight_mode_eeprom_helper:0000000000000000 rgblight_mode_eeprom_helper
/var/tmp//cc1GnqLn.s:2970   .text.rgblight_step_helper:0000000000000000 rgblight_step_helper
/var/tmp//cc1GnqLn.s:3004   .text.rgblight_step_noeeprom:0000000000000000 rgblight_step_noeeprom
/var/tmp//cc1GnqLn.s:3022   .text.rgblight_step:0000000000000000 rgblight_step
/var/tmp//cc1GnqLn.s:3040   .text.rgblight_step_reverse_helper:0000000000000000 rgblight_step_reverse_helper
/var/tmp//cc1GnqLn.s:3073   .text.rgblight_step_reverse_noeeprom:0000000000000000 rgblight_step_reverse_noeeprom
/var/tmp//cc1GnqLn.s:3091   .text.rgblight_step_reverse:0000000000000000 rgblight_step_reverse
/var/tmp//cc1GnqLn.s:3109   .text.rgblight_mode:0000000000000000 rgblight_mode
/var/tmp//cc1GnqLn.s:3128   .text.rgblight_increase:0000000000000000 rgblight_increase
/var/tmp//cc1GnqLn.s:3159   .text.rgblight_decrease:0000000000000000 rgblight_decrease
/var/tmp//cc1GnqLn.s:3190   .text.rgblight_enable:0000000000000000 rgblight_enable
/var/tmp//cc1GnqLn.s:3214   .text.rgblight_toggle:0000000000000000 rgblight_toggle
/var/tmp//cc1GnqLn.s:3238   .text.rgblight_mode_noeeprom:0000000000000000 rgblight_mode_noeeprom
/var/tmp//cc1GnqLn.s:3257   .text.rgblight_init:0000000000000000 rgblight_init
/var/tmp//cc1GnqLn.s:4204   .bss.is_rgblight_initialized:0000000000000000 is_rgblight_initialized
/var/tmp//cc1GnqLn.s:3337   .text.rgblight_enable_noeeprom:0000000000000000 rgblight_enable_noeeprom
/var/tmp//cc1GnqLn.s:3361   .text.rgblight_toggle_noeeprom:0000000000000000 rgblight_toggle_noeeprom
/var/tmp//cc1GnqLn.s:3385   .text.rgblight_update_dword:0000000000000000 rgblight_update_dword
/var/tmp//cc1GnqLn.s:3423   .text.rgblight_timer_disable:0000000000000000 rgblight_timer_disable
/var/tmp//cc1GnqLn.s:3439   .text.rgblight_timer_toggle:0000000000000000 rgblight_timer_toggle
/var/tmp//cc1GnqLn.s:3470   .text.rgblight_show_solid_color:0000000000000000 rgblight_show_solid_color
/var/tmp//cc1GnqLn.s:3522   .text.rgblight_task:0000000000000000 rgblight_task
/var/tmp//cc1GnqLn.s:3902   .progmem.data.RGBLED_BREATHING_INTERVALS:0000000000000000 RGBLED_BREATHING_INTERVALS
/var/tmp//cc1GnqLn.s:3894   .progmem.data.RGBLED_RAINBOW_MOOD_INTERVALS:0000000000000000 RGBLED_RAINBOW_MOOD_INTERVALS
/var/tmp//cc1GnqLn.s:3886   .progmem.data.RGBLED_RAINBOW_SWIRL_INTERVALS:0000000000000000 RGBLED_RAINBOW_SWIRL_INTERVALS
/var/tmp//cc1GnqLn.s:3878   .progmem.data.RGBLED_SNAKE_INTERVALS:0000000000000000 RGBLED_SNAKE_INTERVALS
/var/tmp//cc1GnqLn.s:3870   .progmem.data.RGBLED_KNIGHT_INTERVALS:0000000000000000 RGBLED_KNIGHT_INTERVALS
/var/tmp//cc1GnqLn.s:3864   .progmem.data.RGBLED_RGBTEST_INTERVALS:0000000000000000 RGBLED_RGBTEST_INTERVALS

UNDEFINED SYMBOLS
hsv_to_rgb
eeprom_read_dword
eeprom_update_dword
ws2812_setleds
__divmodhi4
__udivmodhi4
memchr
timer_read
debug_config
eeconfig_is_enabled
eeconfig_init
timer_elapsed
__do_copy_data
__do_clear_bss
