   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"sym_g.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.debounce_init,"ax",%progbits
  18              		.align	1
  19              		.global	debounce_init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	debounce_init:
  26              	.LFB8:
  27              		.file 1 "quantum/debounce/sym_g.c"
   1:quantum/debounce/sym_g.c **** /*
   2:quantum/debounce/sym_g.c **** Copyright 2017 Alex Ong<the.onga@gmail.com>
   3:quantum/debounce/sym_g.c **** This program is free software: you can redistribute it and/or modify
   4:quantum/debounce/sym_g.c **** it under the terms of the GNU General Public License as published by
   5:quantum/debounce/sym_g.c **** the Free Software Foundation, either version 2 of the License, or
   6:quantum/debounce/sym_g.c **** (at your option) any later version.
   7:quantum/debounce/sym_g.c **** This program is distributed in the hope that it will be useful,
   8:quantum/debounce/sym_g.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
   9:quantum/debounce/sym_g.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  10:quantum/debounce/sym_g.c **** GNU General Public License for more details.
  11:quantum/debounce/sym_g.c **** You should have received a copy of the GNU General Public License
  12:quantum/debounce/sym_g.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  13:quantum/debounce/sym_g.c **** */
  14:quantum/debounce/sym_g.c **** 
  15:quantum/debounce/sym_g.c **** /*
  16:quantum/debounce/sym_g.c **** Basic global debounce algorithm. Used in 99% of keyboards at time of implementation
  17:quantum/debounce/sym_g.c **** When no state changes have occured for DEBOUNCE milliseconds, we push the state.
  18:quantum/debounce/sym_g.c **** */
  19:quantum/debounce/sym_g.c **** #include "matrix.h"
  20:quantum/debounce/sym_g.c **** #include "timer.h"
  21:quantum/debounce/sym_g.c **** #include "quantum.h"
  22:quantum/debounce/sym_g.c **** #ifndef DEBOUNCE
  23:quantum/debounce/sym_g.c **** #    define DEBOUNCE 5
  24:quantum/debounce/sym_g.c **** #endif
  25:quantum/debounce/sym_g.c **** 
  26:quantum/debounce/sym_g.c **** void        debounce_init(uint8_t num_rows) {}
  28              		.loc 1 26 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34              		.loc 1 26 0
  35 0000 7047     		bx	lr
  36              		.cfi_endproc
  37              	.LFE8:
  39              		.section	.text.debounce,"ax",%progbits
  40              		.align	1
  41              		.global	debounce
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  45              		.fpu fpv4-sp-d16
  47              	debounce:
  48              	.LFB9:
  27:quantum/debounce/sym_g.c **** static bool debouncing = false;
  28:quantum/debounce/sym_g.c **** 
  29:quantum/debounce/sym_g.c **** #if DEBOUNCE > 0
  30:quantum/debounce/sym_g.c **** static uint16_t debouncing_time;
  31:quantum/debounce/sym_g.c **** void            debounce(matrix_row_t raw[], matrix_row_t cooked[], uint8_t num_rows, bool changed)
  49              		.loc 1 31 0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53              	.LVL1:
  54 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  55              		.cfi_def_cfa_offset 24
  56              		.cfi_offset 3, -24
  57              		.cfi_offset 4, -20
  58              		.cfi_offset 5, -16
  59              		.cfi_offset 6, -12
  60              		.cfi_offset 7, -8
  61              		.cfi_offset 14, -4
  62              		.loc 1 31 0
  63 0002 0646     		mov	r6, r0
  64 0004 0F46     		mov	r7, r1
  65 0006 1546     		mov	r5, r2
  66 0008 0D4C     		ldr	r4, .L13
  32:quantum/debounce/sym_g.c ****     if (changed) {
  67              		.loc 1 32 0
  68 000a 23B1     		cbz	r3, .L3
  33:quantum/debounce/sym_g.c ****         debouncing      = true;
  69              		.loc 1 33 0
  70 000c 0123     		movs	r3, #1
  71              	.LVL2:
  72 000e 2370     		strb	r3, [r4]
  34:quantum/debounce/sym_g.c ****         debouncing_time = timer_read();
  73              		.loc 1 34 0
  74 0010 FFF7FEFF 		bl	timer_read
  75              	.LVL3:
  76 0014 6080     		strh	r0, [r4, #2]	@ movhi
  77              	.L3:
  35:quantum/debounce/sym_g.c ****     }
  36:quantum/debounce/sym_g.c **** 
  37:quantum/debounce/sym_g.c ****     if (debouncing && timer_elapsed(debouncing_time) > DEBOUNCE) {
  78              		.loc 1 37 0
  79 0016 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
  80 0018 23B1     		cbz	r3, .L2
  81              		.loc 1 37 0 is_stmt 0 discriminator 1
  82 001a 6088     		ldrh	r0, [r4, #2]
  83 001c FFF7FEFF 		bl	timer_elapsed
  84              	.LVL4:
  85 0020 0528     		cmp	r0, #5
  86 0022 0AD8     		bhi	.L9
  87              	.L2:
  38:quantum/debounce/sym_g.c ****         for (int i = 0; i < num_rows; i++) {
  39:quantum/debounce/sym_g.c ****             cooked[i] = raw[i];
  40:quantum/debounce/sym_g.c ****         }
  41:quantum/debounce/sym_g.c ****         debouncing = false;
  42:quantum/debounce/sym_g.c ****     }
  43:quantum/debounce/sym_g.c **** }
  88              		.loc 1 43 0 is_stmt 1
  89 0024 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
  90              	.LVL5:
  91              	.L8:
  92              	.LBB2:
  39:quantum/debounce/sym_g.c ****         }
  93              		.loc 1 39 0 discriminator 3
  94 0026 36F81320 		ldrh	r2, [r6, r3, lsl #1]
  95 002a 27F81320 		strh	r2, [r7, r3, lsl #1]	@ movhi
  38:quantum/debounce/sym_g.c ****         for (int i = 0; i < num_rows; i++) {
  96              		.loc 1 38 0 discriminator 3
  97 002e 0133     		adds	r3, r3, #1
  98              	.LVL6:
  99              	.L6:
  38:quantum/debounce/sym_g.c ****         for (int i = 0; i < num_rows; i++) {
 100              		.loc 1 38 0 is_stmt 0 discriminator 1
 101 0030 9D42     		cmp	r5, r3
 102 0032 F8DC     		bgt	.L8
 103              	.LBE2:
  41:quantum/debounce/sym_g.c ****     }
 104              		.loc 1 41 0 is_stmt 1
 105 0034 0023     		movs	r3, #0
 106              	.LVL7:
 107 0036 2370     		strb	r3, [r4]
 108              		.loc 1 43 0
 109 0038 F4E7     		b	.L2
 110              	.L9:
 111              	.LBB3:
  38:quantum/debounce/sym_g.c ****         for (int i = 0; i < num_rows; i++) {
 112              		.loc 1 38 0
 113 003a 0023     		movs	r3, #0
 114 003c F8E7     		b	.L6
 115              	.L14:
 116 003e 00BF     		.align	2
 117              	.L13:
 118 0040 00000000 		.word	.LANCHOR0
 119              	.LBE3:
 120              		.cfi_endproc
 121              	.LFE9:
 123              		.section	.text.debounce_active,"ax",%progbits
 124              		.align	1
 125              		.global	debounce_active
 126              		.syntax unified
 127              		.thumb
 128              		.thumb_func
 129              		.fpu fpv4-sp-d16
 131              	debounce_active:
 132              	.LFB10:
  44:quantum/debounce/sym_g.c **** #else  // no debouncing.
  45:quantum/debounce/sym_g.c **** void debounce(matrix_row_t raw[], matrix_row_t cooked[], uint8_t num_rows, bool changed) {
  46:quantum/debounce/sym_g.c ****     for (int i = 0; i < num_rows; i++) {
  47:quantum/debounce/sym_g.c ****         cooked[i] = raw[i];
  48:quantum/debounce/sym_g.c ****     }
  49:quantum/debounce/sym_g.c **** }
  50:quantum/debounce/sym_g.c **** #endif
  51:quantum/debounce/sym_g.c **** 
  52:quantum/debounce/sym_g.c **** bool debounce_active(void) { return debouncing; }
 133              		.loc 1 52 0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              		@ link register save eliminated.
 138              		.loc 1 52 0
 139 0000 014B     		ldr	r3, .L16
 140 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 141 0004 7047     		bx	lr
 142              	.L17:
 143 0006 00BF     		.align	2
 144              	.L16:
 145 0008 00000000 		.word	.LANCHOR0
 146              		.cfi_endproc
 147              	.LFE10:
 149              		.bss
 150              		.align	1
 151              		.set	.LANCHOR0,. + 0
 154              	debouncing:
 155 0000 00       		.space	1
 156 0001 00       		.space	1
 159              	debouncing_time:
 160 0002 0000     		.space	2
 161              		.text
 162              	.Letext0:
 163              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 164              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 165              		.file 4 "keyboards/massdrop/alt/matrix.h"
 166              		.file 5 "tmk_core/protocol/arm_atsam/clks.h"
 167              		.file 6 "tmk_core/common/timer.h"
 168              		.file 7 "tmk_core/common/action.h"
 169              		.file 8 "tmk_core/common/report.h"
 170              		.file 9 "tmk_core/common/host.h"
 171              		.file 10 "tmk_core/common/debug.h"
 172              		.file 11 "quantum/keycode_config.h"
 173              		.file 12 "quantum/keymap.h"
 174              		.file 13 "quantum/color.h"
 175              		.file 14 "quantum/rgb_matrix_types.h"
 176              		.file 15 "quantum/rgb_matrix.h"
 177              		.file 16 "tmk_core/common/action_layer.h"
 178              		.file 17 "tmk_core/common/action_util.h"
 179              		.file 18 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 180              		.file 19 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 181              		.file 20 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.
 182              		.file 21 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 183              		.file 22 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 184              		.file 23 "quantum/quantum.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 sym_g.c
/var/tmp//ccN591WR.s:18     .text.debounce_init:0000000000000000 $t
/var/tmp//ccN591WR.s:25     .text.debounce_init:0000000000000000 debounce_init
/var/tmp//ccN591WR.s:40     .text.debounce:0000000000000000 $t
/var/tmp//ccN591WR.s:47     .text.debounce:0000000000000000 debounce
/var/tmp//ccN591WR.s:118    .text.debounce:0000000000000040 $d
/var/tmp//ccN591WR.s:124    .text.debounce_active:0000000000000000 $t
/var/tmp//ccN591WR.s:131    .text.debounce_active:0000000000000000 debounce_active
/var/tmp//ccN591WR.s:145    .text.debounce_active:0000000000000008 $d
/var/tmp//ccN591WR.s:150    .bss:0000000000000000 $d
/var/tmp//ccN591WR.s:154    .bss:0000000000000000 debouncing
/var/tmp//ccN591WR.s:159    .bss:0000000000000002 debouncing_time

UNDEFINED SYMBOLS
timer_read
timer_elapsed
