   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"quantum.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.do_code16,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	do_code16:
  25              	.LFB8:
  26              		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** /* Copyright 2016-2017 Jack Humbert
   2:quantum/quantum.c ****  *
   3:quantum/quantum.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/quantum.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/quantum.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/quantum.c ****  * (at your option) any later version.
   7:quantum/quantum.c ****  *
   8:quantum/quantum.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/quantum.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/quantum.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/quantum.c ****  * GNU General Public License for more details.
  12:quantum/quantum.c ****  *
  13:quantum/quantum.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/quantum.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/quantum.c ****  */
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** #include "quantum.h"
  18:quantum/quantum.c **** 
  19:quantum/quantum.c **** #if !defined(RGBLIGHT_ENABLE) && !defined(RGB_MATRIX_ENABLE)
  20:quantum/quantum.c **** #    include "rgb.h"
  21:quantum/quantum.c **** #endif
  22:quantum/quantum.c **** 
  23:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
  24:quantum/quantum.c **** #    include "outputselect.h"
  25:quantum/quantum.c **** #endif
  26:quantum/quantum.c **** 
  27:quantum/quantum.c **** #ifndef BREATHING_PERIOD
  28:quantum/quantum.c **** #    define BREATHING_PERIOD 6
  29:quantum/quantum.c **** #endif
  30:quantum/quantum.c **** 
  31:quantum/quantum.c **** #include "backlight.h"
  32:quantum/quantum.c **** extern backlight_config_t backlight_config;
  33:quantum/quantum.c **** 
  34:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
  35:quantum/quantum.c **** #    include "fauxclicky.h"
  36:quantum/quantum.c **** #endif
  37:quantum/quantum.c **** 
  38:quantum/quantum.c **** #ifdef API_ENABLE
  39:quantum/quantum.c **** #    include "api.h"
  40:quantum/quantum.c **** #endif
  41:quantum/quantum.c **** 
  42:quantum/quantum.c **** #ifdef MIDI_ENABLE
  43:quantum/quantum.c **** #    include "process_midi.h"
  44:quantum/quantum.c **** #endif
  45:quantum/quantum.c **** 
  46:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
  47:quantum/quantum.c **** #    include "velocikey.h"
  48:quantum/quantum.c **** #endif
  49:quantum/quantum.c **** 
  50:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
  51:quantum/quantum.c **** #    include "haptic.h"
  52:quantum/quantum.c **** #endif
  53:quantum/quantum.c **** 
  54:quantum/quantum.c **** #ifdef ENCODER_ENABLE
  55:quantum/quantum.c **** #    include "encoder.h"
  56:quantum/quantum.c **** #endif
  57:quantum/quantum.c **** 
  58:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  59:quantum/quantum.c **** #    ifndef GOODBYE_SONG
  60:quantum/quantum.c **** #        define GOODBYE_SONG SONG(GOODBYE_SOUND)
  61:quantum/quantum.c **** #    endif
  62:quantum/quantum.c **** #    ifndef AG_NORM_SONG
  63:quantum/quantum.c **** #        define AG_NORM_SONG SONG(AG_NORM_SOUND)
  64:quantum/quantum.c **** #    endif
  65:quantum/quantum.c **** #    ifndef AG_SWAP_SONG
  66:quantum/quantum.c **** #        define AG_SWAP_SONG SONG(AG_SWAP_SOUND)
  67:quantum/quantum.c **** #    endif
  68:quantum/quantum.c **** #    ifndef CG_NORM_SONG
  69:quantum/quantum.c **** #        define CG_NORM_SONG SONG(AG_NORM_SOUND)
  70:quantum/quantum.c **** #    endif
  71:quantum/quantum.c **** #    ifndef CG_SWAP_SONG
  72:quantum/quantum.c **** #        define CG_SWAP_SONG SONG(AG_SWAP_SOUND)
  73:quantum/quantum.c **** #    endif
  74:quantum/quantum.c **** float goodbye_song[][2] = GOODBYE_SONG;
  75:quantum/quantum.c **** float ag_norm_song[][2] = AG_NORM_SONG;
  76:quantum/quantum.c **** float ag_swap_song[][2] = AG_SWAP_SONG;
  77:quantum/quantum.c **** float cg_norm_song[][2] = CG_NORM_SONG;
  78:quantum/quantum.c **** float cg_swap_song[][2] = CG_SWAP_SONG;
  79:quantum/quantum.c **** #    ifdef DEFAULT_LAYER_SONGS
  80:quantum/quantum.c **** float default_layer_songs[][16][2] = DEFAULT_LAYER_SONGS;
  81:quantum/quantum.c **** #    endif
  82:quantum/quantum.c **** #endif
  83:quantum/quantum.c **** 
  84:quantum/quantum.c **** static void do_code16(uint16_t code, void (*f)(uint8_t)) {
  27              		.loc 1 84 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  85:quantum/quantum.c ****     switch (code) {
  32              		.loc 1 85 0
  33 0000 A0F58073 		sub	r3, r0, #256
  34 0004 B3F5F85F 		cmp	r3, #7936
  84:quantum/quantum.c ****     switch (code) {
  35              		.loc 1 84 0
  36 0008 70B5     		push	{r4, r5, r6, lr}
  37              		.cfi_def_cfa_offset 16
  38              		.cfi_offset 4, -16
  39              		.cfi_offset 5, -12
  40              		.cfi_offset 6, -8
  41              		.cfi_offset 14, -4
  84:quantum/quantum.c ****     switch (code) {
  42              		.loc 1 84 0
  43 000a 0546     		mov	r5, r0
  44 000c 0C46     		mov	r4, r1
  45              		.loc 1 85 0
  46 000e 12D2     		bcs	.L1
  86:quantum/quantum.c ****         case QK_MODS ... QK_MODS_MAX:
  87:quantum/quantum.c ****             break;
  88:quantum/quantum.c ****         default:
  89:quantum/quantum.c ****             return;
  90:quantum/quantum.c ****     }
  91:quantum/quantum.c **** 
  92:quantum/quantum.c ****     if (code & QK_LCTL) f(KC_LCTL);
  47              		.loc 1 92 0
  48 0010 E805     		lsls	r0, r5, #23
  49              	.LVL1:
  50 0012 01D5     		bpl	.L4
  51              		.loc 1 92 0 is_stmt 0 discriminator 1
  52 0014 E020     		movs	r0, #224
  53 0016 8847     		blx	r1
  54              	.LVL2:
  55              	.L4:
  93:quantum/quantum.c ****     if (code & QK_LSFT) f(KC_LSFT);
  56              		.loc 1 93 0 is_stmt 1
  57 0018 A905     		lsls	r1, r5, #22
  58 001a 01D5     		bpl	.L5
  59              		.loc 1 93 0 is_stmt 0 discriminator 1
  60 001c E120     		movs	r0, #225
  61 001e A047     		blx	r4
  62              	.LVL3:
  63              	.L5:
  94:quantum/quantum.c ****     if (code & QK_LALT) f(KC_LALT);
  64              		.loc 1 94 0 is_stmt 1
  65 0020 6A05     		lsls	r2, r5, #21
  66 0022 01D5     		bpl	.L6
  67              		.loc 1 94 0 is_stmt 0 discriminator 1
  68 0024 E220     		movs	r0, #226
  69 0026 A047     		blx	r4
  70              	.LVL4:
  71              	.L6:
  95:quantum/quantum.c ****     if (code & QK_LGUI) f(KC_LGUI);
  72              		.loc 1 95 0 is_stmt 1
  73 0028 2B05     		lsls	r3, r5, #20
  74 002a 01D5     		bpl	.L7
  75              		.loc 1 95 0 is_stmt 0 discriminator 1
  76 002c E320     		movs	r0, #227
  77 002e A047     		blx	r4
  78              	.LVL5:
  79              	.L7:
  96:quantum/quantum.c **** 
  97:quantum/quantum.c ****     if (code < QK_RMODS_MIN) return;
  80              		.loc 1 97 0 is_stmt 1
  81 0030 B5F5805F 		cmp	r5, #4096
  82 0034 00D2     		bcs	.L21
  83              	.L1:
  98:quantum/quantum.c **** 
  99:quantum/quantum.c ****     if (code & QK_RCTL) f(KC_RCTL);
 100:quantum/quantum.c ****     if (code & QK_RSFT) f(KC_RSFT);
 101:quantum/quantum.c ****     if (code & QK_RALT) f(KC_RALT);
 102:quantum/quantum.c ****     if (code & QK_RGUI) f(KC_RGUI);
 103:quantum/quantum.c **** }
  84              		.loc 1 103 0
  85 0036 70BD     		pop	{r4, r5, r6, pc}
  86              	.LVL6:
  87              	.L21:
  99:quantum/quantum.c ****     if (code & QK_RSFT) f(KC_RSFT);
  88              		.loc 1 99 0
  89 0038 E420     		movs	r0, #228
  90 003a A047     		blx	r4
  91              	.LVL7:
 100:quantum/quantum.c ****     if (code & QK_RALT) f(KC_RALT);
  92              		.loc 1 100 0
  93 003c E520     		movs	r0, #229
  94 003e A047     		blx	r4
  95              	.LVL8:
 101:quantum/quantum.c ****     if (code & QK_RGUI) f(KC_RGUI);
  96              		.loc 1 101 0
  97 0040 E620     		movs	r0, #230
  98 0042 A047     		blx	r4
  99              	.LVL9:
 102:quantum/quantum.c **** }
 100              		.loc 1 102 0
 101 0044 2346     		mov	r3, r4
 102 0046 E720     		movs	r0, #231
 103              		.loc 1 103 0
 104 0048 BDE87040 		pop	{r4, r5, r6, lr}
 105              		.cfi_restore 14
 106              		.cfi_restore 6
 107              		.cfi_restore 5
 108              		.cfi_restore 4
 109              		.cfi_def_cfa_offset 0
 110              	.LVL10:
 102:quantum/quantum.c **** }
 111              		.loc 1 102 0
 112 004c 1847     		bx	r3	@ indirect register sibling call
 113              	.LVL11:
 114              		.cfi_endproc
 115              	.LFE8:
 117              		.section	.text.qk_register_weak_mods,"ax",%progbits
 118              		.align	1
 119              		.syntax unified
 120              		.thumb
 121              		.thumb_func
 122              		.fpu fpv4-sp-d16
 124              	qk_register_weak_mods:
 125              	.LFB9:
 104:quantum/quantum.c **** 
 105:quantum/quantum.c **** static inline void qk_register_weak_mods(uint8_t kc) {
 126              		.loc 1 105 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              	.LVL12:
 131 0000 08B5     		push	{r3, lr}
 132              		.cfi_def_cfa_offset 8
 133              		.cfi_offset 3, -8
 134              		.cfi_offset 14, -4
 106:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 135              		.loc 1 106 0
 136 0002 00F00703 		and	r3, r0, #7
 137 0006 0120     		movs	r0, #1
 138              	.LVL13:
 139 0008 9840     		lsls	r0, r0, r3
 140 000a C0B2     		uxtb	r0, r0
 141 000c FFF7FEFF 		bl	add_weak_mods
 142              	.LVL14:
 107:quantum/quantum.c ****     send_keyboard_report();
 108:quantum/quantum.c **** }
 143              		.loc 1 108 0
 144 0010 BDE80840 		pop	{r3, lr}
 145              		.cfi_restore 14
 146              		.cfi_restore 3
 147              		.cfi_def_cfa_offset 0
 107:quantum/quantum.c ****     send_keyboard_report();
 148              		.loc 1 107 0
 149 0014 FFF7FEBF 		b	send_keyboard_report
 150              	.LVL15:
 151              		.cfi_endproc
 152              	.LFE9:
 154              		.section	.text.qk_register_mods,"ax",%progbits
 155              		.align	1
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 159              		.fpu fpv4-sp-d16
 161              	qk_register_mods:
 162              	.LFB62:
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 0
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 166              		@ link register save eliminated.
 167 0000 FFF7FEBF 		b	qk_register_weak_mods
 168              		.cfi_endproc
 169              	.LFE62:
 171              		.section	.text.qk_unregister_weak_mods,"ax",%progbits
 172              		.align	1
 173              		.syntax unified
 174              		.thumb
 175              		.thumb_func
 176              		.fpu fpv4-sp-d16
 178              	qk_unregister_weak_mods:
 179              	.LFB10:
 109:quantum/quantum.c **** 
 110:quantum/quantum.c **** static inline void qk_unregister_weak_mods(uint8_t kc) {
 180              		.loc 1 110 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184              	.LVL16:
 185              		.loc 1 110 0
 186 0000 08B5     		push	{r3, lr}
 187              		.cfi_def_cfa_offset 8
 188              		.cfi_offset 3, -8
 189              		.cfi_offset 14, -4
 111:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 190              		.loc 1 111 0
 191 0002 00F00703 		and	r3, r0, #7
 192 0006 0120     		movs	r0, #1
 193              	.LVL17:
 194 0008 9840     		lsls	r0, r0, r3
 195 000a C0B2     		uxtb	r0, r0
 196 000c FFF7FEFF 		bl	del_weak_mods
 197              	.LVL18:
 112:quantum/quantum.c ****     send_keyboard_report();
 113:quantum/quantum.c **** }
 198              		.loc 1 113 0
 199 0010 BDE80840 		pop	{r3, lr}
 200              		.cfi_restore 14
 201              		.cfi_restore 3
 202              		.cfi_def_cfa_offset 0
 112:quantum/quantum.c ****     send_keyboard_report();
 203              		.loc 1 112 0
 204 0014 FFF7FEBF 		b	send_keyboard_report
 205              	.LVL19:
 206              		.cfi_endproc
 207              	.LFE10:
 209              		.section	.text.qk_unregister_mods,"ax",%progbits
 210              		.align	1
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 214              		.fpu fpv4-sp-d16
 216              	qk_unregister_mods:
 217              	.LFB64:
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221              		@ link register save eliminated.
 222 0000 FFF7FEBF 		b	qk_unregister_weak_mods
 223              		.cfi_endproc
 224              	.LFE64:
 226              		.section	.text.register_code16,"ax",%progbits
 227              		.align	1
 228              		.global	register_code16
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 232              		.fpu fpv4-sp-d16
 234              	register_code16:
 235              	.LFB13:
 114:quantum/quantum.c **** 
 115:quantum/quantum.c **** static inline void qk_register_mods(uint8_t kc) {
 116:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 117:quantum/quantum.c ****     send_keyboard_report();
 118:quantum/quantum.c **** }
 119:quantum/quantum.c **** 
 120:quantum/quantum.c **** static inline void qk_unregister_mods(uint8_t kc) {
 121:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 122:quantum/quantum.c ****     send_keyboard_report();
 123:quantum/quantum.c **** }
 124:quantum/quantum.c **** 
 125:quantum/quantum.c **** void register_code16(uint16_t code) {
 236              		.loc 1 125 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240              	.LVL20:
 126:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 241              		.loc 1 126 0
 242 0000 A0F1E003 		sub	r3, r0, #224
 243 0004 072B     		cmp	r3, #7
 125:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 244              		.loc 1 125 0
 245 0006 10B5     		push	{r4, lr}
 246              		.cfi_def_cfa_offset 8
 247              		.cfi_offset 4, -8
 248              		.cfi_offset 14, -4
 125:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 249              		.loc 1 125 0
 250 0008 0446     		mov	r4, r0
 251              		.loc 1 126 0
 252 000a 00D9     		bls	.L27
 253              		.loc 1 126 0 is_stmt 0 discriminator 1
 254 000c 40B9     		cbnz	r0, .L28
 255              	.L27:
 127:quantum/quantum.c ****         do_code16(code, qk_register_mods);
 256              		.loc 1 127 0 is_stmt 1
 257 000e 0549     		ldr	r1, .L31
 258 0010 2046     		mov	r0, r4
 259              	.LVL21:
 260              	.L30:
 128:quantum/quantum.c ****     } else {
 129:quantum/quantum.c ****         do_code16(code, qk_register_weak_mods);
 261              		.loc 1 129 0
 262 0012 FFF7FEFF 		bl	do_code16
 263              	.LVL22:
 130:quantum/quantum.c ****     }
 131:quantum/quantum.c ****     register_code(code);
 264              		.loc 1 131 0
 265 0016 E0B2     		uxtb	r0, r4
 132:quantum/quantum.c **** }
 266              		.loc 1 132 0
 267 0018 BDE81040 		pop	{r4, lr}
 268              		.cfi_remember_state
 269              		.cfi_restore 14
 270              		.cfi_restore 4
 271              		.cfi_def_cfa_offset 0
 131:quantum/quantum.c **** }
 272              		.loc 1 131 0
 273 001c FFF7FEBF 		b	register_code
 274              	.LVL23:
 275              	.L28:
 276              		.cfi_restore_state
 129:quantum/quantum.c ****     }
 277              		.loc 1 129 0
 278 0020 0149     		ldr	r1, .L31+4
 279 0022 F6E7     		b	.L30
 280              	.L32:
 281              		.align	2
 282              	.L31:
 283 0024 00000000 		.word	qk_register_mods
 284 0028 00000000 		.word	qk_register_weak_mods
 285              		.cfi_endproc
 286              	.LFE13:
 288              		.section	.text.unregister_code16,"ax",%progbits
 289              		.align	1
 290              		.global	unregister_code16
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 294              		.fpu fpv4-sp-d16
 296              	unregister_code16:
 297              	.LFB14:
 133:quantum/quantum.c **** 
 134:quantum/quantum.c **** void unregister_code16(uint16_t code) {
 298              		.loc 1 134 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302              	.LVL24:
 303 0000 10B5     		push	{r4, lr}
 304              		.cfi_def_cfa_offset 8
 305              		.cfi_offset 4, -8
 306              		.cfi_offset 14, -4
 307              		.loc 1 134 0
 308 0002 0446     		mov	r4, r0
 135:quantum/quantum.c ****     unregister_code(code);
 309              		.loc 1 135 0
 310 0004 C0B2     		uxtb	r0, r0
 311              	.LVL25:
 312 0006 FFF7FEFF 		bl	unregister_code
 313              	.LVL26:
 136:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 314              		.loc 1 136 0
 315 000a A4F1E003 		sub	r3, r4, #224
 316 000e 072B     		cmp	r3, #7
 317 0010 00D9     		bls	.L34
 318              		.loc 1 136 0 is_stmt 0 discriminator 1
 319 0012 2CB9     		cbnz	r4, .L35
 320              	.L34:
 137:quantum/quantum.c ****         do_code16(code, qk_unregister_mods);
 321              		.loc 1 137 0 is_stmt 1
 322 0014 0349     		ldr	r1, .L37
 323              	.L36:
 138:quantum/quantum.c ****     } else {
 139:quantum/quantum.c ****         do_code16(code, qk_unregister_weak_mods);
 324              		.loc 1 139 0
 325 0016 2046     		mov	r0, r4
 140:quantum/quantum.c ****     }
 141:quantum/quantum.c **** }
 326              		.loc 1 141 0
 327 0018 BDE81040 		pop	{r4, lr}
 328              		.cfi_remember_state
 329              		.cfi_restore 14
 330              		.cfi_restore 4
 331              		.cfi_def_cfa_offset 0
 139:quantum/quantum.c ****     }
 332              		.loc 1 139 0
 333 001c FFF7FEBF 		b	do_code16
 334              	.LVL27:
 335              	.L35:
 336              		.cfi_restore_state
 337 0020 0149     		ldr	r1, .L37+4
 338 0022 F8E7     		b	.L36
 339              	.L38:
 340              		.align	2
 341              	.L37:
 342 0024 00000000 		.word	qk_unregister_mods
 343 0028 00000000 		.word	qk_unregister_weak_mods
 344              		.cfi_endproc
 345              	.LFE14:
 347              		.section	.text.tap_code16,"ax",%progbits
 348              		.align	1
 349              		.global	tap_code16
 350              		.syntax unified
 351              		.thumb
 352              		.thumb_func
 353              		.fpu fpv4-sp-d16
 355              	tap_code16:
 356              	.LFB15:
 142:quantum/quantum.c **** 
 143:quantum/quantum.c **** void tap_code16(uint16_t code) {
 357              		.loc 1 143 0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 0
 360              		@ frame_needed = 0, uses_anonymous_args = 0
 361              	.LVL28:
 362 0000 10B5     		push	{r4, lr}
 363              		.cfi_def_cfa_offset 8
 364              		.cfi_offset 4, -8
 365              		.cfi_offset 14, -4
 366              		.loc 1 143 0
 367 0002 0446     		mov	r4, r0
 144:quantum/quantum.c ****     register_code16(code);
 368              		.loc 1 144 0
 369 0004 FFF7FEFF 		bl	register_code16
 370              	.LVL29:
 145:quantum/quantum.c **** #if TAP_CODE_DELAY > 0
 146:quantum/quantum.c ****     wait_ms(TAP_CODE_DELAY);
 147:quantum/quantum.c **** #endif
 148:quantum/quantum.c ****     unregister_code16(code);
 371              		.loc 1 148 0
 372 0008 2046     		mov	r0, r4
 149:quantum/quantum.c **** }
 373              		.loc 1 149 0
 374 000a BDE81040 		pop	{r4, lr}
 375              		.cfi_restore 14
 376              		.cfi_restore 4
 377              		.cfi_def_cfa_offset 0
 148:quantum/quantum.c **** }
 378              		.loc 1 148 0
 379 000e FFF7FEBF 		b	unregister_code16
 380              	.LVL30:
 381              		.cfi_endproc
 382              	.LFE15:
 384              		.section	.text.process_action_kb,"ax",%progbits
 385              		.align	1
 386              		.weak	process_action_kb
 387              		.syntax unified
 388              		.thumb
 389              		.thumb_func
 390              		.fpu fpv4-sp-d16
 392              	process_action_kb:
 393              	.LFB16:
 150:quantum/quantum.c **** 
 151:quantum/quantum.c **** __attribute__((weak)) bool process_action_kb(keyrecord_t *record) { return true; }
 394              		.loc 1 151 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 399              	.LVL31:
 400              		.loc 1 151 0
 401 0000 0120     		movs	r0, #1
 402              	.LVL32:
 403 0002 7047     		bx	lr
 404              		.cfi_endproc
 405              	.LFE16:
 407              		.section	.text.process_record_user,"ax",%progbits
 408              		.align	1
 409              		.weak	process_record_user
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 413              		.fpu fpv4-sp-d16
 415              	process_record_user:
 416              	.LFB18:
 152:quantum/quantum.c **** 
 153:quantum/quantum.c **** __attribute__((weak)) bool process_record_kb(uint16_t keycode, keyrecord_t *record) { return proces
 154:quantum/quantum.c **** 
 155:quantum/quantum.c **** __attribute__((weak)) bool process_record_user(uint16_t keycode, keyrecord_t *record) { return true
 417              		.loc 1 155 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421              		@ link register save eliminated.
 422              	.LVL33:
 423              		.loc 1 155 0
 424 0000 0120     		movs	r0, #1
 425              	.LVL34:
 426 0002 7047     		bx	lr
 427              		.cfi_endproc
 428              	.LFE18:
 430              		.section	.text.process_record_kb,"ax",%progbits
 431              		.align	1
 432              		.weak	process_record_kb
 433              		.syntax unified
 434              		.thumb
 435              		.thumb_func
 436              		.fpu fpv4-sp-d16
 438              	process_record_kb:
 439              	.LFB17:
 153:quantum/quantum.c **** 
 440              		.loc 1 153 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 0
 443              		@ frame_needed = 0, uses_anonymous_args = 0
 444              	.LVL35:
 445 0000 08B5     		push	{r3, lr}
 446              		.cfi_def_cfa_offset 8
 447              		.cfi_offset 3, -8
 448              		.cfi_offset 14, -4
 153:quantum/quantum.c **** 
 449              		.loc 1 153 0
 450 0002 FFF7FEFF 		bl	process_record_user
 451              	.LVL36:
 452 0006 08BD     		pop	{r3, pc}
 453              		.cfi_endproc
 454              	.LFE17:
 456              		.section	.text.get_event_keycode,"ax",%progbits
 457              		.align	1
 458              		.global	get_event_keycode
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 462              		.fpu fpv4-sp-d16
 464              	get_event_keycode:
 465              	.LFB21:
 156:quantum/quantum.c **** 
 157:quantum/quantum.c **** void reset_keyboard(void) {
 158:quantum/quantum.c ****     clear_keyboard();
 159:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 160:quantum/quantum.c ****     process_midi_all_notes_off();
 161:quantum/quantum.c **** #endif
 162:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 163:quantum/quantum.c **** #    ifndef NO_MUSIC_MODE
 164:quantum/quantum.c ****     music_all_notes_off();
 165:quantum/quantum.c **** #    endif
 166:quantum/quantum.c ****     uint16_t timer_start = timer_read();
 167:quantum/quantum.c ****     PLAY_SONG(goodbye_song);
 168:quantum/quantum.c ****     shutdown_user();
 169:quantum/quantum.c ****     while (timer_elapsed(timer_start) < 250) wait_ms(1);
 170:quantum/quantum.c ****     stop_all_notes();
 171:quantum/quantum.c **** #else
 172:quantum/quantum.c ****     shutdown_user();
 173:quantum/quantum.c ****     wait_ms(250);
 174:quantum/quantum.c **** #endif
 175:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 176:quantum/quantum.c ****     haptic_shutdown();
 177:quantum/quantum.c **** #endif
 178:quantum/quantum.c **** // this is also done later in bootloader.c - not sure if it's neccesary here
 179:quantum/quantum.c **** #ifdef BOOTLOADER_CATERINA
 180:quantum/quantum.c ****     *(uint16_t *)0x0800 = 0x7777;  // these two are a-star-specific
 181:quantum/quantum.c **** #endif
 182:quantum/quantum.c ****     bootloader_jump();
 183:quantum/quantum.c **** }
 184:quantum/quantum.c **** 
 185:quantum/quantum.c **** /* true if the last press of GRAVE_ESC was shifted (i.e. GUI or SHIFT were pressed), false otherwis
 186:quantum/quantum.c ****  * Used to ensure that the correct keycode is released if the key is released.
 187:quantum/quantum.c ****  */
 188:quantum/quantum.c **** static bool grave_esc_was_shifted = false;
 189:quantum/quantum.c **** 
 190:quantum/quantum.c **** /* Convert record into usable keycode via the contained event. */
 191:quantum/quantum.c **** uint16_t get_record_keycode(keyrecord_t *record) { return get_event_keycode(record->event); }
 192:quantum/quantum.c **** 
 193:quantum/quantum.c **** /* Convert event into usable keycode. Checks the layer cache to ensure that it
 194:quantum/quantum.c ****  * retains the correct keycode after a layer change, if the key is still pressed.
 195:quantum/quantum.c ****  */
 196:quantum/quantum.c **** uint16_t get_event_keycode(keyevent_t event) {
 466              		.loc 1 196 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 8
 469              		@ frame_needed = 0, uses_anonymous_args = 0
 470 0000 13B5     		push	{r0, r1, r4, lr}
 471              		.cfi_def_cfa_offset 16
 472              		.cfi_offset 4, -8
 473              		.cfi_offset 14, -4
 474              		.loc 1 196 0
 475 0002 02AB     		add	r3, sp, #8
 476 0004 03E90300 		stmdb	r3, {r0, r1}
 197:quantum/quantum.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 198:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 199:quantum/quantum.c ****     if (!disable_action_cache) {
 477              		.loc 1 199 0
 478 0008 0E4B     		ldr	r3, .L48
 479 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 480 000c ABB9     		cbnz	r3, .L44
 481              	.LBB2:
 200:quantum/quantum.c ****         uint8_t layer;
 201:quantum/quantum.c **** 
 202:quantum/quantum.c ****         if (event.pressed) {
 482              		.loc 1 202 0
 483 000e 9DF80230 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 203:quantum/quantum.c ****             layer = layer_switch_get_layer(event.key);
 484              		.loc 1 203 0
 485 0012 0098     		ldr	r0, [sp]
 202:quantum/quantum.c ****             layer = layer_switch_get_layer(event.key);
 486              		.loc 1 202 0
 487 0014 6BB1     		cbz	r3, .L45
 488              		.loc 1 203 0
 489 0016 FFF7FEFF 		bl	layer_switch_get_layer
 490              	.LVL37:
 491 001a 0446     		mov	r4, r0
 492              	.LVL38:
 204:quantum/quantum.c ****             update_source_layers_cache(event.key, layer);
 493              		.loc 1 204 0
 494 001c 0146     		mov	r1, r0
 495 001e 0098     		ldr	r0, [sp]
 496              	.LVL39:
 497 0020 FFF7FEFF 		bl	update_source_layers_cache
 498              	.LVL40:
 499              	.L46:
 205:quantum/quantum.c ****         } else {
 206:quantum/quantum.c ****             layer = read_source_layers_cache(event.key);
 207:quantum/quantum.c ****         }
 208:quantum/quantum.c ****         return keymap_key_to_keycode(layer, event.key);
 500              		.loc 1 208 0
 501 0024 0099     		ldr	r1, [sp]
 502 0026 2046     		mov	r0, r4
 503              	.LVL41:
 504              	.L47:
 505              	.LBE2:
 209:quantum/quantum.c ****     } else
 210:quantum/quantum.c **** #endif
 211:quantum/quantum.c ****         return keymap_key_to_keycode(layer_switch_get_layer(event.key), event.key);
 212:quantum/quantum.c **** }
 506              		.loc 1 212 0
 507 0028 02B0     		add	sp, sp, #8
 508              		.cfi_remember_state
 509              		.cfi_def_cfa_offset 8
 510              		@ sp needed
 511 002a BDE81040 		pop	{r4, lr}
 512              		.cfi_restore 14
 513              		.cfi_restore 4
 514              		.cfi_def_cfa_offset 0
 211:quantum/quantum.c **** }
 515              		.loc 1 211 0
 516 002e FFF7FEBF 		b	keymap_key_to_keycode
 517              	.LVL42:
 518              	.L45:
 519              		.cfi_restore_state
 520              	.LBB3:
 206:quantum/quantum.c ****         }
 521              		.loc 1 206 0
 522 0032 FFF7FEFF 		bl	read_source_layers_cache
 523              	.LVL43:
 524 0036 0446     		mov	r4, r0
 525              	.LVL44:
 526 0038 F4E7     		b	.L46
 527              	.LVL45:
 528              	.L44:
 529              	.LBE3:
 211:quantum/quantum.c **** }
 530              		.loc 1 211 0
 531 003a 0098     		ldr	r0, [sp]
 532 003c FFF7FEFF 		bl	layer_switch_get_layer
 533              	.LVL46:
 534 0040 0099     		ldr	r1, [sp]
 535 0042 F1E7     		b	.L47
 536              	.L49:
 537              		.align	2
 538              	.L48:
 539 0044 00000000 		.word	disable_action_cache
 540              		.cfi_endproc
 541              	.LFE21:
 543              		.section	.text.get_record_keycode,"ax",%progbits
 544              		.align	1
 545              		.global	get_record_keycode
 546              		.syntax unified
 547              		.thumb
 548              		.thumb_func
 549              		.fpu fpv4-sp-d16
 551              	get_record_keycode:
 552              	.LFB20:
 191:quantum/quantum.c **** 
 553              		.loc 1 191 0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 0
 556              		@ frame_needed = 0, uses_anonymous_args = 0
 557              		@ link register save eliminated.
 558              	.LVL47:
 191:quantum/quantum.c **** 
 559              		.loc 1 191 0
 560 0000 0346     		mov	r3, r0
 561 0002 0068     		ldr	r0, [r0]	@ unaligned
 562              	.LVL48:
 563 0004 9988     		ldrh	r1, [r3, #4]
 564 0006 FFF7FEBF 		b	get_event_keycode
 565              	.LVL49:
 566              		.cfi_endproc
 567              	.LFE20:
 569              		.section	.text.send_char,"ax",%progbits
 570              		.align	1
 571              		.global	send_char
 572              		.syntax unified
 573              		.thumb
 574              		.thumb_func
 575              		.fpu fpv4-sp-d16
 577              	send_char:
 578              	.LFB27:
 213:quantum/quantum.c **** 
 214:quantum/quantum.c **** /* Main keycode processing function. Hands off handling to other functions,
 215:quantum/quantum.c ****  * then processes internal Quantum keycodes, then processes ACTIONs.
 216:quantum/quantum.c ****  */
 217:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 218:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 219:quantum/quantum.c **** 
 220:quantum/quantum.c ****     // This is how you use actions here
 221:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 222:quantum/quantum.c ****     //   action_t action;
 223:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 224:quantum/quantum.c ****     //   process_action(record, action);
 225:quantum/quantum.c ****     //   return false;
 226:quantum/quantum.c ****     // }
 227:quantum/quantum.c **** 
 228:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
 229:quantum/quantum.c ****     if (velocikey_enabled() && record->event.pressed) {
 230:quantum/quantum.c ****         velocikey_accelerate();
 231:quantum/quantum.c ****     }
 232:quantum/quantum.c **** #endif
 233:quantum/quantum.c **** 
 234:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 235:quantum/quantum.c ****     preprocess_tap_dance(keycode, record);
 236:quantum/quantum.c **** #endif
 237:quantum/quantum.c **** 
 238:quantum/quantum.c ****     if (!(
 239:quantum/quantum.c **** #if defined(KEY_LOCK_ENABLE)
 240:quantum/quantum.c ****             // Must run first to be able to mask key_up events.
 241:quantum/quantum.c ****             process_key_lock(&keycode, record) &&
 242:quantum/quantum.c **** #endif
 243:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && defined(AUDIO_CLICKY)
 244:quantum/quantum.c ****             process_clicky(keycode, record) &&
 245:quantum/quantum.c **** #endif  // AUDIO_CLICKY
 246:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 247:quantum/quantum.c ****             process_haptic(keycode, record) &&
 248:quantum/quantum.c **** #endif  // HAPTIC_ENABLE
 249:quantum/quantum.c **** #if defined(RGB_MATRIX_ENABLE)
 250:quantum/quantum.c ****             process_rgb_matrix(keycode, record) &&
 251:quantum/quantum.c **** #endif
 252:quantum/quantum.c ****             process_record_kb(keycode, record) &&
 253:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 254:quantum/quantum.c ****             process_midi(keycode, record) &&
 255:quantum/quantum.c **** #endif
 256:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 257:quantum/quantum.c ****             process_audio(keycode, record) &&
 258:quantum/quantum.c **** #endif
 259:quantum/quantum.c **** #ifdef STENO_ENABLE
 260:quantum/quantum.c ****             process_steno(keycode, record) &&
 261:quantum/quantum.c **** #endif
 262:quantum/quantum.c **** #if (defined(AUDIO_ENABLE) || (defined(MIDI_ENABLE) && defined(MIDI_BASIC))) && !defined(NO_MUSIC_M
 263:quantum/quantum.c ****             process_music(keycode, record) &&
 264:quantum/quantum.c **** #endif
 265:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 266:quantum/quantum.c ****             process_tap_dance(keycode, record) &&
 267:quantum/quantum.c **** #endif
 268:quantum/quantum.c **** #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 269:quantum/quantum.c ****             process_unicode_common(keycode, record) &&
 270:quantum/quantum.c **** #endif
 271:quantum/quantum.c **** #ifdef LEADER_ENABLE
 272:quantum/quantum.c ****             process_leader(keycode, record) &&
 273:quantum/quantum.c **** #endif
 274:quantum/quantum.c **** #ifdef COMBO_ENABLE
 275:quantum/quantum.c ****             process_combo(keycode, record) &&
 276:quantum/quantum.c **** #endif
 277:quantum/quantum.c **** #ifdef PRINTING_ENABLE
 278:quantum/quantum.c ****             process_printer(keycode, record) &&
 279:quantum/quantum.c **** #endif
 280:quantum/quantum.c **** #ifdef AUTO_SHIFT_ENABLE
 281:quantum/quantum.c ****             process_auto_shift(keycode, record) &&
 282:quantum/quantum.c **** #endif
 283:quantum/quantum.c **** #ifdef TERMINAL_ENABLE
 284:quantum/quantum.c ****             process_terminal(keycode, record) &&
 285:quantum/quantum.c **** #endif
 286:quantum/quantum.c **** #ifdef SPACE_CADET_ENABLE
 287:quantum/quantum.c ****             process_space_cadet(keycode, record) &&
 288:quantum/quantum.c **** #endif
 289:quantum/quantum.c ****             true)) {
 290:quantum/quantum.c ****         return false;
 291:quantum/quantum.c ****     }
 292:quantum/quantum.c **** 
 293:quantum/quantum.c ****     // Shift / paren setup
 294:quantum/quantum.c **** 
 295:quantum/quantum.c ****     switch (keycode) {
 296:quantum/quantum.c ****         case RESET:
 297:quantum/quantum.c ****             if (record->event.pressed) {
 298:quantum/quantum.c ****                 reset_keyboard();
 299:quantum/quantum.c ****             }
 300:quantum/quantum.c ****             return false;
 301:quantum/quantum.c ****         case DEBUG:
 302:quantum/quantum.c ****             if (record->event.pressed) {
 303:quantum/quantum.c ****                 debug_enable ^= 1;
 304:quantum/quantum.c ****                 if (debug_enable) {
 305:quantum/quantum.c ****                     print("DEBUG: enabled.\n");
 306:quantum/quantum.c ****                 } else {
 307:quantum/quantum.c ****                     print("DEBUG: disabled.\n");
 308:quantum/quantum.c ****                 }
 309:quantum/quantum.c ****             }
 310:quantum/quantum.c ****             return false;
 311:quantum/quantum.c ****         case EEPROM_RESET:
 312:quantum/quantum.c ****             if (record->event.pressed) {
 313:quantum/quantum.c ****                 eeconfig_init();
 314:quantum/quantum.c ****             }
 315:quantum/quantum.c ****             return false;
 316:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
 317:quantum/quantum.c ****         case FC_TOG:
 318:quantum/quantum.c ****             if (record->event.pressed) {
 319:quantum/quantum.c ****                 FAUXCLICKY_TOGGLE;
 320:quantum/quantum.c ****             }
 321:quantum/quantum.c ****             return false;
 322:quantum/quantum.c ****         case FC_ON:
 323:quantum/quantum.c ****             if (record->event.pressed) {
 324:quantum/quantum.c ****                 FAUXCLICKY_ON;
 325:quantum/quantum.c ****             }
 326:quantum/quantum.c ****             return false;
 327:quantum/quantum.c ****         case FC_OFF:
 328:quantum/quantum.c ****             if (record->event.pressed) {
 329:quantum/quantum.c ****                 FAUXCLICKY_OFF;
 330:quantum/quantum.c ****             }
 331:quantum/quantum.c ****             return false;
 332:quantum/quantum.c **** #endif
 333:quantum/quantum.c **** #if defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 334:quantum/quantum.c ****         case RGB_TOG:
 335:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 336:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 337:quantum/quantum.c ****             if (record->event.pressed) {
 338:quantum/quantum.c **** #    else
 339:quantum/quantum.c ****             if (!record->event.pressed) {
 340:quantum/quantum.c **** #    endif
 341:quantum/quantum.c ****                 rgblight_toggle();
 342:quantum/quantum.c ****             }
 343:quantum/quantum.c ****             return false;
 344:quantum/quantum.c ****         case RGB_MODE_FORWARD:
 345:quantum/quantum.c ****             if (record->event.pressed) {
 346:quantum/quantum.c ****                 uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT));
 347:quantum/quantum.c ****                 if (shifted) {
 348:quantum/quantum.c ****                     rgblight_step_reverse();
 349:quantum/quantum.c ****                 } else {
 350:quantum/quantum.c ****                     rgblight_step();
 351:quantum/quantum.c ****                 }
 352:quantum/quantum.c ****             }
 353:quantum/quantum.c ****             return false;
 354:quantum/quantum.c ****         case RGB_MODE_REVERSE:
 355:quantum/quantum.c ****             if (record->event.pressed) {
 356:quantum/quantum.c ****                 uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT));
 357:quantum/quantum.c ****                 if (shifted) {
 358:quantum/quantum.c ****                     rgblight_step();
 359:quantum/quantum.c ****                 } else {
 360:quantum/quantum.c ****                     rgblight_step_reverse();
 361:quantum/quantum.c ****                 }
 362:quantum/quantum.c ****             }
 363:quantum/quantum.c ****             return false;
 364:quantum/quantum.c ****         case RGB_HUI:
 365:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 366:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 367:quantum/quantum.c ****             if (record->event.pressed) {
 368:quantum/quantum.c **** #    else
 369:quantum/quantum.c ****             if (!record->event.pressed) {
 370:quantum/quantum.c **** #    endif
 371:quantum/quantum.c ****                 rgblight_increase_hue();
 372:quantum/quantum.c ****             }
 373:quantum/quantum.c ****             return false;
 374:quantum/quantum.c ****         case RGB_HUD:
 375:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 376:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 377:quantum/quantum.c ****             if (record->event.pressed) {
 378:quantum/quantum.c **** #    else
 379:quantum/quantum.c ****             if (!record->event.pressed) {
 380:quantum/quantum.c **** #    endif
 381:quantum/quantum.c ****                 rgblight_decrease_hue();
 382:quantum/quantum.c ****             }
 383:quantum/quantum.c ****             return false;
 384:quantum/quantum.c ****         case RGB_SAI:
 385:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 386:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 387:quantum/quantum.c ****             if (record->event.pressed) {
 388:quantum/quantum.c **** #    else
 389:quantum/quantum.c ****             if (!record->event.pressed) {
 390:quantum/quantum.c **** #    endif
 391:quantum/quantum.c ****                 rgblight_increase_sat();
 392:quantum/quantum.c ****             }
 393:quantum/quantum.c ****             return false;
 394:quantum/quantum.c ****         case RGB_SAD:
 395:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 396:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 397:quantum/quantum.c ****             if (record->event.pressed) {
 398:quantum/quantum.c **** #    else
 399:quantum/quantum.c ****             if (!record->event.pressed) {
 400:quantum/quantum.c **** #    endif
 401:quantum/quantum.c ****                 rgblight_decrease_sat();
 402:quantum/quantum.c ****             }
 403:quantum/quantum.c ****             return false;
 404:quantum/quantum.c ****         case RGB_VAI:
 405:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 406:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 407:quantum/quantum.c ****             if (record->event.pressed) {
 408:quantum/quantum.c **** #    else
 409:quantum/quantum.c ****             if (!record->event.pressed) {
 410:quantum/quantum.c **** #    endif
 411:quantum/quantum.c ****                 rgblight_increase_val();
 412:quantum/quantum.c ****             }
 413:quantum/quantum.c ****             return false;
 414:quantum/quantum.c ****         case RGB_VAD:
 415:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 416:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 417:quantum/quantum.c ****             if (record->event.pressed) {
 418:quantum/quantum.c **** #    else
 419:quantum/quantum.c ****             if (!record->event.pressed) {
 420:quantum/quantum.c **** #    endif
 421:quantum/quantum.c ****                 rgblight_decrease_val();
 422:quantum/quantum.c ****             }
 423:quantum/quantum.c ****             return false;
 424:quantum/quantum.c ****         case RGB_SPI:
 425:quantum/quantum.c ****             if (record->event.pressed) {
 426:quantum/quantum.c ****                 rgblight_increase_speed();
 427:quantum/quantum.c ****             }
 428:quantum/quantum.c ****             return false;
 429:quantum/quantum.c ****         case RGB_SPD:
 430:quantum/quantum.c ****             if (record->event.pressed) {
 431:quantum/quantum.c ****                 rgblight_decrease_speed();
 432:quantum/quantum.c ****             }
 433:quantum/quantum.c ****             return false;
 434:quantum/quantum.c ****         case RGB_MODE_PLAIN:
 435:quantum/quantum.c ****             if (record->event.pressed) {
 436:quantum/quantum.c ****                 rgblight_mode(RGBLIGHT_MODE_STATIC_LIGHT);
 437:quantum/quantum.c ****             }
 438:quantum/quantum.c ****             return false;
 439:quantum/quantum.c ****         case RGB_MODE_BREATHE:
 440:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_BREATHING
 441:quantum/quantum.c ****             if (record->event.pressed) {
 442:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_BREATHING <= rgblight_get_mode()) && (rgblight_get_mode() < RGBL
 443:quantum/quantum.c ****                     rgblight_step();
 444:quantum/quantum.c ****                 } else {
 445:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_BREATHING);
 446:quantum/quantum.c ****                 }
 447:quantum/quantum.c ****             }
 448:quantum/quantum.c **** #    endif
 449:quantum/quantum.c ****             return false;
 450:quantum/quantum.c ****         case RGB_MODE_RAINBOW:
 451:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_RAINBOW_MOOD
 452:quantum/quantum.c ****             if (record->event.pressed) {
 453:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_RAINBOW_MOOD <= rgblight_get_mode()) && (rgblight_get_mode() < R
 454:quantum/quantum.c ****                     rgblight_step();
 455:quantum/quantum.c ****                 } else {
 456:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_RAINBOW_MOOD);
 457:quantum/quantum.c ****                 }
 458:quantum/quantum.c ****             }
 459:quantum/quantum.c **** #    endif
 460:quantum/quantum.c ****             return false;
 461:quantum/quantum.c ****         case RGB_MODE_SWIRL:
 462:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_RAINBOW_SWIRL
 463:quantum/quantum.c ****             if (record->event.pressed) {
 464:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_RAINBOW_SWIRL <= rgblight_get_mode()) && (rgblight_get_mode() < 
 465:quantum/quantum.c ****                     rgblight_step();
 466:quantum/quantum.c ****                 } else {
 467:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_RAINBOW_SWIRL);
 468:quantum/quantum.c ****                 }
 469:quantum/quantum.c ****             }
 470:quantum/quantum.c **** #    endif
 471:quantum/quantum.c ****             return false;
 472:quantum/quantum.c ****         case RGB_MODE_SNAKE:
 473:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_SNAKE
 474:quantum/quantum.c ****             if (record->event.pressed) {
 475:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_SNAKE <= rgblight_get_mode()) && (rgblight_get_mode() < RGBLIGHT
 476:quantum/quantum.c ****                     rgblight_step();
 477:quantum/quantum.c ****                 } else {
 478:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_SNAKE);
 479:quantum/quantum.c ****                 }
 480:quantum/quantum.c ****             }
 481:quantum/quantum.c **** #    endif
 482:quantum/quantum.c ****             return false;
 483:quantum/quantum.c ****         case RGB_MODE_KNIGHT:
 484:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_KNIGHT
 485:quantum/quantum.c ****             if (record->event.pressed) {
 486:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_KNIGHT <= rgblight_get_mode()) && (rgblight_get_mode() < RGBLIGH
 487:quantum/quantum.c ****                     rgblight_step();
 488:quantum/quantum.c ****                 } else {
 489:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_KNIGHT);
 490:quantum/quantum.c ****                 }
 491:quantum/quantum.c ****             }
 492:quantum/quantum.c **** #    endif
 493:quantum/quantum.c ****             return false;
 494:quantum/quantum.c ****         case RGB_MODE_XMAS:
 495:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_CHRISTMAS
 496:quantum/quantum.c ****             if (record->event.pressed) {
 497:quantum/quantum.c ****                 rgblight_mode(RGBLIGHT_MODE_CHRISTMAS);
 498:quantum/quantum.c ****             }
 499:quantum/quantum.c **** #    endif
 500:quantum/quantum.c ****             return false;
 501:quantum/quantum.c ****         case RGB_MODE_GRADIENT:
 502:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_STATIC_GRADIENT
 503:quantum/quantum.c ****             if (record->event.pressed) {
 504:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_STATIC_GRADIENT <= rgblight_get_mode()) && (rgblight_get_mode() 
 505:quantum/quantum.c ****                     rgblight_step();
 506:quantum/quantum.c ****                 } else {
 507:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_STATIC_GRADIENT);
 508:quantum/quantum.c ****                 }
 509:quantum/quantum.c ****             }
 510:quantum/quantum.c **** #    endif
 511:quantum/quantum.c ****             return false;
 512:quantum/quantum.c ****         case RGB_MODE_RGBTEST:
 513:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_RGB_TEST
 514:quantum/quantum.c ****             if (record->event.pressed) {
 515:quantum/quantum.c ****                 rgblight_mode(RGBLIGHT_MODE_RGB_TEST);
 516:quantum/quantum.c ****             }
 517:quantum/quantum.c **** #    endif
 518:quantum/quantum.c ****             return false;
 519:quantum/quantum.c **** #endif  // defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 520:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
 521:quantum/quantum.c ****         case VLK_TOG:
 522:quantum/quantum.c ****             if (record->event.pressed) {
 523:quantum/quantum.c ****                 velocikey_toggle();
 524:quantum/quantum.c ****             }
 525:quantum/quantum.c ****             return false;
 526:quantum/quantum.c **** #endif
 527:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
 528:quantum/quantum.c ****         case OUT_AUTO:
 529:quantum/quantum.c ****             if (record->event.pressed) {
 530:quantum/quantum.c ****                 set_output(OUTPUT_AUTO);
 531:quantum/quantum.c ****             }
 532:quantum/quantum.c ****             return false;
 533:quantum/quantum.c ****         case OUT_USB:
 534:quantum/quantum.c ****             if (record->event.pressed) {
 535:quantum/quantum.c ****                 set_output(OUTPUT_USB);
 536:quantum/quantum.c ****             }
 537:quantum/quantum.c ****             return false;
 538:quantum/quantum.c **** #    ifdef BLUETOOTH_ENABLE
 539:quantum/quantum.c ****         case OUT_BT:
 540:quantum/quantum.c ****             if (record->event.pressed) {
 541:quantum/quantum.c ****                 set_output(OUTPUT_BLUETOOTH);
 542:quantum/quantum.c ****             }
 543:quantum/quantum.c ****             return false;
 544:quantum/quantum.c **** #    endif
 545:quantum/quantum.c **** #endif
 546:quantum/quantum.c ****         case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_ALT_GUI:
 547:quantum/quantum.c ****         case MAGIC_SWAP_LCTL_LGUI ... MAGIC_TOGGLE_CTL_GUI:
 548:quantum/quantum.c ****             if (record->event.pressed) {
 549:quantum/quantum.c ****                 // MAGIC actions (BOOTMAGIC without the boot)
 550:quantum/quantum.c ****                 if (!eeconfig_is_enabled()) {
 551:quantum/quantum.c ****                     eeconfig_init();
 552:quantum/quantum.c ****                 }
 553:quantum/quantum.c ****                 /* keymap config */
 554:quantum/quantum.c ****                 keymap_config.raw = eeconfig_read_keymap();
 555:quantum/quantum.c ****                 switch (keycode) {
 556:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 557:quantum/quantum.c ****                         keymap_config.swap_control_capslock = true;
 558:quantum/quantum.c ****                         break;
 559:quantum/quantum.c ****                     case MAGIC_CAPSLOCK_TO_CONTROL:
 560:quantum/quantum.c ****                         keymap_config.capslock_to_control = true;
 561:quantum/quantum.c ****                         break;
 562:quantum/quantum.c ****                     case MAGIC_SWAP_LALT_LGUI:
 563:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = true;
 564:quantum/quantum.c ****                         break;
 565:quantum/quantum.c ****                     case MAGIC_SWAP_RALT_RGUI:
 566:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = true;
 567:quantum/quantum.c ****                         break;
 568:quantum/quantum.c ****                     case MAGIC_SWAP_LCTL_LGUI:
 569:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = true;
 570:quantum/quantum.c ****                         break;
 571:quantum/quantum.c ****                     case MAGIC_SWAP_RCTL_RGUI:
 572:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = true;
 573:quantum/quantum.c ****                         break;
 574:quantum/quantum.c ****                     case MAGIC_NO_GUI:
 575:quantum/quantum.c ****                         keymap_config.no_gui = true;
 576:quantum/quantum.c ****                         break;
 577:quantum/quantum.c ****                     case MAGIC_SWAP_GRAVE_ESC:
 578:quantum/quantum.c ****                         keymap_config.swap_grave_esc = true;
 579:quantum/quantum.c ****                         break;
 580:quantum/quantum.c ****                     case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 581:quantum/quantum.c ****                         keymap_config.swap_backslash_backspace = true;
 582:quantum/quantum.c ****                         break;
 583:quantum/quantum.c ****                     case MAGIC_HOST_NKRO:
 584:quantum/quantum.c ****                         keymap_config.nkro = true;
 585:quantum/quantum.c ****                         break;
 586:quantum/quantum.c ****                     case MAGIC_SWAP_ALT_GUI:
 587:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = keymap_config.swap_ralt_rgui = true;
 588:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 589:quantum/quantum.c ****                         PLAY_SONG(ag_swap_song);
 590:quantum/quantum.c **** #endif
 591:quantum/quantum.c ****                         break;
 592:quantum/quantum.c ****                     case MAGIC_SWAP_CTL_GUI:
 593:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = keymap_config.swap_rctl_rgui = true;
 594:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 595:quantum/quantum.c ****                         PLAY_SONG(cg_swap_song);
 596:quantum/quantum.c **** #endif
 597:quantum/quantum.c ****                         break;
 598:quantum/quantum.c ****                     case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 599:quantum/quantum.c ****                         keymap_config.swap_control_capslock = false;
 600:quantum/quantum.c ****                         break;
 601:quantum/quantum.c ****                     case MAGIC_UNCAPSLOCK_TO_CONTROL:
 602:quantum/quantum.c ****                         keymap_config.capslock_to_control = false;
 603:quantum/quantum.c ****                         break;
 604:quantum/quantum.c ****                     case MAGIC_UNSWAP_LALT_LGUI:
 605:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = false;
 606:quantum/quantum.c ****                         break;
 607:quantum/quantum.c ****                     case MAGIC_UNSWAP_RALT_RGUI:
 608:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = false;
 609:quantum/quantum.c ****                         break;
 610:quantum/quantum.c ****                     case MAGIC_UNSWAP_LCTL_LGUI:
 611:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = false;
 612:quantum/quantum.c ****                         break;
 613:quantum/quantum.c ****                     case MAGIC_UNSWAP_RCTL_RGUI:
 614:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = false;
 615:quantum/quantum.c ****                         break;
 616:quantum/quantum.c ****                     case MAGIC_UNNO_GUI:
 617:quantum/quantum.c ****                         keymap_config.no_gui = false;
 618:quantum/quantum.c ****                         break;
 619:quantum/quantum.c ****                     case MAGIC_UNSWAP_GRAVE_ESC:
 620:quantum/quantum.c ****                         keymap_config.swap_grave_esc = false;
 621:quantum/quantum.c ****                         break;
 622:quantum/quantum.c ****                     case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 623:quantum/quantum.c ****                         keymap_config.swap_backslash_backspace = false;
 624:quantum/quantum.c ****                         break;
 625:quantum/quantum.c ****                     case MAGIC_UNHOST_NKRO:
 626:quantum/quantum.c ****                         keymap_config.nkro = false;
 627:quantum/quantum.c ****                         break;
 628:quantum/quantum.c ****                     case MAGIC_UNSWAP_ALT_GUI:
 629:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = keymap_config.swap_ralt_rgui = false;
 630:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 631:quantum/quantum.c ****                         PLAY_SONG(ag_norm_song);
 632:quantum/quantum.c **** #endif
 633:quantum/quantum.c ****                         break;
 634:quantum/quantum.c ****                     case MAGIC_UNSWAP_CTL_GUI:
 635:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = keymap_config.swap_rctl_rgui = false;
 636:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 637:quantum/quantum.c ****                         PLAY_SONG(cg_norm_song);
 638:quantum/quantum.c **** #endif
 639:quantum/quantum.c ****                         break;
 640:quantum/quantum.c ****                     case MAGIC_TOGGLE_ALT_GUI:
 641:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 642:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = keymap_config.swap_lalt_lgui;
 643:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 644:quantum/quantum.c ****                         if (keymap_config.swap_ralt_rgui) {
 645:quantum/quantum.c ****                             PLAY_SONG(ag_swap_song);
 646:quantum/quantum.c ****                         } else {
 647:quantum/quantum.c ****                             PLAY_SONG(ag_norm_song);
 648:quantum/quantum.c ****                         }
 649:quantum/quantum.c **** #endif
 650:quantum/quantum.c ****                         break;
 651:quantum/quantum.c ****                     case MAGIC_TOGGLE_CTL_GUI:
 652:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = !keymap_config.swap_lctl_lgui;
 653:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = keymap_config.swap_lctl_lgui;
 654:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 655:quantum/quantum.c ****                         if (keymap_config.swap_rctl_rgui) {
 656:quantum/quantum.c ****                             PLAY_SONG(cg_swap_song);
 657:quantum/quantum.c ****                         } else {
 658:quantum/quantum.c ****                             PLAY_SONG(cg_norm_song);
 659:quantum/quantum.c ****                         }
 660:quantum/quantum.c **** #endif
 661:quantum/quantum.c ****                         break;
 662:quantum/quantum.c ****                     case MAGIC_TOGGLE_NKRO:
 663:quantum/quantum.c ****                         keymap_config.nkro = !keymap_config.nkro;
 664:quantum/quantum.c ****                         break;
 665:quantum/quantum.c ****                     default:
 666:quantum/quantum.c ****                         break;
 667:quantum/quantum.c ****                 }
 668:quantum/quantum.c ****                 eeconfig_update_keymap(keymap_config.raw);
 669:quantum/quantum.c ****                 clear_keyboard();  // clear to prevent stuck keys
 670:quantum/quantum.c **** 
 671:quantum/quantum.c ****                 return false;
 672:quantum/quantum.c ****             }
 673:quantum/quantum.c ****             break;
 674:quantum/quantum.c **** 
 675:quantum/quantum.c ****         case GRAVE_ESC: {
 676:quantum/quantum.c ****             uint8_t shifted = get_mods() & ((MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT) | MOD_BIT(KC_L
 677:quantum/quantum.c **** 
 678:quantum/quantum.c **** #ifdef GRAVE_ESC_ALT_OVERRIDE
 679:quantum/quantum.c ****             // if ALT is pressed, ESC is always sent
 680:quantum/quantum.c ****             // this is handy for the cmd+opt+esc shortcut on macOS, among other things.
 681:quantum/quantum.c ****             if (get_mods() & (MOD_BIT(KC_LALT) | MOD_BIT(KC_RALT))) {
 682:quantum/quantum.c ****                 shifted = 0;
 683:quantum/quantum.c ****             }
 684:quantum/quantum.c **** #endif
 685:quantum/quantum.c **** 
 686:quantum/quantum.c **** #ifdef GRAVE_ESC_CTRL_OVERRIDE
 687:quantum/quantum.c ****             // if CTRL is pressed, ESC is always sent
 688:quantum/quantum.c ****             // this is handy for the ctrl+shift+esc shortcut on windows, among other things.
 689:quantum/quantum.c ****             if (get_mods() & (MOD_BIT(KC_LCTL) | MOD_BIT(KC_RCTL))) {
 690:quantum/quantum.c ****                 shifted = 0;
 691:quantum/quantum.c ****             }
 692:quantum/quantum.c **** #endif
 693:quantum/quantum.c **** 
 694:quantum/quantum.c **** #ifdef GRAVE_ESC_GUI_OVERRIDE
 695:quantum/quantum.c ****             // if GUI is pressed, ESC is always sent
 696:quantum/quantum.c ****             if (get_mods() & (MOD_BIT(KC_LGUI) | MOD_BIT(KC_RGUI))) {
 697:quantum/quantum.c ****                 shifted = 0;
 698:quantum/quantum.c ****             }
 699:quantum/quantum.c **** #endif
 700:quantum/quantum.c **** 
 701:quantum/quantum.c **** #ifdef GRAVE_ESC_SHIFT_OVERRIDE
 702:quantum/quantum.c ****             // if SHIFT is pressed, ESC is always sent
 703:quantum/quantum.c ****             if (get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT))) {
 704:quantum/quantum.c ****                 shifted = 0;
 705:quantum/quantum.c ****             }
 706:quantum/quantum.c **** #endif
 707:quantum/quantum.c **** 
 708:quantum/quantum.c ****             if (record->event.pressed) {
 709:quantum/quantum.c ****                 grave_esc_was_shifted = shifted;
 710:quantum/quantum.c ****                 add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 711:quantum/quantum.c ****             } else {
 712:quantum/quantum.c ****                 del_key(grave_esc_was_shifted ? KC_GRAVE : KC_ESCAPE);
 713:quantum/quantum.c ****             }
 714:quantum/quantum.c **** 
 715:quantum/quantum.c ****             send_keyboard_report();
 716:quantum/quantum.c ****             return false;
 717:quantum/quantum.c ****         }
 718:quantum/quantum.c **** 
 719:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_BREATHING)
 720:quantum/quantum.c ****         case BL_BRTG: {
 721:quantum/quantum.c ****             if (record->event.pressed) {
 722:quantum/quantum.c ****                 backlight_toggle_breathing();
 723:quantum/quantum.c ****             }
 724:quantum/quantum.c ****             return false;
 725:quantum/quantum.c ****         }
 726:quantum/quantum.c **** #endif
 727:quantum/quantum.c ****     }
 728:quantum/quantum.c **** 
 729:quantum/quantum.c ****     return process_action_kb(record);
 730:quantum/quantum.c **** }
 731:quantum/quantum.c **** 
 732:quantum/quantum.c **** __attribute__((weak)) const bool ascii_to_shift_lut[128] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 733:quantum/quantum.c **** 
 734:quantum/quantum.c ****                                                                     0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1
 735:quantum/quantum.c **** 
 736:quantum/quantum.c **** __attribute__((weak)) const bool ascii_to_altgr_lut[128] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 737:quantum/quantum.c **** 
 738:quantum/quantum.c ****                                                                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 739:quantum/quantum.c **** 
 740:quantum/quantum.c **** __attribute__((weak)) const uint8_t ascii_to_keycode_lut[128] PROGMEM = {// NUL   SOH      STX     
 741:quantum/quantum.c ****                                                                          XXXXXXX, XXXXXXX, XXXXXXX,
 742:quantum/quantum.c ****                                                                          // BS    TAB      LF      
 743:quantum/quantum.c ****                                                                          KC_BSPC, KC_TAB, KC_ENT, X
 744:quantum/quantum.c ****                                                                          // DLE   DC1      DC2     
 745:quantum/quantum.c ****                                                                          XXXXXXX, XXXXXXX, XXXXXXX,
 746:quantum/quantum.c ****                                                                          // CAN   EM       SUB     
 747:quantum/quantum.c ****                                                                          XXXXXXX, XXXXXXX, XXXXXXX,
 748:quantum/quantum.c **** 
 749:quantum/quantum.c ****                                                                          //       !        "       
 750:quantum/quantum.c ****                                                                          KC_SPC, KC_1, KC_QUOT, KC_
 751:quantum/quantum.c ****                                                                          // (     )        *       
 752:quantum/quantum.c ****                                                                          KC_9, KC_0, KC_8, KC_EQL, 
 753:quantum/quantum.c ****                                                                          // 0     1        2       
 754:quantum/quantum.c ****                                                                          KC_0, KC_1, KC_2, KC_3, KC
 755:quantum/quantum.c ****                                                                          // 8     9        :       
 756:quantum/quantum.c ****                                                                          KC_8, KC_9, KC_SCLN, KC_SC
 757:quantum/quantum.c ****                                                                          // @     A        B       
 758:quantum/quantum.c ****                                                                          KC_2, KC_A, KC_B, KC_C, KC
 759:quantum/quantum.c ****                                                                          // H     I        J       
 760:quantum/quantum.c ****                                                                          KC_H, KC_I, KC_J, KC_K, KC
 761:quantum/quantum.c ****                                                                          // P     Q        R       
 762:quantum/quantum.c ****                                                                          KC_P, KC_Q, KC_R, KC_S, KC
 763:quantum/quantum.c ****                                                                          // X     Y        Z       
 764:quantum/quantum.c ****                                                                          KC_X, KC_Y, KC_Z, KC_LBRC,
 765:quantum/quantum.c ****                                                                          // `     a        b       
 766:quantum/quantum.c ****                                                                          KC_GRV, KC_A, KC_B, KC_C, 
 767:quantum/quantum.c ****                                                                          // h     i        j       
 768:quantum/quantum.c ****                                                                          KC_H, KC_I, KC_J, KC_K, KC
 769:quantum/quantum.c ****                                                                          // p     q        r       
 770:quantum/quantum.c ****                                                                          KC_P, KC_Q, KC_R, KC_S, KC
 771:quantum/quantum.c ****                                                                          // x     y        z       
 772:quantum/quantum.c ****                                                                          KC_X, KC_Y, KC_Z, KC_LBRC,
 773:quantum/quantum.c **** 
 774:quantum/quantum.c **** void send_string(const char *str) { send_string_with_delay(str, 0); }
 775:quantum/quantum.c **** 
 776:quantum/quantum.c **** void send_string_P(const char *str) { send_string_with_delay_P(str, 0); }
 777:quantum/quantum.c **** 
 778:quantum/quantum.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 779:quantum/quantum.c ****     while (1) {
 780:quantum/quantum.c ****         char ascii_code = *str;
 781:quantum/quantum.c ****         if (!ascii_code) break;
 782:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 783:quantum/quantum.c ****             // tap
 784:quantum/quantum.c ****             uint8_t keycode = *(++str);
 785:quantum/quantum.c ****             register_code(keycode);
 786:quantum/quantum.c ****             unregister_code(keycode);
 787:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 788:quantum/quantum.c ****             // down
 789:quantum/quantum.c ****             uint8_t keycode = *(++str);
 790:quantum/quantum.c ****             register_code(keycode);
 791:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 792:quantum/quantum.c ****             // up
 793:quantum/quantum.c ****             uint8_t keycode = *(++str);
 794:quantum/quantum.c ****             unregister_code(keycode);
 795:quantum/quantum.c ****         } else {
 796:quantum/quantum.c ****             send_char(ascii_code);
 797:quantum/quantum.c ****         }
 798:quantum/quantum.c ****         ++str;
 799:quantum/quantum.c ****         // interval
 800:quantum/quantum.c ****         {
 801:quantum/quantum.c ****             uint8_t ms = interval;
 802:quantum/quantum.c ****             while (ms--) wait_ms(1);
 803:quantum/quantum.c ****         }
 804:quantum/quantum.c ****     }
 805:quantum/quantum.c **** }
 806:quantum/quantum.c **** 
 807:quantum/quantum.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 808:quantum/quantum.c ****     while (1) {
 809:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 810:quantum/quantum.c ****         if (!ascii_code) break;
 811:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 812:quantum/quantum.c ****             // tap
 813:quantum/quantum.c ****             uint8_t keycode = pgm_read_byte(++str);
 814:quantum/quantum.c ****             register_code(keycode);
 815:quantum/quantum.c ****             unregister_code(keycode);
 816:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 817:quantum/quantum.c ****             // down
 818:quantum/quantum.c ****             uint8_t keycode = pgm_read_byte(++str);
 819:quantum/quantum.c ****             register_code(keycode);
 820:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 821:quantum/quantum.c ****             // up
 822:quantum/quantum.c ****             uint8_t keycode = pgm_read_byte(++str);
 823:quantum/quantum.c ****             unregister_code(keycode);
 824:quantum/quantum.c ****         } else {
 825:quantum/quantum.c ****             send_char(ascii_code);
 826:quantum/quantum.c ****         }
 827:quantum/quantum.c ****         ++str;
 828:quantum/quantum.c ****         // interval
 829:quantum/quantum.c ****         {
 830:quantum/quantum.c ****             uint8_t ms = interval;
 831:quantum/quantum.c ****             while (ms--) wait_ms(1);
 832:quantum/quantum.c ****         }
 833:quantum/quantum.c ****     }
 834:quantum/quantum.c **** }
 835:quantum/quantum.c **** 
 836:quantum/quantum.c **** void send_char(char ascii_code) {
 579              		.loc 1 836 0
 580              		.cfi_startproc
 581              		@ args = 0, pretend = 0, frame = 0
 582              		@ frame_needed = 0, uses_anonymous_args = 0
 583              	.LVL50:
 584 0000 70B5     		push	{r4, r5, r6, lr}
 585              		.cfi_def_cfa_offset 16
 586              		.cfi_offset 4, -16
 587              		.cfi_offset 5, -12
 588              		.cfi_offset 6, -8
 589              		.cfi_offset 14, -4
 837:quantum/quantum.c ****     uint8_t keycode    = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
 590              		.loc 1 837 0
 591 0002 0E4B     		ldr	r3, .L65
 592 0004 1E5C     		ldrb	r6, [r3, r0]	@ zero_extendqisi2
 593              	.LVL51:
 838:quantum/quantum.c ****     bool    is_shifted = pgm_read_byte(&ascii_to_shift_lut[(uint8_t)ascii_code]);
 594              		.loc 1 838 0
 595 0006 0E4B     		ldr	r3, .L65+4
 596 0008 C45C     		ldrb	r4, [r0, r3]	@ zero_extendqisi2
 597              	.LVL52:
 839:quantum/quantum.c ****     bool    is_altgred = pgm_read_byte(&ascii_to_altgr_lut[(uint8_t)ascii_code]);
 598              		.loc 1 839 0
 599 000a 0E4B     		ldr	r3, .L65+8
 600 000c C55C     		ldrb	r5, [r0, r3]	@ zero_extendqisi2
 601              	.LVL53:
 840:quantum/quantum.c **** 
 841:quantum/quantum.c ****     if (is_shifted) {
 602              		.loc 1 841 0
 603 000e 14B1     		cbz	r4, .L52
 842:quantum/quantum.c ****         register_code(KC_LSFT);
 604              		.loc 1 842 0
 605 0010 E120     		movs	r0, #225
 606              	.LVL54:
 607 0012 FFF7FEFF 		bl	register_code
 608              	.LVL55:
 609              	.L52:
 843:quantum/quantum.c ****     }
 844:quantum/quantum.c ****     if (is_altgred) {
 610              		.loc 1 844 0
 611 0016 15B1     		cbz	r5, .L53
 845:quantum/quantum.c ****         register_code(KC_RALT);
 612              		.loc 1 845 0
 613 0018 E620     		movs	r0, #230
 614 001a FFF7FEFF 		bl	register_code
 615              	.LVL56:
 616              	.L53:
 846:quantum/quantum.c ****     }
 847:quantum/quantum.c ****     tap_code(keycode);
 617              		.loc 1 847 0
 618 001e 3046     		mov	r0, r6
 619 0020 FFF7FEFF 		bl	tap_code
 620              	.LVL57:
 848:quantum/quantum.c ****     if (is_altgred) {
 621              		.loc 1 848 0
 622 0024 15B1     		cbz	r5, .L54
 849:quantum/quantum.c ****         unregister_code(KC_RALT);
 623              		.loc 1 849 0
 624 0026 E620     		movs	r0, #230
 625 0028 FFF7FEFF 		bl	unregister_code
 626              	.LVL58:
 627              	.L54:
 850:quantum/quantum.c ****     }
 851:quantum/quantum.c ****     if (is_shifted) {
 628              		.loc 1 851 0
 629 002c 24B1     		cbz	r4, .L51
 852:quantum/quantum.c ****         unregister_code(KC_LSFT);
 630              		.loc 1 852 0
 631 002e E120     		movs	r0, #225
 853:quantum/quantum.c ****     }
 854:quantum/quantum.c **** }
 632              		.loc 1 854 0
 633 0030 BDE87040 		pop	{r4, r5, r6, lr}
 634              		.cfi_remember_state
 635              		.cfi_restore 14
 636              		.cfi_restore 6
 637              		.cfi_restore 5
 638              		.cfi_restore 4
 639              		.cfi_def_cfa_offset 0
 640              	.LVL59:
 852:quantum/quantum.c ****         unregister_code(KC_LSFT);
 641              		.loc 1 852 0
 642 0034 FFF7FEBF 		b	unregister_code
 643              	.LVL60:
 644              	.L51:
 645              		.cfi_restore_state
 646              		.loc 1 854 0
 647 0038 70BD     		pop	{r4, r5, r6, pc}
 648              	.LVL61:
 649              	.L66:
 650 003a 00BF     		.align	2
 651              	.L65:
 652 003c 00000000 		.word	ascii_to_keycode_lut
 653 0040 00000000 		.word	ascii_to_shift_lut
 654 0044 00000000 		.word	ascii_to_altgr_lut
 655              		.cfi_endproc
 656              	.LFE27:
 658              		.section	.text.send_string_with_delay,"ax",%progbits
 659              		.align	1
 660              		.global	send_string_with_delay
 661              		.syntax unified
 662              		.thumb
 663              		.thumb_func
 664              		.fpu fpv4-sp-d16
 666              	send_string_with_delay:
 667              	.LFB25:
 778:quantum/quantum.c ****     while (1) {
 668              		.loc 1 778 0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 0
 671              		@ frame_needed = 0, uses_anonymous_args = 0
 672              	.LVL62:
 673 0000 70B5     		push	{r4, r5, r6, lr}
 674              		.cfi_def_cfa_offset 16
 675              		.cfi_offset 4, -16
 676              		.cfi_offset 5, -12
 677              		.cfi_offset 6, -8
 678              		.cfi_offset 14, -4
 679 0002 0446     		mov	r4, r0
 680 0004 0E46     		mov	r6, r1
 681              	.LVL63:
 682              	.L75:
 683              	.LBB4:
 780:quantum/quantum.c ****         if (!ascii_code) break;
 684              		.loc 1 780 0
 685 0006 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 686              	.LVL64:
 781:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 687              		.loc 1 781 0
 688 0008 18B3     		cbz	r0, .L67
 782:quantum/quantum.c ****             // tap
 689              		.loc 1 782 0
 690 000a 0128     		cmp	r0, #1
 691 000c 04F10105 		add	r5, r4, #1
 692 0010 07D1     		bne	.L69
 693              	.LVL65:
 694              	.LBB5:
 784:quantum/quantum.c ****             register_code(keycode);
 695              		.loc 1 784 0
 696 0012 6478     		ldrb	r4, [r4, #1]	@ zero_extendqisi2
 697              	.LVL66:
 785:quantum/quantum.c ****             unregister_code(keycode);
 698              		.loc 1 785 0
 699 0014 2046     		mov	r0, r4
 700              	.LVL67:
 701 0016 FFF7FEFF 		bl	register_code
 702              	.LVL68:
 786:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 703              		.loc 1 786 0
 704 001a 2046     		mov	r0, r4
 705              	.LVL69:
 706              	.L76:
 707              	.LBE5:
 708              	.LBB6:
 794:quantum/quantum.c ****         } else {
 709              		.loc 1 794 0
 710 001c FFF7FEFF 		bl	unregister_code
 711              	.LVL70:
 712              	.LBE6:
 713 0020 04E0     		b	.L70
 714              	.LVL71:
 715              	.L69:
 787:quantum/quantum.c ****             // down
 716              		.loc 1 787 0
 717 0022 0228     		cmp	r0, #2
 718 0024 0DD1     		bne	.L71
 719              	.LVL72:
 720              	.LBB7:
 790:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 721              		.loc 1 790 0
 722 0026 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 723              	.LVL73:
 724 0028 FFF7FEFF 		bl	register_code
 725              	.LVL74:
 726              	.L70:
 727              	.LBE7:
 798:quantum/quantum.c ****         // interval
 728              		.loc 1 798 0
 729 002c 6C1C     		adds	r4, r5, #1
 730              	.LVL75:
 731              	.LBB8:
 801:quantum/quantum.c ****             while (ms--) wait_ms(1);
 732              		.loc 1 801 0
 733 002e 3546     		mov	r5, r6
 734              	.L73:
 735              	.LVL76:
 802:quantum/quantum.c ****         }
 736              		.loc 1 802 0 discriminator 1
 737 0030 013D     		subs	r5, r5, #1
 738              	.LVL77:
 739 0032 EDB2     		uxtb	r5, r5
 740              	.LVL78:
 741 0034 FF2D     		cmp	r5, #255
 742 0036 E6D0     		beq	.L75
 802:quantum/quantum.c ****         }
 743              		.loc 1 802 0 is_stmt 0 discriminator 2
 744 0038 0120     		movs	r0, #1
 745 003a 0021     		movs	r1, #0
 746 003c FFF7FEFF 		bl	CLK_delay_ms
 747              	.LVL79:
 748 0040 F6E7     		b	.L73
 749              	.LVL80:
 750              	.L71:
 751              	.LBE8:
 791:quantum/quantum.c ****             // up
 752              		.loc 1 791 0 is_stmt 1
 753 0042 0328     		cmp	r0, #3
 754 0044 01D1     		bne	.L72
 755              	.LVL81:
 756              	.LBB9:
 794:quantum/quantum.c ****         } else {
 757              		.loc 1 794 0
 758 0046 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 759              	.LVL82:
 760 0048 E8E7     		b	.L76
 761              	.LVL83:
 762              	.L72:
 763              	.LBE9:
 796:quantum/quantum.c ****         }
 764              		.loc 1 796 0
 765 004a FFF7FEFF 		bl	send_char
 766              	.LVL84:
 767 004e 2546     		mov	r5, r4
 768 0050 ECE7     		b	.L70
 769              	.LVL85:
 770              	.L67:
 771              	.LBE4:
 805:quantum/quantum.c **** 
 772              		.loc 1 805 0
 773 0052 70BD     		pop	{r4, r5, r6, pc}
 774              		.cfi_endproc
 775              	.LFE25:
 777              		.section	.text.send_string,"ax",%progbits
 778              		.align	1
 779              		.global	send_string
 780              		.syntax unified
 781              		.thumb
 782              		.thumb_func
 783              		.fpu fpv4-sp-d16
 785              	send_string:
 786              	.LFB23:
 774:quantum/quantum.c **** 
 787              		.loc 1 774 0
 788              		.cfi_startproc
 789              		@ args = 0, pretend = 0, frame = 0
 790              		@ frame_needed = 0, uses_anonymous_args = 0
 791              		@ link register save eliminated.
 792              	.LVL86:
 774:quantum/quantum.c **** 
 793              		.loc 1 774 0
 794 0000 0021     		movs	r1, #0
 795 0002 FFF7FEBF 		b	send_string_with_delay
 796              	.LVL87:
 797              		.cfi_endproc
 798              	.LFE23:
 800              		.section	.text.send_string_P,"ax",%progbits
 801              		.align	1
 802              		.global	send_string_P
 803              		.syntax unified
 804              		.thumb
 805              		.thumb_func
 806              		.fpu fpv4-sp-d16
 808              	send_string_P:
 809              	.LFB56:
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 0
 812              		@ frame_needed = 0, uses_anonymous_args = 0
 813              		@ link register save eliminated.
 814 0000 FFF7FEBF 		b	send_string
 815              		.cfi_endproc
 816              	.LFE56:
 818              		.section	.text.send_string_with_delay_P,"ax",%progbits
 819              		.align	1
 820              		.global	send_string_with_delay_P
 821              		.syntax unified
 822              		.thumb
 823              		.thumb_func
 824              		.fpu fpv4-sp-d16
 826              	send_string_with_delay_P:
 827              	.LFB58:
 828              		.cfi_startproc
 829              		@ args = 0, pretend = 0, frame = 0
 830              		@ frame_needed = 0, uses_anonymous_args = 0
 831              		@ link register save eliminated.
 832 0000 FFF7FEBF 		b	send_string_with_delay
 833              		.cfi_endproc
 834              	.LFE58:
 836              		.section	.text.set_single_persistent_default_layer,"ax",%progbits
 837              		.align	1
 838              		.global	set_single_persistent_default_layer
 839              		.syntax unified
 840              		.thumb
 841              		.thumb_func
 842              		.fpu fpv4-sp-d16
 844              	set_single_persistent_default_layer:
 845              	.LFB28:
 855:quantum/quantum.c **** 
 856:quantum/quantum.c **** void set_single_persistent_default_layer(uint8_t default_layer) {
 846              		.loc 1 856 0
 847              		.cfi_startproc
 848              		@ args = 0, pretend = 0, frame = 0
 849              		@ frame_needed = 0, uses_anonymous_args = 0
 850              	.LVL88:
 851              		.loc 1 856 0
 852 0000 10B5     		push	{r4, lr}
 853              		.cfi_def_cfa_offset 8
 854              		.cfi_offset 4, -8
 855              		.cfi_offset 14, -4
 857:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && defined(DEFAULT_LAYER_SONGS)
 858:quantum/quantum.c ****     PLAY_SONG(default_layer_songs[default_layer]);
 859:quantum/quantum.c **** #endif
 860:quantum/quantum.c ****     eeconfig_update_default_layer(1U << default_layer);
 856              		.loc 1 860 0
 857 0002 0124     		movs	r4, #1
 858 0004 8440     		lsls	r4, r4, r0
 859 0006 E0B2     		uxtb	r0, r4
 860              	.LVL89:
 861 0008 FFF7FEFF 		bl	eeconfig_update_default_layer
 862              	.LVL90:
 861:quantum/quantum.c ****     default_layer_set(1U << default_layer);
 863              		.loc 1 861 0
 864 000c 2046     		mov	r0, r4
 862:quantum/quantum.c **** }
 865              		.loc 1 862 0
 866 000e BDE81040 		pop	{r4, lr}
 867              		.cfi_restore 14
 868              		.cfi_restore 4
 869              		.cfi_def_cfa_offset 0
 861:quantum/quantum.c ****     default_layer_set(1U << default_layer);
 870              		.loc 1 861 0
 871 0012 FFF7FEBF 		b	default_layer_set
 872              	.LVL91:
 873              		.cfi_endproc
 874              	.LFE28:
 876              		.section	.text.update_tri_layer_state,"ax",%progbits
 877              		.align	1
 878              		.global	update_tri_layer_state
 879              		.syntax unified
 880              		.thumb
 881              		.thumb_func
 882              		.fpu fpv4-sp-d16
 884              	update_tri_layer_state:
 885              	.LFB29:
 863:quantum/quantum.c **** 
 864:quantum/quantum.c **** layer_state_t update_tri_layer_state(layer_state_t state, uint8_t layer1, uint8_t layer2, uint8_t l
 886              		.loc 1 864 0
 887              		.cfi_startproc
 888              		@ args = 0, pretend = 0, frame = 0
 889              		@ frame_needed = 0, uses_anonymous_args = 0
 890              	.LVL92:
 891 0000 10B5     		push	{r4, lr}
 892              		.cfi_def_cfa_offset 8
 893              		.cfi_offset 4, -8
 894              		.cfi_offset 14, -4
 865:quantum/quantum.c ****     layer_state_t mask12 = (1UL << layer1) | (1UL << layer2);
 895              		.loc 1 865 0
 896 0002 0124     		movs	r4, #1
 897 0004 04FA02F2 		lsl	r2, r4, r2
 898              	.LVL93:
 899 0008 04FA01F1 		lsl	r1, r4, r1
 900              	.LVL94:
 901 000c 1143     		orrs	r1, r1, r2
 902              	.LVL95:
 866:quantum/quantum.c ****     layer_state_t mask3  = 1UL << layer3;
 903              		.loc 1 866 0
 904 000e 04FA03F3 		lsl	r3, r4, r3
 905              	.LVL96:
 867:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 906              		.loc 1 867 0
 907 0012 31EA0002 		bics	r2, r1, r0
 908 0016 0CBF     		ite	eq
 909 0018 1843     		orreq	r0, r0, r3
 910              	.LVL97:
 911 001a 9843     		bicne	r0, r0, r3
 868:quantum/quantum.c **** }
 912              		.loc 1 868 0
 913 001c 10BD     		pop	{r4, pc}
 914              		.cfi_endproc
 915              	.LFE29:
 917              		.section	.text.update_tri_layer,"ax",%progbits
 918              		.align	1
 919              		.global	update_tri_layer
 920              		.syntax unified
 921              		.thumb
 922              		.thumb_func
 923              		.fpu fpv4-sp-d16
 925              	update_tri_layer:
 926              	.LFB30:
 869:quantum/quantum.c **** 
 870:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) { layer_state_set(update_tri_
 927              		.loc 1 870 0
 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 0
 930              		@ frame_needed = 0, uses_anonymous_args = 0
 931              	.LVL98:
 932 0000 08B5     		push	{r3, lr}
 933              		.cfi_def_cfa_offset 8
 934              		.cfi_offset 3, -8
 935              		.cfi_offset 14, -4
 936              		.loc 1 870 0
 937 0002 1346     		mov	r3, r2
 938 0004 0A46     		mov	r2, r1
 939              	.LVL99:
 940 0006 0146     		mov	r1, r0
 941              	.LVL100:
 942 0008 0348     		ldr	r0, .L85
 943              	.LVL101:
 944 000a 0068     		ldr	r0, [r0]
 945 000c FFF7FEFF 		bl	update_tri_layer_state
 946              	.LVL102:
 947 0010 BDE80840 		pop	{r3, lr}
 948              		.cfi_restore 14
 949              		.cfi_restore 3
 950              		.cfi_def_cfa_offset 0
 951 0014 FFF7FEBF 		b	layer_state_set
 952              	.LVL103:
 953              	.L86:
 954              		.align	2
 955              	.L85:
 956 0018 00000000 		.word	layer_state
 957              		.cfi_endproc
 958              	.LFE30:
 960              		.section	.text.tap_random_base64,"ax",%progbits
 961              		.align	1
 962              		.global	tap_random_base64
 963              		.syntax unified
 964              		.thumb
 965              		.thumb_func
 966              		.fpu fpv4-sp-d16
 968              	tap_random_base64:
 969              	.LFB31:
 871:quantum/quantum.c **** 
 872:quantum/quantum.c **** void tap_random_base64(void) {
 970              		.loc 1 872 0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 0
 973              		@ frame_needed = 0, uses_anonymous_args = 0
 974 0000 10B5     		push	{r4, lr}
 975              		.cfi_def_cfa_offset 8
 976              		.cfi_offset 4, -8
 977              		.cfi_offset 14, -4
 873:quantum/quantum.c **** #if defined(__AVR_ATmega32U4__)
 874:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 875:quantum/quantum.c **** #else
 876:quantum/quantum.c ****     uint8_t key = rand() % 64;
 978              		.loc 1 876 0
 979 0002 FFF7FEFF 		bl	rand
 980              	.LVL104:
 981 0006 4342     		rsbs	r3, r0, #0
 982 0008 03F03F03 		and	r3, r3, #63
 983 000c 00F03F04 		and	r4, r0, #63
 984 0010 58BF     		it	pl
 985 0012 5C42     		rsbpl	r4, r3, #0
 986 0014 E4B2     		uxtb	r4, r4
 987              	.LVL105:
 877:quantum/quantum.c **** #endif
 878:quantum/quantum.c ****     switch (key) {
 988              		.loc 1 878 0
 989 0016 342C     		cmp	r4, #52
 990 0018 1CD0     		beq	.L89
 991 001a 0EDC     		bgt	.L90
 992 001c 192C     		cmp	r4, #25
 993 001e 12DC     		bgt	.L96
 879:quantum/quantum.c ****         case 0 ... 25:
 880:quantum/quantum.c ****             register_code(KC_LSFT);
 881:quantum/quantum.c ****             register_code(key + KC_A);
 994              		.loc 1 881 0
 995 0020 0434     		adds	r4, r4, #4
 996              	.LVL106:
 880:quantum/quantum.c ****             register_code(key + KC_A);
 997              		.loc 1 880 0
 998 0022 E120     		movs	r0, #225
 999              		.loc 1 881 0
 1000 0024 E4B2     		uxtb	r4, r4
 1001              	.LVL107:
 880:quantum/quantum.c ****             register_code(key + KC_A);
 1002              		.loc 1 880 0
 1003 0026 FFF7FEFF 		bl	register_code
 1004              	.LVL108:
 1005              		.loc 1 881 0
 1006 002a 2046     		mov	r0, r4
 1007 002c FFF7FEFF 		bl	register_code
 1008              	.LVL109:
 882:quantum/quantum.c ****             unregister_code(key + KC_A);
 1009              		.loc 1 882 0
 1010 0030 2046     		mov	r0, r4
 1011              	.L99:
 883:quantum/quantum.c ****             unregister_code(KC_LSFT);
 884:quantum/quantum.c ****             break;
 885:quantum/quantum.c ****         case 26 ... 51:
 886:quantum/quantum.c ****             register_code(key - 26 + KC_A);
 887:quantum/quantum.c ****             unregister_code(key - 26 + KC_A);
 888:quantum/quantum.c ****             break;
 889:quantum/quantum.c ****         case 52:
 890:quantum/quantum.c ****             register_code(KC_0);
 891:quantum/quantum.c ****             unregister_code(KC_0);
 892:quantum/quantum.c ****             break;
 893:quantum/quantum.c ****         case 53 ... 61:
 894:quantum/quantum.c ****             register_code(key - 53 + KC_1);
 895:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 896:quantum/quantum.c ****             break;
 897:quantum/quantum.c ****         case 62:
 898:quantum/quantum.c ****             register_code(KC_LSFT);
 899:quantum/quantum.c ****             register_code(KC_EQL);
 900:quantum/quantum.c ****             unregister_code(KC_EQL);
 1012              		.loc 1 900 0
 1013 0032 FFF7FEFF 		bl	unregister_code
 1014              	.LVL110:
 901:quantum/quantum.c ****             unregister_code(KC_LSFT);
 1015              		.loc 1 901 0
 1016 0036 E120     		movs	r0, #225
 1017 0038 10E0     		b	.L98
 1018              	.LVL111:
 1019              	.L90:
 878:quantum/quantum.c ****         case 0 ... 25:
 1020              		.loc 1 878 0
 1021 003a 3E2C     		cmp	r4, #62
 1022 003c 14D0     		beq	.L93
 1023 003e 11DB     		blt	.L94
 1024 0040 3F2C     		cmp	r4, #63
 1025 0042 19D0     		beq	.L95
 902:quantum/quantum.c ****             break;
 903:quantum/quantum.c ****         case 63:
 904:quantum/quantum.c ****             register_code(KC_SLSH);
 905:quantum/quantum.c ****             unregister_code(KC_SLSH);
 906:quantum/quantum.c ****             break;
 907:quantum/quantum.c ****     }
 908:quantum/quantum.c **** }
 1026              		.loc 1 908 0
 1027 0044 10BD     		pop	{r4, pc}
 1028              	.LVL112:
 1029              	.L96:
 886:quantum/quantum.c ****             unregister_code(key - 26 + KC_A);
 1030              		.loc 1 886 0
 1031 0046 163C     		subs	r4, r4, #22
 1032              	.LVL113:
 1033              	.L100:
 894:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 1034              		.loc 1 894 0
 1035 0048 E4B2     		uxtb	r4, r4
 1036 004a 2046     		mov	r0, r4
 1037              	.LVL114:
 1038 004c FFF7FEFF 		bl	register_code
 1039              	.LVL115:
 895:quantum/quantum.c ****             break;
 1040              		.loc 1 895 0
 1041 0050 2046     		mov	r0, r4
 1042 0052 03E0     		b	.L98
 1043              	.LVL116:
 1044              	.L89:
 890:quantum/quantum.c ****             unregister_code(KC_0);
 1045              		.loc 1 890 0
 1046 0054 2720     		movs	r0, #39
 1047 0056 FFF7FEFF 		bl	register_code
 1048              	.LVL117:
 891:quantum/quantum.c ****             break;
 1049              		.loc 1 891 0
 1050 005a 2720     		movs	r0, #39
 1051              	.LVL118:
 1052              	.L98:
 1053              		.loc 1 908 0
 1054 005c BDE81040 		pop	{r4, lr}
 1055              		.cfi_remember_state
 1056              		.cfi_restore 14
 1057              		.cfi_restore 4
 1058              		.cfi_def_cfa_offset 0
 905:quantum/quantum.c ****             break;
 1059              		.loc 1 905 0
 1060 0060 FFF7FEBF 		b	unregister_code
 1061              	.LVL119:
 1062              	.L94:
 1063              		.cfi_restore_state
 894:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 1064              		.loc 1 894 0
 1065 0064 173C     		subs	r4, r4, #23
 1066              	.LVL120:
 1067 0066 EFE7     		b	.L100
 1068              	.LVL121:
 1069              	.L93:
 898:quantum/quantum.c ****             register_code(KC_EQL);
 1070              		.loc 1 898 0
 1071 0068 E120     		movs	r0, #225
 1072 006a FFF7FEFF 		bl	register_code
 1073              	.LVL122:
 899:quantum/quantum.c ****             unregister_code(KC_EQL);
 1074              		.loc 1 899 0
 1075 006e 2E20     		movs	r0, #46
 1076 0070 FFF7FEFF 		bl	register_code
 1077              	.LVL123:
 900:quantum/quantum.c ****             unregister_code(KC_LSFT);
 1078              		.loc 1 900 0
 1079 0074 2E20     		movs	r0, #46
 1080 0076 DCE7     		b	.L99
 1081              	.L95:
 904:quantum/quantum.c ****             unregister_code(KC_SLSH);
 1082              		.loc 1 904 0
 1083 0078 3820     		movs	r0, #56
 1084 007a FFF7FEFF 		bl	register_code
 1085              	.LVL124:
 905:quantum/quantum.c ****             break;
 1086              		.loc 1 905 0
 1087 007e 3820     		movs	r0, #56
 1088 0080 ECE7     		b	.L98
 1089              		.cfi_endproc
 1090              	.LFE31:
 1092              		.section	.text.bootmagic_lite,"ax",%progbits
 1093              		.align	1
 1094              		.weak	bootmagic_lite
 1095              		.syntax unified
 1096              		.thumb
 1097              		.thumb_func
 1098              		.fpu fpv4-sp-d16
 1100              	bootmagic_lite:
 1101              	.LFB32:
 909:quantum/quantum.c **** 
 910:quantum/quantum.c **** __attribute__((weak)) void bootmagic_lite(void) {
 1102              		.loc 1 910 0
 1103              		.cfi_startproc
 1104              		@ args = 0, pretend = 0, frame = 0
 1105              		@ frame_needed = 0, uses_anonymous_args = 0
 1106 0000 08B5     		push	{r3, lr}
 1107              		.cfi_def_cfa_offset 8
 1108              		.cfi_offset 3, -8
 1109              		.cfi_offset 14, -4
 911:quantum/quantum.c ****     // The lite version of TMK's bootmagic based on Wilba.
 912:quantum/quantum.c ****     // 100% less potential for accidentally making the
 913:quantum/quantum.c ****     // keyboard do stupid things.
 914:quantum/quantum.c **** 
 915:quantum/quantum.c ****     // We need multiple scans because debouncing can't be turned off.
 916:quantum/quantum.c ****     matrix_scan();
 1110              		.loc 1 916 0
 1111 0002 FFF7FEFF 		bl	matrix_scan
 1112              	.LVL125:
 917:quantum/quantum.c **** #if defined(DEBOUNCING_DELAY) && DEBOUNCING_DELAY > 0
 918:quantum/quantum.c ****     wait_ms(DEBOUNCING_DELAY * 2);
 919:quantum/quantum.c **** #elif defined(DEBOUNCE) && DEBOUNCE > 0
 920:quantum/quantum.c ****     wait_ms(DEBOUNCE * 2);
 1113              		.loc 1 920 0
 1114 0006 0021     		movs	r1, #0
 1115 0008 0A20     		movs	r0, #10
 1116 000a FFF7FEFF 		bl	CLK_delay_ms
 1117              	.LVL126:
 921:quantum/quantum.c **** #else
 922:quantum/quantum.c ****     wait_ms(30);
 923:quantum/quantum.c **** #endif
 924:quantum/quantum.c ****     matrix_scan();
 1118              		.loc 1 924 0
 1119 000e FFF7FEFF 		bl	matrix_scan
 1120              	.LVL127:
 925:quantum/quantum.c **** 
 926:quantum/quantum.c ****     // If the Esc and space bar are held down on power up,
 927:quantum/quantum.c ****     // reset the EEPROM valid state and jump to bootloader.
 928:quantum/quantum.c ****     // Assumes Esc is at [0,0].
 929:quantum/quantum.c ****     // This isn't very generalized, but we need something that doesn't
 930:quantum/quantum.c ****     // rely on user's keymaps in firmware or EEPROM.
 931:quantum/quantum.c ****     if (matrix_get_row(BOOTMAGIC_LITE_ROW) & (1 << BOOTMAGIC_LITE_COLUMN)) {
 1121              		.loc 1 931 0
 1122 0012 0020     		movs	r0, #0
 1123 0014 FFF7FEFF 		bl	matrix_get_row
 1124              	.LVL128:
 1125 0018 C307     		lsls	r3, r0, #31
 1126 001a 05D5     		bpl	.L101
 932:quantum/quantum.c ****         eeconfig_disable();
 1127              		.loc 1 932 0
 1128 001c FFF7FEFF 		bl	eeconfig_disable
 1129              	.LVL129:
 933:quantum/quantum.c ****         // Jump to bootloader.
 934:quantum/quantum.c ****         bootloader_jump();
 935:quantum/quantum.c ****     }
 936:quantum/quantum.c **** }
 1130              		.loc 1 936 0
 1131 0020 BDE80840 		pop	{r3, lr}
 1132              		.cfi_remember_state
 1133              		.cfi_restore 14
 1134              		.cfi_restore 3
 1135              		.cfi_def_cfa_offset 0
 934:quantum/quantum.c ****     }
 1136              		.loc 1 934 0
 1137 0024 FFF7FEBF 		b	bootloader_jump
 1138              	.LVL130:
 1139              	.L101:
 1140              		.cfi_restore_state
 1141              		.loc 1 936 0
 1142 0028 08BD     		pop	{r3, pc}
 1143              		.cfi_endproc
 1144              	.LFE32:
 1146              		.section	.text.matrix_init_quantum,"ax",%progbits
 1147              		.align	1
 1148              		.global	matrix_init_quantum
 1149              		.syntax unified
 1150              		.thumb
 1151              		.thumb_func
 1152              		.fpu fpv4-sp-d16
 1154              	matrix_init_quantum:
 1155              	.LFB33:
 937:quantum/quantum.c **** 
 938:quantum/quantum.c **** void matrix_init_quantum() {
 1156              		.loc 1 938 0
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 0
 1159              		@ frame_needed = 0, uses_anonymous_args = 0
 1160 0000 08B5     		push	{r3, lr}
 1161              		.cfi_def_cfa_offset 8
 1162              		.cfi_offset 3, -8
 1163              		.cfi_offset 14, -4
 939:quantum/quantum.c **** #ifdef BOOTMAGIC_LITE
 940:quantum/quantum.c ****     bootmagic_lite();
 941:quantum/quantum.c **** #endif
 942:quantum/quantum.c ****     if (!eeconfig_is_enabled()) {
 1164              		.loc 1 942 0
 1165 0002 FFF7FEFF 		bl	eeconfig_is_enabled
 1166              	.LVL131:
 1167 0006 08B9     		cbnz	r0, .L104
 943:quantum/quantum.c ****         eeconfig_init();
 1168              		.loc 1 943 0
 1169 0008 FFF7FEFF 		bl	eeconfig_init
 1170              	.LVL132:
 1171              	.L104:
 944:quantum/quantum.c ****     }
 945:quantum/quantum.c **** #ifdef BACKLIGHT_ENABLE
 946:quantum/quantum.c **** #    ifdef LED_MATRIX_ENABLE
 947:quantum/quantum.c ****     led_matrix_init();
 948:quantum/quantum.c **** #    else
 949:quantum/quantum.c ****     backlight_init_ports();
 950:quantum/quantum.c **** #    endif
 951:quantum/quantum.c **** #endif
 952:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 953:quantum/quantum.c ****     audio_init();
 954:quantum/quantum.c **** #endif
 955:quantum/quantum.c **** #ifdef RGB_MATRIX_ENABLE
 956:quantum/quantum.c ****     rgb_matrix_init();
 1172              		.loc 1 956 0
 1173 000c FFF7FEFF 		bl	rgb_matrix_init
 1174              	.LVL133:
 957:quantum/quantum.c **** #endif
 958:quantum/quantum.c **** #ifdef ENCODER_ENABLE
 959:quantum/quantum.c ****     encoder_init();
 960:quantum/quantum.c **** #endif
 961:quantum/quantum.c **** #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 962:quantum/quantum.c ****     unicode_input_mode_init();
 963:quantum/quantum.c **** #endif
 964:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 965:quantum/quantum.c ****     haptic_init();
 966:quantum/quantum.c **** #endif
 967:quantum/quantum.c **** #ifdef OUTPUT_AUTO_ENABLE
 968:quantum/quantum.c ****     set_output(OUTPUT_AUTO);
 969:quantum/quantum.c **** #endif
 970:quantum/quantum.c **** #ifdef DIP_SWITCH_ENABLE
 971:quantum/quantum.c ****     dip_switch_init();
 972:quantum/quantum.c **** #endif
 973:quantum/quantum.c **** 
 974:quantum/quantum.c ****     matrix_init_kb();
 975:quantum/quantum.c **** }
 1175              		.loc 1 975 0
 1176 0010 BDE80840 		pop	{r3, lr}
 1177              		.cfi_restore 14
 1178              		.cfi_restore 3
 1179              		.cfi_def_cfa_offset 0
 974:quantum/quantum.c **** }
 1180              		.loc 1 974 0
 1181 0014 FFF7FEBF 		b	matrix_init_kb
 1182              	.LVL134:
 1183              		.cfi_endproc
 1184              	.LFE33:
 1186              		.section	.text.matrix_scan_quantum,"ax",%progbits
 1187              		.align	1
 1188              		.global	matrix_scan_quantum
 1189              		.syntax unified
 1190              		.thumb
 1191              		.thumb_func
 1192              		.fpu fpv4-sp-d16
 1194              	matrix_scan_quantum:
 1195              	.LFB34:
 976:quantum/quantum.c **** 
 977:quantum/quantum.c **** void matrix_scan_quantum() {
 1196              		.loc 1 977 0
 1197              		.cfi_startproc
 1198              		@ args = 0, pretend = 0, frame = 0
 1199              		@ frame_needed = 0, uses_anonymous_args = 0
 1200 0000 08B5     		push	{r3, lr}
 1201              		.cfi_def_cfa_offset 8
 1202              		.cfi_offset 3, -8
 1203              		.cfi_offset 14, -4
 978:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && !defined(NO_MUSIC_MODE)
 979:quantum/quantum.c ****     matrix_scan_music();
 980:quantum/quantum.c **** #endif
 981:quantum/quantum.c **** 
 982:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 983:quantum/quantum.c ****     matrix_scan_tap_dance();
 984:quantum/quantum.c **** #endif
 985:quantum/quantum.c **** 
 986:quantum/quantum.c **** #ifdef COMBO_ENABLE
 987:quantum/quantum.c ****     matrix_scan_combo();
 988:quantum/quantum.c **** #endif
 989:quantum/quantum.c **** 
 990:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE)
 991:quantum/quantum.c **** #    if defined(LED_MATRIX_ENABLE)
 992:quantum/quantum.c ****     led_matrix_task();
 993:quantum/quantum.c **** #    elif defined(BACKLIGHT_PIN)
 994:quantum/quantum.c ****     backlight_task();
 995:quantum/quantum.c **** #    endif
 996:quantum/quantum.c **** #endif
 997:quantum/quantum.c **** 
 998:quantum/quantum.c **** #ifdef RGB_MATRIX_ENABLE
 999:quantum/quantum.c ****     rgb_matrix_task();
 1204              		.loc 1 999 0
 1205 0002 FFF7FEFF 		bl	rgb_matrix_task
 1206              	.LVL135:
1000:quantum/quantum.c **** #endif
1001:quantum/quantum.c **** 
1002:quantum/quantum.c **** #ifdef ENCODER_ENABLE
1003:quantum/quantum.c ****     encoder_read();
1004:quantum/quantum.c **** #endif
1005:quantum/quantum.c **** 
1006:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
1007:quantum/quantum.c ****     haptic_task();
1008:quantum/quantum.c **** #endif
1009:quantum/quantum.c **** 
1010:quantum/quantum.c **** #ifdef DIP_SWITCH_ENABLE
1011:quantum/quantum.c ****     dip_switch_read(false);
1012:quantum/quantum.c **** #endif
1013:quantum/quantum.c **** 
1014:quantum/quantum.c ****     matrix_scan_kb();
1015:quantum/quantum.c **** }
 1207              		.loc 1 1015 0
 1208 0006 BDE80840 		pop	{r3, lr}
 1209              		.cfi_restore 14
 1210              		.cfi_restore 3
 1211              		.cfi_def_cfa_offset 0
1014:quantum/quantum.c **** }
 1212              		.loc 1 1014 0
 1213 000a FFF7FEBF 		b	matrix_scan_kb
 1214              	.LVL136:
 1215              		.cfi_endproc
 1216              	.LFE34:
 1218              		.section	.text.backlight_init_ports,"ax",%progbits
 1219              		.align	1
 1220              		.weak	backlight_init_ports
 1221              		.syntax unified
 1222              		.thumb
 1223              		.thumb_func
 1224              		.fpu fpv4-sp-d16
 1226              	backlight_init_ports:
 1227              	.LFB54:
 1228              		.cfi_startproc
 1229              		@ args = 0, pretend = 0, frame = 0
 1230              		@ frame_needed = 0, uses_anonymous_args = 0
 1231              		@ link register save eliminated.
 1232 0000 7047     		bx	lr
 1233              		.cfi_endproc
 1234              	.LFE54:
 1236              		.section	.text.send_nibble,"ax",%progbits
 1237              		.align	1
 1238              		.global	send_nibble
 1239              		.syntax unified
 1240              		.thumb
 1241              		.thumb_func
 1242              		.fpu fpv4-sp-d16
 1244              	send_nibble:
 1245              	.LFB40:
1016:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && (defined(BACKLIGHT_PIN) || defined(BACKLIGHT_PINS))
1017:quantum/quantum.c **** 
1018:quantum/quantum.c **** // This logic is a bit complex, we support 3 setups:
1019:quantum/quantum.c **** //
1020:quantum/quantum.c **** //   1. Hardware PWM when backlight is wired to a PWM pin.
1021:quantum/quantum.c **** //      Depending on this pin, we use a different output compare unit.
1022:quantum/quantum.c **** //   2. Software PWM with hardware timers, but the used timer
1023:quantum/quantum.c **** //      depends on the Audio setup (Audio wins over Backlight).
1024:quantum/quantum.c **** //   3. Full software PWM, driven by the matrix scan, if both timers are used by Audio.
1025:quantum/quantum.c **** 
1026:quantum/quantum.c **** #    if (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_AT90USB1286__)
1027:quantum/quantum.c **** #        define HARDWARE_PWM
1028:quantum/quantum.c **** #        define ICRx ICR1
1029:quantum/quantum.c **** #        define TCCRxA TCCR1A
1030:quantum/quantum.c **** #        define TCCRxB TCCR1B
1031:quantum/quantum.c **** #        define TIMERx_OVF_vect TIMER1_OVF_vect
1032:quantum/quantum.c **** #        define TIMSKx TIMSK1
1033:quantum/quantum.c **** #        define TOIEx TOIE1
1034:quantum/quantum.c **** 
1035:quantum/quantum.c **** #        if BACKLIGHT_PIN == B5
1036:quantum/quantum.c **** #            define COMxx1 COM1A1
1037:quantum/quantum.c **** #            define OCRxx OCR1A
1038:quantum/quantum.c **** #        elif BACKLIGHT_PIN == B6
1039:quantum/quantum.c **** #            define COMxx1 COM1B1
1040:quantum/quantum.c **** #            define OCRxx OCR1B
1041:quantum/quantum.c **** #        elif BACKLIGHT_PIN == B7
1042:quantum/quantum.c **** #            define COMxx1 COM1C1
1043:quantum/quantum.c **** #            define OCRxx OCR1C
1044:quantum/quantum.c **** #        endif
1045:quantum/quantum.c **** #    elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_AT90USB1286_
1046:quantum/quantum.c **** #        define HARDWARE_PWM
1047:quantum/quantum.c **** #        define ICRx ICR3
1048:quantum/quantum.c **** #        define TCCRxA TCCR3A
1049:quantum/quantum.c **** #        define TCCRxB TCCR3B
1050:quantum/quantum.c **** #        define TIMERx_OVF_vect TIMER3_OVF_vect
1051:quantum/quantum.c **** #        define TIMSKx TIMSK3
1052:quantum/quantum.c **** #        define TOIEx TOIE3
1053:quantum/quantum.c **** 
1054:quantum/quantum.c **** #        if BACKLIGHT_PIN == C4
1055:quantum/quantum.c **** #            if (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
1056:quantum/quantum.c **** #                error This MCU has no C4 pin!
1057:quantum/quantum.c **** #            else
1058:quantum/quantum.c **** #                define COMxx1 COM3C1
1059:quantum/quantum.c **** #                define OCRxx OCR3C
1060:quantum/quantum.c **** #            endif
1061:quantum/quantum.c **** #        elif BACKLIGHT_PIN == C5
1062:quantum/quantum.c **** #            if (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
1063:quantum/quantum.c **** #                error This MCU has no C5 pin!
1064:quantum/quantum.c **** #            else
1065:quantum/quantum.c **** #                define COMxx1 COM3B1
1066:quantum/quantum.c **** #                define OCRxx OCR3B
1067:quantum/quantum.c **** #            endif
1068:quantum/quantum.c **** #        elif BACKLIGHT_PIN == C6
1069:quantum/quantum.c **** #            define COMxx1 COM3A1
1070:quantum/quantum.c **** #            define OCRxx OCR3A
1071:quantum/quantum.c **** #        endif
1072:quantum/quantum.c **** #    elif (defined(__AVR_ATmega16U2__) || defined(__AVR_ATmega32U2__)) && (BACKLIGHT_PIN == B7 || B
1073:quantum/quantum.c **** #        define HARDWARE_PWM
1074:quantum/quantum.c **** #        define ICRx ICR1
1075:quantum/quantum.c **** #        define TCCRxA TCCR1A
1076:quantum/quantum.c **** #        define TCCRxB TCCR1B
1077:quantum/quantum.c **** #        define TIMERx_OVF_vect TIMER1_OVF_vect
1078:quantum/quantum.c **** #        define TIMSKx TIMSK1
1079:quantum/quantum.c **** #        define TOIEx TOIE1
1080:quantum/quantum.c **** 
1081:quantum/quantum.c **** #        if BACKLIGHT_PIN == B7
1082:quantum/quantum.c **** #            define COMxx1 COM1C1
1083:quantum/quantum.c **** #            define OCRxx OCR1C
1084:quantum/quantum.c **** #        elif BACKLIGHT_PIN == C5
1085:quantum/quantum.c **** #            define COMxx1 COM1B1
1086:quantum/quantum.c **** #            define OCRxx OCR1B
1087:quantum/quantum.c **** #        elif BACKLIGHT_PIN == C6
1088:quantum/quantum.c **** #            define COMxx1 COM1A1
1089:quantum/quantum.c **** #            define OCRxx OCR1A
1090:quantum/quantum.c **** #        endif
1091:quantum/quantum.c **** #    elif defined(__AVR_ATmega32A__) && (BACKLIGHT_PIN == D4 || BACKLIGHT_PIN == D5)
1092:quantum/quantum.c **** #        define HARDWARE_PWM
1093:quantum/quantum.c **** #        define ICRx ICR1
1094:quantum/quantum.c **** #        define TCCRxA TCCR1A
1095:quantum/quantum.c **** #        define TCCRxB TCCR1B
1096:quantum/quantum.c **** #        define TIMERx_OVF_vect TIMER1_OVF_vect
1097:quantum/quantum.c **** #        define TIMSKx TIMSK
1098:quantum/quantum.c **** #        define TOIEx TOIE1
1099:quantum/quantum.c **** 
1100:quantum/quantum.c **** #        if BACKLIGHT_PIN == D4
1101:quantum/quantum.c **** #            define COMxx1 COM1B1
1102:quantum/quantum.c **** #            define OCRxx OCR1B
1103:quantum/quantum.c **** #        elif BACKLIGHT_PIN == D5
1104:quantum/quantum.c **** #            define COMxx1 COM1A1
1105:quantum/quantum.c **** #            define OCRxx OCR1A
1106:quantum/quantum.c **** #        endif
1107:quantum/quantum.c **** #    elif defined(__AVR_ATmega328P__) && (BACKLIGHT_PIN == B1 || BACKLIGHT_PIN == B2)
1108:quantum/quantum.c **** #        define HARDWARE_PWM
1109:quantum/quantum.c **** #        define ICRx ICR1
1110:quantum/quantum.c **** #        define TCCRxA TCCR1A
1111:quantum/quantum.c **** #        define TCCRxB TCCR1B
1112:quantum/quantum.c **** #        define TIMERx_OVF_vect TIMER1_OVF_vect
1113:quantum/quantum.c **** #        define TIMSKx TIMSK1
1114:quantum/quantum.c **** #        define TOIEx TOIE1
1115:quantum/quantum.c **** 
1116:quantum/quantum.c **** #        if BACKLIGHT_PIN == B1
1117:quantum/quantum.c **** #            define COMxx1 COM1A1
1118:quantum/quantum.c **** #            define OCRxx OCR1A
1119:quantum/quantum.c **** #        elif BACKLIGHT_PIN == B2
1120:quantum/quantum.c **** #            define COMxx1 COM1B1
1121:quantum/quantum.c **** #            define OCRxx OCR1B
1122:quantum/quantum.c **** #        endif
1123:quantum/quantum.c **** #    else
1124:quantum/quantum.c **** #        if !defined(BACKLIGHT_CUSTOM_DRIVER)
1125:quantum/quantum.c **** #            if !defined(B5_AUDIO) && !defined(B6_AUDIO) && !defined(B7_AUDIO)
1126:quantum/quantum.c **** // Timer 1 is not in use by Audio feature, Backlight can use it
1127:quantum/quantum.c **** #                pragma message "Using hardware timer 1 with software PWM"
1128:quantum/quantum.c **** #                define HARDWARE_PWM
1129:quantum/quantum.c **** #                define BACKLIGHT_PWM_TIMER
1130:quantum/quantum.c **** #                define ICRx ICR1
1131:quantum/quantum.c **** #                define TCCRxA TCCR1A
1132:quantum/quantum.c **** #                define TCCRxB TCCR1B
1133:quantum/quantum.c **** #                define TIMERx_COMPA_vect TIMER1_COMPA_vect
1134:quantum/quantum.c **** #                define TIMERx_OVF_vect TIMER1_OVF_vect
1135:quantum/quantum.c **** #                if defined(__AVR_ATmega32A__)  // This MCU has only one TIMSK register
1136:quantum/quantum.c **** #                    define TIMSKx TIMSK
1137:quantum/quantum.c **** #                else
1138:quantum/quantum.c **** #                    define TIMSKx TIMSK1
1139:quantum/quantum.c **** #                endif
1140:quantum/quantum.c **** #                define TOIEx TOIE1
1141:quantum/quantum.c **** 
1142:quantum/quantum.c **** #                define OCIExA OCIE1A
1143:quantum/quantum.c **** #                define OCRxx OCR1A
1144:quantum/quantum.c **** #            elif !defined(C6_AUDIO) && !defined(C5_AUDIO) && !defined(C4_AUDIO)
1145:quantum/quantum.c **** #                pragma message "Using hardware timer 3 with software PWM"
1146:quantum/quantum.c **** // Timer 3 is not in use by Audio feature, Backlight can use it
1147:quantum/quantum.c **** #                define HARDWARE_PWM
1148:quantum/quantum.c **** #                define BACKLIGHT_PWM_TIMER
1149:quantum/quantum.c **** #                define ICRx ICR1
1150:quantum/quantum.c **** #                define TCCRxA TCCR3A
1151:quantum/quantum.c **** #                define TCCRxB TCCR3B
1152:quantum/quantum.c **** #                define TIMERx_COMPA_vect TIMER3_COMPA_vect
1153:quantum/quantum.c **** #                define TIMERx_OVF_vect TIMER3_OVF_vect
1154:quantum/quantum.c **** #                define TIMSKx TIMSK3
1155:quantum/quantum.c **** #                define TOIEx TOIE3
1156:quantum/quantum.c **** 
1157:quantum/quantum.c **** #                define OCIExA OCIE3A
1158:quantum/quantum.c **** #                define OCRxx OCR3A
1159:quantum/quantum.c **** #            else
1160:quantum/quantum.c **** #                pragma message "Audio in use - using pure software PWM"
1161:quantum/quantum.c **** #                define NO_HARDWARE_PWM
1162:quantum/quantum.c **** #            endif
1163:quantum/quantum.c **** #        else
1164:quantum/quantum.c **** #            pragma message "Custom driver defined - using pure software PWM"
1165:quantum/quantum.c **** #            define NO_HARDWARE_PWM
1166:quantum/quantum.c **** #        endif
1167:quantum/quantum.c **** #    endif
1168:quantum/quantum.c **** 
1169:quantum/quantum.c **** #    ifndef BACKLIGHT_ON_STATE
1170:quantum/quantum.c **** #        define BACKLIGHT_ON_STATE 0
1171:quantum/quantum.c **** #    endif
1172:quantum/quantum.c **** 
1173:quantum/quantum.c **** void backlight_on(uint8_t backlight_pin) {
1174:quantum/quantum.c **** #    if BACKLIGHT_ON_STATE == 0
1175:quantum/quantum.c ****     writePinLow(backlight_pin);
1176:quantum/quantum.c **** #    else
1177:quantum/quantum.c ****     writePinHigh(backlight_pin);
1178:quantum/quantum.c **** #    endif
1179:quantum/quantum.c **** }
1180:quantum/quantum.c **** 
1181:quantum/quantum.c **** void backlight_off(uint8_t backlight_pin) {
1182:quantum/quantum.c **** #    if BACKLIGHT_ON_STATE == 0
1183:quantum/quantum.c ****     writePinHigh(backlight_pin);
1184:quantum/quantum.c **** #    else
1185:quantum/quantum.c ****     writePinLow(backlight_pin);
1186:quantum/quantum.c **** #    endif
1187:quantum/quantum.c **** }
1188:quantum/quantum.c **** 
1189:quantum/quantum.c **** #    if defined(NO_HARDWARE_PWM) || defined(BACKLIGHT_PWM_TIMER)  // pwm through software
1190:quantum/quantum.c **** 
1191:quantum/quantum.c **** // we support multiple backlight pins
1192:quantum/quantum.c **** #        ifndef BACKLIGHT_LED_COUNT
1193:quantum/quantum.c **** #            define BACKLIGHT_LED_COUNT 1
1194:quantum/quantum.c **** #        endif
1195:quantum/quantum.c **** 
1196:quantum/quantum.c **** #        if BACKLIGHT_LED_COUNT == 1
1197:quantum/quantum.c **** #            define BACKLIGHT_PIN_INIT \
1198:quantum/quantum.c ****                 { BACKLIGHT_PIN }
1199:quantum/quantum.c **** #        else
1200:quantum/quantum.c **** #            define BACKLIGHT_PIN_INIT BACKLIGHT_PINS
1201:quantum/quantum.c **** #        endif
1202:quantum/quantum.c **** 
1203:quantum/quantum.c **** #        define FOR_EACH_LED(x)                                 \
1204:quantum/quantum.c ****             for (uint8_t i = 0; i < BACKLIGHT_LED_COUNT; i++) { \
1205:quantum/quantum.c ****                 uint8_t backlight_pin = backlight_pins[i];      \
1206:quantum/quantum.c ****                 { x }                                           \
1207:quantum/quantum.c ****             }
1208:quantum/quantum.c **** 
1209:quantum/quantum.c **** static const uint8_t backlight_pins[BACKLIGHT_LED_COUNT] = BACKLIGHT_PIN_INIT;
1210:quantum/quantum.c **** 
1211:quantum/quantum.c **** #    else  // full hardware PWM
1212:quantum/quantum.c **** 
1213:quantum/quantum.c **** // we support only one backlight pin
1214:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
1215:quantum/quantum.c **** #        define FOR_EACH_LED(x) x
1216:quantum/quantum.c **** 
1217:quantum/quantum.c **** #    endif
1218:quantum/quantum.c **** 
1219:quantum/quantum.c **** #    ifdef NO_HARDWARE_PWM
1220:quantum/quantum.c **** __attribute__((weak)) void backlight_init_ports(void) {
1221:quantum/quantum.c ****     // Setup backlight pin as output and output to on state.
1222:quantum/quantum.c ****     FOR_EACH_LED(setPinOutput(backlight_pin); backlight_on(backlight_pin);)
1223:quantum/quantum.c **** 
1224:quantum/quantum.c **** #        ifdef BACKLIGHT_BREATHING
1225:quantum/quantum.c ****     if (is_backlight_breathing()) {
1226:quantum/quantum.c ****         breathing_enable();
1227:quantum/quantum.c ****     }
1228:quantum/quantum.c **** #        endif
1229:quantum/quantum.c **** }
1230:quantum/quantum.c **** 
1231:quantum/quantum.c **** __attribute__((weak)) void backlight_set(uint8_t level) {}
1232:quantum/quantum.c **** 
1233:quantum/quantum.c **** uint8_t backlight_tick = 0;
1234:quantum/quantum.c **** 
1235:quantum/quantum.c **** #        ifndef BACKLIGHT_CUSTOM_DRIVER
1236:quantum/quantum.c **** void backlight_task(void) {
1237:quantum/quantum.c ****     if ((0xFFFF >> ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2))) & (
1238:quantum/quantum.c ****         FOR_EACH_LED(backlight_on(backlight_pin);)
1239:quantum/quantum.c ****     } else {
1240:quantum/quantum.c ****         FOR_EACH_LED(backlight_off(backlight_pin);)
1241:quantum/quantum.c ****     }
1242:quantum/quantum.c ****     backlight_tick = (backlight_tick + 1) % 16;
1243:quantum/quantum.c **** }
1244:quantum/quantum.c **** #        endif
1245:quantum/quantum.c **** 
1246:quantum/quantum.c **** #        ifdef BACKLIGHT_BREATHING
1247:quantum/quantum.c **** #            ifndef BACKLIGHT_CUSTOM_DRIVER
1248:quantum/quantum.c **** #                error "Backlight breathing only available with hardware PWM. Please disable."
1249:quantum/quantum.c **** #            endif
1250:quantum/quantum.c **** #        endif
1251:quantum/quantum.c **** 
1252:quantum/quantum.c **** #    else  // hardware pwm through timer
1253:quantum/quantum.c **** 
1254:quantum/quantum.c **** #        ifdef BACKLIGHT_PWM_TIMER
1255:quantum/quantum.c **** 
1256:quantum/quantum.c **** // The idea of software PWM assisted by hardware timers is the following
1257:quantum/quantum.c **** // we use the hardware timer in fast PWM mode like for hardware PWM, but
1258:quantum/quantum.c **** // instead of letting the Output Match Comparator control the led pin
1259:quantum/quantum.c **** // (which is not possible since the backlight is not wired to PWM pins on the
1260:quantum/quantum.c **** // CPU), we do the LED on/off by oursleves.
1261:quantum/quantum.c **** // The timer is setup to count up to 0xFFFF, and we set the Output Compare
1262:quantum/quantum.c **** // register to the current 16bits backlight level (after CIE correction).
1263:quantum/quantum.c **** // This means the CPU will trigger a compare match interrupt when the counter
1264:quantum/quantum.c **** // reaches the backlight level, where we turn off the LEDs,
1265:quantum/quantum.c **** // but also an overflow interrupt when the counter rolls back to 0,
1266:quantum/quantum.c **** // in which we're going to turn on the LEDs.
1267:quantum/quantum.c **** // The LED will then be on for OCRxx/0xFFFF time, adjusted every 244Hz.
1268:quantum/quantum.c **** 
1269:quantum/quantum.c **** // Triggered when the counter reaches the OCRx value
1270:quantum/quantum.c **** ISR(TIMERx_COMPA_vect) { FOR_EACH_LED(backlight_off(backlight_pin);) }
1271:quantum/quantum.c **** 
1272:quantum/quantum.c **** // Triggered when the counter reaches the TOP value
1273:quantum/quantum.c **** // this one triggers at F_CPU/65536 =~ 244 Hz
1274:quantum/quantum.c **** ISR(TIMERx_OVF_vect) {
1275:quantum/quantum.c **** #            ifdef BACKLIGHT_BREATHING
1276:quantum/quantum.c ****     if (is_breathing()) {
1277:quantum/quantum.c ****         breathing_task();
1278:quantum/quantum.c ****     }
1279:quantum/quantum.c **** #            endif
1280:quantum/quantum.c ****     // for very small values of OCRxx (or backlight level)
1281:quantum/quantum.c ****     // we can't guarantee this whole code won't execute
1282:quantum/quantum.c ****     // at the same time as the compare match interrupt
1283:quantum/quantum.c ****     // which means that we might turn on the leds while
1284:quantum/quantum.c ****     // trying to turn them off, leading to flickering
1285:quantum/quantum.c ****     // artifacts (especially while breathing, because breathing_task
1286:quantum/quantum.c ****     // takes many computation cycles).
1287:quantum/quantum.c ****     // so better not turn them on while the counter TOP is very low.
1288:quantum/quantum.c ****     if (OCRxx > 256) {
1289:quantum/quantum.c ****         FOR_EACH_LED(backlight_on(backlight_pin);)
1290:quantum/quantum.c ****     }
1291:quantum/quantum.c **** }
1292:quantum/quantum.c **** 
1293:quantum/quantum.c **** #        endif
1294:quantum/quantum.c **** 
1295:quantum/quantum.c **** #        define TIMER_TOP 0xFFFFU
1296:quantum/quantum.c **** 
1297:quantum/quantum.c **** // See http://jared.geek.nz/2013/feb/linear-led-pwm
1298:quantum/quantum.c **** static uint16_t cie_lightness(uint16_t v) {
1299:quantum/quantum.c ****     if (v <= 5243)     // if below 8% of max
1300:quantum/quantum.c ****         return v / 9;  // same as dividing by 900%
1301:quantum/quantum.c ****     else {
1302:quantum/quantum.c ****         uint32_t y = (((uint32_t)v + 10486) << 8) / (10486 + 0xFFFFUL);  // add 16% of max and comp
1303:quantum/quantum.c ****         // to get a useful result with integer division, we shift left in the expression above
1304:quantum/quantum.c ****         // and revert what we've done again after squaring.
1305:quantum/quantum.c ****         y = y * y * y >> 8;
1306:quantum/quantum.c ****         if (y > 0xFFFFUL)  // prevent overflow
1307:quantum/quantum.c ****             return 0xFFFFU;
1308:quantum/quantum.c ****         else
1309:quantum/quantum.c ****             return (uint16_t)y;
1310:quantum/quantum.c ****     }
1311:quantum/quantum.c **** }
1312:quantum/quantum.c **** 
1313:quantum/quantum.c **** // range for val is [0..TIMER_TOP]. PWM pin is high while the timer count is below val.
1314:quantum/quantum.c **** static inline void set_pwm(uint16_t val) { OCRxx = val; }
1315:quantum/quantum.c **** 
1316:quantum/quantum.c **** #        ifndef BACKLIGHT_CUSTOM_DRIVER
1317:quantum/quantum.c **** __attribute__((weak)) void backlight_set(uint8_t level) {
1318:quantum/quantum.c ****     if (level > BACKLIGHT_LEVELS) level = BACKLIGHT_LEVELS;
1319:quantum/quantum.c **** 
1320:quantum/quantum.c ****     if (level == 0) {
1321:quantum/quantum.c **** #            ifdef BACKLIGHT_PWM_TIMER
1322:quantum/quantum.c ****         if (OCRxx) {
1323:quantum/quantum.c ****             TIMSKx &= ~(_BV(OCIExA));
1324:quantum/quantum.c ****             TIMSKx &= ~(_BV(TOIEx));
1325:quantum/quantum.c ****             FOR_EACH_LED(backlight_off(backlight_pin);)
1326:quantum/quantum.c ****         }
1327:quantum/quantum.c **** #            else
1328:quantum/quantum.c ****         // Turn off PWM control on backlight pin
1329:quantum/quantum.c ****         TCCRxA &= ~(_BV(COMxx1));
1330:quantum/quantum.c **** #            endif
1331:quantum/quantum.c ****     } else {
1332:quantum/quantum.c **** #            ifdef BACKLIGHT_PWM_TIMER
1333:quantum/quantum.c ****         if (!OCRxx) {
1334:quantum/quantum.c ****             TIMSKx |= _BV(OCIExA);
1335:quantum/quantum.c ****             TIMSKx |= _BV(TOIEx);
1336:quantum/quantum.c ****         }
1337:quantum/quantum.c **** #            else
1338:quantum/quantum.c ****         // Turn on PWM control of backlight pin
1339:quantum/quantum.c ****         TCCRxA |= _BV(COMxx1);
1340:quantum/quantum.c **** #            endif
1341:quantum/quantum.c ****     }
1342:quantum/quantum.c ****     // Set the brightness
1343:quantum/quantum.c ****     set_pwm(cie_lightness(TIMER_TOP * (uint32_t)level / BACKLIGHT_LEVELS));
1344:quantum/quantum.c **** }
1345:quantum/quantum.c **** 
1346:quantum/quantum.c **** void backlight_task(void) {}
1347:quantum/quantum.c **** #        endif  // BACKLIGHT_CUSTOM_DRIVER
1348:quantum/quantum.c **** 
1349:quantum/quantum.c **** #        ifdef BACKLIGHT_BREATHING
1350:quantum/quantum.c **** 
1351:quantum/quantum.c **** #            define BREATHING_NO_HALT 0
1352:quantum/quantum.c **** #            define BREATHING_HALT_OFF 1
1353:quantum/quantum.c **** #            define BREATHING_HALT_ON 2
1354:quantum/quantum.c **** #            define BREATHING_STEPS 128
1355:quantum/quantum.c **** 
1356:quantum/quantum.c **** static uint8_t breathing_period = BREATHING_PERIOD;
1357:quantum/quantum.c **** static uint8_t breathing_halt = BREATHING_NO_HALT;
1358:quantum/quantum.c **** static uint16_t breathing_counter = 0;
1359:quantum/quantum.c **** 
1360:quantum/quantum.c **** #            ifdef BACKLIGHT_PWM_TIMER
1361:quantum/quantum.c **** static bool breathing = false;
1362:quantum/quantum.c **** 
1363:quantum/quantum.c **** bool is_breathing(void) { return breathing; }
1364:quantum/quantum.c **** 
1365:quantum/quantum.c **** #                define breathing_interrupt_enable() \
1366:quantum/quantum.c ****                     do {                             \
1367:quantum/quantum.c ****                         breathing = true;            \
1368:quantum/quantum.c ****                     } while (0)
1369:quantum/quantum.c **** #                define breathing_interrupt_disable() \
1370:quantum/quantum.c ****                     do {                              \
1371:quantum/quantum.c ****                         breathing = false;            \
1372:quantum/quantum.c ****                     } while (0)
1373:quantum/quantum.c **** #            else
1374:quantum/quantum.c **** 
1375:quantum/quantum.c **** bool is_breathing(void) { return !!(TIMSKx & _BV(TOIEx)); }
1376:quantum/quantum.c **** 
1377:quantum/quantum.c **** #                define breathing_interrupt_enable() \
1378:quantum/quantum.c ****                     do {                             \
1379:quantum/quantum.c ****                         TIMSKx |= _BV(TOIEx);        \
1380:quantum/quantum.c ****                     } while (0)
1381:quantum/quantum.c **** #                define breathing_interrupt_disable() \
1382:quantum/quantum.c ****                     do {                              \
1383:quantum/quantum.c ****                         TIMSKx &= ~_BV(TOIEx);        \
1384:quantum/quantum.c ****                     } while (0)
1385:quantum/quantum.c **** #            endif
1386:quantum/quantum.c **** 
1387:quantum/quantum.c **** #            define breathing_min()        \
1388:quantum/quantum.c ****                 do {                       \
1389:quantum/quantum.c ****                     breathing_counter = 0; \
1390:quantum/quantum.c ****                 } while (0)
1391:quantum/quantum.c **** #            define breathing_max()                                 \
1392:quantum/quantum.c ****                 do {                                                \
1393:quantum/quantum.c ****                     breathing_counter = breathing_period * 244 / 2; \
1394:quantum/quantum.c ****                 } while (0)
1395:quantum/quantum.c **** 
1396:quantum/quantum.c **** void breathing_enable(void) {
1397:quantum/quantum.c ****     breathing_counter = 0;
1398:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
1399:quantum/quantum.c ****     breathing_interrupt_enable();
1400:quantum/quantum.c **** }
1401:quantum/quantum.c **** 
1402:quantum/quantum.c **** void breathing_pulse(void) {
1403:quantum/quantum.c ****     if (get_backlight_level() == 0)
1404:quantum/quantum.c ****         breathing_min();
1405:quantum/quantum.c ****     else
1406:quantum/quantum.c ****         breathing_max();
1407:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1408:quantum/quantum.c ****     breathing_interrupt_enable();
1409:quantum/quantum.c **** }
1410:quantum/quantum.c **** 
1411:quantum/quantum.c **** void breathing_disable(void) {
1412:quantum/quantum.c ****     breathing_interrupt_disable();
1413:quantum/quantum.c ****     // Restore backlight level
1414:quantum/quantum.c ****     backlight_set(get_backlight_level());
1415:quantum/quantum.c **** }
1416:quantum/quantum.c **** 
1417:quantum/quantum.c **** void breathing_self_disable(void) {
1418:quantum/quantum.c ****     if (get_backlight_level() == 0)
1419:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_OFF;
1420:quantum/quantum.c ****     else
1421:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_ON;
1422:quantum/quantum.c **** }
1423:quantum/quantum.c **** 
1424:quantum/quantum.c **** void breathing_toggle(void) {
1425:quantum/quantum.c ****     if (is_breathing())
1426:quantum/quantum.c ****         breathing_disable();
1427:quantum/quantum.c ****     else
1428:quantum/quantum.c ****         breathing_enable();
1429:quantum/quantum.c **** }
1430:quantum/quantum.c **** 
1431:quantum/quantum.c **** void breathing_period_set(uint8_t value) {
1432:quantum/quantum.c ****     if (!value) value = 1;
1433:quantum/quantum.c ****     breathing_period = value;
1434:quantum/quantum.c **** }
1435:quantum/quantum.c **** 
1436:quantum/quantum.c **** void breathing_period_default(void) { breathing_period_set(BREATHING_PERIOD); }
1437:quantum/quantum.c **** 
1438:quantum/quantum.c **** void breathing_period_inc(void) { breathing_period_set(breathing_period + 1); }
1439:quantum/quantum.c **** 
1440:quantum/quantum.c **** void breathing_period_dec(void) { breathing_period_set(breathing_period - 1); }
1441:quantum/quantum.c **** 
1442:quantum/quantum.c **** /* To generate breathing curve in python:
1443:quantum/quantum.c ****  * from math import sin, pi; [int(sin(x/128.0*pi)**4*255) for x in range(128)]
1444:quantum/quantum.c ****  */
1445:quantum/quantum.c **** static const uint8_t breathing_table[BREATHING_STEPS] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
1446:quantum/quantum.c **** 
1447:quantum/quantum.c **** // Use this before the cie_lightness function.
1448:quantum/quantum.c **** static inline uint16_t scale_backlight(uint16_t v) { return v / BACKLIGHT_LEVELS * get_backlight_le
1449:quantum/quantum.c **** 
1450:quantum/quantum.c **** #            ifdef BACKLIGHT_PWM_TIMER
1451:quantum/quantum.c **** void breathing_task(void)
1452:quantum/quantum.c **** #            else
1453:quantum/quantum.c **** /* Assuming a 16MHz CPU clock and a timer that resets at 64k (ICR1), the following interrupt handle
1454:quantum/quantum.c ****  * about 244 times per second.
1455:quantum/quantum.c ****  */
1456:quantum/quantum.c **** ISR(TIMERx_OVF_vect)
1457:quantum/quantum.c **** #            endif
1458:quantum/quantum.c **** {
1459:quantum/quantum.c ****     uint16_t interval = (uint16_t)breathing_period * 244 / BREATHING_STEPS;
1460:quantum/quantum.c ****     // resetting after one period to prevent ugly reset at overflow.
1461:quantum/quantum.c ****     breathing_counter = (breathing_counter + 1) % (breathing_period * 244);
1462:quantum/quantum.c ****     uint8_t index = breathing_counter / interval % BREATHING_STEPS;
1463:quantum/quantum.c **** 
1464:quantum/quantum.c ****     if (((breathing_halt == BREATHING_HALT_ON) && (index == BREATHING_STEPS / 2)) || ((breathing_ha
1465:quantum/quantum.c ****         breathing_interrupt_disable();
1466:quantum/quantum.c ****     }
1467:quantum/quantum.c **** 
1468:quantum/quantum.c ****     set_pwm(cie_lightness(scale_backlight((uint16_t)pgm_read_byte(&breathing_table[index]) * 0x0101
1469:quantum/quantum.c **** }
1470:quantum/quantum.c **** 
1471:quantum/quantum.c **** #        endif  // BACKLIGHT_BREATHING
1472:quantum/quantum.c **** 
1473:quantum/quantum.c **** __attribute__((weak)) void backlight_init_ports(void) {
1474:quantum/quantum.c ****     // Setup backlight pin as output and output to on state.
1475:quantum/quantum.c ****     FOR_EACH_LED(setPinOutput(backlight_pin); backlight_on(backlight_pin);)
1476:quantum/quantum.c **** 
1477:quantum/quantum.c ****     // I could write a wall of text here to explain... but TL;DW
1478:quantum/quantum.c ****     // Go read the ATmega32u4 datasheet.
1479:quantum/quantum.c ****     // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolut
1480:quantum/quantum.c **** 
1481:quantum/quantum.c **** #        ifdef BACKLIGHT_PWM_TIMER
1482:quantum/quantum.c ****     // TimerX setup, Fast PWM mode count to TOP set in ICRx
1483:quantum/quantum.c ****     TCCRxA = _BV(WGM11);  // = 0b00000010;
1484:quantum/quantum.c ****     // clock select clk/1
1485:quantum/quantum.c ****     TCCRxB = _BV(WGM13) | _BV(WGM12) | _BV(CS10);  // = 0b00011001;
1486:quantum/quantum.c **** #        else  // hardware PWM
1487:quantum/quantum.c ****     // Pin PB7 = OCR1C (Timer 1, Channel C)
1488:quantum/quantum.c ****     // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
1489:quantum/quantum.c ****     // (i.e. start high, go low when counter matches.)
1490:quantum/quantum.c ****     // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
1491:quantum/quantum.c ****     // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
1492:quantum/quantum.c **** 
1493:quantum/quantum.c ****     /*
1494:quantum/quantum.c ****     14.8.3:
1495:quantum/quantum.c ****     "In fast PWM mode, the compare units allow generation of PWM waveforms on the OCnx pins. Settin
1496:quantum/quantum.c ****     "In fast PWM mode the counter is incremented until the counter value matches either one of the 
1497:quantum/quantum.c ****     */
1498:quantum/quantum.c ****     TCCRxA = _BV(COMxx1) | _BV(WGM11);             // = 0b00001010;
1499:quantum/quantum.c ****     TCCRxB = _BV(WGM13) | _BV(WGM12) | _BV(CS10);  // = 0b00011001;
1500:quantum/quantum.c **** #        endif
1501:quantum/quantum.c ****     // Use full 16-bit resolution. Counter counts to ICR1 before reset to 0.
1502:quantum/quantum.c ****     ICRx = TIMER_TOP;
1503:quantum/quantum.c **** 
1504:quantum/quantum.c ****     backlight_init();
1505:quantum/quantum.c **** #        ifdef BACKLIGHT_BREATHING
1506:quantum/quantum.c ****     if (is_backlight_breathing()) {
1507:quantum/quantum.c ****         breathing_enable();
1508:quantum/quantum.c ****     }
1509:quantum/quantum.c **** #        endif
1510:quantum/quantum.c **** }
1511:quantum/quantum.c **** 
1512:quantum/quantum.c **** #    endif  // hardware backlight
1513:quantum/quantum.c **** 
1514:quantum/quantum.c **** #else  // no backlight
1515:quantum/quantum.c **** 
1516:quantum/quantum.c **** __attribute__((weak)) void backlight_init_ports(void) {}
1517:quantum/quantum.c **** 
1518:quantum/quantum.c **** __attribute__((weak)) void backlight_set(uint8_t level) {}
1519:quantum/quantum.c **** 
1520:quantum/quantum.c **** #endif  // backlight
1521:quantum/quantum.c **** 
1522:quantum/quantum.c **** #ifdef HD44780_ENABLED
1523:quantum/quantum.c **** #    include "hd44780.h"
1524:quantum/quantum.c **** #endif
1525:quantum/quantum.c **** 
1526:quantum/quantum.c **** // Functions for spitting out values
1527:quantum/quantum.c **** //
1528:quantum/quantum.c **** 
1529:quantum/quantum.c **** void send_dword(uint32_t number) {  // this might not actually work
1530:quantum/quantum.c ****     uint16_t word = (number >> 16);
1531:quantum/quantum.c ****     send_word(word);
1532:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
1533:quantum/quantum.c **** }
1534:quantum/quantum.c **** 
1535:quantum/quantum.c **** void send_word(uint16_t number) {
1536:quantum/quantum.c ****     uint8_t byte = number >> 8;
1537:quantum/quantum.c ****     send_byte(byte);
1538:quantum/quantum.c ****     send_byte(number & 0xFF);
1539:quantum/quantum.c **** }
1540:quantum/quantum.c **** 
1541:quantum/quantum.c **** void send_byte(uint8_t number) {
1542:quantum/quantum.c ****     uint8_t nibble = number >> 4;
1543:quantum/quantum.c ****     send_nibble(nibble);
1544:quantum/quantum.c ****     send_nibble(number & 0xF);
1545:quantum/quantum.c **** }
1546:quantum/quantum.c **** 
1547:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1246              		.loc 1 1547 0
 1247              		.cfi_startproc
 1248              		@ args = 0, pretend = 0, frame = 0
 1249              		@ frame_needed = 0, uses_anonymous_args = 0
 1250              	.LVL137:
 1251              		.loc 1 1547 0
 1252 0000 10B5     		push	{r4, lr}
 1253              		.cfi_def_cfa_offset 8
 1254              		.cfi_offset 4, -8
 1255              		.cfi_offset 14, -4
1548:quantum/quantum.c ****     switch (number) {
 1256              		.loc 1 1548 0
 1257 0002 0F28     		cmp	r0, #15
 1258 0004 1AD8     		bhi	.L107
 1259 0006 DFE800F0 		tbb	[pc, r0]
 1260              	.L110:
 1261 000a 08       		.byte	(.L109-.L110)/2
 1262 000b 10       		.byte	(.L111-.L110)/2
 1263 000c 10       		.byte	(.L111-.L110)/2
 1264 000d 10       		.byte	(.L111-.L110)/2
 1265 000e 10       		.byte	(.L111-.L110)/2
 1266 000f 10       		.byte	(.L111-.L110)/2
 1267 0010 10       		.byte	(.L111-.L110)/2
 1268 0011 10       		.byte	(.L111-.L110)/2
 1269 0012 10       		.byte	(.L111-.L110)/2
 1270 0013 10       		.byte	(.L111-.L110)/2
 1271 0014 17       		.byte	(.L112-.L110)/2
 1272 0015 17       		.byte	(.L112-.L110)/2
 1273 0016 17       		.byte	(.L112-.L110)/2
 1274 0017 17       		.byte	(.L112-.L110)/2
 1275 0018 17       		.byte	(.L112-.L110)/2
 1276 0019 17       		.byte	(.L112-.L110)/2
 1277              		.p2align 1
 1278              	.L109:
1549:quantum/quantum.c ****         case 0:
1550:quantum/quantum.c ****             register_code(KC_0);
 1279              		.loc 1 1550 0
 1280 001a 2720     		movs	r0, #39
 1281              	.LVL138:
 1282 001c FFF7FEFF 		bl	register_code
 1283              	.LVL139:
1551:quantum/quantum.c ****             unregister_code(KC_0);
 1284              		.loc 1 1551 0
 1285 0020 2720     		movs	r0, #39
 1286              	.L113:
1552:quantum/quantum.c ****             break;
1553:quantum/quantum.c ****         case 1 ... 9:
1554:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
1555:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
1556:quantum/quantum.c ****             break;
1557:quantum/quantum.c ****         case 0xA ... 0xF:
1558:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
1559:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
1560:quantum/quantum.c ****             break;
1561:quantum/quantum.c ****     }
1562:quantum/quantum.c **** }
 1287              		.loc 1 1562 0
 1288 0022 BDE81040 		pop	{r4, lr}
 1289              		.cfi_remember_state
 1290              		.cfi_restore 14
 1291              		.cfi_restore 4
 1292              		.cfi_def_cfa_offset 0
1559:quantum/quantum.c ****             break;
 1293              		.loc 1 1559 0
 1294 0026 FFF7FEBF 		b	unregister_code
 1295              	.LVL140:
 1296              	.L111:
 1297              		.cfi_restore_state
1554:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
 1298              		.loc 1 1554 0
 1299 002a 1D30     		adds	r0, r0, #29
 1300              	.LVL141:
 1301              	.L114:
1558:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1302              		.loc 1 1558 0
 1303 002c C4B2     		uxtb	r4, r0
 1304 002e 2046     		mov	r0, r4
 1305 0030 FFF7FEFF 		bl	register_code
 1306              	.LVL142:
1559:quantum/quantum.c ****             break;
 1307              		.loc 1 1559 0
 1308 0034 2046     		mov	r0, r4
 1309 0036 F4E7     		b	.L113
 1310              	.LVL143:
 1311              	.L112:
1558:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1312              		.loc 1 1558 0
 1313 0038 0638     		subs	r0, r0, #6
 1314              	.LVL144:
 1315 003a F7E7     		b	.L114
 1316              	.LVL145:
 1317              	.L107:
 1318              		.loc 1 1562 0
 1319 003c 10BD     		pop	{r4, pc}
 1320              		.cfi_endproc
 1321              	.LFE40:
 1323              		.section	.text.send_byte,"ax",%progbits
 1324              		.align	1
 1325              		.global	send_byte
 1326              		.syntax unified
 1327              		.thumb
 1328              		.thumb_func
 1329              		.fpu fpv4-sp-d16
 1331              	send_byte:
 1332              	.LFB39:
1541:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1333              		.loc 1 1541 0
 1334              		.cfi_startproc
 1335              		@ args = 0, pretend = 0, frame = 0
 1336              		@ frame_needed = 0, uses_anonymous_args = 0
 1337              	.LVL146:
 1338 0000 10B5     		push	{r4, lr}
 1339              		.cfi_def_cfa_offset 8
 1340              		.cfi_offset 4, -8
 1341              		.cfi_offset 14, -4
1541:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1342              		.loc 1 1541 0
 1343 0002 0446     		mov	r4, r0
1543:quantum/quantum.c ****     send_nibble(number & 0xF);
 1344              		.loc 1 1543 0
 1345 0004 0009     		lsrs	r0, r0, #4
 1346              	.LVL147:
 1347 0006 FFF7FEFF 		bl	send_nibble
 1348              	.LVL148:
1544:quantum/quantum.c **** }
 1349              		.loc 1 1544 0
 1350 000a 04F00F00 		and	r0, r4, #15
1545:quantum/quantum.c **** 
 1351              		.loc 1 1545 0
 1352 000e BDE81040 		pop	{r4, lr}
 1353              		.cfi_restore 14
 1354              		.cfi_restore 4
 1355              		.cfi_def_cfa_offset 0
1544:quantum/quantum.c **** }
 1356              		.loc 1 1544 0
 1357 0012 FFF7FEBF 		b	send_nibble
 1358              	.LVL149:
 1359              		.cfi_endproc
 1360              	.LFE39:
 1362              		.section	.text.send_word,"ax",%progbits
 1363              		.align	1
 1364              		.global	send_word
 1365              		.syntax unified
 1366              		.thumb
 1367              		.thumb_func
 1368              		.fpu fpv4-sp-d16
 1370              	send_word:
 1371              	.LFB38:
1535:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1372              		.loc 1 1535 0
 1373              		.cfi_startproc
 1374              		@ args = 0, pretend = 0, frame = 0
 1375              		@ frame_needed = 0, uses_anonymous_args = 0
 1376              	.LVL150:
 1377 0000 10B5     		push	{r4, lr}
 1378              		.cfi_def_cfa_offset 8
 1379              		.cfi_offset 4, -8
 1380              		.cfi_offset 14, -4
1535:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1381              		.loc 1 1535 0
 1382 0002 0446     		mov	r4, r0
1537:quantum/quantum.c ****     send_byte(number & 0xFF);
 1383              		.loc 1 1537 0
 1384 0004 000A     		lsrs	r0, r0, #8
 1385              	.LVL151:
 1386 0006 FFF7FEFF 		bl	send_byte
 1387              	.LVL152:
1538:quantum/quantum.c **** }
 1388              		.loc 1 1538 0
 1389 000a E0B2     		uxtb	r0, r4
1539:quantum/quantum.c **** 
 1390              		.loc 1 1539 0
 1391 000c BDE81040 		pop	{r4, lr}
 1392              		.cfi_restore 14
 1393              		.cfi_restore 4
 1394              		.cfi_def_cfa_offset 0
1538:quantum/quantum.c **** }
 1395              		.loc 1 1538 0
 1396 0010 FFF7FEBF 		b	send_byte
 1397              	.LVL153:
 1398              		.cfi_endproc
 1399              	.LFE38:
 1401              		.section	.text.send_dword,"ax",%progbits
 1402              		.align	1
 1403              		.global	send_dword
 1404              		.syntax unified
 1405              		.thumb
 1406              		.thumb_func
 1407              		.fpu fpv4-sp-d16
 1409              	send_dword:
 1410              	.LFB37:
1529:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1411              		.loc 1 1529 0
 1412              		.cfi_startproc
 1413              		@ args = 0, pretend = 0, frame = 0
 1414              		@ frame_needed = 0, uses_anonymous_args = 0
 1415              	.LVL154:
 1416 0000 10B5     		push	{r4, lr}
 1417              		.cfi_def_cfa_offset 8
 1418              		.cfi_offset 4, -8
 1419              		.cfi_offset 14, -4
1529:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1420              		.loc 1 1529 0
 1421 0002 0446     		mov	r4, r0
1531:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 1422              		.loc 1 1531 0
 1423 0004 000C     		lsrs	r0, r0, #16
 1424              	.LVL155:
 1425 0006 FFF7FEFF 		bl	send_word
 1426              	.LVL156:
1532:quantum/quantum.c **** }
 1427              		.loc 1 1532 0
 1428 000a A0B2     		uxth	r0, r4
1533:quantum/quantum.c **** 
 1429              		.loc 1 1533 0
 1430 000c BDE81040 		pop	{r4, lr}
 1431              		.cfi_restore 14
 1432              		.cfi_restore 4
 1433              		.cfi_def_cfa_offset 0
 1434              	.LVL157:
1532:quantum/quantum.c **** }
 1435              		.loc 1 1532 0
 1436 0010 FFF7FEBF 		b	send_word
 1437              	.LVL158:
 1438              		.cfi_endproc
 1439              	.LFE37:
 1441              		.section	.text.hex_to_keycode,"ax",%progbits
 1442              		.align	1
 1443              		.weak	hex_to_keycode
 1444              		.syntax unified
 1445              		.thumb
 1446              		.thumb_func
 1447              		.fpu fpv4-sp-d16
 1449              	hex_to_keycode:
 1450              	.LFB41:
1563:quantum/quantum.c **** 
1564:quantum/quantum.c **** __attribute__((weak)) uint16_t hex_to_keycode(uint8_t hex) {
 1451              		.loc 1 1564 0
 1452              		.cfi_startproc
 1453              		@ args = 0, pretend = 0, frame = 0
 1454              		@ frame_needed = 0, uses_anonymous_args = 0
 1455              		@ link register save eliminated.
 1456              	.LVL159:
1565:quantum/quantum.c ****     hex = hex & 0xF;
1566:quantum/quantum.c ****     if (hex == 0x0) {
 1457              		.loc 1 1566 0
 1458 0000 10F00F03 		ands	r3, r0, #15
 1459 0004 06D0     		beq	.L121
 1460 0006 98B2     		uxth	r0, r3
 1461              	.LVL160:
1567:quantum/quantum.c ****         return KC_0;
1568:quantum/quantum.c ****     } else if (hex < 0xA) {
 1462              		.loc 1 1568 0
 1463 0008 092B     		cmp	r3, #9
1569:quantum/quantum.c ****         return KC_1 + (hex - 0x1);
 1464              		.loc 1 1569 0
 1465 000a 92BF     		itee	ls
 1466 000c 1D30     		addls	r0, r0, #29
1570:quantum/quantum.c ****     } else {
1571:quantum/quantum.c ****         return KC_A + (hex - 0xA);
 1467              		.loc 1 1571 0
 1468 000e 0638     		subhi	r0, r0, #6
 1469 0010 80B2     		uxthhi	r0, r0
 1470 0012 7047     		bx	lr
 1471              	.LVL161:
 1472              	.L121:
1567:quantum/quantum.c ****     } else if (hex < 0xA) {
 1473              		.loc 1 1567 0
 1474 0014 2720     		movs	r0, #39
 1475              	.LVL162:
1572:quantum/quantum.c ****     }
1573:quantum/quantum.c **** }
 1476              		.loc 1 1573 0
 1477 0016 7047     		bx	lr
 1478              		.cfi_endproc
 1479              	.LFE41:
 1481              		.section	.text.api_send_unicode,"ax",%progbits
 1482              		.align	1
 1483              		.global	api_send_unicode
 1484              		.syntax unified
 1485              		.thumb
 1486              		.thumb_func
 1487              		.fpu fpv4-sp-d16
 1489              	api_send_unicode:
 1490              	.LFB42:
1574:quantum/quantum.c **** 
1575:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 1491              		.loc 1 1575 0
 1492              		.cfi_startproc
 1493              		@ args = 0, pretend = 0, frame = 0
 1494              		@ frame_needed = 0, uses_anonymous_args = 0
 1495              		@ link register save eliminated.
 1496              	.LVL163:
1576:quantum/quantum.c **** #ifdef API_ENABLE
1577:quantum/quantum.c ****     uint8_t chunk[4];
1578:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
1579:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
1580:quantum/quantum.c **** #endif
1581:quantum/quantum.c **** }
 1497              		.loc 1 1581 0
 1498 0000 7047     		bx	lr
 1499              		.cfi_endproc
 1500              	.LFE42:
 1502              		.section	.text.led_set_user,"ax",%progbits
 1503              		.align	1
 1504              		.weak	led_set_user
 1505              		.syntax unified
 1506              		.thumb
 1507              		.thumb_func
 1508              		.fpu fpv4-sp-d16
 1510              	led_set_user:
 1511              	.LFB43:
1582:quantum/quantum.c **** 
1583:quantum/quantum.c **** __attribute__((weak)) void led_set_user(uint8_t usb_led) {}
 1512              		.loc 1 1583 0
 1513              		.cfi_startproc
 1514              		@ args = 0, pretend = 0, frame = 0
 1515              		@ frame_needed = 0, uses_anonymous_args = 0
 1516              		@ link register save eliminated.
 1517              	.LVL164:
 1518              		.loc 1 1583 0
 1519 0000 7047     		bx	lr
 1520              		.cfi_endproc
 1521              	.LFE43:
 1523              		.thumb_set led_set_user.localalias.1,led_set_user
 1524              		.section	.text.backlight_set,"ax",%progbits
 1525              		.align	1
 1526              		.weak	backlight_set
 1527              		.syntax unified
 1528              		.thumb
 1529              		.thumb_func
 1530              		.fpu fpv4-sp-d16
 1532              	backlight_set:
 1533              	.LFB60:
 1534              		.cfi_startproc
 1535              		@ args = 0, pretend = 0, frame = 0
 1536              		@ frame_needed = 0, uses_anonymous_args = 0
 1537              		@ link register save eliminated.
 1538 0000 7047     		bx	lr
 1539              		.cfi_endproc
 1540              	.LFE60:
 1542              		.section	.text.led_set_kb,"ax",%progbits
 1543              		.align	1
 1544              		.weak	led_set_kb
 1545              		.syntax unified
 1546              		.thumb
 1547              		.thumb_func
 1548              		.fpu fpv4-sp-d16
 1550              	led_set_kb:
 1551              	.LFB44:
1584:quantum/quantum.c **** 
1585:quantum/quantum.c **** __attribute__((weak)) void led_set_kb(uint8_t usb_led) { led_set_user(usb_led); }
 1552              		.loc 1 1585 0
 1553              		.cfi_startproc
 1554              		@ args = 0, pretend = 0, frame = 0
 1555              		@ frame_needed = 0, uses_anonymous_args = 0
 1556              	.LVL165:
 1557              		.loc 1 1585 0
 1558 0000 08B5     		push	{r3, lr}
 1559              		.cfi_def_cfa_offset 8
 1560              		.cfi_offset 3, -8
 1561              		.cfi_offset 14, -4
 1562              		.loc 1 1585 0
 1563 0002 FFF7FEFF 		bl	led_set_user
 1564              	.LVL166:
 1565 0006 08BD     		pop	{r3, pc}
 1566              		.cfi_endproc
 1567              	.LFE44:
 1569              		.section	.text.led_init_ports,"ax",%progbits
 1570              		.align	1
 1571              		.weak	led_init_ports
 1572              		.syntax unified
 1573              		.thumb
 1574              		.thumb_func
 1575              		.fpu fpv4-sp-d16
 1577              	led_init_ports:
 1578              	.LFB45:
1586:quantum/quantum.c **** 
1587:quantum/quantum.c **** __attribute__((weak)) void led_init_ports(void) {}
 1579              		.loc 1 1587 0
 1580              		.cfi_startproc
 1581              		@ args = 0, pretend = 0, frame = 0
 1582              		@ frame_needed = 0, uses_anonymous_args = 0
 1583              		@ link register save eliminated.
 1584              		.loc 1 1587 0
 1585 0000 7047     		bx	lr
 1586              		.cfi_endproc
 1587              	.LFE45:
 1589              		.section	.text.led_set,"ax",%progbits
 1590              		.align	1
 1591              		.weak	led_set
 1592              		.syntax unified
 1593              		.thumb
 1594              		.thumb_func
 1595              		.fpu fpv4-sp-d16
 1597              	led_set:
 1598              	.LFB46:
1588:quantum/quantum.c **** 
1589:quantum/quantum.c **** __attribute__((weak)) void led_set(uint8_t usb_led) {
 1599              		.loc 1 1589 0
 1600              		.cfi_startproc
 1601              		@ args = 0, pretend = 0, frame = 0
 1602              		@ frame_needed = 0, uses_anonymous_args = 0
 1603              	.LVL167:
 1604 0000 08B5     		push	{r3, lr}
 1605              		.cfi_def_cfa_offset 8
 1606              		.cfi_offset 3, -8
 1607              		.cfi_offset 14, -4
1590:quantum/quantum.c **** #if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
1591:quantum/quantum.c ****     // Use backlight as Caps Lock indicator
1592:quantum/quantum.c ****     uint8_t bl_toggle_lvl = 0;
1593:quantum/quantum.c **** 
1594:quantum/quantum.c ****     if (IS_LED_ON(usb_led, USB_LED_CAPS_LOCK) && !backlight_config.enable) {
1595:quantum/quantum.c ****         // Turning Caps Lock ON and backlight is disabled in config
1596:quantum/quantum.c ****         // Toggling backlight to the brightest level
1597:quantum/quantum.c ****         bl_toggle_lvl = BACKLIGHT_LEVELS;
1598:quantum/quantum.c ****     } else if (IS_LED_OFF(usb_led, USB_LED_CAPS_LOCK) && backlight_config.enable) {
1599:quantum/quantum.c ****         // Turning Caps Lock OFF and backlight is enabled in config
1600:quantum/quantum.c ****         // Toggling backlight and restoring config level
1601:quantum/quantum.c ****         bl_toggle_lvl = backlight_config.level;
1602:quantum/quantum.c ****     }
1603:quantum/quantum.c **** 
1604:quantum/quantum.c ****     // Set level without modify backlight_config to keep ability to restore state
1605:quantum/quantum.c ****     backlight_set(bl_toggle_lvl);
1606:quantum/quantum.c **** #endif
1607:quantum/quantum.c **** 
1608:quantum/quantum.c ****     led_set_kb(usb_led);
 1608              		.loc 1 1608 0
 1609 0002 FFF7FEFF 		bl	led_set_kb
 1610              	.LVL168:
1609:quantum/quantum.c **** }
 1611              		.loc 1 1609 0
 1612 0006 08BD     		pop	{r3, pc}
 1613              		.cfi_endproc
 1614              	.LFE46:
 1616              		.section	.text.startup_user,"ax",%progbits
 1617              		.align	1
 1618              		.weak	startup_user
 1619              		.syntax unified
 1620              		.thumb
 1621              		.thumb_func
 1622              		.fpu fpv4-sp-d16
 1624              	startup_user:
 1625              	.LFB50:
 1626              		.cfi_startproc
 1627              		@ args = 0, pretend = 0, frame = 0
 1628              		@ frame_needed = 0, uses_anonymous_args = 0
 1629              		@ link register save eliminated.
 1630 0000 7047     		bx	lr
 1631              		.cfi_endproc
 1632              	.LFE50:
 1634              		.section	.text.shutdown_user,"ax",%progbits
 1635              		.align	1
 1636              		.weak	shutdown_user
 1637              		.syntax unified
 1638              		.thumb
 1639              		.thumb_func
 1640              		.fpu fpv4-sp-d16
 1642              	shutdown_user:
 1643              	.LFB52:
 1644              		.cfi_startproc
 1645              		@ args = 0, pretend = 0, frame = 0
 1646              		@ frame_needed = 0, uses_anonymous_args = 0
 1647              		@ link register save eliminated.
 1648 0000 7047     		bx	lr
 1649              		.cfi_endproc
 1650              	.LFE52:
 1652              		.section	.text.reset_keyboard,"ax",%progbits
 1653              		.align	1
 1654              		.global	reset_keyboard
 1655              		.syntax unified
 1656              		.thumb
 1657              		.thumb_func
 1658              		.fpu fpv4-sp-d16
 1660              	reset_keyboard:
 1661              	.LFB19:
 157:quantum/quantum.c ****     clear_keyboard();
 1662              		.loc 1 157 0
 1663              		.cfi_startproc
 1664              		@ args = 0, pretend = 0, frame = 0
 1665              		@ frame_needed = 0, uses_anonymous_args = 0
 157:quantum/quantum.c ****     clear_keyboard();
 1666              		.loc 1 157 0
 1667 0000 08B5     		push	{r3, lr}
 1668              		.cfi_def_cfa_offset 8
 1669              		.cfi_offset 3, -8
 1670              		.cfi_offset 14, -4
 158:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 1671              		.loc 1 158 0
 1672 0002 FFF7FEFF 		bl	clear_keyboard
 1673              	.LVL169:
 172:quantum/quantum.c ****     wait_ms(250);
 1674              		.loc 1 172 0
 1675 0006 FFF7FEFF 		bl	shutdown_user
 1676              	.LVL170:
 173:quantum/quantum.c **** #endif
 1677              		.loc 1 173 0
 1678 000a FA20     		movs	r0, #250
 1679 000c 0021     		movs	r1, #0
 1680 000e FFF7FEFF 		bl	CLK_delay_ms
 1681              	.LVL171:
 183:quantum/quantum.c **** 
 1682              		.loc 1 183 0
 1683 0012 BDE80840 		pop	{r3, lr}
 1684              		.cfi_restore 14
 1685              		.cfi_restore 3
 1686              		.cfi_def_cfa_offset 0
 182:quantum/quantum.c **** }
 1687              		.loc 1 182 0
 1688 0016 FFF7FEBF 		b	bootloader_jump
 1689              	.LVL172:
 1690              		.cfi_endproc
 1691              	.LFE19:
 1693              		.section	.text.process_record_quantum,"ax",%progbits
 1694              		.align	1
 1695              		.global	process_record_quantum
 1696              		.syntax unified
 1697              		.thumb
 1698              		.thumb_func
 1699              		.fpu fpv4-sp-d16
 1701              	process_record_quantum:
 1702              	.LFB22:
 217:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 1703              		.loc 1 217 0
 1704              		.cfi_startproc
 1705              		@ args = 0, pretend = 0, frame = 0
 1706              		@ frame_needed = 0, uses_anonymous_args = 0
 1707              	.LVL173:
 1708 0000 38B5     		push	{r3, r4, r5, lr}
 1709              		.cfi_def_cfa_offset 16
 1710              		.cfi_offset 3, -16
 1711              		.cfi_offset 4, -12
 1712              		.cfi_offset 5, -8
 1713              		.cfi_offset 14, -4
 217:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 1714              		.loc 1 217 0
 1715 0002 0546     		mov	r5, r0
 218:quantum/quantum.c **** 
 1716              		.loc 1 218 0
 1717 0004 FFF7FEFF 		bl	get_record_keycode
 1718              	.LVL174:
 250:quantum/quantum.c **** #endif
 1719              		.loc 1 250 0
 1720 0008 2946     		mov	r1, r5
 218:quantum/quantum.c **** 
 1721              		.loc 1 218 0
 1722 000a 0446     		mov	r4, r0
 1723              	.LVL175:
 250:quantum/quantum.c **** #endif
 1724              		.loc 1 250 0
 1725 000c FFF7FEFF 		bl	process_rgb_matrix
 1726              	.LVL176:
 252:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 1727              		.loc 1 252 0
 1728 0010 08B9     		cbnz	r0, .L132
 1729              	.L261:
 449:quantum/quantum.c ****         case RGB_MODE_RAINBOW:
 1730              		.loc 1 449 0
 1731 0012 0020     		movs	r0, #0
 1732 0014 24E0     		b	.L133
 1733              	.L132:
 252:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 1734              		.loc 1 252 0 discriminator 2
 1735 0016 2946     		mov	r1, r5
 1736 0018 2046     		mov	r0, r4
 1737 001a FFF7FEFF 		bl	process_record_kb
 1738              	.LVL177:
 250:quantum/quantum.c **** #endif
 1739              		.loc 1 250 0 discriminator 2
 1740 001e 0028     		cmp	r0, #0
 1741 0020 F7D0     		beq	.L261
 287:quantum/quantum.c **** #endif
 1742              		.loc 1 287 0 discriminator 3
 1743 0022 2946     		mov	r1, r5
 1744 0024 2046     		mov	r0, r4
 1745 0026 FFF7FEFF 		bl	process_space_cadet
 1746              	.LVL178:
 252:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 1747              		.loc 1 252 0 discriminator 3
 1748 002a 0028     		cmp	r0, #0
 1749 002c F1D0     		beq	.L261
 295:quantum/quantum.c ****         case RESET:
 1750              		.loc 1 295 0
 1751 002e 45F6C743 		movw	r3, #23751
 1752 0032 9C42     		cmp	r4, r3
 1753 0034 00F0DF80 		beq	.L136
 1754 0038 3DD8     		bhi	.L137
 1755 003a 45F61643 		movw	r3, #23574
 1756 003e 9C42     		cmp	r4, r3
 1757 0040 00F0CF81 		beq	.L138
 1758 0044 0DD8     		bhi	.L139
 1759 0046 45F60143 		movw	r3, #23553
 1760 004a 9C42     		cmp	r4, r3
 1761 004c 00F0A380 		beq	.L140
 1762 0050 6BD8     		bhi	.L141
 1763 0052 B4F5B84F 		cmp	r4, #23552
 1764 0056 00F09780 		beq	.L142
 1765              	.L135:
 729:quantum/quantum.c **** }
 1766              		.loc 1 729 0
 1767 005a 2846     		mov	r0, r5
 1768 005c FFF7FEFF 		bl	process_action_kb
 1769              	.LVL179:
 1770              	.L133:
 730:quantum/quantum.c **** 
 1771              		.loc 1 730 0
 1772 0060 38BD     		pop	{r3, r4, r5, pc}
 1773              	.LVL180:
 1774              	.L139:
 295:quantum/quantum.c ****         case RESET:
 1775              		.loc 1 295 0
 1776 0062 45F6C443 		movw	r3, #23748
 1777 0066 9C42     		cmp	r4, r3
 1778 0068 00F0B180 		beq	.L143
 1779 006c 14D8     		bhi	.L144
 1780 006e 45F6C243 		movw	r3, #23746
 1781 0072 9C42     		cmp	r4, r3
 1782 0074 00F0A480 		beq	.L145
 1783 0078 45F6C343 		movw	r3, #23747
 1784 007c 9C42     		cmp	r4, r3
 1785 007e ECD1     		bne	.L135
 345:quantum/quantum.c ****                 uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT));
 1786              		.loc 1 345 0
 1787 0080 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1788 0082 002B     		cmp	r3, #0
 1789 0084 C5D0     		beq	.L261
 1790              	.LBB10:
 346:quantum/quantum.c ****                 if (shifted) {
 1791              		.loc 1 346 0
 1792 0086 FFF7FEFF 		bl	get_mods
 1793              	.LVL181:
 347:quantum/quantum.c ****                     rgblight_step_reverse();
 1794              		.loc 1 347 0
 1795 008a 10F0220F 		tst	r0, #34
 1796 008e 00F0A880 		beq	.L159
 1797              	.LVL182:
 1798              	.L160:
 348:quantum/quantum.c ****                 } else {
 1799              		.loc 1 348 0
 1800 0092 FFF7FEFF 		bl	rgb_matrix_step_reverse
 1801              	.LVL183:
 1802 0096 BCE7     		b	.L261
 1803              	.L144:
 1804              	.LBE10:
 295:quantum/quantum.c ****         case RESET:
 1805              		.loc 1 295 0
 1806 0098 45F6C543 		movw	r3, #23749
 1807 009c 9C42     		cmp	r4, r3
 1808 009e 00F0A380 		beq	.L147
 1809 00a2 45F6C643 		movw	r3, #23750
 1810 00a6 9C42     		cmp	r4, r3
 1811 00a8 D7D1     		bne	.L135
 377:quantum/quantum.c **** #    else
 1812              		.loc 1 377 0
 1813 00aa AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1814 00ac 002B     		cmp	r3, #0
 1815 00ae B0D0     		beq	.L261
 381:quantum/quantum.c ****             }
 1816              		.loc 1 381 0
 1817 00b0 FFF7FEFF 		bl	rgb_matrix_decrease_hue
 1818              	.LVL184:
 1819 00b4 ADE7     		b	.L261
 1820              	.L137:
 295:quantum/quantum.c ****         case RESET:
 1821              		.loc 1 295 0
 1822 00b6 45F6CD43 		movw	r3, #23757
 1823 00ba 9C42     		cmp	r4, r3
 1824 00bc 00F0B780 		beq	.L149
 1825 00c0 23D8     		bhi	.L150
 1826 00c2 45F6CA43 		movw	r3, #23754
 1827 00c6 9C42     		cmp	r4, r3
 1828 00c8 00F0A380 		beq	.L151
 1829 00cc 0ED8     		bhi	.L152
 1830 00ce 45F6C843 		movw	r3, #23752
 1831 00d2 9C42     		cmp	r4, r3
 1832 00d4 00F09680 		beq	.L153
 1833 00d8 45F6C943 		movw	r3, #23753
 1834 00dc 9C42     		cmp	r4, r3
 1835 00de BCD1     		bne	.L135
 407:quantum/quantum.c **** #    else
 1836              		.loc 1 407 0
 1837 00e0 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1838 00e2 002B     		cmp	r3, #0
 1839 00e4 95D0     		beq	.L261
 411:quantum/quantum.c ****             }
 1840              		.loc 1 411 0
 1841 00e6 FFF7FEFF 		bl	rgb_matrix_increase_val
 1842              	.LVL185:
 1843 00ea 92E7     		b	.L261
 1844              	.L152:
 295:quantum/quantum.c ****         case RESET:
 1845              		.loc 1 295 0
 1846 00ec 45F6CB43 		movw	r3, #23755
 1847 00f0 9C42     		cmp	r4, r3
 1848 00f2 00F09580 		beq	.L155
 1849 00f6 45F6CC43 		movw	r3, #23756
 1850 00fa 9C42     		cmp	r4, r3
 1851 00fc ADD1     		bne	.L135
 430:quantum/quantum.c ****                 rgblight_decrease_speed();
 1852              		.loc 1 430 0
 1853 00fe AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1854 0100 002B     		cmp	r3, #0
 1855 0102 86D0     		beq	.L261
 431:quantum/quantum.c ****             }
 1856              		.loc 1 431 0
 1857 0104 FFF7FEFF 		bl	rgb_matrix_decrease_speed
 1858              	.LVL186:
 1859 0108 83E7     		b	.L261
 1860              	.L150:
 295:quantum/quantum.c ****         case RESET:
 1861              		.loc 1 295 0
 1862 010a 45F6DE43 		movw	r3, #23774
 1863 010e 9C42     		cmp	r4, r3
 1864 0110 4FD0     		beq	.L157
 1865 0112 05D8     		bhi	.L158
 1866 0114 45F6D543 		movw	r3, #23765
 1867 0118 9C42     		cmp	r4, r3
 1868 011a 7FF67AAF 		bls	.L261
 1869 011e 9CE7     		b	.L135
 1870              	.L158:
 1871 0120 A4F5B943 		sub	r3, r4, #23680
 1872 0124 7A3B     		subs	r3, r3, #122
 1873 0126 062B     		cmp	r3, #6
 1874 0128 97D8     		bhi	.L135
 1875              	.L141:
 548:quantum/quantum.c ****                 // MAGIC actions (BOOTMAGIC without the boot)
 1876              		.loc 1 548 0
 1877 012a AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1878 012c 002B     		cmp	r3, #0
 1879 012e 94D0     		beq	.L135
 550:quantum/quantum.c ****                     eeconfig_init();
 1880              		.loc 1 550 0
 1881 0130 FFF7FEFF 		bl	eeconfig_is_enabled
 1882              	.LVL187:
 1883 0134 08B9     		cbnz	r0, .L161
 551:quantum/quantum.c ****                 }
 1884              		.loc 1 551 0
 1885 0136 FFF7FEFF 		bl	eeconfig_init
 1886              	.LVL188:
 1887              	.L161:
 554:quantum/quantum.c ****                 switch (keycode) {
 1888              		.loc 1 554 0
 1889 013a FFF7FEFF 		bl	eeconfig_read_keymap
 1890              	.LVL189:
 1891 013e B64B     		ldr	r3, .L268
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 1892              		.loc 1 555 0
 1893 0140 45F60F42 		movw	r2, #23567
 1894 0144 9442     		cmp	r4, r2
 554:quantum/quantum.c ****                 switch (keycode) {
 1895              		.loc 1 554 0
 1896 0146 1880     		strh	r0, [r3]	@ movhi
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 1897              		.loc 1 555 0
 1898 0148 00F02F81 		beq	.L163
 1899 014c 00F2A080 		bhi	.L164
 1900 0150 45F60842 		movw	r2, #23560
 1901 0154 9442     		cmp	r4, r2
 1902 0156 00F00C81 		beq	.L165
 1903 015a 7BD8     		bhi	.L166
 1904 015c 45F60442 		movw	r2, #23556
 1905 0160 9442     		cmp	r4, r2
 1906 0162 00F0F180 		beq	.L167
 1907 0166 6AD8     		bhi	.L168
 1908 0168 45F60242 		movw	r2, #23554
 1909 016c 9442     		cmp	r4, r2
 1910 016e 00F0E280 		beq	.L169
 1911 0172 45F60342 		movw	r2, #23555
 1912 0176 9442     		cmp	r4, r2
 1913 0178 00F0E280 		beq	.L170
 1914              	.L162:
 668:quantum/quantum.c ****                 clear_keyboard();  // clear to prevent stuck keys
 1915              		.loc 1 668 0
 1916 017c 1888     		ldrh	r0, [r3]
 1917 017e FFF7FEFF 		bl	eeconfig_update_keymap
 1918              	.LVL190:
 669:quantum/quantum.c **** 
 1919              		.loc 1 669 0
 1920 0182 FFF7FEFF 		bl	clear_keyboard
 1921              	.LVL191:
 1922 0186 44E7     		b	.L261
 1923              	.L142:
 297:quantum/quantum.c ****                 reset_keyboard();
 1924              		.loc 1 297 0
 1925 0188 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1926 018a 002B     		cmp	r3, #0
 1927 018c 3FF441AF 		beq	.L261
 298:quantum/quantum.c ****             }
 1928              		.loc 1 298 0
 1929 0190 FFF7FEFF 		bl	reset_keyboard
 1930              	.LVL192:
 1931 0194 3DE7     		b	.L261
 1932              	.L140:
 302:quantum/quantum.c ****                 debug_enable ^= 1;
 1933              		.loc 1 302 0
 1934 0196 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1935 0198 002B     		cmp	r3, #0
 1936 019a 3FF43AAF 		beq	.L261
 303:quantum/quantum.c ****                 if (debug_enable) {
 1937              		.loc 1 303 0
 1938 019e 9F49     		ldr	r1, .L268+4
 1939 01a0 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 1940 01a2 C3F30002 		ubfx	r2, r3, #0, #1
 1941 01a6 82F00102 		eor	r2, r2, #1
 1942 01aa 62F30003 		bfi	r3, r2, #0, #1
 1943 01ae 0B70     		strb	r3, [r1]
 1944 01b0 2FE7     		b	.L261
 1945              	.L157:
 312:quantum/quantum.c ****                 eeconfig_init();
 1946              		.loc 1 312 0
 1947 01b2 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1948 01b4 002B     		cmp	r3, #0
 1949 01b6 3FF42CAF 		beq	.L261
 313:quantum/quantum.c ****             }
 1950              		.loc 1 313 0
 1951 01ba FFF7FEFF 		bl	eeconfig_init
 1952              	.LVL193:
 1953 01be 28E7     		b	.L261
 1954              	.L145:
 337:quantum/quantum.c **** #    else
 1955              		.loc 1 337 0
 1956 01c0 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1957 01c2 002B     		cmp	r3, #0
 1958 01c4 3FF425AF 		beq	.L261
 341:quantum/quantum.c ****             }
 1959              		.loc 1 341 0
 1960 01c8 FFF7FEFF 		bl	rgb_matrix_toggle
 1961              	.LVL194:
 1962 01cc 21E7     		b	.L261
 1963              	.L143:
 355:quantum/quantum.c ****                 uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT));
 1964              		.loc 1 355 0
 1965 01ce AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1966 01d0 002B     		cmp	r3, #0
 1967 01d2 3FF41EAF 		beq	.L261
 1968              	.LBB11:
 356:quantum/quantum.c ****                 if (shifted) {
 1969              		.loc 1 356 0
 1970 01d6 FFF7FEFF 		bl	get_mods
 1971              	.LVL195:
 357:quantum/quantum.c ****                     rgblight_step();
 1972              		.loc 1 357 0
 1973 01da 10F0220F 		tst	r0, #34
 1974 01de 3FF458AF 		beq	.L160
 1975              	.LVL196:
 1976              	.L159:
 1977              	.LBE11:
 1978              	.LBB12:
 350:quantum/quantum.c ****                 }
 1979              		.loc 1 350 0
 1980 01e2 FFF7FEFF 		bl	rgb_matrix_step
 1981              	.LVL197:
 1982 01e6 14E7     		b	.L261
 1983              	.L147:
 1984              	.LBE12:
 367:quantum/quantum.c **** #    else
 1985              		.loc 1 367 0
 1986 01e8 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1987 01ea 002B     		cmp	r3, #0
 1988 01ec 3FF411AF 		beq	.L261
 371:quantum/quantum.c ****             }
 1989              		.loc 1 371 0
 1990 01f0 FFF7FEFF 		bl	rgb_matrix_increase_hue
 1991              	.LVL198:
 1992 01f4 0DE7     		b	.L261
 1993              	.L136:
 387:quantum/quantum.c **** #    else
 1994              		.loc 1 387 0
 1995 01f6 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 1996 01f8 002B     		cmp	r3, #0
 1997 01fa 3FF40AAF 		beq	.L261
 391:quantum/quantum.c ****             }
 1998              		.loc 1 391 0
 1999 01fe FFF7FEFF 		bl	rgb_matrix_increase_sat
 2000              	.LVL199:
 2001 0202 06E7     		b	.L261
 2002              	.L153:
 397:quantum/quantum.c **** #    else
 2003              		.loc 1 397 0
 2004 0204 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 2005 0206 002B     		cmp	r3, #0
 2006 0208 3FF403AF 		beq	.L261
 401:quantum/quantum.c ****             }
 2007              		.loc 1 401 0
 2008 020c FFF7FEFF 		bl	rgb_matrix_decrease_sat
 2009              	.LVL200:
 2010 0210 FFE6     		b	.L261
 2011              	.L151:
 417:quantum/quantum.c **** #    else
 2012              		.loc 1 417 0
 2013 0212 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 2014 0214 002B     		cmp	r3, #0
 2015 0216 3FF4FCAE 		beq	.L261
 421:quantum/quantum.c ****             }
 2016              		.loc 1 421 0
 2017 021a FFF7FEFF 		bl	rgb_matrix_decrease_val
 2018              	.LVL201:
 2019 021e F8E6     		b	.L261
 2020              	.L155:
 425:quantum/quantum.c ****                 rgblight_increase_speed();
 2021              		.loc 1 425 0
 2022 0220 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 2023 0222 002B     		cmp	r3, #0
 2024 0224 3FF4F5AE 		beq	.L261
 426:quantum/quantum.c ****             }
 2025              		.loc 1 426 0
 2026 0228 FFF7FEFF 		bl	rgb_matrix_increase_speed
 2027              	.LVL202:
 2028 022c F1E6     		b	.L261
 2029              	.L149:
 435:quantum/quantum.c ****                 rgblight_mode(RGBLIGHT_MODE_STATIC_LIGHT);
 2030              		.loc 1 435 0
 2031 022e AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 2032 0230 002B     		cmp	r3, #0
 2033 0232 3FF4EEAE 		beq	.L261
 436:quantum/quantum.c ****             }
 2034              		.loc 1 436 0
 2035 0236 0120     		movs	r0, #1
 2036 0238 FFF7FEFF 		bl	rgb_matrix_mode
 2037              	.LVL203:
 2038 023c E9E6     		b	.L261
 2039              	.L168:
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2040              		.loc 1 555 0
 2041 023e 45F60642 		movw	r2, #23558
 2042 0242 9442     		cmp	r4, r2
 2043 0244 00F09180 		beq	.L171
 2044 0248 40F28280 		bls	.L262
 578:quantum/quantum.c ****                         break;
 2045              		.loc 1 578 0
 2046 024c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2047 024e 42F02002 		orr	r2, r2, #32
 2048 0252 73E0     		b	.L264
 2049              	.L166:
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2050              		.loc 1 555 0
 2051 0254 45F60B42 		movw	r2, #23563
 2052 0258 9442     		cmp	r4, r2
 2053 025a 00F09680 		beq	.L174
 2054 025e 0CD8     		bhi	.L175
 2055 0260 45F60942 		movw	r2, #23561
 2056 0264 9442     		cmp	r4, r2
 2057 0266 00F08880 		beq	.L176
 2058 026a 45F60A42 		movw	r2, #23562
 2059 026e 9442     		cmp	r4, r2
 2060 0270 84D1     		bne	.L162
 587:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2061              		.loc 1 587 0
 2062 0272 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2063 0274 42F00C02 		orr	r2, r2, #12
 2064 0278 60E0     		b	.L264
 2065              	.L175:
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2066              		.loc 1 555 0
 2067 027a 45F60D42 		movw	r2, #23565
 2068 027e 9442     		cmp	r4, r2
 2069 0280 00F08B80 		beq	.L178
 2070 0284 40F28580 		bls	.L263
 608:quantum/quantum.c ****                         break;
 2071              		.loc 1 608 0
 2072 0288 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2073 028a 6FF3C302 		bfc	r2, #3, #1
 2074 028e 55E0     		b	.L264
 2075              	.L164:
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2076              		.loc 1 555 0
 2077 0290 45F6FA42 		movw	r2, #23802
 2078 0294 9442     		cmp	r4, r2
 2079 0296 5FD0     		beq	.L181
 2080 0298 28D8     		bhi	.L182
 2081 029a 45F61242 		movw	r2, #23570
 2082 029e 9442     		cmp	r4, r2
 2083 02a0 00F08B80 		beq	.L183
 2084 02a4 0DD8     		bhi	.L184
 2085 02a6 45F61042 		movw	r2, #23568
 2086 02aa 9442     		cmp	r4, r2
 2087 02ac 00F08180 		beq	.L185
 2088 02b0 45F61142 		movw	r2, #23569
 2089 02b4 9442     		cmp	r4, r2
 2090 02b6 7FF461AF 		bne	.L162
 623:quantum/quantum.c ****                         break;
 2091              		.loc 1 623 0
 2092 02ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2093 02bc 6FF38612 		bfc	r2, #6, #1
 2094 02c0 3CE0     		b	.L264
 2095              	.L184:
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2096              		.loc 1 555 0
 2097 02c2 45F61442 		movw	r2, #23572
 2098 02c6 9442     		cmp	r4, r2
 2099 02c8 00F08380 		beq	.L187
 2100 02cc 79D3     		bcc	.L188
 2101 02ce 45F61542 		movw	r2, #23573
 2102 02d2 9442     		cmp	r4, r2
 2103 02d4 7FF452AF 		bne	.L162
 641:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = keymap_config.swap_lalt_lgui;
 2104              		.loc 1 641 0
 2105 02d8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2106 02da C2F38001 		ubfx	r1, r2, #2, #1
 2107 02de 81F00101 		eor	r1, r1, #1
 2108 02e2 61F38202 		bfi	r2, r1, #2, #1
 642:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2109              		.loc 1 642 0
 2110 02e6 61F3C302 		bfi	r2, r1, #3, #1
 2111 02ea 27E0     		b	.L264
 2112              	.L182:
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2113              		.loc 1 555 0
 2114 02ec 45F6FD42 		movw	r2, #23805
 2115 02f0 9442     		cmp	r4, r2
 2116 02f2 56D0     		beq	.L190
 2117 02f4 0CD8     		bhi	.L191
 2118 02f6 45F6FB42 		movw	r2, #23803
 2119 02fa 9442     		cmp	r4, r2
 2120 02fc 31D0     		beq	.L192
 2121 02fe 45F6FC42 		movw	r2, #23804
 2122 0302 9442     		cmp	r4, r2
 2123 0304 7FF43AAF 		bne	.L162
 611:quantum/quantum.c ****                         break;
 2124              		.loc 1 611 0
 2125 0308 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2126              	.L266:
 635:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2127              		.loc 1 635 0
 2128 030a 6FF30002 		bfc	r2, #0, #1
 2129 030e 26E0     		b	.L265
 2130              	.L191:
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2131              		.loc 1 555 0
 2132 0310 45F6FF42 		movw	r2, #23807
 2133 0314 9442     		cmp	r4, r2
 2134 0316 58D0     		beq	.L194
 2135 0318 33D3     		bcc	.L195
 2136 031a B4F5BA4F 		cmp	r4, #23808
 2137 031e 7FF42DAF 		bne	.L162
 652:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = keymap_config.swap_lctl_lgui;
 2138              		.loc 1 652 0
 2139 0322 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2140 0324 C2F30001 		ubfx	r1, r2, #0, #1
 2141 0328 81F00101 		eor	r1, r1, #1
 2142 032c 61F30002 		bfi	r2, r1, #0, #1
 653:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2143              		.loc 1 653 0
 2144 0330 61F34102 		bfi	r2, r1, #1, #1
 2145 0334 13E0     		b	.L265
 2146              	.L169:
 557:quantum/quantum.c ****                         break;
 2147              		.loc 1 557 0
 2148 0336 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2149 0338 42F00102 		orr	r2, r2, #1
 2150              	.L264:
 663:quantum/quantum.c ****                         break;
 2151              		.loc 1 663 0
 2152 033c 1A70     		strb	r2, [r3]
 664:quantum/quantum.c ****                     default:
 2153              		.loc 1 664 0
 2154 033e 1DE7     		b	.L162
 2155              	.L170:
 560:quantum/quantum.c ****                         break;
 2156              		.loc 1 560 0
 2157 0340 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2158 0342 42F00202 		orr	r2, r2, #2
 2159 0346 F9E7     		b	.L264
 2160              	.L167:
 563:quantum/quantum.c ****                         break;
 2161              		.loc 1 563 0
 2162 0348 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2163 034a 42F00402 		orr	r2, r2, #4
 2164 034e F5E7     		b	.L264
 2165              	.L262:
 566:quantum/quantum.c ****                         break;
 2166              		.loc 1 566 0
 2167 0350 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2168 0352 42F00802 		orr	r2, r2, #8
 2169 0356 F1E7     		b	.L264
 2170              	.L181:
 569:quantum/quantum.c ****                         break;
 2171              		.loc 1 569 0
 2172 0358 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2173 035a 42F00102 		orr	r2, r2, #1
 2174              	.L265:
 653:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2175              		.loc 1 653 0
 2176 035e 5A70     		strb	r2, [r3, #1]
 661:quantum/quantum.c ****                     case MAGIC_TOGGLE_NKRO:
 2177              		.loc 1 661 0
 2178 0360 0CE7     		b	.L162
 2179              	.L192:
 572:quantum/quantum.c ****                         break;
 2180              		.loc 1 572 0
 2181 0362 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2182 0364 42F00202 		orr	r2, r2, #2
 2183 0368 F9E7     		b	.L265
 2184              	.L171:
 575:quantum/quantum.c ****                         break;
 2185              		.loc 1 575 0
 2186 036a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2187 036c 42F01002 		orr	r2, r2, #16
 2188 0370 E4E7     		b	.L264
 2189              	.L165:
 581:quantum/quantum.c ****                         break;
 2190              		.loc 1 581 0
 2191 0372 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2192 0374 42F04002 		orr	r2, r2, #64
 2193 0378 E0E7     		b	.L264
 2194              	.L176:
 584:quantum/quantum.c ****                         break;
 2195              		.loc 1 584 0
 2196 037a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2197 037c 42F08002 		orr	r2, r2, #128
 2198 0380 DCE7     		b	.L264
 2199              	.L195:
 593:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2200              		.loc 1 593 0
 2201 0382 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2202 0384 42F00302 		orr	r2, r2, #3
 2203 0388 E9E7     		b	.L265
 2204              	.L174:
 599:quantum/quantum.c ****                         break;
 2205              		.loc 1 599 0
 2206 038a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2207 038c 6FF30002 		bfc	r2, #0, #1
 2208 0390 D4E7     		b	.L264
 2209              	.L263:
 602:quantum/quantum.c ****                         break;
 2210              		.loc 1 602 0
 2211 0392 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2212 0394 6FF34102 		bfc	r2, #1, #1
 2213 0398 D0E7     		b	.L264
 2214              	.L178:
 605:quantum/quantum.c ****                         break;
 2215              		.loc 1 605 0
 2216 039a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2217              	.L267:
 629:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2218              		.loc 1 629 0
 2219 039c 6FF38202 		bfc	r2, #2, #1
 2220 03a0 CCE7     		b	.L264
 2221              	.L190:
 614:quantum/quantum.c ****                         break;
 2222              		.loc 1 614 0
 2223 03a2 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2224 03a4 6FF34102 		bfc	r2, #1, #1
 2225 03a8 D9E7     		b	.L265
 2226              	.L163:
 617:quantum/quantum.c ****                         break;
 2227              		.loc 1 617 0
 2228 03aa 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2229 03ac 6FF30412 		bfc	r2, #4, #1
 2230 03b0 C4E7     		b	.L264
 2231              	.L185:
 620:quantum/quantum.c ****                         break;
 2232              		.loc 1 620 0
 2233 03b2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2234 03b4 6FF34512 		bfc	r2, #5, #1
 2235 03b8 C0E7     		b	.L264
 2236              	.L183:
 626:quantum/quantum.c ****                         break;
 2237              		.loc 1 626 0
 2238 03ba 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2239 03bc 6FF3C712 		bfc	r2, #7, #1
 2240 03c0 BCE7     		b	.L264
 2241              	.L188:
 629:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2242              		.loc 1 629 0
 2243 03c2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2244 03c4 02F0F702 		and	r2, r2, #247
 2245 03c8 E8E7     		b	.L267
 2246              	.L194:
 635:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2247              		.loc 1 635 0
 2248 03ca 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 2249 03cc 02F0FD02 		and	r2, r2, #253
 2250 03d0 9BE7     		b	.L266
 2251              	.L187:
 663:quantum/quantum.c ****                         break;
 2252              		.loc 1 663 0
 2253 03d2 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2254 03d4 C2F3C011 		ubfx	r1, r2, #7, #1
 2255 03d8 81F00101 		eor	r1, r1, #1
 2256 03dc 61F3C712 		bfi	r2, r1, #7, #1
 2257 03e0 ACE7     		b	.L264
 2258              	.L138:
 2259              	.LBB13:
 676:quantum/quantum.c **** 
 2260              		.loc 1 676 0
 2261 03e2 FFF7FEFF 		bl	get_mods
 2262              	.LVL204:
 708:quantum/quantum.c ****                 grave_esc_was_shifted = shifted;
 2263              		.loc 1 708 0
 2264 03e6 AA78     		ldrb	r2, [r5, #2]	@ zero_extendqisi2
 2265 03e8 0D4B     		ldr	r3, .L268+8
 2266 03ea 6AB1     		cbz	r2, .L197
 676:quantum/quantum.c **** 
 2267              		.loc 1 676 0
 2268 03ec 00F0AA00 		and	r0, r0, #170
 2269              	.LVL205:
 709:quantum/quantum.c ****                 add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 2270              		.loc 1 709 0
 2271 03f0 0028     		cmp	r0, #0
 2272 03f2 15BF     		itete	ne
 2273 03f4 0122     		movne	r2, #1
 2274 03f6 0022     		moveq	r2, #0
 710:quantum/quantum.c ****             } else {
 2275              		.loc 1 710 0
 2276 03f8 3520     		movne	r0, #53
 2277 03fa 2920     		moveq	r0, #41
 709:quantum/quantum.c ****                 add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 2278              		.loc 1 709 0
 2279 03fc 1A70     		strb	r2, [r3]
 710:quantum/quantum.c ****             } else {
 2280              		.loc 1 710 0
 2281 03fe FFF7FEFF 		bl	add_key
 2282              	.LVL206:
 2283              	.L199:
 715:quantum/quantum.c ****             return false;
 2284              		.loc 1 715 0
 2285 0402 FFF7FEFF 		bl	send_keyboard_report
 2286              	.LVL207:
 2287 0406 04E6     		b	.L261
 2288              	.LVL208:
 2289              	.L197:
 712:quantum/quantum.c ****             }
 2290              		.loc 1 712 0
 2291 0408 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2292 040a 002B     		cmp	r3, #0
 2293 040c 14BF     		ite	ne
 2294 040e 3520     		movne	r0, #53
 2295              	.LVL209:
 2296 0410 2920     		moveq	r0, #41
 2297 0412 FFF7FEFF 		bl	del_key
 2298              	.LVL210:
 2299 0416 F4E7     		b	.L199
 2300              	.L269:
 2301              		.align	2
 2302              	.L268:
 2303 0418 00000000 		.word	keymap_config
 2304 041c 00000000 		.word	debug_config
 2305 0420 00000000 		.word	.LANCHOR0
 2306              	.LBE13:
 2307              		.cfi_endproc
 2308              	.LFE22:
 2310              		.weak	ascii_to_keycode_lut
 2311              		.weak	ascii_to_altgr_lut
 2312              		.weak	ascii_to_shift_lut
 2313              		.section	.rodata
 2316              	ascii_to_keycode_lut:
 2317 0000 00       		.byte	0
 2318 0001 00       		.byte	0
 2319 0002 00       		.byte	0
 2320 0003 00       		.byte	0
 2321 0004 00       		.byte	0
 2322 0005 00       		.byte	0
 2323 0006 00       		.byte	0
 2324 0007 00       		.byte	0
 2325 0008 2A       		.byte	42
 2326 0009 2B       		.byte	43
 2327 000a 28       		.byte	40
 2328 000b 00       		.byte	0
 2329 000c 00       		.byte	0
 2330 000d 00       		.byte	0
 2331 000e 00       		.byte	0
 2332 000f 00       		.byte	0
 2333 0010 00       		.byte	0
 2334 0011 00       		.byte	0
 2335 0012 00       		.byte	0
 2336 0013 00       		.byte	0
 2337 0014 00       		.byte	0
 2338 0015 00       		.byte	0
 2339 0016 00       		.byte	0
 2340 0017 00       		.byte	0
 2341 0018 00       		.byte	0
 2342 0019 00       		.byte	0
 2343 001a 00       		.byte	0
 2344 001b 29       		.byte	41
 2345 001c 00       		.byte	0
 2346 001d 00       		.byte	0
 2347 001e 00       		.byte	0
 2348 001f 00       		.byte	0
 2349 0020 2C       		.byte	44
 2350 0021 1E       		.byte	30
 2351 0022 34       		.byte	52
 2352 0023 20       		.byte	32
 2353 0024 21       		.byte	33
 2354 0025 22       		.byte	34
 2355 0026 24       		.byte	36
 2356 0027 34       		.byte	52
 2357 0028 26       		.byte	38
 2358 0029 27       		.byte	39
 2359 002a 25       		.byte	37
 2360 002b 2E       		.byte	46
 2361 002c 36       		.byte	54
 2362 002d 2D       		.byte	45
 2363 002e 37       		.byte	55
 2364 002f 38       		.byte	56
 2365 0030 27       		.byte	39
 2366 0031 1E       		.byte	30
 2367 0032 1F       		.byte	31
 2368 0033 20       		.byte	32
 2369 0034 21       		.byte	33
 2370 0035 22       		.byte	34
 2371 0036 23       		.byte	35
 2372 0037 24       		.byte	36
 2373 0038 25       		.byte	37
 2374 0039 26       		.byte	38
 2375 003a 33       		.byte	51
 2376 003b 33       		.byte	51
 2377 003c 36       		.byte	54
 2378 003d 2E       		.byte	46
 2379 003e 37       		.byte	55
 2380 003f 38       		.byte	56
 2381 0040 1F       		.byte	31
 2382 0041 04       		.byte	4
 2383 0042 05       		.byte	5
 2384 0043 06       		.byte	6
 2385 0044 07       		.byte	7
 2386 0045 08       		.byte	8
 2387 0046 09       		.byte	9
 2388 0047 0A       		.byte	10
 2389 0048 0B       		.byte	11
 2390 0049 0C       		.byte	12
 2391 004a 0D       		.byte	13
 2392 004b 0E       		.byte	14
 2393 004c 0F       		.byte	15
 2394 004d 10       		.byte	16
 2395 004e 11       		.byte	17
 2396 004f 12       		.byte	18
 2397 0050 13       		.byte	19
 2398 0051 14       		.byte	20
 2399 0052 15       		.byte	21
 2400 0053 16       		.byte	22
 2401 0054 17       		.byte	23
 2402 0055 18       		.byte	24
 2403 0056 19       		.byte	25
 2404 0057 1A       		.byte	26
 2405 0058 1B       		.byte	27
 2406 0059 1C       		.byte	28
 2407 005a 1D       		.byte	29
 2408 005b 2F       		.byte	47
 2409 005c 31       		.byte	49
 2410 005d 30       		.byte	48
 2411 005e 23       		.byte	35
 2412 005f 2D       		.byte	45
 2413 0060 35       		.byte	53
 2414 0061 04       		.byte	4
 2415 0062 05       		.byte	5
 2416 0063 06       		.byte	6
 2417 0064 07       		.byte	7
 2418 0065 08       		.byte	8
 2419 0066 09       		.byte	9
 2420 0067 0A       		.byte	10
 2421 0068 0B       		.byte	11
 2422 0069 0C       		.byte	12
 2423 006a 0D       		.byte	13
 2424 006b 0E       		.byte	14
 2425 006c 0F       		.byte	15
 2426 006d 10       		.byte	16
 2427 006e 11       		.byte	17
 2428 006f 12       		.byte	18
 2429 0070 13       		.byte	19
 2430 0071 14       		.byte	20
 2431 0072 15       		.byte	21
 2432 0073 16       		.byte	22
 2433 0074 17       		.byte	23
 2434 0075 18       		.byte	24
 2435 0076 19       		.byte	25
 2436 0077 1A       		.byte	26
 2437 0078 1B       		.byte	27
 2438 0079 1C       		.byte	28
 2439 007a 1D       		.byte	29
 2440 007b 2F       		.byte	47
 2441 007c 31       		.byte	49
 2442 007d 30       		.byte	48
 2443 007e 35       		.byte	53
 2444 007f 4C       		.byte	76
 2447              	ascii_to_altgr_lut:
 2448 0080 00000000 		.space	128
 2448      00000000 
 2448      00000000 
 2448      00000000 
 2448      00000000 
 2451              	ascii_to_shift_lut:
 2452 0100 00       		.byte	0
 2453 0101 00       		.byte	0
 2454 0102 00       		.byte	0
 2455 0103 00       		.byte	0
 2456 0104 00       		.byte	0
 2457 0105 00       		.byte	0
 2458 0106 00       		.byte	0
 2459 0107 00       		.byte	0
 2460 0108 00       		.byte	0
 2461 0109 00       		.byte	0
 2462 010a 00       		.byte	0
 2463 010b 00       		.byte	0
 2464 010c 00       		.byte	0
 2465 010d 00       		.byte	0
 2466 010e 00       		.byte	0
 2467 010f 00       		.byte	0
 2468 0110 00       		.byte	0
 2469 0111 00       		.byte	0
 2470 0112 00       		.byte	0
 2471 0113 00       		.byte	0
 2472 0114 00       		.byte	0
 2473 0115 00       		.byte	0
 2474 0116 00       		.byte	0
 2475 0117 00       		.byte	0
 2476 0118 00       		.byte	0
 2477 0119 00       		.byte	0
 2478 011a 00       		.byte	0
 2479 011b 00       		.byte	0
 2480 011c 00       		.byte	0
 2481 011d 00       		.byte	0
 2482 011e 00       		.byte	0
 2483 011f 00       		.byte	0
 2484 0120 00       		.byte	0
 2485 0121 01       		.byte	1
 2486 0122 01       		.byte	1
 2487 0123 01       		.byte	1
 2488 0124 01       		.byte	1
 2489 0125 01       		.byte	1
 2490 0126 01       		.byte	1
 2491 0127 00       		.byte	0
 2492 0128 01       		.byte	1
 2493 0129 01       		.byte	1
 2494 012a 01       		.byte	1
 2495 012b 01       		.byte	1
 2496 012c 00       		.byte	0
 2497 012d 00       		.byte	0
 2498 012e 00       		.byte	0
 2499 012f 00       		.byte	0
 2500 0130 00       		.byte	0
 2501 0131 00       		.byte	0
 2502 0132 00       		.byte	0
 2503 0133 00       		.byte	0
 2504 0134 00       		.byte	0
 2505 0135 00       		.byte	0
 2506 0136 00       		.byte	0
 2507 0137 00       		.byte	0
 2508 0138 00       		.byte	0
 2509 0139 00       		.byte	0
 2510 013a 01       		.byte	1
 2511 013b 00       		.byte	0
 2512 013c 01       		.byte	1
 2513 013d 00       		.byte	0
 2514 013e 01       		.byte	1
 2515 013f 01       		.byte	1
 2516 0140 01       		.byte	1
 2517 0141 01       		.byte	1
 2518 0142 01       		.byte	1
 2519 0143 01       		.byte	1
 2520 0144 01       		.byte	1
 2521 0145 01       		.byte	1
 2522 0146 01       		.byte	1
 2523 0147 01       		.byte	1
 2524 0148 01       		.byte	1
 2525 0149 01       		.byte	1
 2526 014a 01       		.byte	1
 2527 014b 01       		.byte	1
 2528 014c 01       		.byte	1
 2529 014d 01       		.byte	1
 2530 014e 01       		.byte	1
 2531 014f 01       		.byte	1
 2532 0150 01       		.byte	1
 2533 0151 01       		.byte	1
 2534 0152 01       		.byte	1
 2535 0153 01       		.byte	1
 2536 0154 01       		.byte	1
 2537 0155 01       		.byte	1
 2538 0156 01       		.byte	1
 2539 0157 01       		.byte	1
 2540 0158 01       		.byte	1
 2541 0159 01       		.byte	1
 2542 015a 01       		.byte	1
 2543 015b 00       		.byte	0
 2544 015c 00       		.byte	0
 2545 015d 00       		.byte	0
 2546 015e 01       		.byte	1
 2547 015f 01       		.byte	1
 2548 0160 00       		.byte	0
 2549 0161 00       		.byte	0
 2550 0162 00       		.byte	0
 2551 0163 00       		.byte	0
 2552 0164 00       		.byte	0
 2553 0165 00       		.byte	0
 2554 0166 00       		.byte	0
 2555 0167 00       		.byte	0
 2556 0168 00       		.byte	0
 2557 0169 00       		.byte	0
 2558 016a 00       		.byte	0
 2559 016b 00       		.byte	0
 2560 016c 00       		.byte	0
 2561 016d 00       		.byte	0
 2562 016e 00       		.byte	0
 2563 016f 00       		.byte	0
 2564 0170 00       		.byte	0
 2565 0171 00       		.byte	0
 2566 0172 00       		.byte	0
 2567 0173 00       		.byte	0
 2568 0174 00       		.byte	0
 2569 0175 00       		.byte	0
 2570 0176 00       		.byte	0
 2571 0177 00       		.byte	0
 2572 0178 00       		.byte	0
 2573 0179 00       		.byte	0
 2574 017a 00       		.byte	0
 2575 017b 01       		.byte	1
 2576 017c 01       		.byte	1
 2577 017d 01       		.byte	1
 2578 017e 01       		.byte	1
 2579 017f 00       		.byte	0
 2580              		.bss
 2581              		.set	.LANCHOR0,. + 0
 2584              	grave_esc_was_shifted:
 2585 0000 00       		.space	1
 2586              		.text
 2587              	.Letext0:
 2588              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 2589              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 2590              		.file 4 "tmk_core/protocol/arm_atsam/clks.h"
 2591              		.file 5 "tmk_core/common/keyboard.h"
 2592              		.file 6 "tmk_core/common/action.h"
 2593              		.file 7 "tmk_core/common/report.h"
 2594              		.file 8 "tmk_core/common/host.h"
 2595              		.file 9 "tmk_core/common/debug.h"
 2596              		.file 10 "quantum/keycode_config.h"
 2597              		.file 11 "tmk_core/common/keycode.h"
 2598              		.file 12 "quantum/quantum_keycodes.h"
 2599              		.file 13 "quantum/keymap.h"
 2600              		.file 14 "quantum/rgblight.h"
 2601              		.file 15 "quantum/color.h"
 2602              		.file 16 "quantum/rgb_matrix_types.h"
 2603              		.file 17 "quantum/rgb_matrix.h"
 2604              		.file 18 "tmk_core/common/action_layer.h"
 2605              		.file 19 "tmk_core/common/timer.h"
 2606              		.file 20 "tmk_core/common/action_util.h"
 2607              		.file 21 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 2608              		.file 22 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 2609              		.file 23 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.
 2610              		.file 24 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 2611              		.file 25 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 2612              		.file 26 "quantum/quantum.h"
 2613              		.file 27 "tmk_core/common/backlight.h"
 2614              		.file 28 "tmk_core/common/eeconfig.h"
 2615              		.file 29 "keyboards/massdrop/alt/matrix.h"
 2616              		.file 30 "tmk_core/common/bootloader.h"
 2617              		.file 31 "quantum/process_keycode/process_space_cadet.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
/var/tmp//ccwWgiWi.s:18     .text.do_code16:0000000000000000 $t
/var/tmp//ccwWgiWi.s:24     .text.do_code16:0000000000000000 do_code16
/var/tmp//ccwWgiWi.s:118    .text.qk_register_weak_mods:0000000000000000 $t
/var/tmp//ccwWgiWi.s:124    .text.qk_register_weak_mods:0000000000000000 qk_register_weak_mods
/var/tmp//ccwWgiWi.s:155    .text.qk_register_mods:0000000000000000 $t
/var/tmp//ccwWgiWi.s:161    .text.qk_register_mods:0000000000000000 qk_register_mods
/var/tmp//ccwWgiWi.s:172    .text.qk_unregister_weak_mods:0000000000000000 $t
/var/tmp//ccwWgiWi.s:178    .text.qk_unregister_weak_mods:0000000000000000 qk_unregister_weak_mods
/var/tmp//ccwWgiWi.s:210    .text.qk_unregister_mods:0000000000000000 $t
/var/tmp//ccwWgiWi.s:216    .text.qk_unregister_mods:0000000000000000 qk_unregister_mods
/var/tmp//ccwWgiWi.s:227    .text.register_code16:0000000000000000 $t
/var/tmp//ccwWgiWi.s:234    .text.register_code16:0000000000000000 register_code16
/var/tmp//ccwWgiWi.s:283    .text.register_code16:0000000000000024 $d
/var/tmp//ccwWgiWi.s:289    .text.unregister_code16:0000000000000000 $t
/var/tmp//ccwWgiWi.s:296    .text.unregister_code16:0000000000000000 unregister_code16
/var/tmp//ccwWgiWi.s:342    .text.unregister_code16:0000000000000024 $d
/var/tmp//ccwWgiWi.s:348    .text.tap_code16:0000000000000000 $t
/var/tmp//ccwWgiWi.s:355    .text.tap_code16:0000000000000000 tap_code16
/var/tmp//ccwWgiWi.s:385    .text.process_action_kb:0000000000000000 $t
/var/tmp//ccwWgiWi.s:392    .text.process_action_kb:0000000000000000 process_action_kb
/var/tmp//ccwWgiWi.s:408    .text.process_record_user:0000000000000000 $t
/var/tmp//ccwWgiWi.s:415    .text.process_record_user:0000000000000000 process_record_user
/var/tmp//ccwWgiWi.s:431    .text.process_record_kb:0000000000000000 $t
/var/tmp//ccwWgiWi.s:438    .text.process_record_kb:0000000000000000 process_record_kb
/var/tmp//ccwWgiWi.s:457    .text.get_event_keycode:0000000000000000 $t
/var/tmp//ccwWgiWi.s:464    .text.get_event_keycode:0000000000000000 get_event_keycode
/var/tmp//ccwWgiWi.s:539    .text.get_event_keycode:0000000000000044 $d
/var/tmp//ccwWgiWi.s:544    .text.get_record_keycode:0000000000000000 $t
/var/tmp//ccwWgiWi.s:551    .text.get_record_keycode:0000000000000000 get_record_keycode
/var/tmp//ccwWgiWi.s:570    .text.send_char:0000000000000000 $t
/var/tmp//ccwWgiWi.s:577    .text.send_char:0000000000000000 send_char
/var/tmp//ccwWgiWi.s:652    .text.send_char:000000000000003c $d
/var/tmp//ccwWgiWi.s:2316   .rodata:0000000000000000 ascii_to_keycode_lut
/var/tmp//ccwWgiWi.s:2451   .rodata:0000000000000100 ascii_to_shift_lut
/var/tmp//ccwWgiWi.s:2447   .rodata:0000000000000080 ascii_to_altgr_lut
/var/tmp//ccwWgiWi.s:659    .text.send_string_with_delay:0000000000000000 $t
/var/tmp//ccwWgiWi.s:666    .text.send_string_with_delay:0000000000000000 send_string_with_delay
/var/tmp//ccwWgiWi.s:778    .text.send_string:0000000000000000 $t
/var/tmp//ccwWgiWi.s:785    .text.send_string:0000000000000000 send_string
/var/tmp//ccwWgiWi.s:801    .text.send_string_P:0000000000000000 $t
/var/tmp//ccwWgiWi.s:808    .text.send_string_P:0000000000000000 send_string_P
/var/tmp//ccwWgiWi.s:819    .text.send_string_with_delay_P:0000000000000000 $t
/var/tmp//ccwWgiWi.s:826    .text.send_string_with_delay_P:0000000000000000 send_string_with_delay_P
/var/tmp//ccwWgiWi.s:837    .text.set_single_persistent_default_layer:0000000000000000 $t
/var/tmp//ccwWgiWi.s:844    .text.set_single_persistent_default_layer:0000000000000000 set_single_persistent_default_layer
/var/tmp//ccwWgiWi.s:877    .text.update_tri_layer_state:0000000000000000 $t
/var/tmp//ccwWgiWi.s:884    .text.update_tri_layer_state:0000000000000000 update_tri_layer_state
/var/tmp//ccwWgiWi.s:918    .text.update_tri_layer:0000000000000000 $t
/var/tmp//ccwWgiWi.s:925    .text.update_tri_layer:0000000000000000 update_tri_layer
/var/tmp//ccwWgiWi.s:956    .text.update_tri_layer:0000000000000018 $d
/var/tmp//ccwWgiWi.s:961    .text.tap_random_base64:0000000000000000 $t
/var/tmp//ccwWgiWi.s:968    .text.tap_random_base64:0000000000000000 tap_random_base64
/var/tmp//ccwWgiWi.s:1093   .text.bootmagic_lite:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1100   .text.bootmagic_lite:0000000000000000 bootmagic_lite
/var/tmp//ccwWgiWi.s:1147   .text.matrix_init_quantum:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1154   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
/var/tmp//ccwWgiWi.s:1187   .text.matrix_scan_quantum:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1194   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
/var/tmp//ccwWgiWi.s:1219   .text.backlight_init_ports:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1226   .text.backlight_init_ports:0000000000000000 backlight_init_ports
/var/tmp//ccwWgiWi.s:1237   .text.send_nibble:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1244   .text.send_nibble:0000000000000000 send_nibble
/var/tmp//ccwWgiWi.s:1261   .text.send_nibble:000000000000000a $d
/var/tmp//ccwWgiWi.s:1277   .text.send_nibble:000000000000001a $t
/var/tmp//ccwWgiWi.s:1324   .text.send_byte:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1331   .text.send_byte:0000000000000000 send_byte
/var/tmp//ccwWgiWi.s:1363   .text.send_word:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1370   .text.send_word:0000000000000000 send_word
/var/tmp//ccwWgiWi.s:1402   .text.send_dword:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1409   .text.send_dword:0000000000000000 send_dword
/var/tmp//ccwWgiWi.s:1442   .text.hex_to_keycode:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1449   .text.hex_to_keycode:0000000000000000 hex_to_keycode
/var/tmp//ccwWgiWi.s:1482   .text.api_send_unicode:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1489   .text.api_send_unicode:0000000000000000 api_send_unicode
/var/tmp//ccwWgiWi.s:1503   .text.led_set_user:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1510   .text.led_set_user:0000000000000000 led_set_user
/var/tmp//ccwWgiWi.s:1510   .text.led_set_user:0000000000000000 led_set_user.localalias.1
/var/tmp//ccwWgiWi.s:1525   .text.backlight_set:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1532   .text.backlight_set:0000000000000000 backlight_set
/var/tmp//ccwWgiWi.s:1543   .text.led_set_kb:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1550   .text.led_set_kb:0000000000000000 led_set_kb
/var/tmp//ccwWgiWi.s:1570   .text.led_init_ports:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1577   .text.led_init_ports:0000000000000000 led_init_ports
/var/tmp//ccwWgiWi.s:1590   .text.led_set:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1597   .text.led_set:0000000000000000 led_set
/var/tmp//ccwWgiWi.s:1617   .text.startup_user:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1624   .text.startup_user:0000000000000000 startup_user
/var/tmp//ccwWgiWi.s:1635   .text.shutdown_user:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1642   .text.shutdown_user:0000000000000000 shutdown_user
/var/tmp//ccwWgiWi.s:1653   .text.reset_keyboard:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1660   .text.reset_keyboard:0000000000000000 reset_keyboard
/var/tmp//ccwWgiWi.s:1694   .text.process_record_quantum:0000000000000000 $t
/var/tmp//ccwWgiWi.s:1701   .text.process_record_quantum:0000000000000000 process_record_quantum
/var/tmp//ccwWgiWi.s:2303   .text.process_record_quantum:0000000000000418 $d
/var/tmp//ccwWgiWi.s:2448   .rodata:0000000000000080 $d
/var/tmp//ccwWgiWi.s:2584   .bss:0000000000000000 grave_esc_was_shifted
/var/tmp//ccwWgiWi.s:2585   .bss:0000000000000000 $d

UNDEFINED SYMBOLS
add_weak_mods
send_keyboard_report
del_weak_mods
register_code
unregister_code
layer_switch_get_layer
update_source_layers_cache
keymap_key_to_keycode
read_source_layers_cache
disable_action_cache
tap_code
CLK_delay_ms
eeconfig_update_default_layer
default_layer_set
layer_state_set
layer_state
rand
matrix_scan
matrix_get_row
eeconfig_disable
bootloader_jump
eeconfig_is_enabled
eeconfig_init
rgb_matrix_init
matrix_init_kb
rgb_matrix_task
matrix_scan_kb
clear_keyboard
process_rgb_matrix
process_space_cadet
get_mods
rgb_matrix_step_reverse
rgb_matrix_decrease_hue
rgb_matrix_increase_val
rgb_matrix_decrease_speed
eeconfig_read_keymap
eeconfig_update_keymap
rgb_matrix_toggle
rgb_matrix_step
rgb_matrix_increase_hue
rgb_matrix_increase_sat
rgb_matrix_decrease_sat
rgb_matrix_decrease_val
rgb_matrix_increase_speed
rgb_matrix_mode
add_key
del_key
keymap_config
debug_config
