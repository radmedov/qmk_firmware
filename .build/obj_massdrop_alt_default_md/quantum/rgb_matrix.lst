   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"rgb_matrix.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.sin8_C,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	sin8_C:
  25              	.LFB52:
  26              		.file 1 "./lib/lib8tion/trig8.h"
   1:./lib/lib8tion/trig8.h **** #ifndef __INC_LIB8TION_TRIG_H
   2:./lib/lib8tion/trig8.h **** #define __INC_LIB8TION_TRIG_H
   3:./lib/lib8tion/trig8.h **** 
   4:./lib/lib8tion/trig8.h **** ///@ingroup lib8tion
   5:./lib/lib8tion/trig8.h **** 
   6:./lib/lib8tion/trig8.h **** ///@defgroup Trig Fast trig functions
   7:./lib/lib8tion/trig8.h **** /// Fast 8 and 16-bit approximations of sin(x) and cos(x).
   8:./lib/lib8tion/trig8.h **** ///        Don't use these approximations for calculating the
   9:./lib/lib8tion/trig8.h **** ///        trajectory of a rocket to Mars, but they're great
  10:./lib/lib8tion/trig8.h **** ///        for art projects and LED displays.
  11:./lib/lib8tion/trig8.h **** ///
  12:./lib/lib8tion/trig8.h **** ///        On Arduino/AVR, the 16-bit approximation is more than
  13:./lib/lib8tion/trig8.h **** ///        10X faster than floating point sin(x) and cos(x), while
  14:./lib/lib8tion/trig8.h **** /// the 8-bit approximation is more than 20X faster.
  15:./lib/lib8tion/trig8.h **** ///@{
  16:./lib/lib8tion/trig8.h **** 
  17:./lib/lib8tion/trig8.h **** #if defined(__AVR__)
  18:./lib/lib8tion/trig8.h **** #define sin16 sin16_avr
  19:./lib/lib8tion/trig8.h **** #else
  20:./lib/lib8tion/trig8.h **** #define sin16 sin16_C
  21:./lib/lib8tion/trig8.h **** #endif
  22:./lib/lib8tion/trig8.h **** 
  23:./lib/lib8tion/trig8.h **** /// Fast 16-bit approximation of sin(x). This approximation never varies more than
  24:./lib/lib8tion/trig8.h **** /// 0.69% from the floating point value you'd get by doing
  25:./lib/lib8tion/trig8.h **** ///
  26:./lib/lib8tion/trig8.h **** ///     float s = sin(x) * 32767.0;
  27:./lib/lib8tion/trig8.h **** ///
  28:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-65535
  29:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between -32767 to 32767.
  30:./lib/lib8tion/trig8.h **** LIB8STATIC int16_t sin16_avr( uint16_t theta )
  31:./lib/lib8tion/trig8.h **** {
  32:./lib/lib8tion/trig8.h ****     static const uint8_t data[] =
  33:./lib/lib8tion/trig8.h ****     { 0,         0,         49, 0, 6393%256,   6393/256, 48, 0,
  34:./lib/lib8tion/trig8.h ****       12539%256, 12539/256, 44, 0, 18204%256, 18204/256, 38, 0,
  35:./lib/lib8tion/trig8.h ****       23170%256, 23170/256, 31, 0, 27245%256, 27245/256, 23, 0,
  36:./lib/lib8tion/trig8.h ****       30273%256, 30273/256, 14, 0, 32137%256, 32137/256,  4 /*,0*/ };
  37:./lib/lib8tion/trig8.h **** 
  38:./lib/lib8tion/trig8.h ****     uint16_t offset = (theta & 0x3FFF);
  39:./lib/lib8tion/trig8.h **** 
  40:./lib/lib8tion/trig8.h ****     // AVR doesn't have a multi-bit shift instruction,
  41:./lib/lib8tion/trig8.h ****     // so if we say "offset >>= 3", gcc makes a tiny loop.
  42:./lib/lib8tion/trig8.h ****     // Inserting empty volatile statements between each
  43:./lib/lib8tion/trig8.h ****     // bit shift forces gcc to unroll the loop.
  44:./lib/lib8tion/trig8.h ****     offset >>= 1; // 0..8191
  45:./lib/lib8tion/trig8.h ****     asm volatile("");
  46:./lib/lib8tion/trig8.h ****     offset >>= 1; // 0..4095
  47:./lib/lib8tion/trig8.h ****     asm volatile("");
  48:./lib/lib8tion/trig8.h ****     offset >>= 1; // 0..2047
  49:./lib/lib8tion/trig8.h **** 
  50:./lib/lib8tion/trig8.h ****     if( theta & 0x4000 ) offset = 2047 - offset;
  51:./lib/lib8tion/trig8.h **** 
  52:./lib/lib8tion/trig8.h ****     uint8_t sectionX4;
  53:./lib/lib8tion/trig8.h ****     sectionX4 = offset / 256;
  54:./lib/lib8tion/trig8.h ****     sectionX4 *= 4;
  55:./lib/lib8tion/trig8.h **** 
  56:./lib/lib8tion/trig8.h ****     uint8_t m;
  57:./lib/lib8tion/trig8.h **** 
  58:./lib/lib8tion/trig8.h ****     union {
  59:./lib/lib8tion/trig8.h ****         uint16_t b;
  60:./lib/lib8tion/trig8.h ****         struct {
  61:./lib/lib8tion/trig8.h ****             uint8_t blo;
  62:./lib/lib8tion/trig8.h ****             uint8_t bhi;
  63:./lib/lib8tion/trig8.h ****         };
  64:./lib/lib8tion/trig8.h ****     } u;
  65:./lib/lib8tion/trig8.h **** 
  66:./lib/lib8tion/trig8.h ****     //in effect u.b = blo + (256 * bhi);
  67:./lib/lib8tion/trig8.h ****     u.blo = data[ sectionX4 ];
  68:./lib/lib8tion/trig8.h ****     u.bhi = data[ sectionX4 + 1];
  69:./lib/lib8tion/trig8.h ****     m     = data[ sectionX4 + 2];
  70:./lib/lib8tion/trig8.h **** 
  71:./lib/lib8tion/trig8.h ****     uint8_t secoffset8 = (uint8_t)(offset) / 2;
  72:./lib/lib8tion/trig8.h **** 
  73:./lib/lib8tion/trig8.h ****     uint16_t mx = m * secoffset8;
  74:./lib/lib8tion/trig8.h **** 
  75:./lib/lib8tion/trig8.h ****     int16_t  y  = mx + u.b;
  76:./lib/lib8tion/trig8.h ****     if( theta & 0x8000 ) y = -y;
  77:./lib/lib8tion/trig8.h **** 
  78:./lib/lib8tion/trig8.h ****     return y;
  79:./lib/lib8tion/trig8.h **** }
  80:./lib/lib8tion/trig8.h **** 
  81:./lib/lib8tion/trig8.h **** /// Fast 16-bit approximation of sin(x). This approximation never varies more than
  82:./lib/lib8tion/trig8.h **** /// 0.69% from the floating point value you'd get by doing
  83:./lib/lib8tion/trig8.h **** ///
  84:./lib/lib8tion/trig8.h **** ///     float s = sin(x) * 32767.0;
  85:./lib/lib8tion/trig8.h **** ///
  86:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-65535
  87:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between -32767 to 32767.
  88:./lib/lib8tion/trig8.h **** LIB8STATIC int16_t sin16_C( uint16_t theta )
  89:./lib/lib8tion/trig8.h **** {
  90:./lib/lib8tion/trig8.h ****     static const uint16_t base[] =
  91:./lib/lib8tion/trig8.h ****     { 0, 6393, 12539, 18204, 23170, 27245, 30273, 32137 };
  92:./lib/lib8tion/trig8.h ****     static const uint8_t slope[] =
  93:./lib/lib8tion/trig8.h ****     { 49, 48, 44, 38, 31, 23, 14, 4 };
  94:./lib/lib8tion/trig8.h **** 
  95:./lib/lib8tion/trig8.h ****     uint16_t offset = (theta & 0x3FFF) >> 3; // 0..2047
  96:./lib/lib8tion/trig8.h ****     if( theta & 0x4000 ) offset = 2047 - offset;
  97:./lib/lib8tion/trig8.h **** 
  98:./lib/lib8tion/trig8.h ****     uint8_t section = offset / 256; // 0..7
  99:./lib/lib8tion/trig8.h ****     uint16_t b   = base[section];
 100:./lib/lib8tion/trig8.h ****     uint8_t  m   = slope[section];
 101:./lib/lib8tion/trig8.h **** 
 102:./lib/lib8tion/trig8.h ****     uint8_t secoffset8 = (uint8_t)(offset) / 2;
 103:./lib/lib8tion/trig8.h **** 
 104:./lib/lib8tion/trig8.h ****     uint16_t mx = m * secoffset8;
 105:./lib/lib8tion/trig8.h ****     int16_t  y  = mx + b;
 106:./lib/lib8tion/trig8.h **** 
 107:./lib/lib8tion/trig8.h ****     if( theta & 0x8000 ) y = -y;
 108:./lib/lib8tion/trig8.h **** 
 109:./lib/lib8tion/trig8.h ****     return y;
 110:./lib/lib8tion/trig8.h **** }
 111:./lib/lib8tion/trig8.h **** 
 112:./lib/lib8tion/trig8.h **** 
 113:./lib/lib8tion/trig8.h **** /// Fast 16-bit approximation of cos(x). This approximation never varies more than
 114:./lib/lib8tion/trig8.h **** /// 0.69% from the floating point value you'd get by doing
 115:./lib/lib8tion/trig8.h **** ///
 116:./lib/lib8tion/trig8.h **** ///     float s = cos(x) * 32767.0;
 117:./lib/lib8tion/trig8.h **** ///
 118:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-65535
 119:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between -32767 to 32767.
 120:./lib/lib8tion/trig8.h **** LIB8STATIC int16_t cos16( uint16_t theta)
 121:./lib/lib8tion/trig8.h **** {
 122:./lib/lib8tion/trig8.h ****     return sin16( theta + 16384);
 123:./lib/lib8tion/trig8.h **** }
 124:./lib/lib8tion/trig8.h **** 
 125:./lib/lib8tion/trig8.h **** ///////////////////////////////////////////////////////////////////////
 126:./lib/lib8tion/trig8.h **** 
 127:./lib/lib8tion/trig8.h **** // sin8 & cos8
 128:./lib/lib8tion/trig8.h **** //        Fast 8-bit approximations of sin(x) & cos(x).
 129:./lib/lib8tion/trig8.h **** //        Input angle is an unsigned int from 0-255.
 130:./lib/lib8tion/trig8.h **** //        Output is an unsigned int from 0 to 255.
 131:./lib/lib8tion/trig8.h **** //
 132:./lib/lib8tion/trig8.h **** //        This approximation can vary to to 2%
 133:./lib/lib8tion/trig8.h **** //        from the floating point value you'd get by doing
 134:./lib/lib8tion/trig8.h **** //          float s = (sin( x ) * 128.0) + 128;
 135:./lib/lib8tion/trig8.h **** //
 136:./lib/lib8tion/trig8.h **** //        Don't use this approximation for calculating the
 137:./lib/lib8tion/trig8.h **** //        "real" trigonometric calculations, but it's great
 138:./lib/lib8tion/trig8.h **** //        for art projects and LED displays.
 139:./lib/lib8tion/trig8.h **** //
 140:./lib/lib8tion/trig8.h **** //        On Arduino/AVR, this approximation is more than
 141:./lib/lib8tion/trig8.h **** //        20X faster than floating point sin(x) and cos(x)
 142:./lib/lib8tion/trig8.h **** 
 143:./lib/lib8tion/trig8.h **** #if defined(__AVR__) && !defined(LIB8_ATTINY)
 144:./lib/lib8tion/trig8.h **** #define sin8 sin8_avr
 145:./lib/lib8tion/trig8.h **** #else
 146:./lib/lib8tion/trig8.h **** #define sin8 sin8_C
 147:./lib/lib8tion/trig8.h **** #endif
 148:./lib/lib8tion/trig8.h **** 
 149:./lib/lib8tion/trig8.h **** 
 150:./lib/lib8tion/trig8.h **** static const uint8_t b_m16_interleave[8] = { 0, 49, 49, 41, 90, 27, 117, 10 };
 151:./lib/lib8tion/trig8.h **** 
 152:./lib/lib8tion/trig8.h **** /// Fast 8-bit approximation of sin(x). This approximation never varies more than
 153:./lib/lib8tion/trig8.h **** /// 2% from the floating point value you'd get by doing
 154:./lib/lib8tion/trig8.h **** ///
 155:./lib/lib8tion/trig8.h **** ///     float s = (sin(x) * 128.0) + 128;
 156:./lib/lib8tion/trig8.h **** ///
 157:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-255
 158:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between 0 and 255
 159:./lib/lib8tion/trig8.h **** LIB8STATIC uint8_t  sin8_avr( uint8_t theta)
 160:./lib/lib8tion/trig8.h **** {
 161:./lib/lib8tion/trig8.h ****     uint8_t offset = theta;
 162:./lib/lib8tion/trig8.h **** 
 163:./lib/lib8tion/trig8.h ****     asm volatile(
 164:./lib/lib8tion/trig8.h ****                  "sbrc %[theta],6         \n\t"
 165:./lib/lib8tion/trig8.h ****                  "com  %[offset]           \n\t"
 166:./lib/lib8tion/trig8.h ****                  : [theta] "+r" (theta), [offset] "+r" (offset)
 167:./lib/lib8tion/trig8.h ****                  );
 168:./lib/lib8tion/trig8.h **** 
 169:./lib/lib8tion/trig8.h ****     offset &= 0x3F; // 0..63
 170:./lib/lib8tion/trig8.h **** 
 171:./lib/lib8tion/trig8.h ****     uint8_t secoffset  = offset & 0x0F; // 0..15
 172:./lib/lib8tion/trig8.h ****     if( theta & 0x40) secoffset++;
 173:./lib/lib8tion/trig8.h **** 
 174:./lib/lib8tion/trig8.h ****     uint8_t m16; uint8_t b;
 175:./lib/lib8tion/trig8.h **** 
 176:./lib/lib8tion/trig8.h ****     uint8_t section = offset >> 4; // 0..3
 177:./lib/lib8tion/trig8.h ****     uint8_t s2 = section * 2;
 178:./lib/lib8tion/trig8.h **** 
 179:./lib/lib8tion/trig8.h ****     const uint8_t* p = b_m16_interleave;
 180:./lib/lib8tion/trig8.h ****     p += s2;
 181:./lib/lib8tion/trig8.h ****     b   = *p;
 182:./lib/lib8tion/trig8.h ****     p++;
 183:./lib/lib8tion/trig8.h ****     m16 = *p;
 184:./lib/lib8tion/trig8.h **** 
 185:./lib/lib8tion/trig8.h ****     uint8_t mx;
 186:./lib/lib8tion/trig8.h ****     uint8_t xr1;
 187:./lib/lib8tion/trig8.h ****     asm volatile(
 188:./lib/lib8tion/trig8.h ****                  "mul %[m16],%[secoffset]   \n\t"
 189:./lib/lib8tion/trig8.h ****                  "mov %[mx],r0              \n\t"
 190:./lib/lib8tion/trig8.h ****                  "mov %[xr1],r1             \n\t"
 191:./lib/lib8tion/trig8.h ****                  "eor  r1, r1               \n\t"
 192:./lib/lib8tion/trig8.h ****                  "swap %[mx]                \n\t"
 193:./lib/lib8tion/trig8.h ****                  "andi %[mx],0x0F           \n\t"
 194:./lib/lib8tion/trig8.h ****                  "swap %[xr1]               \n\t"
 195:./lib/lib8tion/trig8.h ****                  "andi %[xr1], 0xF0         \n\t"
 196:./lib/lib8tion/trig8.h ****                  "or   %[mx], %[xr1]        \n\t"
 197:./lib/lib8tion/trig8.h ****                  : [mx] "=d" (mx), [xr1] "=d" (xr1)
 198:./lib/lib8tion/trig8.h ****                  : [m16] "d" (m16), [secoffset] "d" (secoffset)
 199:./lib/lib8tion/trig8.h ****                  );
 200:./lib/lib8tion/trig8.h **** 
 201:./lib/lib8tion/trig8.h ****     int8_t y = mx + b;
 202:./lib/lib8tion/trig8.h ****     if( theta & 0x80 ) y = -y;
 203:./lib/lib8tion/trig8.h **** 
 204:./lib/lib8tion/trig8.h ****     y += 128;
 205:./lib/lib8tion/trig8.h **** 
 206:./lib/lib8tion/trig8.h ****     return y;
 207:./lib/lib8tion/trig8.h **** }
 208:./lib/lib8tion/trig8.h **** 
 209:./lib/lib8tion/trig8.h **** 
 210:./lib/lib8tion/trig8.h **** /// Fast 8-bit approximation of sin(x). This approximation never varies more than
 211:./lib/lib8tion/trig8.h **** /// 2% from the floating point value you'd get by doing
 212:./lib/lib8tion/trig8.h **** ///
 213:./lib/lib8tion/trig8.h **** ///     float s = (sin(x) * 128.0) + 128;
 214:./lib/lib8tion/trig8.h **** ///
 215:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-255
 216:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between 0 and 255
 217:./lib/lib8tion/trig8.h **** LIB8STATIC uint8_t sin8_C( uint8_t theta)
 218:./lib/lib8tion/trig8.h **** {
  27              		.loc 1 218 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
 219:./lib/lib8tion/trig8.h ****     uint8_t offset = theta;
 220:./lib/lib8tion/trig8.h ****     if( theta & 0x40 ) {
  32              		.loc 1 220 0
  33 0000 10F04002 		ands	r2, r0, #64
 221:./lib/lib8tion/trig8.h ****         offset = (uint8_t)255 - offset;
  34              		.loc 1 221 0
  35 0004 1ABF     		itte	ne
  36 0006 C343     		mvnne	r3, r0
  37 0008 DBB2     		uxtbne	r3, r3
  38              	.LVL1:
  39 000a 0346     		moveq	r3, r0
  40              	.LVL2:
 218:./lib/lib8tion/trig8.h ****     uint8_t offset = theta;
  41              		.loc 1 218 0
  42 000c 10B5     		push	{r4, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 4, -8
  45              		.cfi_offset 14, -4
 222:./lib/lib8tion/trig8.h ****     }
 223:./lib/lib8tion/trig8.h ****     offset &= 0x3F; // 0..63
 224:./lib/lib8tion/trig8.h **** 
 225:./lib/lib8tion/trig8.h ****     uint8_t secoffset  = offset & 0x0F; // 0..15
  46              		.loc 1 225 0
  47 000e 03F00F01 		and	r1, r3, #15
  48              	.LVL3:
 226:./lib/lib8tion/trig8.h ****     if( theta & 0x40) secoffset++;
  49              		.loc 1 226 0
  50 0012 02B1     		cbz	r2, .L3
  51              		.loc 1 226 0 is_stmt 0 discriminator 1
  52 0014 0131     		adds	r1, r1, #1
  53              	.LVL4:
  54              	.L3:
 227:./lib/lib8tion/trig8.h **** 
 228:./lib/lib8tion/trig8.h ****     uint8_t section = offset >> 4; // 0..3
 229:./lib/lib8tion/trig8.h ****     uint8_t s2 = section * 2;
 230:./lib/lib8tion/trig8.h ****     const uint8_t* p = b_m16_interleave;
 231:./lib/lib8tion/trig8.h ****     p += s2;
  55              		.loc 1 231 0 is_stmt 1
  56 0016 094C     		ldr	r4, .L9
 228:./lib/lib8tion/trig8.h ****     uint8_t s2 = section * 2;
  57              		.loc 1 228 0
  58 0018 C3F30113 		ubfx	r3, r3, #4, #2
  59              	.LVL5:
  60              		.loc 1 231 0
  61 001c 5B00     		lsls	r3, r3, #1
  62 001e E218     		adds	r2, r4, r3
  63              	.LVL6:
 232:./lib/lib8tion/trig8.h ****     uint8_t b   =  *p;
 233:./lib/lib8tion/trig8.h ****     p++;
 234:./lib/lib8tion/trig8.h ****     uint8_t m16 =  *p;
 235:./lib/lib8tion/trig8.h **** 
 236:./lib/lib8tion/trig8.h ****     uint8_t mx = (m16 * secoffset) >> 4;
 237:./lib/lib8tion/trig8.h **** 
 238:./lib/lib8tion/trig8.h ****     int8_t y = mx + b;
  64              		.loc 1 238 0
  65 0020 E35C     		ldrb	r3, [r4, r3]	@ zero_extendqisi2
 236:./lib/lib8tion/trig8.h **** 
  66              		.loc 1 236 0
  67 0022 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
  68              	.LVL7:
  69 0024 12FB01F2 		smulbb	r2, r2, r1
  70              	.LVL8:
  71              		.loc 1 238 0
  72 0028 03EB2213 		add	r3, r3, r2, asr #4
  73              	.LVL9:
  74 002c DBB2     		uxtb	r3, r3
  75              	.LVL10:
 239:./lib/lib8tion/trig8.h ****     if( theta & 0x80 ) y = -y;
  76              		.loc 1 239 0
  77 002e 0206     		lsls	r2, r0, #24
  78 0030 44BF     		itt	mi
  79 0032 5B42     		rsbmi	r3, r3, #0
  80              	.LVL11:
  81 0034 DBB2     		uxtbmi	r3, r3
  82              	.LVL12:
 240:./lib/lib8tion/trig8.h **** 
 241:./lib/lib8tion/trig8.h ****     y += 128;
 242:./lib/lib8tion/trig8.h **** 
 243:./lib/lib8tion/trig8.h ****     return y;
 244:./lib/lib8tion/trig8.h **** }
  83              		.loc 1 244 0
  84 0036 83F08000 		eor	r0, r3, #128
  85              	.LVL13:
  86 003a 10BD     		pop	{r4, pc}
  87              	.L10:
  88              		.align	2
  89              	.L9:
  90 003c 00000000 		.word	.LANCHOR0
  91              		.cfi_endproc
  92              	.LFE52:
  94              		.section	.text.BAND_SAT_math,"ax",%progbits
  95              		.align	1
  96              		.syntax unified
  97              		.thumb
  98              		.thumb_func
  99              		.fpu fpv4-sp-d16
 101              	BAND_SAT_math:
 102              	.LFB90:
 103              		.file 2 "quantum/rgb_matrix_animations/colorband_sat_anim.h"
   1:quantum/rgb_matrix_animations/colorband_sat_anim.h **** #ifndef DISABLE_RGB_MATRIX_BAND_SAT
   2:quantum/rgb_matrix_animations/colorband_sat_anim.h **** RGB_MATRIX_EFFECT(BAND_SAT)
   3:quantum/rgb_matrix_animations/colorband_sat_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/colorband_sat_anim.h **** 
   5:quantum/rgb_matrix_animations/colorband_sat_anim.h **** static HSV BAND_SAT_math(HSV hsv, uint8_t i, uint8_t time) {
 104              		.loc 2 5 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 16
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              	.LVL14:
 109 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 110              		.cfi_def_cfa_offset 24
 111              		.cfi_offset 4, -8
 112              		.cfi_offset 14, -4
   6:quantum/rgb_matrix_animations/colorband_sat_anim.h ****     int16_t s = hsv.s - abs(scale8(g_led_config.point[i].x, 228) + 28 - time) * 8;
 113              		.loc 2 6 0
 114 0002 154B     		ldr	r3, .L12
   5:quantum/rgb_matrix_animations/colorband_sat_anim.h ****     int16_t s = hsv.s - abs(scale8(g_led_config.point[i].x, 228) + 28 - time) * 8;
 115              		.loc 2 5 0
 116 0004 0190     		str	r0, [sp, #4]
 117              		.loc 2 6 0
 118 0006 03EB4101 		add	r1, r3, r1, lsl #1
 119              	.LVL15:
 120 000a C0F30724 		ubfx	r4, r0, #8, #8
 121              	.LVL16:
 122              	.LBB111:
 123              	.LBB112:
 124              		.file 3 "./lib/lib8tion/scale8.h"
   1:./lib/lib8tion/scale8.h **** #ifndef __INC_LIB8TION_SCALE_H
   2:./lib/lib8tion/scale8.h **** #define __INC_LIB8TION_SCALE_H
   3:./lib/lib8tion/scale8.h **** 
   4:./lib/lib8tion/scale8.h **** ///@ingroup lib8tion
   5:./lib/lib8tion/scale8.h **** 
   6:./lib/lib8tion/scale8.h **** ///@defgroup Scaling Scaling functions
   7:./lib/lib8tion/scale8.h **** /// Fast, efficient 8-bit scaling functions specifically
   8:./lib/lib8tion/scale8.h **** /// designed for high-performance LED programming.
   9:./lib/lib8tion/scale8.h **** ///
  10:./lib/lib8tion/scale8.h **** /// Because of the AVR(Arduino) and ARM assembly language
  11:./lib/lib8tion/scale8.h **** /// implementations provided, using these functions often
  12:./lib/lib8tion/scale8.h **** /// results in smaller and faster code than the equivalent
  13:./lib/lib8tion/scale8.h **** /// program using plain "C" arithmetic and logic.
  14:./lib/lib8tion/scale8.h **** ///@{
  15:./lib/lib8tion/scale8.h **** 
  16:./lib/lib8tion/scale8.h **** ///  scale one byte by a second one, which is treated as
  17:./lib/lib8tion/scale8.h **** ///  the numerator of a fraction whose denominator is 256
  18:./lib/lib8tion/scale8.h **** ///  In other words, it computes i * (scale / 256)
  19:./lib/lib8tion/scale8.h **** ///  4 clocks AVR with MUL, 2 clocks ARM
  20:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
  21:./lib/lib8tion/scale8.h **** {
  22:./lib/lib8tion/scale8.h **** #if SCALE8_C == 1
  23:./lib/lib8tion/scale8.h **** #if (FASTLED_SCALE8_FIXED == 1)
  24:./lib/lib8tion/scale8.h ****     return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
  25:./lib/lib8tion/scale8.h **** #else
  26:./lib/lib8tion/scale8.h ****     return ((uint16_t)i * (uint16_t)(scale) ) >> 8;
 125              		.loc 3 26 0
 126 000e 91F84B30 		ldrb	r3, [r1, #75]	@ zero_extendqisi2
 127 0012 E421     		movs	r1, #228
 128 0014 13FB01F3 		smulbb	r3, r3, r1
 129              	.LBE112:
 130              	.LBE111:
 131              		.loc 2 6 0
 132 0018 C2EB1322 		rsb	r2, r2, r3, lsr #8
 133              	.LVL17:
 134 001c 02F11C00 		add	r0, r2, #28
 135 0020 0028     		cmp	r0, #0
 136 0022 B8BF     		it	lt
 137 0024 4042     		rsblt	r0, r0, #0
 138 0026 A4EBC000 		sub	r0, r4, r0, lsl #3
   7:quantum/rgb_matrix_animations/colorband_sat_anim.h ****     hsv.s     = scale8(s < 0 ? 0 : s, hsv.s);
 139              		.loc 2 7 0
 140 002a 00B2     		sxth	r0, r0
 141 002c 20EAE070 		bic	r0, r0, r0, asr #31
 142              	.LBB113:
 143              	.LBB114:
 144              		.loc 3 26 0
 145 0030 10FB04F0 		smulbb	r0, r0, r4
 146 0034 0012     		asrs	r0, r0, #8
 147 0036 8DF80500 		strb	r0, [sp, #5]
 148              	.LBE114:
 149              	.LBE113:
   8:quantum/rgb_matrix_animations/colorband_sat_anim.h ****     return hsv;
 150              		.loc 2 8 0
 151 003a 019B     		ldr	r3, [sp, #4]
 152 003c 0020     		movs	r0, #0
 153 003e DAB2     		uxtb	r2, r3
 154 0040 62F30700 		bfi	r0, r2, #0, #8
 155 0044 C3F30722 		ubfx	r2, r3, #8, #8
 156 0048 62F30F20 		bfi	r0, r2, #8, #8
 157 004c C3F30743 		ubfx	r3, r3, #16, #8
 158 0050 63F31740 		bfi	r0, r3, #16, #8
   9:quantum/rgb_matrix_animations/colorband_sat_anim.h **** }
 159              		.loc 2 9 0
 160 0054 04B0     		add	sp, sp, #16
 161              		.cfi_def_cfa_offset 8
 162              		@ sp needed
 163 0056 10BD     		pop	{r4, pc}
 164              	.L13:
 165              		.align	2
 166              	.L12:
 167 0058 00000000 		.word	g_led_config
 168              		.cfi_endproc
 169              	.LFE90:
 171              		.section	.text.BAND_VAL_math,"ax",%progbits
 172              		.align	1
 173              		.syntax unified
 174              		.thumb
 175              		.thumb_func
 176              		.fpu fpv4-sp-d16
 178              	BAND_VAL_math:
 179              	.LFB92:
 180              		.file 4 "quantum/rgb_matrix_animations/colorband_val_anim.h"
   1:quantum/rgb_matrix_animations/colorband_val_anim.h **** #ifndef DISABLE_RGB_MATRIX_BAND_VAL
   2:quantum/rgb_matrix_animations/colorband_val_anim.h **** RGB_MATRIX_EFFECT(BAND_VAL)
   3:quantum/rgb_matrix_animations/colorband_val_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/colorband_val_anim.h **** 
   5:quantum/rgb_matrix_animations/colorband_val_anim.h **** static HSV BAND_VAL_math(HSV hsv, uint8_t i, uint8_t time) {
 181              		.loc 4 5 0
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 16
 184              		@ frame_needed = 0, uses_anonymous_args = 0
 185              	.LVL18:
 186 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 187              		.cfi_def_cfa_offset 24
 188              		.cfi_offset 4, -8
 189              		.cfi_offset 14, -4
   6:quantum/rgb_matrix_animations/colorband_val_anim.h ****     int16_t v = hsv.v - abs(scale8(g_led_config.point[i].x, 228) + 28 - time) * 8;
 190              		.loc 4 6 0
 191 0002 154B     		ldr	r3, .L15
   5:quantum/rgb_matrix_animations/colorband_val_anim.h ****     int16_t v = hsv.v - abs(scale8(g_led_config.point[i].x, 228) + 28 - time) * 8;
 192              		.loc 4 5 0
 193 0004 0190     		str	r0, [sp, #4]
 194              		.loc 4 6 0
 195 0006 03EB4101 		add	r1, r3, r1, lsl #1
 196              	.LVL19:
 197 000a C0F30744 		ubfx	r4, r0, #16, #8
 198              	.LVL20:
 199              	.LBB115:
 200              	.LBB116:
 201              		.loc 3 26 0
 202 000e 91F84B30 		ldrb	r3, [r1, #75]	@ zero_extendqisi2
 203 0012 E421     		movs	r1, #228
 204 0014 13FB01F3 		smulbb	r3, r3, r1
 205              	.LBE116:
 206              	.LBE115:
 207              		.loc 4 6 0
 208 0018 C2EB1322 		rsb	r2, r2, r3, lsr #8
 209              	.LVL21:
 210 001c 02F11C00 		add	r0, r2, #28
 211 0020 0028     		cmp	r0, #0
 212 0022 B8BF     		it	lt
 213 0024 4042     		rsblt	r0, r0, #0
 214 0026 A4EBC000 		sub	r0, r4, r0, lsl #3
   7:quantum/rgb_matrix_animations/colorband_val_anim.h ****     hsv.v     = scale8(v < 0 ? 0 : v, hsv.v);
 215              		.loc 4 7 0
 216 002a 00B2     		sxth	r0, r0
 217 002c 20EAE070 		bic	r0, r0, r0, asr #31
 218              	.LBB117:
 219              	.LBB118:
 220              		.loc 3 26 0
 221 0030 10FB04F0 		smulbb	r0, r0, r4
 222 0034 0012     		asrs	r0, r0, #8
 223 0036 8DF80600 		strb	r0, [sp, #6]
 224              	.LBE118:
 225              	.LBE117:
   8:quantum/rgb_matrix_animations/colorband_val_anim.h ****     return hsv;
 226              		.loc 4 8 0
 227 003a 019B     		ldr	r3, [sp, #4]
 228 003c 0020     		movs	r0, #0
 229 003e DAB2     		uxtb	r2, r3
 230 0040 62F30700 		bfi	r0, r2, #0, #8
 231 0044 C3F30722 		ubfx	r2, r3, #8, #8
 232 0048 62F30F20 		bfi	r0, r2, #8, #8
 233 004c C3F30743 		ubfx	r3, r3, #16, #8
 234 0050 63F31740 		bfi	r0, r3, #16, #8
   9:quantum/rgb_matrix_animations/colorband_val_anim.h **** }
 235              		.loc 4 9 0
 236 0054 04B0     		add	sp, sp, #16
 237              		.cfi_def_cfa_offset 8
 238              		@ sp needed
 239 0056 10BD     		pop	{r4, pc}
 240              	.L16:
 241              		.align	2
 242              	.L15:
 243 0058 00000000 		.word	g_led_config
 244              		.cfi_endproc
 245              	.LFE92:
 247              		.section	.text.CYCLE_ALL_math,"ax",%progbits
 248              		.align	1
 249              		.syntax unified
 250              		.thumb
 251              		.thumb_func
 252              		.fpu fpv4-sp-d16
 254              	CYCLE_ALL_math:
 255              	.LFB102:
 256              		.file 5 "quantum/rgb_matrix_animations/cycle_all_anim.h"
   1:quantum/rgb_matrix_animations/cycle_all_anim.h **** #ifndef DISABLE_RGB_MATRIX_CYCLE_ALL
   2:quantum/rgb_matrix_animations/cycle_all_anim.h **** RGB_MATRIX_EFFECT(CYCLE_ALL)
   3:quantum/rgb_matrix_animations/cycle_all_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/cycle_all_anim.h **** 
   5:quantum/rgb_matrix_animations/cycle_all_anim.h **** static HSV CYCLE_ALL_math(HSV hsv, uint8_t i, uint8_t time) {
 257              		.loc 5 5 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 16
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              		@ link register save eliminated.
 262              	.LVL22:
 263 0000 84B0     		sub	sp, sp, #16
 264              		.cfi_def_cfa_offset 16
 265              	.LVL23:
 266              		.loc 5 5 0
 267 0002 0190     		str	r0, [sp, #4]
   6:quantum/rgb_matrix_animations/cycle_all_anim.h ****     hsv.h = time;
   7:quantum/rgb_matrix_animations/cycle_all_anim.h ****     return hsv;
 268              		.loc 5 7 0
 269 0004 8DF80420 		strb	r2, [sp, #4]
 270 0008 019B     		ldr	r3, [sp, #4]
 271 000a 0020     		movs	r0, #0
 272 000c DAB2     		uxtb	r2, r3
 273              	.LVL24:
 274 000e 62F30700 		bfi	r0, r2, #0, #8
 275 0012 C3F30722 		ubfx	r2, r3, #8, #8
 276 0016 62F30F20 		bfi	r0, r2, #8, #8
 277 001a C3F30743 		ubfx	r3, r3, #16, #8
 278 001e 63F31740 		bfi	r0, r3, #16, #8
   8:quantum/rgb_matrix_animations/cycle_all_anim.h **** }
 279              		.loc 5 8 0
 280 0022 04B0     		add	sp, sp, #16
 281              		.cfi_def_cfa_offset 0
 282              	.LVL25:
 283              		@ sp needed
 284 0024 7047     		bx	lr
 285              		.cfi_endproc
 286              	.LFE102:
 288              		.section	.text.CYCLE_LEFT_RIGHT_math,"ax",%progbits
 289              		.align	1
 290              		.syntax unified
 291              		.thumb
 292              		.thumb_func
 293              		.fpu fpv4-sp-d16
 295              	CYCLE_LEFT_RIGHT_math:
 296              	.LFB104:
 297              		.file 6 "quantum/rgb_matrix_animations/cycle_left_right_anim.h"
   1:quantum/rgb_matrix_animations/cycle_left_right_anim.h **** #ifndef DISABLE_RGB_MATRIX_CYCLE_LEFT_RIGHT
   2:quantum/rgb_matrix_animations/cycle_left_right_anim.h **** RGB_MATRIX_EFFECT(CYCLE_LEFT_RIGHT)
   3:quantum/rgb_matrix_animations/cycle_left_right_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/cycle_left_right_anim.h **** 
   5:quantum/rgb_matrix_animations/cycle_left_right_anim.h **** static HSV CYCLE_LEFT_RIGHT_math(HSV hsv, uint8_t i, uint8_t time) {
 298              		.loc 6 5 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 16
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302              		@ link register save eliminated.
 303              	.LVL26:
   6:quantum/rgb_matrix_animations/cycle_left_right_anim.h ****     hsv.h = g_led_config.point[i].x - time;
 304              		.loc 6 6 0
 305 0000 0C4B     		ldr	r3, .L19
   5:quantum/rgb_matrix_animations/cycle_left_right_anim.h ****     hsv.h = g_led_config.point[i].x - time;
 306              		.loc 6 5 0
 307 0002 84B0     		sub	sp, sp, #16
 308              		.cfi_def_cfa_offset 16
 309              	.LVL27:
 310              		.loc 6 6 0
 311 0004 03EB4101 		add	r1, r3, r1, lsl #1
 312              	.LVL28:
   5:quantum/rgb_matrix_animations/cycle_left_right_anim.h ****     hsv.h = g_led_config.point[i].x - time;
 313              		.loc 6 5 0
 314 0008 0190     		str	r0, [sp, #4]
 315              		.loc 6 6 0
 316 000a 91F84B30 		ldrb	r3, [r1, #75]	@ zero_extendqisi2
 317 000e 9A1A     		subs	r2, r3, r2
 318              	.LVL29:
   7:quantum/rgb_matrix_animations/cycle_left_right_anim.h ****     return hsv;
 319              		.loc 6 7 0
 320 0010 8DF80420 		strb	r2, [sp, #4]
 321 0014 019B     		ldr	r3, [sp, #4]
 322 0016 0020     		movs	r0, #0
 323 0018 DAB2     		uxtb	r2, r3
 324 001a 62F30700 		bfi	r0, r2, #0, #8
 325 001e C3F30722 		ubfx	r2, r3, #8, #8
 326 0022 62F30F20 		bfi	r0, r2, #8, #8
 327 0026 C3F30743 		ubfx	r3, r3, #16, #8
 328 002a 63F31740 		bfi	r0, r3, #16, #8
   8:quantum/rgb_matrix_animations/cycle_left_right_anim.h **** }
 329              		.loc 6 8 0
 330 002e 04B0     		add	sp, sp, #16
 331              		.cfi_def_cfa_offset 0
 332              		@ sp needed
 333 0030 7047     		bx	lr
 334              	.L20:
 335 0032 00BF     		.align	2
 336              	.L19:
 337 0034 00000000 		.word	g_led_config
 338              		.cfi_endproc
 339              	.LFE104:
 341              		.section	.text.CYCLE_UP_DOWN_math,"ax",%progbits
 342              		.align	1
 343              		.syntax unified
 344              		.thumb
 345              		.thumb_func
 346              		.fpu fpv4-sp-d16
 348              	CYCLE_UP_DOWN_math:
 349              	.LFB106:
 350              		.file 7 "quantum/rgb_matrix_animations/cycle_up_down_anim.h"
   1:quantum/rgb_matrix_animations/cycle_up_down_anim.h **** #ifndef DISABLE_RGB_MATRIX_CYCLE_UP_DOWN
   2:quantum/rgb_matrix_animations/cycle_up_down_anim.h **** RGB_MATRIX_EFFECT(CYCLE_UP_DOWN)
   3:quantum/rgb_matrix_animations/cycle_up_down_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/cycle_up_down_anim.h **** 
   5:quantum/rgb_matrix_animations/cycle_up_down_anim.h **** static HSV CYCLE_UP_DOWN_math(HSV hsv, uint8_t i, uint8_t time) {
 351              		.loc 7 5 0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 16
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 355              		@ link register save eliminated.
 356              	.LVL30:
   6:quantum/rgb_matrix_animations/cycle_up_down_anim.h ****     hsv.h = g_led_config.point[i].y - time;
 357              		.loc 7 6 0
 358 0000 0C4B     		ldr	r3, .L22
   5:quantum/rgb_matrix_animations/cycle_up_down_anim.h ****     hsv.h = g_led_config.point[i].y - time;
 359              		.loc 7 5 0
 360 0002 84B0     		sub	sp, sp, #16
 361              		.cfi_def_cfa_offset 16
 362              	.LVL31:
 363              		.loc 7 6 0
 364 0004 03EB4101 		add	r1, r3, r1, lsl #1
 365              	.LVL32:
   5:quantum/rgb_matrix_animations/cycle_up_down_anim.h ****     hsv.h = g_led_config.point[i].y - time;
 366              		.loc 7 5 0
 367 0008 0190     		str	r0, [sp, #4]
 368              		.loc 7 6 0
 369 000a 91F84C30 		ldrb	r3, [r1, #76]	@ zero_extendqisi2
 370 000e 9A1A     		subs	r2, r3, r2
 371              	.LVL33:
   7:quantum/rgb_matrix_animations/cycle_up_down_anim.h ****     return hsv;
 372              		.loc 7 7 0
 373 0010 8DF80420 		strb	r2, [sp, #4]
 374 0014 019B     		ldr	r3, [sp, #4]
 375 0016 0020     		movs	r0, #0
 376 0018 DAB2     		uxtb	r2, r3
 377 001a 62F30700 		bfi	r0, r2, #0, #8
 378 001e C3F30722 		ubfx	r2, r3, #8, #8
 379 0022 62F30F20 		bfi	r0, r2, #8, #8
 380 0026 C3F30743 		ubfx	r3, r3, #16, #8
 381 002a 63F31740 		bfi	r0, r3, #16, #8
   8:quantum/rgb_matrix_animations/cycle_up_down_anim.h **** }
 382              		.loc 7 8 0
 383 002e 04B0     		add	sp, sp, #16
 384              		.cfi_def_cfa_offset 0
 385              		@ sp needed
 386 0030 7047     		bx	lr
 387              	.L23:
 388 0032 00BF     		.align	2
 389              	.L22:
 390 0034 00000000 		.word	g_led_config
 391              		.cfi_endproc
 392              	.LFE106:
 394              		.section	.text.RAINBOW_MOVING_CHEVRON_math,"ax",%progbits
 395              		.align	1
 396              		.syntax unified
 397              		.thumb
 398              		.thumb_func
 399              		.fpu fpv4-sp-d16
 401              	RAINBOW_MOVING_CHEVRON_math:
 402              	.LFB108:
 403              		.file 8 "quantum/rgb_matrix_animations/rainbow_moving_chevron_anim.h"
   1:quantum/rgb_matrix_animations/rainbow_moving_chevron_anim.h **** #ifndef DISABLE_RGB_MATRIX_RAINBOW_MOVING_CHEVRON
   2:quantum/rgb_matrix_animations/rainbow_moving_chevron_anim.h **** RGB_MATRIX_EFFECT(RAINBOW_MOVING_CHEVRON)
   3:quantum/rgb_matrix_animations/rainbow_moving_chevron_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/rainbow_moving_chevron_anim.h **** 
   5:quantum/rgb_matrix_animations/rainbow_moving_chevron_anim.h **** static HSV RAINBOW_MOVING_CHEVRON_math(HSV hsv, uint8_t i, uint8_t time) {
 404              		.loc 8 5 0
 405              		.cfi_startproc
 406              		@ args = 0, pretend = 0, frame = 16
 407              		@ frame_needed = 0, uses_anonymous_args = 0
 408              	.LVL34:
 409 0000 30B5     		push	{r4, r5, lr}
 410              		.cfi_def_cfa_offset 12
 411              		.cfi_offset 4, -12
 412              		.cfi_offset 5, -8
 413              		.cfi_offset 14, -4
   6:quantum/rgb_matrix_animations/rainbow_moving_chevron_anim.h ****     hsv.h += abs8(g_led_config.point[i].y - k_rgb_matrix_center.y) + (g_led_config.point[i].x - tim
 414              		.loc 8 6 0
 415 0002 134B     		ldr	r3, .L26
   5:quantum/rgb_matrix_animations/rainbow_moving_chevron_anim.h ****     hsv.h += abs8(g_led_config.point[i].y - k_rgb_matrix_center.y) + (g_led_config.point[i].x - tim
 416              		.loc 8 5 0
 417 0004 85B0     		sub	sp, sp, #20
 418              		.cfi_def_cfa_offset 32
 419              		.loc 8 6 0
 420 0006 2431     		adds	r1, r1, #36
 421              	.LVL35:
 422 0008 03EB4104 		add	r4, r3, r1, lsl #1
   5:quantum/rgb_matrix_animations/rainbow_moving_chevron_anim.h ****     hsv.h += abs8(g_led_config.point[i].y - k_rgb_matrix_center.y) + (g_led_config.point[i].x - tim
 423              		.loc 8 5 0
 424 000c 0190     		str	r0, [sp, #4]
 425              		.loc 8 6 0
 426 000e 2579     		ldrb	r5, [r4, #4]	@ zero_extendqisi2
 427 0010 03EB4103 		add	r3, r3, r1, lsl #1
 428 0014 A5F12004 		sub	r4, r5, #32
 429 0018 64B2     		sxtb	r4, r4
 430              	.LBB119:
 431              	.LBB120:
 432              		.file 9 "./lib/lib8tion/math8.h"
   1:./lib/lib8tion/math8.h **** #ifndef __INC_LIB8TION_MATH_H
   2:./lib/lib8tion/math8.h **** #define __INC_LIB8TION_MATH_H
   3:./lib/lib8tion/math8.h **** 
   4:./lib/lib8tion/math8.h **** #include "scale8.h"
   5:./lib/lib8tion/math8.h **** 
   6:./lib/lib8tion/math8.h **** ///@ingroup lib8tion
   7:./lib/lib8tion/math8.h **** 
   8:./lib/lib8tion/math8.h **** ///@defgroup Math Basic math operations
   9:./lib/lib8tion/math8.h **** /// Fast, efficient 8-bit math functions specifically
  10:./lib/lib8tion/math8.h **** /// designed for high-performance LED programming.
  11:./lib/lib8tion/math8.h **** ///
  12:./lib/lib8tion/math8.h **** /// Because of the AVR(Arduino) and ARM assembly language
  13:./lib/lib8tion/math8.h **** /// implementations provided, using these functions often
  14:./lib/lib8tion/math8.h **** /// results in smaller and faster code than the equivalent
  15:./lib/lib8tion/math8.h **** /// program using plain "C" arithmetic and logic.
  16:./lib/lib8tion/math8.h **** ///@{
  17:./lib/lib8tion/math8.h **** 
  18:./lib/lib8tion/math8.h **** 
  19:./lib/lib8tion/math8.h **** /// add one byte to another, saturating at 0xFF
  20:./lib/lib8tion/math8.h **** /// @param i - first byte to add
  21:./lib/lib8tion/math8.h **** /// @param j - second byte to add
  22:./lib/lib8tion/math8.h **** /// @returns the sum of i & j, capped at 0xFF
  23:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
  24:./lib/lib8tion/math8.h **** {
  25:./lib/lib8tion/math8.h **** #if QADD8_C == 1
  26:./lib/lib8tion/math8.h ****     uint16_t t = i + j;
  27:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
  28:./lib/lib8tion/math8.h ****     return t;
  29:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
  30:./lib/lib8tion/math8.h ****     asm volatile(
  31:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the C flag */
  32:./lib/lib8tion/math8.h ****          "add %0, %1    \n\t"
  33:./lib/lib8tion/math8.h **** 
  34:./lib/lib8tion/math8.h ****          /* Now test the C flag.
  35:./lib/lib8tion/math8.h ****            If C is clear, we branch around a load of 0xFF into i.
  36:./lib/lib8tion/math8.h ****            If C is set, we go ahead and load 0xFF into i.
  37:./lib/lib8tion/math8.h ****          */
  38:./lib/lib8tion/math8.h ****          "brcc L_%=     \n\t"
  39:./lib/lib8tion/math8.h ****          "ldi %0, 0xFF  \n\t"
  40:./lib/lib8tion/math8.h ****          "L_%=: "
  41:./lib/lib8tion/math8.h ****          : "+a" (i)
  42:./lib/lib8tion/math8.h ****          : "a"  (j) );
  43:./lib/lib8tion/math8.h ****     return i;
  44:./lib/lib8tion/math8.h **** #elif QADD8_ARM_DSP_ASM == 1
  45:./lib/lib8tion/math8.h ****     asm volatile( "uqadd8 %0, %0, %1" : "+r" (i) : "r" (j));
  46:./lib/lib8tion/math8.h ****     return i;
  47:./lib/lib8tion/math8.h **** #else
  48:./lib/lib8tion/math8.h **** #error "No implementation for qadd8 available."
  49:./lib/lib8tion/math8.h **** #endif
  50:./lib/lib8tion/math8.h **** }
  51:./lib/lib8tion/math8.h **** 
  52:./lib/lib8tion/math8.h **** /// Add one byte to another, saturating at 0x7F
  53:./lib/lib8tion/math8.h **** /// @param i - first byte to add
  54:./lib/lib8tion/math8.h **** /// @param j - second byte to add
  55:./lib/lib8tion/math8.h **** /// @returns the sum of i & j, capped at 0xFF
  56:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE int8_t qadd7( int8_t i, int8_t j)
  57:./lib/lib8tion/math8.h **** {
  58:./lib/lib8tion/math8.h **** #if QADD7_C == 1
  59:./lib/lib8tion/math8.h ****     int16_t t = i + j;
  60:./lib/lib8tion/math8.h ****     if (t > 127) t = 127;
  61:./lib/lib8tion/math8.h ****     return t;
  62:./lib/lib8tion/math8.h **** #elif QADD7_AVRASM == 1
  63:./lib/lib8tion/math8.h ****     asm volatile(
  64:./lib/lib8tion/math8.h ****          /* First, add j to i, conditioning the V flag */
  65:./lib/lib8tion/math8.h ****          "add %0, %1    \n\t"
  66:./lib/lib8tion/math8.h **** 
  67:./lib/lib8tion/math8.h ****          /* Now test the V flag.
  68:./lib/lib8tion/math8.h ****           If V is clear, we branch around a load of 0x7F into i.
  69:./lib/lib8tion/math8.h ****           If V is set, we go ahead and load 0x7F into i.
  70:./lib/lib8tion/math8.h ****           */
  71:./lib/lib8tion/math8.h ****          "brvc L_%=     \n\t"
  72:./lib/lib8tion/math8.h ****          "ldi %0, 0x7F  \n\t"
  73:./lib/lib8tion/math8.h ****          "L_%=: "
  74:./lib/lib8tion/math8.h ****          : "+a" (i)
  75:./lib/lib8tion/math8.h ****          : "a"  (j) );
  76:./lib/lib8tion/math8.h **** 
  77:./lib/lib8tion/math8.h ****     return i;
  78:./lib/lib8tion/math8.h **** #elif QADD7_ARM_DSP_ASM == 1
  79:./lib/lib8tion/math8.h ****     asm volatile( "qadd8 %0, %0, %1" : "+r" (i) : "r" (j));
  80:./lib/lib8tion/math8.h ****     return i;
  81:./lib/lib8tion/math8.h **** #else
  82:./lib/lib8tion/math8.h **** #error "No implementation for qadd7 available."
  83:./lib/lib8tion/math8.h **** #endif
  84:./lib/lib8tion/math8.h **** }
  85:./lib/lib8tion/math8.h **** 
  86:./lib/lib8tion/math8.h **** /// subtract one byte from another, saturating at 0x00
  87:./lib/lib8tion/math8.h **** /// @returns i - j with a floor of 0
  88:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t qsub8( uint8_t i, uint8_t j)
  89:./lib/lib8tion/math8.h **** {
  90:./lib/lib8tion/math8.h **** #if QSUB8_C == 1
  91:./lib/lib8tion/math8.h ****     int16_t t = i - j;
  92:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
  93:./lib/lib8tion/math8.h ****     return t;
  94:./lib/lib8tion/math8.h **** #elif QSUB8_AVRASM == 1
  95:./lib/lib8tion/math8.h **** 
  96:./lib/lib8tion/math8.h ****     asm volatile(
  97:./lib/lib8tion/math8.h ****          /* First, subtract j from i, conditioning the C flag */
  98:./lib/lib8tion/math8.h ****          "sub %0, %1    \n\t"
  99:./lib/lib8tion/math8.h **** 
 100:./lib/lib8tion/math8.h ****          /* Now test the C flag.
 101:./lib/lib8tion/math8.h ****           If C is clear, we branch around a load of 0x00 into i.
 102:./lib/lib8tion/math8.h ****           If C is set, we go ahead and load 0x00 into i.
 103:./lib/lib8tion/math8.h ****           */
 104:./lib/lib8tion/math8.h ****          "brcc L_%=     \n\t"
 105:./lib/lib8tion/math8.h ****          "ldi %0, 0x00  \n\t"
 106:./lib/lib8tion/math8.h ****          "L_%=: "
 107:./lib/lib8tion/math8.h ****          : "+a" (i)
 108:./lib/lib8tion/math8.h ****          : "a"  (j) );
 109:./lib/lib8tion/math8.h **** 
 110:./lib/lib8tion/math8.h ****     return i;
 111:./lib/lib8tion/math8.h **** #else
 112:./lib/lib8tion/math8.h **** #error "No implementation for qsub8 available."
 113:./lib/lib8tion/math8.h **** #endif
 114:./lib/lib8tion/math8.h **** }
 115:./lib/lib8tion/math8.h **** 
 116:./lib/lib8tion/math8.h **** /// add one byte to another, with one byte result
 117:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t add8( uint8_t i, uint8_t j)
 118:./lib/lib8tion/math8.h **** {
 119:./lib/lib8tion/math8.h **** #if ADD8_C == 1
 120:./lib/lib8tion/math8.h ****     uint16_t t = i + j;
 121:./lib/lib8tion/math8.h ****     return t;
 122:./lib/lib8tion/math8.h **** #elif ADD8_AVRASM == 1
 123:./lib/lib8tion/math8.h ****     // Add j to i, period.
 124:./lib/lib8tion/math8.h ****     asm volatile( "add %0, %1" : "+a" (i) : "a" (j));
 125:./lib/lib8tion/math8.h ****     return i;
 126:./lib/lib8tion/math8.h **** #else
 127:./lib/lib8tion/math8.h **** #error "No implementation for add8 available."
 128:./lib/lib8tion/math8.h **** #endif
 129:./lib/lib8tion/math8.h **** }
 130:./lib/lib8tion/math8.h **** 
 131:./lib/lib8tion/math8.h **** /// add one byte to another, with one byte result
 132:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint16_t add8to16( uint8_t i, uint16_t j)
 133:./lib/lib8tion/math8.h **** {
 134:./lib/lib8tion/math8.h **** #if ADD8_C == 1
 135:./lib/lib8tion/math8.h ****     uint16_t t = i + j;
 136:./lib/lib8tion/math8.h ****     return t;
 137:./lib/lib8tion/math8.h **** #elif ADD8_AVRASM == 1
 138:./lib/lib8tion/math8.h ****     // Add i(one byte) to j(two bytes)
 139:./lib/lib8tion/math8.h ****     asm volatile( "add %A[j], %[i]              \n\t"
 140:./lib/lib8tion/math8.h ****                   "adc %B[j], __zero_reg__      \n\t"
 141:./lib/lib8tion/math8.h ****                  : [j] "+a" (j)
 142:./lib/lib8tion/math8.h ****                  : [i] "a"  (i)
 143:./lib/lib8tion/math8.h ****                  );
 144:./lib/lib8tion/math8.h ****     return i;
 145:./lib/lib8tion/math8.h **** #else
 146:./lib/lib8tion/math8.h **** #error "No implementation for add8to16 available."
 147:./lib/lib8tion/math8.h **** #endif
 148:./lib/lib8tion/math8.h **** }
 149:./lib/lib8tion/math8.h **** 
 150:./lib/lib8tion/math8.h **** 
 151:./lib/lib8tion/math8.h **** /// subtract one byte from another, 8-bit result
 152:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t sub8( uint8_t i, uint8_t j)
 153:./lib/lib8tion/math8.h **** {
 154:./lib/lib8tion/math8.h **** #if SUB8_C == 1
 155:./lib/lib8tion/math8.h ****     int16_t t = i - j;
 156:./lib/lib8tion/math8.h ****     return t;
 157:./lib/lib8tion/math8.h **** #elif SUB8_AVRASM == 1
 158:./lib/lib8tion/math8.h ****     // Subtract j from i, period.
 159:./lib/lib8tion/math8.h ****     asm volatile( "sub %0, %1" : "+a" (i) : "a" (j));
 160:./lib/lib8tion/math8.h ****     return i;
 161:./lib/lib8tion/math8.h **** #else
 162:./lib/lib8tion/math8.h **** #error "No implementation for sub8 available."
 163:./lib/lib8tion/math8.h **** #endif
 164:./lib/lib8tion/math8.h **** }
 165:./lib/lib8tion/math8.h **** 
 166:./lib/lib8tion/math8.h **** /// Calculate an integer average of two unsigned
 167:./lib/lib8tion/math8.h **** ///       8-bit integer values (uint8_t).
 168:./lib/lib8tion/math8.h **** ///       Fractional results are rounded down, e.g. avg8(20,41) = 30
 169:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t avg8( uint8_t i, uint8_t j)
 170:./lib/lib8tion/math8.h **** {
 171:./lib/lib8tion/math8.h **** #if AVG8_C == 1
 172:./lib/lib8tion/math8.h ****     return (i + j) >> 1;
 173:./lib/lib8tion/math8.h **** #elif AVG8_AVRASM == 1
 174:./lib/lib8tion/math8.h ****     asm volatile(
 175:./lib/lib8tion/math8.h ****          /* First, add j to i, 9th bit overflows into C flag */
 176:./lib/lib8tion/math8.h ****          "add %0, %1    \n\t"
 177:./lib/lib8tion/math8.h ****          /* Divide by two, moving C flag into high 8th bit */
 178:./lib/lib8tion/math8.h ****          "ror %0        \n\t"
 179:./lib/lib8tion/math8.h ****          : "+a" (i)
 180:./lib/lib8tion/math8.h ****          : "a"  (j) );
 181:./lib/lib8tion/math8.h ****     return i;
 182:./lib/lib8tion/math8.h **** #else
 183:./lib/lib8tion/math8.h **** #error "No implementation for avg8 available."
 184:./lib/lib8tion/math8.h **** #endif
 185:./lib/lib8tion/math8.h **** }
 186:./lib/lib8tion/math8.h **** 
 187:./lib/lib8tion/math8.h **** /// Calculate an integer average of two unsigned
 188:./lib/lib8tion/math8.h **** ///       16-bit integer values (uint16_t).
 189:./lib/lib8tion/math8.h **** ///       Fractional results are rounded down, e.g. avg16(20,41) = 30
 190:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint16_t avg16( uint16_t i, uint16_t j)
 191:./lib/lib8tion/math8.h **** {
 192:./lib/lib8tion/math8.h **** #if AVG16_C == 1
 193:./lib/lib8tion/math8.h ****     return (uint32_t)((uint32_t)(i) + (uint32_t)(j)) >> 1;
 194:./lib/lib8tion/math8.h **** #elif AVG16_AVRASM == 1
 195:./lib/lib8tion/math8.h ****     asm volatile(
 196:./lib/lib8tion/math8.h ****                  /* First, add jLo (heh) to iLo, 9th bit overflows into C flag */
 197:./lib/lib8tion/math8.h ****                  "add %A[i], %A[j]    \n\t"
 198:./lib/lib8tion/math8.h ****                  /* Now, add C + jHi to iHi, 17th bit overflows into C flag */
 199:./lib/lib8tion/math8.h ****                  "adc %B[i], %B[j]    \n\t"
 200:./lib/lib8tion/math8.h ****                  /* Divide iHi by two, moving C flag into high 16th bit, old 9th bit now in C */
 201:./lib/lib8tion/math8.h ****                  "ror %B[i]        \n\t"
 202:./lib/lib8tion/math8.h ****                  /* Divide iLo by two, moving C flag into high 8th bit */
 203:./lib/lib8tion/math8.h ****                  "ror %A[i]        \n\t"
 204:./lib/lib8tion/math8.h ****                  : [i] "+a" (i)
 205:./lib/lib8tion/math8.h ****                  : [j] "a"  (j) );
 206:./lib/lib8tion/math8.h ****     return i;
 207:./lib/lib8tion/math8.h **** #else
 208:./lib/lib8tion/math8.h **** #error "No implementation for avg16 available."
 209:./lib/lib8tion/math8.h **** #endif
 210:./lib/lib8tion/math8.h **** }
 211:./lib/lib8tion/math8.h **** 
 212:./lib/lib8tion/math8.h **** 
 213:./lib/lib8tion/math8.h **** /// Calculate an integer average of two signed 7-bit
 214:./lib/lib8tion/math8.h **** ///       integers (int8_t)
 215:./lib/lib8tion/math8.h **** ///       If the first argument is even, result is rounded down.
 216:./lib/lib8tion/math8.h **** ///       If the first argument is odd, result is result up.
 217:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE int8_t avg7( int8_t i, int8_t j)
 218:./lib/lib8tion/math8.h **** {
 219:./lib/lib8tion/math8.h **** #if AVG7_C == 1
 220:./lib/lib8tion/math8.h ****     return ((i + j) >> 1) + (i & 0x1);
 221:./lib/lib8tion/math8.h **** #elif AVG7_AVRASM == 1
 222:./lib/lib8tion/math8.h ****     asm volatile(
 223:./lib/lib8tion/math8.h ****                  "asr %1        \n\t"
 224:./lib/lib8tion/math8.h ****                  "asr %0        \n\t"
 225:./lib/lib8tion/math8.h ****                  "adc %0, %1    \n\t"
 226:./lib/lib8tion/math8.h ****                  : "+a" (i)
 227:./lib/lib8tion/math8.h ****                  : "a"  (j) );
 228:./lib/lib8tion/math8.h ****     return i;
 229:./lib/lib8tion/math8.h **** #else
 230:./lib/lib8tion/math8.h **** #error "No implementation for avg7 available."
 231:./lib/lib8tion/math8.h **** #endif
 232:./lib/lib8tion/math8.h **** }
 233:./lib/lib8tion/math8.h **** 
 234:./lib/lib8tion/math8.h **** /// Calculate an integer average of two signed 15-bit
 235:./lib/lib8tion/math8.h **** ///       integers (int16_t)
 236:./lib/lib8tion/math8.h **** ///       If the first argument is even, result is rounded down.
 237:./lib/lib8tion/math8.h **** ///       If the first argument is odd, result is result up.
 238:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE int16_t avg15( int16_t i, int16_t j)
 239:./lib/lib8tion/math8.h **** {
 240:./lib/lib8tion/math8.h **** #if AVG15_C == 1
 241:./lib/lib8tion/math8.h ****     return ((int32_t)((int32_t)(i) + (int32_t)(j)) >> 1) + (i & 0x1);
 242:./lib/lib8tion/math8.h **** #elif AVG15_AVRASM == 1
 243:./lib/lib8tion/math8.h ****     asm volatile(
 244:./lib/lib8tion/math8.h ****                  /* first divide j by 2, throwing away lowest bit */
 245:./lib/lib8tion/math8.h ****                  "asr %B[j]          \n\t"
 246:./lib/lib8tion/math8.h ****                  "ror %A[j]          \n\t"
 247:./lib/lib8tion/math8.h ****                  /* now divide i by 2, with lowest bit going into C */
 248:./lib/lib8tion/math8.h ****                  "asr %B[i]          \n\t"
 249:./lib/lib8tion/math8.h ****                  "ror %A[i]          \n\t"
 250:./lib/lib8tion/math8.h ****                  /* add j + C to i */
 251:./lib/lib8tion/math8.h ****                  "adc %A[i], %A[j]   \n\t"
 252:./lib/lib8tion/math8.h ****                  "adc %B[i], %B[j]   \n\t"
 253:./lib/lib8tion/math8.h ****                  : [i] "+a" (i)
 254:./lib/lib8tion/math8.h ****                  : [j] "a"  (j) );
 255:./lib/lib8tion/math8.h ****     return i;
 256:./lib/lib8tion/math8.h **** #else
 257:./lib/lib8tion/math8.h **** #error "No implementation for avg15 available."
 258:./lib/lib8tion/math8.h **** #endif
 259:./lib/lib8tion/math8.h **** }
 260:./lib/lib8tion/math8.h **** 
 261:./lib/lib8tion/math8.h **** 
 262:./lib/lib8tion/math8.h **** ///       Calculate the remainder of one unsigned 8-bit
 263:./lib/lib8tion/math8.h **** ///       value divided by anoter, aka A % M.
 264:./lib/lib8tion/math8.h **** ///       Implemented by repeated subtraction, which is
 265:./lib/lib8tion/math8.h **** ///       very compact, and very fast if A is 'probably'
 266:./lib/lib8tion/math8.h **** ///       less than M.  If A is a large multiple of M,
 267:./lib/lib8tion/math8.h **** ///       the loop has to execute multiple times.  However,
 268:./lib/lib8tion/math8.h **** ///       even in that case, the loop is only two
 269:./lib/lib8tion/math8.h **** ///       instructions long on AVR, i.e., quick.
 270:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t mod8( uint8_t a, uint8_t m)
 271:./lib/lib8tion/math8.h **** {
 272:./lib/lib8tion/math8.h **** #if defined(__AVR__)
 273:./lib/lib8tion/math8.h ****     asm volatile (
 274:./lib/lib8tion/math8.h ****                   "L_%=:  sub %[a],%[m]    \n\t"
 275:./lib/lib8tion/math8.h ****                   "       brcc L_%=        \n\t"
 276:./lib/lib8tion/math8.h ****                   "       add %[a],%[m]    \n\t"
 277:./lib/lib8tion/math8.h ****                   : [a] "+r" (a)
 278:./lib/lib8tion/math8.h ****                   : [m] "r"  (m)
 279:./lib/lib8tion/math8.h ****                   );
 280:./lib/lib8tion/math8.h **** #else
 281:./lib/lib8tion/math8.h ****     while( a >= m) a -= m;
 282:./lib/lib8tion/math8.h **** #endif
 283:./lib/lib8tion/math8.h ****     return a;
 284:./lib/lib8tion/math8.h **** }
 285:./lib/lib8tion/math8.h **** 
 286:./lib/lib8tion/math8.h **** ///          Add two numbers, and calculate the modulo
 287:./lib/lib8tion/math8.h **** ///          of the sum and a third number, M.
 288:./lib/lib8tion/math8.h **** ///          In other words, it returns (A+B) % M.
 289:./lib/lib8tion/math8.h **** ///          It is designed as a compact mechanism for
 290:./lib/lib8tion/math8.h **** ///          incrementing a 'mode' switch and wrapping
 291:./lib/lib8tion/math8.h **** ///          around back to 'mode 0' when the switch
 292:./lib/lib8tion/math8.h **** ///          goes past the end of the available range.
 293:./lib/lib8tion/math8.h **** ///          e.g. if you have seven modes, this switches
 294:./lib/lib8tion/math8.h **** ///          to the next one and wraps around if needed:
 295:./lib/lib8tion/math8.h **** ///            mode = addmod8( mode, 1, 7);
 296:./lib/lib8tion/math8.h **** ///LIB8STATIC_ALWAYS_INLINESee 'mod8' for notes on performance.
 297:./lib/lib8tion/math8.h **** LIB8STATIC uint8_t addmod8( uint8_t a, uint8_t b, uint8_t m)
 298:./lib/lib8tion/math8.h **** {
 299:./lib/lib8tion/math8.h **** #if defined(__AVR__)
 300:./lib/lib8tion/math8.h ****     asm volatile (
 301:./lib/lib8tion/math8.h ****                   "       add %[a],%[b]    \n\t"
 302:./lib/lib8tion/math8.h ****                   "L_%=:  sub %[a],%[m]    \n\t"
 303:./lib/lib8tion/math8.h ****                   "       brcc L_%=        \n\t"
 304:./lib/lib8tion/math8.h ****                   "       add %[a],%[m]    \n\t"
 305:./lib/lib8tion/math8.h ****                   : [a] "+r" (a)
 306:./lib/lib8tion/math8.h ****                   : [b] "r"  (b), [m] "r" (m)
 307:./lib/lib8tion/math8.h ****                   );
 308:./lib/lib8tion/math8.h **** #else
 309:./lib/lib8tion/math8.h ****     a += b;
 310:./lib/lib8tion/math8.h ****     while( a >= m) a -= m;
 311:./lib/lib8tion/math8.h **** #endif
 312:./lib/lib8tion/math8.h ****     return a;
 313:./lib/lib8tion/math8.h **** }
 314:./lib/lib8tion/math8.h **** 
 315:./lib/lib8tion/math8.h **** ///          Subtract two numbers, and calculate the modulo
 316:./lib/lib8tion/math8.h **** ///          of the difference and a third number, M.
 317:./lib/lib8tion/math8.h **** ///          In other words, it returns (A-B) % M.
 318:./lib/lib8tion/math8.h **** ///          It is designed as a compact mechanism for
 319:./lib/lib8tion/math8.h **** ///          incrementing a 'mode' switch and wrapping
 320:./lib/lib8tion/math8.h **** ///          around back to 'mode 0' when the switch
 321:./lib/lib8tion/math8.h **** ///          goes past the end of the available range.
 322:./lib/lib8tion/math8.h **** ///          e.g. if you have seven modes, this switches
 323:./lib/lib8tion/math8.h **** ///          to the next one and wraps around if needed:
 324:./lib/lib8tion/math8.h **** ///            mode = addmod8( mode, 1, 7);
 325:./lib/lib8tion/math8.h **** ///LIB8STATIC_ALWAYS_INLINESee 'mod8' for notes on performance.
 326:./lib/lib8tion/math8.h **** LIB8STATIC uint8_t submod8( uint8_t a, uint8_t b, uint8_t m)
 327:./lib/lib8tion/math8.h **** {
 328:./lib/lib8tion/math8.h **** #if defined(__AVR__)
 329:./lib/lib8tion/math8.h ****     asm volatile (
 330:./lib/lib8tion/math8.h ****                   "       sub %[a],%[b]    \n\t"
 331:./lib/lib8tion/math8.h ****                   "L_%=:  sub %[a],%[m]    \n\t"
 332:./lib/lib8tion/math8.h ****                   "       brcc L_%=        \n\t"
 333:./lib/lib8tion/math8.h ****                   "       add %[a],%[m]    \n\t"
 334:./lib/lib8tion/math8.h ****                   : [a] "+r" (a)
 335:./lib/lib8tion/math8.h ****                   : [b] "r"  (b), [m] "r" (m)
 336:./lib/lib8tion/math8.h ****                   );
 337:./lib/lib8tion/math8.h **** #else
 338:./lib/lib8tion/math8.h ****     a -= b;
 339:./lib/lib8tion/math8.h ****     while( a >= m) a -= m;
 340:./lib/lib8tion/math8.h **** #endif
 341:./lib/lib8tion/math8.h ****     return a;
 342:./lib/lib8tion/math8.h **** }
 343:./lib/lib8tion/math8.h **** 
 344:./lib/lib8tion/math8.h **** /// 8x8 bit multiplication, with 8 bit result
 345:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t mul8( uint8_t i, uint8_t j)
 346:./lib/lib8tion/math8.h **** {
 347:./lib/lib8tion/math8.h **** #if MUL8_C == 1
 348:./lib/lib8tion/math8.h ****     return ((uint16_t)i * (uint16_t)(j) ) & 0xFF;
 349:./lib/lib8tion/math8.h **** #elif MUL8_AVRASM == 1
 350:./lib/lib8tion/math8.h ****     asm volatile(
 351:./lib/lib8tion/math8.h ****          /* Multiply 8-bit i * 8-bit j, giving 16-bit r1,r0 */
 352:./lib/lib8tion/math8.h ****          "mul %0, %1          \n\t"
 353:./lib/lib8tion/math8.h ****          /* Extract the LOW 8-bits (r0) */
 354:./lib/lib8tion/math8.h ****          "mov %0, r0          \n\t"
 355:./lib/lib8tion/math8.h ****          /* Restore r1 to "0"; it's expected to always be that */
 356:./lib/lib8tion/math8.h ****          "clr __zero_reg__    \n\t"
 357:./lib/lib8tion/math8.h ****          : "+a" (i)
 358:./lib/lib8tion/math8.h ****          : "a"  (j)
 359:./lib/lib8tion/math8.h ****          : "r0", "r1");
 360:./lib/lib8tion/math8.h **** 
 361:./lib/lib8tion/math8.h ****     return i;
 362:./lib/lib8tion/math8.h **** #else
 363:./lib/lib8tion/math8.h **** #error "No implementation for mul8 available."
 364:./lib/lib8tion/math8.h **** #endif
 365:./lib/lib8tion/math8.h **** }
 366:./lib/lib8tion/math8.h **** 
 367:./lib/lib8tion/math8.h **** 
 368:./lib/lib8tion/math8.h **** /// saturating 8x8 bit multiplication, with 8 bit result
 369:./lib/lib8tion/math8.h **** /// @returns the product of i * j, capping at 0xFF
 370:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t qmul8( uint8_t i, uint8_t j)
 371:./lib/lib8tion/math8.h **** {
 372:./lib/lib8tion/math8.h **** #if QMUL8_C == 1
 373:./lib/lib8tion/math8.h ****     int p = ((uint16_t)i * (uint16_t)(j) );
 374:./lib/lib8tion/math8.h ****     if( p > 255) p = 255;
 375:./lib/lib8tion/math8.h ****     return p;
 376:./lib/lib8tion/math8.h **** #elif QMUL8_AVRASM == 1
 377:./lib/lib8tion/math8.h ****     asm volatile(
 378:./lib/lib8tion/math8.h ****                  /* Multiply 8-bit i * 8-bit j, giving 16-bit r1,r0 */
 379:./lib/lib8tion/math8.h ****                  "  mul %0, %1          \n\t"
 380:./lib/lib8tion/math8.h ****                  /* If high byte of result is zero, all is well. */
 381:./lib/lib8tion/math8.h ****                  "  tst r1              \n\t"
 382:./lib/lib8tion/math8.h ****                  "  breq Lnospill_%=    \n\t"
 383:./lib/lib8tion/math8.h ****                  /* If high byte of result > 0, saturate low byte to 0xFF */
 384:./lib/lib8tion/math8.h ****                  "  ldi %0,0xFF         \n\t"
 385:./lib/lib8tion/math8.h ****                  "  rjmp Ldone_%=       \n\t"
 386:./lib/lib8tion/math8.h ****                  "Lnospill_%=:          \n\t"
 387:./lib/lib8tion/math8.h ****                  /* Extract the LOW 8-bits (r0) */
 388:./lib/lib8tion/math8.h ****                  "  mov %0, r0          \n\t"
 389:./lib/lib8tion/math8.h ****                  "Ldone_%=:             \n\t"
 390:./lib/lib8tion/math8.h ****                  /* Restore r1 to "0"; it's expected to always be that */
 391:./lib/lib8tion/math8.h ****                  "  clr __zero_reg__    \n\t"
 392:./lib/lib8tion/math8.h ****                  : "+a" (i)
 393:./lib/lib8tion/math8.h ****                  : "a"  (j)
 394:./lib/lib8tion/math8.h ****                  : "r0", "r1");
 395:./lib/lib8tion/math8.h **** 
 396:./lib/lib8tion/math8.h ****     return i;
 397:./lib/lib8tion/math8.h **** #else
 398:./lib/lib8tion/math8.h **** #error "No implementation for qmul8 available."
 399:./lib/lib8tion/math8.h **** #endif
 400:./lib/lib8tion/math8.h **** }
 401:./lib/lib8tion/math8.h **** 
 402:./lib/lib8tion/math8.h **** 
 403:./lib/lib8tion/math8.h **** /// take abs() of a signed 8-bit uint8_t
 404:./lib/lib8tion/math8.h **** LIB8STATIC_ALWAYS_INLINE int8_t abs8( int8_t i)
 405:./lib/lib8tion/math8.h **** {
 406:./lib/lib8tion/math8.h **** #if ABS8_C == 1
 407:./lib/lib8tion/math8.h ****     if( i < 0) i = -i;
 433              		.loc 9 407 0
 434 001a 002C     		cmp	r4, #0
 435              	.LBE120:
 436              	.LBE119:
 437              		.loc 8 6 0
 438 001c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 439              	.LBB122:
 440              	.LBB121:
 441              		.loc 9 407 0
 442 001e BCBF     		itt	lt
 443 0020 C5F12004 		rsblt	r4, r5, #32
 444 0024 64B2     		sxtblt	r4, r4
 445              	.LBE121:
 446              	.LBE122:
 447              		.loc 8 6 0
 448 0026 9A1A     		subs	r2, r3, r2
 449              	.LVL36:
 450 0028 C0B2     		uxtb	r0, r0
 451              	.LVL37:
 452 002a 2244     		add	r2, r2, r4
 453 002c 0244     		add	r2, r2, r0
   7:quantum/rgb_matrix_animations/rainbow_moving_chevron_anim.h ****     return hsv;
 454              		.loc 8 7 0
 455 002e 8DF80420 		strb	r2, [sp, #4]
 456 0032 019B     		ldr	r3, [sp, #4]
 457 0034 0020     		movs	r0, #0
 458 0036 DAB2     		uxtb	r2, r3
 459 0038 62F30700 		bfi	r0, r2, #0, #8
 460 003c C3F30722 		ubfx	r2, r3, #8, #8
 461 0040 62F30F20 		bfi	r0, r2, #8, #8
 462 0044 C3F30743 		ubfx	r3, r3, #16, #8
 463 0048 63F31740 		bfi	r0, r3, #16, #8
   8:quantum/rgb_matrix_animations/rainbow_moving_chevron_anim.h **** }
 464              		.loc 8 8 0
 465 004c 05B0     		add	sp, sp, #20
 466              		.cfi_def_cfa_offset 12
 467              		@ sp needed
 468 004e 30BD     		pop	{r4, r5, pc}
 469              	.L27:
 470              		.align	2
 471              	.L26:
 472 0050 00000000 		.word	g_led_config
 473              		.cfi_endproc
 474              	.LFE108:
 476              		.section	.text.CYCLE_OUT_IN_math,"ax",%progbits
 477              		.align	1
 478              		.syntax unified
 479              		.thumb
 480              		.thumb_func
 481              		.fpu fpv4-sp-d16
 483              	CYCLE_OUT_IN_math:
 484              	.LFB110:
 485              		.file 10 "quantum/rgb_matrix_animations/cycle_out_in_anim.h"
   1:quantum/rgb_matrix_animations/cycle_out_in_anim.h **** #ifndef DISABLE_RGB_MATRIX_CYCLE_OUT_IN
   2:quantum/rgb_matrix_animations/cycle_out_in_anim.h **** RGB_MATRIX_EFFECT(CYCLE_OUT_IN)
   3:quantum/rgb_matrix_animations/cycle_out_in_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/cycle_out_in_anim.h **** 
   5:quantum/rgb_matrix_animations/cycle_out_in_anim.h **** static HSV CYCLE_OUT_IN_math(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint8_t time) {
 486              		.loc 10 5 0
 487              		.cfi_startproc
 488              		@ args = 4, pretend = 0, frame = 16
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490              		@ link register save eliminated.
 491              	.LVL38:
 492 0000 84B0     		sub	sp, sp, #16
 493              		.cfi_def_cfa_offset 16
 494              	.LVL39:
   6:quantum/rgb_matrix_animations/cycle_out_in_anim.h ****     hsv.h = 3 * dist / 2 + time;
 495              		.loc 10 6 0
 496 0002 03EB4303 		add	r3, r3, r3, lsl #1
 497              	.LVL40:
 498 0006 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 499              	.LVL41:
   5:quantum/rgb_matrix_animations/cycle_out_in_anim.h ****     hsv.h = 3 * dist / 2 + time;
 500              		.loc 10 5 0
 501 000a 0190     		str	r0, [sp, #4]
 502              		.loc 10 6 0
 503 000c 02EB5303 		add	r3, r2, r3, lsr #1
   7:quantum/rgb_matrix_animations/cycle_out_in_anim.h ****     return hsv;
 504              		.loc 10 7 0
 505 0010 8DF80430 		strb	r3, [sp, #4]
 506 0014 019B     		ldr	r3, [sp, #4]
 507 0016 0020     		movs	r0, #0
 508 0018 DAB2     		uxtb	r2, r3
 509 001a 62F30700 		bfi	r0, r2, #0, #8
 510 001e C3F30722 		ubfx	r2, r3, #8, #8
 511 0022 62F30F20 		bfi	r0, r2, #8, #8
 512 0026 C3F30743 		ubfx	r3, r3, #16, #8
 513 002a 63F31740 		bfi	r0, r3, #16, #8
   8:quantum/rgb_matrix_animations/cycle_out_in_anim.h **** }
 514              		.loc 10 8 0
 515 002e 04B0     		add	sp, sp, #16
 516              		.cfi_def_cfa_offset 0
 517              	.LVL42:
 518              		@ sp needed
 519 0030 7047     		bx	lr
 520              		.cfi_endproc
 521              	.LFE110:
 523              		.section	.text.DUAL_BEACON_math,"ax",%progbits
 524              		.align	1
 525              		.syntax unified
 526              		.thumb
 527              		.thumb_func
 528              		.fpu fpv4-sp-d16
 530              	DUAL_BEACON_math:
 531              	.LFB118:
 532              		.file 11 "quantum/rgb_matrix_animations/dual_beacon_anim.h"
   1:quantum/rgb_matrix_animations/dual_beacon_anim.h **** #ifndef DISABLE_RGB_MATRIX_DUAL_BEACON
   2:quantum/rgb_matrix_animations/dual_beacon_anim.h **** RGB_MATRIX_EFFECT(DUAL_BEACON)
   3:quantum/rgb_matrix_animations/dual_beacon_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/dual_beacon_anim.h **** 
   5:quantum/rgb_matrix_animations/dual_beacon_anim.h **** static HSV DUAL_BEACON_math(HSV hsv, int8_t sin, int8_t cos, uint8_t i, uint8_t time) {
 533              		.loc 11 5 0
 534              		.cfi_startproc
 535              		@ args = 4, pretend = 0, frame = 16
 536              		@ frame_needed = 0, uses_anonymous_args = 0
 537              	.LVL43:
 538 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 539              		.cfi_def_cfa_offset 24
 540              		.cfi_offset 4, -8
 541              		.cfi_offset 14, -4
 542              	.LVL44:
   6:quantum/rgb_matrix_animations/dual_beacon_anim.h ****     hsv.h += ((g_led_config.point[i].y - k_rgb_matrix_center.y) * cos + (g_led_config.point[i].x - 
 543              		.loc 11 6 0
 544 0002 03F12404 		add	r4, r3, #36
 545 0006 104B     		ldr	r3, .L30
 546              	.LVL45:
   5:quantum/rgb_matrix_animations/dual_beacon_anim.h ****     hsv.h += ((g_led_config.point[i].y - k_rgb_matrix_center.y) * cos + (g_led_config.point[i].x - 
 547              		.loc 11 5 0
 548 0008 0190     		str	r0, [sp, #4]
 549              	.LVL46:
 550              		.loc 11 6 0
 551 000a 03EB4403 		add	r3, r3, r4, lsl #1
 552 000e 1C79     		ldrb	r4, [r3, #4]	@ zero_extendqisi2
 553 0010 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 554 0012 703B     		subs	r3, r3, #112
 555 0014 5943     		muls	r1, r3, r1
 556              	.LVL47:
 557 0016 203C     		subs	r4, r4, #32
 558 0018 02FB0412 		mla	r2, r2, r4, r1
 559              	.LVL48:
 560 001c 8024     		movs	r4, #128
 561 001e 92FBF4F2 		sdiv	r2, r2, r4
 562 0022 52FA80F2 		uxtab	r2, r2, r0
   7:quantum/rgb_matrix_animations/dual_beacon_anim.h ****     return hsv;
 563              		.loc 11 7 0
 564 0026 8DF80420 		strb	r2, [sp, #4]
 565 002a 019B     		ldr	r3, [sp, #4]
 566 002c 0020     		movs	r0, #0
 567 002e DAB2     		uxtb	r2, r3
 568 0030 62F30700 		bfi	r0, r2, #0, #8
 569 0034 C3F30722 		ubfx	r2, r3, #8, #8
 570 0038 62F30F20 		bfi	r0, r2, #8, #8
 571 003c C3F30743 		ubfx	r3, r3, #16, #8
 572 0040 63F31740 		bfi	r0, r3, #16, #8
   8:quantum/rgb_matrix_animations/dual_beacon_anim.h **** }
 573              		.loc 11 8 0
 574 0044 04B0     		add	sp, sp, #16
 575              		.cfi_def_cfa_offset 8
 576              		@ sp needed
 577 0046 10BD     		pop	{r4, pc}
 578              	.LVL49:
 579              	.L31:
 580              		.align	2
 581              	.L30:
 582 0048 00000000 		.word	g_led_config
 583              		.cfi_endproc
 584              	.LFE118:
 586              		.section	.text.RAINBOW_BEACON_math,"ax",%progbits
 587              		.align	1
 588              		.syntax unified
 589              		.thumb
 590              		.thumb_func
 591              		.fpu fpv4-sp-d16
 593              	RAINBOW_BEACON_math:
 594              	.LFB120:
 595              		.file 12 "quantum/rgb_matrix_animations/rainbow_beacon_anim.h"
   1:quantum/rgb_matrix_animations/rainbow_beacon_anim.h **** #ifndef DISABLE_RGB_MATRIX_RAINBOW_BEACON
   2:quantum/rgb_matrix_animations/rainbow_beacon_anim.h **** RGB_MATRIX_EFFECT(RAINBOW_BEACON)
   3:quantum/rgb_matrix_animations/rainbow_beacon_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/rainbow_beacon_anim.h **** 
   5:quantum/rgb_matrix_animations/rainbow_beacon_anim.h **** static HSV RAINBOW_BEACON_math(HSV hsv, int8_t sin, int8_t cos, uint8_t i, uint8_t time) {
 596              		.loc 12 5 0
 597              		.cfi_startproc
 598              		@ args = 4, pretend = 0, frame = 16
 599              		@ frame_needed = 0, uses_anonymous_args = 0
 600              	.LVL50:
 601 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 602              		.cfi_def_cfa_offset 24
 603              		.cfi_offset 4, -8
 604              		.cfi_offset 14, -4
 605              	.LVL51:
   6:quantum/rgb_matrix_animations/rainbow_beacon_anim.h ****     hsv.h += ((g_led_config.point[i].y - k_rgb_matrix_center.y) * 2 * cos + (g_led_config.point[i].
 606              		.loc 12 6 0
 607 0002 03F12404 		add	r4, r3, #36
 608              	.LVL52:
 609 0006 114B     		ldr	r3, .L33
 610              	.LVL53:
   5:quantum/rgb_matrix_animations/rainbow_beacon_anim.h ****     hsv.h += ((g_led_config.point[i].y - k_rgb_matrix_center.y) * 2 * cos + (g_led_config.point[i].
 611              		.loc 12 5 0
 612 0008 0190     		str	r0, [sp, #4]
 613              	.LVL54:
 614              		.loc 12 6 0
 615 000a 03EB4403 		add	r3, r3, r4, lsl #1
 616 000e 1C79     		ldrb	r4, [r3, #4]	@ zero_extendqisi2
 617 0010 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 618 0012 703B     		subs	r3, r3, #112
 619 0014 5B00     		lsls	r3, r3, #1
 620 0016 203C     		subs	r4, r4, #32
 621 0018 5943     		muls	r1, r3, r1
 622              	.LVL55:
 623 001a 6400     		lsls	r4, r4, #1
 624 001c 02FB0412 		mla	r2, r2, r4, r1
 625              	.LVL56:
 626 0020 8024     		movs	r4, #128
 627 0022 92FBF4F2 		sdiv	r2, r2, r4
 628 0026 52FA80F2 		uxtab	r2, r2, r0
   7:quantum/rgb_matrix_animations/rainbow_beacon_anim.h ****     return hsv;
 629              		.loc 12 7 0
 630 002a 8DF80420 		strb	r2, [sp, #4]
 631 002e 019B     		ldr	r3, [sp, #4]
 632 0030 0020     		movs	r0, #0
 633 0032 DAB2     		uxtb	r2, r3
 634 0034 62F30700 		bfi	r0, r2, #0, #8
 635 0038 C3F30722 		ubfx	r2, r3, #8, #8
 636 003c 62F30F20 		bfi	r0, r2, #8, #8
 637 0040 C3F30743 		ubfx	r3, r3, #16, #8
 638 0044 63F31740 		bfi	r0, r3, #16, #8
   8:quantum/rgb_matrix_animations/rainbow_beacon_anim.h **** }
 639              		.loc 12 8 0
 640 0048 04B0     		add	sp, sp, #16
 641              		.cfi_def_cfa_offset 8
 642              		@ sp needed
 643 004a 10BD     		pop	{r4, pc}
 644              	.LVL57:
 645              	.L34:
 646              		.align	2
 647              	.L33:
 648 004c 00000000 		.word	g_led_config
 649              		.cfi_endproc
 650              	.LFE120:
 652              		.section	.text.PINWHEELS_math,"ax",%progbits
 653              		.align	1
 654              		.syntax unified
 655              		.thumb
 656              		.thumb_func
 657              		.fpu fpv4-sp-d16
 659              	PINWHEELS_math:
 660              	.LFB122:
 661              		.file 13 "quantum/rgb_matrix_animations/rainbow_pinwheels_anim.h"
   1:quantum/rgb_matrix_animations/rainbow_pinwheels_anim.h **** #ifndef DISABLE_RGB_MATRIX_RAINBOW_PINWHEELS
   2:quantum/rgb_matrix_animations/rainbow_pinwheels_anim.h **** RGB_MATRIX_EFFECT(PINWHEELS)
   3:quantum/rgb_matrix_animations/rainbow_pinwheels_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/rainbow_pinwheels_anim.h **** 
   5:quantum/rgb_matrix_animations/rainbow_pinwheels_anim.h **** static HSV PINWHEELS_math(HSV hsv, int8_t sin, int8_t cos, uint8_t i, uint8_t time) {
 662              		.loc 13 5 0
 663              		.cfi_startproc
 664              		@ args = 4, pretend = 0, frame = 16
 665              		@ frame_needed = 0, uses_anonymous_args = 0
 666              	.LVL58:
 667 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 668              		.cfi_def_cfa_offset 24
 669              		.cfi_offset 4, -8
 670              		.cfi_offset 14, -4
   6:quantum/rgb_matrix_animations/rainbow_pinwheels_anim.h ****     hsv.h += ((g_led_config.point[i].y - k_rgb_matrix_center.y) * 3 * cos + (56 - abs8(g_led_config
 671              		.loc 13 6 0
 672 0002 174C     		ldr	r4, .L37
   5:quantum/rgb_matrix_animations/rainbow_pinwheels_anim.h ****     hsv.h += ((g_led_config.point[i].y - k_rgb_matrix_center.y) * 3 * cos + (56 - abs8(g_led_config
 673              		.loc 13 5 0
 674 0004 0190     		str	r0, [sp, #4]
 675              		.loc 13 6 0
 676 0006 2433     		adds	r3, r3, #36
 677              	.LVL59:
 678 0008 04EB4304 		add	r4, r4, r3, lsl #1
 679 000c C0B2     		uxtb	r0, r0
 680              	.LVL60:
 681 000e 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 682 0010 E478     		ldrb	r4, [r4, #3]	@ zero_extendqisi2
 683 0012 203B     		subs	r3, r3, #32
 684 0014 03EB4303 		add	r3, r3, r3, lsl #1
 685 0018 5A43     		muls	r2, r3, r2
 686              	.LVL61:
 687 001a A4F17003 		sub	r3, r4, #112
 688 001e 5BB2     		sxtb	r3, r3
 689              	.LVL62:
 690              	.LBB123:
 691              	.LBB124:
 692              		.loc 9 407 0
 693 0020 002B     		cmp	r3, #0
 694 0022 BCBF     		itt	lt
 695 0024 C4F17003 		rsblt	r3, r4, #112
 696              	.LVL63:
 697 0028 5BB2     		sxtblt	r3, r3
 698              	.LVL64:
 699              	.LBE124:
 700              	.LBE123:
 701              		.loc 13 6 0
 702 002a C3F13803 		rsb	r3, r3, #56
 703              	.LVL65:
 704 002e 03EB4303 		add	r3, r3, r3, lsl #1
 705 0032 01FB0323 		mla	r3, r1, r3, r2
 706 0036 8022     		movs	r2, #128
 707              	.LVL66:
 708 0038 93FBF2F3 		sdiv	r3, r3, r2
 709 003c 0344     		add	r3, r3, r0
   7:quantum/rgb_matrix_animations/rainbow_pinwheels_anim.h ****     return hsv;
 710              		.loc 13 7 0
 711 003e 8DF80430 		strb	r3, [sp, #4]
 712 0042 019B     		ldr	r3, [sp, #4]
 713 0044 0020     		movs	r0, #0
 714 0046 DAB2     		uxtb	r2, r3
 715 0048 62F30700 		bfi	r0, r2, #0, #8
 716 004c C3F30722 		ubfx	r2, r3, #8, #8
 717 0050 62F30F20 		bfi	r0, r2, #8, #8
 718 0054 C3F30743 		ubfx	r3, r3, #16, #8
 719 0058 63F31740 		bfi	r0, r3, #16, #8
   8:quantum/rgb_matrix_animations/rainbow_pinwheels_anim.h **** }
 720              		.loc 13 8 0
 721 005c 04B0     		add	sp, sp, #16
 722              		.cfi_def_cfa_offset 8
 723              		@ sp needed
 724 005e 10BD     		pop	{r4, pc}
 725              	.LVL67:
 726              	.L38:
 727              		.align	2
 728              	.L37:
 729 0060 00000000 		.word	g_led_config
 730              		.cfi_endproc
 731              	.LFE122:
 733              		.section	.text.SOLID_REACTIVE_SIMPLE_math,"ax",%progbits
 734              		.align	1
 735              		.syntax unified
 736              		.thumb
 737              		.thumb_func
 738              		.fpu fpv4-sp-d16
 740              	SOLID_REACTIVE_SIMPLE_math:
 741              	.LFB128:
 742              		.file 14 "quantum/rgb_matrix_animations/solid_reactive_simple_anim.h"
   1:quantum/rgb_matrix_animations/solid_reactive_simple_anim.h **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
   2:quantum/rgb_matrix_animations/solid_reactive_simple_anim.h **** #    ifndef DISABLE_RGB_MATRIX_SOLID_REACTIVE_SIMPLE
   3:quantum/rgb_matrix_animations/solid_reactive_simple_anim.h **** RGB_MATRIX_EFFECT(SOLID_REACTIVE_SIMPLE)
   4:quantum/rgb_matrix_animations/solid_reactive_simple_anim.h **** #        ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   5:quantum/rgb_matrix_animations/solid_reactive_simple_anim.h **** 
   6:quantum/rgb_matrix_animations/solid_reactive_simple_anim.h **** static HSV SOLID_REACTIVE_SIMPLE_math(HSV hsv, uint16_t offset) {
 743              		.loc 14 6 0
 744              		.cfi_startproc
 745              		@ args = 0, pretend = 0, frame = 16
 746              		@ frame_needed = 0, uses_anonymous_args = 0
 747              		@ link register save eliminated.
 748              	.LVL68:
 749 0000 84B0     		sub	sp, sp, #16
 750              		.cfi_def_cfa_offset 16
 751              	.LVL69:
   7:quantum/rgb_matrix_animations/solid_reactive_simple_anim.h ****     hsv.v = scale8(255 - offset, hsv.v);
 752              		.loc 14 7 0
 753 0002 C943     		mvns	r1, r1
 754              	.LVL70:
   6:quantum/rgb_matrix_animations/solid_reactive_simple_anim.h ****     hsv.v = scale8(255 - offset, hsv.v);
 755              		.loc 14 6 0
 756 0004 0190     		str	r0, [sp, #4]
 757              	.LVL71:
 758              	.LBB125:
 759              	.LBB126:
 760              		.loc 3 26 0
 761 0006 C9B2     		uxtb	r1, r1
 762 0008 C0F30740 		ubfx	r0, r0, #16, #8
 763 000c 11FB00F1 		smulbb	r1, r1, r0
 764 0010 0912     		asrs	r1, r1, #8
 765 0012 8DF80610 		strb	r1, [sp, #6]
 766              	.LBE126:
 767              	.LBE125:
   8:quantum/rgb_matrix_animations/solid_reactive_simple_anim.h ****     return hsv;
 768              		.loc 14 8 0
 769 0016 019B     		ldr	r3, [sp, #4]
 770 0018 0020     		movs	r0, #0
 771 001a DAB2     		uxtb	r2, r3
 772 001c 62F30700 		bfi	r0, r2, #0, #8
 773 0020 C3F30722 		ubfx	r2, r3, #8, #8
 774 0024 62F30F20 		bfi	r0, r2, #8, #8
 775 0028 C3F30743 		ubfx	r3, r3, #16, #8
 776 002c 63F31740 		bfi	r0, r3, #16, #8
   9:quantum/rgb_matrix_animations/solid_reactive_simple_anim.h **** }
 777              		.loc 14 9 0
 778 0030 04B0     		add	sp, sp, #16
 779              		.cfi_def_cfa_offset 0
 780              		@ sp needed
 781 0032 7047     		bx	lr
 782              		.cfi_endproc
 783              	.LFE128:
 785              		.section	.text.SOLID_REACTIVE_math,"ax",%progbits
 786              		.align	1
 787              		.syntax unified
 788              		.thumb
 789              		.thumb_func
 790              		.fpu fpv4-sp-d16
 792              	SOLID_REACTIVE_math:
 793              	.LFB130:
 794              		.file 15 "quantum/rgb_matrix_animations/solid_reactive_anim.h"
   1:quantum/rgb_matrix_animations/solid_reactive_anim.h **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
   2:quantum/rgb_matrix_animations/solid_reactive_anim.h **** #    ifndef DISABLE_RGB_MATRIX_SOLID_REACTIVE
   3:quantum/rgb_matrix_animations/solid_reactive_anim.h **** RGB_MATRIX_EFFECT(SOLID_REACTIVE)
   4:quantum/rgb_matrix_animations/solid_reactive_anim.h **** #        ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   5:quantum/rgb_matrix_animations/solid_reactive_anim.h **** 
   6:quantum/rgb_matrix_animations/solid_reactive_anim.h **** static HSV SOLID_REACTIVE_math(HSV hsv, uint16_t offset) {
 795              		.loc 15 6 0
 796              		.cfi_startproc
 797              		@ args = 0, pretend = 0, frame = 16
 798              		@ frame_needed = 0, uses_anonymous_args = 0
 799              		@ link register save eliminated.
 800              	.LVL72:
 801 0000 84B0     		sub	sp, sp, #16
 802              		.cfi_def_cfa_offset 16
 803              	.LVL73:
 804              	.LBB127:
 805              	.LBB128:
  91:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
 806              		.loc 9 91 0
 807 0002 C9B2     		uxtb	r1, r1
 808              	.LVL74:
 809              	.LBE128:
 810              	.LBE127:
 811              		.loc 15 6 0
 812 0004 0190     		str	r0, [sp, #4]
 813              	.LVL75:
 814              	.LBB130:
 815              	.LBB129:
  91:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
 816              		.loc 9 91 0
 817 0006 C1F18201 		rsb	r1, r1, #130
 818              	.LVL76:
 819              	.LBE129:
 820              	.LBE130:
   7:quantum/rgb_matrix_animations/solid_reactive_anim.h ****     hsv.h += qsub8(130, offset);
 821              		.loc 15 7 0
 822 000a C0B2     		uxtb	r0, r0
 823 000c 0029     		cmp	r1, #0
 824 000e A8BF     		it	ge
 825 0010 4018     		addge	r0, r0, r1
   8:quantum/rgb_matrix_animations/solid_reactive_anim.h ****     return hsv;
 826              		.loc 15 8 0
 827 0012 8DF80400 		strb	r0, [sp, #4]
 828              	.LVL77:
 829 0016 019B     		ldr	r3, [sp, #4]
 830 0018 0020     		movs	r0, #0
 831 001a DAB2     		uxtb	r2, r3
 832 001c 62F30700 		bfi	r0, r2, #0, #8
 833 0020 C3F30722 		ubfx	r2, r3, #8, #8
 834 0024 62F30F20 		bfi	r0, r2, #8, #8
 835 0028 C3F30743 		ubfx	r3, r3, #16, #8
 836 002c 63F31740 		bfi	r0, r3, #16, #8
   9:quantum/rgb_matrix_animations/solid_reactive_anim.h **** }
 837              		.loc 15 9 0
 838 0030 04B0     		add	sp, sp, #16
 839              		.cfi_def_cfa_offset 0
 840              		@ sp needed
 841 0032 7047     		bx	lr
 842              		.cfi_endproc
 843              	.LFE130:
 845              		.section	.text.SOLID_REACTIVE_WIDE_math,"ax",%progbits
 846              		.align	1
 847              		.syntax unified
 848              		.thumb
 849              		.thumb_func
 850              		.fpu fpv4-sp-d16
 852              	SOLID_REACTIVE_WIDE_math:
 853              	.LFB132:
 854              		.file 16 "quantum/rgb_matrix_animations/solid_reactive_wide.h"
   1:quantum/rgb_matrix_animations/solid_reactive_wide.h **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
   2:quantum/rgb_matrix_animations/solid_reactive_wide.h **** #    if !defined(DISABLE_RGB_MATRIX_SOLID_REACTIVE_WIDE) || !defined(DISABLE_RGB_MATRIX_SOLID_REACT
   3:quantum/rgb_matrix_animations/solid_reactive_wide.h **** 
   4:quantum/rgb_matrix_animations/solid_reactive_wide.h **** #        ifndef DISABLE_RGB_MATRIX_SOLID_REACTIVE_WIDE
   5:quantum/rgb_matrix_animations/solid_reactive_wide.h **** RGB_MATRIX_EFFECT(SOLID_REACTIVE_WIDE)
   6:quantum/rgb_matrix_animations/solid_reactive_wide.h **** #        endif
   7:quantum/rgb_matrix_animations/solid_reactive_wide.h **** 
   8:quantum/rgb_matrix_animations/solid_reactive_wide.h **** #        ifndef DISABLE_RGB_MATRIX_SOLID_REACTIVE_MULTIWIDE
   9:quantum/rgb_matrix_animations/solid_reactive_wide.h **** RGB_MATRIX_EFFECT(SOLID_REACTIVE_MULTIWIDE)
  10:quantum/rgb_matrix_animations/solid_reactive_wide.h **** #        endif
  11:quantum/rgb_matrix_animations/solid_reactive_wide.h **** 
  12:quantum/rgb_matrix_animations/solid_reactive_wide.h **** #        ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
  13:quantum/rgb_matrix_animations/solid_reactive_wide.h **** 
  14:quantum/rgb_matrix_animations/solid_reactive_wide.h **** static HSV SOLID_REACTIVE_WIDE_math(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint16_t tick) {
 855              		.loc 16 14 0
 856              		.cfi_startproc
 857              		@ args = 4, pretend = 0, frame = 16
 858              		@ frame_needed = 0, uses_anonymous_args = 0
 859              		@ link register save eliminated.
 860              	.LVL78:
 861 0000 84B0     		sub	sp, sp, #16
 862              		.cfi_def_cfa_offset 16
 863              	.LVL79:
  15:quantum/rgb_matrix_animations/solid_reactive_wide.h ****     uint16_t effect = tick + dist * 5;
 864              		.loc 16 15 0
 865 0002 03EB8302 		add	r2, r3, r3, lsl #2
 866              	.LVL80:
 867 0006 BDF81030 		ldrh	r3, [sp, #16]
 868              	.LVL81:
  14:quantum/rgb_matrix_animations/solid_reactive_wide.h ****     uint16_t effect = tick + dist * 5;
 869              		.loc 16 14 0
 870 000a 0190     		str	r0, [sp, #4]
 871              	.LVL82:
 872              		.loc 16 15 0
 873 000c 1344     		add	r3, r3, r2
 874 000e 9BB2     		uxth	r3, r3
 875              	.LVL83:
  16:quantum/rgb_matrix_animations/solid_reactive_wide.h ****     if (effect > 255) effect = 255;
  17:quantum/rgb_matrix_animations/solid_reactive_wide.h ****     hsv.v = qadd8(hsv.v, 255 - effect);
 876              		.loc 16 17 0
 877 0010 FF2B     		cmp	r3, #255
 878 0012 28BF     		it	cs
 879 0014 FF23     		movcs	r3, #255
 880              	.LVL84:
 881              	.LBB131:
 882              	.LBB132:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 883              		.loc 9 26 0
 884 0016 C0F30740 		ubfx	r0, r0, #16, #8
 885              	.LBE132:
 886              	.LBE131:
 887              		.loc 16 17 0
 888 001a DB43     		mvns	r3, r3
 889              	.LBB134:
 890              	.LBB133:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 891              		.loc 9 26 0
 892 001c 50FA83F3 		uxtab	r3, r0, r3
 893              	.LVL85:
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 894              		.loc 9 28 0
 895 0020 FF2B     		cmp	r3, #255
 896 0022 28BF     		it	cs
 897 0024 FF23     		movcs	r3, #255
 898              	.LVL86:
 899 0026 8DF80630 		strb	r3, [sp, #6]
 900              	.LBE133:
 901              	.LBE134:
  18:quantum/rgb_matrix_animations/solid_reactive_wide.h ****     return hsv;
 902              		.loc 16 18 0
 903 002a 019B     		ldr	r3, [sp, #4]
 904 002c 0020     		movs	r0, #0
 905              	.LVL87:
 906 002e DAB2     		uxtb	r2, r3
 907              	.LVL88:
 908 0030 62F30700 		bfi	r0, r2, #0, #8
 909 0034 C3F30722 		ubfx	r2, r3, #8, #8
 910 0038 62F30F20 		bfi	r0, r2, #8, #8
 911 003c C3F30743 		ubfx	r3, r3, #16, #8
 912 0040 63F31740 		bfi	r0, r3, #16, #8
  19:quantum/rgb_matrix_animations/solid_reactive_wide.h **** }
 913              		.loc 16 19 0
 914 0044 04B0     		add	sp, sp, #16
 915              		.cfi_def_cfa_offset 0
 916              	.LVL89:
 917              		@ sp needed
 918 0046 7047     		bx	lr
 919              		.cfi_endproc
 920              	.LFE132:
 922              		.section	.text.SOLID_REACTIVE_CROSS_math,"ax",%progbits
 923              		.align	1
 924              		.syntax unified
 925              		.thumb
 926              		.thumb_func
 927              		.fpu fpv4-sp-d16
 929              	SOLID_REACTIVE_CROSS_math:
 930              	.LFB135:
 931              		.file 17 "quantum/rgb_matrix_animations/solid_reactive_cross.h"
   1:quantum/rgb_matrix_animations/solid_reactive_cross.h **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
   2:quantum/rgb_matrix_animations/solid_reactive_cross.h **** #    if !defined(DISABLE_RGB_MATRIX_SOLID_REACTIVE_CROSS) || !defined(DISABLE_RGB_MATRIX_SOLID_REAC
   3:quantum/rgb_matrix_animations/solid_reactive_cross.h **** 
   4:quantum/rgb_matrix_animations/solid_reactive_cross.h **** #        ifndef DISABLE_RGB_MATRIX_SOLID_REACTIVE_CROSS
   5:quantum/rgb_matrix_animations/solid_reactive_cross.h **** RGB_MATRIX_EFFECT(SOLID_REACTIVE_CROSS)
   6:quantum/rgb_matrix_animations/solid_reactive_cross.h **** #        endif
   7:quantum/rgb_matrix_animations/solid_reactive_cross.h **** 
   8:quantum/rgb_matrix_animations/solid_reactive_cross.h **** #        ifndef DISABLE_RGB_MATRIX_SOLID_REACTIVE_MULTICROSS
   9:quantum/rgb_matrix_animations/solid_reactive_cross.h **** RGB_MATRIX_EFFECT(SOLID_REACTIVE_MULTICROSS)
  10:quantum/rgb_matrix_animations/solid_reactive_cross.h **** #        endif
  11:quantum/rgb_matrix_animations/solid_reactive_cross.h **** 
  12:quantum/rgb_matrix_animations/solid_reactive_cross.h **** #        ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
  13:quantum/rgb_matrix_animations/solid_reactive_cross.h **** 
  14:quantum/rgb_matrix_animations/solid_reactive_cross.h **** static HSV SOLID_REACTIVE_CROSS_math(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint16_t tick) 
 932              		.loc 17 14 0
 933              		.cfi_startproc
 934              		@ args = 4, pretend = 0, frame = 16
 935              		@ frame_needed = 0, uses_anonymous_args = 0
 936              	.LVL90:
 937 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 938              		.cfi_def_cfa_offset 24
 939              		.cfi_offset 4, -8
 940              		.cfi_offset 14, -4
 941              	.LVL91:
  15:quantum/rgb_matrix_animations/solid_reactive_cross.h ****     uint16_t effect = tick + dist;
  16:quantum/rgb_matrix_animations/solid_reactive_cross.h ****     dx              = dx < 0 ? dx * -1 : dx;
 942              		.loc 17 16 0
 943 0002 0029     		cmp	r1, #0
 944 0004 B8BF     		it	lt
 945 0006 4942     		rsblt	r1, r1, #0
 946              	.LVL92:
  17:quantum/rgb_matrix_animations/solid_reactive_cross.h ****     dy              = dy < 0 ? dy * -1 : dy;
 947              		.loc 17 17 0
 948 0008 002A     		cmp	r2, #0
 949 000a B8BF     		it	lt
 950 000c 5242     		rsblt	r2, r2, #0
 951              	.LVL93:
  18:quantum/rgb_matrix_animations/solid_reactive_cross.h ****     dx              = dx * 16 > 255 ? 255 : dx * 16;
 952              		.loc 17 18 0
 953 000e 09B2     		sxth	r1, r1
 954 0010 0901     		lsls	r1, r1, #4
  19:quantum/rgb_matrix_animations/solid_reactive_cross.h ****     dy              = dy * 16 > 255 ? 255 : dy * 16;
 955              		.loc 17 19 0
 956 0012 12B2     		sxth	r2, r2
 957 0014 1201     		lsls	r2, r2, #4
  18:quantum/rgb_matrix_animations/solid_reactive_cross.h ****     dx              = dx * 16 > 255 ? 255 : dx * 16;
 958              		.loc 17 18 0
 959 0016 FF29     		cmp	r1, #255
  15:quantum/rgb_matrix_animations/solid_reactive_cross.h ****     dx              = dx < 0 ? dx * -1 : dx;
 960              		.loc 17 15 0
 961 0018 BDF81840 		ldrh	r4, [sp, #24]
  14:quantum/rgb_matrix_animations/solid_reactive_cross.h ****     uint16_t effect = tick + dist;
 962              		.loc 17 14 0
 963 001c 0190     		str	r0, [sp, #4]
 964              	.LVL94:
  18:quantum/rgb_matrix_animations/solid_reactive_cross.h ****     dy              = dy * 16 > 255 ? 255 : dy * 16;
 965              		.loc 17 18 0
 966 001e A8BF     		it	ge
 967 0020 FF21     		movge	r1, #255
 968              		.loc 17 19 0
 969 0022 FF2A     		cmp	r2, #255
 970 0024 A8BF     		it	ge
 971 0026 FF22     		movge	r2, #255
  20:quantum/rgb_matrix_animations/solid_reactive_cross.h ****     effect += dx > dy ? dy : dx;
 972              		.loc 17 20 0
 973 0028 09B2     		sxth	r1, r1
  15:quantum/rgb_matrix_animations/solid_reactive_cross.h ****     dx              = dx < 0 ? dx * -1 : dx;
 974              		.loc 17 15 0
 975 002a 2344     		add	r3, r3, r4
 976              	.LVL95:
 977              		.loc 17 20 0
 978 002c 14B2     		sxth	r4, r2
 979 002e A142     		cmp	r1, r4
 980 0030 A8BF     		it	ge
 981 0032 2146     		movge	r1, r4
 982 0034 11FA83F3 		uxtah	r3, r1, r3
 983              	.LVL96:
 984 0038 9BB2     		uxth	r3, r3
 985              	.LVL97:
  21:quantum/rgb_matrix_animations/solid_reactive_cross.h ****     if (effect > 255) effect = 255;
  22:quantum/rgb_matrix_animations/solid_reactive_cross.h ****     hsv.v = qadd8(hsv.v, 255 - effect);
 986              		.loc 17 22 0
 987 003a FF2B     		cmp	r3, #255
 988 003c 28BF     		it	cs
 989 003e FF23     		movcs	r3, #255
 990              	.LVL98:
 991              	.LBB135:
 992              	.LBB136:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 993              		.loc 9 26 0
 994 0040 C0F30740 		ubfx	r0, r0, #16, #8
 995              	.LBE136:
 996              	.LBE135:
 997              		.loc 17 22 0
 998 0044 DB43     		mvns	r3, r3
 999              	.LBB138:
 1000              	.LBB137:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 1001              		.loc 9 26 0
 1002 0046 50FA83F3 		uxtab	r3, r0, r3
 1003              	.LVL99:
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 1004              		.loc 9 28 0
 1005 004a FF2B     		cmp	r3, #255
 1006 004c 28BF     		it	cs
 1007 004e FF23     		movcs	r3, #255
 1008              	.LVL100:
 1009 0050 8DF80630 		strb	r3, [sp, #6]
 1010              	.LBE137:
 1011              	.LBE138:
  23:quantum/rgb_matrix_animations/solid_reactive_cross.h ****     return hsv;
 1012              		.loc 17 23 0
 1013 0054 019B     		ldr	r3, [sp, #4]
 1014 0056 0020     		movs	r0, #0
 1015 0058 DAB2     		uxtb	r2, r3
 1016              	.LVL101:
 1017 005a 62F30700 		bfi	r0, r2, #0, #8
 1018 005e C3F30722 		ubfx	r2, r3, #8, #8
 1019 0062 62F30F20 		bfi	r0, r2, #8, #8
 1020 0066 C3F30743 		ubfx	r3, r3, #16, #8
 1021 006a 63F31740 		bfi	r0, r3, #16, #8
  24:quantum/rgb_matrix_animations/solid_reactive_cross.h **** }
 1022              		.loc 17 24 0
 1023 006e 04B0     		add	sp, sp, #16
 1024              		.cfi_def_cfa_offset 8
 1025              		@ sp needed
 1026 0070 10BD     		pop	{r4, pc}
 1027              		.cfi_endproc
 1028              	.LFE135:
 1030              		.section	.text.SOLID_REACTIVE_NEXUS_math,"ax",%progbits
 1031              		.align	1
 1032              		.syntax unified
 1033              		.thumb
 1034              		.thumb_func
 1035              		.fpu fpv4-sp-d16
 1037              	SOLID_REACTIVE_NEXUS_math:
 1038              	.LFB138:
 1039              		.file 18 "quantum/rgb_matrix_animations/solid_reactive_nexus.h"
   1:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
   2:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** #    if !defined(DISABLE_RGB_MATRIX_SOLID_REACTIVE_NEXUS) || !defined(DISABLE_RGB_MATRIX_SOLID_REAC
   3:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** 
   4:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** #        ifndef DISABLE_RGB_MATRIX_SOLID_REACTIVE_NEXUS
   5:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** RGB_MATRIX_EFFECT(SOLID_REACTIVE_NEXUS)
   6:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** #        endif
   7:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** 
   8:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** #        ifndef DISABLE_RGB_MATRIX_SOLID_REACTIVE_MULTINEXUS
   9:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** RGB_MATRIX_EFFECT(SOLID_REACTIVE_MULTINEXUS)
  10:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** #        endif
  11:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** 
  12:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** #        ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
  13:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** 
  14:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** static HSV SOLID_REACTIVE_NEXUS_math(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint16_t tick) 
 1040              		.loc 18 14 0
 1041              		.cfi_startproc
 1042              		@ args = 4, pretend = 0, frame = 16
 1043              		@ frame_needed = 0, uses_anonymous_args = 0
 1044              	.LVL102:
 1045 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 1046              		.cfi_def_cfa_offset 24
 1047              		.cfi_offset 4, -8
 1048              		.cfi_offset 14, -4
 1049              	.LVL103:
  15:quantum/rgb_matrix_animations/solid_reactive_nexus.h ****     uint16_t effect = tick - dist;
  16:quantum/rgb_matrix_animations/solid_reactive_nexus.h ****     if (effect > 255) effect = 255;
  17:quantum/rgb_matrix_animations/solid_reactive_nexus.h ****     if (dist > 72) effect = 255;
 1050              		.loc 18 17 0
 1051 0002 482B     		cmp	r3, #72
  14:quantum/rgb_matrix_animations/solid_reactive_nexus.h ****     uint16_t effect = tick - dist;
 1052              		.loc 18 14 0
 1053 0004 0190     		str	r0, [sp, #4]
 1054              	.LVL104:
 1055 0006 C0F30740 		ubfx	r0, r0, #16, #8
 1056              	.LVL105:
 1057              		.loc 18 17 0
 1058 000a 2FD8     		bhi	.L46
  15:quantum/rgb_matrix_animations/solid_reactive_nexus.h ****     uint16_t effect = tick - dist;
 1059              		.loc 18 15 0
 1060 000c BDF81840 		ldrh	r4, [sp, #24]
 1061 0010 E31A     		subs	r3, r4, r3
 1062              	.LVL106:
 1063 0012 9BB2     		uxth	r3, r3
 1064 0014 FF2B     		cmp	r3, #255
 1065 0016 28BF     		it	cs
 1066 0018 FF23     		movcs	r3, #255
 1067              	.L44:
 1068              	.LVL107:
  18:quantum/rgb_matrix_animations/solid_reactive_nexus.h ****     if ((dx > 8 || dx < -8) && (dy > 8 || dy < -8)) effect = 255;
 1069              		.loc 18 18 0
 1070 001a 0831     		adds	r1, r1, #8
 1071              	.LVL108:
 1072 001c 89B2     		uxth	r1, r1
 1073 001e 1029     		cmp	r1, #16
 1074 0020 05D9     		bls	.L45
 1075              		.loc 18 18 0 is_stmt 0 discriminator 1
 1076 0022 02F10801 		add	r1, r2, #8
 1077 0026 89B2     		uxth	r1, r1
 1078 0028 1129     		cmp	r1, #17
 1079 002a 28BF     		it	cs
 1080 002c FF23     		movcs	r3, #255
 1081              	.LVL109:
 1082              	.L45:
  19:quantum/rgb_matrix_animations/solid_reactive_nexus.h ****     hsv.v = qadd8(hsv.v, 255 - effect);
  20:quantum/rgb_matrix_animations/solid_reactive_nexus.h ****     hsv.h = rgb_matrix_config.hsv.h + dy / 4;
 1083              		.loc 18 20 0 is_stmt 1
 1084 002e 0421     		movs	r1, #4
 1085 0030 92FBF1F2 		sdiv	r2, r2, r1
 1086              	.LVL110:
 1087 0034 0E49     		ldr	r1, .L47
  19:quantum/rgb_matrix_animations/solid_reactive_nexus.h ****     hsv.v = qadd8(hsv.v, 255 - effect);
 1088              		.loc 18 19 0
 1089 0036 DB43     		mvns	r3, r3
 1090              	.LVL111:
 1091              	.LBB139:
 1092              	.LBB140:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 1093              		.loc 9 26 0
 1094 0038 50FA83F3 		uxtab	r3, r0, r3
 1095              	.LVL112:
 1096              	.LBE140:
 1097              	.LBE139:
 1098              		.loc 18 20 0
 1099 003c 4978     		ldrb	r1, [r1, #1]	@ zero_extendqisi2
 1100              	.LBB144:
 1101              	.LBB141:
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 1102              		.loc 9 28 0
 1103 003e FF2B     		cmp	r3, #255
 1104              	.LBE141:
 1105              	.LBE144:
 1106              		.loc 18 20 0
 1107 0040 0A44     		add	r2, r2, r1
 1108              	.LBB145:
 1109              	.LBB142:
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 1110              		.loc 9 28 0
 1111 0042 28BF     		it	cs
 1112 0044 FF23     		movcs	r3, #255
 1113              	.LVL113:
 1114              	.LBE142:
 1115              	.LBE145:
  21:quantum/rgb_matrix_animations/solid_reactive_nexus.h ****     return hsv;
 1116              		.loc 18 21 0
 1117 0046 8DF80420 		strb	r2, [sp, #4]
 1118              	.LBB146:
 1119              	.LBB143:
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 1120              		.loc 9 28 0
 1121 004a 8DF80630 		strb	r3, [sp, #6]
 1122              	.LBE143:
 1123              	.LBE146:
 1124              		.loc 18 21 0
 1125 004e 019B     		ldr	r3, [sp, #4]
 1126 0050 0020     		movs	r0, #0
 1127 0052 DAB2     		uxtb	r2, r3
 1128 0054 62F30700 		bfi	r0, r2, #0, #8
 1129 0058 C3F30722 		ubfx	r2, r3, #8, #8
 1130 005c 62F30F20 		bfi	r0, r2, #8, #8
 1131 0060 C3F30743 		ubfx	r3, r3, #16, #8
 1132 0064 63F31740 		bfi	r0, r3, #16, #8
  22:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** }
 1133              		.loc 18 22 0
 1134 0068 04B0     		add	sp, sp, #16
 1135              		.cfi_remember_state
 1136              		.cfi_def_cfa_offset 8
 1137              		@ sp needed
 1138 006a 10BD     		pop	{r4, pc}
 1139              	.LVL114:
 1140              	.L46:
 1141              		.cfi_restore_state
  17:quantum/rgb_matrix_animations/solid_reactive_nexus.h ****     if ((dx > 8 || dx < -8) && (dy > 8 || dy < -8)) effect = 255;
 1142              		.loc 18 17 0
 1143 006c FF23     		movs	r3, #255
 1144              	.LVL115:
 1145 006e D4E7     		b	.L44
 1146              	.L48:
 1147              		.align	2
 1148              	.L47:
 1149 0070 00000000 		.word	rgb_matrix_config
 1150              		.cfi_endproc
 1151              	.LFE138:
 1153              		.section	.text.SPLASH_math,"ax",%progbits
 1154              		.align	1
 1155              		.global	SPLASH_math
 1156              		.syntax unified
 1157              		.thumb
 1158              		.thumb_func
 1159              		.fpu fpv4-sp-d16
 1161              	SPLASH_math:
 1162              	.LFB141:
 1163              		.file 19 "quantum/rgb_matrix_animations/splash_anim.h"
   1:quantum/rgb_matrix_animations/splash_anim.h **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
   2:quantum/rgb_matrix_animations/splash_anim.h **** #    if !defined(DISABLE_RGB_MATRIX_SPLASH) || !defined(DISABLE_RGB_MATRIX_MULTISPLASH)
   3:quantum/rgb_matrix_animations/splash_anim.h **** 
   4:quantum/rgb_matrix_animations/splash_anim.h **** #        ifndef DISABLE_RGB_MATRIX_SPLASH
   5:quantum/rgb_matrix_animations/splash_anim.h **** RGB_MATRIX_EFFECT(SPLASH)
   6:quantum/rgb_matrix_animations/splash_anim.h **** #        endif
   7:quantum/rgb_matrix_animations/splash_anim.h **** 
   8:quantum/rgb_matrix_animations/splash_anim.h **** #        ifndef DISABLE_RGB_MATRIX_MULTISPLASH
   9:quantum/rgb_matrix_animations/splash_anim.h **** RGB_MATRIX_EFFECT(MULTISPLASH)
  10:quantum/rgb_matrix_animations/splash_anim.h **** #        endif
  11:quantum/rgb_matrix_animations/splash_anim.h **** 
  12:quantum/rgb_matrix_animations/splash_anim.h **** #        ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
  13:quantum/rgb_matrix_animations/splash_anim.h **** 
  14:quantum/rgb_matrix_animations/splash_anim.h **** HSV SPLASH_math(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint16_t tick) {
 1164              		.loc 19 14 0
 1165              		.cfi_startproc
 1166              		@ args = 4, pretend = 0, frame = 16
 1167              		@ frame_needed = 0, uses_anonymous_args = 0
 1168              		@ link register save eliminated.
 1169              	.LVL116:
 1170 0000 84B0     		sub	sp, sp, #16
 1171              		.cfi_def_cfa_offset 16
 1172              	.LVL117:
 1173              	.LBB147:
 1174              	.LBB148:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 1175              		.loc 9 26 0
 1176 0002 C0F30741 		ubfx	r1, r0, #16, #8
 1177              	.LVL118:
 1178              	.LBE148:
 1179              	.LBE147:
  15:quantum/rgb_matrix_animations/splash_anim.h ****     uint16_t effect = tick - dist;
 1180              		.loc 19 15 0
 1181 0006 BDF81020 		ldrh	r2, [sp, #16]
 1182              	.LVL119:
  14:quantum/rgb_matrix_animations/splash_anim.h ****     uint16_t effect = tick - dist;
 1183              		.loc 19 14 0
 1184 000a 0190     		str	r0, [sp, #4]
 1185              	.LVL120:
 1186              		.loc 19 15 0
 1187 000c D31A     		subs	r3, r2, r3
 1188              	.LVL121:
 1189 000e 9BB2     		uxth	r3, r3
 1190              	.LVL122:
  16:quantum/rgb_matrix_animations/splash_anim.h ****     if (effect > 255) effect = 255;
  17:quantum/rgb_matrix_animations/splash_anim.h ****     hsv.h += effect;
 1191              		.loc 19 17 0
 1192 0010 FF2B     		cmp	r3, #255
 1193 0012 28BF     		it	cs
 1194 0014 FF23     		movcs	r3, #255
 1195              	.LVL123:
 1196 0016 DBB2     		uxtb	r3, r3
 1197              	.LVL124:
  18:quantum/rgb_matrix_animations/splash_anim.h ****     hsv.v = qadd8(hsv.v, 255 - effect);
 1198              		.loc 19 18 0
 1199 0018 DA43     		mvns	r2, r3
 1200              	.LBB152:
 1201              	.LBB149:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 1202              		.loc 9 26 0
 1203 001a 51FA82F2 		uxtab	r2, r1, r2
 1204              	.LVL125:
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 1205              		.loc 9 28 0
 1206 001e FF2A     		cmp	r2, #255
 1207              	.LBE149:
 1208              	.LBE152:
  17:quantum/rgb_matrix_animations/splash_anim.h ****     hsv.v = qadd8(hsv.v, 255 - effect);
 1209              		.loc 19 17 0
 1210 0020 53FA80F0 		uxtab	r0, r3, r0
 1211              	.LBB153:
 1212              	.LBB150:
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 1213              		.loc 9 28 0
 1214 0024 28BF     		it	cs
 1215 0026 FF22     		movcs	r2, #255
 1216              	.LVL126:
 1217              	.LBE150:
 1218              	.LBE153:
  19:quantum/rgb_matrix_animations/splash_anim.h ****     return hsv;
 1219              		.loc 19 19 0
 1220 0028 8DF80400 		strb	r0, [sp, #4]
 1221              	.LVL127:
 1222              	.LBB154:
 1223              	.LBB151:
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 1224              		.loc 9 28 0
 1225 002c 8DF80620 		strb	r2, [sp, #6]
 1226              	.LBE151:
 1227              	.LBE154:
 1228              		.loc 19 19 0
 1229 0030 019B     		ldr	r3, [sp, #4]
 1230              	.LVL128:
 1231 0032 0020     		movs	r0, #0
 1232 0034 DAB2     		uxtb	r2, r3
 1233 0036 62F30700 		bfi	r0, r2, #0, #8
 1234 003a C3F30722 		ubfx	r2, r3, #8, #8
 1235 003e 62F30F20 		bfi	r0, r2, #8, #8
 1236 0042 C3F30743 		ubfx	r3, r3, #16, #8
 1237 0046 63F31740 		bfi	r0, r3, #16, #8
  20:quantum/rgb_matrix_animations/splash_anim.h **** }
 1238              		.loc 19 20 0
 1239 004a 04B0     		add	sp, sp, #16
 1240              		.cfi_def_cfa_offset 0
 1241              	.LVL129:
 1242              		@ sp needed
 1243 004c 7047     		bx	lr
 1244              		.cfi_endproc
 1245              	.LFE141:
 1247              		.section	.text.SOLID_SPLASH_math,"ax",%progbits
 1248              		.align	1
 1249              		.global	SOLID_SPLASH_math
 1250              		.syntax unified
 1251              		.thumb
 1252              		.thumb_func
 1253              		.fpu fpv4-sp-d16
 1255              	SOLID_SPLASH_math:
 1256              	.LFB144:
 1257              		.file 20 "quantum/rgb_matrix_animations/solid_splash_anim.h"
   1:quantum/rgb_matrix_animations/solid_splash_anim.h **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
   2:quantum/rgb_matrix_animations/solid_splash_anim.h **** #    if !defined(DISABLE_RGB_MATRIX_SOLID_SPLASH) || !defined(DISABLE_RGB_MATRIX_SOLID_MULTISPLASH)
   3:quantum/rgb_matrix_animations/solid_splash_anim.h **** 
   4:quantum/rgb_matrix_animations/solid_splash_anim.h **** #        ifndef DISABLE_RGB_MATRIX_SOLID_SPLASH
   5:quantum/rgb_matrix_animations/solid_splash_anim.h **** RGB_MATRIX_EFFECT(SOLID_SPLASH)
   6:quantum/rgb_matrix_animations/solid_splash_anim.h **** #        endif
   7:quantum/rgb_matrix_animations/solid_splash_anim.h **** 
   8:quantum/rgb_matrix_animations/solid_splash_anim.h **** #        ifndef DISABLE_RGB_MATRIX_SOLID_MULTISPLASH
   9:quantum/rgb_matrix_animations/solid_splash_anim.h **** RGB_MATRIX_EFFECT(SOLID_MULTISPLASH)
  10:quantum/rgb_matrix_animations/solid_splash_anim.h **** #        endif
  11:quantum/rgb_matrix_animations/solid_splash_anim.h **** 
  12:quantum/rgb_matrix_animations/solid_splash_anim.h **** #        ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
  13:quantum/rgb_matrix_animations/solid_splash_anim.h **** 
  14:quantum/rgb_matrix_animations/solid_splash_anim.h **** HSV SOLID_SPLASH_math(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint16_t tick) {
 1258              		.loc 20 14 0
 1259              		.cfi_startproc
 1260              		@ args = 4, pretend = 0, frame = 16
 1261              		@ frame_needed = 0, uses_anonymous_args = 0
 1262              		@ link register save eliminated.
 1263              	.LVL130:
 1264 0000 84B0     		sub	sp, sp, #16
 1265              		.cfi_def_cfa_offset 16
 1266              	.LVL131:
  15:quantum/rgb_matrix_animations/solid_splash_anim.h ****     uint16_t effect = tick - dist;
 1267              		.loc 20 15 0
 1268 0002 BDF81020 		ldrh	r2, [sp, #16]
 1269              	.LVL132:
  14:quantum/rgb_matrix_animations/solid_splash_anim.h ****     uint16_t effect = tick - dist;
 1270              		.loc 20 14 0
 1271 0006 0190     		str	r0, [sp, #4]
 1272              	.LVL133:
 1273              		.loc 20 15 0
 1274 0008 D21A     		subs	r2, r2, r3
 1275 000a 92B2     		uxth	r2, r2
 1276              	.LVL134:
  16:quantum/rgb_matrix_animations/solid_splash_anim.h ****     if (effect > 255) effect = 255;
  17:quantum/rgb_matrix_animations/solid_splash_anim.h ****     hsv.v = qadd8(hsv.v, 255 - effect);
 1277              		.loc 20 17 0
 1278 000c FF2A     		cmp	r2, #255
 1279 000e 28BF     		it	cs
 1280 0010 FF22     		movcs	r2, #255
 1281              	.LVL135:
 1282              	.LBB155:
 1283              	.LBB156:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 1284              		.loc 9 26 0
 1285 0012 C0F30740 		ubfx	r0, r0, #16, #8
 1286              	.LBE156:
 1287              	.LBE155:
 1288              		.loc 20 17 0
 1289 0016 D243     		mvns	r2, r2
 1290              	.LBB158:
 1291              	.LBB157:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 1292              		.loc 9 26 0
 1293 0018 50FA82F2 		uxtab	r2, r0, r2
 1294              	.LVL136:
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 1295              		.loc 9 28 0
 1296 001c FF2A     		cmp	r2, #255
 1297 001e 28BF     		it	cs
 1298 0020 FF22     		movcs	r2, #255
 1299              	.LVL137:
 1300 0022 8DF80620 		strb	r2, [sp, #6]
 1301              	.LBE157:
 1302              	.LBE158:
  18:quantum/rgb_matrix_animations/solid_splash_anim.h ****     return hsv;
 1303              		.loc 20 18 0
 1304 0026 019B     		ldr	r3, [sp, #4]
 1305              	.LVL138:
 1306 0028 0020     		movs	r0, #0
 1307 002a DAB2     		uxtb	r2, r3
 1308 002c 62F30700 		bfi	r0, r2, #0, #8
 1309 0030 C3F30722 		ubfx	r2, r3, #8, #8
 1310 0034 62F30F20 		bfi	r0, r2, #8, #8
 1311 0038 C3F30743 		ubfx	r3, r3, #16, #8
 1312 003c 63F31740 		bfi	r0, r3, #16, #8
  19:quantum/rgb_matrix_animations/solid_splash_anim.h **** }
 1313              		.loc 20 19 0
 1314 0040 04B0     		add	sp, sp, #16
 1315              		.cfi_def_cfa_offset 0
 1316              	.LVL139:
 1317              		@ sp needed
 1318 0042 7047     		bx	lr
 1319              		.cfi_endproc
 1320              	.LFE144:
 1322              		.section	.text.sqrt16.part.0,"ax",%progbits
 1323              		.align	1
 1324              		.syntax unified
 1325              		.thumb
 1326              		.thumb_func
 1327              		.fpu fpv4-sp-d16
 1329              	sqrt16.part.0:
 1330              	.LFB192:
 408:./lib/lib8tion/math8.h ****     return i;
 409:./lib/lib8tion/math8.h **** #elif ABS8_AVRASM == 1
 410:./lib/lib8tion/math8.h **** 
 411:./lib/lib8tion/math8.h **** 
 412:./lib/lib8tion/math8.h ****     asm volatile(
 413:./lib/lib8tion/math8.h ****          /* First, check the high bit, and prepare to skip if it's clear */
 414:./lib/lib8tion/math8.h ****          "sbrc %0, 7 \n"
 415:./lib/lib8tion/math8.h **** 
 416:./lib/lib8tion/math8.h ****          /* Negate the value */
 417:./lib/lib8tion/math8.h ****          "neg %0     \n"
 418:./lib/lib8tion/math8.h **** 
 419:./lib/lib8tion/math8.h ****          : "+r" (i) : "r" (i) );
 420:./lib/lib8tion/math8.h ****     return i;
 421:./lib/lib8tion/math8.h **** #else
 422:./lib/lib8tion/math8.h **** #error "No implementation for abs8 available."
 423:./lib/lib8tion/math8.h **** #endif
 424:./lib/lib8tion/math8.h **** }
 425:./lib/lib8tion/math8.h **** 
 426:./lib/lib8tion/math8.h **** ///         square root for 16-bit integers
 427:./lib/lib8tion/math8.h **** ///         About three times faster and five times smaller
 428:./lib/lib8tion/math8.h **** ///         than Arduino's general sqrt on AVR.
 429:./lib/lib8tion/math8.h **** LIB8STATIC uint8_t sqrt16(uint16_t x)
 1331              		.loc 9 429 0
 1332              		.cfi_startproc
 1333              		@ args = 0, pretend = 0, frame = 0
 1334              		@ frame_needed = 0, uses_anonymous_args = 0
 1335              	.LVL140:
 1336 0000 30B5     		push	{r4, r5, lr}
 1337              		.cfi_def_cfa_offset 12
 1338              		.cfi_offset 4, -12
 1339              		.cfi_offset 5, -8
 1340              		.cfi_offset 14, -4
 430:./lib/lib8tion/math8.h **** {
 431:./lib/lib8tion/math8.h ****     if( x <= 1) {
 432:./lib/lib8tion/math8.h ****         return x;
 433:./lib/lib8tion/math8.h ****     }
 434:./lib/lib8tion/math8.h **** 
 435:./lib/lib8tion/math8.h ****     uint8_t low = 1; // lower bound
 436:./lib/lib8tion/math8.h ****     uint8_t hi, mid;
 437:./lib/lib8tion/math8.h **** 
 438:./lib/lib8tion/math8.h ****     if( x > 7904) {
 1341              		.loc 9 438 0
 1342 0002 B0F5F75F 		cmp	r0, #7904
 439:./lib/lib8tion/math8.h ****         hi = 255;
 440:./lib/lib8tion/math8.h ****     } else {
 441:./lib/lib8tion/math8.h ****         hi = (x >> 5) + 8; // initial estimate for upper bound
 1343              		.loc 9 441 0
 1344 0006 9DBF     		ittte	ls
 1345 0008 4209     		lsrls	r2, r0, #5
 1346 000a 0832     		addls	r2, r2, #8
 1347 000c D2B2     		uxtbls	r2, r2
 1348              	.LVL141:
 439:./lib/lib8tion/math8.h ****         hi = 255;
 1349              		.loc 9 439 0
 1350 000e FF22     		movhi	r2, #255
 1351              	.LVL142:
 1352 0010 0121     		movs	r1, #1
 1353              	.LVL143:
 1354              	.L56:
 442:./lib/lib8tion/math8.h ****     }
 443:./lib/lib8tion/math8.h **** 
 444:./lib/lib8tion/math8.h ****     do {
 445:./lib/lib8tion/math8.h ****         mid = (low + hi) >> 1;
 1355              		.loc 9 445 0
 1356 0012 8B18     		adds	r3, r1, r2
 1357 0014 5B10     		asrs	r3, r3, #1
 446:./lib/lib8tion/math8.h ****         if ((uint16_t)(mid * mid) > x) {
 1358              		.loc 9 446 0
 1359 0016 03FB03F5 		mul	r5, r3, r3
 1360 001a ADB2     		uxth	r5, r5
 1361 001c 8542     		cmp	r5, r0
 445:./lib/lib8tion/math8.h ****         if ((uint16_t)(mid * mid) > x) {
 1362              		.loc 9 445 0
 1363 001e DCB2     		uxtb	r4, r3
 1364              	.LVL144:
 1365              		.loc 9 446 0
 1366 0020 06D9     		bls	.L53
 447:./lib/lib8tion/math8.h ****             hi = mid - 1;
 1367              		.loc 9 447 0
 1368 0022 621E     		subs	r2, r4, #1
 1369              	.LVL145:
 1370 0024 D2B2     		uxtb	r2, r2
 1371              	.LVL146:
 1372              	.L54:
 448:./lib/lib8tion/math8.h ****         } else {
 449:./lib/lib8tion/math8.h ****             if( mid == 255) {
 450:./lib/lib8tion/math8.h ****                 return 255;
 451:./lib/lib8tion/math8.h ****             }
 452:./lib/lib8tion/math8.h ****             low = mid + 1;
 453:./lib/lib8tion/math8.h ****         }
 454:./lib/lib8tion/math8.h ****     } while (hi >= low);
 1373              		.loc 9 454 0
 1374 0026 9142     		cmp	r1, r2
 1375 0028 F3D9     		bls	.L56
 455:./lib/lib8tion/math8.h **** 
 456:./lib/lib8tion/math8.h ****     return low - 1;
 1376              		.loc 9 456 0
 1377 002a 481E     		subs	r0, r1, #1
 1378              	.LVL147:
 1379 002c C0B2     		uxtb	r0, r0
 1380              	.L55:
 457:./lib/lib8tion/math8.h **** }
 1381              		.loc 9 457 0
 1382 002e 30BD     		pop	{r4, r5, pc}
 1383              	.LVL148:
 1384              	.L53:
 449:./lib/lib8tion/math8.h ****                 return 255;
 1385              		.loc 9 449 0
 1386 0030 FF2B     		cmp	r3, #255
 1387 0032 02D0     		beq	.L58
 452:./lib/lib8tion/math8.h ****         }
 1388              		.loc 9 452 0
 1389 0034 611C     		adds	r1, r4, #1
 1390              	.LVL149:
 1391 0036 C9B2     		uxtb	r1, r1
 1392              	.LVL150:
 1393 0038 F5E7     		b	.L54
 1394              	.L58:
 450:./lib/lib8tion/math8.h ****             }
 1395              		.loc 9 450 0
 1396 003a 1846     		mov	r0, r3
 1397              	.LVL151:
 1398 003c F7E7     		b	.L55
 1399              		.cfi_endproc
 1400              	.LFE192:
 1402              		.section	.text.CYCLE_OUT_IN_DUAL_math,"ax",%progbits
 1403              		.align	1
 1404              		.syntax unified
 1405              		.thumb
 1406              		.thumb_func
 1407              		.fpu fpv4-sp-d16
 1409              	CYCLE_OUT_IN_DUAL_math:
 1410              	.LFB112:
 1411              		.file 21 "quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h"
   1:quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h **** #ifndef DISABLE_RGB_MATRIX_CYCLE_OUT_IN_DUAL
   2:quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h **** RGB_MATRIX_EFFECT(CYCLE_OUT_IN_DUAL)
   3:quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h **** 
   5:quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h **** static HSV CYCLE_OUT_IN_DUAL_math(HSV hsv, int16_t dx, int16_t dy, uint8_t time) {
 1412              		.loc 21 5 0
 1413              		.cfi_startproc
 1414              		@ args = 0, pretend = 0, frame = 16
 1415              		@ frame_needed = 0, uses_anonymous_args = 0
 1416              	.LVL152:
 1417 0000 30B5     		push	{r4, r5, lr}
 1418              		.cfi_def_cfa_offset 12
 1419              		.cfi_offset 4, -12
 1420              		.cfi_offset 5, -8
 1421              		.cfi_offset 14, -4
   6:quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h ****     dx           = (k_rgb_matrix_center.x / 2) - abs8(dx);
 1422              		.loc 21 6 0
 1423 0002 4CB2     		sxtb	r4, r1
 1424              	.LBB163:
 1425              	.LBB164:
 407:./lib/lib8tion/math8.h ****     return i;
 1426              		.loc 9 407 0
 1427 0004 002C     		cmp	r4, #0
 1428 0006 B8BF     		it	lt
 1429 0008 4942     		rsblt	r1, r1, #0
 1430              	.LVL153:
 1431              	.LBE164:
 1432              	.LBE163:
   5:quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h ****     dx           = (k_rgb_matrix_center.x / 2) - abs8(dx);
 1433              		.loc 21 5 0
 1434 000a 85B0     		sub	sp, sp, #20
 1435              		.cfi_def_cfa_offset 32
 1436              	.LVL154:
 1437              	.LBB166:
 1438              	.LBB165:
 407:./lib/lib8tion/math8.h ****     return i;
 1439              		.loc 9 407 0
 1440 000c B8BF     		it	lt
 1441 000e 4CB2     		sxtblt	r4, r1
 1442              	.LVL155:
 1443              	.LBE165:
 1444              	.LBE166:
   5:quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h ****     dx           = (k_rgb_matrix_center.x / 2) - abs8(dx);
 1445              		.loc 21 5 0
 1446 0010 0190     		str	r0, [sp, #4]
 1447              	.LVL156:
   7:quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h ****     uint8_t dist = sqrt16(dx * dx + dy * dy);
 1448              		.loc 21 7 0
 1449 0012 5243     		muls	r2, r2, r2
 1450              	.LVL157:
   6:quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h ****     uint8_t dist = sqrt16(dx * dx + dy * dy);
 1451              		.loc 21 6 0
 1452 0014 C4F13800 		rsb	r0, r4, #56
 1453              		.loc 21 7 0
 1454 0018 10FB0020 		smlabb	r0, r0, r0, r2
 1455 001c 80B2     		uxth	r0, r0
 1456              	.LVL158:
 1457              	.LBB167:
 1458              	.LBB168:
 431:./lib/lib8tion/math8.h ****         return x;
 1459              		.loc 9 431 0
 1460 001e 0128     		cmp	r0, #1
 1461              	.LBE168:
 1462              	.LBE167:
   5:quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h ****     dx           = (k_rgb_matrix_center.x / 2) - abs8(dx);
 1463              		.loc 21 5 0
 1464 0020 1D46     		mov	r5, r3
 1465              	.LBB171:
 1466              	.LBB169:
 431:./lib/lib8tion/math8.h ****         return x;
 1467              		.loc 9 431 0
 1468 0022 14D8     		bhi	.L62
 432:./lib/lib8tion/math8.h ****     }
 1469              		.loc 9 432 0
 1470 0024 C0B2     		uxtb	r0, r0
 1471              	.LVL159:
 1472              	.L63:
 1473              	.LBE169:
 1474              	.LBE171:
   8:quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h ****     hsv.h        = 3 * dist + time;
 1475              		.loc 21 8 0
 1476 0026 00EB4000 		add	r0, r0, r0, lsl #1
 1477              	.LVL160:
 1478 002a 2844     		add	r0, r0, r5
   9:quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h ****     return hsv;
 1479              		.loc 21 9 0
 1480 002c 8DF80400 		strb	r0, [sp, #4]
 1481 0030 019B     		ldr	r3, [sp, #4]
 1482 0032 0020     		movs	r0, #0
 1483 0034 DAB2     		uxtb	r2, r3
 1484 0036 62F30700 		bfi	r0, r2, #0, #8
 1485 003a C3F30722 		ubfx	r2, r3, #8, #8
 1486 003e 62F30F20 		bfi	r0, r2, #8, #8
 1487 0042 C3F30743 		ubfx	r3, r3, #16, #8
 1488 0046 63F31740 		bfi	r0, r3, #16, #8
  10:quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h **** }
 1489              		.loc 21 10 0
 1490 004a 05B0     		add	sp, sp, #20
 1491              		.cfi_remember_state
 1492              		.cfi_def_cfa_offset 12
 1493              		@ sp needed
 1494 004c 30BD     		pop	{r4, r5, pc}
 1495              	.LVL161:
 1496              	.L62:
 1497              		.cfi_restore_state
 1498              	.LBB172:
 1499              	.LBB170:
 1500 004e FFF7FEFF 		bl	sqrt16.part.0
 1501              	.LVL162:
 1502 0052 E8E7     		b	.L63
 1503              	.LBE170:
 1504              	.LBE172:
 1505              		.cfi_endproc
 1506              	.LFE112:
 1508              		.section	.text.atan2_8,"ax",%progbits
 1509              		.align	1
 1510              		.syntax unified
 1511              		.thumb
 1512              		.thumb_func
 1513              		.fpu fpv4-sp-d16
 1515              	atan2_8:
 1516              	.LFB54:
 245:./lib/lib8tion/trig8.h **** 
 246:./lib/lib8tion/trig8.h **** /// Fast 8-bit approximation of cos(x). This approximation never varies more than
 247:./lib/lib8tion/trig8.h **** /// 2% from the floating point value you'd get by doing
 248:./lib/lib8tion/trig8.h **** ///
 249:./lib/lib8tion/trig8.h **** ///     float s = (cos(x) * 128.0) + 128;
 250:./lib/lib8tion/trig8.h **** ///
 251:./lib/lib8tion/trig8.h **** /// @param theta input angle from 0-255
 252:./lib/lib8tion/trig8.h **** /// @returns sin of theta, value between 0 and 255
 253:./lib/lib8tion/trig8.h **** LIB8STATIC uint8_t cos8( uint8_t theta)
 254:./lib/lib8tion/trig8.h **** {
 255:./lib/lib8tion/trig8.h ****     return sin8( theta + 64);
 256:./lib/lib8tion/trig8.h **** }
 257:./lib/lib8tion/trig8.h **** 
 258:./lib/lib8tion/trig8.h **** /// Fast 16-bit approximation of atan2(x).
 259:./lib/lib8tion/trig8.h **** /// @returns atan2, value between 0 and 255
 260:./lib/lib8tion/trig8.h **** LIB8STATIC uint8_t atan2_8(int16_t dy, int16_t dx)
 261:./lib/lib8tion/trig8.h **** {
 1517              		.loc 1 261 0
 1518              		.cfi_startproc
 1519              		@ args = 0, pretend = 0, frame = 0
 1520              		@ frame_needed = 0, uses_anonymous_args = 0
 1521              	.LVL163:
 1522 0000 10B5     		push	{r4, lr}
 1523              		.cfi_def_cfa_offset 8
 1524              		.cfi_offset 4, -8
 1525              		.cfi_offset 14, -4
 262:./lib/lib8tion/trig8.h ****     if (dy == 0)
 1526              		.loc 1 262 0
 1527 0002 28B9     		cbnz	r0, .L65
 263:./lib/lib8tion/trig8.h ****     {
 264:./lib/lib8tion/trig8.h ****         if (dx >= 0)
 1528              		.loc 1 264 0
 1529 0004 0029     		cmp	r1, #0
 265:./lib/lib8tion/trig8.h ****             return 0;
 1530              		.loc 1 265 0
 1531 0006 B4BF     		ite	lt
 1532 0008 8023     		movlt	r3, #128
 1533 000a 0023     		movge	r3, #0
 1534              	.LVL164:
 1535              	.L66:
 266:./lib/lib8tion/trig8.h ****         else
 267:./lib/lib8tion/trig8.h ****             return 128;
 268:./lib/lib8tion/trig8.h ****     }
 269:./lib/lib8tion/trig8.h **** 
 270:./lib/lib8tion/trig8.h ****     int16_t abs_y = dy > 0 ? dy : -dy;
 271:./lib/lib8tion/trig8.h ****     int8_t a;
 272:./lib/lib8tion/trig8.h **** 
 273:./lib/lib8tion/trig8.h ****     if (dx >= 0)
 274:./lib/lib8tion/trig8.h ****         a = 32 - (32 * (dx - abs_y) / (dx + abs_y));
 275:./lib/lib8tion/trig8.h ****     else
 276:./lib/lib8tion/trig8.h ****         a = 96 - (32 * (dx + abs_y) / (abs_y - dx));
 277:./lib/lib8tion/trig8.h **** 
 278:./lib/lib8tion/trig8.h ****     if (dy < 0)
 279:./lib/lib8tion/trig8.h ****         return -a;     // negate if in quad III or IV
 280:./lib/lib8tion/trig8.h ****     return a;
 281:./lib/lib8tion/trig8.h **** }
 1536              		.loc 1 281 0
 1537 000c 1846     		mov	r0, r3
 1538              	.LVL165:
 1539 000e 10BD     		pop	{r4, pc}
 1540              	.LVL166:
 1541              	.L65:
 1542              	.LBB175:
 1543              	.LBB176:
 270:./lib/lib8tion/trig8.h ****     int8_t a;
 1544              		.loc 1 270 0
 1545 0010 80EAE073 		eor	r3, r0, r0, asr #31
 1546 0014 A3EBE073 		sub	r3, r3, r0, asr #31
 1547 0018 1CB2     		sxth	r4, r3
 273:./lib/lib8tion/trig8.h ****         a = 32 - (32 * (dx - abs_y) / (dx + abs_y));
 1548              		.loc 1 273 0
 1549 001a 0029     		cmp	r1, #0
 274:./lib/lib8tion/trig8.h ****     else
 1550              		.loc 1 274 0
 1551 001c A8BF     		it	ge
 1552 001e 0B1B     		subge	r3, r1, r4
 1553 0020 01EB0402 		add	r2, r1, r4
 1554 0024 ABBF     		itete	ge
 1555 0026 5B01     		lslge	r3, r3, #5
 276:./lib/lib8tion/trig8.h **** 
 1556              		.loc 1 276 0
 1557 0028 5301     		lsllt	r3, r2, #5
 274:./lib/lib8tion/trig8.h ****     else
 1558              		.loc 1 274 0
 1559 002a 93FBF2F3 		sdivge	r3, r3, r2
 276:./lib/lib8tion/trig8.h **** 
 1560              		.loc 1 276 0
 1561 002e 611A     		sublt	r1, r4, r1
 1562              	.LVL167:
 274:./lib/lib8tion/trig8.h ****     else
 1563              		.loc 1 274 0
 1564 0030 AEBF     		itee	ge
 1565 0032 C3F12003 		rsbge	r3, r3, #32
 276:./lib/lib8tion/trig8.h **** 
 1566              		.loc 1 276 0
 1567 0036 93FBF1F3 		sdivlt	r3, r3, r1
 1568 003a C3F16003 		rsblt	r3, r3, #96
 1569 003e 5BB2     		sxtb	r3, r3
 1570              	.LVL168:
 1571 0040 DBB2     		uxtb	r3, r3
 278:./lib/lib8tion/trig8.h ****         return -a;     // negate if in quad III or IV
 1572              		.loc 1 278 0
 1573 0042 0028     		cmp	r0, #0
 279:./lib/lib8tion/trig8.h ****     return a;
 1574              		.loc 1 279 0
 1575 0044 BCBF     		itt	lt
 1576 0046 5B42     		rsblt	r3, r3, #0
 1577              	.LVL169:
 1578 0048 DBB2     		uxtblt	r3, r3
 1579 004a DFE7     		b	.L66
 1580              	.LBE176:
 1581              	.LBE175:
 1582              		.cfi_endproc
 1583              	.LFE54:
 1585              		.section	.text.BAND_PINWHEEL_SAT_math,"ax",%progbits
 1586              		.align	1
 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
 1590              		.fpu fpv4-sp-d16
 1592              	BAND_PINWHEEL_SAT_math:
 1593              	.LFB94:
 1594              		.file 22 "quantum/rgb_matrix_animations/colorband_pinwheel_sat_anim.h"
   1:quantum/rgb_matrix_animations/colorband_pinwheel_sat_anim.h **** #ifndef DISABLE_RGB_MATRIX_BAND_PINWHEEL_SAT
   2:quantum/rgb_matrix_animations/colorband_pinwheel_sat_anim.h **** RGB_MATRIX_EFFECT(BAND_PINWHEEL_SAT)
   3:quantum/rgb_matrix_animations/colorband_pinwheel_sat_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/colorband_pinwheel_sat_anim.h **** 
   5:quantum/rgb_matrix_animations/colorband_pinwheel_sat_anim.h **** static HSV BAND_PINWHEEL_SAT_math(HSV hsv, int16_t dx, int16_t dy, uint8_t time) {
 1595              		.loc 22 5 0
 1596              		.cfi_startproc
 1597              		@ args = 0, pretend = 0, frame = 16
 1598              		@ frame_needed = 0, uses_anonymous_args = 0
 1599              	.LVL170:
 1600 0000 30B5     		push	{r4, r5, lr}
 1601              		.cfi_def_cfa_offset 12
 1602              		.cfi_offset 4, -12
 1603              		.cfi_offset 5, -8
 1604              		.cfi_offset 14, -4
 1605 0002 85B0     		sub	sp, sp, #20
 1606              		.cfi_def_cfa_offset 32
 1607 0004 C0F30725 		ubfx	r5, r0, #8, #8
 1608              	.LVL171:
   6:quantum/rgb_matrix_animations/colorband_pinwheel_sat_anim.h ****     hsv.s = scale8(hsv.s - time - atan2_8(dy, dx) * 3, hsv.s);
 1609              		.loc 22 6 0
 1610 0008 EB1A     		subs	r3, r5, r3
 1611              	.LVL172:
   5:quantum/rgb_matrix_animations/colorband_pinwheel_sat_anim.h ****     hsv.s = scale8(hsv.s - time - atan2_8(dy, dx) * 3, hsv.s);
 1612              		.loc 22 5 0
 1613 000a 0190     		str	r0, [sp, #4]
 1614              		.loc 22 6 0
 1615 000c 1046     		mov	r0, r2
 1616 000e DCB2     		uxtb	r4, r3
 1617 0010 FFF7FEFF 		bl	atan2_8
 1618              	.LVL173:
 1619 0014 C0EB8013 		rsb	r3, r0, r0, lsl #6
 1620 0018 00EB8300 		add	r0, r0, r3, lsl #2
 1621              	.LVL174:
 1622 001c 0444     		add	r4, r4, r0
 1623              	.LBB177:
 1624              	.LBB178:
 1625              		.loc 3 26 0
 1626 001e E4B2     		uxtb	r4, r4
 1627 0020 14FB05F4 		smulbb	r4, r4, r5
 1628 0024 2412     		asrs	r4, r4, #8
 1629 0026 8DF80540 		strb	r4, [sp, #5]
 1630              	.LBE178:
 1631              	.LBE177:
   7:quantum/rgb_matrix_animations/colorband_pinwheel_sat_anim.h ****     return hsv;
 1632              		.loc 22 7 0
 1633 002a 019B     		ldr	r3, [sp, #4]
 1634 002c 0020     		movs	r0, #0
 1635 002e DAB2     		uxtb	r2, r3
 1636 0030 62F30700 		bfi	r0, r2, #0, #8
 1637 0034 C3F30722 		ubfx	r2, r3, #8, #8
 1638 0038 62F30F20 		bfi	r0, r2, #8, #8
 1639 003c C3F30743 		ubfx	r3, r3, #16, #8
 1640 0040 63F31740 		bfi	r0, r3, #16, #8
   8:quantum/rgb_matrix_animations/colorband_pinwheel_sat_anim.h **** }
 1641              		.loc 22 8 0
 1642 0044 05B0     		add	sp, sp, #20
 1643              		.cfi_def_cfa_offset 12
 1644              		@ sp needed
 1645 0046 30BD     		pop	{r4, r5, pc}
 1646              		.cfi_endproc
 1647              	.LFE94:
 1649              		.section	.text.BAND_PINWHEEL_VAL_math,"ax",%progbits
 1650              		.align	1
 1651              		.syntax unified
 1652              		.thumb
 1653              		.thumb_func
 1654              		.fpu fpv4-sp-d16
 1656              	BAND_PINWHEEL_VAL_math:
 1657              	.LFB96:
 1658              		.file 23 "quantum/rgb_matrix_animations/colorband_pinwheel_val_anim.h"
   1:quantum/rgb_matrix_animations/colorband_pinwheel_val_anim.h **** #ifndef DISABLE_RGB_MATRIX_BAND_PINWHEEL_VAL
   2:quantum/rgb_matrix_animations/colorband_pinwheel_val_anim.h **** RGB_MATRIX_EFFECT(BAND_PINWHEEL_VAL)
   3:quantum/rgb_matrix_animations/colorband_pinwheel_val_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/colorband_pinwheel_val_anim.h **** 
   5:quantum/rgb_matrix_animations/colorband_pinwheel_val_anim.h **** static HSV BAND_PINWHEEL_VAL_math(HSV hsv, int16_t dx, int16_t dy, uint8_t time) {
 1659              		.loc 23 5 0
 1660              		.cfi_startproc
 1661              		@ args = 0, pretend = 0, frame = 16
 1662              		@ frame_needed = 0, uses_anonymous_args = 0
 1663              	.LVL175:
 1664 0000 30B5     		push	{r4, r5, lr}
 1665              		.cfi_def_cfa_offset 12
 1666              		.cfi_offset 4, -12
 1667              		.cfi_offset 5, -8
 1668              		.cfi_offset 14, -4
 1669 0002 85B0     		sub	sp, sp, #20
 1670              		.cfi_def_cfa_offset 32
 1671 0004 C0F30745 		ubfx	r5, r0, #16, #8
 1672              	.LVL176:
   6:quantum/rgb_matrix_animations/colorband_pinwheel_val_anim.h ****     hsv.v = scale8(hsv.v - time - atan2_8(dy, dx) * 3, hsv.v);
 1673              		.loc 23 6 0
 1674 0008 EB1A     		subs	r3, r5, r3
 1675              	.LVL177:
   5:quantum/rgb_matrix_animations/colorband_pinwheel_val_anim.h ****     hsv.v = scale8(hsv.v - time - atan2_8(dy, dx) * 3, hsv.v);
 1676              		.loc 23 5 0
 1677 000a 0190     		str	r0, [sp, #4]
 1678              		.loc 23 6 0
 1679 000c 1046     		mov	r0, r2
 1680 000e DCB2     		uxtb	r4, r3
 1681 0010 FFF7FEFF 		bl	atan2_8
 1682              	.LVL178:
 1683 0014 C0EB8013 		rsb	r3, r0, r0, lsl #6
 1684 0018 00EB8300 		add	r0, r0, r3, lsl #2
 1685              	.LVL179:
 1686 001c 0444     		add	r4, r4, r0
 1687              	.LBB179:
 1688              	.LBB180:
 1689              		.loc 3 26 0
 1690 001e E4B2     		uxtb	r4, r4
 1691 0020 14FB05F4 		smulbb	r4, r4, r5
 1692 0024 2412     		asrs	r4, r4, #8
 1693 0026 8DF80640 		strb	r4, [sp, #6]
 1694              	.LBE180:
 1695              	.LBE179:
   7:quantum/rgb_matrix_animations/colorband_pinwheel_val_anim.h ****     return hsv;
 1696              		.loc 23 7 0
 1697 002a 019B     		ldr	r3, [sp, #4]
 1698 002c 0020     		movs	r0, #0
 1699 002e DAB2     		uxtb	r2, r3
 1700 0030 62F30700 		bfi	r0, r2, #0, #8
 1701 0034 C3F30722 		ubfx	r2, r3, #8, #8
 1702 0038 62F30F20 		bfi	r0, r2, #8, #8
 1703 003c C3F30743 		ubfx	r3, r3, #16, #8
 1704 0040 63F31740 		bfi	r0, r3, #16, #8
   8:quantum/rgb_matrix_animations/colorband_pinwheel_val_anim.h **** }
 1705              		.loc 23 8 0
 1706 0044 05B0     		add	sp, sp, #20
 1707              		.cfi_def_cfa_offset 12
 1708              		@ sp needed
 1709 0046 30BD     		pop	{r4, r5, pc}
 1710              		.cfi_endproc
 1711              	.LFE96:
 1713              		.section	.text.BAND_SPIRAL_SAT_math,"ax",%progbits
 1714              		.align	1
 1715              		.syntax unified
 1716              		.thumb
 1717              		.thumb_func
 1718              		.fpu fpv4-sp-d16
 1720              	BAND_SPIRAL_SAT_math:
 1721              	.LFB98:
 1722              		.file 24 "quantum/rgb_matrix_animations/colorband_spiral_sat_anim.h"
   1:quantum/rgb_matrix_animations/colorband_spiral_sat_anim.h **** #ifndef DISABLE_RGB_MATRIX_BAND_SPIRAL_SAT
   2:quantum/rgb_matrix_animations/colorband_spiral_sat_anim.h **** RGB_MATRIX_EFFECT(BAND_SPIRAL_SAT)
   3:quantum/rgb_matrix_animations/colorband_spiral_sat_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/colorband_spiral_sat_anim.h **** 
   5:quantum/rgb_matrix_animations/colorband_spiral_sat_anim.h **** static HSV BAND_SPIRAL_SAT_math(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint8_t time) {
 1723              		.loc 24 5 0
 1724              		.cfi_startproc
 1725              		@ args = 4, pretend = 0, frame = 16
 1726              		@ frame_needed = 0, uses_anonymous_args = 0
 1727              	.LVL180:
 1728 0000 30B5     		push	{r4, r5, lr}
 1729              		.cfi_def_cfa_offset 12
 1730              		.cfi_offset 4, -12
 1731              		.cfi_offset 5, -8
 1732              		.cfi_offset 14, -4
 1733 0002 85B0     		sub	sp, sp, #20
 1734              		.cfi_def_cfa_offset 32
 1735 0004 C0F30725 		ubfx	r5, r0, #8, #8
 1736              	.LVL181:
   6:quantum/rgb_matrix_animations/colorband_spiral_sat_anim.h ****     hsv.s = scale8(hsv.s + dist - time - atan2_8(dy, dx), hsv.s);
 1737              		.loc 24 6 0
 1738 0008 9DF82040 		ldrb	r4, [sp, #32]	@ zero_extendqisi2
   5:quantum/rgb_matrix_animations/colorband_spiral_sat_anim.h ****     hsv.s = scale8(hsv.s + dist - time - atan2_8(dy, dx), hsv.s);
 1739              		.loc 24 5 0
 1740 000c 0190     		str	r0, [sp, #4]
 1741              		.loc 24 6 0
 1742 000e 1046     		mov	r0, r2
 1743 0010 1C1B     		subs	r4, r3, r4
 1744 0012 FFF7FEFF 		bl	atan2_8
 1745              	.LVL182:
 1746 0016 2C44     		add	r4, r4, r5
 1747 0018 E4B2     		uxtb	r4, r4
 1748              	.LVL183:
 1749 001a 201A     		subs	r0, r4, r0
 1750              	.LVL184:
 1751              	.LBB181:
 1752              	.LBB182:
 1753              		.loc 3 26 0
 1754 001c C0B2     		uxtb	r0, r0
 1755 001e 10FB05F0 		smulbb	r0, r0, r5
 1756 0022 0012     		asrs	r0, r0, #8
 1757 0024 8DF80500 		strb	r0, [sp, #5]
 1758              	.LBE182:
 1759              	.LBE181:
   7:quantum/rgb_matrix_animations/colorband_spiral_sat_anim.h ****     return hsv;
 1760              		.loc 24 7 0
 1761 0028 019B     		ldr	r3, [sp, #4]
 1762 002a 0020     		movs	r0, #0
 1763 002c DAB2     		uxtb	r2, r3
 1764 002e 62F30700 		bfi	r0, r2, #0, #8
 1765 0032 C3F30722 		ubfx	r2, r3, #8, #8
 1766 0036 62F30F20 		bfi	r0, r2, #8, #8
 1767 003a C3F30743 		ubfx	r3, r3, #16, #8
 1768 003e 63F31740 		bfi	r0, r3, #16, #8
   8:quantum/rgb_matrix_animations/colorband_spiral_sat_anim.h **** }
 1769              		.loc 24 8 0
 1770 0042 05B0     		add	sp, sp, #20
 1771              		.cfi_def_cfa_offset 12
 1772              		@ sp needed
 1773 0044 30BD     		pop	{r4, r5, pc}
 1774              		.cfi_endproc
 1775              	.LFE98:
 1777              		.section	.text.BAND_SPIRAL_VAL_math,"ax",%progbits
 1778              		.align	1
 1779              		.syntax unified
 1780              		.thumb
 1781              		.thumb_func
 1782              		.fpu fpv4-sp-d16
 1784              	BAND_SPIRAL_VAL_math:
 1785              	.LFB100:
 1786              		.file 25 "quantum/rgb_matrix_animations/colorband_spiral_val_anim.h"
   1:quantum/rgb_matrix_animations/colorband_spiral_val_anim.h **** #ifndef DISABLE_RGB_MATRIX_BAND_SPIRAL_VAL
   2:quantum/rgb_matrix_animations/colorband_spiral_val_anim.h **** RGB_MATRIX_EFFECT(BAND_SPIRAL_VAL)
   3:quantum/rgb_matrix_animations/colorband_spiral_val_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/colorband_spiral_val_anim.h **** 
   5:quantum/rgb_matrix_animations/colorband_spiral_val_anim.h **** static HSV BAND_SPIRAL_VAL_math(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint8_t time) {
 1787              		.loc 25 5 0
 1788              		.cfi_startproc
 1789              		@ args = 4, pretend = 0, frame = 16
 1790              		@ frame_needed = 0, uses_anonymous_args = 0
 1791              	.LVL185:
 1792 0000 30B5     		push	{r4, r5, lr}
 1793              		.cfi_def_cfa_offset 12
 1794              		.cfi_offset 4, -12
 1795              		.cfi_offset 5, -8
 1796              		.cfi_offset 14, -4
 1797 0002 85B0     		sub	sp, sp, #20
 1798              		.cfi_def_cfa_offset 32
 1799 0004 C0F30745 		ubfx	r5, r0, #16, #8
 1800              	.LVL186:
   6:quantum/rgb_matrix_animations/colorband_spiral_val_anim.h ****     hsv.v = scale8(hsv.v + dist - time - atan2_8(dy, dx), hsv.v);
 1801              		.loc 25 6 0
 1802 0008 9DF82040 		ldrb	r4, [sp, #32]	@ zero_extendqisi2
   5:quantum/rgb_matrix_animations/colorband_spiral_val_anim.h ****     hsv.v = scale8(hsv.v + dist - time - atan2_8(dy, dx), hsv.v);
 1803              		.loc 25 5 0
 1804 000c 0190     		str	r0, [sp, #4]
 1805              		.loc 25 6 0
 1806 000e 1046     		mov	r0, r2
 1807 0010 1C1B     		subs	r4, r3, r4
 1808 0012 FFF7FEFF 		bl	atan2_8
 1809              	.LVL187:
 1810 0016 2C44     		add	r4, r4, r5
 1811 0018 E4B2     		uxtb	r4, r4
 1812              	.LVL188:
 1813 001a 201A     		subs	r0, r4, r0
 1814              	.LVL189:
 1815              	.LBB183:
 1816              	.LBB184:
 1817              		.loc 3 26 0
 1818 001c C0B2     		uxtb	r0, r0
 1819 001e 10FB05F0 		smulbb	r0, r0, r5
 1820 0022 0012     		asrs	r0, r0, #8
 1821 0024 8DF80600 		strb	r0, [sp, #6]
 1822              	.LBE184:
 1823              	.LBE183:
   7:quantum/rgb_matrix_animations/colorband_spiral_val_anim.h ****     return hsv;
 1824              		.loc 25 7 0
 1825 0028 019B     		ldr	r3, [sp, #4]
 1826 002a 0020     		movs	r0, #0
 1827 002c DAB2     		uxtb	r2, r3
 1828 002e 62F30700 		bfi	r0, r2, #0, #8
 1829 0032 C3F30722 		ubfx	r2, r3, #8, #8
 1830 0036 62F30F20 		bfi	r0, r2, #8, #8
 1831 003a C3F30743 		ubfx	r3, r3, #16, #8
 1832 003e 63F31740 		bfi	r0, r3, #16, #8
   8:quantum/rgb_matrix_animations/colorband_spiral_val_anim.h **** }
 1833              		.loc 25 8 0
 1834 0042 05B0     		add	sp, sp, #20
 1835              		.cfi_def_cfa_offset 12
 1836              		@ sp needed
 1837 0044 30BD     		pop	{r4, r5, pc}
 1838              		.cfi_endproc
 1839              	.LFE100:
 1841              		.section	.text.CYCLE_PINWHEEL_math,"ax",%progbits
 1842              		.align	1
 1843              		.syntax unified
 1844              		.thumb
 1845              		.thumb_func
 1846              		.fpu fpv4-sp-d16
 1848              	CYCLE_PINWHEEL_math:
 1849              	.LFB114:
 1850              		.file 26 "quantum/rgb_matrix_animations/cycle_pinwheel_anim.h"
   1:quantum/rgb_matrix_animations/cycle_pinwheel_anim.h **** #ifndef DISABLE_RGB_MATRIX_CYCLE_PINWHEEL
   2:quantum/rgb_matrix_animations/cycle_pinwheel_anim.h **** RGB_MATRIX_EFFECT(CYCLE_PINWHEEL)
   3:quantum/rgb_matrix_animations/cycle_pinwheel_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/cycle_pinwheel_anim.h **** 
   5:quantum/rgb_matrix_animations/cycle_pinwheel_anim.h **** static HSV CYCLE_PINWHEEL_math(HSV hsv, int16_t dx, int16_t dy, uint8_t time) {
 1851              		.loc 26 5 0
 1852              		.cfi_startproc
 1853              		@ args = 0, pretend = 0, frame = 16
 1854              		@ frame_needed = 0, uses_anonymous_args = 0
 1855              	.LVL190:
 1856 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 1857              		.cfi_def_cfa_offset 24
 1858              		.cfi_offset 4, -8
 1859              		.cfi_offset 14, -4
 1860              	.LVL191:
 1861              		.loc 26 5 0
 1862 0002 0190     		str	r0, [sp, #4]
 1863              	.LVL192:
   6:quantum/rgb_matrix_animations/cycle_pinwheel_anim.h ****     hsv.h = atan2_8(dy, dx) + time;
 1864              		.loc 26 6 0
 1865 0004 1046     		mov	r0, r2
   5:quantum/rgb_matrix_animations/cycle_pinwheel_anim.h ****     hsv.h = atan2_8(dy, dx) + time;
 1866              		.loc 26 5 0
 1867 0006 1C46     		mov	r4, r3
 1868              		.loc 26 6 0
 1869 0008 FFF7FEFF 		bl	atan2_8
 1870              	.LVL193:
 1871 000c 2044     		add	r0, r0, r4
 1872              	.LVL194:
   7:quantum/rgb_matrix_animations/cycle_pinwheel_anim.h ****     return hsv;
 1873              		.loc 26 7 0
 1874 000e 8DF80400 		strb	r0, [sp, #4]
 1875 0012 019B     		ldr	r3, [sp, #4]
 1876 0014 0020     		movs	r0, #0
 1877 0016 DAB2     		uxtb	r2, r3
 1878 0018 62F30700 		bfi	r0, r2, #0, #8
 1879 001c C3F30722 		ubfx	r2, r3, #8, #8
 1880 0020 62F30F20 		bfi	r0, r2, #8, #8
 1881 0024 C3F30743 		ubfx	r3, r3, #16, #8
 1882 0028 63F31740 		bfi	r0, r3, #16, #8
   8:quantum/rgb_matrix_animations/cycle_pinwheel_anim.h **** }
 1883              		.loc 26 8 0
 1884 002c 04B0     		add	sp, sp, #16
 1885              		.cfi_def_cfa_offset 8
 1886              		@ sp needed
 1887 002e 10BD     		pop	{r4, pc}
 1888              		.cfi_endproc
 1889              	.LFE114:
 1891              		.section	.text.CYCLE_SPIRAL_math,"ax",%progbits
 1892              		.align	1
 1893              		.syntax unified
 1894              		.thumb
 1895              		.thumb_func
 1896              		.fpu fpv4-sp-d16
 1898              	CYCLE_SPIRAL_math:
 1899              	.LFB116:
 1900              		.file 27 "quantum/rgb_matrix_animations/cycle_spiral_anim.h"
   1:quantum/rgb_matrix_animations/cycle_spiral_anim.h **** #ifndef DISABLE_RGB_MATRIX_CYCLE_SPIRAL
   2:quantum/rgb_matrix_animations/cycle_spiral_anim.h **** RGB_MATRIX_EFFECT(CYCLE_SPIRAL)
   3:quantum/rgb_matrix_animations/cycle_spiral_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/cycle_spiral_anim.h **** 
   5:quantum/rgb_matrix_animations/cycle_spiral_anim.h **** static HSV CYCLE_SPIRAL_math(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint8_t time) {
 1901              		.loc 27 5 0
 1902              		.cfi_startproc
 1903              		@ args = 4, pretend = 0, frame = 16
 1904              		@ frame_needed = 0, uses_anonymous_args = 0
 1905              	.LVL195:
 1906 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 1907              		.cfi_def_cfa_offset 24
 1908              		.cfi_offset 4, -8
 1909              		.cfi_offset 14, -4
 1910              	.LVL196:
   6:quantum/rgb_matrix_animations/cycle_spiral_anim.h ****     hsv.h = dist - time - atan2_8(dy, dx);
 1911              		.loc 27 6 0
 1912 0002 9DF81840 		ldrb	r4, [sp, #24]	@ zero_extendqisi2
   5:quantum/rgb_matrix_animations/cycle_spiral_anim.h ****     hsv.h = dist - time - atan2_8(dy, dx);
 1913              		.loc 27 5 0
 1914 0006 0190     		str	r0, [sp, #4]
 1915              	.LVL197:
 1916              		.loc 27 6 0
 1917 0008 1046     		mov	r0, r2
 1918 000a 1C1B     		subs	r4, r3, r4
 1919 000c FFF7FEFF 		bl	atan2_8
 1920              	.LVL198:
 1921 0010 E4B2     		uxtb	r4, r4
 1922              	.LVL199:
 1923 0012 201A     		subs	r0, r4, r0
 1924              	.LVL200:
   7:quantum/rgb_matrix_animations/cycle_spiral_anim.h ****     return hsv;
 1925              		.loc 27 7 0
 1926 0014 8DF80400 		strb	r0, [sp, #4]
 1927 0018 019B     		ldr	r3, [sp, #4]
 1928 001a 0020     		movs	r0, #0
 1929 001c DAB2     		uxtb	r2, r3
 1930 001e 62F30700 		bfi	r0, r2, #0, #8
 1931 0022 C3F30722 		ubfx	r2, r3, #8, #8
 1932 0026 62F30F20 		bfi	r0, r2, #8, #8
 1933 002a C3F30743 		ubfx	r3, r3, #16, #8
 1934 002e 63F31740 		bfi	r0, r3, #16, #8
   8:quantum/rgb_matrix_animations/cycle_spiral_anim.h **** }
 1935              		.loc 27 8 0
 1936 0032 04B0     		add	sp, sp, #16
 1937              		.cfi_def_cfa_offset 8
 1938              		@ sp needed
 1939 0034 10BD     		pop	{r4, pc}
 1940              		.cfi_endproc
 1941              	.LFE116:
 1943              		.section	.text.eeconfig_read_rgb_matrix,"ax",%progbits
 1944              		.align	1
 1945              		.global	eeconfig_read_rgb_matrix
 1946              		.syntax unified
 1947              		.thumb
 1948              		.thumb_func
 1949              		.fpu fpv4-sp-d16
 1951              	eeconfig_read_rgb_matrix:
 1952              	.LFB147:
 1953              		.file 28 "quantum/rgb_matrix.c"
   1:quantum/rgb_matrix.c **** /* Copyright 2017 Jason Williams
   2:quantum/rgb_matrix.c ****  * Copyright 2017 Jack Humbert
   3:quantum/rgb_matrix.c ****  * Copyright 2018 Yiancar
   4:quantum/rgb_matrix.c ****  *
   5:quantum/rgb_matrix.c ****  * This program is free software: you can redistribute it and/or modify
   6:quantum/rgb_matrix.c ****  * it under the terms of the GNU General Public License as published by
   7:quantum/rgb_matrix.c ****  * the Free Software Foundation, either version 2 of the License, or
   8:quantum/rgb_matrix.c ****  * (at your option) any later version.
   9:quantum/rgb_matrix.c ****  *
  10:quantum/rgb_matrix.c ****  * This program is distributed in the hope that it will be useful,
  11:quantum/rgb_matrix.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:quantum/rgb_matrix.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:quantum/rgb_matrix.c ****  * GNU General Public License for more details.
  14:quantum/rgb_matrix.c ****  *
  15:quantum/rgb_matrix.c ****  * You should have received a copy of the GNU General Public License
  16:quantum/rgb_matrix.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:quantum/rgb_matrix.c ****  */
  18:quantum/rgb_matrix.c **** 
  19:quantum/rgb_matrix.c **** #include "rgb_matrix.h"
  20:quantum/rgb_matrix.c **** #include "progmem.h"
  21:quantum/rgb_matrix.c **** #include "config.h"
  22:quantum/rgb_matrix.c **** #include "eeprom.h"
  23:quantum/rgb_matrix.c **** #include <string.h>
  24:quantum/rgb_matrix.c **** #include <math.h>
  25:quantum/rgb_matrix.c **** 
  26:quantum/rgb_matrix.c **** #include "lib/lib8tion/lib8tion.h"
  27:quantum/rgb_matrix.c **** 
  28:quantum/rgb_matrix.c **** #ifndef RGB_MATRIX_CENTER
  29:quantum/rgb_matrix.c **** const point_t k_rgb_matrix_center = {112, 32};
  30:quantum/rgb_matrix.c **** #else
  31:quantum/rgb_matrix.c **** const point_t k_rgb_matrix_center = RGB_MATRIX_CENTER;
  32:quantum/rgb_matrix.c **** #endif
  33:quantum/rgb_matrix.c **** 
  34:quantum/rgb_matrix.c **** // Generic effect runners
  35:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_dx_dy_dist.h"
  36:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_dx_dy.h"
  37:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_i.h"
  38:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_sin_cos_i.h"
  39:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_reactive.h"
  40:quantum/rgb_matrix.c **** #include "rgb_matrix_runners/effect_runner_reactive_splash.h"
  41:quantum/rgb_matrix.c **** 
  42:quantum/rgb_matrix.c **** // ------------------------------------------
  43:quantum/rgb_matrix.c **** // -----Begin rgb effect includes macros-----
  44:quantum/rgb_matrix.c **** #define RGB_MATRIX_EFFECT(name)
  45:quantum/rgb_matrix.c **** #define RGB_MATRIX_CUSTOM_EFFECT_IMPLS
  46:quantum/rgb_matrix.c **** 
  47:quantum/rgb_matrix.c **** #include "rgb_matrix_animations/rgb_matrix_effects.inc"
  48:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_CUSTOM_KB
  49:quantum/rgb_matrix.c **** #    include "rgb_matrix_kb.inc"
  50:quantum/rgb_matrix.c **** #endif
  51:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_CUSTOM_USER
  52:quantum/rgb_matrix.c **** #    include "rgb_matrix_user.inc"
  53:quantum/rgb_matrix.c **** #endif
  54:quantum/rgb_matrix.c **** 
  55:quantum/rgb_matrix.c **** #undef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
  56:quantum/rgb_matrix.c **** #undef RGB_MATRIX_EFFECT
  57:quantum/rgb_matrix.c **** // -----End rgb effect includes macros-------
  58:quantum/rgb_matrix.c **** // ------------------------------------------
  59:quantum/rgb_matrix.c **** 
  60:quantum/rgb_matrix.c **** #ifndef RGB_DISABLE_AFTER_TIMEOUT
  61:quantum/rgb_matrix.c **** #    define RGB_DISABLE_AFTER_TIMEOUT 0
  62:quantum/rgb_matrix.c **** #endif
  63:quantum/rgb_matrix.c **** 
  64:quantum/rgb_matrix.c **** #ifndef RGB_DISABLE_WHEN_USB_SUSPENDED
  65:quantum/rgb_matrix.c **** #    define RGB_DISABLE_WHEN_USB_SUSPENDED false
  66:quantum/rgb_matrix.c **** #endif
  67:quantum/rgb_matrix.c **** 
  68:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_MAXIMUM_BRIGHTNESS) || RGB_MATRIX_MAXIMUM_BRIGHTNESS > UINT8_MAX
  69:quantum/rgb_matrix.c **** #    undef RGB_MATRIX_MAXIMUM_BRIGHTNESS
  70:quantum/rgb_matrix.c **** #    define RGB_MATRIX_MAXIMUM_BRIGHTNESS UINT8_MAX
  71:quantum/rgb_matrix.c **** #endif
  72:quantum/rgb_matrix.c **** 
  73:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_HUE_STEP)
  74:quantum/rgb_matrix.c **** #    define RGB_MATRIX_HUE_STEP 8
  75:quantum/rgb_matrix.c **** #endif
  76:quantum/rgb_matrix.c **** 
  77:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_SAT_STEP)
  78:quantum/rgb_matrix.c **** #    define RGB_MATRIX_SAT_STEP 16
  79:quantum/rgb_matrix.c **** #endif
  80:quantum/rgb_matrix.c **** 
  81:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_VAL_STEP)
  82:quantum/rgb_matrix.c **** #    define RGB_MATRIX_VAL_STEP 16
  83:quantum/rgb_matrix.c **** #endif
  84:quantum/rgb_matrix.c **** 
  85:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_SPD_STEP)
  86:quantum/rgb_matrix.c **** #    define RGB_MATRIX_SPD_STEP 16
  87:quantum/rgb_matrix.c **** #endif
  88:quantum/rgb_matrix.c **** 
  89:quantum/rgb_matrix.c **** #if !defined(RGB_MATRIX_STARTUP_MODE)
  90:quantum/rgb_matrix.c **** #    ifndef DISABLE_RGB_MATRIX_CYCLE_LEFT_RIGHT
  91:quantum/rgb_matrix.c **** #        define RGB_MATRIX_STARTUP_MODE RGB_MATRIX_CYCLE_LEFT_RIGHT
  92:quantum/rgb_matrix.c **** #    else
  93:quantum/rgb_matrix.c **** // fallback to solid colors if RGB_MATRIX_CYCLE_LEFT_RIGHT is disabled in userspace
  94:quantum/rgb_matrix.c **** #        define RGB_MATRIX_STARTUP_MODE RGB_MATRIX_SOLID_COLOR
  95:quantum/rgb_matrix.c **** #    endif
  96:quantum/rgb_matrix.c **** #endif
  97:quantum/rgb_matrix.c **** 
  98:quantum/rgb_matrix.c **** bool g_suspend_state = false;
  99:quantum/rgb_matrix.c **** 
 100:quantum/rgb_matrix.c **** rgb_config_t rgb_matrix_config;
 101:quantum/rgb_matrix.c **** 
 102:quantum/rgb_matrix.c **** rgb_counters_t  g_rgb_counters;
 103:quantum/rgb_matrix.c **** static uint32_t rgb_counters_buffer;
 104:quantum/rgb_matrix.c **** 
 105:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_FRAMEBUFFER_EFFECTS
 106:quantum/rgb_matrix.c **** uint8_t rgb_frame_buffer[MATRIX_ROWS][MATRIX_COLS] = {{0}};
 107:quantum/rgb_matrix.c **** #endif
 108:quantum/rgb_matrix.c **** 
 109:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 110:quantum/rgb_matrix.c **** last_hit_t        g_last_hit_tracker;
 111:quantum/rgb_matrix.c **** static last_hit_t last_hit_buffer;
 112:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 113:quantum/rgb_matrix.c **** 
 114:quantum/rgb_matrix.c **** void eeconfig_read_rgb_matrix(void) { eeprom_read_block(&rgb_matrix_config, EECONFIG_RGB_MATRIX, si
 1954              		.loc 28 114 0
 1955              		.cfi_startproc
 1956              		@ args = 0, pretend = 0, frame = 0
 1957              		@ frame_needed = 0, uses_anonymous_args = 0
 1958              		@ link register save eliminated.
 1959              		.loc 28 114 0
 1960 0000 0822     		movs	r2, #8
 1961 0002 1C21     		movs	r1, #28
 1962 0004 0148     		ldr	r0, .L78
 1963 0006 FFF7FEBF 		b	eeprom_read_block
 1964              	.LVL201:
 1965              	.L79:
 1966 000a 00BF     		.align	2
 1967              	.L78:
 1968 000c 00000000 		.word	rgb_matrix_config
 1969              		.cfi_endproc
 1970              	.LFE147:
 1972              		.section	.text.eeconfig_update_rgb_matrix,"ax",%progbits
 1973              		.align	1
 1974              		.global	eeconfig_update_rgb_matrix
 1975              		.syntax unified
 1976              		.thumb
 1977              		.thumb_func
 1978              		.fpu fpv4-sp-d16
 1980              	eeconfig_update_rgb_matrix:
 1981              	.LFB148:
 115:quantum/rgb_matrix.c **** 
 116:quantum/rgb_matrix.c **** void eeconfig_update_rgb_matrix(void) { eeprom_update_block(&rgb_matrix_config, EECONFIG_RGB_MATRIX
 1982              		.loc 28 116 0
 1983              		.cfi_startproc
 1984              		@ args = 0, pretend = 0, frame = 0
 1985              		@ frame_needed = 0, uses_anonymous_args = 0
 1986              		@ link register save eliminated.
 1987              		.loc 28 116 0
 1988 0000 0822     		movs	r2, #8
 1989 0002 1C21     		movs	r1, #28
 1990 0004 0148     		ldr	r0, .L81
 1991 0006 FFF7FEBF 		b	eeprom_update_block
 1992              	.LVL202:
 1993              	.L82:
 1994 000a 00BF     		.align	2
 1995              	.L81:
 1996 000c 00000000 		.word	rgb_matrix_config
 1997              		.cfi_endproc
 1998              	.LFE148:
 2000              		.section	.text.eeconfig_update_rgb_matrix_default,"ax",%progbits
 2001              		.align	1
 2002              		.global	eeconfig_update_rgb_matrix_default
 2003              		.syntax unified
 2004              		.thumb
 2005              		.thumb_func
 2006              		.fpu fpv4-sp-d16
 2008              	eeconfig_update_rgb_matrix_default:
 2009              	.LFB149:
 117:quantum/rgb_matrix.c **** 
 118:quantum/rgb_matrix.c **** void eeconfig_update_rgb_matrix_default(void) {
 2010              		.loc 28 118 0
 2011              		.cfi_startproc
 2012              		@ args = 0, pretend = 0, frame = 0
 2013              		@ frame_needed = 0, uses_anonymous_args = 0
 2014              		@ link register save eliminated.
 119:quantum/rgb_matrix.c ****     dprintf("eeconfig_update_rgb_matrix_default\n");
 120:quantum/rgb_matrix.c ****     rgb_matrix_config.enable = 1;
 2015              		.loc 28 120 0
 2016 0000 074B     		ldr	r3, .L84
 2017 0002 1A46     		mov	r2, r3
 2018 0004 3121     		movs	r1, #49
 2019 0006 02F8011B 		strb	r1, [r2], #1
 121:quantum/rgb_matrix.c ****     rgb_matrix_config.mode   = RGB_MATRIX_STARTUP_MODE;
 122:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv    = (HSV){0, UINT8_MAX, RGB_MATRIX_MAXIMUM_BRIGHTNESS};
 2020              		.loc 28 122 0
 2021 000a 0649     		ldr	r1, .L84+4
 2022 000c 31F8080F 		ldrh	r0, [r1, #8]!	@ unaligned
 2023 0010 A3F80100 		strh	r0, [r3, #1]	@ unaligned
 2024 0014 8978     		ldrb	r1, [r1, #2]	@ zero_extendqisi2
 2025 0016 9170     		strb	r1, [r2, #2]
 123:quantum/rgb_matrix.c ****     rgb_matrix_config.speed  = UINT8_MAX / 2;
 2026              		.loc 28 123 0
 2027 0018 7F22     		movs	r2, #127
 2028 001a 1A71     		strb	r2, [r3, #4]
 124:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 2029              		.loc 28 124 0
 2030 001c FFF7FEBF 		b	eeconfig_update_rgb_matrix
 2031              	.LVL203:
 2032              	.L85:
 2033              		.align	2
 2034              	.L84:
 2035 0020 00000000 		.word	rgb_matrix_config
 2036 0024 00000000 		.word	.LANCHOR0
 2037              		.cfi_endproc
 2038              	.LFE149:
 2040              		.section	.text.eeconfig_debug_rgb_matrix,"ax",%progbits
 2041              		.align	1
 2042              		.global	eeconfig_debug_rgb_matrix
 2043              		.syntax unified
 2044              		.thumb
 2045              		.thumb_func
 2046              		.fpu fpv4-sp-d16
 2048              	eeconfig_debug_rgb_matrix:
 2049              	.LFB150:
 125:quantum/rgb_matrix.c **** }
 126:quantum/rgb_matrix.c **** 
 127:quantum/rgb_matrix.c **** void eeconfig_debug_rgb_matrix(void) {
 2050              		.loc 28 127 0
 2051              		.cfi_startproc
 2052              		@ args = 0, pretend = 0, frame = 0
 2053              		@ frame_needed = 0, uses_anonymous_args = 0
 2054              		@ link register save eliminated.
 128:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config eprom\n");
 129:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.enable = %d\n", rgb_matrix_config.enable);
 130:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.mode = %d\n", rgb_matrix_config.mode);
 131:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.hsv.h = %d\n", rgb_matrix_config.hsv.h);
 132:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.hsv.s = %d\n", rgb_matrix_config.hsv.s);
 133:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.hsv.v = %d\n", rgb_matrix_config.hsv.v);
 134:quantum/rgb_matrix.c ****     dprintf("rgb_matrix_config.speed = %d\n", rgb_matrix_config.speed);
 135:quantum/rgb_matrix.c **** }
 2055              		.loc 28 135 0
 2056 0000 7047     		bx	lr
 2057              		.cfi_endproc
 2058              	.LFE150:
 2060              		.section	.text.rgb_matrix_map_row_column_to_led_kb,"ax",%progbits
 2061              		.align	1
 2062              		.weak	rgb_matrix_map_row_column_to_led_kb
 2063              		.syntax unified
 2064              		.thumb
 2065              		.thumb_func
 2066              		.fpu fpv4-sp-d16
 2068              	rgb_matrix_map_row_column_to_led_kb:
 2069              	.LFB151:
 136:quantum/rgb_matrix.c **** 
 137:quantum/rgb_matrix.c **** __attribute__((weak)) uint8_t rgb_matrix_map_row_column_to_led_kb(uint8_t row, uint8_t column, uint
 2070              		.loc 28 137 0
 2071              		.cfi_startproc
 2072              		@ args = 0, pretend = 0, frame = 0
 2073              		@ frame_needed = 0, uses_anonymous_args = 0
 2074              		@ link register save eliminated.
 2075              	.LVL204:
 2076              		.loc 28 137 0
 2077 0000 0020     		movs	r0, #0
 2078              	.LVL205:
 2079 0002 7047     		bx	lr
 2080              		.cfi_endproc
 2081              	.LFE151:
 2083              		.section	.text.rgb_matrix_map_row_column_to_led,"ax",%progbits
 2084              		.align	1
 2085              		.global	rgb_matrix_map_row_column_to_led
 2086              		.syntax unified
 2087              		.thumb
 2088              		.thumb_func
 2089              		.fpu fpv4-sp-d16
 2091              	rgb_matrix_map_row_column_to_led:
 2092              	.LFB152:
 138:quantum/rgb_matrix.c **** 
 139:quantum/rgb_matrix.c **** uint8_t rgb_matrix_map_row_column_to_led(uint8_t row, uint8_t column, uint8_t *led_i) {
 2093              		.loc 28 139 0
 2094              		.cfi_startproc
 2095              		@ args = 0, pretend = 0, frame = 0
 2096              		@ frame_needed = 0, uses_anonymous_args = 0
 2097              	.LVL206:
 2098 0000 70B5     		push	{r4, r5, r6, lr}
 2099              		.cfi_def_cfa_offset 16
 2100              		.cfi_offset 4, -16
 2101              		.cfi_offset 5, -12
 2102              		.cfi_offset 6, -8
 2103              		.cfi_offset 14, -4
 2104              		.loc 28 139 0
 2105 0002 0E46     		mov	r6, r1
 2106 0004 1546     		mov	r5, r2
 2107 0006 0446     		mov	r4, r0
 140:quantum/rgb_matrix.c ****     uint8_t led_count = rgb_matrix_map_row_column_to_led_kb(row, column, led_i);
 2108              		.loc 28 140 0
 2109 0008 FFF7FEFF 		bl	rgb_matrix_map_row_column_to_led_kb
 2110              	.LVL207:
 141:quantum/rgb_matrix.c ****     uint8_t led_index = g_led_config.matrix_co[row][column];
 2111              		.loc 28 141 0
 2112 000c 054B     		ldr	r3, .L93
 2113 000e C4EB0414 		rsb	r4, r4, r4, lsl #4
 2114 0012 1C44     		add	r4, r4, r3
 2115 0014 A35D     		ldrb	r3, [r4, r6]	@ zero_extendqisi2
 2116              	.LVL208:
 142:quantum/rgb_matrix.c ****     if (led_index != NO_LED) {
 2117              		.loc 28 142 0
 2118 0016 FF2B     		cmp	r3, #255
 143:quantum/rgb_matrix.c ****         led_i[led_count] = led_index;
 2119              		.loc 28 143 0
 2120 0018 1EBF     		ittt	ne
 2121 001a 2B54     		strbne	r3, [r5, r0]
 144:quantum/rgb_matrix.c ****         led_count++;
 2122              		.loc 28 144 0
 2123 001c 0130     		addne	r0, r0, #1
 2124              	.LVL209:
 2125 001e C0B2     		uxtbne	r0, r0
 2126              	.LVL210:
 145:quantum/rgb_matrix.c ****     }
 146:quantum/rgb_matrix.c ****     return led_count;
 147:quantum/rgb_matrix.c **** }
 2127              		.loc 28 147 0
 2128 0020 70BD     		pop	{r4, r5, r6, pc}
 2129              	.LVL211:
 2130              	.L94:
 2131 0022 00BF     		.align	2
 2132              	.L93:
 2133 0024 00000000 		.word	g_led_config
 2134              		.cfi_endproc
 2135              	.LFE152:
 2137              		.section	.text.rgb_matrix_update_pwm_buffers,"ax",%progbits
 2138              		.align	1
 2139              		.global	rgb_matrix_update_pwm_buffers
 2140              		.syntax unified
 2141              		.thumb
 2142              		.thumb_func
 2143              		.fpu fpv4-sp-d16
 2145              	rgb_matrix_update_pwm_buffers:
 2146              	.LFB153:
 148:quantum/rgb_matrix.c **** 
 149:quantum/rgb_matrix.c **** void rgb_matrix_update_pwm_buffers(void) { rgb_matrix_driver.flush(); }
 2147              		.loc 28 149 0
 2148              		.cfi_startproc
 2149              		@ args = 0, pretend = 0, frame = 0
 2150              		@ frame_needed = 0, uses_anonymous_args = 0
 2151              		@ link register save eliminated.
 2152              		.loc 28 149 0
 2153 0000 014B     		ldr	r3, .L96
 2154 0002 DB68     		ldr	r3, [r3, #12]
 2155 0004 1847     		bx	r3	@ indirect register sibling call
 2156              	.LVL212:
 2157              	.L97:
 2158 0006 00BF     		.align	2
 2159              	.L96:
 2160 0008 00000000 		.word	rgb_matrix_driver
 2161              		.cfi_endproc
 2162              	.LFE153:
 2164              		.section	.text.rgb_matrix_set_color,"ax",%progbits
 2165              		.align	1
 2166              		.global	rgb_matrix_set_color
 2167              		.syntax unified
 2168              		.thumb
 2169              		.thumb_func
 2170              		.fpu fpv4-sp-d16
 2172              	rgb_matrix_set_color:
 2173              	.LFB154:
 150:quantum/rgb_matrix.c **** 
 151:quantum/rgb_matrix.c **** void rgb_matrix_set_color(int index, uint8_t red, uint8_t green, uint8_t blue) { rgb_matrix_driver.
 2174              		.loc 28 151 0
 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 0
 2177              		@ frame_needed = 0, uses_anonymous_args = 0
 2178              		@ link register save eliminated.
 2179              	.LVL213:
 2180 0000 10B4     		push	{r4}
 2181              		.cfi_def_cfa_offset 4
 2182              		.cfi_offset 4, -4
 2183              		.loc 28 151 0
 2184 0002 034C     		ldr	r4, .L99
 2185 0004 6468     		ldr	r4, [r4, #4]
 2186 0006 A446     		mov	ip, r4
 2187 0008 5DF8044B 		ldr	r4, [sp], #4
 2188              		.cfi_restore 4
 2189              		.cfi_def_cfa_offset 0
 2190 000c 6047     		bx	ip	@ indirect register sibling call
 2191              	.LVL214:
 2192              	.L100:
 2193 000e 00BF     		.align	2
 2194              	.L99:
 2195 0010 00000000 		.word	rgb_matrix_driver
 2196              		.cfi_endproc
 2197              	.LFE154:
 2199              		.section	.text.effect_runner_dx_dy_dist,"ax",%progbits
 2200              		.align	1
 2201              		.global	effect_runner_dx_dy_dist
 2202              		.syntax unified
 2203              		.thumb
 2204              		.thumb_func
 2205              		.fpu fpv4-sp-d16
 2207              	effect_runner_dx_dy_dist:
 2208              	.LFB80:
 2209              		.file 29 "quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h"
   1:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** typedef HSV (*dx_dy_dist_f)(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint8_t time);
   4:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** bool effect_runner_dx_dy_dist(effect_params_t* params, dx_dy_dist_f effect_func) {
 2210              		.loc 29 5 0
 2211              		.cfi_startproc
 2212              		@ args = 0, pretend = 0, frame = 16
 2213              		@ frame_needed = 0, uses_anonymous_args = 0
 2214              	.LVL215:
 2215 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2216              		.cfi_def_cfa_offset 36
 2217              		.cfi_offset 4, -36
 2218              		.cfi_offset 5, -32
 2219              		.cfi_offset 6, -28
 2220              		.cfi_offset 7, -24
 2221              		.cfi_offset 8, -20
 2222              		.cfi_offset 9, -16
 2223              		.cfi_offset 10, -12
 2224              		.cfi_offset 11, -8
 2225              		.cfi_offset 14, -4
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
   7:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
   8:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     uint8_t time = scale16by8(g_rgb_counters.tick, rgb_matrix_config.speed / 2);
 2226              		.loc 29 8 0
 2227 0004 344D     		ldr	r5, .L108
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 2228              		.loc 29 6 0
 2229 0006 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 2230              		.loc 29 8 0
 2231 0008 2E79     		ldrb	r6, [r5, #4]	@ zero_extendqisi2
 2232 000a 344A     		ldr	r2, .L108+4
 2233              	.LBB191:
 2234              	.LBB192:
   9:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     for (uint8_t i = led_min; i < led_max; i++) {
  10:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 2235              		.loc 29 10 0
 2236 000c DFF8D090 		ldr	r9, .L108+8
 2237              	.LBE192:
 2238              	.LBE191:
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 2239              		.loc 29 6 0
 2240 0010 C4EB0414 		rsb	r4, r4, r4, lsl #4
 2241 0014 E4B2     		uxtb	r4, r4
 2242              	.LVL216:
 2243              	.LBB198:
 2244              	.LBB199:
  27:./lib/lib8tion/scale8.h **** #endif
  28:./lib/lib8tion/scale8.h **** #elif SCALE8_AVRASM == 1
  29:./lib/lib8tion/scale8.h **** #if defined(LIB8_ATTINY)
  30:./lib/lib8tion/scale8.h **** #if (FASTLED_SCALE8_FIXED == 1)
  31:./lib/lib8tion/scale8.h ****     uint8_t work=i;
  32:./lib/lib8tion/scale8.h **** #else
  33:./lib/lib8tion/scale8.h ****     uint8_t work=0;
  34:./lib/lib8tion/scale8.h **** #endif
  35:./lib/lib8tion/scale8.h ****     uint8_t cnt=0x80;
  36:./lib/lib8tion/scale8.h ****     asm volatile(
  37:./lib/lib8tion/scale8.h **** #if (FASTLED_SCALE8_FIXED == 1)
  38:./lib/lib8tion/scale8.h ****         "  inc %[scale]                 \n\t"
  39:./lib/lib8tion/scale8.h ****         "  breq DONE_%=                 \n\t"
  40:./lib/lib8tion/scale8.h ****         "  clr %[work]                  \n\t"
  41:./lib/lib8tion/scale8.h **** #endif
  42:./lib/lib8tion/scale8.h ****         "LOOP_%=:                       \n\t"
  43:./lib/lib8tion/scale8.h ****         /*"  sbrc %[scale], 0             \n\t"
  44:./lib/lib8tion/scale8.h ****         "  add %[work], %[i]            \n\t"
  45:./lib/lib8tion/scale8.h ****         "  ror %[work]                  \n\t"
  46:./lib/lib8tion/scale8.h ****         "  lsr %[scale]                 \n\t"
  47:./lib/lib8tion/scale8.h ****         "  clc                          \n\t"*/
  48:./lib/lib8tion/scale8.h ****         "  sbrc %[scale], 0             \n\t"
  49:./lib/lib8tion/scale8.h ****         "  add %[work], %[i]            \n\t"
  50:./lib/lib8tion/scale8.h ****         "  ror %[work]                  \n\t"
  51:./lib/lib8tion/scale8.h ****         "  lsr %[scale]                 \n\t"
  52:./lib/lib8tion/scale8.h ****         "  lsr %[cnt]                   \n\t"
  53:./lib/lib8tion/scale8.h ****         "brcc LOOP_%=                   \n\t"
  54:./lib/lib8tion/scale8.h ****         "DONE_%=:                       \n\t"
  55:./lib/lib8tion/scale8.h ****         : [work] "+r" (work), [cnt] "+r" (cnt)
  56:./lib/lib8tion/scale8.h ****         : [scale] "r" (scale), [i] "r" (i)
  57:./lib/lib8tion/scale8.h ****         :
  58:./lib/lib8tion/scale8.h ****       );
  59:./lib/lib8tion/scale8.h ****     return work;
  60:./lib/lib8tion/scale8.h **** #else
  61:./lib/lib8tion/scale8.h ****     asm volatile(
  62:./lib/lib8tion/scale8.h **** #if (FASTLED_SCALE8_FIXED==1)
  63:./lib/lib8tion/scale8.h ****         // Multiply 8-bit i * 8-bit scale, giving 16-bit r1,r0
  64:./lib/lib8tion/scale8.h ****         "mul %0, %1          \n\t"
  65:./lib/lib8tion/scale8.h ****         // Add i to r0, possibly setting the carry flag
  66:./lib/lib8tion/scale8.h ****         "add r0, %0         \n\t"
  67:./lib/lib8tion/scale8.h ****         // load the immediate 0 into i (note, this does _not_ touch any flags)
  68:./lib/lib8tion/scale8.h ****         "ldi %0, 0x00       \n\t"
  69:./lib/lib8tion/scale8.h ****         // walk and chew gum at the same time
  70:./lib/lib8tion/scale8.h ****         "adc %0, r1          \n\t"
  71:./lib/lib8tion/scale8.h **** #else
  72:./lib/lib8tion/scale8.h ****          /* Multiply 8-bit i * 8-bit scale, giving 16-bit r1,r0 */
  73:./lib/lib8tion/scale8.h ****          "mul %0, %1          \n\t"
  74:./lib/lib8tion/scale8.h ****          /* Move the high 8-bits of the product (r1) back to i */
  75:./lib/lib8tion/scale8.h ****          "mov %0, r1          \n\t"
  76:./lib/lib8tion/scale8.h ****          /* Restore r1 to "0"; it's expected to always be that */
  77:./lib/lib8tion/scale8.h **** #endif
  78:./lib/lib8tion/scale8.h ****          "clr __zero_reg__    \n\t"
  79:./lib/lib8tion/scale8.h **** 
  80:./lib/lib8tion/scale8.h ****          : "+a" (i)      /* writes to i */
  81:./lib/lib8tion/scale8.h ****          : "a"  (scale)  /* uses scale */
  82:./lib/lib8tion/scale8.h ****          : "r0", "r1"    /* clobbers r0, r1 */ );
  83:./lib/lib8tion/scale8.h **** 
  84:./lib/lib8tion/scale8.h ****     /* Return the result */
  85:./lib/lib8tion/scale8.h ****     return i;
  86:./lib/lib8tion/scale8.h **** #endif
  87:./lib/lib8tion/scale8.h **** #else
  88:./lib/lib8tion/scale8.h **** #error "No implementation for scale8 available."
  89:./lib/lib8tion/scale8.h **** #endif
  90:./lib/lib8tion/scale8.h **** }
  91:./lib/lib8tion/scale8.h **** 
  92:./lib/lib8tion/scale8.h **** 
  93:./lib/lib8tion/scale8.h **** ///  The "video" version of scale8 guarantees that the output will
  94:./lib/lib8tion/scale8.h **** ///  be only be zero if one or both of the inputs are zero.  If both
  95:./lib/lib8tion/scale8.h **** ///  inputs are non-zero, the output is guaranteed to be non-zero.
  96:./lib/lib8tion/scale8.h **** ///  This makes for better 'video'/LED dimming, at the cost of
  97:./lib/lib8tion/scale8.h **** ///  several additional cycles.
  98:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video( uint8_t i, fract8 scale)
  99:./lib/lib8tion/scale8.h **** {
 100:./lib/lib8tion/scale8.h **** #if SCALE8_C == 1 || defined(LIB8_ATTINY)
 101:./lib/lib8tion/scale8.h ****     uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
 102:./lib/lib8tion/scale8.h ****     // uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
 103:./lib/lib8tion/scale8.h ****     // uint8_t j = (i == 0) ? 0 : (((int)i * (int)(scale) ) >> 8) + nonzeroscale;
 104:./lib/lib8tion/scale8.h ****     return j;
 105:./lib/lib8tion/scale8.h **** #elif SCALE8_AVRASM == 1
 106:./lib/lib8tion/scale8.h ****     uint8_t j=0;
 107:./lib/lib8tion/scale8.h ****     asm volatile(
 108:./lib/lib8tion/scale8.h ****         "  tst %[i]\n\t"
 109:./lib/lib8tion/scale8.h ****         "  breq L_%=\n\t"
 110:./lib/lib8tion/scale8.h ****         "  mul %[i], %[scale]\n\t"
 111:./lib/lib8tion/scale8.h ****         "  mov %[j], r1\n\t"
 112:./lib/lib8tion/scale8.h ****         "  clr __zero_reg__\n\t"
 113:./lib/lib8tion/scale8.h ****         "  cpse %[scale], r1\n\t"
 114:./lib/lib8tion/scale8.h ****         "  subi %[j], 0xFF\n\t"
 115:./lib/lib8tion/scale8.h ****         "L_%=: \n\t"
 116:./lib/lib8tion/scale8.h ****         : [j] "+a" (j)
 117:./lib/lib8tion/scale8.h ****         : [i] "a" (i), [scale] "a" (scale)
 118:./lib/lib8tion/scale8.h ****         : "r0", "r1");
 119:./lib/lib8tion/scale8.h **** 
 120:./lib/lib8tion/scale8.h ****     return j;
 121:./lib/lib8tion/scale8.h ****     // uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
 122:./lib/lib8tion/scale8.h ****     // asm volatile(
 123:./lib/lib8tion/scale8.h ****     //      "      tst %0           \n"
 124:./lib/lib8tion/scale8.h ****     //      "      breq L_%=        \n"
 125:./lib/lib8tion/scale8.h ****     //      "      mul %0, %1       \n"
 126:./lib/lib8tion/scale8.h ****     //      "      mov %0, r1       \n"
 127:./lib/lib8tion/scale8.h ****     //      "      add %0, %2       \n"
 128:./lib/lib8tion/scale8.h ****     //      "      clr __zero_reg__ \n"
 129:./lib/lib8tion/scale8.h ****     //      "L_%=:                  \n"
 130:./lib/lib8tion/scale8.h **** 
 131:./lib/lib8tion/scale8.h ****     //      : "+a" (i)
 132:./lib/lib8tion/scale8.h ****     //      : "a" (scale), "a" (nonzeroscale)
 133:./lib/lib8tion/scale8.h ****     //      : "r0", "r1");
 134:./lib/lib8tion/scale8.h **** 
 135:./lib/lib8tion/scale8.h ****     // // Return the result
 136:./lib/lib8tion/scale8.h ****     // return i;
 137:./lib/lib8tion/scale8.h **** #else
 138:./lib/lib8tion/scale8.h **** #error "No implementation for scale8_video available."
 139:./lib/lib8tion/scale8.h **** #endif
 140:./lib/lib8tion/scale8.h **** }
 141:./lib/lib8tion/scale8.h **** 
 142:./lib/lib8tion/scale8.h **** 
 143:./lib/lib8tion/scale8.h **** /// This version of scale8 does not clean up the R1 register on AVR
 144:./lib/lib8tion/scale8.h **** /// If you are doing several 'scale8's in a row, use this, and
 145:./lib/lib8tion/scale8.h **** /// then explicitly call cleanup_R1.
 146:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t scale8_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
 147:./lib/lib8tion/scale8.h **** {
 148:./lib/lib8tion/scale8.h **** #if SCALE8_C == 1
 149:./lib/lib8tion/scale8.h **** #if (FASTLED_SCALE8_FIXED == 1)
 150:./lib/lib8tion/scale8.h ****     return (((uint16_t)i) * ((uint16_t)(scale)+1)) >> 8;
 151:./lib/lib8tion/scale8.h **** #else
 152:./lib/lib8tion/scale8.h ****     return ((int)i * (int)(scale) ) >> 8;
 153:./lib/lib8tion/scale8.h **** #endif
 154:./lib/lib8tion/scale8.h **** #elif SCALE8_AVRASM == 1
 155:./lib/lib8tion/scale8.h ****     asm volatile(
 156:./lib/lib8tion/scale8.h ****       #if (FASTLED_SCALE8_FIXED==1)
 157:./lib/lib8tion/scale8.h ****               // Multiply 8-bit i * 8-bit scale, giving 16-bit r1,r0
 158:./lib/lib8tion/scale8.h ****               "mul %0, %1          \n\t"
 159:./lib/lib8tion/scale8.h ****               // Add i to r0, possibly setting the carry flag
 160:./lib/lib8tion/scale8.h ****               "add r0, %0         \n\t"
 161:./lib/lib8tion/scale8.h ****               // load the immediate 0 into i (note, this does _not_ touch any flags)
 162:./lib/lib8tion/scale8.h ****               "ldi %0, 0x00       \n\t"
 163:./lib/lib8tion/scale8.h ****               // walk and chew gum at the same time
 164:./lib/lib8tion/scale8.h ****               "adc %0, r1          \n\t"
 165:./lib/lib8tion/scale8.h ****       #else
 166:./lib/lib8tion/scale8.h ****          /* Multiply 8-bit i * 8-bit scale, giving 16-bit r1,r0 */
 167:./lib/lib8tion/scale8.h ****          "mul %0, %1    \n\t"
 168:./lib/lib8tion/scale8.h ****          /* Move the high 8-bits of the product (r1) back to i */
 169:./lib/lib8tion/scale8.h ****          "mov %0, r1    \n\t"
 170:./lib/lib8tion/scale8.h ****       #endif
 171:./lib/lib8tion/scale8.h ****          /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
 172:./lib/lib8tion/scale8.h ****          /* "clr __zero_reg__    \n\t" */
 173:./lib/lib8tion/scale8.h **** 
 174:./lib/lib8tion/scale8.h ****          : "+a" (i)      /* writes to i */
 175:./lib/lib8tion/scale8.h ****          : "a"  (scale)  /* uses scale */
 176:./lib/lib8tion/scale8.h ****          : "r0", "r1"    /* clobbers r0, r1 */ );
 177:./lib/lib8tion/scale8.h **** 
 178:./lib/lib8tion/scale8.h ****     // Return the result
 179:./lib/lib8tion/scale8.h ****     return i;
 180:./lib/lib8tion/scale8.h **** #else
 181:./lib/lib8tion/scale8.h **** #error "No implementation for scale8_LEAVING_R1_DIRTY available."
 182:./lib/lib8tion/scale8.h **** #endif
 183:./lib/lib8tion/scale8.h **** }
 184:./lib/lib8tion/scale8.h **** 
 185:./lib/lib8tion/scale8.h **** 
 186:./lib/lib8tion/scale8.h **** /// This version of scale8_video does not clean up the R1 register on AVR
 187:./lib/lib8tion/scale8.h **** /// If you are doing several 'scale8_video's in a row, use this, and
 188:./lib/lib8tion/scale8.h **** /// then explicitly call cleanup_R1.
 189:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE uint8_t scale8_video_LEAVING_R1_DIRTY( uint8_t i, fract8 scale)
 190:./lib/lib8tion/scale8.h **** {
 191:./lib/lib8tion/scale8.h **** #if SCALE8_C == 1 || defined(LIB8_ATTINY)
 192:./lib/lib8tion/scale8.h ****     uint8_t j = (((int)i * (int)scale) >> 8) + ((i&&scale)?1:0);
 193:./lib/lib8tion/scale8.h ****     // uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
 194:./lib/lib8tion/scale8.h ****     // uint8_t j = (i == 0) ? 0 : (((int)i * (int)(scale) ) >> 8) + nonzeroscale;
 195:./lib/lib8tion/scale8.h ****     return j;
 196:./lib/lib8tion/scale8.h **** #elif SCALE8_AVRASM == 1
 197:./lib/lib8tion/scale8.h ****     uint8_t j=0;
 198:./lib/lib8tion/scale8.h ****     asm volatile(
 199:./lib/lib8tion/scale8.h ****         "  tst %[i]\n\t"
 200:./lib/lib8tion/scale8.h ****         "  breq L_%=\n\t"
 201:./lib/lib8tion/scale8.h ****         "  mul %[i], %[scale]\n\t"
 202:./lib/lib8tion/scale8.h ****         "  mov %[j], r1\n\t"
 203:./lib/lib8tion/scale8.h ****         "  breq L_%=\n\t"
 204:./lib/lib8tion/scale8.h ****         "  subi %[j], 0xFF\n\t"
 205:./lib/lib8tion/scale8.h ****         "L_%=: \n\t"
 206:./lib/lib8tion/scale8.h ****         : [j] "+a" (j)
 207:./lib/lib8tion/scale8.h ****         : [i] "a" (i), [scale] "a" (scale)
 208:./lib/lib8tion/scale8.h ****         : "r0", "r1");
 209:./lib/lib8tion/scale8.h **** 
 210:./lib/lib8tion/scale8.h ****     return j;
 211:./lib/lib8tion/scale8.h ****     // uint8_t nonzeroscale = (scale != 0) ? 1 : 0;
 212:./lib/lib8tion/scale8.h ****     // asm volatile(
 213:./lib/lib8tion/scale8.h ****     //      "      tst %0           \n"
 214:./lib/lib8tion/scale8.h ****     //      "      breq L_%=        \n"
 215:./lib/lib8tion/scale8.h ****     //      "      mul %0, %1       \n"
 216:./lib/lib8tion/scale8.h ****     //      "      mov %0, r1       \n"
 217:./lib/lib8tion/scale8.h ****     //      "      add %0, %2       \n"
 218:./lib/lib8tion/scale8.h ****     //      "      clr __zero_reg__ \n"
 219:./lib/lib8tion/scale8.h ****     //      "L_%=:                  \n"
 220:./lib/lib8tion/scale8.h **** 
 221:./lib/lib8tion/scale8.h ****     //      : "+a" (i)
 222:./lib/lib8tion/scale8.h ****     //      : "a" (scale), "a" (nonzeroscale)
 223:./lib/lib8tion/scale8.h ****     //      : "r0", "r1");
 224:./lib/lib8tion/scale8.h **** 
 225:./lib/lib8tion/scale8.h ****     // // Return the result
 226:./lib/lib8tion/scale8.h ****     // return i;
 227:./lib/lib8tion/scale8.h **** #else
 228:./lib/lib8tion/scale8.h **** #error "No implementation for scale8_video_LEAVING_R1_DIRTY available."
 229:./lib/lib8tion/scale8.h **** #endif
 230:./lib/lib8tion/scale8.h **** }
 231:./lib/lib8tion/scale8.h **** 
 232:./lib/lib8tion/scale8.h **** /// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
 233:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE void cleanup_R1(void)
 234:./lib/lib8tion/scale8.h **** {
 235:./lib/lib8tion/scale8.h **** #if CLEANUP_R1_AVRASM == 1
 236:./lib/lib8tion/scale8.h ****     // Restore r1 to "0"; it's expected to always be that
 237:./lib/lib8tion/scale8.h ****     asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
 238:./lib/lib8tion/scale8.h **** #endif
 239:./lib/lib8tion/scale8.h **** }
 240:./lib/lib8tion/scale8.h **** 
 241:./lib/lib8tion/scale8.h **** 
 242:./lib/lib8tion/scale8.h **** /// scale a 16-bit unsigned value by an 8-bit value,
 243:./lib/lib8tion/scale8.h **** ///         considered as numerator of a fraction whose denominator
 244:./lib/lib8tion/scale8.h **** ///         is 256. In other words, it computes i * (scale / 256)
 245:./lib/lib8tion/scale8.h **** 
 246:./lib/lib8tion/scale8.h **** LIB8STATIC_ALWAYS_INLINE uint16_t scale16by8( uint16_t i, fract8 scale )
 247:./lib/lib8tion/scale8.h **** {
 248:./lib/lib8tion/scale8.h **** #if SCALE16BY8_C == 1
 249:./lib/lib8tion/scale8.h ****     uint16_t result;
 250:./lib/lib8tion/scale8.h **** #if FASTLED_SCALE8_FIXED == 1
 251:./lib/lib8tion/scale8.h ****     result = (i * (1+((uint16_t)scale))) >> 8;
 252:./lib/lib8tion/scale8.h **** #else
 253:./lib/lib8tion/scale8.h ****     result = (i * scale) / 256;
 2245              		.loc 3 253 0
 2246 0016 7308     		lsrs	r3, r6, #1
 2247              	.LBE199:
 2248              	.LBE198:
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
 2249              		.loc 29 6 0
 2250 0018 04F10F07 		add	r7, r4, #15
   8:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 2251              		.loc 29 8 0
 2252 001c 1668     		ldr	r6, [r2]	@ unaligned
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** 
 2253              		.loc 29 6 0
 2254 001e FFB2     		uxtb	r7, r7
 2255              	.LVL217:
 2256 0020 692F     		cmp	r7, #105
 2257              	.LBB201:
 2258              	.LBB200:
 2259              		.loc 3 253 0
 2260 0022 06FB03F6 		mul	r6, r6, r3
 2261 0026 BA46     		mov	r10, r7
 2262              	.LBE200:
 2263              	.LBE201:
   5:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 2264              		.loc 29 5 0
 2265 0028 87B0     		sub	sp, sp, #28
 2266              		.cfi_def_cfa_offset 64
   5:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 2267              		.loc 29 5 0
 2268 002a 8046     		mov	r8, r0
 2269 002c 8B46     		mov	fp, r1
 2270 002e 28BF     		it	cs
 2271 0030 4FF0690A 		movcs	r10, #105
 2272              	.LVL218:
   8:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 2273              		.loc 29 8 0
 2274 0034 C6F30726 		ubfx	r6, r6, #8, #8
 2275              	.LVL219:
 2276              	.L102:
 2277              	.LBB202:
   9:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 2278              		.loc 29 9 0 discriminator 1
 2279 0038 E3B2     		uxtb	r3, r4
 2280 003a 9A45     		cmp	r10, r3
 2281 003c 06D8     		bhi	.L107
 2282              	.LBE202:
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         int16_t dx   = g_led_config.point[i].x - k_rgb_matrix_center.x;
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         int16_t dy   = g_led_config.point[i].y - k_rgb_matrix_center.y;
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         uint8_t dist = sqrt16(dx * dx + dy * dy);
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB     rgb  = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, dist, time));
  15:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  16:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     }
  17:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     return led_max < DRIVER_LED_TOTAL;
  18:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h **** }
 2283              		.loc 29 18 0
 2284 003e 682F     		cmp	r7, #104
 2285 0040 8CBF     		ite	hi
 2286 0042 0020     		movhi	r0, #0
 2287 0044 0120     		movls	r0, #1
 2288 0046 07B0     		add	sp, sp, #28
 2289              		.cfi_remember_state
 2290              		.cfi_def_cfa_offset 36
 2291              		@ sp needed
 2292 0048 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2293              	.LVL220:
 2294              	.L107:
 2295              		.cfi_restore_state
 2296              	.LBB203:
 2297              	.LBB197:
  10:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         int16_t dx   = g_led_config.point[i].x - k_rgb_matrix_center.x;
 2298              		.loc 29 10 0
 2299 004c 04EB0903 		add	r3, r4, r9
 2300 0050 93F81D21 		ldrb	r2, [r3, #285]	@ zero_extendqisi2
 2301 0054 98F80130 		ldrb	r3, [r8, #1]	@ zero_extendqisi2
 2302 0058 1A42     		tst	r2, r3
 2303 005a 34D0     		beq	.L104
 2304 005c 09EB4403 		add	r3, r9, r4, lsl #1
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         int16_t dx   = g_led_config.point[i].x - k_rgb_matrix_center.x;
 2305              		.loc 29 11 0
 2306 0060 93F84B00 		ldrb	r0, [r3, #75]	@ zero_extendqisi2
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         uint8_t dist = sqrt16(dx * dx + dy * dy);
 2307              		.loc 29 12 0
 2308 0064 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 2309 0068 203B     		subs	r3, r3, #32
 2310 006a 9BB2     		uxth	r3, r3
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         int16_t dx   = g_led_config.point[i].x - k_rgb_matrix_center.x;
 2311              		.loc 29 11 0
 2312 006c 7038     		subs	r0, r0, #112
 2313 006e 80B2     		uxth	r0, r0
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         uint8_t dist = sqrt16(dx * dx + dy * dy);
 2314              		.loc 29 12 0
 2315 0070 1AB2     		sxth	r2, r3
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB     rgb  = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, dist, time));
 2316              		.loc 29 13 0
 2317 0072 13FB03F3 		smulbb	r3, r3, r3
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         int16_t dy   = g_led_config.point[i].y - k_rgb_matrix_center.y;
 2318              		.loc 29 11 0
 2319 0076 01B2     		sxth	r1, r0
 2320              	.LVL221:
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         RGB     rgb  = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, dist, time));
 2321              		.loc 29 13 0
 2322 0078 10FB0030 		smlabb	r0, r0, r0, r3
 2323 007c 80B2     		uxth	r0, r0
 2324              	.LVL222:
 2325              	.LBB193:
 2326              	.LBB194:
 431:./lib/lib8tion/math8.h ****         return x;
 2327              		.loc 9 431 0
 2328 007e 0128     		cmp	r0, #1
 2329 0080 23D8     		bhi	.L105
 432:./lib/lib8tion/math8.h ****     }
 2330              		.loc 9 432 0
 2331 0082 C0B2     		uxtb	r0, r0
 2332              	.LVL223:
 2333              	.L106:
 2334              	.LBE194:
 2335              	.LBE193:
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 2336              		.loc 29 14 0
 2337 0084 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 2338 0086 95F801C0 		ldrb	ip, [r5, #1]	@ zero_extendqisi2
 2339 008a 95F803E0 		ldrb	lr, [r5, #3]	@ zero_extendqisi2
 2340 008e 0096     		str	r6, [sp]
 2341 0090 4CEA032C 		orr	ip, ip, r3, lsl #8
 2342 0094 0346     		mov	r3, r0
 2343 0096 4CEA0E40 		orr	r0, ip, lr, lsl #16
 2344 009a D847     		blx	fp
 2345              	.LVL224:
 2346 009c C0F30723 		ubfx	r3, r0, #8, #8
 2347 00a0 8DF81400 		strb	r0, [sp, #20]
 2348 00a4 C0F30740 		ubfx	r0, r0, #16, #8
 2349 00a8 8DF81530 		strb	r3, [sp, #21]
 2350 00ac 8DF81600 		strb	r0, [sp, #22]
 2351 00b0 0598     		ldr	r0, [sp, #20]
 2352 00b2 FFF7FEFF 		bl	hsv_to_rgb
 2353              	.LVL225:
  15:quantum/rgb_matrix_runners/effect_runner_dx_dy_dist.h ****     }
 2354              		.loc 29 15 0
 2355 00b6 C0F30743 		ubfx	r3, r0, #16, #8
 2356 00ba C2B2     		uxtb	r2, r0
 2357 00bc C0F30721 		ubfx	r1, r0, #8, #8
 2358 00c0 2046     		mov	r0, r4
 2359 00c2 FFF7FEFF 		bl	rgb_matrix_set_color
 2360              	.LVL226:
 2361              	.L104:
 2362 00c6 0134     		adds	r4, r4, #1
 2363              	.LVL227:
 2364 00c8 B6E7     		b	.L102
 2365              	.LVL228:
 2366              	.L105:
 2367 00ca CDE90212 		strd	r1, r2, [sp, #8]
 2368              	.LBB196:
 2369              	.LBB195:
 2370 00ce FFF7FEFF 		bl	sqrt16.part.0
 2371              	.LVL229:
 2372 00d2 DDE90212 		ldrd	r1, r2, [sp, #8]
 2373 00d6 D5E7     		b	.L106
 2374              	.L109:
 2375              		.align	2
 2376              	.L108:
 2377 00d8 00000000 		.word	rgb_matrix_config
 2378 00dc 00000000 		.word	g_rgb_counters
 2379 00e0 00000000 		.word	g_led_config
 2380              	.LBE195:
 2381              	.LBE196:
 2382              	.LBE197:
 2383              	.LBE203:
 2384              		.cfi_endproc
 2385              	.LFE80:
 2387              		.section	.text.BAND_SPIRAL_SAT,"ax",%progbits
 2388              		.align	1
 2389              		.global	BAND_SPIRAL_SAT
 2390              		.syntax unified
 2391              		.thumb
 2392              		.thumb_func
 2393              		.fpu fpv4-sp-d16
 2395              	BAND_SPIRAL_SAT:
 2396              	.LFB99:
   9:quantum/rgb_matrix_animations/colorband_spiral_sat_anim.h **** 
  10:quantum/rgb_matrix_animations/colorband_spiral_sat_anim.h **** bool BAND_SPIRAL_SAT(effect_params_t* params) { return effect_runner_dx_dy_dist(params, &BAND_SPIRA
 2397              		.loc 24 10 0
 2398              		.cfi_startproc
 2399              		@ args = 0, pretend = 0, frame = 0
 2400              		@ frame_needed = 0, uses_anonymous_args = 0
 2401              		@ link register save eliminated.
 2402              	.LVL230:
 2403              		.loc 24 10 0
 2404 0000 0149     		ldr	r1, .L111
 2405 0002 FFF7FEBF 		b	effect_runner_dx_dy_dist
 2406              	.LVL231:
 2407              	.L112:
 2408 0006 00BF     		.align	2
 2409              	.L111:
 2410 0008 00000000 		.word	BAND_SPIRAL_SAT_math
 2411              		.cfi_endproc
 2412              	.LFE99:
 2414              		.section	.text.BAND_SPIRAL_VAL,"ax",%progbits
 2415              		.align	1
 2416              		.global	BAND_SPIRAL_VAL
 2417              		.syntax unified
 2418              		.thumb
 2419              		.thumb_func
 2420              		.fpu fpv4-sp-d16
 2422              	BAND_SPIRAL_VAL:
 2423              	.LFB101:
   9:quantum/rgb_matrix_animations/colorband_spiral_val_anim.h **** 
  10:quantum/rgb_matrix_animations/colorband_spiral_val_anim.h **** bool BAND_SPIRAL_VAL(effect_params_t* params) { return effect_runner_dx_dy_dist(params, &BAND_SPIRA
 2424              		.loc 25 10 0
 2425              		.cfi_startproc
 2426              		@ args = 0, pretend = 0, frame = 0
 2427              		@ frame_needed = 0, uses_anonymous_args = 0
 2428              		@ link register save eliminated.
 2429              	.LVL232:
 2430              		.loc 25 10 0
 2431 0000 0149     		ldr	r1, .L114
 2432 0002 FFF7FEBF 		b	effect_runner_dx_dy_dist
 2433              	.LVL233:
 2434              	.L115:
 2435 0006 00BF     		.align	2
 2436              	.L114:
 2437 0008 00000000 		.word	BAND_SPIRAL_VAL_math
 2438              		.cfi_endproc
 2439              	.LFE101:
 2441              		.section	.text.CYCLE_OUT_IN,"ax",%progbits
 2442              		.align	1
 2443              		.global	CYCLE_OUT_IN
 2444              		.syntax unified
 2445              		.thumb
 2446              		.thumb_func
 2447              		.fpu fpv4-sp-d16
 2449              	CYCLE_OUT_IN:
 2450              	.LFB111:
   9:quantum/rgb_matrix_animations/cycle_out_in_anim.h **** 
  10:quantum/rgb_matrix_animations/cycle_out_in_anim.h **** bool CYCLE_OUT_IN(effect_params_t* params) { return effect_runner_dx_dy_dist(params, &CYCLE_OUT_IN_
 2451              		.loc 10 10 0
 2452              		.cfi_startproc
 2453              		@ args = 0, pretend = 0, frame = 0
 2454              		@ frame_needed = 0, uses_anonymous_args = 0
 2455              		@ link register save eliminated.
 2456              	.LVL234:
 2457              		.loc 10 10 0
 2458 0000 0149     		ldr	r1, .L117
 2459 0002 FFF7FEBF 		b	effect_runner_dx_dy_dist
 2460              	.LVL235:
 2461              	.L118:
 2462 0006 00BF     		.align	2
 2463              	.L117:
 2464 0008 00000000 		.word	CYCLE_OUT_IN_math
 2465              		.cfi_endproc
 2466              	.LFE111:
 2468              		.section	.text.CYCLE_SPIRAL,"ax",%progbits
 2469              		.align	1
 2470              		.global	CYCLE_SPIRAL
 2471              		.syntax unified
 2472              		.thumb
 2473              		.thumb_func
 2474              		.fpu fpv4-sp-d16
 2476              	CYCLE_SPIRAL:
 2477              	.LFB117:
   9:quantum/rgb_matrix_animations/cycle_spiral_anim.h **** 
  10:quantum/rgb_matrix_animations/cycle_spiral_anim.h **** bool CYCLE_SPIRAL(effect_params_t* params) { return effect_runner_dx_dy_dist(params, &CYCLE_SPIRAL_
 2478              		.loc 27 10 0
 2479              		.cfi_startproc
 2480              		@ args = 0, pretend = 0, frame = 0
 2481              		@ frame_needed = 0, uses_anonymous_args = 0
 2482              		@ link register save eliminated.
 2483              	.LVL236:
 2484              		.loc 27 10 0
 2485 0000 0149     		ldr	r1, .L120
 2486 0002 FFF7FEBF 		b	effect_runner_dx_dy_dist
 2487              	.LVL237:
 2488              	.L121:
 2489 0006 00BF     		.align	2
 2490              	.L120:
 2491 0008 00000000 		.word	CYCLE_SPIRAL_math
 2492              		.cfi_endproc
 2493              	.LFE117:
 2495              		.section	.text.effect_runner_dx_dy,"ax",%progbits
 2496              		.align	1
 2497              		.global	effect_runner_dx_dy
 2498              		.syntax unified
 2499              		.thumb
 2500              		.thumb_func
 2501              		.fpu fpv4-sp-d16
 2503              	effect_runner_dx_dy:
 2504              	.LFB81:
 2505              		.file 30 "quantum/rgb_matrix_runners/effect_runner_dx_dy.h"
   1:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** typedef HSV (*dx_dy_f)(HSV hsv, int16_t dx, int16_t dy, uint8_t time);
   4:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** bool effect_runner_dx_dy(effect_params_t* params, dx_dy_f effect_func) {
 2506              		.loc 30 5 0
 2507              		.cfi_startproc
 2508              		@ args = 0, pretend = 0, frame = 8
 2509              		@ frame_needed = 0, uses_anonymous_args = 0
 2510              	.LVL238:
 2511 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2512              		.cfi_def_cfa_offset 48
 2513              		.cfi_offset 4, -36
 2514              		.cfi_offset 5, -32
 2515              		.cfi_offset 6, -28
 2516              		.cfi_offset 7, -24
 2517              		.cfi_offset 8, -20
 2518              		.cfi_offset 9, -16
 2519              		.cfi_offset 10, -12
 2520              		.cfi_offset 11, -8
 2521              		.cfi_offset 14, -4
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 2522              		.loc 30 6 0
 2523 0004 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
   7:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** 
   8:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     uint8_t time = scale16by8(g_rgb_counters.tick, rgb_matrix_config.speed / 2);
 2524              		.loc 30 8 0
 2525 0006 2A4B     		ldr	r3, .L127
 2526 0008 2A4D     		ldr	r5, .L127+4
 2527 000a 1E68     		ldr	r6, [r3]	@ unaligned
 2528 000c 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 2529              	.LBB204:
 2530              	.LBB205:
   9:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     for (uint8_t i = led_min; i < led_max; i++) {
  10:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 2531              		.loc 30 10 0
 2532 000e DFF8A8B0 		ldr	fp, .L127+8
 2533              	.LBE205:
 2534              	.LBE204:
   6:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** 
 2535              		.loc 30 6 0
 2536 0012 C4EB0414 		rsb	r4, r4, r4, lsl #4
 2537 0016 E4B2     		uxtb	r4, r4
 2538              	.LVL239:
 2539 0018 04F10F09 		add	r9, r4, #15
 2540 001c 5FFA89F9 		uxtb	r9, r9
 2541              	.LVL240:
 2542              	.LBB207:
 2543              	.LBB208:
 2544              		.loc 3 253 0
 2545 0020 5B08     		lsrs	r3, r3, #1
 2546 0022 B9F1690F 		cmp	r9, #105
 2547 0026 06FB03F6 		mul	r6, r6, r3
 2548 002a CA46     		mov	r10, r9
 2549              	.LBE208:
 2550              	.LBE207:
   5:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 2551              		.loc 30 5 0
 2552 002c 0746     		mov	r7, r0
 2553 002e 8846     		mov	r8, r1
 2554 0030 28BF     		it	cs
 2555 0032 4FF0690A 		movcs	r10, #105
 2556              	.LVL241:
   8:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 2557              		.loc 30 8 0
 2558 0036 C6F30726 		ubfx	r6, r6, #8, #8
 2559              	.LVL242:
 2560              	.L123:
 2561              	.LBB209:
   9:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 2562              		.loc 30 9 0 discriminator 1
 2563 003a E3B2     		uxtb	r3, r4
 2564 003c 9A45     		cmp	r10, r3
 2565 003e 07D8     		bhi	.L126
 2566              	.LBE209:
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         int16_t dx  = g_led_config.point[i].x - k_rgb_matrix_center.x;
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         int16_t dy  = g_led_config.point[i].y - k_rgb_matrix_center.y;
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB     rgb = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, time));
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  15:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     }
  16:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     return led_max < DRIVER_LED_TOTAL;
  17:quantum/rgb_matrix_runners/effect_runner_dx_dy.h **** }
 2567              		.loc 30 17 0
 2568 0040 B9F1680F 		cmp	r9, #104
 2569 0044 8CBF     		ite	hi
 2570 0046 0020     		movhi	r0, #0
 2571 0048 0120     		movls	r0, #1
 2572 004a 03B0     		add	sp, sp, #12
 2573              		.cfi_remember_state
 2574              		.cfi_def_cfa_offset 36
 2575              		@ sp needed
 2576 004c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2577              	.LVL243:
 2578              	.L126:
 2579              		.cfi_restore_state
 2580              	.LBB210:
 2581              	.LBB206:
  10:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         int16_t dx  = g_led_config.point[i].x - k_rgb_matrix_center.x;
 2582              		.loc 30 10 0
 2583 0050 04EB0B03 		add	r3, r4, fp
 2584 0054 93F81D21 		ldrb	r2, [r3, #285]	@ zero_extendqisi2
 2585 0058 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2586 005a 1A42     		tst	r2, r3
 2587 005c 26D0     		beq	.L125
 2588 005e 0BEB4403 		add	r3, fp, r4, lsl #1
 2589              	.LVL244:
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 2590              		.loc 30 13 0
 2591 0062 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
  12:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         RGB     rgb = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, dx, dy, time));
 2592              		.loc 30 12 0
 2593 0064 93F84C20 		ldrb	r2, [r3, #76]	@ zero_extendqisi2
  11:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         int16_t dy  = g_led_config.point[i].y - k_rgb_matrix_center.y;
 2594              		.loc 30 11 0
 2595 0068 93F84B10 		ldrb	r1, [r3, #75]	@ zero_extendqisi2
  13:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 2596              		.loc 30 13 0
 2597 006c AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 2598              	.LVL245:
 2599 006e 95F803C0 		ldrb	ip, [r5, #3]	@ zero_extendqisi2
 2600 0072 40EA0320 		orr	r0, r0, r3, lsl #8
 2601 0076 203A     		subs	r2, r2, #32
 2602 0078 7039     		subs	r1, r1, #112
 2603 007a 3346     		mov	r3, r6
 2604 007c 40EA0C40 		orr	r0, r0, ip, lsl #16
 2605 0080 C047     		blx	r8
 2606              	.LVL246:
 2607 0082 C0F30723 		ubfx	r3, r0, #8, #8
 2608 0086 8DF80400 		strb	r0, [sp, #4]
 2609 008a C0F30740 		ubfx	r0, r0, #16, #8
 2610 008e 8DF80530 		strb	r3, [sp, #5]
 2611 0092 8DF80600 		strb	r0, [sp, #6]
 2612 0096 0198     		ldr	r0, [sp, #4]
 2613 0098 FFF7FEFF 		bl	hsv_to_rgb
 2614              	.LVL247:
  14:quantum/rgb_matrix_runners/effect_runner_dx_dy.h ****     }
 2615              		.loc 30 14 0
 2616 009c C0F30743 		ubfx	r3, r0, #16, #8
 2617 00a0 C2B2     		uxtb	r2, r0
 2618 00a2 C0F30721 		ubfx	r1, r0, #8, #8
 2619 00a6 2046     		mov	r0, r4
 2620 00a8 FFF7FEFF 		bl	rgb_matrix_set_color
 2621              	.LVL248:
 2622              	.L125:
 2623 00ac 0134     		adds	r4, r4, #1
 2624              	.LVL249:
 2625 00ae C4E7     		b	.L123
 2626              	.L128:
 2627              		.align	2
 2628              	.L127:
 2629 00b0 00000000 		.word	g_rgb_counters
 2630 00b4 00000000 		.word	rgb_matrix_config
 2631 00b8 00000000 		.word	g_led_config
 2632              	.LBE206:
 2633              	.LBE210:
 2634              		.cfi_endproc
 2635              	.LFE81:
 2637              		.section	.text.BAND_PINWHEEL_SAT,"ax",%progbits
 2638              		.align	1
 2639              		.global	BAND_PINWHEEL_SAT
 2640              		.syntax unified
 2641              		.thumb
 2642              		.thumb_func
 2643              		.fpu fpv4-sp-d16
 2645              	BAND_PINWHEEL_SAT:
 2646              	.LFB95:
   9:quantum/rgb_matrix_animations/colorband_pinwheel_sat_anim.h **** 
  10:quantum/rgb_matrix_animations/colorband_pinwheel_sat_anim.h **** bool BAND_PINWHEEL_SAT(effect_params_t* params) { return effect_runner_dx_dy(params, &BAND_PINWHEEL
 2647              		.loc 22 10 0
 2648              		.cfi_startproc
 2649              		@ args = 0, pretend = 0, frame = 0
 2650              		@ frame_needed = 0, uses_anonymous_args = 0
 2651              		@ link register save eliminated.
 2652              	.LVL250:
 2653              		.loc 22 10 0
 2654 0000 0149     		ldr	r1, .L130
 2655 0002 FFF7FEBF 		b	effect_runner_dx_dy
 2656              	.LVL251:
 2657              	.L131:
 2658 0006 00BF     		.align	2
 2659              	.L130:
 2660 0008 00000000 		.word	BAND_PINWHEEL_SAT_math
 2661              		.cfi_endproc
 2662              	.LFE95:
 2664              		.section	.text.BAND_PINWHEEL_VAL,"ax",%progbits
 2665              		.align	1
 2666              		.global	BAND_PINWHEEL_VAL
 2667              		.syntax unified
 2668              		.thumb
 2669              		.thumb_func
 2670              		.fpu fpv4-sp-d16
 2672              	BAND_PINWHEEL_VAL:
 2673              	.LFB97:
   9:quantum/rgb_matrix_animations/colorband_pinwheel_val_anim.h **** 
  10:quantum/rgb_matrix_animations/colorband_pinwheel_val_anim.h **** bool BAND_PINWHEEL_VAL(effect_params_t* params) { return effect_runner_dx_dy(params, &BAND_PINWHEEL
 2674              		.loc 23 10 0
 2675              		.cfi_startproc
 2676              		@ args = 0, pretend = 0, frame = 0
 2677              		@ frame_needed = 0, uses_anonymous_args = 0
 2678              		@ link register save eliminated.
 2679              	.LVL252:
 2680              		.loc 23 10 0
 2681 0000 0149     		ldr	r1, .L133
 2682 0002 FFF7FEBF 		b	effect_runner_dx_dy
 2683              	.LVL253:
 2684              	.L134:
 2685 0006 00BF     		.align	2
 2686              	.L133:
 2687 0008 00000000 		.word	BAND_PINWHEEL_VAL_math
 2688              		.cfi_endproc
 2689              	.LFE97:
 2691              		.section	.text.CYCLE_OUT_IN_DUAL,"ax",%progbits
 2692              		.align	1
 2693              		.global	CYCLE_OUT_IN_DUAL
 2694              		.syntax unified
 2695              		.thumb
 2696              		.thumb_func
 2697              		.fpu fpv4-sp-d16
 2699              	CYCLE_OUT_IN_DUAL:
 2700              	.LFB113:
  11:quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h **** 
  12:quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h **** bool CYCLE_OUT_IN_DUAL(effect_params_t* params) { return effect_runner_dx_dy(params, &CYCLE_OUT_IN_
 2701              		.loc 21 12 0
 2702              		.cfi_startproc
 2703              		@ args = 0, pretend = 0, frame = 0
 2704              		@ frame_needed = 0, uses_anonymous_args = 0
 2705              		@ link register save eliminated.
 2706              	.LVL254:
 2707              		.loc 21 12 0
 2708 0000 0149     		ldr	r1, .L136
 2709 0002 FFF7FEBF 		b	effect_runner_dx_dy
 2710              	.LVL255:
 2711              	.L137:
 2712 0006 00BF     		.align	2
 2713              	.L136:
 2714 0008 00000000 		.word	CYCLE_OUT_IN_DUAL_math
 2715              		.cfi_endproc
 2716              	.LFE113:
 2718              		.section	.text.CYCLE_PINWHEEL,"ax",%progbits
 2719              		.align	1
 2720              		.global	CYCLE_PINWHEEL
 2721              		.syntax unified
 2722              		.thumb
 2723              		.thumb_func
 2724              		.fpu fpv4-sp-d16
 2726              	CYCLE_PINWHEEL:
 2727              	.LFB115:
   9:quantum/rgb_matrix_animations/cycle_pinwheel_anim.h **** 
  10:quantum/rgb_matrix_animations/cycle_pinwheel_anim.h **** bool CYCLE_PINWHEEL(effect_params_t* params) { return effect_runner_dx_dy(params, &CYCLE_PINWHEEL_m
 2728              		.loc 26 10 0
 2729              		.cfi_startproc
 2730              		@ args = 0, pretend = 0, frame = 0
 2731              		@ frame_needed = 0, uses_anonymous_args = 0
 2732              		@ link register save eliminated.
 2733              	.LVL256:
 2734              		.loc 26 10 0
 2735 0000 0149     		ldr	r1, .L139
 2736 0002 FFF7FEBF 		b	effect_runner_dx_dy
 2737              	.LVL257:
 2738              	.L140:
 2739 0006 00BF     		.align	2
 2740              	.L139:
 2741 0008 00000000 		.word	CYCLE_PINWHEEL_math
 2742              		.cfi_endproc
 2743              	.LFE115:
 2745              		.section	.text.effect_runner_i,"ax",%progbits
 2746              		.align	1
 2747              		.global	effect_runner_i
 2748              		.syntax unified
 2749              		.thumb
 2750              		.thumb_func
 2751              		.fpu fpv4-sp-d16
 2753              	effect_runner_i:
 2754              	.LFB82:
 2755              		.file 31 "quantum/rgb_matrix_runners/effect_runner_i.h"
   1:quantum/rgb_matrix_runners/effect_runner_i.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_i.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_i.h **** typedef HSV (*i_f)(HSV hsv, uint8_t i, uint8_t time);
   4:quantum/rgb_matrix_runners/effect_runner_i.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_i.h **** bool effect_runner_i(effect_params_t* params, i_f effect_func) {
 2756              		.loc 31 5 0
 2757              		.cfi_startproc
 2758              		@ args = 0, pretend = 0, frame = 8
 2759              		@ frame_needed = 0, uses_anonymous_args = 0
 2760              	.LVL258:
 2761 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2762              		.cfi_def_cfa_offset 48
 2763              		.cfi_offset 4, -36
 2764              		.cfi_offset 5, -32
 2765              		.cfi_offset 6, -28
 2766              		.cfi_offset 7, -24
 2767              		.cfi_offset 8, -20
 2768              		.cfi_offset 9, -16
 2769              		.cfi_offset 10, -12
 2770              		.cfi_offset 11, -8
 2771              		.cfi_offset 14, -4
   6:quantum/rgb_matrix_runners/effect_runner_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 2772              		.loc 31 6 0
 2773 0004 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
   7:quantum/rgb_matrix_runners/effect_runner_i.h **** 
   8:quantum/rgb_matrix_runners/effect_runner_i.h ****     uint8_t time = scale16by8(g_rgb_counters.tick, rgb_matrix_config.speed / 4);
 2774              		.loc 31 8 0
 2775 0006 264B     		ldr	r3, .L146
 2776 0008 264D     		ldr	r5, .L146+4
 2777 000a 1E68     		ldr	r6, [r3]	@ unaligned
 2778 000c 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 2779              	.LBB211:
 2780              	.LBB212:
   9:quantum/rgb_matrix_runners/effect_runner_i.h ****     for (uint8_t i = led_min; i < led_max; i++) {
  10:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 2781              		.loc 31 10 0
 2782 000e DFF898B0 		ldr	fp, .L146+8
 2783              	.LBE212:
 2784              	.LBE211:
   6:quantum/rgb_matrix_runners/effect_runner_i.h **** 
 2785              		.loc 31 6 0
 2786 0012 C4EB0414 		rsb	r4, r4, r4, lsl #4
 2787 0016 E4B2     		uxtb	r4, r4
 2788              	.LVL259:
 2789 0018 04F10F09 		add	r9, r4, #15
 2790 001c 5FFA89F9 		uxtb	r9, r9
 2791              	.LVL260:
 2792              	.LBB214:
 2793              	.LBB215:
 2794              		.loc 3 253 0
 2795 0020 9B08     		lsrs	r3, r3, #2
 2796 0022 B9F1690F 		cmp	r9, #105
 2797 0026 06FB03F6 		mul	r6, r6, r3
 2798 002a CA46     		mov	r10, r9
 2799              	.LBE215:
 2800              	.LBE214:
   5:quantum/rgb_matrix_runners/effect_runner_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 2801              		.loc 31 5 0
 2802 002c 0746     		mov	r7, r0
 2803 002e 8846     		mov	r8, r1
 2804 0030 28BF     		it	cs
 2805 0032 4FF0690A 		movcs	r10, #105
 2806              	.LVL261:
   8:quantum/rgb_matrix_runners/effect_runner_i.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 2807              		.loc 31 8 0
 2808 0036 C6F30726 		ubfx	r6, r6, #8, #8
 2809              	.LVL262:
 2810              	.L142:
 2811 003a E1B2     		uxtb	r1, r4
 2812              	.LVL263:
 2813              	.LBB216:
   9:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 2814              		.loc 31 9 0 discriminator 1
 2815 003c 5145     		cmp	r1, r10
 2816 003e 07D3     		bcc	.L145
 2817              	.LBE216:
  11:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB rgb = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, i, time));
  12:quantum/rgb_matrix_runners/effect_runner_i.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  13:quantum/rgb_matrix_runners/effect_runner_i.h ****     }
  14:quantum/rgb_matrix_runners/effect_runner_i.h ****     return led_max < DRIVER_LED_TOTAL;
  15:quantum/rgb_matrix_runners/effect_runner_i.h **** }
 2818              		.loc 31 15 0
 2819 0040 B9F1680F 		cmp	r9, #104
 2820 0044 8CBF     		ite	hi
 2821 0046 0020     		movhi	r0, #0
 2822 0048 0120     		movls	r0, #1
 2823 004a 03B0     		add	sp, sp, #12
 2824              		.cfi_remember_state
 2825              		.cfi_def_cfa_offset 36
 2826              		@ sp needed
 2827 004c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2828              	.LVL264:
 2829              	.L145:
 2830              		.cfi_restore_state
 2831              	.LBB217:
 2832              	.LBB213:
  10:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB rgb = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, i, time));
 2833              		.loc 31 10 0
 2834 0050 04EB0B03 		add	r3, r4, fp
 2835 0054 93F81D21 		ldrb	r2, [r3, #285]	@ zero_extendqisi2
 2836 0058 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2837 005a 1A42     		tst	r2, r3
 2838 005c 1DD0     		beq	.L144
  11:quantum/rgb_matrix_runners/effect_runner_i.h ****         RGB rgb = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, i, time));
 2839              		.loc 31 11 0
 2840 005e A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 2841 0060 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 2842 0062 43EA0023 		orr	r3, r3, r0, lsl #8
 2843 0066 E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 2844 0068 3246     		mov	r2, r6
 2845 006a 43EA0040 		orr	r0, r3, r0, lsl #16
 2846 006e C047     		blx	r8
 2847              	.LVL265:
 2848 0070 C0F30723 		ubfx	r3, r0, #8, #8
 2849 0074 8DF80400 		strb	r0, [sp, #4]
 2850 0078 C0F30740 		ubfx	r0, r0, #16, #8
 2851 007c 8DF80530 		strb	r3, [sp, #5]
 2852 0080 8DF80600 		strb	r0, [sp, #6]
 2853 0084 0198     		ldr	r0, [sp, #4]
 2854 0086 FFF7FEFF 		bl	hsv_to_rgb
 2855              	.LVL266:
  12:quantum/rgb_matrix_runners/effect_runner_i.h ****     }
 2856              		.loc 31 12 0
 2857 008a C0F30743 		ubfx	r3, r0, #16, #8
 2858 008e C2B2     		uxtb	r2, r0
 2859 0090 C0F30721 		ubfx	r1, r0, #8, #8
 2860 0094 2046     		mov	r0, r4
 2861 0096 FFF7FEFF 		bl	rgb_matrix_set_color
 2862              	.LVL267:
 2863              	.L144:
 2864 009a 0134     		adds	r4, r4, #1
 2865              	.LVL268:
 2866 009c CDE7     		b	.L142
 2867              	.L147:
 2868 009e 00BF     		.align	2
 2869              	.L146:
 2870 00a0 00000000 		.word	g_rgb_counters
 2871 00a4 00000000 		.word	rgb_matrix_config
 2872 00a8 00000000 		.word	g_led_config
 2873              	.LBE213:
 2874              	.LBE217:
 2875              		.cfi_endproc
 2876              	.LFE82:
 2878              		.section	.text.BAND_SAT,"ax",%progbits
 2879              		.align	1
 2880              		.global	BAND_SAT
 2881              		.syntax unified
 2882              		.thumb
 2883              		.thumb_func
 2884              		.fpu fpv4-sp-d16
 2886              	BAND_SAT:
 2887              	.LFB91:
  10:quantum/rgb_matrix_animations/colorband_sat_anim.h **** 
  11:quantum/rgb_matrix_animations/colorband_sat_anim.h **** bool BAND_SAT(effect_params_t* params) { return effect_runner_i(params, &BAND_SAT_math); }
 2888              		.loc 2 11 0
 2889              		.cfi_startproc
 2890              		@ args = 0, pretend = 0, frame = 0
 2891              		@ frame_needed = 0, uses_anonymous_args = 0
 2892              		@ link register save eliminated.
 2893              	.LVL269:
 2894              		.loc 2 11 0
 2895 0000 0149     		ldr	r1, .L149
 2896 0002 FFF7FEBF 		b	effect_runner_i
 2897              	.LVL270:
 2898              	.L150:
 2899 0006 00BF     		.align	2
 2900              	.L149:
 2901 0008 00000000 		.word	BAND_SAT_math
 2902              		.cfi_endproc
 2903              	.LFE91:
 2905              		.section	.text.BAND_VAL,"ax",%progbits
 2906              		.align	1
 2907              		.global	BAND_VAL
 2908              		.syntax unified
 2909              		.thumb
 2910              		.thumb_func
 2911              		.fpu fpv4-sp-d16
 2913              	BAND_VAL:
 2914              	.LFB93:
  10:quantum/rgb_matrix_animations/colorband_val_anim.h **** 
  11:quantum/rgb_matrix_animations/colorband_val_anim.h **** bool BAND_VAL(effect_params_t* params) { return effect_runner_i(params, &BAND_VAL_math); }
 2915              		.loc 4 11 0
 2916              		.cfi_startproc
 2917              		@ args = 0, pretend = 0, frame = 0
 2918              		@ frame_needed = 0, uses_anonymous_args = 0
 2919              		@ link register save eliminated.
 2920              	.LVL271:
 2921              		.loc 4 11 0
 2922 0000 0149     		ldr	r1, .L152
 2923 0002 FFF7FEBF 		b	effect_runner_i
 2924              	.LVL272:
 2925              	.L153:
 2926 0006 00BF     		.align	2
 2927              	.L152:
 2928 0008 00000000 		.word	BAND_VAL_math
 2929              		.cfi_endproc
 2930              	.LFE93:
 2932              		.section	.text.CYCLE_ALL,"ax",%progbits
 2933              		.align	1
 2934              		.global	CYCLE_ALL
 2935              		.syntax unified
 2936              		.thumb
 2937              		.thumb_func
 2938              		.fpu fpv4-sp-d16
 2940              	CYCLE_ALL:
 2941              	.LFB103:
   9:quantum/rgb_matrix_animations/cycle_all_anim.h **** 
  10:quantum/rgb_matrix_animations/cycle_all_anim.h **** bool CYCLE_ALL(effect_params_t* params) { return effect_runner_i(params, &CYCLE_ALL_math); }
 2942              		.loc 5 10 0
 2943              		.cfi_startproc
 2944              		@ args = 0, pretend = 0, frame = 0
 2945              		@ frame_needed = 0, uses_anonymous_args = 0
 2946              		@ link register save eliminated.
 2947              	.LVL273:
 2948              		.loc 5 10 0
 2949 0000 0149     		ldr	r1, .L155
 2950 0002 FFF7FEBF 		b	effect_runner_i
 2951              	.LVL274:
 2952              	.L156:
 2953 0006 00BF     		.align	2
 2954              	.L155:
 2955 0008 00000000 		.word	CYCLE_ALL_math
 2956              		.cfi_endproc
 2957              	.LFE103:
 2959              		.section	.text.CYCLE_LEFT_RIGHT,"ax",%progbits
 2960              		.align	1
 2961              		.global	CYCLE_LEFT_RIGHT
 2962              		.syntax unified
 2963              		.thumb
 2964              		.thumb_func
 2965              		.fpu fpv4-sp-d16
 2967              	CYCLE_LEFT_RIGHT:
 2968              	.LFB105:
   9:quantum/rgb_matrix_animations/cycle_left_right_anim.h **** 
  10:quantum/rgb_matrix_animations/cycle_left_right_anim.h **** bool CYCLE_LEFT_RIGHT(effect_params_t* params) { return effect_runner_i(params, &CYCLE_LEFT_RIGHT_m
 2969              		.loc 6 10 0
 2970              		.cfi_startproc
 2971              		@ args = 0, pretend = 0, frame = 0
 2972              		@ frame_needed = 0, uses_anonymous_args = 0
 2973              		@ link register save eliminated.
 2974              	.LVL275:
 2975              		.loc 6 10 0
 2976 0000 0149     		ldr	r1, .L158
 2977 0002 FFF7FEBF 		b	effect_runner_i
 2978              	.LVL276:
 2979              	.L159:
 2980 0006 00BF     		.align	2
 2981              	.L158:
 2982 0008 00000000 		.word	CYCLE_LEFT_RIGHT_math
 2983              		.cfi_endproc
 2984              	.LFE105:
 2986              		.section	.text.CYCLE_UP_DOWN,"ax",%progbits
 2987              		.align	1
 2988              		.global	CYCLE_UP_DOWN
 2989              		.syntax unified
 2990              		.thumb
 2991              		.thumb_func
 2992              		.fpu fpv4-sp-d16
 2994              	CYCLE_UP_DOWN:
 2995              	.LFB107:
   9:quantum/rgb_matrix_animations/cycle_up_down_anim.h **** 
  10:quantum/rgb_matrix_animations/cycle_up_down_anim.h **** bool CYCLE_UP_DOWN(effect_params_t* params) { return effect_runner_i(params, &CYCLE_UP_DOWN_math); 
 2996              		.loc 7 10 0
 2997              		.cfi_startproc
 2998              		@ args = 0, pretend = 0, frame = 0
 2999              		@ frame_needed = 0, uses_anonymous_args = 0
 3000              		@ link register save eliminated.
 3001              	.LVL277:
 3002              		.loc 7 10 0
 3003 0000 0149     		ldr	r1, .L161
 3004 0002 FFF7FEBF 		b	effect_runner_i
 3005              	.LVL278:
 3006              	.L162:
 3007 0006 00BF     		.align	2
 3008              	.L161:
 3009 0008 00000000 		.word	CYCLE_UP_DOWN_math
 3010              		.cfi_endproc
 3011              	.LFE107:
 3013              		.section	.text.RAINBOW_MOVING_CHEVRON,"ax",%progbits
 3014              		.align	1
 3015              		.global	RAINBOW_MOVING_CHEVRON
 3016              		.syntax unified
 3017              		.thumb
 3018              		.thumb_func
 3019              		.fpu fpv4-sp-d16
 3021              	RAINBOW_MOVING_CHEVRON:
 3022              	.LFB109:
   9:quantum/rgb_matrix_animations/rainbow_moving_chevron_anim.h **** 
  10:quantum/rgb_matrix_animations/rainbow_moving_chevron_anim.h **** bool RAINBOW_MOVING_CHEVRON(effect_params_t* params) { return effect_runner_i(params, &RAINBOW_MOVI
 3023              		.loc 8 10 0
 3024              		.cfi_startproc
 3025              		@ args = 0, pretend = 0, frame = 0
 3026              		@ frame_needed = 0, uses_anonymous_args = 0
 3027              		@ link register save eliminated.
 3028              	.LVL279:
 3029              		.loc 8 10 0
 3030 0000 0149     		ldr	r1, .L164
 3031 0002 FFF7FEBF 		b	effect_runner_i
 3032              	.LVL280:
 3033              	.L165:
 3034 0006 00BF     		.align	2
 3035              	.L164:
 3036 0008 00000000 		.word	RAINBOW_MOVING_CHEVRON_math
 3037              		.cfi_endproc
 3038              	.LFE109:
 3040              		.section	.text.effect_runner_sin_cos_i,"ax",%progbits
 3041              		.align	1
 3042              		.global	effect_runner_sin_cos_i
 3043              		.syntax unified
 3044              		.thumb
 3045              		.thumb_func
 3046              		.fpu fpv4-sp-d16
 3048              	effect_runner_sin_cos_i:
 3049              	.LFB83:
 3050              		.file 32 "quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h"
   1:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** typedef HSV (*sin_cos_i_f)(HSV hsv, int8_t sin, int8_t cos, uint8_t i, uint8_t time);
   4:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** bool effect_runner_sin_cos_i(effect_params_t* params, sin_cos_i_f effect_func) {
 3051              		.loc 32 5 0
 3052              		.cfi_startproc
 3053              		@ args = 0, pretend = 0, frame = 16
 3054              		@ frame_needed = 0, uses_anonymous_args = 0
 3055              	.LVL281:
 3056 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3057              		.cfi_def_cfa_offset 36
 3058              		.cfi_offset 4, -36
 3059              		.cfi_offset 5, -32
 3060              		.cfi_offset 6, -28
 3061              		.cfi_offset 7, -24
 3062              		.cfi_offset 8, -20
 3063              		.cfi_offset 9, -16
 3064              		.cfi_offset 10, -12
 3065              		.cfi_offset 11, -8
 3066              		.cfi_offset 14, -4
   6:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
   7:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** 
   8:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     uint16_t time      = scale16by8(g_rgb_counters.tick, rgb_matrix_config.speed / 4);
 3067              		.loc 32 8 0
 3068 0004 2E4E     		ldr	r6, .L171
 3069 0006 2F4A     		ldr	r2, .L171+4
 3070 0008 3579     		ldrb	r5, [r6, #4]	@ zero_extendqisi2
   6:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3071              		.loc 32 6 0
 3072 000a 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 3073              	.LBB224:
 3074              	.LBB225:
 3075              		.loc 3 253 0
 3076 000c AB08     		lsrs	r3, r5, #2
 3077              	.LBE225:
 3078              	.LBE224:
 3079              		.loc 32 8 0
 3080 000e 1568     		ldr	r5, [r2]	@ unaligned
   6:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3081              		.loc 32 6 0
 3082 0010 C4EB0414 		rsb	r4, r4, r4, lsl #4
 3083              	.LBB227:
 3084              	.LBB226:
 3085              		.loc 3 253 0
 3086 0014 5D43     		muls	r5, r3, r5
 3087              	.LBE226:
 3088              	.LBE227:
   6:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3089              		.loc 32 6 0
 3090 0016 E4B2     		uxtb	r4, r4
 3091              	.LVL282:
   9:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     int8_t   cos_value = cos8(time) - 128;
 3092              		.loc 32 9 0
 3093 0018 C5F30725 		ubfx	r5, r5, #8, #8
   6:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3094              		.loc 32 6 0
 3095 001c 04F10F07 		add	r7, r4, #15
   5:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3096              		.loc 32 5 0
 3097 0020 87B0     		sub	sp, sp, #28
 3098              		.cfi_def_cfa_offset 64
   6:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3099              		.loc 32 6 0
 3100 0022 FFB2     		uxtb	r7, r7
 3101              	.LVL283:
   5:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3102              		.loc 32 5 0
 3103 0024 8146     		mov	r9, r0
 3104              	.LBB228:
 3105              	.LBB229:
 255:./lib/lib8tion/trig8.h **** }
 3106              		.loc 1 255 0
 3107 0026 05F14000 		add	r0, r5, #64
 3108              	.LVL284:
 3109 002a 692F     		cmp	r7, #105
 3110 002c C0B2     		uxtb	r0, r0
 3111              	.LBE229:
 3112              	.LBE228:
   5:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3113              		.loc 32 5 0
 3114 002e 0391     		str	r1, [sp, #12]
 3115 0030 BA46     		mov	r10, r7
 3116 0032 28BF     		it	cs
 3117 0034 4FF0690A 		movcs	r10, #105
 3118              	.LVL285:
 3119              	.LBB231:
 3120              	.LBB230:
 255:./lib/lib8tion/trig8.h **** }
 3121              		.loc 1 255 0
 3122 0038 FFF7FEFF 		bl	sin8_C
 3123              	.LVL286:
 3124              	.LBE230:
 3125              	.LBE231:
 3126              		.loc 32 9 0
 3127 003c 8038     		subs	r0, r0, #128
 3128 003e 4FFA80FB 		sxtb	fp, r0
 3129              	.LVL287:
  10:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     int8_t   sin_value = sin8(time) - 128;
 3130              		.loc 32 10 0
 3131 0042 2846     		mov	r0, r5
 3132 0044 FFF7FEFF 		bl	sin8_C
 3133              	.LVL288:
 3134 0048 8038     		subs	r0, r0, #128
 3135 004a 4FFA80F8 		sxtb	r8, r0
 3136              	.LVL289:
 3137 004e 0296     		str	r6, [sp, #8]
 3138              	.LVL290:
 3139              	.L167:
 3140 0050 E3B2     		uxtb	r3, r4
 3141              	.LVL291:
 3142              	.LBB232:
  11:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 3143              		.loc 32 11 0 discriminator 1
 3144 0052 5345     		cmp	r3, r10
 3145 0054 06D3     		bcc	.L170
 3146              	.LBE232:
  12:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
  13:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         RGB rgb = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, cos_value, sin_value, i, time));
  14:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  15:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     }
  16:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     return led_max < DRIVER_LED_TOTAL;
  17:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h **** }
 3147              		.loc 32 17 0
 3148 0056 682F     		cmp	r7, #104
 3149 0058 8CBF     		ite	hi
 3150 005a 0020     		movhi	r0, #0
 3151 005c 0120     		movls	r0, #1
 3152 005e 07B0     		add	sp, sp, #28
 3153              		.cfi_remember_state
 3154              		.cfi_def_cfa_offset 36
 3155              		@ sp needed
 3156 0060 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3157              	.LVL292:
 3158              	.L170:
 3159              		.cfi_restore_state
 3160              	.LBB234:
 3161              	.LBB233:
  12:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 3162              		.loc 32 12 0
 3163 0064 184A     		ldr	r2, .L171+8
 3164 0066 A218     		adds	r2, r4, r2
 3165 0068 92F81D11 		ldrb	r1, [r2, #285]	@ zero_extendqisi2
 3166 006c 99F80120 		ldrb	r2, [r9, #1]	@ zero_extendqisi2
 3167 0070 1142     		tst	r1, r2
 3168 0072 23D0     		beq	.L169
  13:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 3169              		.loc 32 13 0
 3170 0074 029A     		ldr	r2, [sp, #8]
 3171 0076 0095     		str	r5, [sp]
 3172 0078 5078     		ldrb	r0, [r2, #1]	@ zero_extendqisi2
 3173 007a 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 3174 007c 039E     		ldr	r6, [sp, #12]
 3175 007e 40EA0220 		orr	r0, r0, r2, lsl #8
 3176 0082 029A     		ldr	r2, [sp, #8]
 3177 0084 92F803C0 		ldrb	ip, [r2, #3]	@ zero_extendqisi2
 3178 0088 5946     		mov	r1, fp
 3179 008a 4246     		mov	r2, r8
 3180 008c 40EA0C40 		orr	r0, r0, ip, lsl #16
 3181 0090 B047     		blx	r6
 3182              	.LVL293:
 3183 0092 C0F30723 		ubfx	r3, r0, #8, #8
 3184 0096 8DF81400 		strb	r0, [sp, #20]
 3185 009a C0F30740 		ubfx	r0, r0, #16, #8
 3186 009e 8DF81530 		strb	r3, [sp, #21]
 3187 00a2 8DF81600 		strb	r0, [sp, #22]
 3188 00a6 0598     		ldr	r0, [sp, #20]
 3189 00a8 FFF7FEFF 		bl	hsv_to_rgb
 3190              	.LVL294:
  14:quantum/rgb_matrix_runners/effect_runner_sin_cos_i.h ****     }
 3191              		.loc 32 14 0
 3192 00ac C0F30743 		ubfx	r3, r0, #16, #8
 3193 00b0 C2B2     		uxtb	r2, r0
 3194 00b2 C0F30721 		ubfx	r1, r0, #8, #8
 3195 00b6 2046     		mov	r0, r4
 3196 00b8 FFF7FEFF 		bl	rgb_matrix_set_color
 3197              	.LVL295:
 3198              	.L169:
 3199 00bc 0134     		adds	r4, r4, #1
 3200              	.LVL296:
 3201 00be C7E7     		b	.L167
 3202              	.L172:
 3203              		.align	2
 3204              	.L171:
 3205 00c0 00000000 		.word	rgb_matrix_config
 3206 00c4 00000000 		.word	g_rgb_counters
 3207 00c8 00000000 		.word	g_led_config
 3208              	.LBE233:
 3209              	.LBE234:
 3210              		.cfi_endproc
 3211              	.LFE83:
 3213              		.section	.text.DUAL_BEACON,"ax",%progbits
 3214              		.align	1
 3215              		.global	DUAL_BEACON
 3216              		.syntax unified
 3217              		.thumb
 3218              		.thumb_func
 3219              		.fpu fpv4-sp-d16
 3221              	DUAL_BEACON:
 3222              	.LFB119:
   9:quantum/rgb_matrix_animations/dual_beacon_anim.h **** 
  10:quantum/rgb_matrix_animations/dual_beacon_anim.h **** bool DUAL_BEACON(effect_params_t* params) { return effect_runner_sin_cos_i(params, &DUAL_BEACON_mat
 3223              		.loc 11 10 0
 3224              		.cfi_startproc
 3225              		@ args = 0, pretend = 0, frame = 0
 3226              		@ frame_needed = 0, uses_anonymous_args = 0
 3227              		@ link register save eliminated.
 3228              	.LVL297:
 3229              		.loc 11 10 0
 3230 0000 0149     		ldr	r1, .L174
 3231 0002 FFF7FEBF 		b	effect_runner_sin_cos_i
 3232              	.LVL298:
 3233              	.L175:
 3234 0006 00BF     		.align	2
 3235              	.L174:
 3236 0008 00000000 		.word	DUAL_BEACON_math
 3237              		.cfi_endproc
 3238              	.LFE119:
 3240              		.section	.text.RAINBOW_BEACON,"ax",%progbits
 3241              		.align	1
 3242              		.global	RAINBOW_BEACON
 3243              		.syntax unified
 3244              		.thumb
 3245              		.thumb_func
 3246              		.fpu fpv4-sp-d16
 3248              	RAINBOW_BEACON:
 3249              	.LFB121:
   9:quantum/rgb_matrix_animations/rainbow_beacon_anim.h **** 
  10:quantum/rgb_matrix_animations/rainbow_beacon_anim.h **** bool RAINBOW_BEACON(effect_params_t* params) { return effect_runner_sin_cos_i(params, &RAINBOW_BEAC
 3250              		.loc 12 10 0
 3251              		.cfi_startproc
 3252              		@ args = 0, pretend = 0, frame = 0
 3253              		@ frame_needed = 0, uses_anonymous_args = 0
 3254              		@ link register save eliminated.
 3255              	.LVL299:
 3256              		.loc 12 10 0
 3257 0000 0149     		ldr	r1, .L177
 3258 0002 FFF7FEBF 		b	effect_runner_sin_cos_i
 3259              	.LVL300:
 3260              	.L178:
 3261 0006 00BF     		.align	2
 3262              	.L177:
 3263 0008 00000000 		.word	RAINBOW_BEACON_math
 3264              		.cfi_endproc
 3265              	.LFE121:
 3267              		.section	.text.PINWHEELS,"ax",%progbits
 3268              		.align	1
 3269              		.global	PINWHEELS
 3270              		.syntax unified
 3271              		.thumb
 3272              		.thumb_func
 3273              		.fpu fpv4-sp-d16
 3275              	PINWHEELS:
 3276              	.LFB123:
   9:quantum/rgb_matrix_animations/rainbow_pinwheels_anim.h **** 
  10:quantum/rgb_matrix_animations/rainbow_pinwheels_anim.h **** bool PINWHEELS(effect_params_t* params) { return effect_runner_sin_cos_i(params, &PINWHEELS_math); 
 3277              		.loc 13 10 0
 3278              		.cfi_startproc
 3279              		@ args = 0, pretend = 0, frame = 0
 3280              		@ frame_needed = 0, uses_anonymous_args = 0
 3281              		@ link register save eliminated.
 3282              	.LVL301:
 3283              		.loc 13 10 0
 3284 0000 0149     		ldr	r1, .L180
 3285 0002 FFF7FEBF 		b	effect_runner_sin_cos_i
 3286              	.LVL302:
 3287              	.L181:
 3288 0006 00BF     		.align	2
 3289              	.L180:
 3290 0008 00000000 		.word	PINWHEELS_math
 3291              		.cfi_endproc
 3292              	.LFE123:
 3294              		.section	.text.effect_runner_reactive,"ax",%progbits
 3295              		.align	1
 3296              		.global	effect_runner_reactive
 3297              		.syntax unified
 3298              		.thumb
 3299              		.thumb_func
 3300              		.fpu fpv4-sp-d16
 3302              	effect_runner_reactive:
 3303              	.LFB84:
 3304              		.file 33 "quantum/rgb_matrix_runners/effect_runner_reactive.h"
   1:quantum/rgb_matrix_runners/effect_runner_reactive.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_reactive.h **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
   4:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_reactive.h **** typedef HSV (*reactive_f)(HSV hsv, uint16_t offset);
   6:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
   7:quantum/rgb_matrix_runners/effect_runner_reactive.h **** bool effect_runner_reactive(effect_params_t* params, reactive_f effect_func) {
 3305              		.loc 33 7 0
 3306              		.cfi_startproc
 3307              		@ args = 0, pretend = 0, frame = 16
 3308              		@ frame_needed = 0, uses_anonymous_args = 0
 3309              	.LVL303:
 3310 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3311              		.cfi_def_cfa_offset 36
 3312              		.cfi_offset 4, -36
 3313              		.cfi_offset 5, -32
 3314              		.cfi_offset 6, -28
 3315              		.cfi_offset 7, -24
 3316              		.cfi_offset 8, -20
 3317              		.cfi_offset 9, -16
 3318              		.cfi_offset 10, -12
 3319              		.cfi_offset 11, -8
 3320              		.cfi_offset 14, -4
   8:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3321              		.loc 33 8 0
 3322 0004 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
   9:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
  10:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     uint16_t max_tick = 65535 / rgb_matrix_config.speed;
 3323              		.loc 33 10 0
 3324 0006 324D     		ldr	r5, .L191
 3325              	.LBB235:
 3326              	.LBB236:
  11:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     for (uint8_t i = led_min; i < led_max; i++) {
  12:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 3327              		.loc 33 12 0
 3328 0008 DFF8C8B0 		ldr	fp, .L191+4
 3329              	.LBB237:
  13:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         uint16_t tick = max_tick;
  14:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         // Reverse search to find most recent key hit
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         for (int8_t j = g_last_hit_tracker.count - 1; j >= 0; j--) {
 3330              		.loc 33 15 0
 3331 000c DFF8C880 		ldr	r8, .L191+8
 3332              	.LBE237:
 3333              	.LBE236:
 3334              	.LBE235:
  10:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 3335              		.loc 33 10 0
 3336 0010 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
   8:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
 3337              		.loc 33 8 0
 3338 0012 C4EB0414 		rsb	r4, r4, r4, lsl #4
 3339 0016 E4B2     		uxtb	r4, r4
 3340              	.LVL304:
 3341 0018 04F10F06 		add	r6, r4, #15
 3342 001c F6B2     		uxtb	r6, r6
 3343              	.LVL305:
   7:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3344              		.loc 33 7 0
 3345 001e 85B0     		sub	sp, sp, #20
 3346              		.cfi_def_cfa_offset 56
 3347 0020 692E     		cmp	r6, #105
 3348 0022 B246     		mov	r10, r6
   7:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3349              		.loc 33 7 0
 3350 0024 8146     		mov	r9, r0
 3351 0026 0191     		str	r1, [sp, #4]
 3352 0028 28BF     		it	cs
 3353 002a 4FF0690A 		movcs	r10, #105
 3354              	.LVL306:
  10:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 3355              		.loc 33 10 0
 3356 002e 4FF6FF77 		movw	r7, #65535
 3357 0032 97FBF3F7 		sdiv	r7, r7, r3
 3358              	.LVL307:
 3359              	.L183:
 3360 0036 E0B2     		uxtb	r0, r4
 3361              	.LVL308:
 3362              	.LBB246:
  11:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 3363              		.loc 33 11 0 discriminator 1
 3364 0038 5045     		cmp	r0, r10
 3365 003a 06D3     		bcc	.L190
 3366              	.LBE246:
  16:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
  17:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 tick = g_last_hit_tracker.tick[j];
  18:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 break;
  19:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             }
  20:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         }
  21:quantum/rgb_matrix_runners/effect_runner_reactive.h **** 
  22:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         uint16_t offset = scale16by8(tick, rgb_matrix_config.speed);
  23:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         RGB      rgb    = hsv_to_rgb(effect_func(rgb_matrix_config.hsv, offset));
  24:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  25:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     }
  26:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     return led_max < DRIVER_LED_TOTAL;
  27:quantum/rgb_matrix_runners/effect_runner_reactive.h **** }
 3367              		.loc 33 27 0
 3368 003c 682E     		cmp	r6, #104
 3369 003e 8CBF     		ite	hi
 3370 0040 0020     		movhi	r0, #0
 3371              	.LVL309:
 3372 0042 0120     		movls	r0, #1
 3373 0044 05B0     		add	sp, sp, #20
 3374              		.cfi_remember_state
 3375              		.cfi_def_cfa_offset 36
 3376              		@ sp needed
 3377 0046 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3378              	.LVL310:
 3379              	.L190:
 3380              		.cfi_restore_state
 3381              	.LBB247:
 3382              	.LBB244:
  12:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         uint16_t tick = max_tick;
 3383              		.loc 33 12 0
 3384 004a 04EB0B03 		add	r3, r4, fp
 3385 004e 93F81D21 		ldrb	r2, [r3, #285]	@ zero_extendqisi2
 3386 0052 99F80130 		ldrb	r3, [r9, #1]	@ zero_extendqisi2
 3387 0056 1A42     		tst	r2, r3
 3388 0058 28D0     		beq	.L185
 3389              	.LVL311:
 3390              	.LBB238:
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
 3391              		.loc 33 15 0
 3392 005a 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
 3393 005e 013B     		subs	r3, r3, #1
 3394 0060 5BB2     		sxtb	r3, r3
 3395              	.LVL312:
 3396              	.L186:
  15:quantum/rgb_matrix_runners/effect_runner_reactive.h ****             if (g_last_hit_tracker.index[j] == i && g_last_hit_tracker.tick[j] < tick) {
 3397              		.loc 33 15 0 is_stmt 0 discriminator 1
 3398 0062 1A06     		lsls	r2, r3, #24
 3399 0064 24D5     		bpl	.L189
 3400              	.LBE238:
 3401              	.LBE244:
 3402              	.LBE247:
  10:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 3403              		.loc 33 10 0 is_stmt 1
 3404 0066 3946     		mov	r1, r7
 3405              	.L188:
 3406              	.LVL313:
 3407              	.LBB248:
 3408              	.LBB245:
 3409              	.LBB239:
 3410              	.LBB240:
 3411              		.loc 3 253 0
 3412 0068 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 3413              	.LVL314:
 3414              	.LBE240:
 3415              	.LBE239:
  23:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 3416              		.loc 33 23 0
 3417 006a A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 3418              	.LVL315:
 3419              	.LBB242:
 3420              	.LBB241:
 3421              		.loc 3 253 0
 3422 006c 5943     		muls	r1, r3, r1
 3423              	.LVL316:
 3424              	.LBE241:
 3425              	.LBE242:
  23:quantum/rgb_matrix_runners/effect_runner_reactive.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 3426              		.loc 33 23 0
 3427 006e 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 3428 0070 43EA0023 		orr	r3, r3, r0, lsl #8
 3429 0074 E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
 3430 0076 C1F30F21 		ubfx	r1, r1, #8, #16
 3431 007a 43EA0040 		orr	r0, r3, r0, lsl #16
 3432 007e 019B     		ldr	r3, [sp, #4]
 3433 0080 9847     		blx	r3
 3434              	.LVL317:
 3435 0082 C0F30723 		ubfx	r3, r0, #8, #8
 3436 0086 8DF80C00 		strb	r0, [sp, #12]
 3437 008a C0F30740 		ubfx	r0, r0, #16, #8
 3438 008e 8DF80D30 		strb	r3, [sp, #13]
 3439 0092 8DF80E00 		strb	r0, [sp, #14]
 3440 0096 0398     		ldr	r0, [sp, #12]
 3441 0098 FFF7FEFF 		bl	hsv_to_rgb
 3442              	.LVL318:
  24:quantum/rgb_matrix_runners/effect_runner_reactive.h ****     }
 3443              		.loc 33 24 0
 3444 009c C0F30743 		ubfx	r3, r0, #16, #8
 3445 00a0 C2B2     		uxtb	r2, r0
 3446 00a2 C0F30721 		ubfx	r1, r0, #8, #8
 3447 00a6 2046     		mov	r0, r4
 3448 00a8 FFF7FEFF 		bl	rgb_matrix_set_color
 3449              	.LVL319:
 3450              	.L185:
 3451 00ac 0134     		adds	r4, r4, #1
 3452              	.LVL320:
 3453 00ae C2E7     		b	.L183
 3454              	.LVL321:
 3455              	.L189:
 3456              	.LBB243:
  16:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 tick = g_last_hit_tracker.tick[j];
 3457              		.loc 33 16 0
 3458 00b0 08EB0302 		add	r2, r8, r3
 3459 00b4 527C     		ldrb	r2, [r2, #17]	@ zero_extendqisi2
 3460 00b6 8242     		cmp	r2, r0
 3461 00b8 07D1     		bne	.L187
  16:quantum/rgb_matrix_runners/effect_runner_reactive.h ****                 tick = g_last_hit_tracker.tick[j];
 3462              		.loc 33 16 0 is_stmt 0 discriminator 1
 3463 00ba 03F10C02 		add	r2, r3, #12
 3464 00be 08EB4202 		add	r2, r8, r2, lsl #1
 3465 00c2 B2F80110 		ldrh	r1, [r2, #1]	@ unaligned
 3466 00c6 B942     		cmp	r1, r7
 3467 00c8 CED3     		bcc	.L188
 3468              	.L187:
 3469              	.LVL322:
 3470 00ca 013B     		subs	r3, r3, #1
 3471              	.LVL323:
 3472 00cc C9E7     		b	.L186
 3473              	.L192:
 3474 00ce 00BF     		.align	2
 3475              	.L191:
 3476 00d0 00000000 		.word	rgb_matrix_config
 3477 00d4 00000000 		.word	g_led_config
 3478 00d8 00000000 		.word	g_last_hit_tracker
 3479              	.LBE243:
 3480              	.LBE245:
 3481              	.LBE248:
 3482              		.cfi_endproc
 3483              	.LFE84:
 3485              		.section	.text.SOLID_REACTIVE_SIMPLE,"ax",%progbits
 3486              		.align	1
 3487              		.global	SOLID_REACTIVE_SIMPLE
 3488              		.syntax unified
 3489              		.thumb
 3490              		.thumb_func
 3491              		.fpu fpv4-sp-d16
 3493              	SOLID_REACTIVE_SIMPLE:
 3494              	.LFB129:
  10:quantum/rgb_matrix_animations/solid_reactive_simple_anim.h **** 
  11:quantum/rgb_matrix_animations/solid_reactive_simple_anim.h **** bool SOLID_REACTIVE_SIMPLE(effect_params_t* params) { return effect_runner_reactive(params, &SOLID_
 3495              		.loc 14 11 0 is_stmt 1
 3496              		.cfi_startproc
 3497              		@ args = 0, pretend = 0, frame = 0
 3498              		@ frame_needed = 0, uses_anonymous_args = 0
 3499              		@ link register save eliminated.
 3500              	.LVL324:
 3501              		.loc 14 11 0
 3502 0000 0149     		ldr	r1, .L194
 3503 0002 FFF7FEBF 		b	effect_runner_reactive
 3504              	.LVL325:
 3505              	.L195:
 3506 0006 00BF     		.align	2
 3507              	.L194:
 3508 0008 00000000 		.word	SOLID_REACTIVE_SIMPLE_math
 3509              		.cfi_endproc
 3510              	.LFE129:
 3512              		.section	.text.SOLID_REACTIVE,"ax",%progbits
 3513              		.align	1
 3514              		.global	SOLID_REACTIVE
 3515              		.syntax unified
 3516              		.thumb
 3517              		.thumb_func
 3518              		.fpu fpv4-sp-d16
 3520              	SOLID_REACTIVE:
 3521              	.LFB131:
  10:quantum/rgb_matrix_animations/solid_reactive_anim.h **** 
  11:quantum/rgb_matrix_animations/solid_reactive_anim.h **** bool SOLID_REACTIVE(effect_params_t* params) { return effect_runner_reactive(params, &SOLID_REACTIV
 3522              		.loc 15 11 0
 3523              		.cfi_startproc
 3524              		@ args = 0, pretend = 0, frame = 0
 3525              		@ frame_needed = 0, uses_anonymous_args = 0
 3526              		@ link register save eliminated.
 3527              	.LVL326:
 3528              		.loc 15 11 0
 3529 0000 0149     		ldr	r1, .L197
 3530 0002 FFF7FEBF 		b	effect_runner_reactive
 3531              	.LVL327:
 3532              	.L198:
 3533 0006 00BF     		.align	2
 3534              	.L197:
 3535 0008 00000000 		.word	SOLID_REACTIVE_math
 3536              		.cfi_endproc
 3537              	.LFE131:
 3539              		.section	.text.effect_runner_reactive_splash,"ax",%progbits
 3540              		.align	1
 3541              		.global	effect_runner_reactive_splash
 3542              		.syntax unified
 3543              		.thumb
 3544              		.thumb_func
 3545              		.fpu fpv4-sp-d16
 3547              	effect_runner_reactive_splash:
 3548              	.LFB85:
 3549              		.file 34 "quantum/rgb_matrix_runners/effect_runner_reactive_splash.h"
   1:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** #pragma once
   2:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** 
   3:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
   4:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** 
   5:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** typedef HSV (*reactive_splash_f)(HSV hsv, int16_t dx, int16_t dy, uint8_t dist, uint16_t tick);
   6:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** 
   7:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** bool effect_runner_reactive_splash(uint8_t start, effect_params_t* params, reactive_splash_f effect
 3550              		.loc 34 7 0
 3551              		.cfi_startproc
 3552              		@ args = 0, pretend = 0, frame = 40
 3553              		@ frame_needed = 0, uses_anonymous_args = 0
 3554              	.LVL328:
 3555 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3556              		.cfi_def_cfa_offset 36
 3557              		.cfi_offset 4, -36
 3558              		.cfi_offset 5, -32
 3559              		.cfi_offset 6, -28
 3560              		.cfi_offset 7, -24
 3561              		.cfi_offset 8, -20
 3562              		.cfi_offset 9, -16
 3563              		.cfi_offset 10, -12
 3564              		.cfi_offset 11, -8
 3565              		.cfi_offset 14, -4
   8:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3566              		.loc 34 8 0
 3567 0004 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
   9:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** 
  10:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     uint8_t count = g_last_hit_tracker.count;
 3568              		.loc 34 10 0
 3569 0006 DFF82081 		ldr	r8, .L208+8
 3570 000a 454D     		ldr	r5, .L208
   8:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3571              		.loc 34 8 0
 3572 000c C4EB0414 		rsb	r4, r4, r4, lsl #4
 3573 0010 E4B2     		uxtb	r4, r4
 3574              	.LVL329:
   7:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3575              		.loc 34 7 0
 3576 0012 8DB0     		sub	sp, sp, #52
 3577              		.cfi_def_cfa_offset 88
   8:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3578              		.loc 34 8 0
 3579 0014 04F10F07 		add	r7, r4, #15
 3580 0018 FBB2     		uxtb	r3, r7
 3581 001a 9B46     		mov	fp, r3
 3582 001c 692B     		cmp	r3, #105
 3583 001e 0393     		str	r3, [sp, #12]
 3584              	.LVL330:
 3585              		.loc 34 10 0
 3586 0020 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
   7:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 3587              		.loc 34 7 0
 3588 0024 0590     		str	r0, [sp, #20]
 3589 0026 8A46     		mov	r10, r1
 3590 0028 0692     		str	r2, [sp, #24]
 3591 002a 28BF     		it	cs
 3592 002c 4FF0690B 		movcs	fp, #105
 3593              	.LVL331:
 3594              		.loc 34 10 0
 3595 0030 0493     		str	r3, [sp, #16]
 3596              	.LVL332:
 3597 0032 05EB4405 		add	r5, r5, r4, lsl #1
 3598              	.LVL333:
 3599              	.L200:
 3600              	.LBB259:
  11:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 3601              		.loc 34 11 0 discriminator 1
 3602 0036 E3B2     		uxtb	r3, r4
 3603 0038 9B45     		cmp	fp, r3
 3604 003a 07D8     		bhi	.L207
 3605              	.LBE259:
  12:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB_MATRIX_TEST_LED_FLAGS();
  13:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         HSV hsv = rgb_matrix_config.hsv;
  14:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         hsv.v   = 0;
  15:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         for (uint8_t j = start; j < count; j++) {
  16:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
  17:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
  18:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint8_t  dist = sqrt16(dx * dx + dy * dy);
  19:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint16_t tick = scale16by8(g_last_hit_tracker.tick[j], rgb_matrix_config.speed);
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             hsv           = effect_func(hsv, dx, dy, dist, tick);
  21:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
  22:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         hsv.v   = scale8(hsv.v, rgb_matrix_config.hsv.v);
  23:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB rgb = hsv_to_rgb(hsv);
  24:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  25:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     }
  26:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     return led_max < DRIVER_LED_TOTAL;
  27:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h **** }
 3606              		.loc 34 27 0
 3607 003c 039B     		ldr	r3, [sp, #12]
 3608 003e 682B     		cmp	r3, #104
 3609 0040 8CBF     		ite	hi
 3610 0042 0020     		movhi	r0, #0
 3611 0044 0120     		movls	r0, #1
 3612 0046 0DB0     		add	sp, sp, #52
 3613              		.cfi_remember_state
 3614              		.cfi_def_cfa_offset 36
 3615              		@ sp needed
 3616 0048 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3617              	.LVL334:
 3618              	.L207:
 3619              		.cfi_restore_state
 3620              	.LBB274:
 3621              	.LBB260:
  12:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 3622              		.loc 34 12 0
 3623 004c 344B     		ldr	r3, .L208
 3624 004e 2344     		add	r3, r3, r4
 3625 0050 93F81D21 		ldrb	r2, [r3, #285]	@ zero_extendqisi2
 3626 0054 9AF80130 		ldrb	r3, [r10, #1]	@ zero_extendqisi2
 3627 0058 1A42     		tst	r2, r3
 3628 005a 1DD0     		beq	.L202
  13:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         hsv.v   = 0;
 3629              		.loc 34 13 0
 3630 005c DFF8CC90 		ldr	r9, .L208+12
 3631 0060 059E     		ldr	r6, [sp, #20]
 3632 0062 39F80139 		ldrh	r3, [r9], #-1	@ unaligned
 3633 0066 ADF82830 		strh	r3, [sp, #40]	@ unaligned
 3634              	.LVL335:
  14:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         for (uint8_t j = start; j < count; j++) {
 3635              		.loc 34 14 0
 3636 006a 0023     		movs	r3, #0
 3637              	.LVL336:
 3638              	.L203:
 3639              	.LBB261:
  15:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dx   = g_led_config.point[i].x - g_last_hit_tracker.x[j];
 3640              		.loc 34 15 0 discriminator 1
 3641 006c 0499     		ldr	r1, [sp, #16]
 3642 006e F2B2     		uxtb	r2, r6
 3643 0070 8A42     		cmp	r2, r1
 3644 0072 14D3     		bcc	.L206
 3645              	.LVL337:
 3646              	.LBE261:
  22:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         RGB rgb = hsv_to_rgb(hsv);
 3647              		.loc 34 22 0
 3648 0074 2B4A     		ldr	r2, .L208+4
 3649              	.LBB271:
 3650              	.LBB272:
  26:./lib/lib8tion/scale8.h **** #endif
 3651              		.loc 3 26 0
 3652 0076 D078     		ldrb	r0, [r2, #3]	@ zero_extendqisi2
 3653 0078 10FB03F3 		smulbb	r3, r0, r3
 3654              	.LVL338:
 3655 007c 1B12     		asrs	r3, r3, #8
 3656 007e 8DF82A30 		strb	r3, [sp, #42]
 3657              	.LBE272:
 3658              	.LBE271:
  23:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 3659              		.loc 34 23 0
 3660 0082 0A98     		ldr	r0, [sp, #40]
 3661 0084 FFF7FEFF 		bl	hsv_to_rgb
 3662              	.LVL339:
  24:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****     }
 3663              		.loc 34 24 0
 3664 0088 C0F30743 		ubfx	r3, r0, #16, #8
 3665 008c C2B2     		uxtb	r2, r0
 3666 008e C0F30721 		ubfx	r1, r0, #8, #8
 3667 0092 2046     		mov	r0, r4
 3668 0094 FFF7FEFF 		bl	rgb_matrix_set_color
 3669              	.LVL340:
 3670              	.L202:
 3671 0098 0134     		adds	r4, r4, #1
 3672              	.LVL341:
 3673 009a 0235     		adds	r5, r5, #2
 3674 009c CBE7     		b	.L200
 3675              	.LVL342:
 3676              	.L206:
 3677 009e 224A     		ldr	r2, .L208+8
 3678              	.LBB273:
 3679              	.LBB262:
  17:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint8_t  dist = sqrt16(dx * dx + dy * dy);
 3680              		.loc 34 17 0 discriminator 3
 3681 00a0 95F84CC0 		ldrb	ip, [r5, #76]	@ zero_extendqisi2
  16:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
 3682              		.loc 34 16 0 discriminator 3
 3683 00a4 95F84B00 		ldrb	r0, [r5, #75]	@ zero_extendqisi2
 3684 00a8 B218     		adds	r2, r6, r2
 3685 00aa 5178     		ldrb	r1, [r2, #1]	@ zero_extendqisi2
  17:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint8_t  dist = sqrt16(dx * dx + dy * dy);
 3686              		.loc 34 17 0 discriminator 3
 3687 00ac 527A     		ldrb	r2, [r2, #9]	@ zero_extendqisi2
 3688 00ae ACEB020C 		sub	ip, ip, r2
  16:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
 3689              		.loc 34 16 0 discriminator 3
 3690 00b2 401A     		subs	r0, r0, r1
  17:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint8_t  dist = sqrt16(dx * dx + dy * dy);
 3691              		.loc 34 17 0 discriminator 3
 3692 00b4 1FFA8CFC 		uxth	ip, ip
  16:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
 3693              		.loc 34 16 0 discriminator 3
 3694 00b8 80B2     		uxth	r0, r0
  17:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint8_t  dist = sqrt16(dx * dx + dy * dy);
 3695              		.loc 34 17 0 discriminator 3
 3696 00ba 0FFA8CF2 		sxth	r2, ip
  18:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint16_t tick = scale16by8(g_last_hit_tracker.tick[j], rgb_matrix_config.speed);
 3697              		.loc 34 18 0 discriminator 3
 3698 00be 1CFB0CFC 		smulbb	ip, ip, ip
  16:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             int16_t  dy   = g_led_config.point[i].y - g_last_hit_tracker.y[j];
 3699              		.loc 34 16 0 discriminator 3
 3700 00c2 01B2     		sxth	r1, r0
 3701              	.LVL343:
  18:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             uint16_t tick = scale16by8(g_last_hit_tracker.tick[j], rgb_matrix_config.speed);
 3702              		.loc 34 18 0 discriminator 3
 3703 00c4 10FB00C0 		smlabb	r0, r0, r0, ip
 3704 00c8 80B2     		uxth	r0, r0
 3705              	.LVL344:
 3706              	.LBB263:
 3707              	.LBB264:
 431:./lib/lib8tion/math8.h ****         return x;
 3708              		.loc 9 431 0 discriminator 3
 3709 00ca 0128     		cmp	r0, #1
 3710 00cc 1ED8     		bhi	.L204
 432:./lib/lib8tion/math8.h ****     }
 3711              		.loc 9 432 0
 3712 00ce C0B2     		uxtb	r0, r0
 3713              	.LVL345:
 3714              	.L205:
 3715              	.LBE264:
 3716              	.LBE263:
  19:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****             hsv           = effect_func(hsv, dx, dy, dist, tick);
 3717              		.loc 34 19 0
 3718 00d0 06F10C0C 		add	ip, r6, #12
 3719 00d4 08EB4C0C 		add	ip, r8, ip, lsl #1
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
 3720              		.loc 34 20 0
 3721 00d8 069F     		ldr	r7, [sp, #24]
 3722              	.LBB266:
 3723              	.LBB267:
 3724              		.loc 3 253 0
 3725 00da BCF801E0 		ldrh	lr, [ip, #1]	@ unaligned
 3726 00de 99F804C0 		ldrb	ip, [r9, #4]	@ zero_extendqisi2
 3727              	.LBE267:
 3728              	.LBE266:
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
 3729              		.loc 34 20 0
 3730 00e2 8DF82A30 		strb	r3, [sp, #42]
 3731              	.LBB269:
 3732              	.LBB268:
 3733              		.loc 3 253 0
 3734 00e6 0CFB0EFC 		mul	ip, ip, lr
 3735 00ea 4FEA1C2C 		lsr	ip, ip, #8
 3736              	.LVL346:
 3737              	.LBE268:
 3738              	.LBE269:
  20:quantum/rgb_matrix_runners/effect_runner_reactive_splash.h ****         }
 3739              		.loc 34 20 0
 3740 00ee 0346     		mov	r3, r0
 3741              	.LVL347:
 3742 00f0 CDF800C0 		str	ip, [sp]
 3743 00f4 0A98     		ldr	r0, [sp, #40]
 3744 00f6 B847     		blx	r7
 3745              	.LVL348:
 3746 00f8 C0F30723 		ubfx	r3, r0, #8, #8
 3747 00fc 8DF82930 		strb	r3, [sp, #41]
 3748 0100 8DF82800 		strb	r0, [sp, #40]
 3749 0104 0136     		adds	r6, r6, #1
 3750              	.LVL349:
 3751 0106 C0F30743 		ubfx	r3, r0, #16, #8
 3752 010a AFE7     		b	.L203
 3753              	.LVL350:
 3754              	.L204:
 3755 010c CDE90823 		strd	r2, r3, [sp, #32]
 3756 0110 0791     		str	r1, [sp, #28]
 3757              	.LBB270:
 3758              	.LBB265:
 3759 0112 FFF7FEFF 		bl	sqrt16.part.0
 3760              	.LVL351:
 3761 0116 DDE90823 		ldrd	r2, r3, [sp, #32]
 3762 011a 0799     		ldr	r1, [sp, #28]
 3763 011c D8E7     		b	.L205
 3764              	.L209:
 3765 011e 00BF     		.align	2
 3766              	.L208:
 3767 0120 00000000 		.word	g_led_config
 3768 0124 00000000 		.word	rgb_matrix_config
 3769 0128 00000000 		.word	g_last_hit_tracker
 3770 012c 01000000 		.word	rgb_matrix_config+1
 3771              	.LBE265:
 3772              	.LBE270:
 3773              	.LBE262:
 3774              	.LBE273:
 3775              	.LBE260:
 3776              	.LBE274:
 3777              		.cfi_endproc
 3778              	.LFE85:
 3780              		.section	.text.SOLID_REACTIVE_WIDE,"ax",%progbits
 3781              		.align	1
 3782              		.global	SOLID_REACTIVE_WIDE
 3783              		.syntax unified
 3784              		.thumb
 3785              		.thumb_func
 3786              		.fpu fpv4-sp-d16
 3788              	SOLID_REACTIVE_WIDE:
 3789              	.LFB133:
  20:quantum/rgb_matrix_animations/solid_reactive_wide.h **** 
  21:quantum/rgb_matrix_animations/solid_reactive_wide.h **** #            ifndef DISABLE_RGB_MATRIX_SOLID_REACTIVE_WIDE
  22:quantum/rgb_matrix_animations/solid_reactive_wide.h **** bool SOLID_REACTIVE_WIDE(effect_params_t* params) { return effect_runner_reactive_splash(qsub8(g_la
 3790              		.loc 16 22 0
 3791              		.cfi_startproc
 3792              		@ args = 0, pretend = 0, frame = 0
 3793              		@ frame_needed = 0, uses_anonymous_args = 0
 3794              		@ link register save eliminated.
 3795              	.LVL352:
 3796              		.loc 16 22 0
 3797 0000 054B     		ldr	r3, .L212
 3798 0002 064A     		ldr	r2, .L212+4
 3799              	.LBB275:
 3800              	.LBB276:
  91:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
 3801              		.loc 9 91 0
 3802 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3803 0006 013B     		subs	r3, r3, #1
 3804              	.LVL353:
  92:./lib/lib8tion/math8.h ****     return t;
 3805              		.loc 9 92 0
 3806 0008 B3F1FF3F 		cmp	r3, #-1
 3807 000c 08BF     		it	eq
 3808 000e 0023     		moveq	r3, #0
 3809              	.LVL354:
 3810              	.LBE276:
 3811              	.LBE275:
 3812              		.loc 16 22 0
 3813 0010 0146     		mov	r1, r0
 3814 0012 D8B2     		uxtb	r0, r3
 3815              	.LVL355:
 3816 0014 FFF7FEBF 		b	effect_runner_reactive_splash
 3817              	.LVL356:
 3818              	.L213:
 3819              		.align	2
 3820              	.L212:
 3821 0018 00000000 		.word	g_last_hit_tracker
 3822 001c 00000000 		.word	SOLID_REACTIVE_WIDE_math
 3823              		.cfi_endproc
 3824              	.LFE133:
 3826              		.section	.text.SOLID_REACTIVE_MULTIWIDE,"ax",%progbits
 3827              		.align	1
 3828              		.global	SOLID_REACTIVE_MULTIWIDE
 3829              		.syntax unified
 3830              		.thumb
 3831              		.thumb_func
 3832              		.fpu fpv4-sp-d16
 3834              	SOLID_REACTIVE_MULTIWIDE:
 3835              	.LFB134:
  23:quantum/rgb_matrix_animations/solid_reactive_wide.h **** #            endif
  24:quantum/rgb_matrix_animations/solid_reactive_wide.h **** 
  25:quantum/rgb_matrix_animations/solid_reactive_wide.h **** #            ifndef DISABLE_RGB_MATRIX_SOLID_REACTIVE_MULTIWIDE
  26:quantum/rgb_matrix_animations/solid_reactive_wide.h **** bool SOLID_REACTIVE_MULTIWIDE(effect_params_t* params) { return effect_runner_reactive_splash(0, pa
 3836              		.loc 16 26 0
 3837              		.cfi_startproc
 3838              		@ args = 0, pretend = 0, frame = 0
 3839              		@ frame_needed = 0, uses_anonymous_args = 0
 3840              		@ link register save eliminated.
 3841              	.LVL357:
 3842              		.loc 16 26 0
 3843 0000 0146     		mov	r1, r0
 3844 0002 024A     		ldr	r2, .L215
 3845 0004 0020     		movs	r0, #0
 3846              	.LVL358:
 3847 0006 FFF7FEBF 		b	effect_runner_reactive_splash
 3848              	.LVL359:
 3849              	.L216:
 3850 000a 00BF     		.align	2
 3851              	.L215:
 3852 000c 00000000 		.word	SOLID_REACTIVE_WIDE_math
 3853              		.cfi_endproc
 3854              	.LFE134:
 3856              		.section	.text.SOLID_REACTIVE_CROSS,"ax",%progbits
 3857              		.align	1
 3858              		.global	SOLID_REACTIVE_CROSS
 3859              		.syntax unified
 3860              		.thumb
 3861              		.thumb_func
 3862              		.fpu fpv4-sp-d16
 3864              	SOLID_REACTIVE_CROSS:
 3865              	.LFB136:
  25:quantum/rgb_matrix_animations/solid_reactive_cross.h **** 
  26:quantum/rgb_matrix_animations/solid_reactive_cross.h **** #            ifndef DISABLE_RGB_MATRIX_SOLID_REACTIVE_CROSS
  27:quantum/rgb_matrix_animations/solid_reactive_cross.h **** bool SOLID_REACTIVE_CROSS(effect_params_t* params) { return effect_runner_reactive_splash(qsub8(g_l
 3866              		.loc 17 27 0
 3867              		.cfi_startproc
 3868              		@ args = 0, pretend = 0, frame = 0
 3869              		@ frame_needed = 0, uses_anonymous_args = 0
 3870              		@ link register save eliminated.
 3871              	.LVL360:
 3872              		.loc 17 27 0
 3873 0000 054B     		ldr	r3, .L219
 3874 0002 064A     		ldr	r2, .L219+4
 3875              	.LBB277:
 3876              	.LBB278:
  91:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
 3877              		.loc 9 91 0
 3878 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3879 0006 013B     		subs	r3, r3, #1
 3880              	.LVL361:
  92:./lib/lib8tion/math8.h ****     return t;
 3881              		.loc 9 92 0
 3882 0008 B3F1FF3F 		cmp	r3, #-1
 3883 000c 08BF     		it	eq
 3884 000e 0023     		moveq	r3, #0
 3885              	.LVL362:
 3886              	.LBE278:
 3887              	.LBE277:
 3888              		.loc 17 27 0
 3889 0010 0146     		mov	r1, r0
 3890 0012 D8B2     		uxtb	r0, r3
 3891              	.LVL363:
 3892 0014 FFF7FEBF 		b	effect_runner_reactive_splash
 3893              	.LVL364:
 3894              	.L220:
 3895              		.align	2
 3896              	.L219:
 3897 0018 00000000 		.word	g_last_hit_tracker
 3898 001c 00000000 		.word	SOLID_REACTIVE_CROSS_math
 3899              		.cfi_endproc
 3900              	.LFE136:
 3902              		.section	.text.SOLID_REACTIVE_MULTICROSS,"ax",%progbits
 3903              		.align	1
 3904              		.global	SOLID_REACTIVE_MULTICROSS
 3905              		.syntax unified
 3906              		.thumb
 3907              		.thumb_func
 3908              		.fpu fpv4-sp-d16
 3910              	SOLID_REACTIVE_MULTICROSS:
 3911              	.LFB137:
  28:quantum/rgb_matrix_animations/solid_reactive_cross.h **** #            endif
  29:quantum/rgb_matrix_animations/solid_reactive_cross.h **** 
  30:quantum/rgb_matrix_animations/solid_reactive_cross.h **** #            ifndef DISABLE_RGB_MATRIX_SOLID_REACTIVE_MULTICROSS
  31:quantum/rgb_matrix_animations/solid_reactive_cross.h **** bool SOLID_REACTIVE_MULTICROSS(effect_params_t* params) { return effect_runner_reactive_splash(0, p
 3912              		.loc 17 31 0
 3913              		.cfi_startproc
 3914              		@ args = 0, pretend = 0, frame = 0
 3915              		@ frame_needed = 0, uses_anonymous_args = 0
 3916              		@ link register save eliminated.
 3917              	.LVL365:
 3918              		.loc 17 31 0
 3919 0000 0146     		mov	r1, r0
 3920 0002 024A     		ldr	r2, .L222
 3921 0004 0020     		movs	r0, #0
 3922              	.LVL366:
 3923 0006 FFF7FEBF 		b	effect_runner_reactive_splash
 3924              	.LVL367:
 3925              	.L223:
 3926 000a 00BF     		.align	2
 3927              	.L222:
 3928 000c 00000000 		.word	SOLID_REACTIVE_CROSS_math
 3929              		.cfi_endproc
 3930              	.LFE137:
 3932              		.section	.text.SOLID_REACTIVE_NEXUS,"ax",%progbits
 3933              		.align	1
 3934              		.global	SOLID_REACTIVE_NEXUS
 3935              		.syntax unified
 3936              		.thumb
 3937              		.thumb_func
 3938              		.fpu fpv4-sp-d16
 3940              	SOLID_REACTIVE_NEXUS:
 3941              	.LFB139:
  23:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** 
  24:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** #            ifndef DISABLE_RGB_MATRIX_SOLID_REACTIVE_NEXUS
  25:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** bool SOLID_REACTIVE_NEXUS(effect_params_t* params) { return effect_runner_reactive_splash(qsub8(g_l
 3942              		.loc 18 25 0
 3943              		.cfi_startproc
 3944              		@ args = 0, pretend = 0, frame = 0
 3945              		@ frame_needed = 0, uses_anonymous_args = 0
 3946              		@ link register save eliminated.
 3947              	.LVL368:
 3948              		.loc 18 25 0
 3949 0000 054B     		ldr	r3, .L226
 3950 0002 064A     		ldr	r2, .L226+4
 3951              	.LBB279:
 3952              	.LBB280:
  91:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
 3953              		.loc 9 91 0
 3954 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3955 0006 013B     		subs	r3, r3, #1
 3956              	.LVL369:
  92:./lib/lib8tion/math8.h ****     return t;
 3957              		.loc 9 92 0
 3958 0008 B3F1FF3F 		cmp	r3, #-1
 3959 000c 08BF     		it	eq
 3960 000e 0023     		moveq	r3, #0
 3961              	.LVL370:
 3962              	.LBE280:
 3963              	.LBE279:
 3964              		.loc 18 25 0
 3965 0010 0146     		mov	r1, r0
 3966 0012 D8B2     		uxtb	r0, r3
 3967              	.LVL371:
 3968 0014 FFF7FEBF 		b	effect_runner_reactive_splash
 3969              	.LVL372:
 3970              	.L227:
 3971              		.align	2
 3972              	.L226:
 3973 0018 00000000 		.word	g_last_hit_tracker
 3974 001c 00000000 		.word	SOLID_REACTIVE_NEXUS_math
 3975              		.cfi_endproc
 3976              	.LFE139:
 3978              		.section	.text.SOLID_REACTIVE_MULTINEXUS,"ax",%progbits
 3979              		.align	1
 3980              		.global	SOLID_REACTIVE_MULTINEXUS
 3981              		.syntax unified
 3982              		.thumb
 3983              		.thumb_func
 3984              		.fpu fpv4-sp-d16
 3986              	SOLID_REACTIVE_MULTINEXUS:
 3987              	.LFB140:
  26:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** #            endif
  27:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** 
  28:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** #            ifndef DISABLE_RGB_MATRIX_SOLID_REACTIVE_MULTINEXUS
  29:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** bool SOLID_REACTIVE_MULTINEXUS(effect_params_t* params) { return effect_runner_reactive_splash(0, p
 3988              		.loc 18 29 0
 3989              		.cfi_startproc
 3990              		@ args = 0, pretend = 0, frame = 0
 3991              		@ frame_needed = 0, uses_anonymous_args = 0
 3992              		@ link register save eliminated.
 3993              	.LVL373:
 3994              		.loc 18 29 0
 3995 0000 0146     		mov	r1, r0
 3996 0002 024A     		ldr	r2, .L229
 3997 0004 0020     		movs	r0, #0
 3998              	.LVL374:
 3999 0006 FFF7FEBF 		b	effect_runner_reactive_splash
 4000              	.LVL375:
 4001              	.L230:
 4002 000a 00BF     		.align	2
 4003              	.L229:
 4004 000c 00000000 		.word	SOLID_REACTIVE_NEXUS_math
 4005              		.cfi_endproc
 4006              	.LFE140:
 4008              		.section	.text.SPLASH,"ax",%progbits
 4009              		.align	1
 4010              		.global	SPLASH
 4011              		.syntax unified
 4012              		.thumb
 4013              		.thumb_func
 4014              		.fpu fpv4-sp-d16
 4016              	SPLASH:
 4017              	.LFB142:
  21:quantum/rgb_matrix_animations/splash_anim.h **** 
  22:quantum/rgb_matrix_animations/splash_anim.h **** #            ifndef DISABLE_RGB_MATRIX_SPLASH
  23:quantum/rgb_matrix_animations/splash_anim.h **** bool SPLASH(effect_params_t* params) { return effect_runner_reactive_splash(qsub8(g_last_hit_tracke
 4018              		.loc 19 23 0
 4019              		.cfi_startproc
 4020              		@ args = 0, pretend = 0, frame = 0
 4021              		@ frame_needed = 0, uses_anonymous_args = 0
 4022              		@ link register save eliminated.
 4023              	.LVL376:
 4024              		.loc 19 23 0
 4025 0000 054B     		ldr	r3, .L233
 4026 0002 064A     		ldr	r2, .L233+4
 4027              	.LBB281:
 4028              	.LBB282:
  91:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
 4029              		.loc 9 91 0
 4030 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4031 0006 013B     		subs	r3, r3, #1
 4032              	.LVL377:
  92:./lib/lib8tion/math8.h ****     return t;
 4033              		.loc 9 92 0
 4034 0008 B3F1FF3F 		cmp	r3, #-1
 4035 000c 08BF     		it	eq
 4036 000e 0023     		moveq	r3, #0
 4037              	.LVL378:
 4038              	.LBE282:
 4039              	.LBE281:
 4040              		.loc 19 23 0
 4041 0010 0146     		mov	r1, r0
 4042 0012 D8B2     		uxtb	r0, r3
 4043              	.LVL379:
 4044 0014 FFF7FEBF 		b	effect_runner_reactive_splash
 4045              	.LVL380:
 4046              	.L234:
 4047              		.align	2
 4048              	.L233:
 4049 0018 00000000 		.word	g_last_hit_tracker
 4050 001c 00000000 		.word	SPLASH_math
 4051              		.cfi_endproc
 4052              	.LFE142:
 4054              		.section	.text.MULTISPLASH,"ax",%progbits
 4055              		.align	1
 4056              		.global	MULTISPLASH
 4057              		.syntax unified
 4058              		.thumb
 4059              		.thumb_func
 4060              		.fpu fpv4-sp-d16
 4062              	MULTISPLASH:
 4063              	.LFB143:
  24:quantum/rgb_matrix_animations/splash_anim.h **** #            endif
  25:quantum/rgb_matrix_animations/splash_anim.h **** 
  26:quantum/rgb_matrix_animations/splash_anim.h **** #            ifndef DISABLE_RGB_MATRIX_MULTISPLASH
  27:quantum/rgb_matrix_animations/splash_anim.h **** bool MULTISPLASH(effect_params_t* params) { return effect_runner_reactive_splash(0, params, &SPLASH
 4064              		.loc 19 27 0
 4065              		.cfi_startproc
 4066              		@ args = 0, pretend = 0, frame = 0
 4067              		@ frame_needed = 0, uses_anonymous_args = 0
 4068              		@ link register save eliminated.
 4069              	.LVL381:
 4070              		.loc 19 27 0
 4071 0000 0146     		mov	r1, r0
 4072 0002 024A     		ldr	r2, .L236
 4073 0004 0020     		movs	r0, #0
 4074              	.LVL382:
 4075 0006 FFF7FEBF 		b	effect_runner_reactive_splash
 4076              	.LVL383:
 4077              	.L237:
 4078 000a 00BF     		.align	2
 4079              	.L236:
 4080 000c 00000000 		.word	SPLASH_math
 4081              		.cfi_endproc
 4082              	.LFE143:
 4084              		.section	.text.SOLID_SPLASH,"ax",%progbits
 4085              		.align	1
 4086              		.global	SOLID_SPLASH
 4087              		.syntax unified
 4088              		.thumb
 4089              		.thumb_func
 4090              		.fpu fpv4-sp-d16
 4092              	SOLID_SPLASH:
 4093              	.LFB145:
  20:quantum/rgb_matrix_animations/solid_splash_anim.h **** 
  21:quantum/rgb_matrix_animations/solid_splash_anim.h **** #            ifndef DISABLE_RGB_MATRIX_SOLID_SPLASH
  22:quantum/rgb_matrix_animations/solid_splash_anim.h **** bool SOLID_SPLASH(effect_params_t* params) { return effect_runner_reactive_splash(qsub8(g_last_hit_
 4094              		.loc 20 22 0
 4095              		.cfi_startproc
 4096              		@ args = 0, pretend = 0, frame = 0
 4097              		@ frame_needed = 0, uses_anonymous_args = 0
 4098              		@ link register save eliminated.
 4099              	.LVL384:
 4100              		.loc 20 22 0
 4101 0000 054B     		ldr	r3, .L240
 4102 0002 064A     		ldr	r2, .L240+4
 4103              	.LBB283:
 4104              	.LBB284:
  91:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
 4105              		.loc 9 91 0
 4106 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4107 0006 013B     		subs	r3, r3, #1
 4108              	.LVL385:
  92:./lib/lib8tion/math8.h ****     return t;
 4109              		.loc 9 92 0
 4110 0008 B3F1FF3F 		cmp	r3, #-1
 4111 000c 08BF     		it	eq
 4112 000e 0023     		moveq	r3, #0
 4113              	.LVL386:
 4114              	.LBE284:
 4115              	.LBE283:
 4116              		.loc 20 22 0
 4117 0010 0146     		mov	r1, r0
 4118 0012 D8B2     		uxtb	r0, r3
 4119              	.LVL387:
 4120 0014 FFF7FEBF 		b	effect_runner_reactive_splash
 4121              	.LVL388:
 4122              	.L241:
 4123              		.align	2
 4124              	.L240:
 4125 0018 00000000 		.word	g_last_hit_tracker
 4126 001c 00000000 		.word	SOLID_SPLASH_math
 4127              		.cfi_endproc
 4128              	.LFE145:
 4130              		.section	.text.SOLID_MULTISPLASH,"ax",%progbits
 4131              		.align	1
 4132              		.global	SOLID_MULTISPLASH
 4133              		.syntax unified
 4134              		.thumb
 4135              		.thumb_func
 4136              		.fpu fpv4-sp-d16
 4138              	SOLID_MULTISPLASH:
 4139              	.LFB146:
  23:quantum/rgb_matrix_animations/solid_splash_anim.h **** #            endif
  24:quantum/rgb_matrix_animations/solid_splash_anim.h **** 
  25:quantum/rgb_matrix_animations/solid_splash_anim.h **** #            ifndef DISABLE_RGB_MATRIX_SOLID_MULTISPLASH
  26:quantum/rgb_matrix_animations/solid_splash_anim.h **** bool SOLID_MULTISPLASH(effect_params_t* params) { return effect_runner_reactive_splash(0, params, &
 4140              		.loc 20 26 0
 4141              		.cfi_startproc
 4142              		@ args = 0, pretend = 0, frame = 0
 4143              		@ frame_needed = 0, uses_anonymous_args = 0
 4144              		@ link register save eliminated.
 4145              	.LVL389:
 4146              		.loc 20 26 0
 4147 0000 0146     		mov	r1, r0
 4148 0002 024A     		ldr	r2, .L243
 4149 0004 0020     		movs	r0, #0
 4150              	.LVL390:
 4151 0006 FFF7FEBF 		b	effect_runner_reactive_splash
 4152              	.LVL391:
 4153              	.L244:
 4154 000a 00BF     		.align	2
 4155              	.L243:
 4156 000c 00000000 		.word	SOLID_SPLASH_math
 4157              		.cfi_endproc
 4158              	.LFE146:
 4160              		.section	.text.SOLID_COLOR,"ax",%progbits
 4161              		.align	1
 4162              		.global	SOLID_COLOR
 4163              		.syntax unified
 4164              		.thumb
 4165              		.thumb_func
 4166              		.fpu fpv4-sp-d16
 4168              	SOLID_COLOR:
 4169              	.LFB86:
 4170              		.file 35 "quantum/rgb_matrix_animations/solid_color_anim.h"
   1:quantum/rgb_matrix_animations/solid_color_anim.h **** RGB_MATRIX_EFFECT(SOLID_COLOR)
   2:quantum/rgb_matrix_animations/solid_color_anim.h **** #ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   3:quantum/rgb_matrix_animations/solid_color_anim.h **** 
   4:quantum/rgb_matrix_animations/solid_color_anim.h **** bool SOLID_COLOR(effect_params_t* params) {
 4171              		.loc 35 4 0
 4172              		.cfi_startproc
 4173              		@ args = 0, pretend = 0, frame = 8
 4174              		@ frame_needed = 0, uses_anonymous_args = 0
 4175              	.LVL392:
 4176 0000 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 4177              		.cfi_def_cfa_offset 32
 4178              		.cfi_offset 4, -24
 4179              		.cfi_offset 5, -20
 4180              		.cfi_offset 6, -16
 4181              		.cfi_offset 7, -12
 4182              		.cfi_offset 8, -8
 4183              		.cfi_offset 14, -4
   5:quantum/rgb_matrix_animations/solid_color_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
   6:quantum/rgb_matrix_animations/solid_color_anim.h **** 
   7:quantum/rgb_matrix_animations/solid_color_anim.h ****     RGB rgb = hsv_to_rgb(rgb_matrix_config.hsv);
 4184              		.loc 35 7 0
 4185 0004 1E4A     		ldr	r2, .L252
   5:quantum/rgb_matrix_animations/solid_color_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4186              		.loc 35 5 0
 4187 0006 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 4188              		.loc 35 7 0
 4189 0008 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 4190              	.LBB285:
   8:quantum/rgb_matrix_animations/solid_color_anim.h ****     for (uint8_t i = led_min; i < led_max; i++) {
   9:quantum/rgb_matrix_animations/solid_color_anim.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 4191              		.loc 35 9 0
 4192 000a DFF87880 		ldr	r8, .L252+4
 4193              	.LBE285:
   4:quantum/rgb_matrix_animations/solid_color_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4194              		.loc 35 4 0
 4195 000e 0646     		mov	r6, r0
   5:quantum/rgb_matrix_animations/solid_color_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4196              		.loc 35 5 0
 4197 0010 C4EB0414 		rsb	r4, r4, r4, lsl #4
   7:quantum/rgb_matrix_animations/solid_color_anim.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 4198              		.loc 35 7 0
 4199 0014 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 4200              	.LVL393:
   5:quantum/rgb_matrix_animations/solid_color_anim.h **** 
 4201              		.loc 35 5 0
 4202 0016 E4B2     		uxtb	r4, r4
 4203              	.LVL394:
   7:quantum/rgb_matrix_animations/solid_color_anim.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 4204              		.loc 35 7 0
 4205 0018 43EA0023 		orr	r3, r3, r0, lsl #8
   5:quantum/rgb_matrix_animations/solid_color_anim.h **** 
 4206              		.loc 35 5 0
 4207 001c 04F10F05 		add	r5, r4, #15
   7:quantum/rgb_matrix_animations/solid_color_anim.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 4208              		.loc 35 7 0
 4209 0020 D078     		ldrb	r0, [r2, #3]	@ zero_extendqisi2
   5:quantum/rgb_matrix_animations/solid_color_anim.h **** 
 4210              		.loc 35 5 0
 4211 0022 EDB2     		uxtb	r5, r5
 4212              	.LVL395:
 4213 0024 692D     		cmp	r5, #105
   7:quantum/rgb_matrix_animations/solid_color_anim.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 4214              		.loc 35 7 0
 4215 0026 43EA0040 		orr	r0, r3, r0, lsl #16
 4216 002a 2F46     		mov	r7, r5
 4217 002c 28BF     		it	cs
 4218 002e 6927     		movcs	r7, #105
 4219              	.LVL396:
 4220 0030 FFF7FEFF 		bl	hsv_to_rgb
 4221              	.LVL397:
 4222 0034 C0F30723 		ubfx	r3, r0, #8, #8
 4223 0038 8DF80400 		strb	r0, [sp, #4]
 4224 003c C0F30740 		ubfx	r0, r0, #16, #8
 4225 0040 8DF80530 		strb	r3, [sp, #5]
 4226 0044 8DF80600 		strb	r0, [sp, #6]
 4227              	.LVL398:
 4228              	.L246:
 4229              	.LBB286:
   8:quantum/rgb_matrix_animations/solid_color_anim.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 4230              		.loc 35 8 0 discriminator 1
 4231 0048 E3B2     		uxtb	r3, r4
 4232 004a 9F42     		cmp	r7, r3
 4233 004c 06D8     		bhi	.L248
 4234              	.LBE286:
  10:quantum/rgb_matrix_animations/solid_color_anim.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  11:quantum/rgb_matrix_animations/solid_color_anim.h ****     }
  12:quantum/rgb_matrix_animations/solid_color_anim.h ****     return led_max < DRIVER_LED_TOTAL;
  13:quantum/rgb_matrix_animations/solid_color_anim.h **** }
 4235              		.loc 35 13 0
 4236 004e 682D     		cmp	r5, #104
 4237 0050 8CBF     		ite	hi
 4238 0052 0020     		movhi	r0, #0
 4239 0054 0120     		movls	r0, #1
 4240 0056 02B0     		add	sp, sp, #8
 4241              		.cfi_remember_state
 4242              		.cfi_def_cfa_offset 24
 4243              		@ sp needed
 4244 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4245              	.LVL399:
 4246              	.L248:
 4247              		.cfi_restore_state
 4248              	.LBB287:
   9:quantum/rgb_matrix_animations/solid_color_anim.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 4249              		.loc 35 9 0
 4250 005c 04EB0803 		add	r3, r4, r8
 4251 0060 93F81D21 		ldrb	r2, [r3, #285]	@ zero_extendqisi2
 4252 0064 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
 4253 0066 1A42     		tst	r2, r3
 4254 0068 08D0     		beq	.L247
  10:quantum/rgb_matrix_animations/solid_color_anim.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 4255              		.loc 35 10 0
 4256 006a 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 4257 006e 9DF80420 		ldrb	r2, [sp, #4]	@ zero_extendqisi2
 4258 0072 9DF80510 		ldrb	r1, [sp, #5]	@ zero_extendqisi2
 4259 0076 2046     		mov	r0, r4
 4260 0078 FFF7FEFF 		bl	rgb_matrix_set_color
 4261              	.LVL400:
 4262              	.L247:
 4263 007c 0134     		adds	r4, r4, #1
 4264              	.LVL401:
 4265 007e E3E7     		b	.L246
 4266              	.L253:
 4267              		.align	2
 4268              	.L252:
 4269 0080 00000000 		.word	rgb_matrix_config
 4270 0084 00000000 		.word	g_led_config
 4271              	.LBE287:
 4272              		.cfi_endproc
 4273              	.LFE86:
 4275              		.section	.text.ALPHAS_MODS,"ax",%progbits
 4276              		.align	1
 4277              		.global	ALPHAS_MODS
 4278              		.syntax unified
 4279              		.thumb
 4280              		.thumb_func
 4281              		.fpu fpv4-sp-d16
 4283              	ALPHAS_MODS:
 4284              	.LFB87:
 4285              		.file 36 "quantum/rgb_matrix_animations/alpha_mods_anim.h"
   1:quantum/rgb_matrix_animations/alpha_mods_anim.h **** #ifndef DISABLE_RGB_MATRIX_ALPHAS_MODS
   2:quantum/rgb_matrix_animations/alpha_mods_anim.h **** RGB_MATRIX_EFFECT(ALPHAS_MODS)
   3:quantum/rgb_matrix_animations/alpha_mods_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/alpha_mods_anim.h **** 
   5:quantum/rgb_matrix_animations/alpha_mods_anim.h **** // alphas = color1, mods = color2
   6:quantum/rgb_matrix_animations/alpha_mods_anim.h **** bool ALPHAS_MODS(effect_params_t* params) {
 4286              		.loc 36 6 0
 4287              		.cfi_startproc
 4288              		@ args = 0, pretend = 0, frame = 16
 4289              		@ frame_needed = 0, uses_anonymous_args = 0
 4290              	.LVL402:
 4291 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4292              		.cfi_def_cfa_offset 28
 4293              		.cfi_offset 4, -28
 4294              		.cfi_offset 5, -24
 4295              		.cfi_offset 6, -20
 4296              		.cfi_offset 7, -16
 4297              		.cfi_offset 8, -12
 4298              		.cfi_offset 9, -8
 4299              		.cfi_offset 14, -4
   7:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
   8:quantum/rgb_matrix_animations/alpha_mods_anim.h **** 
   9:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     HSV hsv  = rgb_matrix_config.hsv;
 4300              		.loc 36 9 0
 4301 0004 DFF8C090 		ldr	r9, .L263
   7:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4302              		.loc 36 7 0
 4303 0008 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 4304              		.loc 36 9 0
 4305 000a 99F80180 		ldrb	r8, [r9, #1]	@ zero_extendqisi2
 4306 000e 4B46     		mov	r3, r9
   7:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4307              		.loc 36 7 0
 4308 0010 C4EB0414 		rsb	r4, r4, r4, lsl #4
 4309              		.loc 36 9 0
 4310 0014 33F8012F 		ldrh	r2, [r3, #1]!	@ unaligned
   6:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4311              		.loc 36 6 0
 4312 0018 85B0     		sub	sp, sp, #20
 4313              		.cfi_def_cfa_offset 48
   7:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4314              		.loc 36 7 0
 4315 001a E4B2     		uxtb	r4, r4
 4316              	.LVL403:
 4317              		.loc 36 9 0
 4318 001c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 4319 001e ADF80420 		strh	r2, [sp, #4]	@ unaligned
   7:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4320              		.loc 36 7 0
 4321 0022 04F10F05 		add	r5, r4, #15
 4322              		.loc 36 9 0
 4323 0026 8DF80630 		strb	r3, [sp, #6]
  10:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     RGB rgb1 = hsv_to_rgb(hsv);
 4324              		.loc 36 10 0
 4325 002a 8DF80480 		strb	r8, [sp, #4]
   7:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4326              		.loc 36 7 0
 4327 002e EDB2     		uxtb	r5, r5
 4328              	.LVL404:
 4329 0030 692D     		cmp	r5, #105
   6:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4330              		.loc 36 6 0
 4331 0032 0646     		mov	r6, r0
 4332              		.loc 36 10 0
 4333 0034 0198     		ldr	r0, [sp, #4]
 4334              	.LVL405:
 4335 0036 2F46     		mov	r7, r5
 4336 0038 28BF     		it	cs
 4337 003a 6927     		movcs	r7, #105
 4338              	.LVL406:
 4339 003c FFF7FEFF 		bl	hsv_to_rgb
 4340              	.LVL407:
 4341 0040 C0F30723 		ubfx	r3, r0, #8, #8
 4342 0044 8DF80930 		strb	r3, [sp, #9]
  11:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     hsv.h += rgb_matrix_config.speed;
 4343              		.loc 36 11 0
 4344 0048 99F80430 		ldrb	r3, [r9, #4]	@ zero_extendqisi2
  10:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     RGB rgb1 = hsv_to_rgb(hsv);
 4345              		.loc 36 10 0
 4346 004c 8DF80800 		strb	r0, [sp, #8]
 4347              		.loc 36 11 0
 4348 0050 9844     		add	r8, r8, r3
 4349              	.LVL408:
  12:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     RGB rgb2 = hsv_to_rgb(hsv);
 4350              		.loc 36 12 0
 4351 0052 8DF80480 		strb	r8, [sp, #4]
 4352              	.LVL409:
  10:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     RGB rgb1 = hsv_to_rgb(hsv);
 4353              		.loc 36 10 0
 4354 0056 C0F30740 		ubfx	r0, r0, #16, #8
 4355 005a 8DF80A00 		strb	r0, [sp, #10]
 4356              		.loc 36 12 0
 4357 005e 0198     		ldr	r0, [sp, #4]
 4358              	.LBB288:
  13:quantum/rgb_matrix_animations/alpha_mods_anim.h **** 
  14:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     for (uint8_t i = led_min; i < led_max; i++) {
  15:quantum/rgb_matrix_animations/alpha_mods_anim.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 4359              		.loc 36 15 0
 4360 0060 DFF86880 		ldr	r8, .L263+4
 4361              	.LBE288:
  12:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     RGB rgb2 = hsv_to_rgb(hsv);
 4362              		.loc 36 12 0
 4363 0064 FFF7FEFF 		bl	hsv_to_rgb
 4364              	.LVL410:
 4365 0068 C0F30723 		ubfx	r3, r0, #8, #8
 4366 006c 8DF80C00 		strb	r0, [sp, #12]
 4367 0070 C0F30740 		ubfx	r0, r0, #16, #8
 4368 0074 8DF80D30 		strb	r3, [sp, #13]
 4369 0078 8DF80E00 		strb	r0, [sp, #14]
 4370              	.LVL411:
 4371              	.L255:
 4372              	.LBB289:
  14:quantum/rgb_matrix_animations/alpha_mods_anim.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 4373              		.loc 36 14 0 discriminator 1
 4374 007c E3B2     		uxtb	r3, r4
 4375 007e 9F42     		cmp	r7, r3
 4376 0080 06D8     		bhi	.L258
 4377              	.LBE289:
  16:quantum/rgb_matrix_animations/alpha_mods_anim.h ****         if (HAS_FLAGS(g_led_config.flags[i], LED_FLAG_MODIFIER)) {
  17:quantum/rgb_matrix_animations/alpha_mods_anim.h ****             rgb_matrix_set_color(i, rgb2.r, rgb2.g, rgb2.b);
  18:quantum/rgb_matrix_animations/alpha_mods_anim.h ****         } else {
  19:quantum/rgb_matrix_animations/alpha_mods_anim.h ****             rgb_matrix_set_color(i, rgb1.r, rgb1.g, rgb1.b);
  20:quantum/rgb_matrix_animations/alpha_mods_anim.h ****         }
  21:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     }
  22:quantum/rgb_matrix_animations/alpha_mods_anim.h ****     return led_max < DRIVER_LED_TOTAL;
  23:quantum/rgb_matrix_animations/alpha_mods_anim.h **** }
 4378              		.loc 36 23 0
 4379 0082 682D     		cmp	r5, #104
 4380 0084 8CBF     		ite	hi
 4381 0086 0020     		movhi	r0, #0
 4382 0088 0120     		movls	r0, #1
 4383 008a 05B0     		add	sp, sp, #20
 4384              		.cfi_remember_state
 4385              		.cfi_def_cfa_offset 28
 4386              		@ sp needed
 4387 008c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4388              	.LVL412:
 4389              	.L258:
 4390              		.cfi_restore_state
 4391              	.LBB290:
  15:quantum/rgb_matrix_animations/alpha_mods_anim.h ****         if (HAS_FLAGS(g_led_config.flags[i], LED_FLAG_MODIFIER)) {
 4392              		.loc 36 15 0
 4393 0090 04EB0803 		add	r3, r4, r8
 4394 0094 7278     		ldrb	r2, [r6, #1]	@ zero_extendqisi2
 4395 0096 93F81D31 		ldrb	r3, [r3, #285]	@ zero_extendqisi2
 4396 009a 1342     		tst	r3, r2
 4397 009c 11D0     		beq	.L256
  16:quantum/rgb_matrix_animations/alpha_mods_anim.h ****         if (HAS_FLAGS(g_led_config.flags[i], LED_FLAG_MODIFIER)) {
 4398              		.loc 36 16 0
 4399 009e DB07     		lsls	r3, r3, #31
  17:quantum/rgb_matrix_animations/alpha_mods_anim.h ****         } else {
 4400              		.loc 36 17 0
 4401 00a0 43BF     		ittte	mi
 4402 00a2 9DF80E30 		ldrbmi	r3, [sp, #14]	@ zero_extendqisi2
 4403 00a6 9DF80C20 		ldrbmi	r2, [sp, #12]	@ zero_extendqisi2
 4404 00aa 9DF80D10 		ldrbmi	r1, [sp, #13]	@ zero_extendqisi2
  19:quantum/rgb_matrix_animations/alpha_mods_anim.h ****         }
 4405              		.loc 36 19 0
 4406 00ae 9DF80A30 		ldrbpl	r3, [sp, #10]	@ zero_extendqisi2
 4407 00b2 5CBF     		itt	pl
 4408 00b4 9DF80820 		ldrbpl	r2, [sp, #8]	@ zero_extendqisi2
 4409 00b8 9DF80910 		ldrbpl	r1, [sp, #9]	@ zero_extendqisi2
 4410 00bc 2046     		mov	r0, r4
 4411 00be FFF7FEFF 		bl	rgb_matrix_set_color
 4412              	.LVL413:
 4413              	.L256:
 4414 00c2 0134     		adds	r4, r4, #1
 4415              	.LVL414:
 4416 00c4 DAE7     		b	.L255
 4417              	.L264:
 4418 00c6 00BF     		.align	2
 4419              	.L263:
 4420 00c8 00000000 		.word	rgb_matrix_config
 4421 00cc 00000000 		.word	g_led_config
 4422              	.LBE290:
 4423              		.cfi_endproc
 4424              	.LFE87:
 4426              		.section	.text.GRADIENT_UP_DOWN,"ax",%progbits
 4427              		.align	1
 4428              		.global	GRADIENT_UP_DOWN
 4429              		.syntax unified
 4430              		.thumb
 4431              		.thumb_func
 4432              		.fpu fpv4-sp-d16
 4434              	GRADIENT_UP_DOWN:
 4435              	.LFB88:
 4436              		.file 37 "quantum/rgb_matrix_animations/gradient_up_down_anim.h"
   1:quantum/rgb_matrix_animations/gradient_up_down_anim.h **** #ifndef DISABLE_RGB_MATRIX_GRADIENT_UP_DOWN
   2:quantum/rgb_matrix_animations/gradient_up_down_anim.h **** RGB_MATRIX_EFFECT(GRADIENT_UP_DOWN)
   3:quantum/rgb_matrix_animations/gradient_up_down_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/gradient_up_down_anim.h **** 
   5:quantum/rgb_matrix_animations/gradient_up_down_anim.h **** bool GRADIENT_UP_DOWN(effect_params_t* params) {
 4437              		.loc 37 5 0
 4438              		.cfi_startproc
 4439              		@ args = 0, pretend = 0, frame = 8
 4440              		@ frame_needed = 0, uses_anonymous_args = 0
 4441              	.LVL415:
 4442 0000 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, r10, lr}
 4443              		.cfi_def_cfa_offset 40
 4444              		.cfi_offset 4, -32
 4445              		.cfi_offset 5, -28
 4446              		.cfi_offset 6, -24
 4447              		.cfi_offset 7, -20
 4448              		.cfi_offset 8, -16
 4449              		.cfi_offset 9, -12
 4450              		.cfi_offset 10, -8
 4451              		.cfi_offset 14, -4
   6:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
   7:quantum/rgb_matrix_animations/gradient_up_down_anim.h **** 
   8:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****     HSV     hsv   = rgb_matrix_config.hsv;
 4452              		.loc 37 8 0
 4453 0004 214D     		ldr	r5, .L270
   6:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4454              		.loc 37 6 0
 4455 0006 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 4456              	.LBB291:
 4457              	.LBB292:
  26:./lib/lib8tion/scale8.h **** #endif
 4458              		.loc 3 26 0
 4459 0008 95F80480 		ldrb	r8, [r5, #4]	@ zero_extendqisi2
 4460              	.LBE292:
 4461              	.LBE291:
 4462              	.LBB294:
 4463              	.LBB295:
   9:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****     uint8_t scale = scale8(64, rgb_matrix_config.speed);
  10:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****     for (uint8_t i = led_min; i < led_max; i++) {
  11:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 4464              		.loc 37 11 0
 4465 000c DFF880A0 		ldr	r10, .L270+4
 4466              	.LBE295:
 4467              	.LBE294:
   8:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****     uint8_t scale = scale8(64, rgb_matrix_config.speed);
 4468              		.loc 37 8 0
 4469 0010 2B46     		mov	r3, r5
   6:quantum/rgb_matrix_animations/gradient_up_down_anim.h **** 
 4470              		.loc 37 6 0
 4471 0012 C4EB0414 		rsb	r4, r4, r4, lsl #4
 4472 0016 E4B2     		uxtb	r4, r4
 4473              	.LVL416:
   8:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****     uint8_t scale = scale8(64, rgb_matrix_config.speed);
 4474              		.loc 37 8 0
 4475 0018 33F8012F 		ldrh	r2, [r3, #1]!	@ unaligned
 4476 001c ADF80020 		strh	r2, [sp]	@ unaligned
   6:quantum/rgb_matrix_animations/gradient_up_down_anim.h **** 
 4477              		.loc 37 6 0
 4478 0020 04F10F06 		add	r6, r4, #15
 4479 0024 F6B2     		uxtb	r6, r6
 4480              	.LVL417:
 4481 0026 692E     		cmp	r6, #105
   8:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****     uint8_t scale = scale8(64, rgb_matrix_config.speed);
 4482              		.loc 37 8 0
 4483 0028 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 4484 002a 8DF80230 		strb	r3, [sp, #2]
 4485 002e B146     		mov	r9, r6
   5:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4486              		.loc 37 5 0
 4487 0030 0746     		mov	r7, r0
 4488 0032 28BF     		it	cs
 4489 0034 4FF06909 		movcs	r9, #105
 4490              	.LVL418:
 4491              	.LBB297:
 4492              	.LBB293:
  26:./lib/lib8tion/scale8.h **** #endif
 4493              		.loc 3 26 0
 4494 0038 4FEA9808 		lsr	r8, r8, #2
 4495              	.LVL419:
 4496              	.L266:
 4497              	.LBE293:
 4498              	.LBE297:
 4499              	.LBB298:
  10:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 4500              		.loc 37 10 0 discriminator 1
 4501 003c E3B2     		uxtb	r3, r4
 4502 003e 9945     		cmp	r9, r3
 4503 0040 06D8     		bhi	.L269
 4504              	.LBE298:
  12:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****         // The y range will be 0..64, map this to 0..4
  13:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****         // Relies on hue being 8-bit and wrapping
  14:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****         hsv.h   = rgb_matrix_config.hsv.h + scale * (g_led_config.point[i].y >> 4);
  15:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****         RGB rgb = hsv_to_rgb(hsv);
  16:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  17:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****     }
  18:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****     return led_max < DRIVER_LED_TOTAL;
  19:quantum/rgb_matrix_animations/gradient_up_down_anim.h **** }
 4505              		.loc 37 19 0
 4506 0042 682E     		cmp	r6, #104
 4507 0044 8CBF     		ite	hi
 4508 0046 0020     		movhi	r0, #0
 4509 0048 0120     		movls	r0, #1
 4510 004a 02B0     		add	sp, sp, #8
 4511              		.cfi_remember_state
 4512              		.cfi_def_cfa_offset 32
 4513              		@ sp needed
 4514 004c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4515              	.LVL420:
 4516              	.L269:
 4517              		.cfi_restore_state
 4518              	.LBB299:
 4519              	.LBB296:
  11:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****         // The y range will be 0..64, map this to 0..4
 4520              		.loc 37 11 0
 4521 0050 04EB0A03 		add	r3, r4, r10
 4522 0054 93F81D21 		ldrb	r2, [r3, #285]	@ zero_extendqisi2
 4523 0058 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 4524 005a 1A42     		tst	r2, r3
 4525 005c 14D0     		beq	.L268
  14:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****         RGB rgb = hsv_to_rgb(hsv);
 4526              		.loc 37 14 0
 4527 005e 0AEB4403 		add	r3, r10, r4, lsl #1
 4528 0062 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 4529 0064 93F84C30 		ldrb	r3, [r3, #76]	@ zero_extendqisi2
 4530 0068 1B09     		lsrs	r3, r3, #4
 4531 006a 03FB0823 		mla	r3, r3, r8, r2
 4532 006e 8DF80030 		strb	r3, [sp]
  15:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 4533              		.loc 37 15 0
 4534 0072 0098     		ldr	r0, [sp]
 4535 0074 FFF7FEFF 		bl	hsv_to_rgb
 4536              	.LVL421:
  16:quantum/rgb_matrix_animations/gradient_up_down_anim.h ****     }
 4537              		.loc 37 16 0
 4538 0078 C0F30743 		ubfx	r3, r0, #16, #8
 4539 007c C2B2     		uxtb	r2, r0
 4540 007e C0F30721 		ubfx	r1, r0, #8, #8
 4541 0082 2046     		mov	r0, r4
 4542 0084 FFF7FEFF 		bl	rgb_matrix_set_color
 4543              	.LVL422:
 4544              	.L268:
 4545 0088 0134     		adds	r4, r4, #1
 4546              	.LVL423:
 4547 008a D7E7     		b	.L266
 4548              	.L271:
 4549              		.align	2
 4550              	.L270:
 4551 008c 00000000 		.word	rgb_matrix_config
 4552 0090 00000000 		.word	g_led_config
 4553              	.LBE296:
 4554              	.LBE299:
 4555              		.cfi_endproc
 4556              	.LFE88:
 4558              		.section	.text.BREATHING,"ax",%progbits
 4559              		.align	1
 4560              		.global	BREATHING
 4561              		.syntax unified
 4562              		.thumb
 4563              		.thumb_func
 4564              		.fpu fpv4-sp-d16
 4566              	BREATHING:
 4567              	.LFB89:
 4568              		.file 38 "quantum/rgb_matrix_animations/breathing_anim.h"
   1:quantum/rgb_matrix_animations/breathing_anim.h **** #ifndef DISABLE_RGB_MATRIX_BREATHING
   2:quantum/rgb_matrix_animations/breathing_anim.h **** RGB_MATRIX_EFFECT(BREATHING)
   3:quantum/rgb_matrix_animations/breathing_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/breathing_anim.h **** 
   5:quantum/rgb_matrix_animations/breathing_anim.h **** bool BREATHING(effect_params_t* params) {
 4569              		.loc 38 5 0
 4570              		.cfi_startproc
 4571              		@ args = 0, pretend = 0, frame = 8
 4572              		@ frame_needed = 0, uses_anonymous_args = 0
 4573              	.LVL424:
 4574 0000 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 4575              		.cfi_def_cfa_offset 32
 4576              		.cfi_offset 4, -24
 4577              		.cfi_offset 5, -20
 4578              		.cfi_offset 6, -16
 4579              		.cfi_offset 7, -12
 4580              		.cfi_offset 8, -8
 4581              		.cfi_offset 14, -4
   6:quantum/rgb_matrix_animations/breathing_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
   7:quantum/rgb_matrix_animations/breathing_anim.h **** 
   8:quantum/rgb_matrix_animations/breathing_anim.h ****     HSV      hsv  = rgb_matrix_config.hsv;
 4582              		.loc 38 8 0
 4583 0004 2B4A     		ldr	r2, .L280
   6:quantum/rgb_matrix_animations/breathing_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4584              		.loc 38 6 0
 4585 0006 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 4586              		.loc 38 8 0
 4587 0008 1346     		mov	r3, r2
   5:quantum/rgb_matrix_animations/breathing_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4588              		.loc 38 5 0
 4589 000a 0646     		mov	r6, r0
 4590              		.loc 38 8 0
 4591 000c 33F8011F 		ldrh	r1, [r3, #1]!	@ unaligned
 4592 0010 ADF80010 		strh	r1, [sp]	@ unaligned
 4593 0014 93F80280 		ldrb	r8, [r3, #2]	@ zero_extendqisi2
   9:quantum/rgb_matrix_animations/breathing_anim.h ****     uint16_t time = scale16by8(g_rgb_counters.tick, rgb_matrix_config.speed / 8);
 4594              		.loc 38 9 0
 4595 0018 274B     		ldr	r3, .L280+4
   6:quantum/rgb_matrix_animations/breathing_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4596              		.loc 38 6 0
 4597 001a C4EB0414 		rsb	r4, r4, r4, lsl #4
 4598              		.loc 38 9 0
 4599 001e 1868     		ldr	r0, [r3]	@ unaligned
 4600              	.LVL425:
 4601 0020 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
   6:quantum/rgb_matrix_animations/breathing_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4602              		.loc 38 6 0
 4603 0022 E4B2     		uxtb	r4, r4
 4604              	.LVL426:
 4605              	.LBB300:
 4606              	.LBB301:
 4607              		.loc 3 253 0
 4608 0024 DB08     		lsrs	r3, r3, #3
 4609              	.LBE301:
 4610              	.LBE300:
   6:quantum/rgb_matrix_animations/breathing_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4611              		.loc 38 6 0
 4612 0026 04F10F05 		add	r5, r4, #15
 4613              	.LBB303:
 4614              	.LBB302:
 4615              		.loc 3 253 0
 4616 002a 5843     		muls	r0, r3, r0
 4617              	.LBE302:
 4618              	.LBE303:
   6:quantum/rgb_matrix_animations/breathing_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 4619              		.loc 38 6 0
 4620 002c EDB2     		uxtb	r5, r5
 4621              	.LVL427:
 4622 002e 692D     		cmp	r5, #105
  10:quantum/rgb_matrix_animations/breathing_anim.h ****     hsv.v         = scale8(abs8(sin8(time) - 128) * 2, hsv.v);
 4623              		.loc 38 10 0
 4624 0030 C0F30720 		ubfx	r0, r0, #8, #8
 4625 0034 2F46     		mov	r7, r5
 4626 0036 28BF     		it	cs
 4627 0038 6927     		movcs	r7, #105
 4628              	.LVL428:
 4629 003a FFF7FEFF 		bl	sin8_C
 4630              	.LVL429:
 4631 003e A0F18003 		sub	r3, r0, #128
 4632 0042 5BB2     		sxtb	r3, r3
 4633              	.LVL430:
 4634              	.LBB304:
 4635              	.LBB305:
 407:./lib/lib8tion/math8.h ****     return i;
 4636              		.loc 9 407 0
 4637 0044 002B     		cmp	r3, #0
 4638 0046 BCBF     		itt	lt
 4639 0048 C0F18000 		rsblt	r0, r0, #128
 4640 004c 43B2     		sxtblt	r3, r0
 4641              	.LVL431:
 4642              	.LBE305:
 4643              	.LBE304:
 4644              		.loc 38 10 0
 4645 004e 5B00     		lsls	r3, r3, #1
 4646              	.LVL432:
 4647              	.LBB306:
 4648              	.LBB307:
  26:./lib/lib8tion/scale8.h **** #endif
 4649              		.loc 3 26 0
 4650 0050 DBB2     		uxtb	r3, r3
 4651 0052 13FB08F3 		smulbb	r3, r3, r8
 4652 0056 1B12     		asrs	r3, r3, #8
 4653 0058 8DF80230 		strb	r3, [sp, #2]
 4654              	.LBE307:
 4655              	.LBE306:
  11:quantum/rgb_matrix_animations/breathing_anim.h ****     RGB rgb       = hsv_to_rgb(hsv);
 4656              		.loc 38 11 0
 4657 005c 0098     		ldr	r0, [sp]
 4658              	.LBB308:
  12:quantum/rgb_matrix_animations/breathing_anim.h ****     for (uint8_t i = led_min; i < led_max; i++) {
  13:quantum/rgb_matrix_animations/breathing_anim.h ****         RGB_MATRIX_TEST_LED_FLAGS();
 4659              		.loc 38 13 0
 4660 005e DFF85C80 		ldr	r8, .L280+8
 4661              	.LBE308:
  11:quantum/rgb_matrix_animations/breathing_anim.h ****     RGB rgb       = hsv_to_rgb(hsv);
 4662              		.loc 38 11 0
 4663 0062 FFF7FEFF 		bl	hsv_to_rgb
 4664              	.LVL433:
 4665 0066 C0F30723 		ubfx	r3, r0, #8, #8
 4666 006a 8DF80400 		strb	r0, [sp, #4]
 4667 006e C0F30740 		ubfx	r0, r0, #16, #8
 4668 0072 8DF80530 		strb	r3, [sp, #5]
 4669 0076 8DF80600 		strb	r0, [sp, #6]
 4670              	.LVL434:
 4671              	.L274:
 4672              	.LBB309:
  12:quantum/rgb_matrix_animations/breathing_anim.h ****     for (uint8_t i = led_min; i < led_max; i++) {
 4673              		.loc 38 12 0 discriminator 1
 4674 007a E3B2     		uxtb	r3, r4
 4675 007c 9F42     		cmp	r7, r3
 4676 007e 06D8     		bhi	.L276
 4677              	.LBE309:
  14:quantum/rgb_matrix_animations/breathing_anim.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
  15:quantum/rgb_matrix_animations/breathing_anim.h ****     }
  16:quantum/rgb_matrix_animations/breathing_anim.h ****     return led_max < DRIVER_LED_TOTAL;
  17:quantum/rgb_matrix_animations/breathing_anim.h **** }
 4678              		.loc 38 17 0
 4679 0080 682D     		cmp	r5, #104
 4680 0082 8CBF     		ite	hi
 4681 0084 0020     		movhi	r0, #0
 4682 0086 0120     		movls	r0, #1
 4683 0088 02B0     		add	sp, sp, #8
 4684              		.cfi_remember_state
 4685              		.cfi_def_cfa_offset 24
 4686              		@ sp needed
 4687 008a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4688              	.LVL435:
 4689              	.L276:
 4690              		.cfi_restore_state
 4691              	.LBB310:
  13:quantum/rgb_matrix_animations/breathing_anim.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 4692              		.loc 38 13 0
 4693 008e 04EB0803 		add	r3, r4, r8
 4694 0092 93F81D21 		ldrb	r2, [r3, #285]	@ zero_extendqisi2
 4695 0096 7378     		ldrb	r3, [r6, #1]	@ zero_extendqisi2
 4696 0098 1A42     		tst	r2, r3
 4697 009a 08D0     		beq	.L275
  14:quantum/rgb_matrix_animations/breathing_anim.h ****         rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 4698              		.loc 38 14 0
 4699 009c 9DF80630 		ldrb	r3, [sp, #6]	@ zero_extendqisi2
 4700 00a0 9DF80420 		ldrb	r2, [sp, #4]	@ zero_extendqisi2
 4701 00a4 9DF80510 		ldrb	r1, [sp, #5]	@ zero_extendqisi2
 4702 00a8 2046     		mov	r0, r4
 4703 00aa FFF7FEFF 		bl	rgb_matrix_set_color
 4704              	.LVL436:
 4705              	.L275:
 4706 00ae 0134     		adds	r4, r4, #1
 4707              	.LVL437:
 4708 00b0 E3E7     		b	.L274
 4709              	.L281:
 4710 00b2 00BF     		.align	2
 4711              	.L280:
 4712 00b4 00000000 		.word	rgb_matrix_config
 4713 00b8 00000000 		.word	g_rgb_counters
 4714 00bc 00000000 		.word	g_led_config
 4715              	.LBE310:
 4716              		.cfi_endproc
 4717              	.LFE89:
 4719              		.section	.text.raindrops_set_color.isra.2,"ax",%progbits
 4720              		.align	1
 4721              		.syntax unified
 4722              		.thumb
 4723              		.thumb_func
 4724              		.fpu fpv4-sp-d16
 4726              	raindrops_set_color.isra.2:
 4727              	.LFB194:
 4728              		.file 39 "quantum/rgb_matrix_animations/raindrops_anim.h"
   1:quantum/rgb_matrix_animations/raindrops_anim.h **** #ifndef DISABLE_RGB_MATRIX_RAINDROPS
   2:quantum/rgb_matrix_animations/raindrops_anim.h **** RGB_MATRIX_EFFECT(RAINDROPS)
   3:quantum/rgb_matrix_animations/raindrops_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/raindrops_anim.h **** 
   5:quantum/rgb_matrix_animations/raindrops_anim.h **** static void raindrops_set_color(int i, effect_params_t* params) {
 4729              		.loc 39 5 0
 4730              		.cfi_startproc
 4731              		@ args = 0, pretend = 0, frame = 8
 4732              		@ frame_needed = 0, uses_anonymous_args = 0
 4733              	.LVL438:
 4734 0000 37B5     		push	{r0, r1, r2, r4, r5, lr}
 4735              		.cfi_def_cfa_offset 24
 4736              		.cfi_offset 4, -12
 4737              		.cfi_offset 5, -8
 4738              		.cfi_offset 14, -4
   6:quantum/rgb_matrix_animations/raindrops_anim.h ****     if (!HAS_ANY_FLAGS(g_led_config.flags[i], params->flags)) return;
 4739              		.loc 39 6 0
 4740 0002 194B     		ldr	r3, .L284
 4741 0004 0344     		add	r3, r3, r0
   5:quantum/rgb_matrix_animations/raindrops_anim.h ****     if (!HAS_ANY_FLAGS(g_led_config.flags[i], params->flags)) return;
 4742              		.loc 39 5 0
 4743 0006 0446     		mov	r4, r0
 4744              		.loc 39 6 0
 4745 0008 93F81D31 		ldrb	r3, [r3, #285]	@ zero_extendqisi2
 4746 000c 1942     		tst	r1, r3
 4747 000e 29D0     		beq	.L282
   7:quantum/rgb_matrix_animations/raindrops_anim.h ****     HSV hsv = {0, rgb_matrix_config.hsv.s, rgb_matrix_config.hsv.v};
 4748              		.loc 39 7 0
 4749 0010 164B     		ldr	r3, .L284+4
 4750 0012 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 4751 0014 8DF80120 		strb	r2, [sp, #1]
 4752 0018 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
   8:quantum/rgb_matrix_animations/raindrops_anim.h **** 
   9:quantum/rgb_matrix_animations/raindrops_anim.h ****     // Take the shortest path between hues
  10:quantum/rgb_matrix_animations/raindrops_anim.h ****     int16_t deltaH = ((rgb_matrix_config.hsv.h + 180) % 360 - rgb_matrix_config.hsv.h) / 4;
 4753              		.loc 39 10 0
 4754 001a 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 4755              	.LVL439:
   7:quantum/rgb_matrix_animations/raindrops_anim.h ****     HSV hsv = {0, rgb_matrix_config.hsv.s, rgb_matrix_config.hsv.v};
 4756              		.loc 39 7 0
 4757 001c 8DF80220 		strb	r2, [sp, #2]
  11:quantum/rgb_matrix_animations/raindrops_anim.h ****     if (deltaH > 127) {
  12:quantum/rgb_matrix_animations/raindrops_anim.h ****         deltaH -= 256;
  13:quantum/rgb_matrix_animations/raindrops_anim.h ****     } else if (deltaH < -127) {
  14:quantum/rgb_matrix_animations/raindrops_anim.h ****         deltaH += 256;
  15:quantum/rgb_matrix_animations/raindrops_anim.h ****     }
  16:quantum/rgb_matrix_animations/raindrops_anim.h **** 
  17:quantum/rgb_matrix_animations/raindrops_anim.h ****     hsv.h   = rgb_matrix_config.hsv.h + (deltaH * (rand() & 0x03));
 4758              		.loc 39 17 0
 4759 0020 FFF7FEFF 		bl	rand
 4760              	.LVL440:
  10:quantum/rgb_matrix_animations/raindrops_anim.h ****     if (deltaH > 127) {
 4761              		.loc 39 10 0
 4762 0024 05F1B401 		add	r1, r5, #180
 4763              	.LVL441:
 4764 0028 4FF4B472 		mov	r2, #360
 4765              		.loc 39 17 0
 4766 002c 00F00300 		and	r0, r0, #3
  10:quantum/rgb_matrix_animations/raindrops_anim.h ****     if (deltaH > 127) {
 4767              		.loc 39 10 0
 4768 0030 91FBF2F3 		sdiv	r3, r1, r2
 4769 0034 02FB1313 		mls	r3, r2, r3, r1
 4770 0038 5B1B     		subs	r3, r3, r5
 4771 003a 0422     		movs	r2, #4
 4772 003c 93FBF2F3 		sdiv	r3, r3, r2
 4773              		.loc 39 17 0
 4774 0040 03FB0053 		mla	r3, r3, r0, r5
 4775 0044 8DF80030 		strb	r3, [sp]
  18:quantum/rgb_matrix_animations/raindrops_anim.h ****     RGB rgb = hsv_to_rgb(hsv);
 4776              		.loc 39 18 0
 4777 0048 0098     		ldr	r0, [sp]
 4778 004a FFF7FEFF 		bl	hsv_to_rgb
 4779              	.LVL442:
  19:quantum/rgb_matrix_animations/raindrops_anim.h ****     rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 4780              		.loc 39 19 0
 4781 004e C0F30743 		ubfx	r3, r0, #16, #8
 4782 0052 C2B2     		uxtb	r2, r0
 4783 0054 C0F30721 		ubfx	r1, r0, #8, #8
 4784 0058 2046     		mov	r0, r4
  20:quantum/rgb_matrix_animations/raindrops_anim.h **** }
 4785              		.loc 39 20 0
 4786 005a 03B0     		add	sp, sp, #12
 4787              		.cfi_remember_state
 4788              		.cfi_def_cfa_offset 12
 4789              		@ sp needed
 4790 005c BDE83040 		pop	{r4, r5, lr}
 4791              		.cfi_restore 14
 4792              		.cfi_restore 5
 4793              		.cfi_restore 4
 4794              		.cfi_def_cfa_offset 0
 4795              	.LVL443:
  19:quantum/rgb_matrix_animations/raindrops_anim.h ****     rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 4796              		.loc 39 19 0
 4797 0060 FFF7FEBF 		b	rgb_matrix_set_color
 4798              	.LVL444:
 4799              	.L282:
 4800              		.cfi_restore_state
 4801              		.loc 39 20 0
 4802 0064 03B0     		add	sp, sp, #12
 4803              		.cfi_def_cfa_offset 12
 4804              		@ sp needed
 4805 0066 30BD     		pop	{r4, r5, pc}
 4806              	.L285:
 4807              		.align	2
 4808              	.L284:
 4809 0068 00000000 		.word	g_led_config
 4810 006c 00000000 		.word	rgb_matrix_config
 4811              		.cfi_endproc
 4812              	.LFE194:
 4814              		.section	.text.RAINDROPS,"ax",%progbits
 4815              		.align	1
 4816              		.global	RAINDROPS
 4817              		.syntax unified
 4818              		.thumb
 4819              		.thumb_func
 4820              		.fpu fpv4-sp-d16
 4822              	RAINDROPS:
 4823              	.LFB125:
  21:quantum/rgb_matrix_animations/raindrops_anim.h **** 
  22:quantum/rgb_matrix_animations/raindrops_anim.h **** bool RAINDROPS(effect_params_t* params) {
 4824              		.loc 39 22 0
 4825              		.cfi_startproc
 4826              		@ args = 0, pretend = 0, frame = 0
 4827              		@ frame_needed = 0, uses_anonymous_args = 0
 4828              	.LVL445:
 4829 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4830              		.cfi_def_cfa_offset 24
 4831              		.cfi_offset 3, -24
 4832              		.cfi_offset 4, -20
 4833              		.cfi_offset 5, -16
 4834              		.cfi_offset 6, -12
 4835              		.cfi_offset 7, -8
 4836              		.cfi_offset 14, -4
  23:quantum/rgb_matrix_animations/raindrops_anim.h ****     if (!params->init) {
 4837              		.loc 39 23 0
 4838 0002 8678     		ldrb	r6, [r0, #2]	@ zero_extendqisi2
  22:quantum/rgb_matrix_animations/raindrops_anim.h ****     if (!params->init) {
 4839              		.loc 39 22 0
 4840 0004 0546     		mov	r5, r0
 4841              		.loc 39 23 0
 4842 0006 F6B9     		cbnz	r6, .L287
 4843              	.LVL446:
  24:quantum/rgb_matrix_animations/raindrops_anim.h ****         // Change one LED every tick, make sure speed is not 0
  25:quantum/rgb_matrix_animations/raindrops_anim.h ****         if (scale16by8(g_rgb_counters.tick, qadd8(rgb_matrix_config.speed, 16)) % 10 == 0) {
 4844              		.loc 39 25 0
 4845 0008 1B4B     		ldr	r3, .L291
 4846 000a 1C4A     		ldr	r2, .L291+4
 4847              	.LBB311:
 4848              	.LBB312:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 4849              		.loc 9 26 0
 4850 000c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 4851              	.LBE312:
 4852              	.LBE311:
 4853              		.loc 39 25 0
 4854 000e 1268     		ldr	r2, [r2]	@ unaligned
 4855              	.LBB314:
 4856              	.LBB313:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 4857              		.loc 9 26 0
 4858 0010 1033     		adds	r3, r3, #16
 4859              	.LVL447:
 4860              	.LBE313:
 4861              	.LBE314:
 4862              	.LBB315:
 4863              	.LBB316:
 4864              		.loc 3 253 0
 4865 0012 FF2B     		cmp	r3, #255
 4866 0014 92B2     		uxth	r2, r2
 4867 0016 28BF     		it	cs
 4868 0018 FF23     		movcs	r3, #255
 4869 001a 5343     		muls	r3, r2, r3
 4870              	.LBE316:
 4871              	.LBE315:
 4872              		.loc 39 25 0
 4873 001c C3F30F23 		ubfx	r3, r3, #8, #16
 4874 0020 0A21     		movs	r1, #10
 4875 0022 B3FBF1F2 		udiv	r2, r3, r1
 4876 0026 01FB1233 		mls	r3, r1, r2, r3
 4877 002a 9BB2     		uxth	r3, r3
 4878 002c 4BB9     		cbnz	r3, .L288
  26:quantum/rgb_matrix_animations/raindrops_anim.h ****             raindrops_set_color(rand() % DRIVER_LED_TOTAL, params);
 4879              		.loc 39 26 0
 4880 002e FFF7FEFF 		bl	rand
 4881              	.LVL448:
 4882 0032 6923     		movs	r3, #105
 4883 0034 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 4884 0036 90FBF3F2 		sdiv	r2, r0, r3
 4885 003a 02FB1300 		mls	r0, r2, r3, r0
 4886 003e FFF7FEFF 		bl	raindrops_set_color.isra.2
 4887              	.LVL449:
 4888              	.L288:
  27:quantum/rgb_matrix_animations/raindrops_anim.h ****         }
  28:quantum/rgb_matrix_animations/raindrops_anim.h ****         return false;
  29:quantum/rgb_matrix_animations/raindrops_anim.h ****     }
  30:quantum/rgb_matrix_animations/raindrops_anim.h **** 
  31:quantum/rgb_matrix_animations/raindrops_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
  32:quantum/rgb_matrix_animations/raindrops_anim.h ****     for (int i = led_min; i < led_max; i++) {
  33:quantum/rgb_matrix_animations/raindrops_anim.h ****         raindrops_set_color(i, params);
  34:quantum/rgb_matrix_animations/raindrops_anim.h ****     }
  35:quantum/rgb_matrix_animations/raindrops_anim.h ****     return led_max < DRIVER_LED_TOTAL;
  36:quantum/rgb_matrix_animations/raindrops_anim.h **** }
 4889              		.loc 39 36 0
 4890 0042 3046     		mov	r0, r6
 4891 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4892              	.LVL450:
 4893              	.L287:
  31:quantum/rgb_matrix_animations/raindrops_anim.h ****     for (int i = led_min; i < led_max; i++) {
 4894              		.loc 39 31 0
 4895 0046 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 4896 0048 C4EB0414 		rsb	r4, r4, r4, lsl #4
 4897 004c E4B2     		uxtb	r4, r4
 4898              	.LVL451:
 4899 004e 04F10F06 		add	r6, r4, #15
 4900 0052 F6B2     		uxtb	r6, r6
 4901              	.LVL452:
 4902 0054 692E     		cmp	r6, #105
 4903 0056 3746     		mov	r7, r6
 4904 0058 28BF     		it	cs
 4905 005a 6927     		movcs	r7, #105
 4906              	.LVL453:
 4907              	.L289:
 4908              	.LBB317:
  32:quantum/rgb_matrix_animations/raindrops_anim.h ****         raindrops_set_color(i, params);
 4909              		.loc 39 32 0 discriminator 1
 4910 005c A742     		cmp	r7, r4
 4911 005e 04DC     		bgt	.L290
 4912 0060 682E     		cmp	r6, #104
 4913 0062 8CBF     		ite	hi
 4914 0064 0026     		movhi	r6, #0
 4915 0066 0126     		movls	r6, #1
 4916              	.LBE317:
  35:quantum/rgb_matrix_animations/raindrops_anim.h **** }
 4917              		.loc 39 35 0
 4918 0068 EBE7     		b	.L288
 4919              	.L290:
 4920              	.LBB318:
  33:quantum/rgb_matrix_animations/raindrops_anim.h ****     }
 4921              		.loc 39 33 0 discriminator 3
 4922 006a 2046     		mov	r0, r4
 4923 006c 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 4924 006e FFF7FEFF 		bl	raindrops_set_color.isra.2
 4925              	.LVL454:
  32:quantum/rgb_matrix_animations/raindrops_anim.h ****         raindrops_set_color(i, params);
 4926              		.loc 39 32 0 discriminator 3
 4927 0072 0134     		adds	r4, r4, #1
 4928              	.LVL455:
 4929 0074 F2E7     		b	.L289
 4930              	.L292:
 4931 0076 00BF     		.align	2
 4932              	.L291:
 4933 0078 00000000 		.word	rgb_matrix_config
 4934 007c 00000000 		.word	g_rgb_counters
 4935              	.LBE318:
 4936              		.cfi_endproc
 4937              	.LFE125:
 4939              		.section	.text.jellybean_raindrops_set_color.isra.3,"ax",%progbits
 4940              		.align	1
 4941              		.syntax unified
 4942              		.thumb
 4943              		.thumb_func
 4944              		.fpu fpv4-sp-d16
 4946              	jellybean_raindrops_set_color.isra.3:
 4947              	.LFB195:
 4948              		.file 40 "quantum/rgb_matrix_animations/jellybean_raindrops_anim.h"
   1:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h **** #ifndef DISABLE_RGB_MATRIX_JELLYBEAN_RAINDROPS
   2:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h **** RGB_MATRIX_EFFECT(JELLYBEAN_RAINDROPS)
   3:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
   4:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h **** 
   5:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h **** static void jellybean_raindrops_set_color(int i, effect_params_t* params) {
 4949              		.loc 40 5 0
 4950              		.cfi_startproc
 4951              		@ args = 0, pretend = 0, frame = 8
 4952              		@ frame_needed = 0, uses_anonymous_args = 0
 4953              	.LVL456:
 4954 0000 13B5     		push	{r0, r1, r4, lr}
 4955              		.cfi_def_cfa_offset 16
 4956              		.cfi_offset 4, -8
 4957              		.cfi_offset 14, -4
   6:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****     if (!HAS_ANY_FLAGS(g_led_config.flags[i], params->flags)) return;
 4958              		.loc 40 6 0
 4959 0002 114B     		ldr	r3, .L295
 4960 0004 0344     		add	r3, r3, r0
   5:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****     if (!HAS_ANY_FLAGS(g_led_config.flags[i], params->flags)) return;
 4961              		.loc 40 5 0
 4962 0006 0446     		mov	r4, r0
 4963              		.loc 40 6 0
 4964 0008 93F81D31 		ldrb	r3, [r3, #285]	@ zero_extendqisi2
 4965 000c 1942     		tst	r1, r3
 4966 000e 19D0     		beq	.L293
   7:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****     HSV hsv = {rand() & 0xFF, rand() & 0xFF, rgb_matrix_config.hsv.v};
 4967              		.loc 40 7 0
 4968 0010 FFF7FEFF 		bl	rand
 4969              	.LVL457:
 4970 0014 8DF80000 		strb	r0, [sp]
 4971 0018 FFF7FEFF 		bl	rand
 4972              	.LVL458:
 4973 001c 0B4B     		ldr	r3, .L295+4
 4974 001e 8DF80100 		strb	r0, [sp, #1]
 4975 0022 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 4976 0024 8DF80230 		strb	r3, [sp, #2]
   8:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****     RGB rgb = hsv_to_rgb(hsv);
 4977              		.loc 40 8 0
 4978 0028 0098     		ldr	r0, [sp]
 4979 002a FFF7FEFF 		bl	hsv_to_rgb
 4980              	.LVL459:
   9:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****     rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 4981              		.loc 40 9 0
 4982 002e C0F30743 		ubfx	r3, r0, #16, #8
 4983 0032 C2B2     		uxtb	r2, r0
 4984 0034 C0F30721 		ubfx	r1, r0, #8, #8
 4985 0038 2046     		mov	r0, r4
  10:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h **** }
 4986              		.loc 40 10 0
 4987 003a 02B0     		add	sp, sp, #8
 4988              		.cfi_remember_state
 4989              		.cfi_def_cfa_offset 8
 4990              		@ sp needed
 4991 003c BDE81040 		pop	{r4, lr}
 4992              		.cfi_restore 14
 4993              		.cfi_restore 4
 4994              		.cfi_def_cfa_offset 0
 4995              	.LVL460:
   9:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****     rgb_matrix_set_color(i, rgb.r, rgb.g, rgb.b);
 4996              		.loc 40 9 0
 4997 0040 FFF7FEBF 		b	rgb_matrix_set_color
 4998              	.LVL461:
 4999              	.L293:
 5000              		.cfi_restore_state
 5001              		.loc 40 10 0
 5002 0044 02B0     		add	sp, sp, #8
 5003              		.cfi_def_cfa_offset 8
 5004              		@ sp needed
 5005 0046 10BD     		pop	{r4, pc}
 5006              	.L296:
 5007              		.align	2
 5008              	.L295:
 5009 0048 00000000 		.word	g_led_config
 5010 004c 00000000 		.word	rgb_matrix_config
 5011              		.cfi_endproc
 5012              	.LFE195:
 5014              		.section	.text.JELLYBEAN_RAINDROPS,"ax",%progbits
 5015              		.align	1
 5016              		.global	JELLYBEAN_RAINDROPS
 5017              		.syntax unified
 5018              		.thumb
 5019              		.thumb_func
 5020              		.fpu fpv4-sp-d16
 5022              	JELLYBEAN_RAINDROPS:
 5023              	.LFB127:
  11:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h **** 
  12:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h **** bool JELLYBEAN_RAINDROPS(effect_params_t* params) {
 5024              		.loc 40 12 0
 5025              		.cfi_startproc
 5026              		@ args = 0, pretend = 0, frame = 0
 5027              		@ frame_needed = 0, uses_anonymous_args = 0
 5028              	.LVL462:
 5029 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5030              		.cfi_def_cfa_offset 24
 5031              		.cfi_offset 3, -24
 5032              		.cfi_offset 4, -20
 5033              		.cfi_offset 5, -16
 5034              		.cfi_offset 6, -12
 5035              		.cfi_offset 7, -8
 5036              		.cfi_offset 14, -4
  13:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****     if (!params->init) {
 5037              		.loc 40 13 0
 5038 0002 8678     		ldrb	r6, [r0, #2]	@ zero_extendqisi2
  12:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****     if (!params->init) {
 5039              		.loc 40 12 0
 5040 0004 0546     		mov	r5, r0
 5041              		.loc 40 13 0
 5042 0006 FEB9     		cbnz	r6, .L298
 5043              	.LVL463:
  14:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****         // Change one LED every tick, make sure speed is not 0
  15:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****         if (scale16by8(g_rgb_counters.tick, qadd8(rgb_matrix_config.speed, 16)) % 5 == 0) {
 5044              		.loc 40 15 0
 5045 0008 1B4B     		ldr	r3, .L302
 5046 000a 1C4A     		ldr	r2, .L302+4
 5047              	.LBB319:
 5048              	.LBB320:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 5049              		.loc 9 26 0
 5050 000c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 5051              	.LBE320:
 5052              	.LBE319:
 5053              		.loc 40 15 0
 5054 000e 1268     		ldr	r2, [r2]	@ unaligned
 5055              	.LBB322:
 5056              	.LBB321:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 5057              		.loc 9 26 0
 5058 0010 1033     		adds	r3, r3, #16
 5059              	.LVL464:
 5060              	.LBE321:
 5061              	.LBE322:
 5062              	.LBB323:
 5063              	.LBB324:
 5064              		.loc 3 253 0
 5065 0012 FF2B     		cmp	r3, #255
 5066 0014 92B2     		uxth	r2, r2
 5067 0016 28BF     		it	cs
 5068 0018 FF23     		movcs	r3, #255
 5069 001a 5343     		muls	r3, r2, r3
 5070              	.LBE324:
 5071              	.LBE323:
 5072              		.loc 40 15 0
 5073 001c C3F30F23 		ubfx	r3, r3, #8, #16
 5074 0020 0522     		movs	r2, #5
 5075 0022 B3FBF2F2 		udiv	r2, r3, r2
 5076 0026 02EB8202 		add	r2, r2, r2, lsl #2
 5077 002a 9B1A     		subs	r3, r3, r2
 5078 002c 9BB2     		uxth	r3, r3
 5079 002e 4BB9     		cbnz	r3, .L299
  16:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****             jellybean_raindrops_set_color(rand() % DRIVER_LED_TOTAL, params);
 5080              		.loc 40 16 0
 5081 0030 FFF7FEFF 		bl	rand
 5082              	.LVL465:
 5083 0034 6923     		movs	r3, #105
 5084 0036 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 5085 0038 90FBF3F2 		sdiv	r2, r0, r3
 5086 003c 02FB1300 		mls	r0, r2, r3, r0
 5087 0040 FFF7FEFF 		bl	jellybean_raindrops_set_color.isra.3
 5088              	.LVL466:
 5089              	.L299:
  17:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****         }
  18:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****         return false;
  19:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****     }
  20:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h **** 
  21:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
  22:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****     for (int i = led_min; i < led_max; i++) {
  23:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****         jellybean_raindrops_set_color(i, params);
  24:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****     }
  25:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****     return led_max < DRIVER_LED_TOTAL;
  26:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h **** }
 5090              		.loc 40 26 0
 5091 0044 3046     		mov	r0, r6
 5092 0046 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5093              	.LVL467:
 5094              	.L298:
  21:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****     for (int i = led_min; i < led_max; i++) {
 5095              		.loc 40 21 0
 5096 0048 0478     		ldrb	r4, [r0]	@ zero_extendqisi2
 5097 004a C4EB0414 		rsb	r4, r4, r4, lsl #4
 5098 004e E4B2     		uxtb	r4, r4
 5099              	.LVL468:
 5100 0050 04F10F06 		add	r6, r4, #15
 5101 0054 F6B2     		uxtb	r6, r6
 5102              	.LVL469:
 5103 0056 692E     		cmp	r6, #105
 5104 0058 3746     		mov	r7, r6
 5105 005a 28BF     		it	cs
 5106 005c 6927     		movcs	r7, #105
 5107              	.LVL470:
 5108              	.L300:
 5109              	.LBB325:
  22:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****         jellybean_raindrops_set_color(i, params);
 5110              		.loc 40 22 0 discriminator 1
 5111 005e A742     		cmp	r7, r4
 5112 0060 04DC     		bgt	.L301
 5113 0062 682E     		cmp	r6, #104
 5114 0064 8CBF     		ite	hi
 5115 0066 0026     		movhi	r6, #0
 5116 0068 0126     		movls	r6, #1
 5117              	.LBE325:
  25:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h **** }
 5118              		.loc 40 25 0
 5119 006a EBE7     		b	.L299
 5120              	.L301:
 5121              	.LBB326:
  23:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****     }
 5122              		.loc 40 23 0 discriminator 3
 5123 006c 2046     		mov	r0, r4
 5124 006e 6978     		ldrb	r1, [r5, #1]	@ zero_extendqisi2
 5125 0070 FFF7FEFF 		bl	jellybean_raindrops_set_color.isra.3
 5126              	.LVL471:
  22:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h ****         jellybean_raindrops_set_color(i, params);
 5127              		.loc 40 22 0 discriminator 3
 5128 0074 0134     		adds	r4, r4, #1
 5129              	.LVL472:
 5130 0076 F2E7     		b	.L300
 5131              	.L303:
 5132              		.align	2
 5133              	.L302:
 5134 0078 00000000 		.word	rgb_matrix_config
 5135 007c 00000000 		.word	g_rgb_counters
 5136              	.LBE326:
 5137              		.cfi_endproc
 5138              	.LFE127:
 5140              		.section	.text.rgb_matrix_set_color_all,"ax",%progbits
 5141              		.align	1
 5142              		.global	rgb_matrix_set_color_all
 5143              		.syntax unified
 5144              		.thumb
 5145              		.thumb_func
 5146              		.fpu fpv4-sp-d16
 5148              	rgb_matrix_set_color_all:
 5149              	.LFB155:
 152:quantum/rgb_matrix.c **** 
 153:quantum/rgb_matrix.c **** void rgb_matrix_set_color_all(uint8_t red, uint8_t green, uint8_t blue) { rgb_matrix_driver.set_col
 5150              		.loc 28 153 0
 5151              		.cfi_startproc
 5152              		@ args = 0, pretend = 0, frame = 0
 5153              		@ frame_needed = 0, uses_anonymous_args = 0
 5154              		@ link register save eliminated.
 5155              	.LVL473:
 5156              		.loc 28 153 0
 5157 0000 014B     		ldr	r3, .L305
 5158 0002 9B68     		ldr	r3, [r3, #8]
 5159 0004 1847     		bx	r3	@ indirect register sibling call
 5160              	.LVL474:
 5161              	.L306:
 5162 0006 00BF     		.align	2
 5163              	.L305:
 5164 0008 00000000 		.word	rgb_matrix_driver
 5165              		.cfi_endproc
 5166              	.LFE155:
 5168              		.section	.text.process_rgb_matrix,"ax",%progbits
 5169              		.align	1
 5170              		.global	process_rgb_matrix
 5171              		.syntax unified
 5172              		.thumb
 5173              		.thumb_func
 5174              		.fpu fpv4-sp-d16
 5176              	process_rgb_matrix:
 5177              	.LFB156:
 154:quantum/rgb_matrix.c **** 
 155:quantum/rgb_matrix.c **** bool process_rgb_matrix(uint16_t keycode, keyrecord_t *record) {
 5178              		.loc 28 155 0
 5179              		.cfi_startproc
 5180              		@ args = 0, pretend = 0, frame = 8
 5181              		@ frame_needed = 0, uses_anonymous_args = 0
 5182              	.LVL475:
 5183 0000 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 5184              		.cfi_def_cfa_offset 32
 5185              		.cfi_offset 4, -24
 5186              		.cfi_offset 5, -20
 5187              		.cfi_offset 6, -16
 5188              		.cfi_offset 7, -12
 5189              		.cfi_offset 8, -8
 5190              		.cfi_offset 14, -4
 156:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 157:quantum/rgb_matrix.c ****     uint8_t led[LED_HITS_TO_REMEMBER];
 158:quantum/rgb_matrix.c ****     uint8_t led_count = 0;
 159:quantum/rgb_matrix.c **** 
 160:quantum/rgb_matrix.c **** #    if defined(RGB_MATRIX_KEYRELEASES)
 161:quantum/rgb_matrix.c ****     if (!record->event.pressed) {
 162:quantum/rgb_matrix.c ****         led_count                  = rgb_matrix_map_row_column_to_led(record->event.key.row, record
 163:quantum/rgb_matrix.c ****         g_rgb_counters.any_key_hit = 0;
 164:quantum/rgb_matrix.c ****     }
 165:quantum/rgb_matrix.c **** #    elif defined(RGB_MATRIX_KEYPRESSES)
 166:quantum/rgb_matrix.c ****     if (record->event.pressed) {
 5191              		.loc 28 166 0
 5192 0004 8D78     		ldrb	r5, [r1, #2]	@ zero_extendqisi2
 155:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 5193              		.loc 28 155 0
 5194 0006 0B46     		mov	r3, r1
 5195              		.loc 28 166 0
 5196 0008 5DB1     		cbz	r5, .L308
 167:quantum/rgb_matrix.c ****         led_count                  = rgb_matrix_map_row_column_to_led(record->event.key.row, record
 5197              		.loc 28 167 0
 5198 000a 6A46     		mov	r2, sp
 5199 000c 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 5200              	.LVL476:
 5201 000e 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 5202              	.LVL477:
 5203 0010 FFF7FEFF 		bl	rgb_matrix_map_row_column_to_led
 5204              	.LVL478:
 168:quantum/rgb_matrix.c ****         g_rgb_counters.any_key_hit = 0;
 5205              		.loc 28 168 0
 5206 0014 2B4B     		ldr	r3, .L317
 5207 0016 0022     		movs	r2, #0
 167:quantum/rgb_matrix.c ****         led_count                  = rgb_matrix_map_row_column_to_led(record->event.key.row, record
 5208              		.loc 28 167 0
 5209 0018 0546     		mov	r5, r0
 5210              	.LVL479:
 5211              		.loc 28 168 0
 5212 001a 1A71     		strb	r2, [r3, #4]
 5213 001c 5A71     		strb	r2, [r3, #5]
 5214 001e 9A71     		strb	r2, [r3, #6]
 5215 0020 DA71     		strb	r2, [r3, #7]
 5216              	.LVL480:
 5217              	.L308:
 169:quantum/rgb_matrix.c ****     }
 170:quantum/rgb_matrix.c **** #    endif  // defined(RGB_MATRIX_KEYRELEASES)
 171:quantum/rgb_matrix.c **** 
 172:quantum/rgb_matrix.c ****     if (last_hit_buffer.count + led_count > LED_HITS_TO_REMEMBER) {
 5218              		.loc 28 172 0
 5219 0022 294C     		ldr	r4, .L317+4
 5220 0024 2778     		ldrb	r7, [r4]	@ zero_extendqisi2
 5221 0026 7B19     		adds	r3, r7, r5
 5222 0028 082B     		cmp	r3, #8
 5223 002a 21DD     		ble	.L309
 173:quantum/rgb_matrix.c ****         memcpy(&last_hit_buffer.x[0], &last_hit_buffer.x[led_count], LED_HITS_TO_REMEMBER - led_cou
 5224              		.loc 28 173 0
 5225 002c C5F10806 		rsb	r6, r5, #8
 5226 0030 691C     		adds	r1, r5, #1
 5227 0032 3246     		mov	r2, r6
 5228 0034 2144     		add	r1, r1, r4
 5229 0036 601C     		adds	r0, r4, #1
 5230 0038 FFF7FEFF 		bl	memcpy
 5231              	.LVL481:
 174:quantum/rgb_matrix.c ****         memcpy(&last_hit_buffer.y[0], &last_hit_buffer.y[led_count], LED_HITS_TO_REMEMBER - led_cou
 5232              		.loc 28 174 0
 5233 003c 05F10901 		add	r1, r5, #9
 5234 0040 3246     		mov	r2, r6
 5235 0042 2144     		add	r1, r1, r4
 5236 0044 04F10900 		add	r0, r4, #9
 5237 0048 FFF7FEFF 		bl	memcpy
 5238              	.LVL482:
 175:quantum/rgb_matrix.c ****         memcpy(&last_hit_buffer.tick[0], &last_hit_buffer.tick[led_count], (LED_HITS_TO_REMEMBER - 
 5239              		.loc 28 175 0
 5240 004c 04EB4501 		add	r1, r4, r5, lsl #1
 5241 0050 7200     		lsls	r2, r6, #1
 5242 0052 1931     		adds	r1, r1, #25
 5243 0054 04F11900 		add	r0, r4, #25
 5244 0058 FFF7FEFF 		bl	memcpy
 5245              	.LVL483:
 176:quantum/rgb_matrix.c ****         memcpy(&last_hit_buffer.index[0], &last_hit_buffer.index[led_count], LED_HITS_TO_REMEMBER -
 5246              		.loc 28 176 0
 5247 005c 05F11101 		add	r1, r5, #17
 5248 0060 3246     		mov	r2, r6
 5249 0062 2144     		add	r1, r1, r4
 5250 0064 04F11100 		add	r0, r4, #17
 177:quantum/rgb_matrix.c ****         last_hit_buffer.count--;
 5251              		.loc 28 177 0
 5252 0068 013F     		subs	r7, r7, #1
 176:quantum/rgb_matrix.c ****         memcpy(&last_hit_buffer.index[0], &last_hit_buffer.index[led_count], LED_HITS_TO_REMEMBER -
 5253              		.loc 28 176 0
 5254 006a FFF7FEFF 		bl	memcpy
 5255              	.LVL484:
 5256              		.loc 28 177 0
 5257 006e 2770     		strb	r7, [r4]
 5258              	.L309:
 158:quantum/rgb_matrix.c **** 
 5259              		.loc 28 158 0 discriminator 1
 5260 0070 0022     		movs	r2, #0
 5261 0072 2678     		ldrb	r6, [r4]	@ zero_extendqisi2
 5262              	.LBB327:
 5263              	.LBB328:
 178:quantum/rgb_matrix.c ****     }
 179:quantum/rgb_matrix.c **** 
 180:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < led_count; i++) {
 181:quantum/rgb_matrix.c ****         uint8_t index                = last_hit_buffer.count;
 182:quantum/rgb_matrix.c ****         last_hit_buffer.x[index]     = g_led_config.point[led[i]].x;
 5264              		.loc 28 182 0 discriminator 1
 5265 0074 DFF854C0 		ldr	ip, .L317+8
 5266              	.LBE328:
 5267              	.LBE327:
 158:quantum/rgb_matrix.c **** 
 5268              		.loc 28 158 0 discriminator 1
 5269 0078 1146     		mov	r1, r2
 5270              	.LBB331:
 5271              	.LBB329:
 183:quantum/rgb_matrix.c ****         last_hit_buffer.y[index]     = g_led_config.point[led[i]].y;
 184:quantum/rgb_matrix.c ****         last_hit_buffer.index[index] = led[i];
 185:quantum/rgb_matrix.c ****         last_hit_buffer.tick[index]  = 0;
 5272              		.loc 28 185 0 discriminator 1
 5273 007a 1746     		mov	r7, r2
 5274              	.L310:
 5275 007c D0B2     		uxtb	r0, r2
 5276 007e 8319     		adds	r3, r0, r6
 5277              	.LBE329:
 180:quantum/rgb_matrix.c ****         uint8_t index                = last_hit_buffer.count;
 5278              		.loc 28 180 0 discriminator 1
 5279 0080 A842     		cmp	r0, r5
 5280 0082 DBB2     		uxtb	r3, r3
 5281              	.LVL485:
 5282 0084 07D3     		bcc	.L311
 5283 0086 3544     		add	r5, r5, r6
 5284              	.LVL486:
 5285 0088 EDB2     		uxtb	r5, r5
 5286 008a 01B1     		cbz	r1, .L312
 5287 008c 2570     		strb	r5, [r4]
 5288              	.L312:
 5289              	.LBE331:
 186:quantum/rgb_matrix.c ****         last_hit_buffer.count++;
 187:quantum/rgb_matrix.c ****     }
 188:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 189:quantum/rgb_matrix.c **** 
 190:quantum/rgb_matrix.c **** #if defined(RGB_MATRIX_FRAMEBUFFER_EFFECTS) && !defined(DISABLE_RGB_MATRIX_TYPING_HEATMAP)
 191:quantum/rgb_matrix.c ****     if (rgb_matrix_config.mode == RGB_MATRIX_TYPING_HEATMAP) {
 192:quantum/rgb_matrix.c ****         process_rgb_matrix_typing_heatmap(record);
 193:quantum/rgb_matrix.c ****     }
 194:quantum/rgb_matrix.c **** #endif  // defined(RGB_MATRIX_FRAMEBUFFER_EFFECTS) && !defined(DISABLE_RGB_MATRIX_TYPING_HEATMAP)
 195:quantum/rgb_matrix.c **** 
 196:quantum/rgb_matrix.c ****     return true;
 197:quantum/rgb_matrix.c **** }
 5290              		.loc 28 197 0
 5291 008e 0120     		movs	r0, #1
 5292 0090 02B0     		add	sp, sp, #8
 5293              		.cfi_remember_state
 5294              		.cfi_def_cfa_offset 24
 5295              		@ sp needed
 5296 0092 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 5297              	.LVL487:
 5298              	.L311:
 5299              		.cfi_restore_state
 5300              	.LBB332:
 5301              	.LBB330:
 182:quantum/rgb_matrix.c ****         last_hit_buffer.y[index]     = g_led_config.point[led[i]].y;
 5302              		.loc 28 182 0 discriminator 3
 5303 0096 1DF802E0 		ldrb	lr, [sp, r2]	@ zero_extendqisi2
 5304 009a 0EF12401 		add	r1, lr, #36
 5305 009e E018     		adds	r0, r4, r3
 5306 00a0 0CEB4101 		add	r1, ip, r1, lsl #1
 185:quantum/rgb_matrix.c ****         last_hit_buffer.count++;
 5307              		.loc 28 185 0 discriminator 3
 5308 00a4 0C33     		adds	r3, r3, #12
 5309              	.LVL488:
 5310 00a6 04EB4303 		add	r3, r4, r3, lsl #1
 182:quantum/rgb_matrix.c ****         last_hit_buffer.y[index]     = g_led_config.point[led[i]].y;
 5311              		.loc 28 182 0 discriminator 3
 5312 00aa 91F80380 		ldrb	r8, [r1, #3]	@ zero_extendqisi2
 183:quantum/rgb_matrix.c ****         last_hit_buffer.index[index] = led[i];
 5313              		.loc 28 183 0 discriminator 3
 5314 00ae 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 5315 00b0 4172     		strb	r1, [r0, #9]
 182:quantum/rgb_matrix.c ****         last_hit_buffer.y[index]     = g_led_config.point[led[i]].y;
 5316              		.loc 28 182 0 discriminator 3
 5317 00b2 80F80180 		strb	r8, [r0, #1]
 184:quantum/rgb_matrix.c ****         last_hit_buffer.tick[index]  = 0;
 5318              		.loc 28 184 0 discriminator 3
 5319 00b6 80F811E0 		strb	lr, [r0, #17]
 5320 00ba 0132     		adds	r2, r2, #1
 5321              	.LVL489:
 185:quantum/rgb_matrix.c ****         last_hit_buffer.count++;
 5322              		.loc 28 185 0 discriminator 3
 5323 00bc 5F70     		strb	r7, [r3, #1]
 5324 00be 9F70     		strb	r7, [r3, #2]
 5325 00c0 0121     		movs	r1, #1
 5326 00c2 DBE7     		b	.L310
 5327              	.L318:
 5328              		.align	2
 5329              	.L317:
 5330 00c4 00000000 		.word	g_rgb_counters
 5331 00c8 00000000 		.word	.LANCHOR1
 5332 00cc 00000000 		.word	g_led_config
 5333              	.LBE330:
 5334              	.LBE332:
 5335              		.cfi_endproc
 5336              	.LFE156:
 5338              		.section	.text.rgb_matrix_test,"ax",%progbits
 5339              		.align	1
 5340              		.global	rgb_matrix_test
 5341              		.syntax unified
 5342              		.thumb
 5343              		.thumb_func
 5344              		.fpu fpv4-sp-d16
 5346              	rgb_matrix_test:
 5347              	.LFB157:
 198:quantum/rgb_matrix.c **** 
 199:quantum/rgb_matrix.c **** void rgb_matrix_test(void) {
 5348              		.loc 28 199 0
 5349              		.cfi_startproc
 5350              		@ args = 0, pretend = 0, frame = 0
 5351              		@ frame_needed = 0, uses_anonymous_args = 0
 5352              		@ link register save eliminated.
 5353              	.LVL490:
 200:quantum/rgb_matrix.c ****     // Mask out bits 4 and 5
 201:quantum/rgb_matrix.c ****     // Increase the factor to make the test animation slower (and reduce to make it faster)
 202:quantum/rgb_matrix.c ****     uint8_t factor = 10;
 203:quantum/rgb_matrix.c ****     switch ((g_rgb_counters.tick & (0b11 << factor)) >> factor) {
 5354              		.loc 28 203 0
 5355 0000 0C4B     		ldr	r3, .L326
 5356 0002 1B68     		ldr	r3, [r3]	@ unaligned
 5357 0004 C3F38123 		ubfx	r3, r3, #10, #2
 5358 0008 022B     		cmp	r3, #2
 5359 000a 0CD0     		beq	.L321
 5360 000c 032B     		cmp	r3, #3
 5361 000e 0ED0     		beq	.L322
 5362 0010 012B     		cmp	r3, #1
 204:quantum/rgb_matrix.c ****         case 0: {
 205:quantum/rgb_matrix.c ****             rgb_matrix_set_color_all(20, 0, 0);
 206:quantum/rgb_matrix.c ****             break;
 207:quantum/rgb_matrix.c ****         }
 208:quantum/rgb_matrix.c ****         case 1: {
 209:quantum/rgb_matrix.c ****             rgb_matrix_set_color_all(0, 20, 0);
 5363              		.loc 28 209 0
 5364 0012 4FF00002 		mov	r2, #0
 203:quantum/rgb_matrix.c ****         case 0: {
 5365              		.loc 28 203 0
 5366 0016 03D0     		beq	.L323
 5367              	.L324:
 205:quantum/rgb_matrix.c ****             break;
 5368              		.loc 28 205 0
 5369 0018 1146     		mov	r1, r2
 5370 001a 1420     		movs	r0, #20
 5371              	.L325:
 210:quantum/rgb_matrix.c ****             break;
 211:quantum/rgb_matrix.c ****         }
 212:quantum/rgb_matrix.c ****         case 2: {
 213:quantum/rgb_matrix.c ****             rgb_matrix_set_color_all(0, 0, 20);
 5372              		.loc 28 213 0
 5373 001c FFF7FEBF 		b	rgb_matrix_set_color_all
 5374              	.LVL491:
 5375              	.L323:
 209:quantum/rgb_matrix.c ****             break;
 5376              		.loc 28 209 0
 5377 0020 1421     		movs	r1, #20
 5378 0022 1046     		mov	r0, r2
 5379 0024 FAE7     		b	.L325
 5380              	.L321:
 5381              		.loc 28 213 0
 5382 0026 0021     		movs	r1, #0
 5383 0028 1422     		movs	r2, #20
 5384 002a 0846     		mov	r0, r1
 5385 002c F6E7     		b	.L325
 5386              	.L322:
 214:quantum/rgb_matrix.c ****             break;
 215:quantum/rgb_matrix.c ****         }
 216:quantum/rgb_matrix.c ****         case 3: {
 217:quantum/rgb_matrix.c ****             rgb_matrix_set_color_all(20, 20, 20);
 5387              		.loc 28 217 0
 5388 002e 1422     		movs	r2, #20
 5389 0030 F2E7     		b	.L324
 5390              	.L327:
 5391 0032 00BF     		.align	2
 5392              	.L326:
 5393 0034 00000000 		.word	g_rgb_counters
 5394              		.cfi_endproc
 5395              	.LFE157:
 5397              		.section	.text.rgb_matrix_indicators_kb,"ax",%progbits
 5398              		.align	1
 5399              		.weak	rgb_matrix_indicators_kb
 5400              		.syntax unified
 5401              		.thumb
 5402              		.thumb_func
 5403              		.fpu fpv4-sp-d16
 5405              	rgb_matrix_indicators_kb:
 5406              	.LFB166:
 218:quantum/rgb_matrix.c ****             break;
 219:quantum/rgb_matrix.c ****         }
 220:quantum/rgb_matrix.c ****     }
 221:quantum/rgb_matrix.c **** }
 222:quantum/rgb_matrix.c **** 
 223:quantum/rgb_matrix.c **** static bool rgb_matrix_none(effect_params_t *params) {
 224:quantum/rgb_matrix.c ****     if (!params->init) {
 225:quantum/rgb_matrix.c ****         return false;
 226:quantum/rgb_matrix.c ****     }
 227:quantum/rgb_matrix.c **** 
 228:quantum/rgb_matrix.c ****     RGB_MATRIX_USE_LIMITS(led_min, led_max);
 229:quantum/rgb_matrix.c ****     for (uint8_t i = led_min; i < led_max; i++) {
 230:quantum/rgb_matrix.c ****         rgb_matrix_set_color(i, 0, 0, 0);
 231:quantum/rgb_matrix.c ****     }
 232:quantum/rgb_matrix.c ****     return led_max < DRIVER_LED_TOTAL;
 233:quantum/rgb_matrix.c **** }
 234:quantum/rgb_matrix.c **** 
 235:quantum/rgb_matrix.c **** static uint8_t         rgb_last_enable   = UINT8_MAX;
 236:quantum/rgb_matrix.c **** static uint8_t         rgb_last_effect   = UINT8_MAX;
 237:quantum/rgb_matrix.c **** static effect_params_t rgb_effect_params = {0, 0xFF};
 238:quantum/rgb_matrix.c **** static rgb_task_states rgb_task_state    = SYNCING;
 239:quantum/rgb_matrix.c **** 
 240:quantum/rgb_matrix.c **** static void rgb_task_timers(void) {
 241:quantum/rgb_matrix.c ****     // Update double buffer timers
 242:quantum/rgb_matrix.c ****     uint16_t deltaTime  = timer_elapsed32(rgb_counters_buffer);
 243:quantum/rgb_matrix.c ****     rgb_counters_buffer = timer_read32();
 244:quantum/rgb_matrix.c ****     if (g_rgb_counters.any_key_hit < UINT32_MAX) {
 245:quantum/rgb_matrix.c ****         if (UINT32_MAX - deltaTime < g_rgb_counters.any_key_hit) {
 246:quantum/rgb_matrix.c ****             g_rgb_counters.any_key_hit = UINT32_MAX;
 247:quantum/rgb_matrix.c ****         } else {
 248:quantum/rgb_matrix.c ****             g_rgb_counters.any_key_hit += deltaTime;
 249:quantum/rgb_matrix.c ****         }
 250:quantum/rgb_matrix.c ****     }
 251:quantum/rgb_matrix.c **** 
 252:quantum/rgb_matrix.c ****     // Update double buffer last hit timers
 253:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 254:quantum/rgb_matrix.c ****     uint8_t count = last_hit_buffer.count;
 255:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < count; ++i) {
 256:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 257:quantum/rgb_matrix.c ****             last_hit_buffer.count--;
 258:quantum/rgb_matrix.c ****             continue;
 259:quantum/rgb_matrix.c ****         }
 260:quantum/rgb_matrix.c ****         last_hit_buffer.tick[i] += deltaTime;
 261:quantum/rgb_matrix.c ****     }
 262:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 263:quantum/rgb_matrix.c **** }
 264:quantum/rgb_matrix.c **** 
 265:quantum/rgb_matrix.c **** static void rgb_task_sync(void) {
 266:quantum/rgb_matrix.c ****     // next task
 267:quantum/rgb_matrix.c ****     if (timer_elapsed32(g_rgb_counters.tick) >= RGB_MATRIX_LED_FLUSH_LIMIT) rgb_task_state = STARTI
 268:quantum/rgb_matrix.c **** }
 269:quantum/rgb_matrix.c **** 
 270:quantum/rgb_matrix.c **** static void rgb_task_start(void) {
 271:quantum/rgb_matrix.c ****     // reset iter
 272:quantum/rgb_matrix.c ****     rgb_effect_params.iter = 0;
 273:quantum/rgb_matrix.c **** 
 274:quantum/rgb_matrix.c ****     // update double buffers
 275:quantum/rgb_matrix.c ****     g_rgb_counters.tick = rgb_counters_buffer;
 276:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 277:quantum/rgb_matrix.c ****     g_last_hit_tracker = last_hit_buffer;
 278:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 279:quantum/rgb_matrix.c **** 
 280:quantum/rgb_matrix.c ****     // next task
 281:quantum/rgb_matrix.c ****     rgb_task_state = RENDERING;
 282:quantum/rgb_matrix.c **** }
 283:quantum/rgb_matrix.c **** 
 284:quantum/rgb_matrix.c **** static void rgb_task_render(uint8_t effect) {
 285:quantum/rgb_matrix.c ****     bool rendering         = false;
 286:quantum/rgb_matrix.c ****     rgb_effect_params.init = (effect != rgb_last_effect) || (rgb_matrix_config.enable != rgb_last_e
 287:quantum/rgb_matrix.c **** 
 288:quantum/rgb_matrix.c ****     // each effect can opt to do calculations
 289:quantum/rgb_matrix.c ****     // and/or request PWM buffer updates.
 290:quantum/rgb_matrix.c ****     switch (effect) {
 291:quantum/rgb_matrix.c ****         case RGB_MATRIX_NONE:
 292:quantum/rgb_matrix.c ****             rendering = rgb_matrix_none(&rgb_effect_params);
 293:quantum/rgb_matrix.c ****             break;
 294:quantum/rgb_matrix.c **** 
 295:quantum/rgb_matrix.c **** // ---------------------------------------------
 296:quantum/rgb_matrix.c **** // -----Begin rgb effect switch case macros-----
 297:quantum/rgb_matrix.c **** #define RGB_MATRIX_EFFECT(name, ...)          \
 298:quantum/rgb_matrix.c ****     case RGB_MATRIX_##name:                   \
 299:quantum/rgb_matrix.c ****         rendering = name(&rgb_effect_params); \
 300:quantum/rgb_matrix.c ****         break;
 301:quantum/rgb_matrix.c **** #include "rgb_matrix_animations/rgb_matrix_effects.inc"
 302:quantum/rgb_matrix.c **** #undef RGB_MATRIX_EFFECT
 303:quantum/rgb_matrix.c **** 
 304:quantum/rgb_matrix.c **** #if defined(RGB_MATRIX_CUSTOM_KB) || defined(RGB_MATRIX_CUSTOM_USER)
 305:quantum/rgb_matrix.c **** #    define RGB_MATRIX_EFFECT(name, ...)          \
 306:quantum/rgb_matrix.c ****         case RGB_MATRIX_CUSTOM_##name:            \
 307:quantum/rgb_matrix.c ****             rendering = name(&rgb_effect_params); \
 308:quantum/rgb_matrix.c ****             break;
 309:quantum/rgb_matrix.c **** #    ifdef RGB_MATRIX_CUSTOM_KB
 310:quantum/rgb_matrix.c **** #        include "rgb_matrix_kb.inc"
 311:quantum/rgb_matrix.c **** #    endif
 312:quantum/rgb_matrix.c **** #    ifdef RGB_MATRIX_CUSTOM_USER
 313:quantum/rgb_matrix.c **** #        include "rgb_matrix_user.inc"
 314:quantum/rgb_matrix.c **** #    endif
 315:quantum/rgb_matrix.c **** #    undef RGB_MATRIX_EFFECT
 316:quantum/rgb_matrix.c **** #endif
 317:quantum/rgb_matrix.c ****             // -----End rgb effect switch case macros-------
 318:quantum/rgb_matrix.c ****             // ---------------------------------------------
 319:quantum/rgb_matrix.c **** 
 320:quantum/rgb_matrix.c ****         // Factory default magic value
 321:quantum/rgb_matrix.c ****         case UINT8_MAX: {
 322:quantum/rgb_matrix.c ****             rgb_matrix_test();
 323:quantum/rgb_matrix.c ****             rgb_task_state = FLUSHING;
 324:quantum/rgb_matrix.c ****         }
 325:quantum/rgb_matrix.c ****             return;
 326:quantum/rgb_matrix.c ****     }
 327:quantum/rgb_matrix.c **** 
 328:quantum/rgb_matrix.c ****     rgb_effect_params.iter++;
 329:quantum/rgb_matrix.c **** 
 330:quantum/rgb_matrix.c ****     // next task
 331:quantum/rgb_matrix.c ****     if (!rendering) {
 332:quantum/rgb_matrix.c ****         rgb_task_state = FLUSHING;
 333:quantum/rgb_matrix.c ****         if (!rgb_effect_params.init && effect == RGB_MATRIX_NONE) {
 334:quantum/rgb_matrix.c ****             // We only need to flush once if we are RGB_MATRIX_NONE
 335:quantum/rgb_matrix.c ****             rgb_task_state = SYNCING;
 336:quantum/rgb_matrix.c ****         }
 337:quantum/rgb_matrix.c ****     }
 338:quantum/rgb_matrix.c **** }
 339:quantum/rgb_matrix.c **** 
 340:quantum/rgb_matrix.c **** static void rgb_task_flush(uint8_t effect) {
 341:quantum/rgb_matrix.c ****     // update last trackers after the first full render so we can init over several frames
 342:quantum/rgb_matrix.c ****     rgb_last_effect = effect;
 343:quantum/rgb_matrix.c ****     rgb_last_enable = rgb_matrix_config.enable;
 344:quantum/rgb_matrix.c **** 
 345:quantum/rgb_matrix.c ****     // update pwm buffers
 346:quantum/rgb_matrix.c ****     rgb_matrix_update_pwm_buffers();
 347:quantum/rgb_matrix.c **** 
 348:quantum/rgb_matrix.c ****     // next task
 349:quantum/rgb_matrix.c ****     rgb_task_state = SYNCING;
 350:quantum/rgb_matrix.c **** }
 351:quantum/rgb_matrix.c **** 
 352:quantum/rgb_matrix.c **** void rgb_matrix_task(void) {
 353:quantum/rgb_matrix.c ****     rgb_task_timers();
 354:quantum/rgb_matrix.c **** 
 355:quantum/rgb_matrix.c ****     // Ideally we would also stop sending zeros to the LED driver PWM buffers
 356:quantum/rgb_matrix.c ****     // while suspended and just do a software shutdown. This is a cheap hack for now.
 357:quantum/rgb_matrix.c ****     bool    suspend_backlight = ((g_suspend_state && RGB_DISABLE_WHEN_USB_SUSPENDED) || (RGB_DISABL
 358:quantum/rgb_matrix.c ****     uint8_t effect            = suspend_backlight || !rgb_matrix_config.enable ? 0 : rgb_matrix_con
 359:quantum/rgb_matrix.c **** 
 360:quantum/rgb_matrix.c ****     switch (rgb_task_state) {
 361:quantum/rgb_matrix.c ****         case STARTING:
 362:quantum/rgb_matrix.c ****             rgb_task_start();
 363:quantum/rgb_matrix.c ****             break;
 364:quantum/rgb_matrix.c ****         case RENDERING:
 365:quantum/rgb_matrix.c ****             rgb_task_render(effect);
 366:quantum/rgb_matrix.c ****             break;
 367:quantum/rgb_matrix.c ****         case FLUSHING:
 368:quantum/rgb_matrix.c ****             rgb_task_flush(effect);
 369:quantum/rgb_matrix.c ****             break;
 370:quantum/rgb_matrix.c ****         case SYNCING:
 371:quantum/rgb_matrix.c ****             rgb_task_sync();
 372:quantum/rgb_matrix.c ****             break;
 373:quantum/rgb_matrix.c ****     }
 374:quantum/rgb_matrix.c **** 
 375:quantum/rgb_matrix.c ****     if (!suspend_backlight) {
 376:quantum/rgb_matrix.c ****         rgb_matrix_indicators();
 377:quantum/rgb_matrix.c ****     }
 378:quantum/rgb_matrix.c **** }
 379:quantum/rgb_matrix.c **** 
 380:quantum/rgb_matrix.c **** void rgb_matrix_indicators(void) {
 381:quantum/rgb_matrix.c ****     rgb_matrix_indicators_kb();
 382:quantum/rgb_matrix.c ****     rgb_matrix_indicators_user();
 383:quantum/rgb_matrix.c **** }
 384:quantum/rgb_matrix.c **** 
 385:quantum/rgb_matrix.c **** __attribute__((weak)) void rgb_matrix_indicators_kb(void) {}
 5407              		.loc 28 385 0
 5408              		.cfi_startproc
 5409              		@ args = 0, pretend = 0, frame = 0
 5410              		@ frame_needed = 0, uses_anonymous_args = 0
 5411              		@ link register save eliminated.
 5412              		.loc 28 385 0
 5413 0000 7047     		bx	lr
 5414              		.cfi_endproc
 5415              	.LFE166:
 5417              		.thumb_set rgb_matrix_indicators_kb.localalias.5,rgb_matrix_indicators_kb
 5418              		.section	.text.rgb_matrix_indicators_user,"ax",%progbits
 5419              		.align	1
 5420              		.weak	rgb_matrix_indicators_user
 5421              		.syntax unified
 5422              		.thumb
 5423              		.thumb_func
 5424              		.fpu fpv4-sp-d16
 5426              	rgb_matrix_indicators_user:
 5427              	.LFB198:
 5428              		.cfi_startproc
 5429              		@ args = 0, pretend = 0, frame = 0
 5430              		@ frame_needed = 0, uses_anonymous_args = 0
 5431              		@ link register save eliminated.
 5432 0000 7047     		bx	lr
 5433              		.cfi_endproc
 5434              	.LFE198:
 5436              		.section	.text.rgb_matrix_indicators,"ax",%progbits
 5437              		.align	1
 5438              		.global	rgb_matrix_indicators
 5439              		.syntax unified
 5440              		.thumb
 5441              		.thumb_func
 5442              		.fpu fpv4-sp-d16
 5444              	rgb_matrix_indicators:
 5445              	.LFB165:
 380:quantum/rgb_matrix.c ****     rgb_matrix_indicators_kb();
 5446              		.loc 28 380 0
 5447              		.cfi_startproc
 5448              		@ args = 0, pretend = 0, frame = 0
 5449              		@ frame_needed = 0, uses_anonymous_args = 0
 380:quantum/rgb_matrix.c ****     rgb_matrix_indicators_kb();
 5450              		.loc 28 380 0
 5451 0000 08B5     		push	{r3, lr}
 5452              		.cfi_def_cfa_offset 8
 5453              		.cfi_offset 3, -8
 5454              		.cfi_offset 14, -4
 381:quantum/rgb_matrix.c ****     rgb_matrix_indicators_user();
 5455              		.loc 28 381 0
 5456 0002 FFF7FEFF 		bl	rgb_matrix_indicators_kb
 5457              	.LVL492:
 382:quantum/rgb_matrix.c **** }
 5458              		.loc 28 382 0
 5459 0006 FFF7FEFF 		bl	rgb_matrix_indicators_user
 5460              	.LVL493:
 383:quantum/rgb_matrix.c **** 
 5461              		.loc 28 383 0
 5462 000a 08BD     		pop	{r3, pc}
 5463              		.cfi_endproc
 5464              	.LFE165:
 5466              		.section	.text.rgb_matrix_task,"ax",%progbits
 5467              		.align	1
 5468              		.global	rgb_matrix_task
 5469              		.syntax unified
 5470              		.thumb
 5471              		.thumb_func
 5472              		.fpu fpv4-sp-d16
 5474              	rgb_matrix_task:
 5475              	.LFB164:
 352:quantum/rgb_matrix.c ****     rgb_task_timers();
 5476              		.loc 28 352 0
 5477              		.cfi_startproc
 5478              		@ args = 0, pretend = 0, frame = 0
 5479              		@ frame_needed = 0, uses_anonymous_args = 0
 5480 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 5481              		.cfi_def_cfa_offset 24
 5482              		.cfi_offset 4, -24
 5483              		.cfi_offset 5, -20
 5484              		.cfi_offset 6, -16
 5485              		.cfi_offset 7, -12
 5486              		.cfi_offset 8, -8
 5487              		.cfi_offset 14, -4
 5488              	.LBB347:
 5489              	.LBB348:
 242:quantum/rgb_matrix.c ****     rgb_counters_buffer = timer_read32();
 5490              		.loc 28 242 0
 5491 0004 A34D     		ldr	r5, .L403
 5492 0006 E86A     		ldr	r0, [r5, #44]
 5493 0008 FFF7FEFF 		bl	timer_elapsed32
 5494              	.LVL494:
 5495 000c 0446     		mov	r4, r0
 5496 000e 86B2     		uxth	r6, r0
 5497              	.LVL495:
 243:quantum/rgb_matrix.c ****     if (g_rgb_counters.any_key_hit < UINT32_MAX) {
 5498              		.loc 28 243 0
 5499 0010 FFF7FEFF 		bl	timer_read32
 5500              	.LVL496:
 244:quantum/rgb_matrix.c ****         if (UINT32_MAX - deltaTime < g_rgb_counters.any_key_hit) {
 5501              		.loc 28 244 0
 5502 0014 A04B     		ldr	r3, .L403+4
 243:quantum/rgb_matrix.c ****     if (g_rgb_counters.any_key_hit < UINT32_MAX) {
 5503              		.loc 28 243 0
 5504 0016 E862     		str	r0, [r5, #44]
 244:quantum/rgb_matrix.c ****         if (UINT32_MAX - deltaTime < g_rgb_counters.any_key_hit) {
 5505              		.loc 28 244 0
 5506 0018 5968     		ldr	r1, [r3, #4]	@ unaligned
 5507 001a 4A1C     		adds	r2, r1, #1
 5508 001c 2A46     		mov	r2, r5
 5509 001e 0BD0     		beq	.L332
 245:quantum/rgb_matrix.c ****             g_rgb_counters.any_key_hit = UINT32_MAX;
 5510              		.loc 28 245 0
 5511 0020 F743     		mvns	r7, r6
 5512 0022 B942     		cmp	r1, r7
 246:quantum/rgb_matrix.c ****         } else {
 5513              		.loc 28 246 0
 5514 0024 89BF     		itett	hi
 5515 0026 4FF0FF31 		movhi	r1, #-1
 248:quantum/rgb_matrix.c ****         }
 5516              		.loc 28 248 0
 5517 002a 8919     		addls	r1, r1, r6
 246:quantum/rgb_matrix.c ****         } else {
 5518              		.loc 28 246 0
 5519 002c 1971     		strbhi	r1, [r3, #4]
 5520 002e 5971     		strbhi	r1, [r3, #5]
 5521 0030 86BF     		itte	hi
 5522 0032 9971     		strbhi	r1, [r3, #6]
 5523 0034 D971     		strbhi	r1, [r3, #7]
 248:quantum/rgb_matrix.c ****         }
 5524              		.loc 28 248 0
 5525 0036 5960     		strls	r1, [r3, #4]	@ unaligned
 5526              	.L332:
 254:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < count; ++i) {
 5527              		.loc 28 254 0
 5528 0038 92F80080 		ldrb	r8, [r2]	@ zero_extendqisi2
 5529              	.LVL497:
 5530 003c 0025     		movs	r5, #0
 5531              	.LBB349:
 256:quantum/rgb_matrix.c ****             last_hit_buffer.count--;
 5532              		.loc 28 256 0
 5533 003e E443     		mvns	r4, r4
 5534              	.LBE349:
 254:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < count; ++i) {
 5535              		.loc 28 254 0
 5536 0040 4146     		mov	r1, r8
 5537 0042 AE46     		mov	lr, r5
 5538              	.LBB350:
 256:quantum/rgb_matrix.c ****             last_hit_buffer.count--;
 5539              		.loc 28 256 0
 5540 0044 A4B2     		uxth	r4, r4
 5541              	.LVL498:
 5542              	.L334:
 255:quantum/rgb_matrix.c ****         if (UINT16_MAX - deltaTime < last_hit_buffer.tick[i]) {
 5543              		.loc 28 255 0
 5544 0046 EFB2     		uxtb	r7, r5
 5545 0048 B845     		cmp	r8, r7
 5546 004a 13D8     		bhi	.L337
 5547 004c BEF1000F 		cmp	lr, #0
 5548 0050 00D0     		beq	.L338
 5549 0052 1170     		strb	r1, [r2]
 5550              	.L338:
 5551              	.LVL499:
 5552              	.LBE350:
 5553              	.LBE348:
 5554              	.LBE347:
 358:quantum/rgb_matrix.c **** 
 5555              		.loc 28 358 0
 5556 0054 914A     		ldr	r2, .L403+8
 360:quantum/rgb_matrix.c ****         case STARTING:
 5557              		.loc 28 360 0
 5558 0056 924D     		ldr	r5, .L403+12
 358:quantum/rgb_matrix.c **** 
 5559              		.loc 28 358 0
 5560 0058 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 5561 005a 11F00306 		ands	r6, r1, #3
 5562 005e 18BF     		it	ne
 5563 0060 8E08     		lsrne	r6, r1, #2
 5564              	.LVL500:
 360:quantum/rgb_matrix.c ****         case STARTING:
 5565              		.loc 28 360 0
 5566 0062 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 5567 0064 0329     		cmp	r1, #3
 5568 0066 29D8     		bhi	.L340
 5569 0068 DFE811F0 		tbh	[pc, r1, lsl #1]
 5570              	.L342:
 5571 006c 1700     		.2byte	(.L341-.L342)/2
 5572 006e 2C00     		.2byte	(.L343-.L342)/2
 5573 0070 2601     		.2byte	(.L344-.L342)/2
 5574 0072 2E01     		.2byte	(.L345-.L342)/2
 5575              	.LVL501:
 5576              		.p2align 1
 5577              	.L337:
 5578              	.LBB353:
 5579              	.LBB352:
 5580              	.LBB351:
 256:quantum/rgb_matrix.c ****             last_hit_buffer.count--;
 5581              		.loc 28 256 0
 5582 0074 05F10C07 		add	r7, r5, #12
 5583 0078 02EB4707 		add	r7, r2, r7, lsl #1
 5584 007c 0135     		adds	r5, r5, #1
 5585              	.LVL502:
 5586 007e B7F801C0 		ldrh	ip, [r7, #1]	@ unaligned
 5587 0082 6445     		cmp	r4, ip
 257:quantum/rgb_matrix.c ****             continue;
 5588              		.loc 28 257 0
 5589 0084 B7BF     		itett	lt
 5590 0086 01F1FF31 		addlt	r1, r1, #-1
 260:quantum/rgb_matrix.c ****     }
 5591              		.loc 28 260 0
 5592 008a B444     		addge	ip, ip, r6
 257:quantum/rgb_matrix.c ****             continue;
 5593              		.loc 28 257 0
 5594 008c C9B2     		uxtblt	r1, r1
 5595 008e 4FF0010E 		movlt	lr, #1
 260:quantum/rgb_matrix.c ****     }
 5596              		.loc 28 260 0
 5597 0092 A8BF     		it	ge
 5598 0094 A7F801C0 		strhge	ip, [r7, #1]	@ unaligned
 5599 0098 D5E7     		b	.L334
 5600              	.LVL503:
 5601              	.L341:
 5602              	.LBE351:
 5603              	.LBE352:
 5604              	.LBE353:
 5605              	.LBB354:
 5606              	.LBB355:
 272:quantum/rgb_matrix.c **** 
 5607              		.loc 28 272 0
 5608 009a 0022     		movs	r2, #0
 275:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 5609              		.loc 28 275 0
 5610 009c 1860     		str	r0, [r3]	@ unaligned
 277:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 5611              		.loc 28 277 0
 5612 009e 7D4B     		ldr	r3, .L403
 272:quantum/rgb_matrix.c **** 
 5613              		.loc 28 272 0
 5614 00a0 6A70     		strb	r2, [r5, #1]
 277:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 5615              		.loc 28 277 0
 5616 00a2 804A     		ldr	r2, .L403+16
 5617 00a4 03F12801 		add	r1, r3, #40
 5618              	.L346:
 5619 00a8 53F8040B 		ldr	r0, [r3], #4	@ unaligned
 5620 00ac 42F8040B 		str	r0, [r2], #4	@ unaligned
 5621 00b0 8B42     		cmp	r3, r1
 5622 00b2 F9D1     		bne	.L346
 5623 00b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5624 00b6 1370     		strb	r3, [r2]
 281:quantum/rgb_matrix.c **** }
 5625              		.loc 28 281 0
 5626 00b8 0123     		movs	r3, #1
 5627              	.L401:
 5628              	.LBE355:
 5629              	.LBE354:
 5630              	.LBB356:
 5631              	.LBB357:
 267:quantum/rgb_matrix.c **** }
 5632              		.loc 28 267 0
 5633 00ba 2B70     		strb	r3, [r5]
 5634              	.L340:
 5635              	.LBE357:
 5636              	.LBE356:
 378:quantum/rgb_matrix.c **** 
 5637              		.loc 28 378 0
 5638 00bc BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 5639              		.cfi_remember_state
 5640              		.cfi_restore 14
 5641              		.cfi_restore 8
 5642              		.cfi_restore 7
 5643              		.cfi_restore 6
 5644              		.cfi_restore 5
 5645              		.cfi_restore 4
 5646              		.cfi_def_cfa_offset 0
 5647              	.LVL504:
 376:quantum/rgb_matrix.c ****     }
 5648              		.loc 28 376 0
 5649 00c0 FFF7FEBF 		b	rgb_matrix_indicators
 5650              	.LVL505:
 5651              	.L343:
 5652              		.cfi_restore_state
 5653              	.LBB359:
 5654              	.LBB360:
 286:quantum/rgb_matrix.c **** 
 5655              		.loc 28 286 0
 5656 00c4 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 5657 00c6 B342     		cmp	r3, r6
 5658 00c8 30D1     		bne	.L391
 5659 00ca 1078     		ldrb	r0, [r2]	@ zero_extendqisi2
 5660 00cc 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 5661 00ce 00F00300 		and	r0, r0, #3
 5662 00d2 C01A     		subs	r0, r0, r3
 5663 00d4 18BF     		it	ne
 5664 00d6 0120     		movne	r0, #1
 5665              	.L347:
 5666 00d8 E870     		strb	r0, [r5, #3]
 290:quantum/rgb_matrix.c ****         case RGB_MATRIX_NONE:
 5667              		.loc 28 290 0
 5668 00da 232E     		cmp	r6, #35
 5669 00dc 00F2EA80 		bhi	.L392
 5670 00e0 DFE816F0 		tbh	[pc, r6, lsl #1]
 5671              	.L350:
 5672 00e4 2600     		.2byte	(.L349-.L350)/2
 5673 00e6 5000     		.2byte	(.L351-.L350)/2
 5674 00e8 5400     		.2byte	(.L352-.L350)/2
 5675 00ea 5800     		.2byte	(.L353-.L350)/2
 5676 00ec 5C00     		.2byte	(.L354-.L350)/2
 5677 00ee 6000     		.2byte	(.L355-.L350)/2
 5678 00f0 6400     		.2byte	(.L356-.L350)/2
 5679 00f2 6800     		.2byte	(.L357-.L350)/2
 5680 00f4 6C00     		.2byte	(.L358-.L350)/2
 5681 00f6 7000     		.2byte	(.L359-.L350)/2
 5682 00f8 7400     		.2byte	(.L360-.L350)/2
 5683 00fa 7800     		.2byte	(.L361-.L350)/2
 5684 00fc 7C00     		.2byte	(.L362-.L350)/2
 5685 00fe 8000     		.2byte	(.L363-.L350)/2
 5686 0100 8400     		.2byte	(.L364-.L350)/2
 5687 0102 8800     		.2byte	(.L365-.L350)/2
 5688 0104 8C00     		.2byte	(.L366-.L350)/2
 5689 0106 9000     		.2byte	(.L367-.L350)/2
 5690 0108 9400     		.2byte	(.L368-.L350)/2
 5691 010a 9800     		.2byte	(.L369-.L350)/2
 5692 010c 9C00     		.2byte	(.L370-.L350)/2
 5693 010e A000     		.2byte	(.L371-.L350)/2
 5694 0110 A400     		.2byte	(.L372-.L350)/2
 5695 0112 A800     		.2byte	(.L373-.L350)/2
 5696 0114 AC00     		.2byte	(.L374-.L350)/2
 5697 0116 B000     		.2byte	(.L375-.L350)/2
 5698 0118 B400     		.2byte	(.L376-.L350)/2
 5699 011a B800     		.2byte	(.L377-.L350)/2
 5700 011c BC00     		.2byte	(.L378-.L350)/2
 5701 011e C000     		.2byte	(.L379-.L350)/2
 5702 0120 C400     		.2byte	(.L380-.L350)/2
 5703 0122 C800     		.2byte	(.L381-.L350)/2
 5704 0124 CC00     		.2byte	(.L382-.L350)/2
 5705 0126 D000     		.2byte	(.L383-.L350)/2
 5706 0128 D400     		.2byte	(.L384-.L350)/2
 5707 012a E400     		.2byte	(.L385-.L350)/2
 5708              		.p2align 1
 5709              	.L391:
 286:quantum/rgb_matrix.c **** 
 5710              		.loc 28 286 0
 5711 012c 0120     		movs	r0, #1
 5712 012e D3E7     		b	.L347
 5713              	.L349:
 5714              	.LVL506:
 5715              	.LBB361:
 5716              	.LBB362:
 224:quantum/rgb_matrix.c ****         return false;
 5717              		.loc 28 224 0
 5718 0130 90B1     		cbz	r0, .L348
 228:quantum/rgb_matrix.c ****     for (uint8_t i = led_min; i < led_max; i++) {
 5719              		.loc 28 228 0
 5720 0132 6F78     		ldrb	r7, [r5, #1]	@ zero_extendqisi2
 5721 0134 C7EB0717 		rsb	r7, r7, r7, lsl #4
 5722 0138 FFB2     		uxtb	r7, r7
 5723              	.LVL507:
 5724 013a 07F10F00 		add	r0, r7, #15
 5725 013e C4B2     		uxtb	r4, r0
 5726              	.LVL508:
 5727 0140 692C     		cmp	r4, #105
 5728 0142 A046     		mov	r8, r4
 5729 0144 28BF     		it	cs
 5730 0146 4FF06908 		movcs	r8, #105
 5731              	.LVL509:
 5732              	.L386:
 5733              	.LBB363:
 229:quantum/rgb_matrix.c ****         rgb_matrix_set_color(i, 0, 0, 0);
 5734              		.loc 28 229 0
 5735 014a FBB2     		uxtb	r3, r7
 5736 014c 9845     		cmp	r8, r3
 5737 014e 11D8     		bhi	.L387
 5738 0150 682C     		cmp	r4, #104
 5739 0152 8CBF     		ite	hi
 5740 0154 0020     		movhi	r0, #0
 5741 0156 0120     		movls	r0, #1
 5742              	.LVL510:
 5743              	.L348:
 5744              	.LBE363:
 5745              	.LBE362:
 5746              	.LBE361:
 328:quantum/rgb_matrix.c **** 
 5747              		.loc 28 328 0
 5748 0158 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 5749 015a 0133     		adds	r3, r3, #1
 5750 015c 6B70     		strb	r3, [r5, #1]
 331:quantum/rgb_matrix.c ****         rgb_task_state = FLUSHING;
 5751              		.loc 28 331 0
 5752 015e 0028     		cmp	r0, #0
 5753 0160 ACD1     		bne	.L340
 5754              	.LVL511:
 332:quantum/rgb_matrix.c ****         if (!rgb_effect_params.init && effect == RGB_MATRIX_NONE) {
 5755              		.loc 28 332 0
 5756 0162 0223     		movs	r3, #2
 5757 0164 2B70     		strb	r3, [r5]
 333:quantum/rgb_matrix.c ****             // We only need to flush once if we are RGB_MATRIX_NONE
 5758              		.loc 28 333 0
 5759 0166 EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 5760 0168 002B     		cmp	r3, #0
 5761 016a A7D1     		bne	.L340
 5762 016c 002E     		cmp	r6, #0
 5763 016e A5D1     		bne	.L340
 5764              	.LVL512:
 5765              	.L402:
 5766              	.LBE360:
 5767              	.LBE359:
 5768              	.LBB368:
 5769              	.LBB369:
 349:quantum/rgb_matrix.c **** }
 5770              		.loc 28 349 0
 5771 0170 0323     		movs	r3, #3
 5772 0172 A2E7     		b	.L401
 5773              	.LVL513:
 5774              	.L387:
 5775              	.LBE369:
 5776              	.LBE368:
 5777              	.LBB371:
 5778              	.LBB367:
 5779              	.LBB366:
 5780              	.LBB365:
 5781              	.LBB364:
 230:quantum/rgb_matrix.c ****     }
 5782              		.loc 28 230 0
 5783 0174 0023     		movs	r3, #0
 5784 0176 3846     		mov	r0, r7
 5785 0178 1A46     		mov	r2, r3
 5786 017a 1946     		mov	r1, r3
 5787 017c FFF7FEFF 		bl	rgb_matrix_set_color
 5788              	.LVL514:
 5789 0180 0137     		adds	r7, r7, #1
 5790              	.LVL515:
 5791 0182 E2E7     		b	.L386
 5792              	.LVL516:
 5793              	.L351:
 5794              	.LBE364:
 5795              	.LBE365:
 5796              	.LBE366:
   1:quantum/rgb_matrix_animations/solid_color_anim.h **** #ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5797              		.loc 35 1 0
 5798 0184 4848     		ldr	r0, .L403+20
 5799 0186 FFF7FEFF 		bl	SOLID_COLOR
 5800              	.LVL517:
 5801 018a E5E7     		b	.L348
 5802              	.LVL518:
 5803              	.L352:
   2:quantum/rgb_matrix_animations/alpha_mods_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5804              		.loc 36 2 0
 5805 018c 4648     		ldr	r0, .L403+20
 5806 018e FFF7FEFF 		bl	ALPHAS_MODS
 5807              	.LVL519:
 5808 0192 E1E7     		b	.L348
 5809              	.LVL520:
 5810              	.L353:
   2:quantum/rgb_matrix_animations/gradient_up_down_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5811              		.loc 37 2 0
 5812 0194 4448     		ldr	r0, .L403+20
 5813 0196 FFF7FEFF 		bl	GRADIENT_UP_DOWN
 5814              	.LVL521:
 5815 019a DDE7     		b	.L348
 5816              	.LVL522:
 5817              	.L354:
   2:quantum/rgb_matrix_animations/breathing_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5818              		.loc 38 2 0
 5819 019c 4248     		ldr	r0, .L403+20
 5820 019e FFF7FEFF 		bl	BREATHING
 5821              	.LVL523:
 5822 01a2 D9E7     		b	.L348
 5823              	.LVL524:
 5824              	.L355:
   2:quantum/rgb_matrix_animations/colorband_sat_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5825              		.loc 2 2 0
 5826 01a4 4048     		ldr	r0, .L403+20
 5827 01a6 FFF7FEFF 		bl	BAND_SAT
 5828              	.LVL525:
 5829 01aa D5E7     		b	.L348
 5830              	.LVL526:
 5831              	.L356:
   2:quantum/rgb_matrix_animations/colorband_val_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5832              		.loc 4 2 0
 5833 01ac 3E48     		ldr	r0, .L403+20
 5834 01ae FFF7FEFF 		bl	BAND_VAL
 5835              	.LVL527:
 5836 01b2 D1E7     		b	.L348
 5837              	.LVL528:
 5838              	.L357:
   2:quantum/rgb_matrix_animations/colorband_pinwheel_sat_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5839              		.loc 22 2 0
 5840 01b4 3C48     		ldr	r0, .L403+20
 5841 01b6 FFF7FEFF 		bl	BAND_PINWHEEL_SAT
 5842              	.LVL529:
 5843 01ba CDE7     		b	.L348
 5844              	.LVL530:
 5845              	.L358:
   2:quantum/rgb_matrix_animations/colorband_pinwheel_val_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5846              		.loc 23 2 0
 5847 01bc 3A48     		ldr	r0, .L403+20
 5848 01be FFF7FEFF 		bl	BAND_PINWHEEL_VAL
 5849              	.LVL531:
 5850 01c2 C9E7     		b	.L348
 5851              	.LVL532:
 5852              	.L359:
   2:quantum/rgb_matrix_animations/colorband_spiral_sat_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5853              		.loc 24 2 0
 5854 01c4 3848     		ldr	r0, .L403+20
 5855 01c6 FFF7FEFF 		bl	BAND_SPIRAL_SAT
 5856              	.LVL533:
 5857 01ca C5E7     		b	.L348
 5858              	.LVL534:
 5859              	.L360:
   2:quantum/rgb_matrix_animations/colorband_spiral_val_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5860              		.loc 25 2 0
 5861 01cc 3648     		ldr	r0, .L403+20
 5862 01ce FFF7FEFF 		bl	BAND_SPIRAL_VAL
 5863              	.LVL535:
 5864 01d2 C1E7     		b	.L348
 5865              	.LVL536:
 5866              	.L361:
   2:quantum/rgb_matrix_animations/cycle_all_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5867              		.loc 5 2 0
 5868 01d4 3448     		ldr	r0, .L403+20
 5869 01d6 FFF7FEFF 		bl	CYCLE_ALL
 5870              	.LVL537:
 5871 01da BDE7     		b	.L348
 5872              	.LVL538:
 5873              	.L362:
   2:quantum/rgb_matrix_animations/cycle_left_right_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5874              		.loc 6 2 0
 5875 01dc 3248     		ldr	r0, .L403+20
 5876 01de FFF7FEFF 		bl	CYCLE_LEFT_RIGHT
 5877              	.LVL539:
 5878 01e2 B9E7     		b	.L348
 5879              	.LVL540:
 5880              	.L363:
   2:quantum/rgb_matrix_animations/cycle_up_down_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5881              		.loc 7 2 0
 5882 01e4 3048     		ldr	r0, .L403+20
 5883 01e6 FFF7FEFF 		bl	CYCLE_UP_DOWN
 5884              	.LVL541:
 5885 01ea B5E7     		b	.L348
 5886              	.LVL542:
 5887              	.L364:
   2:quantum/rgb_matrix_animations/rainbow_moving_chevron_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5888              		.loc 8 2 0
 5889 01ec 2E48     		ldr	r0, .L403+20
 5890 01ee FFF7FEFF 		bl	RAINBOW_MOVING_CHEVRON
 5891              	.LVL543:
 5892 01f2 B1E7     		b	.L348
 5893              	.LVL544:
 5894              	.L365:
   2:quantum/rgb_matrix_animations/cycle_out_in_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5895              		.loc 10 2 0
 5896 01f4 2C48     		ldr	r0, .L403+20
 5897 01f6 FFF7FEFF 		bl	CYCLE_OUT_IN
 5898              	.LVL545:
 5899 01fa ADE7     		b	.L348
 5900              	.LVL546:
 5901              	.L366:
   2:quantum/rgb_matrix_animations/cycle_out_in_dual_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5902              		.loc 21 2 0
 5903 01fc 2A48     		ldr	r0, .L403+20
 5904 01fe FFF7FEFF 		bl	CYCLE_OUT_IN_DUAL
 5905              	.LVL547:
 5906 0202 A9E7     		b	.L348
 5907              	.LVL548:
 5908              	.L367:
   2:quantum/rgb_matrix_animations/cycle_pinwheel_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5909              		.loc 26 2 0
 5910 0204 2848     		ldr	r0, .L403+20
 5911 0206 FFF7FEFF 		bl	CYCLE_PINWHEEL
 5912              	.LVL549:
 5913 020a A5E7     		b	.L348
 5914              	.LVL550:
 5915              	.L368:
   2:quantum/rgb_matrix_animations/cycle_spiral_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5916              		.loc 27 2 0
 5917 020c 2648     		ldr	r0, .L403+20
 5918 020e FFF7FEFF 		bl	CYCLE_SPIRAL
 5919              	.LVL551:
 5920 0212 A1E7     		b	.L348
 5921              	.LVL552:
 5922              	.L369:
   2:quantum/rgb_matrix_animations/dual_beacon_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5923              		.loc 11 2 0
 5924 0214 2448     		ldr	r0, .L403+20
 5925 0216 FFF7FEFF 		bl	DUAL_BEACON
 5926              	.LVL553:
 5927 021a 9DE7     		b	.L348
 5928              	.LVL554:
 5929              	.L370:
   2:quantum/rgb_matrix_animations/rainbow_beacon_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5930              		.loc 12 2 0
 5931 021c 2248     		ldr	r0, .L403+20
 5932 021e FFF7FEFF 		bl	RAINBOW_BEACON
 5933              	.LVL555:
 5934 0222 99E7     		b	.L348
 5935              	.LVL556:
 5936              	.L371:
   2:quantum/rgb_matrix_animations/rainbow_pinwheels_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5937              		.loc 13 2 0
 5938 0224 2048     		ldr	r0, .L403+20
 5939 0226 FFF7FEFF 		bl	PINWHEELS
 5940              	.LVL557:
 5941 022a 95E7     		b	.L348
 5942              	.LVL558:
 5943              	.L372:
   2:quantum/rgb_matrix_animations/raindrops_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5944              		.loc 39 2 0
 5945 022c 1E48     		ldr	r0, .L403+20
 5946 022e FFF7FEFF 		bl	RAINDROPS
 5947              	.LVL559:
 5948 0232 91E7     		b	.L348
 5949              	.LVL560:
 5950              	.L373:
   2:quantum/rgb_matrix_animations/jellybean_raindrops_anim.h **** #    ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5951              		.loc 40 2 0
 5952 0234 1C48     		ldr	r0, .L403+20
 5953 0236 FFF7FEFF 		bl	JELLYBEAN_RAINDROPS
 5954              	.LVL561:
 5955 023a 8DE7     		b	.L348
 5956              	.LVL562:
 5957              	.L374:
   3:quantum/rgb_matrix_animations/solid_reactive_simple_anim.h **** #        ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5958              		.loc 14 3 0
 5959 023c 1A48     		ldr	r0, .L403+20
 5960 023e FFF7FEFF 		bl	SOLID_REACTIVE_SIMPLE
 5961              	.LVL563:
 5962 0242 89E7     		b	.L348
 5963              	.LVL564:
 5964              	.L375:
   3:quantum/rgb_matrix_animations/solid_reactive_anim.h **** #        ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS
 5965              		.loc 15 3 0
 5966 0244 1848     		ldr	r0, .L403+20
 5967 0246 FFF7FEFF 		bl	SOLID_REACTIVE
 5968              	.LVL565:
 5969 024a 85E7     		b	.L348
 5970              	.LVL566:
 5971              	.L376:
   5:quantum/rgb_matrix_animations/solid_reactive_wide.h **** #        endif
 5972              		.loc 16 5 0
 5973 024c 1648     		ldr	r0, .L403+20
 5974 024e FFF7FEFF 		bl	SOLID_REACTIVE_WIDE
 5975              	.LVL567:
 5976 0252 81E7     		b	.L348
 5977              	.LVL568:
 5978              	.L377:
   9:quantum/rgb_matrix_animations/solid_reactive_wide.h **** #        endif
 5979              		.loc 16 9 0
 5980 0254 1448     		ldr	r0, .L403+20
 5981 0256 FFF7FEFF 		bl	SOLID_REACTIVE_MULTIWIDE
 5982              	.LVL569:
 5983 025a 7DE7     		b	.L348
 5984              	.LVL570:
 5985              	.L378:
   5:quantum/rgb_matrix_animations/solid_reactive_cross.h **** #        endif
 5986              		.loc 17 5 0
 5987 025c 1248     		ldr	r0, .L403+20
 5988 025e FFF7FEFF 		bl	SOLID_REACTIVE_CROSS
 5989              	.LVL571:
 5990 0262 79E7     		b	.L348
 5991              	.LVL572:
 5992              	.L379:
   9:quantum/rgb_matrix_animations/solid_reactive_cross.h **** #        endif
 5993              		.loc 17 9 0
 5994 0264 1048     		ldr	r0, .L403+20
 5995 0266 FFF7FEFF 		bl	SOLID_REACTIVE_MULTICROSS
 5996              	.LVL573:
 5997 026a 75E7     		b	.L348
 5998              	.LVL574:
 5999              	.L380:
   5:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** #        endif
 6000              		.loc 18 5 0
 6001 026c 0E48     		ldr	r0, .L403+20
 6002 026e FFF7FEFF 		bl	SOLID_REACTIVE_NEXUS
 6003              	.LVL575:
 6004 0272 71E7     		b	.L348
 6005              	.LVL576:
 6006              	.L381:
   9:quantum/rgb_matrix_animations/solid_reactive_nexus.h **** #        endif
 6007              		.loc 18 9 0
 6008 0274 0C48     		ldr	r0, .L403+20
 6009 0276 FFF7FEFF 		bl	SOLID_REACTIVE_MULTINEXUS
 6010              	.LVL577:
 6011 027a 6DE7     		b	.L348
 6012              	.LVL578:
 6013              	.L382:
   5:quantum/rgb_matrix_animations/splash_anim.h **** #        endif
 6014              		.loc 19 5 0
 6015 027c 0A48     		ldr	r0, .L403+20
 6016 027e FFF7FEFF 		bl	SPLASH
 6017              	.LVL579:
 6018 0282 69E7     		b	.L348
 6019              	.LVL580:
 6020              	.L383:
   9:quantum/rgb_matrix_animations/splash_anim.h **** #        endif
 6021              		.loc 19 9 0
 6022 0284 0848     		ldr	r0, .L403+20
 6023 0286 FFF7FEFF 		bl	MULTISPLASH
 6024              	.LVL581:
 6025 028a 65E7     		b	.L348
 6026              	.LVL582:
 6027              	.L384:
   5:quantum/rgb_matrix_animations/solid_splash_anim.h **** #        endif
 6028              		.loc 20 5 0
 6029 028c 0648     		ldr	r0, .L403+20
 6030 028e FFF7FEFF 		bl	SOLID_SPLASH
 6031              	.LVL583:
 6032 0292 61E7     		b	.L348
 6033              	.L404:
 6034              		.align	2
 6035              	.L403:
 6036 0294 00000000 		.word	.LANCHOR1
 6037 0298 00000000 		.word	g_rgb_counters
 6038 029c 00000000 		.word	rgb_matrix_config
 6039 02a0 00000000 		.word	.LANCHOR2
 6040 02a4 00000000 		.word	g_last_hit_tracker
 6041 02a8 01000000 		.word	.LANCHOR2+1
 6042              	.LVL584:
 6043              	.L385:
   9:quantum/rgb_matrix_animations/solid_splash_anim.h **** #        endif
 6044              		.loc 20 9 0
 6045 02ac 0A48     		ldr	r0, .L405
 6046 02ae FFF7FEFF 		bl	SOLID_MULTISPLASH
 6047              	.LVL585:
 6048 02b2 51E7     		b	.L348
 6049              	.LVL586:
 6050              	.L392:
 285:quantum/rgb_matrix.c ****     rgb_effect_params.init = (effect != rgb_last_effect) || (rgb_matrix_config.enable != rgb_last_e
 6051              		.loc 28 285 0
 6052 02b4 0020     		movs	r0, #0
 6053 02b6 4FE7     		b	.L348
 6054              	.LVL587:
 6055              	.L344:
 6056              	.LBE367:
 6057              	.LBE371:
 6058              	.LBB372:
 6059              	.LBB370:
 343:quantum/rgb_matrix.c **** 
 6060              		.loc 28 343 0
 6061 02b8 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 342:quantum/rgb_matrix.c ****     rgb_last_enable = rgb_matrix_config.enable;
 6062              		.loc 28 342 0
 6063 02ba 2E71     		strb	r6, [r5, #4]
 343:quantum/rgb_matrix.c **** 
 6064              		.loc 28 343 0
 6065 02bc C3F30103 		ubfx	r3, r3, #0, #2
 6066 02c0 6B71     		strb	r3, [r5, #5]
 346:quantum/rgb_matrix.c **** 
 6067              		.loc 28 346 0
 6068 02c2 FFF7FEFF 		bl	rgb_matrix_update_pwm_buffers
 6069              	.LVL588:
 6070 02c6 53E7     		b	.L402
 6071              	.LVL589:
 6072              	.L345:
 6073              	.LBE370:
 6074              	.LBE372:
 6075              	.LBB373:
 6076              	.LBB358:
 267:quantum/rgb_matrix.c **** }
 6077              		.loc 28 267 0
 6078 02c8 1868     		ldr	r0, [r3]	@ unaligned
 6079 02ca FFF7FEFF 		bl	timer_elapsed32
 6080              	.LVL590:
 6081 02ce 0928     		cmp	r0, #9
 6082 02d0 7FF6F4AE 		bls	.L340
 6083 02d4 0023     		movs	r3, #0
 6084 02d6 F0E6     		b	.L401
 6085              	.L406:
 6086              		.align	2
 6087              	.L405:
 6088 02d8 01000000 		.word	.LANCHOR2+1
 6089              	.LBE358:
 6090              	.LBE373:
 6091              		.cfi_endproc
 6092              	.LFE164:
 6094              		.section	.text.rgb_matrix_init,"ax",%progbits
 6095              		.align	1
 6096              		.global	rgb_matrix_init
 6097              		.syntax unified
 6098              		.thumb
 6099              		.thumb_func
 6100              		.fpu fpv4-sp-d16
 6102              	rgb_matrix_init:
 6103              	.LFB168:
 386:quantum/rgb_matrix.c **** 
 387:quantum/rgb_matrix.c **** __attribute__((weak)) void rgb_matrix_indicators_user(void) {}
 388:quantum/rgb_matrix.c **** 
 389:quantum/rgb_matrix.c **** void rgb_matrix_init(void) {
 6104              		.loc 28 389 0
 6105              		.cfi_startproc
 6106              		@ args = 0, pretend = 0, frame = 0
 6107              		@ frame_needed = 0, uses_anonymous_args = 0
 6108 0000 08B5     		push	{r3, lr}
 6109              		.cfi_def_cfa_offset 8
 6110              		.cfi_offset 3, -8
 6111              		.cfi_offset 14, -4
 390:quantum/rgb_matrix.c ****     rgb_matrix_driver.init();
 6112              		.loc 28 390 0
 6113 0002 274B     		ldr	r3, .L410
 6114 0004 1B68     		ldr	r3, [r3]
 6115 0006 9847     		blx	r3
 6116              	.LVL591:
 391:quantum/rgb_matrix.c **** 
 392:quantum/rgb_matrix.c ****     // TODO: put the 1 second startup delay here?
 393:quantum/rgb_matrix.c **** 
 394:quantum/rgb_matrix.c **** #ifdef RGB_MATRIX_KEYREACTIVE_ENABLED
 395:quantum/rgb_matrix.c ****     g_last_hit_tracker.count = 0;
 6117              		.loc 28 395 0
 6118 0008 264A     		ldr	r2, .L410+4
 6119              	.LBB374:
 396:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 397:quantum/rgb_matrix.c ****         g_last_hit_tracker.tick[i] = UINT16_MAX;
 6120              		.loc 28 397 0
 6121 000a 4FF0FF33 		mov	r3, #-1
 6122              	.LBE374:
 395:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 6123              		.loc 28 395 0
 6124 000e 0021     		movs	r1, #0
 6125 0010 1170     		strb	r1, [r2]
 6126              	.LVL592:
 6127              	.LBB375:
 6128              		.loc 28 397 0
 6129 0012 5376     		strb	r3, [r2, #25]
 6130 0014 9376     		strb	r3, [r2, #26]
 6131              	.LVL593:
 6132 0016 D376     		strb	r3, [r2, #27]
 6133 0018 1377     		strb	r3, [r2, #28]
 6134              	.LVL594:
 6135 001a 5377     		strb	r3, [r2, #29]
 6136 001c 9377     		strb	r3, [r2, #30]
 6137              	.LVL595:
 6138 001e D377     		strb	r3, [r2, #31]
 6139 0020 82F82030 		strb	r3, [r2, #32]
 6140              	.LVL596:
 6141 0024 82F82130 		strb	r3, [r2, #33]
 6142 0028 82F82230 		strb	r3, [r2, #34]
 6143              	.LVL597:
 6144 002c 82F82330 		strb	r3, [r2, #35]
 6145 0030 82F82430 		strb	r3, [r2, #36]
 6146              	.LVL598:
 6147 0034 82F82530 		strb	r3, [r2, #37]
 6148 0038 82F82630 		strb	r3, [r2, #38]
 6149              	.LVL599:
 6150 003c 82F82730 		strb	r3, [r2, #39]
 6151 0040 82F82830 		strb	r3, [r2, #40]
 6152              	.LVL600:
 6153              	.LBE375:
 398:quantum/rgb_matrix.c ****     }
 399:quantum/rgb_matrix.c **** 
 400:quantum/rgb_matrix.c ****     last_hit_buffer.count = 0;
 6154              		.loc 28 400 0
 6155 0044 184A     		ldr	r2, .L410+8
 6156 0046 1170     		strb	r1, [r2]
 6157              	.LVL601:
 6158              	.LBB376:
 401:quantum/rgb_matrix.c ****     for (uint8_t i = 0; i < LED_HITS_TO_REMEMBER; ++i) {
 402:quantum/rgb_matrix.c ****         last_hit_buffer.tick[i] = UINT16_MAX;
 6159              		.loc 28 402 0
 6160 0048 5376     		strb	r3, [r2, #25]
 6161 004a 9376     		strb	r3, [r2, #26]
 6162              	.LVL602:
 6163 004c D376     		strb	r3, [r2, #27]
 6164 004e 1377     		strb	r3, [r2, #28]
 6165              	.LVL603:
 6166 0050 5377     		strb	r3, [r2, #29]
 6167 0052 9377     		strb	r3, [r2, #30]
 6168              	.LVL604:
 6169 0054 D377     		strb	r3, [r2, #31]
 6170 0056 82F82030 		strb	r3, [r2, #32]
 6171              	.LVL605:
 6172 005a 82F82130 		strb	r3, [r2, #33]
 6173 005e 82F82230 		strb	r3, [r2, #34]
 6174              	.LVL606:
 6175 0062 82F82330 		strb	r3, [r2, #35]
 6176 0066 82F82430 		strb	r3, [r2, #36]
 6177              	.LVL607:
 6178 006a 82F82530 		strb	r3, [r2, #37]
 6179 006e 82F82630 		strb	r3, [r2, #38]
 6180              	.LVL608:
 6181 0072 82F82730 		strb	r3, [r2, #39]
 6182 0076 82F82830 		strb	r3, [r2, #40]
 6183              	.LVL609:
 6184              	.LBE376:
 403:quantum/rgb_matrix.c ****     }
 404:quantum/rgb_matrix.c **** #endif  // RGB_MATRIX_KEYREACTIVE_ENABLED
 405:quantum/rgb_matrix.c **** 
 406:quantum/rgb_matrix.c ****     if (!eeconfig_is_enabled()) {
 6185              		.loc 28 406 0
 6186 007a FFF7FEFF 		bl	eeconfig_is_enabled
 6187              	.LVL610:
 6188 007e 18B9     		cbnz	r0, .L408
 407:quantum/rgb_matrix.c ****         dprintf("rgb_matrix_init_drivers eeconfig is not enabled.\n");
 408:quantum/rgb_matrix.c ****         eeconfig_init();
 6189              		.loc 28 408 0
 6190 0080 FFF7FEFF 		bl	eeconfig_init
 6191              	.LVL611:
 409:quantum/rgb_matrix.c ****         eeconfig_update_rgb_matrix_default();
 6192              		.loc 28 409 0
 6193 0084 FFF7FEFF 		bl	eeconfig_update_rgb_matrix_default
 6194              	.LVL612:
 6195              	.L408:
 410:quantum/rgb_matrix.c ****     }
 411:quantum/rgb_matrix.c **** 
 412:quantum/rgb_matrix.c ****     eeconfig_read_rgb_matrix();
 6196              		.loc 28 412 0
 6197 0088 FFF7FEFF 		bl	eeconfig_read_rgb_matrix
 6198              	.LVL613:
 413:quantum/rgb_matrix.c ****     if (!rgb_matrix_config.mode) {
 6199              		.loc 28 413 0
 6200 008c 074B     		ldr	r3, .L410+12
 6201 008e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6202 0090 13F0FC0F 		tst	r3, #252
 6203 0094 03D1     		bne	.L407
 414:quantum/rgb_matrix.c ****         dprintf("rgb_matrix_init_drivers rgb_matrix_config.mode = 0. Write default values to EEPROM
 415:quantum/rgb_matrix.c ****         eeconfig_update_rgb_matrix_default();
 416:quantum/rgb_matrix.c ****     }
 417:quantum/rgb_matrix.c ****     eeconfig_debug_rgb_matrix();  // display current eeprom values
 418:quantum/rgb_matrix.c **** }
 6204              		.loc 28 418 0
 6205 0096 BDE80840 		pop	{r3, lr}
 6206              		.cfi_remember_state
 6207              		.cfi_restore 14
 6208              		.cfi_restore 3
 6209              		.cfi_def_cfa_offset 0
 415:quantum/rgb_matrix.c ****     }
 6210              		.loc 28 415 0
 6211 009a FFF7FEBF 		b	eeconfig_update_rgb_matrix_default
 6212              	.LVL614:
 6213              	.L407:
 6214              		.cfi_restore_state
 6215              		.loc 28 418 0
 6216 009e 08BD     		pop	{r3, pc}
 6217              	.L411:
 6218              		.align	2
 6219              	.L410:
 6220 00a0 00000000 		.word	rgb_matrix_driver
 6221 00a4 00000000 		.word	g_last_hit_tracker
 6222 00a8 00000000 		.word	.LANCHOR1
 6223 00ac 00000000 		.word	rgb_matrix_config
 6224              		.cfi_endproc
 6225              	.LFE168:
 6227              		.section	.text.rgb_matrix_set_suspend_state,"ax",%progbits
 6228              		.align	1
 6229              		.global	rgb_matrix_set_suspend_state
 6230              		.syntax unified
 6231              		.thumb
 6232              		.thumb_func
 6233              		.fpu fpv4-sp-d16
 6235              	rgb_matrix_set_suspend_state:
 6236              	.LFB169:
 419:quantum/rgb_matrix.c **** 
 420:quantum/rgb_matrix.c **** void rgb_matrix_set_suspend_state(bool state) { g_suspend_state = state; }
 6237              		.loc 28 420 0
 6238              		.cfi_startproc
 6239              		@ args = 0, pretend = 0, frame = 0
 6240              		@ frame_needed = 0, uses_anonymous_args = 0
 6241              		@ link register save eliminated.
 6242              	.LVL615:
 6243              		.loc 28 420 0
 6244 0000 014B     		ldr	r3, .L413
 6245 0002 83F83000 		strb	r0, [r3, #48]
 6246 0006 7047     		bx	lr
 6247              	.L414:
 6248              		.align	2
 6249              	.L413:
 6250 0008 00000000 		.word	.LANCHOR1
 6251              		.cfi_endproc
 6252              	.LFE169:
 6254              		.section	.text.rgb_matrix_toggle,"ax",%progbits
 6255              		.align	1
 6256              		.global	rgb_matrix_toggle
 6257              		.syntax unified
 6258              		.thumb
 6259              		.thumb_func
 6260              		.fpu fpv4-sp-d16
 6262              	rgb_matrix_toggle:
 6263              	.LFB170:
 421:quantum/rgb_matrix.c **** 
 422:quantum/rgb_matrix.c **** void rgb_matrix_toggle(void) {
 6264              		.loc 28 422 0
 6265              		.cfi_startproc
 6266              		@ args = 0, pretend = 0, frame = 0
 6267              		@ frame_needed = 0, uses_anonymous_args = 0
 6268              		@ link register save eliminated.
 423:quantum/rgb_matrix.c ****     rgb_matrix_config.enable ^= 1;
 6269              		.loc 28 423 0
 6270 0000 044A     		ldr	r2, .L416
 6271 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 6272 0004 83F00103 		eor	r3, r3, #1
 6273 0008 1370     		strb	r3, [r2]
 424:quantum/rgb_matrix.c ****     rgb_task_state = STARTING;
 6274              		.loc 28 424 0
 6275 000a 034B     		ldr	r3, .L416+4
 6276 000c 0022     		movs	r2, #0
 6277 000e 1A70     		strb	r2, [r3]
 425:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 6278              		.loc 28 425 0
 6279 0010 FFF7FEBF 		b	eeconfig_update_rgb_matrix
 6280              	.LVL616:
 6281              	.L417:
 6282              		.align	2
 6283              	.L416:
 6284 0014 00000000 		.word	rgb_matrix_config
 6285 0018 00000000 		.word	.LANCHOR2
 6286              		.cfi_endproc
 6287              	.LFE170:
 6289              		.section	.text.rgb_matrix_enable_noeeprom,"ax",%progbits
 6290              		.align	1
 6291              		.global	rgb_matrix_enable_noeeprom
 6292              		.syntax unified
 6293              		.thumb
 6294              		.thumb_func
 6295              		.fpu fpv4-sp-d16
 6297              	rgb_matrix_enable_noeeprom:
 6298              	.LFB172:
 426:quantum/rgb_matrix.c **** }
 427:quantum/rgb_matrix.c **** 
 428:quantum/rgb_matrix.c **** void rgb_matrix_enable(void) {
 429:quantum/rgb_matrix.c ****     rgb_matrix_enable_noeeprom();
 430:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 431:quantum/rgb_matrix.c **** }
 432:quantum/rgb_matrix.c **** 
 433:quantum/rgb_matrix.c **** void rgb_matrix_enable_noeeprom(void) {
 6299              		.loc 28 433 0
 6300              		.cfi_startproc
 6301              		@ args = 0, pretend = 0, frame = 0
 6302              		@ frame_needed = 0, uses_anonymous_args = 0
 6303              		@ link register save eliminated.
 434:quantum/rgb_matrix.c ****     if (!rgb_matrix_config.enable) rgb_task_state = STARTING;
 6304              		.loc 28 434 0
 6305 0000 064B     		ldr	r3, .L420
 6306 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6307 0004 12F00302 		ands	r2, r2, #3
 6308 0008 04BF     		itt	eq
 6309 000a 0549     		ldreq	r1, .L420+4
 6310 000c 0A70     		strbeq	r2, [r1]
 435:quantum/rgb_matrix.c ****     rgb_matrix_config.enable = 1;
 6311              		.loc 28 435 0
 6312 000e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6313 0010 0121     		movs	r1, #1
 6314 0012 61F30102 		bfi	r2, r1, #0, #2
 6315 0016 1A70     		strb	r2, [r3]
 436:quantum/rgb_matrix.c **** }
 6316              		.loc 28 436 0
 6317 0018 7047     		bx	lr
 6318              	.L421:
 6319 001a 00BF     		.align	2
 6320              	.L420:
 6321 001c 00000000 		.word	rgb_matrix_config
 6322 0020 00000000 		.word	.LANCHOR2
 6323              		.cfi_endproc
 6324              	.LFE172:
 6326              		.section	.text.rgb_matrix_enable,"ax",%progbits
 6327              		.align	1
 6328              		.global	rgb_matrix_enable
 6329              		.syntax unified
 6330              		.thumb
 6331              		.thumb_func
 6332              		.fpu fpv4-sp-d16
 6334              	rgb_matrix_enable:
 6335              	.LFB171:
 428:quantum/rgb_matrix.c ****     rgb_matrix_enable_noeeprom();
 6336              		.loc 28 428 0
 6337              		.cfi_startproc
 6338              		@ args = 0, pretend = 0, frame = 0
 6339              		@ frame_needed = 0, uses_anonymous_args = 0
 6340 0000 08B5     		push	{r3, lr}
 6341              		.cfi_def_cfa_offset 8
 6342              		.cfi_offset 3, -8
 6343              		.cfi_offset 14, -4
 429:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 6344              		.loc 28 429 0
 6345 0002 FFF7FEFF 		bl	rgb_matrix_enable_noeeprom
 6346              	.LVL617:
 431:quantum/rgb_matrix.c **** 
 6347              		.loc 28 431 0
 6348 0006 BDE80840 		pop	{r3, lr}
 6349              		.cfi_restore 14
 6350              		.cfi_restore 3
 6351              		.cfi_def_cfa_offset 0
 430:quantum/rgb_matrix.c **** }
 6352              		.loc 28 430 0
 6353 000a FFF7FEBF 		b	eeconfig_update_rgb_matrix
 6354              	.LVL618:
 6355              		.cfi_endproc
 6356              	.LFE171:
 6358              		.section	.text.rgb_matrix_disable_noeeprom,"ax",%progbits
 6359              		.align	1
 6360              		.global	rgb_matrix_disable_noeeprom
 6361              		.syntax unified
 6362              		.thumb
 6363              		.thumb_func
 6364              		.fpu fpv4-sp-d16
 6366              	rgb_matrix_disable_noeeprom:
 6367              	.LFB174:
 437:quantum/rgb_matrix.c **** 
 438:quantum/rgb_matrix.c **** void rgb_matrix_disable(void) {
 439:quantum/rgb_matrix.c ****     rgb_matrix_disable_noeeprom();
 440:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 441:quantum/rgb_matrix.c **** }
 442:quantum/rgb_matrix.c **** 
 443:quantum/rgb_matrix.c **** void rgb_matrix_disable_noeeprom(void) {
 6368              		.loc 28 443 0
 6369              		.cfi_startproc
 6370              		@ args = 0, pretend = 0, frame = 0
 6371              		@ frame_needed = 0, uses_anonymous_args = 0
 6372              		@ link register save eliminated.
 444:quantum/rgb_matrix.c ****     if (rgb_matrix_config.enable) rgb_task_state = STARTING;
 6373              		.loc 28 444 0
 6374 0000 054B     		ldr	r3, .L428
 6375 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6376 0004 9207     		lsls	r2, r2, #30
 6377 0006 1EBF     		ittt	ne
 6378 0008 044A     		ldrne	r2, .L428+4
 6379 000a 0021     		movne	r1, #0
 6380 000c 1170     		strbne	r1, [r2]
 445:quantum/rgb_matrix.c ****     rgb_matrix_config.enable = 0;
 6381              		.loc 28 445 0
 6382 000e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6383 0010 6FF30102 		bfc	r2, #0, #2
 6384 0014 1A70     		strb	r2, [r3]
 446:quantum/rgb_matrix.c **** }
 6385              		.loc 28 446 0
 6386 0016 7047     		bx	lr
 6387              	.L429:
 6388              		.align	2
 6389              	.L428:
 6390 0018 00000000 		.word	rgb_matrix_config
 6391 001c 00000000 		.word	.LANCHOR2
 6392              		.cfi_endproc
 6393              	.LFE174:
 6395              		.section	.text.rgb_matrix_disable,"ax",%progbits
 6396              		.align	1
 6397              		.global	rgb_matrix_disable
 6398              		.syntax unified
 6399              		.thumb
 6400              		.thumb_func
 6401              		.fpu fpv4-sp-d16
 6403              	rgb_matrix_disable:
 6404              	.LFB173:
 438:quantum/rgb_matrix.c ****     rgb_matrix_disable_noeeprom();
 6405              		.loc 28 438 0
 6406              		.cfi_startproc
 6407              		@ args = 0, pretend = 0, frame = 0
 6408              		@ frame_needed = 0, uses_anonymous_args = 0
 6409 0000 08B5     		push	{r3, lr}
 6410              		.cfi_def_cfa_offset 8
 6411              		.cfi_offset 3, -8
 6412              		.cfi_offset 14, -4
 439:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 6413              		.loc 28 439 0
 6414 0002 FFF7FEFF 		bl	rgb_matrix_disable_noeeprom
 6415              	.LVL619:
 441:quantum/rgb_matrix.c **** 
 6416              		.loc 28 441 0
 6417 0006 BDE80840 		pop	{r3, lr}
 6418              		.cfi_restore 14
 6419              		.cfi_restore 3
 6420              		.cfi_def_cfa_offset 0
 440:quantum/rgb_matrix.c **** }
 6421              		.loc 28 440 0
 6422 000a FFF7FEBF 		b	eeconfig_update_rgb_matrix
 6423              	.LVL620:
 6424              		.cfi_endproc
 6425              	.LFE173:
 6427              		.section	.text.rgb_matrix_step,"ax",%progbits
 6428              		.align	1
 6429              		.global	rgb_matrix_step
 6430              		.syntax unified
 6431              		.thumb
 6432              		.thumb_func
 6433              		.fpu fpv4-sp-d16
 6435              	rgb_matrix_step:
 6436              	.LFB175:
 447:quantum/rgb_matrix.c **** 
 448:quantum/rgb_matrix.c **** void rgb_matrix_step(void) {
 6437              		.loc 28 448 0
 6438              		.cfi_startproc
 6439              		@ args = 0, pretend = 0, frame = 0
 6440              		@ frame_needed = 0, uses_anonymous_args = 0
 6441              		@ link register save eliminated.
 449:quantum/rgb_matrix.c ****     rgb_matrix_config.mode++;
 6442              		.loc 28 449 0
 6443 0000 0849     		ldr	r1, .L435
 6444 0002 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 6445 0004 C3F38502 		ubfx	r2, r3, #2, #6
 6446 0008 0132     		adds	r2, r2, #1
 6447 000a 02F03F02 		and	r2, r2, #63
 450:quantum/rgb_matrix.c ****     if (rgb_matrix_config.mode >= RGB_MATRIX_EFFECT_MAX) rgb_matrix_config.mode = 1;
 6448              		.loc 28 450 0
 6449 000e 232A     		cmp	r2, #35
 6450 0010 88BF     		it	hi
 6451 0012 0122     		movhi	r2, #1
 6452 0014 62F38703 		bfi	r3, r2, #2, #6
 6453 0018 0B70     		strb	r3, [r1]
 451:quantum/rgb_matrix.c ****     rgb_task_state = STARTING;
 6454              		.loc 28 451 0
 6455 001a 034B     		ldr	r3, .L435+4
 6456 001c 0022     		movs	r2, #0
 6457 001e 1A70     		strb	r2, [r3]
 452:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 6458              		.loc 28 452 0
 6459 0020 FFF7FEBF 		b	eeconfig_update_rgb_matrix
 6460              	.LVL621:
 6461              	.L436:
 6462              		.align	2
 6463              	.L435:
 6464 0024 00000000 		.word	rgb_matrix_config
 6465 0028 00000000 		.word	.LANCHOR2
 6466              		.cfi_endproc
 6467              	.LFE175:
 6469              		.section	.text.rgb_matrix_step_reverse,"ax",%progbits
 6470              		.align	1
 6471              		.global	rgb_matrix_step_reverse
 6472              		.syntax unified
 6473              		.thumb
 6474              		.thumb_func
 6475              		.fpu fpv4-sp-d16
 6477              	rgb_matrix_step_reverse:
 6478              	.LFB176:
 453:quantum/rgb_matrix.c **** }
 454:quantum/rgb_matrix.c **** 
 455:quantum/rgb_matrix.c **** void rgb_matrix_step_reverse(void) {
 6479              		.loc 28 455 0
 6480              		.cfi_startproc
 6481              		@ args = 0, pretend = 0, frame = 0
 6482              		@ frame_needed = 0, uses_anonymous_args = 0
 6483              		@ link register save eliminated.
 456:quantum/rgb_matrix.c ****     rgb_matrix_config.mode--;
 6484              		.loc 28 456 0
 6485 0000 084A     		ldr	r2, .L439
 6486 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 6487 0004 FC33     		adds	r3, r3, #252
 6488 0006 1370     		strb	r3, [r2]
 457:quantum/rgb_matrix.c ****     if (rgb_matrix_config.mode < 1) rgb_matrix_config.mode = RGB_MATRIX_EFFECT_MAX - 1;
 6489              		.loc 28 457 0
 6490 0008 DBB2     		uxtb	r3, r3
 6491 000a 13F0FC0F 		tst	r3, #252
 6492 000e 02BF     		ittt	eq
 6493 0010 2321     		moveq	r1, #35
 6494 0012 61F38703 		bfieq	r3, r1, #2, #6
 6495 0016 1370     		strbeq	r3, [r2]
 458:quantum/rgb_matrix.c ****     rgb_task_state = STARTING;
 6496              		.loc 28 458 0
 6497 0018 034B     		ldr	r3, .L439+4
 6498 001a 0022     		movs	r2, #0
 6499 001c 1A70     		strb	r2, [r3]
 459:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 6500              		.loc 28 459 0
 6501 001e FFF7FEBF 		b	eeconfig_update_rgb_matrix
 6502              	.LVL622:
 6503              	.L440:
 6504 0022 00BF     		.align	2
 6505              	.L439:
 6506 0024 00000000 		.word	rgb_matrix_config
 6507 0028 00000000 		.word	.LANCHOR2
 6508              		.cfi_endproc
 6509              	.LFE176:
 6511              		.section	.text.rgb_matrix_increase_hue,"ax",%progbits
 6512              		.align	1
 6513              		.global	rgb_matrix_increase_hue
 6514              		.syntax unified
 6515              		.thumb
 6516              		.thumb_func
 6517              		.fpu fpv4-sp-d16
 6519              	rgb_matrix_increase_hue:
 6520              	.LFB177:
 460:quantum/rgb_matrix.c **** }
 461:quantum/rgb_matrix.c **** 
 462:quantum/rgb_matrix.c **** void rgb_matrix_increase_hue(void) {
 6521              		.loc 28 462 0
 6522              		.cfi_startproc
 6523              		@ args = 0, pretend = 0, frame = 0
 6524              		@ frame_needed = 0, uses_anonymous_args = 0
 6525              		@ link register save eliminated.
 463:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.h += RGB_MATRIX_HUE_STEP;
 6526              		.loc 28 463 0
 6527 0000 024A     		ldr	r2, .L442
 6528 0002 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 6529 0004 0833     		adds	r3, r3, #8
 6530 0006 5370     		strb	r3, [r2, #1]
 464:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 6531              		.loc 28 464 0
 6532 0008 FFF7FEBF 		b	eeconfig_update_rgb_matrix
 6533              	.LVL623:
 6534              	.L443:
 6535              		.align	2
 6536              	.L442:
 6537 000c 00000000 		.word	rgb_matrix_config
 6538              		.cfi_endproc
 6539              	.LFE177:
 6541              		.section	.text.rgb_matrix_decrease_hue,"ax",%progbits
 6542              		.align	1
 6543              		.global	rgb_matrix_decrease_hue
 6544              		.syntax unified
 6545              		.thumb
 6546              		.thumb_func
 6547              		.fpu fpv4-sp-d16
 6549              	rgb_matrix_decrease_hue:
 6550              	.LFB178:
 465:quantum/rgb_matrix.c **** }
 466:quantum/rgb_matrix.c **** 
 467:quantum/rgb_matrix.c **** void rgb_matrix_decrease_hue(void) {
 6551              		.loc 28 467 0
 6552              		.cfi_startproc
 6553              		@ args = 0, pretend = 0, frame = 0
 6554              		@ frame_needed = 0, uses_anonymous_args = 0
 6555              		@ link register save eliminated.
 468:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.h -= RGB_MATRIX_HUE_STEP;
 6556              		.loc 28 468 0
 6557 0000 024A     		ldr	r2, .L445
 6558 0002 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 6559 0004 083B     		subs	r3, r3, #8
 6560 0006 5370     		strb	r3, [r2, #1]
 469:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 6561              		.loc 28 469 0
 6562 0008 FFF7FEBF 		b	eeconfig_update_rgb_matrix
 6563              	.LVL624:
 6564              	.L446:
 6565              		.align	2
 6566              	.L445:
 6567 000c 00000000 		.word	rgb_matrix_config
 6568              		.cfi_endproc
 6569              	.LFE178:
 6571              		.section	.text.rgb_matrix_increase_sat,"ax",%progbits
 6572              		.align	1
 6573              		.global	rgb_matrix_increase_sat
 6574              		.syntax unified
 6575              		.thumb
 6576              		.thumb_func
 6577              		.fpu fpv4-sp-d16
 6579              	rgb_matrix_increase_sat:
 6580              	.LFB179:
 470:quantum/rgb_matrix.c **** }
 471:quantum/rgb_matrix.c **** 
 472:quantum/rgb_matrix.c **** void rgb_matrix_increase_sat(void) {
 6581              		.loc 28 472 0
 6582              		.cfi_startproc
 6583              		@ args = 0, pretend = 0, frame = 0
 6584              		@ frame_needed = 0, uses_anonymous_args = 0
 6585              		@ link register save eliminated.
 6586              	.LVL625:
 473:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.s = qadd8(rgb_matrix_config.hsv.s, RGB_MATRIX_SAT_STEP);
 6587              		.loc 28 473 0
 6588 0000 044A     		ldr	r2, .L448
 6589              	.LBB377:
 6590              	.LBB378:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 6591              		.loc 9 26 0
 6592 0002 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 6593 0004 1033     		adds	r3, r3, #16
 6594              	.LVL626:
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 6595              		.loc 9 28 0
 6596 0006 FF2B     		cmp	r3, #255
 6597 0008 28BF     		it	cs
 6598 000a FF23     		movcs	r3, #255
 6599 000c 9370     		strb	r3, [r2, #2]
 6600              	.LBE378:
 6601              	.LBE377:
 474:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 6602              		.loc 28 474 0
 6603 000e FFF7FEBF 		b	eeconfig_update_rgb_matrix
 6604              	.LVL627:
 6605              	.L449:
 6606 0012 00BF     		.align	2
 6607              	.L448:
 6608 0014 00000000 		.word	rgb_matrix_config
 6609              		.cfi_endproc
 6610              	.LFE179:
 6612              		.section	.text.rgb_matrix_decrease_sat,"ax",%progbits
 6613              		.align	1
 6614              		.global	rgb_matrix_decrease_sat
 6615              		.syntax unified
 6616              		.thumb
 6617              		.thumb_func
 6618              		.fpu fpv4-sp-d16
 6620              	rgb_matrix_decrease_sat:
 6621              	.LFB180:
 475:quantum/rgb_matrix.c **** }
 476:quantum/rgb_matrix.c **** 
 477:quantum/rgb_matrix.c **** void rgb_matrix_decrease_sat(void) {
 6622              		.loc 28 477 0
 6623              		.cfi_startproc
 6624              		@ args = 0, pretend = 0, frame = 0
 6625              		@ frame_needed = 0, uses_anonymous_args = 0
 6626              		@ link register save eliminated.
 6627              	.LVL628:
 478:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.s = qsub8(rgb_matrix_config.hsv.s, RGB_MATRIX_SAT_STEP);
 6628              		.loc 28 478 0
 6629 0000 034A     		ldr	r2, .L451
 6630              	.LBB379:
 6631              	.LBB380:
  91:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
 6632              		.loc 9 91 0
 6633 0002 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 6634 0004 103B     		subs	r3, r3, #16
  93:./lib/lib8tion/math8.h **** #elif QSUB8_AVRASM == 1
 6635              		.loc 9 93 0
 6636 0006 23EAE373 		bic	r3, r3, r3, asr #31
 6637 000a 9370     		strb	r3, [r2, #2]
 6638              	.LBE380:
 6639              	.LBE379:
 479:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 6640              		.loc 28 479 0
 6641 000c FFF7FEBF 		b	eeconfig_update_rgb_matrix
 6642              	.LVL629:
 6643              	.L452:
 6644              		.align	2
 6645              	.L451:
 6646 0010 00000000 		.word	rgb_matrix_config
 6647              		.cfi_endproc
 6648              	.LFE180:
 6650              		.section	.text.rgb_matrix_increase_val,"ax",%progbits
 6651              		.align	1
 6652              		.global	rgb_matrix_increase_val
 6653              		.syntax unified
 6654              		.thumb
 6655              		.thumb_func
 6656              		.fpu fpv4-sp-d16
 6658              	rgb_matrix_increase_val:
 6659              	.LFB181:
 480:quantum/rgb_matrix.c **** }
 481:quantum/rgb_matrix.c **** 
 482:quantum/rgb_matrix.c **** void rgb_matrix_increase_val(void) {
 6660              		.loc 28 482 0
 6661              		.cfi_startproc
 6662              		@ args = 0, pretend = 0, frame = 0
 6663              		@ frame_needed = 0, uses_anonymous_args = 0
 6664              		@ link register save eliminated.
 6665              	.LVL630:
 483:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.v = qadd8(rgb_matrix_config.hsv.v, RGB_MATRIX_VAL_STEP);
 6666              		.loc 28 483 0
 6667 0000 044A     		ldr	r2, .L454
 6668              	.LBB381:
 6669              	.LBB382:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 6670              		.loc 9 26 0
 6671 0002 D378     		ldrb	r3, [r2, #3]	@ zero_extendqisi2
 6672 0004 1033     		adds	r3, r3, #16
 6673              	.LVL631:
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 6674              		.loc 9 28 0
 6675 0006 FF2B     		cmp	r3, #255
 6676 0008 28BF     		it	cs
 6677 000a FF23     		movcs	r3, #255
 6678 000c D370     		strb	r3, [r2, #3]
 6679              	.LBE382:
 6680              	.LBE381:
 484:quantum/rgb_matrix.c ****     if (rgb_matrix_config.hsv.v > RGB_MATRIX_MAXIMUM_BRIGHTNESS) rgb_matrix_config.hsv.v = RGB_MATR
 485:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 6681              		.loc 28 485 0
 6682 000e FFF7FEBF 		b	eeconfig_update_rgb_matrix
 6683              	.LVL632:
 6684              	.L455:
 6685 0012 00BF     		.align	2
 6686              	.L454:
 6687 0014 00000000 		.word	rgb_matrix_config
 6688              		.cfi_endproc
 6689              	.LFE181:
 6691              		.section	.text.rgb_matrix_decrease_val,"ax",%progbits
 6692              		.align	1
 6693              		.global	rgb_matrix_decrease_val
 6694              		.syntax unified
 6695              		.thumb
 6696              		.thumb_func
 6697              		.fpu fpv4-sp-d16
 6699              	rgb_matrix_decrease_val:
 6700              	.LFB182:
 486:quantum/rgb_matrix.c **** }
 487:quantum/rgb_matrix.c **** 
 488:quantum/rgb_matrix.c **** void rgb_matrix_decrease_val(void) {
 6701              		.loc 28 488 0
 6702              		.cfi_startproc
 6703              		@ args = 0, pretend = 0, frame = 0
 6704              		@ frame_needed = 0, uses_anonymous_args = 0
 6705              		@ link register save eliminated.
 6706              	.LVL633:
 489:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.v = qsub8(rgb_matrix_config.hsv.v, RGB_MATRIX_VAL_STEP);
 6707              		.loc 28 489 0
 6708 0000 034A     		ldr	r2, .L457
 6709              	.LBB383:
 6710              	.LBB384:
  91:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
 6711              		.loc 9 91 0
 6712 0002 D378     		ldrb	r3, [r2, #3]	@ zero_extendqisi2
 6713 0004 103B     		subs	r3, r3, #16
  93:./lib/lib8tion/math8.h **** #elif QSUB8_AVRASM == 1
 6714              		.loc 9 93 0
 6715 0006 23EAE373 		bic	r3, r3, r3, asr #31
 6716 000a D370     		strb	r3, [r2, #3]
 6717              	.LBE384:
 6718              	.LBE383:
 490:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 6719              		.loc 28 490 0
 6720 000c FFF7FEBF 		b	eeconfig_update_rgb_matrix
 6721              	.LVL634:
 6722              	.L458:
 6723              		.align	2
 6724              	.L457:
 6725 0010 00000000 		.word	rgb_matrix_config
 6726              		.cfi_endproc
 6727              	.LFE182:
 6729              		.section	.text.rgb_matrix_increase_speed,"ax",%progbits
 6730              		.align	1
 6731              		.global	rgb_matrix_increase_speed
 6732              		.syntax unified
 6733              		.thumb
 6734              		.thumb_func
 6735              		.fpu fpv4-sp-d16
 6737              	rgb_matrix_increase_speed:
 6738              	.LFB183:
 491:quantum/rgb_matrix.c **** }
 492:quantum/rgb_matrix.c **** 
 493:quantum/rgb_matrix.c **** void rgb_matrix_increase_speed(void) {
 6739              		.loc 28 493 0
 6740              		.cfi_startproc
 6741              		@ args = 0, pretend = 0, frame = 0
 6742              		@ frame_needed = 0, uses_anonymous_args = 0
 6743              		@ link register save eliminated.
 6744              	.LVL635:
 494:quantum/rgb_matrix.c ****     rgb_matrix_config.speed = qadd8(rgb_matrix_config.speed, RGB_MATRIX_SPD_STEP);
 6745              		.loc 28 494 0
 6746 0000 044A     		ldr	r2, .L460
 6747              	.LBB385:
 6748              	.LBB386:
  26:./lib/lib8tion/math8.h ****     if (t > 255) t = 255;
 6749              		.loc 9 26 0
 6750 0002 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 6751 0004 1033     		adds	r3, r3, #16
 6752              	.LVL636:
  28:./lib/lib8tion/math8.h **** #elif QADD8_AVRASM == 1
 6753              		.loc 9 28 0
 6754 0006 FF2B     		cmp	r3, #255
 6755 0008 28BF     		it	cs
 6756 000a FF23     		movcs	r3, #255
 6757 000c 1371     		strb	r3, [r2, #4]
 6758              	.LBE386:
 6759              	.LBE385:
 495:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 6760              		.loc 28 495 0
 6761 000e FFF7FEBF 		b	eeconfig_update_rgb_matrix
 6762              	.LVL637:
 6763              	.L461:
 6764 0012 00BF     		.align	2
 6765              	.L460:
 6766 0014 00000000 		.word	rgb_matrix_config
 6767              		.cfi_endproc
 6768              	.LFE183:
 6770              		.section	.text.rgb_matrix_decrease_speed,"ax",%progbits
 6771              		.align	1
 6772              		.global	rgb_matrix_decrease_speed
 6773              		.syntax unified
 6774              		.thumb
 6775              		.thumb_func
 6776              		.fpu fpv4-sp-d16
 6778              	rgb_matrix_decrease_speed:
 6779              	.LFB184:
 496:quantum/rgb_matrix.c **** }
 497:quantum/rgb_matrix.c **** 
 498:quantum/rgb_matrix.c **** void rgb_matrix_decrease_speed(void) {
 6780              		.loc 28 498 0
 6781              		.cfi_startproc
 6782              		@ args = 0, pretend = 0, frame = 0
 6783              		@ frame_needed = 0, uses_anonymous_args = 0
 6784              		@ link register save eliminated.
 6785              	.LVL638:
 499:quantum/rgb_matrix.c ****     rgb_matrix_config.speed = qsub8(rgb_matrix_config.speed, RGB_MATRIX_SPD_STEP);
 6786              		.loc 28 499 0
 6787 0000 034A     		ldr	r2, .L463
 6788              	.LBB387:
 6789              	.LBB388:
  91:./lib/lib8tion/math8.h ****     if (t < 0) t = 0;
 6790              		.loc 9 91 0
 6791 0002 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 6792 0004 103B     		subs	r3, r3, #16
  93:./lib/lib8tion/math8.h **** #elif QSUB8_AVRASM == 1
 6793              		.loc 9 93 0
 6794 0006 23EAE373 		bic	r3, r3, r3, asr #31
 6795 000a 1371     		strb	r3, [r2, #4]
 6796              	.LBE388:
 6797              	.LBE387:
 500:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 6798              		.loc 28 500 0
 6799 000c FFF7FEBF 		b	eeconfig_update_rgb_matrix
 6800              	.LVL639:
 6801              	.L464:
 6802              		.align	2
 6803              	.L463:
 6804 0010 00000000 		.word	rgb_matrix_config
 6805              		.cfi_endproc
 6806              	.LFE184:
 6808              		.section	.text.rgb_matrix_get_flags,"ax",%progbits
 6809              		.align	1
 6810              		.global	rgb_matrix_get_flags
 6811              		.syntax unified
 6812              		.thumb
 6813              		.thumb_func
 6814              		.fpu fpv4-sp-d16
 6816              	rgb_matrix_get_flags:
 6817              	.LFB185:
 501:quantum/rgb_matrix.c **** }
 502:quantum/rgb_matrix.c **** 
 503:quantum/rgb_matrix.c **** led_flags_t rgb_matrix_get_flags(void) { return rgb_effect_params.flags; }
 6818              		.loc 28 503 0
 6819              		.cfi_startproc
 6820              		@ args = 0, pretend = 0, frame = 0
 6821              		@ frame_needed = 0, uses_anonymous_args = 0
 6822              		@ link register save eliminated.
 6823              		.loc 28 503 0
 6824 0000 014B     		ldr	r3, .L466
 6825 0002 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 6826 0004 7047     		bx	lr
 6827              	.L467:
 6828 0006 00BF     		.align	2
 6829              	.L466:
 6830 0008 00000000 		.word	.LANCHOR2
 6831              		.cfi_endproc
 6832              	.LFE185:
 6834              		.section	.text.rgb_matrix_set_flags,"ax",%progbits
 6835              		.align	1
 6836              		.global	rgb_matrix_set_flags
 6837              		.syntax unified
 6838              		.thumb
 6839              		.thumb_func
 6840              		.fpu fpv4-sp-d16
 6842              	rgb_matrix_set_flags:
 6843              	.LFB186:
 504:quantum/rgb_matrix.c **** 
 505:quantum/rgb_matrix.c **** void rgb_matrix_set_flags(led_flags_t flags) { rgb_effect_params.flags = flags; }
 6844              		.loc 28 505 0
 6845              		.cfi_startproc
 6846              		@ args = 0, pretend = 0, frame = 0
 6847              		@ frame_needed = 0, uses_anonymous_args = 0
 6848              		@ link register save eliminated.
 6849              	.LVL640:
 6850              		.loc 28 505 0
 6851 0000 014B     		ldr	r3, .L469
 6852 0002 9870     		strb	r0, [r3, #2]
 6853 0004 7047     		bx	lr
 6854              	.L470:
 6855 0006 00BF     		.align	2
 6856              	.L469:
 6857 0008 00000000 		.word	.LANCHOR2
 6858              		.cfi_endproc
 6859              	.LFE186:
 6861              		.section	.text.rgb_matrix_mode,"ax",%progbits
 6862              		.align	1
 6863              		.global	rgb_matrix_mode
 6864              		.syntax unified
 6865              		.thumb
 6866              		.thumb_func
 6867              		.fpu fpv4-sp-d16
 6869              	rgb_matrix_mode:
 6870              	.LFB187:
 506:quantum/rgb_matrix.c **** 
 507:quantum/rgb_matrix.c **** void rgb_matrix_mode(uint8_t mode) {
 6871              		.loc 28 507 0
 6872              		.cfi_startproc
 6873              		@ args = 0, pretend = 0, frame = 0
 6874              		@ frame_needed = 0, uses_anonymous_args = 0
 6875              		@ link register save eliminated.
 6876              	.LVL641:
 508:quantum/rgb_matrix.c ****     rgb_matrix_config.mode = mode;
 6877              		.loc 28 508 0
 6878 0000 044B     		ldr	r3, .L472
 6879 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6880 0004 60F38702 		bfi	r2, r0, #2, #6
 6881 0008 1A70     		strb	r2, [r3]
 509:quantum/rgb_matrix.c ****     rgb_task_state         = STARTING;
 6882              		.loc 28 509 0
 6883 000a 034B     		ldr	r3, .L472+4
 6884 000c 0022     		movs	r2, #0
 6885 000e 1A70     		strb	r2, [r3]
 510:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 6886              		.loc 28 510 0
 6887 0010 FFF7FEBF 		b	eeconfig_update_rgb_matrix
 6888              	.LVL642:
 6889              	.L473:
 6890              		.align	2
 6891              	.L472:
 6892 0014 00000000 		.word	rgb_matrix_config
 6893 0018 00000000 		.word	.LANCHOR2
 6894              		.cfi_endproc
 6895              	.LFE187:
 6897              		.section	.text.rgb_matrix_mode_noeeprom,"ax",%progbits
 6898              		.align	1
 6899              		.global	rgb_matrix_mode_noeeprom
 6900              		.syntax unified
 6901              		.thumb
 6902              		.thumb_func
 6903              		.fpu fpv4-sp-d16
 6905              	rgb_matrix_mode_noeeprom:
 6906              	.LFB188:
 511:quantum/rgb_matrix.c **** }
 512:quantum/rgb_matrix.c **** 
 513:quantum/rgb_matrix.c **** void rgb_matrix_mode_noeeprom(uint8_t mode) { rgb_matrix_config.mode = mode; }
 6907              		.loc 28 513 0
 6908              		.cfi_startproc
 6909              		@ args = 0, pretend = 0, frame = 0
 6910              		@ frame_needed = 0, uses_anonymous_args = 0
 6911              		@ link register save eliminated.
 6912              	.LVL643:
 6913              		.loc 28 513 0
 6914 0000 024B     		ldr	r3, .L475
 6915 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6916 0004 60F38702 		bfi	r2, r0, #2, #6
 6917 0008 1A70     		strb	r2, [r3]
 6918 000a 7047     		bx	lr
 6919              	.L476:
 6920              		.align	2
 6921              	.L475:
 6922 000c 00000000 		.word	rgb_matrix_config
 6923              		.cfi_endproc
 6924              	.LFE188:
 6926              		.section	.text.rgb_matrix_get_mode,"ax",%progbits
 6927              		.align	1
 6928              		.global	rgb_matrix_get_mode
 6929              		.syntax unified
 6930              		.thumb
 6931              		.thumb_func
 6932              		.fpu fpv4-sp-d16
 6934              	rgb_matrix_get_mode:
 6935              	.LFB189:
 514:quantum/rgb_matrix.c **** 
 515:quantum/rgb_matrix.c **** uint8_t rgb_matrix_get_mode(void) { return rgb_matrix_config.mode; }
 6936              		.loc 28 515 0
 6937              		.cfi_startproc
 6938              		@ args = 0, pretend = 0, frame = 0
 6939              		@ frame_needed = 0, uses_anonymous_args = 0
 6940              		@ link register save eliminated.
 6941              		.loc 28 515 0
 6942 0000 014B     		ldr	r3, .L478
 6943 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 6944 0004 8008     		lsrs	r0, r0, #2
 6945 0006 7047     		bx	lr
 6946              	.L479:
 6947              		.align	2
 6948              	.L478:
 6949 0008 00000000 		.word	rgb_matrix_config
 6950              		.cfi_endproc
 6951              	.LFE189:
 6953              		.section	.text.rgb_matrix_sethsv,"ax",%progbits
 6954              		.align	1
 6955              		.global	rgb_matrix_sethsv
 6956              		.syntax unified
 6957              		.thumb
 6958              		.thumb_func
 6959              		.fpu fpv4-sp-d16
 6961              	rgb_matrix_sethsv:
 6962              	.LFB190:
 516:quantum/rgb_matrix.c **** 
 517:quantum/rgb_matrix.c **** void rgb_matrix_sethsv(uint16_t hue, uint8_t sat, uint8_t val) {
 6963              		.loc 28 517 0
 6964              		.cfi_startproc
 6965              		@ args = 0, pretend = 0, frame = 0
 6966              		@ frame_needed = 0, uses_anonymous_args = 0
 6967              		@ link register save eliminated.
 6968              	.LVL644:
 6969              	.LBB391:
 6970              	.LBB392:
 518:quantum/rgb_matrix.c ****     rgb_matrix_sethsv_noeeprom(hue, sat, val);
 519:quantum/rgb_matrix.c ****     eeconfig_update_rgb_matrix();
 520:quantum/rgb_matrix.c **** }
 521:quantum/rgb_matrix.c **** 
 522:quantum/rgb_matrix.c **** void rgb_matrix_sethsv_noeeprom(uint16_t hue, uint8_t sat, uint8_t val) {
 523:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.h = hue;
 6971              		.loc 28 523 0
 6972 0000 024B     		ldr	r3, .L481
 6973 0002 5870     		strb	r0, [r3, #1]
 524:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.s = sat;
 6974              		.loc 28 524 0
 6975 0004 9970     		strb	r1, [r3, #2]
 525:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.v = val;
 6976              		.loc 28 525 0
 6977 0006 DA70     		strb	r2, [r3, #3]
 6978              	.LVL645:
 6979              	.LBE392:
 6980              	.LBE391:
 519:quantum/rgb_matrix.c **** }
 6981              		.loc 28 519 0
 6982 0008 FFF7FEBF 		b	eeconfig_update_rgb_matrix
 6983              	.LVL646:
 6984              	.L482:
 6985              		.align	2
 6986              	.L481:
 6987 000c 00000000 		.word	rgb_matrix_config
 6988              		.cfi_endproc
 6989              	.LFE190:
 6991              		.section	.text.rgb_matrix_sethsv_noeeprom,"ax",%progbits
 6992              		.align	1
 6993              		.global	rgb_matrix_sethsv_noeeprom
 6994              		.syntax unified
 6995              		.thumb
 6996              		.thumb_func
 6997              		.fpu fpv4-sp-d16
 6999              	rgb_matrix_sethsv_noeeprom:
 7000              	.LFB191:
 522:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.h = hue;
 7001              		.loc 28 522 0
 7002              		.cfi_startproc
 7003              		@ args = 0, pretend = 0, frame = 0
 7004              		@ frame_needed = 0, uses_anonymous_args = 0
 7005              		@ link register save eliminated.
 7006              	.LVL647:
 523:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.s = sat;
 7007              		.loc 28 523 0
 7008 0000 024B     		ldr	r3, .L484
 7009 0002 5870     		strb	r0, [r3, #1]
 524:quantum/rgb_matrix.c ****     rgb_matrix_config.hsv.v = val;
 7010              		.loc 28 524 0
 7011 0004 9970     		strb	r1, [r3, #2]
 7012              		.loc 28 525 0
 7013 0006 DA70     		strb	r2, [r3, #3]
 526:quantum/rgb_matrix.c ****     if (rgb_matrix_config.hsv.v > RGB_MATRIX_MAXIMUM_BRIGHTNESS) rgb_matrix_config.hsv.v = RGB_MATR
 527:quantum/rgb_matrix.c **** }
 7014              		.loc 28 527 0
 7015 0008 7047     		bx	lr
 7016              	.L485:
 7017 000a 00BF     		.align	2
 7018              	.L484:
 7019 000c 00000000 		.word	rgb_matrix_config
 7020              		.cfi_endproc
 7021              	.LFE191:
 7023              		.comm	g_last_hit_tracker,41,1
 7024              		.comm	g_rgb_counters,8,1
 7025              		.comm	rgb_matrix_config,8,4
 7026              		.global	g_suspend_state
 7027              		.global	k_rgb_matrix_center
 7028              		.section	.rodata
 7029              		.set	.LANCHOR0,. + 0
 7032              	b_m16_interleave:
 7033 0000 00       		.byte	0
 7034 0001 31       		.byte	49
 7035 0002 31       		.byte	49
 7036 0003 29       		.byte	41
 7037 0004 5A       		.byte	90
 7038 0005 1B       		.byte	27
 7039 0006 75       		.byte	117
 7040 0007 0A       		.byte	10
 7041              	.LC0:
 7042 0008 00       		.byte	0
 7043 0009 FF       		.byte	-1
 7044 000a FF       		.byte	-1
 7047              	k_rgb_matrix_center:
 7048 000b 70       		.byte	112
 7049 000c 20       		.byte	32
 7050              		.data
 7051              		.set	.LANCHOR2,. + 0
 7054              	rgb_task_state:
 7055 0000 03       		.byte	3
 7058              	rgb_effect_params:
 7059 0001 00       		.byte	0
 7060 0002 FF       		.byte	-1
 7061 0003 00       		.space	1
 7064              	rgb_last_effect:
 7065 0004 FF       		.byte	-1
 7068              	rgb_last_enable:
 7069 0005 FF       		.byte	-1
 7070              		.bss
 7071              		.align	2
 7072              		.set	.LANCHOR1,. + 0
 7075              	last_hit_buffer:
 7076 0000 00000000 		.space	41
 7076      00000000 
 7076      00000000 
 7076      00000000 
 7076      00000000 
 7077 0029 000000   		.space	3
 7080              	rgb_counters_buffer:
 7081 002c 00000000 		.space	4
 7084              	g_suspend_state:
 7085 0030 00       		.space	1
 7086              		.text
 7087              	.Letext0:
 7088              		.file 41 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_type
 7089              		.file 42 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 7090              		.file 43 "quantum/color.h"
 7091              		.file 44 "quantum/rgb_matrix_types.h"
 7092              		.file 45 "tmk_core/protocol/arm_atsam/clks.h"
 7093              		.file 46 "tmk_core/common/keyboard.h"
 7094              		.file 47 "tmk_core/common/action.h"
 7095              		.file 48 "tmk_core/common/report.h"
 7096              		.file 49 "tmk_core/common/host.h"
 7097              		.file 50 "tmk_core/common/debug.h"
 7098              		.file 51 "quantum/keycode_config.h"
 7099              		.file 52 "quantum/keymap.h"
 7100              		.file 53 "tmk_core/common/action_layer.h"
 7101              		.file 54 "tmk_core/common/timer.h"
 7102              		.file 55 "tmk_core/common/action_util.h"
 7103              		.file 56 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 7104              		.file 57 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 7105              		.file 58 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.
 7106              		.file 59 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 7107              		.file 60 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 7108              		.file 61 "quantum/quantum.h"
 7109              		.file 62 "quantum/rgb_matrix.h"
 7110              		.file 63 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/math.h"
 7111              		.file 64 "./lib/lib8tion/lib8tion.h"
 7112              		.file 65 "./lib/lib8tion/random8.h"
 7113              		.file 66 "tmk_core/common/eeconfig.h"
 7114              		.file 67 "tmk_core/common/eeprom.h"
 7115              		.file 68 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 rgb_matrix.c
/var/tmp//ccXZiBSv.s:18     .text.sin8_C:0000000000000000 $t
/var/tmp//ccXZiBSv.s:24     .text.sin8_C:0000000000000000 sin8_C
/var/tmp//ccXZiBSv.s:90     .text.sin8_C:000000000000003c $d
/var/tmp//ccXZiBSv.s:95     .text.BAND_SAT_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:101    .text.BAND_SAT_math:0000000000000000 BAND_SAT_math
/var/tmp//ccXZiBSv.s:167    .text.BAND_SAT_math:0000000000000058 $d
/var/tmp//ccXZiBSv.s:172    .text.BAND_VAL_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:178    .text.BAND_VAL_math:0000000000000000 BAND_VAL_math
/var/tmp//ccXZiBSv.s:243    .text.BAND_VAL_math:0000000000000058 $d
/var/tmp//ccXZiBSv.s:248    .text.CYCLE_ALL_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:254    .text.CYCLE_ALL_math:0000000000000000 CYCLE_ALL_math
/var/tmp//ccXZiBSv.s:289    .text.CYCLE_LEFT_RIGHT_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:295    .text.CYCLE_LEFT_RIGHT_math:0000000000000000 CYCLE_LEFT_RIGHT_math
/var/tmp//ccXZiBSv.s:337    .text.CYCLE_LEFT_RIGHT_math:0000000000000034 $d
/var/tmp//ccXZiBSv.s:342    .text.CYCLE_UP_DOWN_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:348    .text.CYCLE_UP_DOWN_math:0000000000000000 CYCLE_UP_DOWN_math
/var/tmp//ccXZiBSv.s:390    .text.CYCLE_UP_DOWN_math:0000000000000034 $d
/var/tmp//ccXZiBSv.s:395    .text.RAINBOW_MOVING_CHEVRON_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:401    .text.RAINBOW_MOVING_CHEVRON_math:0000000000000000 RAINBOW_MOVING_CHEVRON_math
/var/tmp//ccXZiBSv.s:472    .text.RAINBOW_MOVING_CHEVRON_math:0000000000000050 $d
/var/tmp//ccXZiBSv.s:477    .text.CYCLE_OUT_IN_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:483    .text.CYCLE_OUT_IN_math:0000000000000000 CYCLE_OUT_IN_math
/var/tmp//ccXZiBSv.s:524    .text.DUAL_BEACON_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:530    .text.DUAL_BEACON_math:0000000000000000 DUAL_BEACON_math
/var/tmp//ccXZiBSv.s:582    .text.DUAL_BEACON_math:0000000000000048 $d
/var/tmp//ccXZiBSv.s:587    .text.RAINBOW_BEACON_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:593    .text.RAINBOW_BEACON_math:0000000000000000 RAINBOW_BEACON_math
/var/tmp//ccXZiBSv.s:648    .text.RAINBOW_BEACON_math:000000000000004c $d
/var/tmp//ccXZiBSv.s:653    .text.PINWHEELS_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:659    .text.PINWHEELS_math:0000000000000000 PINWHEELS_math
/var/tmp//ccXZiBSv.s:729    .text.PINWHEELS_math:0000000000000060 $d
/var/tmp//ccXZiBSv.s:734    .text.SOLID_REACTIVE_SIMPLE_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:740    .text.SOLID_REACTIVE_SIMPLE_math:0000000000000000 SOLID_REACTIVE_SIMPLE_math
/var/tmp//ccXZiBSv.s:786    .text.SOLID_REACTIVE_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:792    .text.SOLID_REACTIVE_math:0000000000000000 SOLID_REACTIVE_math
/var/tmp//ccXZiBSv.s:846    .text.SOLID_REACTIVE_WIDE_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:852    .text.SOLID_REACTIVE_WIDE_math:0000000000000000 SOLID_REACTIVE_WIDE_math
/var/tmp//ccXZiBSv.s:923    .text.SOLID_REACTIVE_CROSS_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:929    .text.SOLID_REACTIVE_CROSS_math:0000000000000000 SOLID_REACTIVE_CROSS_math
/var/tmp//ccXZiBSv.s:1031   .text.SOLID_REACTIVE_NEXUS_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:1037   .text.SOLID_REACTIVE_NEXUS_math:0000000000000000 SOLID_REACTIVE_NEXUS_math
/var/tmp//ccXZiBSv.s:1149   .text.SOLID_REACTIVE_NEXUS_math:0000000000000070 $d
                            *COM*:0000000000000008 rgb_matrix_config
/var/tmp//ccXZiBSv.s:1154   .text.SPLASH_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:1161   .text.SPLASH_math:0000000000000000 SPLASH_math
/var/tmp//ccXZiBSv.s:1248   .text.SOLID_SPLASH_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:1255   .text.SOLID_SPLASH_math:0000000000000000 SOLID_SPLASH_math
/var/tmp//ccXZiBSv.s:1323   .text.sqrt16.part.0:0000000000000000 $t
/var/tmp//ccXZiBSv.s:1329   .text.sqrt16.part.0:0000000000000000 sqrt16.part.0
/var/tmp//ccXZiBSv.s:1403   .text.CYCLE_OUT_IN_DUAL_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:1409   .text.CYCLE_OUT_IN_DUAL_math:0000000000000000 CYCLE_OUT_IN_DUAL_math
/var/tmp//ccXZiBSv.s:1509   .text.atan2_8:0000000000000000 $t
/var/tmp//ccXZiBSv.s:1515   .text.atan2_8:0000000000000000 atan2_8
/var/tmp//ccXZiBSv.s:1586   .text.BAND_PINWHEEL_SAT_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:1592   .text.BAND_PINWHEEL_SAT_math:0000000000000000 BAND_PINWHEEL_SAT_math
/var/tmp//ccXZiBSv.s:1650   .text.BAND_PINWHEEL_VAL_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:1656   .text.BAND_PINWHEEL_VAL_math:0000000000000000 BAND_PINWHEEL_VAL_math
/var/tmp//ccXZiBSv.s:1714   .text.BAND_SPIRAL_SAT_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:1720   .text.BAND_SPIRAL_SAT_math:0000000000000000 BAND_SPIRAL_SAT_math
/var/tmp//ccXZiBSv.s:1778   .text.BAND_SPIRAL_VAL_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:1784   .text.BAND_SPIRAL_VAL_math:0000000000000000 BAND_SPIRAL_VAL_math
/var/tmp//ccXZiBSv.s:1842   .text.CYCLE_PINWHEEL_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:1848   .text.CYCLE_PINWHEEL_math:0000000000000000 CYCLE_PINWHEEL_math
/var/tmp//ccXZiBSv.s:1892   .text.CYCLE_SPIRAL_math:0000000000000000 $t
/var/tmp//ccXZiBSv.s:1898   .text.CYCLE_SPIRAL_math:0000000000000000 CYCLE_SPIRAL_math
/var/tmp//ccXZiBSv.s:1944   .text.eeconfig_read_rgb_matrix:0000000000000000 $t
/var/tmp//ccXZiBSv.s:1951   .text.eeconfig_read_rgb_matrix:0000000000000000 eeconfig_read_rgb_matrix
/var/tmp//ccXZiBSv.s:1968   .text.eeconfig_read_rgb_matrix:000000000000000c $d
/var/tmp//ccXZiBSv.s:1973   .text.eeconfig_update_rgb_matrix:0000000000000000 $t
/var/tmp//ccXZiBSv.s:1980   .text.eeconfig_update_rgb_matrix:0000000000000000 eeconfig_update_rgb_matrix
/var/tmp//ccXZiBSv.s:1996   .text.eeconfig_update_rgb_matrix:000000000000000c $d
/var/tmp//ccXZiBSv.s:2001   .text.eeconfig_update_rgb_matrix_default:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2008   .text.eeconfig_update_rgb_matrix_default:0000000000000000 eeconfig_update_rgb_matrix_default
/var/tmp//ccXZiBSv.s:2035   .text.eeconfig_update_rgb_matrix_default:0000000000000020 $d
/var/tmp//ccXZiBSv.s:2041   .text.eeconfig_debug_rgb_matrix:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2048   .text.eeconfig_debug_rgb_matrix:0000000000000000 eeconfig_debug_rgb_matrix
/var/tmp//ccXZiBSv.s:2061   .text.rgb_matrix_map_row_column_to_led_kb:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2068   .text.rgb_matrix_map_row_column_to_led_kb:0000000000000000 rgb_matrix_map_row_column_to_led_kb
/var/tmp//ccXZiBSv.s:2084   .text.rgb_matrix_map_row_column_to_led:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2091   .text.rgb_matrix_map_row_column_to_led:0000000000000000 rgb_matrix_map_row_column_to_led
/var/tmp//ccXZiBSv.s:2133   .text.rgb_matrix_map_row_column_to_led:0000000000000024 $d
/var/tmp//ccXZiBSv.s:2138   .text.rgb_matrix_update_pwm_buffers:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2145   .text.rgb_matrix_update_pwm_buffers:0000000000000000 rgb_matrix_update_pwm_buffers
/var/tmp//ccXZiBSv.s:2160   .text.rgb_matrix_update_pwm_buffers:0000000000000008 $d
/var/tmp//ccXZiBSv.s:2165   .text.rgb_matrix_set_color:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2172   .text.rgb_matrix_set_color:0000000000000000 rgb_matrix_set_color
/var/tmp//ccXZiBSv.s:2195   .text.rgb_matrix_set_color:0000000000000010 $d
/var/tmp//ccXZiBSv.s:2200   .text.effect_runner_dx_dy_dist:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2207   .text.effect_runner_dx_dy_dist:0000000000000000 effect_runner_dx_dy_dist
/var/tmp//ccXZiBSv.s:2377   .text.effect_runner_dx_dy_dist:00000000000000d8 $d
                            *COM*:0000000000000008 g_rgb_counters
/var/tmp//ccXZiBSv.s:2388   .text.BAND_SPIRAL_SAT:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2395   .text.BAND_SPIRAL_SAT:0000000000000000 BAND_SPIRAL_SAT
/var/tmp//ccXZiBSv.s:2410   .text.BAND_SPIRAL_SAT:0000000000000008 $d
/var/tmp//ccXZiBSv.s:2415   .text.BAND_SPIRAL_VAL:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2422   .text.BAND_SPIRAL_VAL:0000000000000000 BAND_SPIRAL_VAL
/var/tmp//ccXZiBSv.s:2437   .text.BAND_SPIRAL_VAL:0000000000000008 $d
/var/tmp//ccXZiBSv.s:2442   .text.CYCLE_OUT_IN:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2449   .text.CYCLE_OUT_IN:0000000000000000 CYCLE_OUT_IN
/var/tmp//ccXZiBSv.s:2464   .text.CYCLE_OUT_IN:0000000000000008 $d
/var/tmp//ccXZiBSv.s:2469   .text.CYCLE_SPIRAL:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2476   .text.CYCLE_SPIRAL:0000000000000000 CYCLE_SPIRAL
/var/tmp//ccXZiBSv.s:2491   .text.CYCLE_SPIRAL:0000000000000008 $d
/var/tmp//ccXZiBSv.s:2496   .text.effect_runner_dx_dy:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2503   .text.effect_runner_dx_dy:0000000000000000 effect_runner_dx_dy
/var/tmp//ccXZiBSv.s:2629   .text.effect_runner_dx_dy:00000000000000b0 $d
/var/tmp//ccXZiBSv.s:2638   .text.BAND_PINWHEEL_SAT:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2645   .text.BAND_PINWHEEL_SAT:0000000000000000 BAND_PINWHEEL_SAT
/var/tmp//ccXZiBSv.s:2660   .text.BAND_PINWHEEL_SAT:0000000000000008 $d
/var/tmp//ccXZiBSv.s:2665   .text.BAND_PINWHEEL_VAL:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2672   .text.BAND_PINWHEEL_VAL:0000000000000000 BAND_PINWHEEL_VAL
/var/tmp//ccXZiBSv.s:2687   .text.BAND_PINWHEEL_VAL:0000000000000008 $d
/var/tmp//ccXZiBSv.s:2692   .text.CYCLE_OUT_IN_DUAL:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2699   .text.CYCLE_OUT_IN_DUAL:0000000000000000 CYCLE_OUT_IN_DUAL
/var/tmp//ccXZiBSv.s:2714   .text.CYCLE_OUT_IN_DUAL:0000000000000008 $d
/var/tmp//ccXZiBSv.s:2719   .text.CYCLE_PINWHEEL:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2726   .text.CYCLE_PINWHEEL:0000000000000000 CYCLE_PINWHEEL
/var/tmp//ccXZiBSv.s:2741   .text.CYCLE_PINWHEEL:0000000000000008 $d
/var/tmp//ccXZiBSv.s:2746   .text.effect_runner_i:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2753   .text.effect_runner_i:0000000000000000 effect_runner_i
/var/tmp//ccXZiBSv.s:2870   .text.effect_runner_i:00000000000000a0 $d
/var/tmp//ccXZiBSv.s:2879   .text.BAND_SAT:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2886   .text.BAND_SAT:0000000000000000 BAND_SAT
/var/tmp//ccXZiBSv.s:2901   .text.BAND_SAT:0000000000000008 $d
/var/tmp//ccXZiBSv.s:2906   .text.BAND_VAL:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2913   .text.BAND_VAL:0000000000000000 BAND_VAL
/var/tmp//ccXZiBSv.s:2928   .text.BAND_VAL:0000000000000008 $d
/var/tmp//ccXZiBSv.s:2933   .text.CYCLE_ALL:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2940   .text.CYCLE_ALL:0000000000000000 CYCLE_ALL
/var/tmp//ccXZiBSv.s:2955   .text.CYCLE_ALL:0000000000000008 $d
/var/tmp//ccXZiBSv.s:2960   .text.CYCLE_LEFT_RIGHT:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2967   .text.CYCLE_LEFT_RIGHT:0000000000000000 CYCLE_LEFT_RIGHT
/var/tmp//ccXZiBSv.s:2982   .text.CYCLE_LEFT_RIGHT:0000000000000008 $d
/var/tmp//ccXZiBSv.s:2987   .text.CYCLE_UP_DOWN:0000000000000000 $t
/var/tmp//ccXZiBSv.s:2994   .text.CYCLE_UP_DOWN:0000000000000000 CYCLE_UP_DOWN
/var/tmp//ccXZiBSv.s:3009   .text.CYCLE_UP_DOWN:0000000000000008 $d
/var/tmp//ccXZiBSv.s:3014   .text.RAINBOW_MOVING_CHEVRON:0000000000000000 $t
/var/tmp//ccXZiBSv.s:3021   .text.RAINBOW_MOVING_CHEVRON:0000000000000000 RAINBOW_MOVING_CHEVRON
/var/tmp//ccXZiBSv.s:3036   .text.RAINBOW_MOVING_CHEVRON:0000000000000008 $d
/var/tmp//ccXZiBSv.s:3041   .text.effect_runner_sin_cos_i:0000000000000000 $t
/var/tmp//ccXZiBSv.s:3048   .text.effect_runner_sin_cos_i:0000000000000000 effect_runner_sin_cos_i
/var/tmp//ccXZiBSv.s:3205   .text.effect_runner_sin_cos_i:00000000000000c0 $d
/var/tmp//ccXZiBSv.s:3214   .text.DUAL_BEACON:0000000000000000 $t
/var/tmp//ccXZiBSv.s:3221   .text.DUAL_BEACON:0000000000000000 DUAL_BEACON
/var/tmp//ccXZiBSv.s:3236   .text.DUAL_BEACON:0000000000000008 $d
/var/tmp//ccXZiBSv.s:3241   .text.RAINBOW_BEACON:0000000000000000 $t
/var/tmp//ccXZiBSv.s:3248   .text.RAINBOW_BEACON:0000000000000000 RAINBOW_BEACON
/var/tmp//ccXZiBSv.s:3263   .text.RAINBOW_BEACON:0000000000000008 $d
/var/tmp//ccXZiBSv.s:3268   .text.PINWHEELS:0000000000000000 $t
/var/tmp//ccXZiBSv.s:3275   .text.PINWHEELS:0000000000000000 PINWHEELS
/var/tmp//ccXZiBSv.s:3290   .text.PINWHEELS:0000000000000008 $d
/var/tmp//ccXZiBSv.s:3295   .text.effect_runner_reactive:0000000000000000 $t
/var/tmp//ccXZiBSv.s:3302   .text.effect_runner_reactive:0000000000000000 effect_runner_reactive
/var/tmp//ccXZiBSv.s:3476   .text.effect_runner_reactive:00000000000000d0 $d
                            *COM*:0000000000000029 g_last_hit_tracker
/var/tmp//ccXZiBSv.s:3486   .text.SOLID_REACTIVE_SIMPLE:0000000000000000 $t
/var/tmp//ccXZiBSv.s:3493   .text.SOLID_REACTIVE_SIMPLE:0000000000000000 SOLID_REACTIVE_SIMPLE
/var/tmp//ccXZiBSv.s:3508   .text.SOLID_REACTIVE_SIMPLE:0000000000000008 $d
/var/tmp//ccXZiBSv.s:3513   .text.SOLID_REACTIVE:0000000000000000 $t
/var/tmp//ccXZiBSv.s:3520   .text.SOLID_REACTIVE:0000000000000000 SOLID_REACTIVE
/var/tmp//ccXZiBSv.s:3535   .text.SOLID_REACTIVE:0000000000000008 $d
/var/tmp//ccXZiBSv.s:3540   .text.effect_runner_reactive_splash:0000000000000000 $t
/var/tmp//ccXZiBSv.s:3547   .text.effect_runner_reactive_splash:0000000000000000 effect_runner_reactive_splash
/var/tmp//ccXZiBSv.s:3767   .text.effect_runner_reactive_splash:0000000000000120 $d
/var/tmp//ccXZiBSv.s:3781   .text.SOLID_REACTIVE_WIDE:0000000000000000 $t
/var/tmp//ccXZiBSv.s:3788   .text.SOLID_REACTIVE_WIDE:0000000000000000 SOLID_REACTIVE_WIDE
/var/tmp//ccXZiBSv.s:3821   .text.SOLID_REACTIVE_WIDE:0000000000000018 $d
/var/tmp//ccXZiBSv.s:3827   .text.SOLID_REACTIVE_MULTIWIDE:0000000000000000 $t
/var/tmp//ccXZiBSv.s:3834   .text.SOLID_REACTIVE_MULTIWIDE:0000000000000000 SOLID_REACTIVE_MULTIWIDE
/var/tmp//ccXZiBSv.s:3852   .text.SOLID_REACTIVE_MULTIWIDE:000000000000000c $d
/var/tmp//ccXZiBSv.s:3857   .text.SOLID_REACTIVE_CROSS:0000000000000000 $t
/var/tmp//ccXZiBSv.s:3864   .text.SOLID_REACTIVE_CROSS:0000000000000000 SOLID_REACTIVE_CROSS
/var/tmp//ccXZiBSv.s:3897   .text.SOLID_REACTIVE_CROSS:0000000000000018 $d
/var/tmp//ccXZiBSv.s:3903   .text.SOLID_REACTIVE_MULTICROSS:0000000000000000 $t
/var/tmp//ccXZiBSv.s:3910   .text.SOLID_REACTIVE_MULTICROSS:0000000000000000 SOLID_REACTIVE_MULTICROSS
/var/tmp//ccXZiBSv.s:3928   .text.SOLID_REACTIVE_MULTICROSS:000000000000000c $d
/var/tmp//ccXZiBSv.s:3933   .text.SOLID_REACTIVE_NEXUS:0000000000000000 $t
/var/tmp//ccXZiBSv.s:3940   .text.SOLID_REACTIVE_NEXUS:0000000000000000 SOLID_REACTIVE_NEXUS
/var/tmp//ccXZiBSv.s:3973   .text.SOLID_REACTIVE_NEXUS:0000000000000018 $d
/var/tmp//ccXZiBSv.s:3979   .text.SOLID_REACTIVE_MULTINEXUS:0000000000000000 $t
/var/tmp//ccXZiBSv.s:3986   .text.SOLID_REACTIVE_MULTINEXUS:0000000000000000 SOLID_REACTIVE_MULTINEXUS
/var/tmp//ccXZiBSv.s:4004   .text.SOLID_REACTIVE_MULTINEXUS:000000000000000c $d
/var/tmp//ccXZiBSv.s:4009   .text.SPLASH:0000000000000000 $t
/var/tmp//ccXZiBSv.s:4016   .text.SPLASH:0000000000000000 SPLASH
/var/tmp//ccXZiBSv.s:4049   .text.SPLASH:0000000000000018 $d
/var/tmp//ccXZiBSv.s:4055   .text.MULTISPLASH:0000000000000000 $t
/var/tmp//ccXZiBSv.s:4062   .text.MULTISPLASH:0000000000000000 MULTISPLASH
/var/tmp//ccXZiBSv.s:4080   .text.MULTISPLASH:000000000000000c $d
/var/tmp//ccXZiBSv.s:4085   .text.SOLID_SPLASH:0000000000000000 $t
/var/tmp//ccXZiBSv.s:4092   .text.SOLID_SPLASH:0000000000000000 SOLID_SPLASH
/var/tmp//ccXZiBSv.s:4125   .text.SOLID_SPLASH:0000000000000018 $d
/var/tmp//ccXZiBSv.s:4131   .text.SOLID_MULTISPLASH:0000000000000000 $t
/var/tmp//ccXZiBSv.s:4138   .text.SOLID_MULTISPLASH:0000000000000000 SOLID_MULTISPLASH
/var/tmp//ccXZiBSv.s:4156   .text.SOLID_MULTISPLASH:000000000000000c $d
/var/tmp//ccXZiBSv.s:4161   .text.SOLID_COLOR:0000000000000000 $t
/var/tmp//ccXZiBSv.s:4168   .text.SOLID_COLOR:0000000000000000 SOLID_COLOR
/var/tmp//ccXZiBSv.s:4269   .text.SOLID_COLOR:0000000000000080 $d
/var/tmp//ccXZiBSv.s:4276   .text.ALPHAS_MODS:0000000000000000 $t
/var/tmp//ccXZiBSv.s:4283   .text.ALPHAS_MODS:0000000000000000 ALPHAS_MODS
/var/tmp//ccXZiBSv.s:4420   .text.ALPHAS_MODS:00000000000000c8 $d
/var/tmp//ccXZiBSv.s:4427   .text.GRADIENT_UP_DOWN:0000000000000000 $t
/var/tmp//ccXZiBSv.s:4434   .text.GRADIENT_UP_DOWN:0000000000000000 GRADIENT_UP_DOWN
/var/tmp//ccXZiBSv.s:4551   .text.GRADIENT_UP_DOWN:000000000000008c $d
/var/tmp//ccXZiBSv.s:4559   .text.BREATHING:0000000000000000 $t
/var/tmp//ccXZiBSv.s:4566   .text.BREATHING:0000000000000000 BREATHING
/var/tmp//ccXZiBSv.s:4712   .text.BREATHING:00000000000000b4 $d
/var/tmp//ccXZiBSv.s:4720   .text.raindrops_set_color.isra.2:0000000000000000 $t
/var/tmp//ccXZiBSv.s:4726   .text.raindrops_set_color.isra.2:0000000000000000 raindrops_set_color.isra.2
/var/tmp//ccXZiBSv.s:4809   .text.raindrops_set_color.isra.2:0000000000000068 $d
/var/tmp//ccXZiBSv.s:4815   .text.RAINDROPS:0000000000000000 $t
/var/tmp//ccXZiBSv.s:4822   .text.RAINDROPS:0000000000000000 RAINDROPS
/var/tmp//ccXZiBSv.s:4933   .text.RAINDROPS:0000000000000078 $d
/var/tmp//ccXZiBSv.s:4940   .text.jellybean_raindrops_set_color.isra.3:0000000000000000 $t
/var/tmp//ccXZiBSv.s:4946   .text.jellybean_raindrops_set_color.isra.3:0000000000000000 jellybean_raindrops_set_color.isra.3
/var/tmp//ccXZiBSv.s:5009   .text.jellybean_raindrops_set_color.isra.3:0000000000000048 $d
/var/tmp//ccXZiBSv.s:5015   .text.JELLYBEAN_RAINDROPS:0000000000000000 $t
/var/tmp//ccXZiBSv.s:5022   .text.JELLYBEAN_RAINDROPS:0000000000000000 JELLYBEAN_RAINDROPS
/var/tmp//ccXZiBSv.s:5134   .text.JELLYBEAN_RAINDROPS:0000000000000078 $d
/var/tmp//ccXZiBSv.s:5141   .text.rgb_matrix_set_color_all:0000000000000000 $t
/var/tmp//ccXZiBSv.s:5148   .text.rgb_matrix_set_color_all:0000000000000000 rgb_matrix_set_color_all
/var/tmp//ccXZiBSv.s:5164   .text.rgb_matrix_set_color_all:0000000000000008 $d
/var/tmp//ccXZiBSv.s:5169   .text.process_rgb_matrix:0000000000000000 $t
/var/tmp//ccXZiBSv.s:5176   .text.process_rgb_matrix:0000000000000000 process_rgb_matrix
/var/tmp//ccXZiBSv.s:5330   .text.process_rgb_matrix:00000000000000c4 $d
/var/tmp//ccXZiBSv.s:5339   .text.rgb_matrix_test:0000000000000000 $t
/var/tmp//ccXZiBSv.s:5346   .text.rgb_matrix_test:0000000000000000 rgb_matrix_test
/var/tmp//ccXZiBSv.s:5393   .text.rgb_matrix_test:0000000000000034 $d
/var/tmp//ccXZiBSv.s:5398   .text.rgb_matrix_indicators_kb:0000000000000000 $t
/var/tmp//ccXZiBSv.s:5405   .text.rgb_matrix_indicators_kb:0000000000000000 rgb_matrix_indicators_kb
/var/tmp//ccXZiBSv.s:5405   .text.rgb_matrix_indicators_kb:0000000000000000 rgb_matrix_indicators_kb.localalias.5
/var/tmp//ccXZiBSv.s:5419   .text.rgb_matrix_indicators_user:0000000000000000 $t
/var/tmp//ccXZiBSv.s:5426   .text.rgb_matrix_indicators_user:0000000000000000 rgb_matrix_indicators_user
/var/tmp//ccXZiBSv.s:5437   .text.rgb_matrix_indicators:0000000000000000 $t
/var/tmp//ccXZiBSv.s:5444   .text.rgb_matrix_indicators:0000000000000000 rgb_matrix_indicators
/var/tmp//ccXZiBSv.s:5467   .text.rgb_matrix_task:0000000000000000 $t
/var/tmp//ccXZiBSv.s:5474   .text.rgb_matrix_task:0000000000000000 rgb_matrix_task
/var/tmp//ccXZiBSv.s:5571   .text.rgb_matrix_task:000000000000006c $d
/var/tmp//ccXZiBSv.s:5576   .text.rgb_matrix_task:0000000000000074 $t
/var/tmp//ccXZiBSv.s:5672   .text.rgb_matrix_task:00000000000000e4 $d
/var/tmp//ccXZiBSv.s:5708   .text.rgb_matrix_task:000000000000012c $t
/var/tmp//ccXZiBSv.s:6036   .text.rgb_matrix_task:0000000000000294 $d
/var/tmp//ccXZiBSv.s:6045   .text.rgb_matrix_task:00000000000002ac $t
/var/tmp//ccXZiBSv.s:6088   .text.rgb_matrix_task:00000000000002d8 $d
/var/tmp//ccXZiBSv.s:6095   .text.rgb_matrix_init:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6102   .text.rgb_matrix_init:0000000000000000 rgb_matrix_init
/var/tmp//ccXZiBSv.s:6220   .text.rgb_matrix_init:00000000000000a0 $d
/var/tmp//ccXZiBSv.s:6228   .text.rgb_matrix_set_suspend_state:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6235   .text.rgb_matrix_set_suspend_state:0000000000000000 rgb_matrix_set_suspend_state
/var/tmp//ccXZiBSv.s:6250   .text.rgb_matrix_set_suspend_state:0000000000000008 $d
/var/tmp//ccXZiBSv.s:6255   .text.rgb_matrix_toggle:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6262   .text.rgb_matrix_toggle:0000000000000000 rgb_matrix_toggle
/var/tmp//ccXZiBSv.s:6284   .text.rgb_matrix_toggle:0000000000000014 $d
/var/tmp//ccXZiBSv.s:6290   .text.rgb_matrix_enable_noeeprom:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6297   .text.rgb_matrix_enable_noeeprom:0000000000000000 rgb_matrix_enable_noeeprom
/var/tmp//ccXZiBSv.s:6321   .text.rgb_matrix_enable_noeeprom:000000000000001c $d
/var/tmp//ccXZiBSv.s:6327   .text.rgb_matrix_enable:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6334   .text.rgb_matrix_enable:0000000000000000 rgb_matrix_enable
/var/tmp//ccXZiBSv.s:6359   .text.rgb_matrix_disable_noeeprom:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6366   .text.rgb_matrix_disable_noeeprom:0000000000000000 rgb_matrix_disable_noeeprom
/var/tmp//ccXZiBSv.s:6390   .text.rgb_matrix_disable_noeeprom:0000000000000018 $d
/var/tmp//ccXZiBSv.s:6396   .text.rgb_matrix_disable:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6403   .text.rgb_matrix_disable:0000000000000000 rgb_matrix_disable
/var/tmp//ccXZiBSv.s:6428   .text.rgb_matrix_step:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6435   .text.rgb_matrix_step:0000000000000000 rgb_matrix_step
/var/tmp//ccXZiBSv.s:6464   .text.rgb_matrix_step:0000000000000024 $d
/var/tmp//ccXZiBSv.s:6470   .text.rgb_matrix_step_reverse:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6477   .text.rgb_matrix_step_reverse:0000000000000000 rgb_matrix_step_reverse
/var/tmp//ccXZiBSv.s:6506   .text.rgb_matrix_step_reverse:0000000000000024 $d
/var/tmp//ccXZiBSv.s:6512   .text.rgb_matrix_increase_hue:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6519   .text.rgb_matrix_increase_hue:0000000000000000 rgb_matrix_increase_hue
/var/tmp//ccXZiBSv.s:6537   .text.rgb_matrix_increase_hue:000000000000000c $d
/var/tmp//ccXZiBSv.s:6542   .text.rgb_matrix_decrease_hue:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6549   .text.rgb_matrix_decrease_hue:0000000000000000 rgb_matrix_decrease_hue
/var/tmp//ccXZiBSv.s:6567   .text.rgb_matrix_decrease_hue:000000000000000c $d
/var/tmp//ccXZiBSv.s:6572   .text.rgb_matrix_increase_sat:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6579   .text.rgb_matrix_increase_sat:0000000000000000 rgb_matrix_increase_sat
/var/tmp//ccXZiBSv.s:6608   .text.rgb_matrix_increase_sat:0000000000000014 $d
/var/tmp//ccXZiBSv.s:6613   .text.rgb_matrix_decrease_sat:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6620   .text.rgb_matrix_decrease_sat:0000000000000000 rgb_matrix_decrease_sat
/var/tmp//ccXZiBSv.s:6646   .text.rgb_matrix_decrease_sat:0000000000000010 $d
/var/tmp//ccXZiBSv.s:6651   .text.rgb_matrix_increase_val:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6658   .text.rgb_matrix_increase_val:0000000000000000 rgb_matrix_increase_val
/var/tmp//ccXZiBSv.s:6687   .text.rgb_matrix_increase_val:0000000000000014 $d
/var/tmp//ccXZiBSv.s:6692   .text.rgb_matrix_decrease_val:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6699   .text.rgb_matrix_decrease_val:0000000000000000 rgb_matrix_decrease_val
/var/tmp//ccXZiBSv.s:6725   .text.rgb_matrix_decrease_val:0000000000000010 $d
/var/tmp//ccXZiBSv.s:6730   .text.rgb_matrix_increase_speed:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6737   .text.rgb_matrix_increase_speed:0000000000000000 rgb_matrix_increase_speed
/var/tmp//ccXZiBSv.s:6766   .text.rgb_matrix_increase_speed:0000000000000014 $d
/var/tmp//ccXZiBSv.s:6771   .text.rgb_matrix_decrease_speed:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6778   .text.rgb_matrix_decrease_speed:0000000000000000 rgb_matrix_decrease_speed
/var/tmp//ccXZiBSv.s:6804   .text.rgb_matrix_decrease_speed:0000000000000010 $d
/var/tmp//ccXZiBSv.s:6809   .text.rgb_matrix_get_flags:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6816   .text.rgb_matrix_get_flags:0000000000000000 rgb_matrix_get_flags
/var/tmp//ccXZiBSv.s:6830   .text.rgb_matrix_get_flags:0000000000000008 $d
/var/tmp//ccXZiBSv.s:6835   .text.rgb_matrix_set_flags:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6842   .text.rgb_matrix_set_flags:0000000000000000 rgb_matrix_set_flags
/var/tmp//ccXZiBSv.s:6857   .text.rgb_matrix_set_flags:0000000000000008 $d
/var/tmp//ccXZiBSv.s:6862   .text.rgb_matrix_mode:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6869   .text.rgb_matrix_mode:0000000000000000 rgb_matrix_mode
/var/tmp//ccXZiBSv.s:6892   .text.rgb_matrix_mode:0000000000000014 $d
/var/tmp//ccXZiBSv.s:6898   .text.rgb_matrix_mode_noeeprom:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6905   .text.rgb_matrix_mode_noeeprom:0000000000000000 rgb_matrix_mode_noeeprom
/var/tmp//ccXZiBSv.s:6922   .text.rgb_matrix_mode_noeeprom:000000000000000c $d
/var/tmp//ccXZiBSv.s:6927   .text.rgb_matrix_get_mode:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6934   .text.rgb_matrix_get_mode:0000000000000000 rgb_matrix_get_mode
/var/tmp//ccXZiBSv.s:6949   .text.rgb_matrix_get_mode:0000000000000008 $d
/var/tmp//ccXZiBSv.s:6954   .text.rgb_matrix_sethsv:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6961   .text.rgb_matrix_sethsv:0000000000000000 rgb_matrix_sethsv
/var/tmp//ccXZiBSv.s:6987   .text.rgb_matrix_sethsv:000000000000000c $d
/var/tmp//ccXZiBSv.s:6992   .text.rgb_matrix_sethsv_noeeprom:0000000000000000 $t
/var/tmp//ccXZiBSv.s:6999   .text.rgb_matrix_sethsv_noeeprom:0000000000000000 rgb_matrix_sethsv_noeeprom
/var/tmp//ccXZiBSv.s:7019   .text.rgb_matrix_sethsv_noeeprom:000000000000000c $d
/var/tmp//ccXZiBSv.s:7084   .bss:0000000000000030 g_suspend_state
/var/tmp//ccXZiBSv.s:7047   .rodata:000000000000000b k_rgb_matrix_center
/var/tmp//ccXZiBSv.s:7032   .rodata:0000000000000000 b_m16_interleave
/var/tmp//ccXZiBSv.s:7054   .data:0000000000000000 rgb_task_state
/var/tmp//ccXZiBSv.s:7058   .data:0000000000000001 rgb_effect_params
/var/tmp//ccXZiBSv.s:7061   .data:0000000000000003 $d
/var/tmp//ccXZiBSv.s:7064   .data:0000000000000004 rgb_last_effect
/var/tmp//ccXZiBSv.s:7068   .data:0000000000000005 rgb_last_enable
/var/tmp//ccXZiBSv.s:7071   .bss:0000000000000000 $d
/var/tmp//ccXZiBSv.s:7075   .bss:0000000000000000 last_hit_buffer
/var/tmp//ccXZiBSv.s:7080   .bss:000000000000002c rgb_counters_buffer

UNDEFINED SYMBOLS
g_led_config
eeprom_read_block
eeprom_update_block
rgb_matrix_driver
hsv_to_rgb
rand
memcpy
timer_elapsed32
timer_read32
eeconfig_is_enabled
eeconfig_init
