   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"keyboard.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.disable_jtag,"ax",%progbits
  18              		.align	1
  19              		.global	disable_jtag
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	disable_jtag:
  26              	.LFB5:
  27              		.file 1 "tmk_core/common/keyboard.c"
   1:tmk_core/common/keyboard.c **** /*
   2:tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.c **** 
   4:tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.c **** (at your option) any later version.
   8:tmk_core/common/keyboard.c **** 
   9:tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.c **** 
  14:tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.c **** */
  17:tmk_core/common/keyboard.c **** 
  18:tmk_core/common/keyboard.c **** #include <stdint.h>
  19:tmk_core/common/keyboard.c **** #include "keyboard.h"
  20:tmk_core/common/keyboard.c **** #include "matrix.h"
  21:tmk_core/common/keyboard.c **** #include "keymap.h"
  22:tmk_core/common/keyboard.c **** #include "host.h"
  23:tmk_core/common/keyboard.c **** #include "led.h"
  24:tmk_core/common/keyboard.c **** #include "keycode.h"
  25:tmk_core/common/keyboard.c **** #include "timer.h"
  26:tmk_core/common/keyboard.c **** #include "print.h"
  27:tmk_core/common/keyboard.c **** #include "debug.h"
  28:tmk_core/common/keyboard.c **** #include "command.h"
  29:tmk_core/common/keyboard.c **** #include "util.h"
  30:tmk_core/common/keyboard.c **** #include "sendchar.h"
  31:tmk_core/common/keyboard.c **** #include "eeconfig.h"
  32:tmk_core/common/keyboard.c **** #include "backlight.h"
  33:tmk_core/common/keyboard.c **** #include "action_layer.h"
  34:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  35:tmk_core/common/keyboard.c **** #    include "bootmagic.h"
  36:tmk_core/common/keyboard.c **** #else
  37:tmk_core/common/keyboard.c **** #    include "magic.h"
  38:tmk_core/common/keyboard.c **** #endif
  39:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  40:tmk_core/common/keyboard.c **** #    include "mousekey.h"
  41:tmk_core/common/keyboard.c **** #endif
  42:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  43:tmk_core/common/keyboard.c **** #    include "ps2_mouse.h"
  44:tmk_core/common/keyboard.c **** #endif
  45:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  46:tmk_core/common/keyboard.c **** #    include "serial_mouse.h"
  47:tmk_core/common/keyboard.c **** #endif
  48:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  49:tmk_core/common/keyboard.c **** #    include "adb.h"
  50:tmk_core/common/keyboard.c **** #endif
  51:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  52:tmk_core/common/keyboard.c **** #    include "rgblight.h"
  53:tmk_core/common/keyboard.c **** #endif
  54:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
  55:tmk_core/common/keyboard.c **** #    include "process_steno.h"
  56:tmk_core/common/keyboard.c **** #endif
  57:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
  58:tmk_core/common/keyboard.c **** #    include "fauxclicky.h"
  59:tmk_core/common/keyboard.c **** #endif
  60:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  61:tmk_core/common/keyboard.c **** #    include "serial_link/system/serial_link.h"
  62:tmk_core/common/keyboard.c **** #endif
  63:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  64:tmk_core/common/keyboard.c **** #    include "visualizer/visualizer.h"
  65:tmk_core/common/keyboard.c **** #endif
  66:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
  67:tmk_core/common/keyboard.c **** #    include "pointing_device.h"
  68:tmk_core/common/keyboard.c **** #endif
  69:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
  70:tmk_core/common/keyboard.c **** #    include "process_midi.h"
  71:tmk_core/common/keyboard.c **** #endif
  72:tmk_core/common/keyboard.c **** #ifdef HD44780_ENABLE
  73:tmk_core/common/keyboard.c **** #    include "hd44780.h"
  74:tmk_core/common/keyboard.c **** #endif
  75:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
  76:tmk_core/common/keyboard.c **** #    include "qwiic.h"
  77:tmk_core/common/keyboard.c **** #endif
  78:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
  79:tmk_core/common/keyboard.c **** #    include "oled_driver.h"
  80:tmk_core/common/keyboard.c **** #endif
  81:tmk_core/common/keyboard.c **** #ifdef VELOCIKEY_ENABLE
  82:tmk_core/common/keyboard.c **** #    include "velocikey.h"
  83:tmk_core/common/keyboard.c **** #endif
  84:tmk_core/common/keyboard.c **** 
  85:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  86:tmk_core/common/keyboard.c **** extern const uint16_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
  87:tmk_core/common/keyboard.c **** static matrix_row_t   get_real_keys(uint8_t row, matrix_row_t rowdata) {
  88:tmk_core/common/keyboard.c ****     matrix_row_t out = 0;
  89:tmk_core/common/keyboard.c ****     for (uint8_t col = 0; col < MATRIX_COLS; col++) {
  90:tmk_core/common/keyboard.c ****         // read each key in the row data and check if the keymap defines it as a real key
  91:tmk_core/common/keyboard.c ****         if (pgm_read_byte(&keymaps[0][row][col]) && (rowdata & (1 << col))) {
  92:tmk_core/common/keyboard.c ****             // this creates new row data, if a key is defined in the keymap, it will be set here
  93:tmk_core/common/keyboard.c ****             out |= 1 << col;
  94:tmk_core/common/keyboard.c ****         }
  95:tmk_core/common/keyboard.c ****     }
  96:tmk_core/common/keyboard.c ****     return out;
  97:tmk_core/common/keyboard.c **** }
  98:tmk_core/common/keyboard.c **** 
  99:tmk_core/common/keyboard.c **** static inline bool popcount_more_than_one(matrix_row_t rowdata) {
 100:tmk_core/common/keyboard.c ****     rowdata &= rowdata - 1;  // if there are less than two bits (keys) set, rowdata will become zer
 101:tmk_core/common/keyboard.c ****     return rowdata;
 102:tmk_core/common/keyboard.c **** }
 103:tmk_core/common/keyboard.c **** 
 104:tmk_core/common/keyboard.c **** static inline bool has_ghost_in_row(uint8_t row, matrix_row_t rowdata) {
 105:tmk_core/common/keyboard.c ****     /* No ghost exists when less than 2 keys are down on the row.
 106:tmk_core/common/keyboard.c ****     If there are "active" blanks in the matrix, the key can't be pressed by the user,
 107:tmk_core/common/keyboard.c ****     there is no doubt as to which keys are really being pressed.
 108:tmk_core/common/keyboard.c ****     The ghosts will be ignored, they are KC_NO.   */
 109:tmk_core/common/keyboard.c ****     rowdata = get_real_keys(row, rowdata);
 110:tmk_core/common/keyboard.c ****     if ((popcount_more_than_one(rowdata)) == 0) {
 111:tmk_core/common/keyboard.c ****         return false;
 112:tmk_core/common/keyboard.c ****     }
 113:tmk_core/common/keyboard.c ****     /* Ghost occurs when the row shares a column line with other row,
 114:tmk_core/common/keyboard.c ****     and two columns are read on each row. Blanks in the matrix don't matter,
 115:tmk_core/common/keyboard.c ****     so they are filtered out.
 116:tmk_core/common/keyboard.c ****     If there are two or more real keys pressed and they match columns with
 117:tmk_core/common/keyboard.c ****     at least two of another row's real keys, the row will be ignored. Keep in mind,
 118:tmk_core/common/keyboard.c ****     we are checking one row at a time, not all of them at once.
 119:tmk_core/common/keyboard.c ****     */
 120:tmk_core/common/keyboard.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 121:tmk_core/common/keyboard.c ****         if (i != row && popcount_more_than_one(get_real_keys(i, matrix_get_row(i)) & rowdata)) {
 122:tmk_core/common/keyboard.c ****             return true;
 123:tmk_core/common/keyboard.c ****         }
 124:tmk_core/common/keyboard.c ****     }
 125:tmk_core/common/keyboard.c ****     return false;
 126:tmk_core/common/keyboard.c **** }
 127:tmk_core/common/keyboard.c **** 
 128:tmk_core/common/keyboard.c **** #endif
 129:tmk_core/common/keyboard.c **** 
 130:tmk_core/common/keyboard.c **** void disable_jtag(void) {
  28              		.loc 1 130 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 131:tmk_core/common/keyboard.c **** // To use PF4-7 (PC2-5 on ATmega32A), disable JTAG by writing JTD bit twice within four cycles.
 132:tmk_core/common/keyboard.c **** #if (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_AT90USB1286__) || 
 133:tmk_core/common/keyboard.c ****     MCUCR |= _BV(JTD);
 134:tmk_core/common/keyboard.c ****     MCUCR |= _BV(JTD);
 135:tmk_core/common/keyboard.c **** #elif defined(__AVR_ATmega32A__)
 136:tmk_core/common/keyboard.c ****     MCUCSR |= _BV(JTD);
 137:tmk_core/common/keyboard.c ****     MCUCSR |= _BV(JTD);
 138:tmk_core/common/keyboard.c **** #endif
 139:tmk_core/common/keyboard.c **** }
  33              		.loc 1 139 0
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE5:
  38              		.section	.text.keyboard_pre_init_user,"ax",%progbits
  39              		.align	1
  40              		.weak	keyboard_pre_init_user
  41              		.syntax unified
  42              		.thumb
  43              		.thumb_func
  44              		.fpu fpv4-sp-d16
  46              	keyboard_pre_init_user:
  47              	.LFB7:
 140:tmk_core/common/keyboard.c **** 
 141:tmk_core/common/keyboard.c **** /** \brief matrix_setup
 142:tmk_core/common/keyboard.c ****  *
 143:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 144:tmk_core/common/keyboard.c ****  */
 145:tmk_core/common/keyboard.c **** __attribute__((weak)) void matrix_setup(void) {}
 146:tmk_core/common/keyboard.c **** 
 147:tmk_core/common/keyboard.c **** /** \brief keyboard_pre_init_user
 148:tmk_core/common/keyboard.c ****  *
 149:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 150:tmk_core/common/keyboard.c ****  */
 151:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_pre_init_user(void) {}
  48              		.loc 1 151 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53              		.loc 1 151 0
  54 0000 7047     		bx	lr
  55              		.cfi_endproc
  56              	.LFE7:
  58              		.thumb_set keyboard_pre_init_user.localalias.0,keyboard_pre_init_user
  59              		.section	.text.matrix_setup,"ax",%progbits
  60              		.align	1
  61              		.weak	matrix_setup
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  65              		.fpu fpv4-sp-d16
  67              	matrix_setup:
  68              	.LFB19:
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73 0000 7047     		bx	lr
  74              		.cfi_endproc
  75              	.LFE19:
  77              		.section	.text.keyboard_pre_init_kb,"ax",%progbits
  78              		.align	1
  79              		.weak	keyboard_pre_init_kb
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  83              		.fpu fpv4-sp-d16
  85              	keyboard_pre_init_kb:
  86              	.LFB8:
 152:tmk_core/common/keyboard.c **** 
 153:tmk_core/common/keyboard.c **** /** \brief keyboard_pre_init_kb
 154:tmk_core/common/keyboard.c ****  *
 155:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 156:tmk_core/common/keyboard.c ****  */
 157:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_pre_init_kb(void) { keyboard_pre_init_user(); }
  87              		.loc 1 157 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		.loc 1 157 0
  92 0000 08B5     		push	{r3, lr}
  93              		.cfi_def_cfa_offset 8
  94              		.cfi_offset 3, -8
  95              		.cfi_offset 14, -4
  96              		.loc 1 157 0
  97 0002 FFF7FEFF 		bl	keyboard_pre_init_user
  98              	.LVL0:
  99 0006 08BD     		pop	{r3, pc}
 100              		.cfi_endproc
 101              	.LFE8:
 103              		.section	.text.keyboard_post_init_user,"ax",%progbits
 104              		.align	1
 105              		.weak	keyboard_post_init_user
 106              		.syntax unified
 107              		.thumb
 108              		.thumb_func
 109              		.fpu fpv4-sp-d16
 111              	keyboard_post_init_user:
 112              	.LFB17:
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117 0000 7047     		bx	lr
 118              		.cfi_endproc
 119              	.LFE17:
 121              		.section	.text.keyboard_post_init_kb,"ax",%progbits
 122              		.align	1
 123              		.weak	keyboard_post_init_kb
 124              		.syntax unified
 125              		.thumb
 126              		.thumb_func
 127              		.fpu fpv4-sp-d16
 129              	keyboard_post_init_kb:
 130              	.LFB10:
 158:tmk_core/common/keyboard.c **** 
 159:tmk_core/common/keyboard.c **** /** \brief keyboard_post_init_user
 160:tmk_core/common/keyboard.c ****  *
 161:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 162:tmk_core/common/keyboard.c ****  */
 163:tmk_core/common/keyboard.c **** 
 164:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_post_init_user() {}
 165:tmk_core/common/keyboard.c **** 
 166:tmk_core/common/keyboard.c **** /** \brief keyboard_post_init_kb
 167:tmk_core/common/keyboard.c ****  *
 168:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 169:tmk_core/common/keyboard.c ****  */
 170:tmk_core/common/keyboard.c **** 
 171:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_post_init_kb(void) { keyboard_post_init_user(); }
 131              		.loc 1 171 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 0
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              		.loc 1 171 0
 136 0000 08B5     		push	{r3, lr}
 137              		.cfi_def_cfa_offset 8
 138              		.cfi_offset 3, -8
 139              		.cfi_offset 14, -4
 140              		.loc 1 171 0
 141 0002 FFF7FEFF 		bl	keyboard_post_init_user
 142              	.LVL1:
 143 0006 08BD     		pop	{r3, pc}
 144              		.cfi_endproc
 145              	.LFE10:
 147              		.section	.text.keyboard_setup,"ax",%progbits
 148              		.align	1
 149              		.global	keyboard_setup
 150              		.syntax unified
 151              		.thumb
 152              		.thumb_func
 153              		.fpu fpv4-sp-d16
 155              	keyboard_setup:
 156              	.LFB11:
 172:tmk_core/common/keyboard.c **** 
 173:tmk_core/common/keyboard.c **** /** \brief keyboard_setup
 174:tmk_core/common/keyboard.c ****  *
 175:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 176:tmk_core/common/keyboard.c ****  */
 177:tmk_core/common/keyboard.c **** void keyboard_setup(void) {
 157              		.loc 1 177 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161 0000 08B5     		push	{r3, lr}
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 3, -8
 164              		.cfi_offset 14, -4
 178:tmk_core/common/keyboard.c **** #ifndef NO_JTAG_DISABLE
 179:tmk_core/common/keyboard.c ****     disable_jtag();
 180:tmk_core/common/keyboard.c **** #endif
 181:tmk_core/common/keyboard.c ****     matrix_setup();
 165              		.loc 1 181 0
 166 0002 FFF7FEFF 		bl	matrix_setup
 167              	.LVL2:
 182:tmk_core/common/keyboard.c ****     keyboard_pre_init_kb();
 168              		.loc 1 182 0
 169 0006 FFF7FEFF 		bl	keyboard_pre_init_kb
 170              	.LVL3:
 183:tmk_core/common/keyboard.c **** }
 171              		.loc 1 183 0
 172 000a 08BD     		pop	{r3, pc}
 173              		.cfi_endproc
 174              	.LFE11:
 176              		.section	.text.is_keyboard_master,"ax",%progbits
 177              		.align	1
 178              		.weak	is_keyboard_master
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu fpv4-sp-d16
 184              	is_keyboard_master:
 185              	.LFB12:
 184:tmk_core/common/keyboard.c **** 
 185:tmk_core/common/keyboard.c **** /** \brief is_keyboard_master
 186:tmk_core/common/keyboard.c ****  *
 187:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 188:tmk_core/common/keyboard.c ****  */
 189:tmk_core/common/keyboard.c **** __attribute__((weak)) bool is_keyboard_master(void) { return true; }
 186              		.loc 1 189 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              		@ link register save eliminated.
 191              		.loc 1 189 0
 192 0000 0120     		movs	r0, #1
 193 0002 7047     		bx	lr
 194              		.cfi_endproc
 195              	.LFE12:
 197              		.section	.text.keyboard_init,"ax",%progbits
 198              		.align	1
 199              		.global	keyboard_init
 200              		.syntax unified
 201              		.thumb
 202              		.thumb_func
 203              		.fpu fpv4-sp-d16
 205              	keyboard_init:
 206              	.LFB13:
 190:tmk_core/common/keyboard.c **** 
 191:tmk_core/common/keyboard.c **** /** \brief keyboard_init
 192:tmk_core/common/keyboard.c ****  *
 193:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 194:tmk_core/common/keyboard.c ****  */
 195:tmk_core/common/keyboard.c **** void keyboard_init(void) {
 207              		.loc 1 195 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211 0000 08B5     		push	{r3, lr}
 212              		.cfi_def_cfa_offset 8
 213              		.cfi_offset 3, -8
 214              		.cfi_offset 14, -4
 196:tmk_core/common/keyboard.c ****     timer_init();
 215              		.loc 1 196 0
 216 0002 FFF7FEFF 		bl	timer_init
 217              	.LVL4:
 197:tmk_core/common/keyboard.c ****     matrix_init();
 218              		.loc 1 197 0
 219 0006 FFF7FEFF 		bl	matrix_init
 220              	.LVL5:
 198:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
 199:tmk_core/common/keyboard.c ****     qwiic_init();
 200:tmk_core/common/keyboard.c **** #endif
 201:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
 202:tmk_core/common/keyboard.c ****     oled_init(OLED_ROTATION_0);
 203:tmk_core/common/keyboard.c **** #endif
 204:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 205:tmk_core/common/keyboard.c ****     ps2_mouse_init();
 206:tmk_core/common/keyboard.c **** #endif
 207:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 208:tmk_core/common/keyboard.c ****     serial_mouse_init();
 209:tmk_core/common/keyboard.c **** #endif
 210:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 211:tmk_core/common/keyboard.c ****     adb_mouse_init();
 212:tmk_core/common/keyboard.c **** #endif
 213:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 214:tmk_core/common/keyboard.c ****     bootmagic();
 215:tmk_core/common/keyboard.c **** #else
 216:tmk_core/common/keyboard.c ****     magic();
 221              		.loc 1 216 0
 222 000a FFF7FEFF 		bl	magic
 223              	.LVL6:
 217:tmk_core/common/keyboard.c **** #endif
 218:tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 219:tmk_core/common/keyboard.c ****     backlight_init();
 220:tmk_core/common/keyboard.c **** #endif
 221:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 222:tmk_core/common/keyboard.c ****     rgblight_init();
 223:tmk_core/common/keyboard.c **** #endif
 224:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
 225:tmk_core/common/keyboard.c ****     steno_init();
 226:tmk_core/common/keyboard.c **** #endif
 227:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
 228:tmk_core/common/keyboard.c ****     fauxclicky_init();
 229:tmk_core/common/keyboard.c **** #endif
 230:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 231:tmk_core/common/keyboard.c ****     pointing_device_init();
 232:tmk_core/common/keyboard.c **** #endif
 233:tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 234:tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 235:tmk_core/common/keyboard.c **** #endif
 236:tmk_core/common/keyboard.c ****     keyboard_post_init_kb(); /* Always keep this last */
 224              		.loc 1 236 0
 225 000e FFF7FEFF 		bl	keyboard_post_init_kb
 226              	.LVL7:
 237:tmk_core/common/keyboard.c **** }
 227              		.loc 1 237 0
 228 0012 08BD     		pop	{r3, pc}
 229              		.cfi_endproc
 230              	.LFE13:
 232              		.section	.text.keyboard_task,"ax",%progbits
 233              		.align	1
 234              		.global	keyboard_task
 235              		.syntax unified
 236              		.thumb
 237              		.thumb_func
 238              		.fpu fpv4-sp-d16
 240              	keyboard_task:
 241              	.LFB14:
 238:tmk_core/common/keyboard.c **** 
 239:tmk_core/common/keyboard.c **** /** \brief Keyboard task: Do keyboard routine jobs
 240:tmk_core/common/keyboard.c ****  *
 241:tmk_core/common/keyboard.c ****  * Do routine keyboard jobs:
 242:tmk_core/common/keyboard.c ****  *
 243:tmk_core/common/keyboard.c ****  * * scan matrix
 244:tmk_core/common/keyboard.c ****  * * handle mouse movements
 245:tmk_core/common/keyboard.c ****  * * run visualizer code
 246:tmk_core/common/keyboard.c ****  * * handle midi commands
 247:tmk_core/common/keyboard.c ****  * * light LEDs
 248:tmk_core/common/keyboard.c ****  *
 249:tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 250:tmk_core/common/keyboard.c ****  */
 251:tmk_core/common/keyboard.c **** void keyboard_task(void) {
 242              		.loc 1 251 0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 16
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 246              	.LVL8:
 247 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 248              		.cfi_def_cfa_offset 28
 249              		.cfi_offset 4, -28
 250              		.cfi_offset 5, -24
 251              		.cfi_offset 6, -20
 252              		.cfi_offset 7, -16
 253              		.cfi_offset 8, -12
 254              		.cfi_offset 9, -8
 255              		.cfi_offset 14, -4
 256 0004 85B0     		sub	sp, sp, #20
 257              		.cfi_def_cfa_offset 48
 252:tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 253:tmk_core/common/keyboard.c ****     static uint8_t      led_status    = 0;
 254:tmk_core/common/keyboard.c ****     matrix_row_t        matrix_row    = 0;
 255:tmk_core/common/keyboard.c ****     matrix_row_t        matrix_change = 0;
 256:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 257:tmk_core/common/keyboard.c ****     uint8_t keys_processed = 0;
 258:tmk_core/common/keyboard.c **** #endif
 259:tmk_core/common/keyboard.c **** 
 260:tmk_core/common/keyboard.c **** #if defined(OLED_DRIVER_ENABLE) && !defined(OLED_DISABLE_TIMEOUT)
 261:tmk_core/common/keyboard.c ****     uint8_t ret = matrix_scan();
 262:tmk_core/common/keyboard.c **** #else
 263:tmk_core/common/keyboard.c ****     matrix_scan();
 258              		.loc 1 263 0
 259 0006 FFF7FEFF 		bl	matrix_scan
 260              	.LVL9:
 264:tmk_core/common/keyboard.c **** #endif
 265:tmk_core/common/keyboard.c **** 
 266:tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 261              		.loc 1 266 0
 262 000a FFF7FEFF 		bl	is_keyboard_master
 263              	.LVL10:
 264 000e 324E     		ldr	r6, .L27
 265 0010 0028     		cmp	r0, #0
 266 0012 4AD0     		beq	.L11
 267              	.LBB6:
 267:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 268:tmk_core/common/keyboard.c ****             matrix_row    = matrix_get_row(r);
 269:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 270:tmk_core/common/keyboard.c ****             if (matrix_change) {
 271:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 272:tmk_core/common/keyboard.c ****                 if (has_ghost_in_row(r, matrix_row)) {
 273:tmk_core/common/keyboard.c ****                     continue;
 274:tmk_core/common/keyboard.c ****                 }
 275:tmk_core/common/keyboard.c **** #endif
 276:tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 268              		.loc 1 276 0
 269 0014 DFF8C480 		ldr	r8, .L27+4
 270              	.LBE6:
 271 0018 0024     		movs	r4, #0
 272              	.LVL11:
 273              	.L17:
 274 001a E7B2     		uxtb	r7, r4
 275              	.LVL12:
 276              	.LBB9:
 268:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 277              		.loc 1 268 0
 278 001c 3846     		mov	r0, r7
 279 001e FFF7FEFF 		bl	matrix_get_row
 280              	.LVL13:
 269:tmk_core/common/keyboard.c ****             if (matrix_change) {
 281              		.loc 1 269 0
 282 0022 36F81450 		ldrh	r5, [r6, r4, lsl #1]
 270:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 283              		.loc 1 270 0
 284 0026 8542     		cmp	r5, r0
 268:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 285              		.loc 1 268 0
 286 0028 8146     		mov	r9, r0
 287              	.LVL14:
 270:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 288              		.loc 1 270 0
 289 002a 3BD0     		beq	.L12
 290              		.loc 1 276 0
 291 002c 98F80030 		ldrb	r3, [r8]	@ zero_extendqisi2
 292 0030 9807     		lsls	r0, r3, #30
 293              	.LVL15:
 294 0032 01D5     		bpl	.L13
 295              		.loc 1 276 0 is_stmt 0 discriminator 1
 296 0034 FFF7FEFF 		bl	matrix_print
 297              	.LVL16:
 298              	.L13:
 269:tmk_core/common/keyboard.c ****             if (matrix_change) {
 299              		.loc 1 269 0 is_stmt 1
 300 0038 85EA0905 		eor	r5, r5, r9
 301              	.LBE9:
 302 003c 0023     		movs	r3, #0
 303              	.LBB10:
 304              	.LBB7:
 277:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 278:tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1 << c)) {
 305              		.loc 1 278 0
 306 003e ADB2     		uxth	r5, r5
 307              	.LVL17:
 308              	.L16:
 309 0040 45FA03F1 		asr	r1, r5, r3
 310 0044 C907     		lsls	r1, r1, #31
 311 0046 DAB2     		uxtb	r2, r3
 312              	.LVL18:
 313 0048 29D5     		bpl	.L14
 279:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 280:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & ((matri
 314              		.loc 1 280 0
 315 004a 0125     		movs	r5, #1
 316 004c 9D40     		lsls	r5, r5, r3
 317 004e 19EA050F 		tst	r9, r5
 318 0052 14BF     		ite	ne
 319 0054 0123     		movne	r3, #1
 320 0056 0023     		moveq	r3, #0
 279:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 321              		.loc 1 279 0
 322 0058 8DF80020 		strb	r2, [sp]
 323              		.loc 1 280 0
 324 005c 8DF80230 		strb	r3, [sp, #2]
 279:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 325              		.loc 1 279 0
 326 0060 8DF80170 		strb	r7, [sp, #1]
 327              		.loc 1 280 0
 328 0064 FFF7FEFF 		bl	timer_read
 329              	.LVL19:
 279:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 330              		.loc 1 279 0
 331 0068 40F00100 		orr	r0, r0, #1
 332 006c 6B46     		mov	r3, sp
 333 006e ADF80400 		strh	r0, [sp, #4]	@ movhi
 334 0072 93E80300 		ldm	r3, {r0, r1}
 335 0076 FFF7FEFF 		bl	action_exec
 336              	.LVL20:
 281:tmk_core/common/keyboard.c ****                         });
 282:tmk_core/common/keyboard.c ****                         // record a processed key
 283:tmk_core/common/keyboard.c ****                         matrix_prev[r] ^= ((matrix_row_t)1 << c);
 337              		.loc 1 283 0
 338 007a 36F81430 		ldrh	r3, [r6, r4, lsl #1]
 339 007e 6B40     		eors	r3, r3, r5
 340 0080 26F81430 		strh	r3, [r6, r4, lsl #1]	@ movhi
 341              	.LVL21:
 342              	.L15:
 343              	.LBE7:
 344              	.LBE10:
 284:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 285:tmk_core/common/keyboard.c ****                         // only jump out if we have processed "enough" keys.
 286:tmk_core/common/keyboard.c ****                         if (++keys_processed >= QMK_KEYS_PER_SCAN)
 287:tmk_core/common/keyboard.c **** #endif
 288:tmk_core/common/keyboard.c ****                             // process a key per task call
 289:tmk_core/common/keyboard.c ****                             goto MATRIX_LOOP_END;
 290:tmk_core/common/keyboard.c ****                     }
 291:tmk_core/common/keyboard.c ****                 }
 292:tmk_core/common/keyboard.c ****             }
 293:tmk_core/common/keyboard.c ****         }
 294:tmk_core/common/keyboard.c ****     }
 295:tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 296:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 297:tmk_core/common/keyboard.c ****     // we can get here with some keys processed now.
 298:tmk_core/common/keyboard.c ****     if (!keys_processed)
 299:tmk_core/common/keyboard.c **** #endif
 300:tmk_core/common/keyboard.c ****         action_exec(TICK);
 301:tmk_core/common/keyboard.c **** 
 302:tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 303:tmk_core/common/keyboard.c **** 
 304:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
 305:tmk_core/common/keyboard.c ****     qwiic_task();
 306:tmk_core/common/keyboard.c **** #endif
 307:tmk_core/common/keyboard.c **** 
 308:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
 309:tmk_core/common/keyboard.c ****     oled_task();
 310:tmk_core/common/keyboard.c **** #    ifndef OLED_DISABLE_TIMEOUT
 311:tmk_core/common/keyboard.c ****     // Wake up oled if user is using those fabulous keys!
 312:tmk_core/common/keyboard.c ****     if (ret) oled_on();
 313:tmk_core/common/keyboard.c **** #    endif
 314:tmk_core/common/keyboard.c **** #endif
 315:tmk_core/common/keyboard.c **** 
 316:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 317:tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 318:tmk_core/common/keyboard.c ****     mousekey_task();
 319:tmk_core/common/keyboard.c **** #endif
 320:tmk_core/common/keyboard.c **** 
 321:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 322:tmk_core/common/keyboard.c ****     ps2_mouse_task();
 323:tmk_core/common/keyboard.c **** #endif
 324:tmk_core/common/keyboard.c **** 
 325:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 326:tmk_core/common/keyboard.c ****     serial_mouse_task();
 327:tmk_core/common/keyboard.c **** #endif
 328:tmk_core/common/keyboard.c **** 
 329:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 330:tmk_core/common/keyboard.c ****     adb_mouse_task();
 331:tmk_core/common/keyboard.c **** #endif
 332:tmk_core/common/keyboard.c **** 
 333:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 334:tmk_core/common/keyboard.c ****     serial_link_update();
 335:tmk_core/common/keyboard.c **** #endif
 336:tmk_core/common/keyboard.c **** 
 337:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 338:tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, visualizer_get_mods(), host_keyboard_leds()
 339:tmk_core/common/keyboard.c **** #endif
 340:tmk_core/common/keyboard.c **** 
 341:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 342:tmk_core/common/keyboard.c ****     pointing_device_task();
 343:tmk_core/common/keyboard.c **** #endif
 344:tmk_core/common/keyboard.c **** 
 345:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
 346:tmk_core/common/keyboard.c ****     midi_task();
 347:tmk_core/common/keyboard.c **** #endif
 348:tmk_core/common/keyboard.c **** 
 349:tmk_core/common/keyboard.c **** #ifdef VELOCIKEY_ENABLE
 350:tmk_core/common/keyboard.c ****     if (velocikey_enabled()) {
 351:tmk_core/common/keyboard.c ****         velocikey_decelerate();
 352:tmk_core/common/keyboard.c ****     }
 353:tmk_core/common/keyboard.c **** #endif
 354:tmk_core/common/keyboard.c **** 
 355:tmk_core/common/keyboard.c ****     // update LED
 356:tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 345              		.loc 1 356 0
 346 0084 FFF7FEFF 		bl	host_keyboard_leds
 347              	.LVL22:
 348 0088 B37A     		ldrb	r3, [r6, #10]	@ zero_extendqisi2
 349 008a 8342     		cmp	r3, r0
 350 008c 20D0     		beq	.L10
 357:tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 351              		.loc 1 357 0
 352 008e FFF7FEFF 		bl	host_keyboard_leds
 353              	.LVL23:
 354 0092 B072     		strb	r0, [r6, #10]
 355              	.LVL24:
 358:tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 359:tmk_core/common/keyboard.c ****     }
 360:tmk_core/common/keyboard.c **** }
 356              		.loc 1 360 0
 357 0094 05B0     		add	sp, sp, #20
 358              		.cfi_remember_state
 359              		.cfi_def_cfa_offset 28
 360              		@ sp needed
 361 0096 BDE8F043 		pop	{r4, r5, r6, r7, r8, r9, lr}
 362              		.cfi_restore 14
 363              		.cfi_restore 9
 364              		.cfi_restore 8
 365              		.cfi_restore 7
 366              		.cfi_restore 6
 367              		.cfi_restore 5
 368              		.cfi_restore 4
 369              		.cfi_def_cfa_offset 0
 370              	.LBB11:
 371              	.LBB12:
 361:tmk_core/common/keyboard.c **** 
 362:tmk_core/common/keyboard.c **** /** \brief keyboard set leds
 363:tmk_core/common/keyboard.c ****  *
 364:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 365:tmk_core/common/keyboard.c ****  */
 366:tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds) {
 367:tmk_core/common/keyboard.c ****     if (debug_keyboard) {
 368:tmk_core/common/keyboard.c ****         debug("keyboard_set_led: ");
 369:tmk_core/common/keyboard.c ****         debug_hex8(leds);
 370:tmk_core/common/keyboard.c ****         debug("\n");
 371:tmk_core/common/keyboard.c ****     }
 372:tmk_core/common/keyboard.c ****     led_set(leds);
 372              		.loc 1 372 0
 373 009a FFF7FEBF 		b	led_set
 374              	.LVL25:
 375              	.L14:
 376              		.cfi_restore_state
 377 009e 0133     		adds	r3, r3, #1
 378              	.LVL26:
 379              	.LBE12:
 380              	.LBE11:
 381              	.LBB13:
 382              	.LBB8:
 277:tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1 << c)) {
 383              		.loc 1 277 0 discriminator 2
 384 00a0 0F2B     		cmp	r3, #15
 385 00a2 CDD1     		bne	.L16
 386              	.LVL27:
 387              	.L12:
 388 00a4 0134     		adds	r4, r4, #1
 389              	.LVL28:
 390              	.LBE8:
 267:tmk_core/common/keyboard.c ****             matrix_row    = matrix_get_row(r);
 391              		.loc 1 267 0
 392 00a6 052C     		cmp	r4, #5
 393 00a8 B7D1     		bne	.L17
 394              	.LVL29:
 395              	.L11:
 396              	.LBE13:
 300:tmk_core/common/keyboard.c **** 
 397              		.loc 1 300 0
 398 00aa 4FF6FF73 		movw	r3, #65535
 399 00ae ADF80830 		strh	r3, [sp, #8]	@ movhi
 400 00b2 0023     		movs	r3, #0
 401 00b4 8DF80A30 		strb	r3, [sp, #10]
 402 00b8 FFF7FEFF 		bl	timer_read
 403              	.LVL30:
 404 00bc 40F00100 		orr	r0, r0, #1
 405 00c0 ADF80C00 		strh	r0, [sp, #12]	@ movhi
 406 00c4 04AB     		add	r3, sp, #16
 407 00c6 13E90300 		ldmdb	r3, {r0, r1}
 408 00ca FFF7FEFF 		bl	action_exec
 409              	.LVL31:
 410 00ce D9E7     		b	.L15
 411              	.L10:
 360:tmk_core/common/keyboard.c **** 
 412              		.loc 1 360 0
 413 00d0 05B0     		add	sp, sp, #20
 414              		.cfi_def_cfa_offset 28
 415              		@ sp needed
 416 00d2 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 417              	.L28:
 418 00d6 00BF     		.align	2
 419              	.L27:
 420 00d8 00000000 		.word	.LANCHOR0
 421 00dc 00000000 		.word	debug_config
 422              		.cfi_endproc
 423              	.LFE14:
 425              		.section	.text.keyboard_set_leds,"ax",%progbits
 426              		.align	1
 427              		.global	keyboard_set_leds
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 431              		.fpu fpv4-sp-d16
 433              	keyboard_set_leds:
 434              	.LFB15:
 366:tmk_core/common/keyboard.c ****     if (debug_keyboard) {
 435              		.loc 1 366 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 440              	.LVL32:
 441              		.loc 1 372 0
 442 0000 FFF7FEBF 		b	led_set
 443              	.LVL33:
 444              		.cfi_endproc
 445              	.LFE15:
 447              		.bss
 448              		.align	1
 449              		.set	.LANCHOR0,. + 0
 452              	matrix_prev.6612:
 453 0000 00000000 		.space	10
 453      00000000 
 453      0000
 456              	led_status.6613:
 457 000a 00       		.space	1
 458              		.text
 459              	.Letext0:
 460              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 461              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 462              		.file 4 "tmk_core/common/keyboard.h"
 463              		.file 5 "tmk_core/common/matrix.h"
 464              		.file 6 "tmk_core/common/action.h"
 465              		.file 7 "tmk_core/common/host.h"
 466              		.file 8 "tmk_core/common/debug.h"
 467              		.file 9 "quantum/keycode_config.h"
 468              		.file 10 "quantum/keymap.h"
 469              		.file 11 "tmk_core/common/timer.h"
 470              		.file 12 "tmk_core/common/command.h"
 471              		.file 13 "tmk_core/common/action_layer.h"
 472              		.file 14 "tmk_core/common/led.h"
 473              		.file 15 "tmk_core/common/magic.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
/var/tmp//cc5xe7co.s:18     .text.disable_jtag:0000000000000000 $t
/var/tmp//cc5xe7co.s:25     .text.disable_jtag:0000000000000000 disable_jtag
/var/tmp//cc5xe7co.s:39     .text.keyboard_pre_init_user:0000000000000000 $t
/var/tmp//cc5xe7co.s:46     .text.keyboard_pre_init_user:0000000000000000 keyboard_pre_init_user
/var/tmp//cc5xe7co.s:46     .text.keyboard_pre_init_user:0000000000000000 keyboard_pre_init_user.localalias.0
/var/tmp//cc5xe7co.s:60     .text.matrix_setup:0000000000000000 $t
/var/tmp//cc5xe7co.s:67     .text.matrix_setup:0000000000000000 matrix_setup
/var/tmp//cc5xe7co.s:78     .text.keyboard_pre_init_kb:0000000000000000 $t
/var/tmp//cc5xe7co.s:85     .text.keyboard_pre_init_kb:0000000000000000 keyboard_pre_init_kb
/var/tmp//cc5xe7co.s:104    .text.keyboard_post_init_user:0000000000000000 $t
/var/tmp//cc5xe7co.s:111    .text.keyboard_post_init_user:0000000000000000 keyboard_post_init_user
/var/tmp//cc5xe7co.s:122    .text.keyboard_post_init_kb:0000000000000000 $t
/var/tmp//cc5xe7co.s:129    .text.keyboard_post_init_kb:0000000000000000 keyboard_post_init_kb
/var/tmp//cc5xe7co.s:148    .text.keyboard_setup:0000000000000000 $t
/var/tmp//cc5xe7co.s:155    .text.keyboard_setup:0000000000000000 keyboard_setup
/var/tmp//cc5xe7co.s:177    .text.is_keyboard_master:0000000000000000 $t
/var/tmp//cc5xe7co.s:184    .text.is_keyboard_master:0000000000000000 is_keyboard_master
/var/tmp//cc5xe7co.s:198    .text.keyboard_init:0000000000000000 $t
/var/tmp//cc5xe7co.s:205    .text.keyboard_init:0000000000000000 keyboard_init
/var/tmp//cc5xe7co.s:233    .text.keyboard_task:0000000000000000 $t
/var/tmp//cc5xe7co.s:240    .text.keyboard_task:0000000000000000 keyboard_task
/var/tmp//cc5xe7co.s:420    .text.keyboard_task:00000000000000d8 $d
/var/tmp//cc5xe7co.s:426    .text.keyboard_set_leds:0000000000000000 $t
/var/tmp//cc5xe7co.s:433    .text.keyboard_set_leds:0000000000000000 keyboard_set_leds
/var/tmp//cc5xe7co.s:448    .bss:0000000000000000 $d
/var/tmp//cc5xe7co.s:452    .bss:0000000000000000 matrix_prev.6612
/var/tmp//cc5xe7co.s:456    .bss:000000000000000a led_status.6613

UNDEFINED SYMBOLS
timer_init
matrix_init
magic
matrix_scan
matrix_get_row
matrix_print
timer_read
action_exec
host_keyboard_leds
led_set
debug_config
