   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"action_macro.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.action_macro_play,"ax",%progbits
  18              		.align	1
  19              		.global	action_macro_play
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	action_macro_play:
  26              	.LFB6:
  27              		.file 1 "tmk_core/common/action_macro.c"
   1:tmk_core/common/action_macro.c **** /*
   2:tmk_core/common/action_macro.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action_macro.c **** 
   4:tmk_core/common/action_macro.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action_macro.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action_macro.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action_macro.c **** (at your option) any later version.
   8:tmk_core/common/action_macro.c **** 
   9:tmk_core/common/action_macro.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action_macro.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action_macro.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action_macro.c **** GNU General Public License for more details.
  13:tmk_core/common/action_macro.c **** 
  14:tmk_core/common/action_macro.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action_macro.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action_macro.c **** */
  17:tmk_core/common/action_macro.c **** #include "action.h"
  18:tmk_core/common/action_macro.c **** #include "action_util.h"
  19:tmk_core/common/action_macro.c **** #include "action_macro.h"
  20:tmk_core/common/action_macro.c **** #include "wait.h"
  21:tmk_core/common/action_macro.c **** 
  22:tmk_core/common/action_macro.c **** #ifdef DEBUG_ACTION
  23:tmk_core/common/action_macro.c **** #    include "debug.h"
  24:tmk_core/common/action_macro.c **** #else
  25:tmk_core/common/action_macro.c **** #    include "nodebug.h"
  26:tmk_core/common/action_macro.c **** #endif
  27:tmk_core/common/action_macro.c **** 
  28:tmk_core/common/action_macro.c **** #ifndef NO_ACTION_MACRO
  29:tmk_core/common/action_macro.c **** 
  30:tmk_core/common/action_macro.c **** #    define MACRO_READ() (macro = MACRO_GET(macro_p++))
  31:tmk_core/common/action_macro.c **** /** \brief Action Macro Play
  32:tmk_core/common/action_macro.c ****  *
  33:tmk_core/common/action_macro.c ****  * FIXME: Needs doc
  34:tmk_core/common/action_macro.c ****  */
  35:tmk_core/common/action_macro.c **** void action_macro_play(const macro_t *macro_p) {
  28              		.loc 1 35 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  34              		.cfi_def_cfa_offset 24
  35              		.cfi_offset 3, -24
  36              		.cfi_offset 4, -20
  37              		.cfi_offset 5, -16
  38              		.cfi_offset 6, -12
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  36:tmk_core/common/action_macro.c ****     macro_t macro    = END;
  37:tmk_core/common/action_macro.c ****     uint8_t interval = 0;
  38:tmk_core/common/action_macro.c **** 
  39:tmk_core/common/action_macro.c ****     if (!macro_p) return;
  41              		.loc 1 39 0
  42 0002 0346     		mov	r3, r0
  43 0004 60B1     		cbz	r0, .L1
  37:tmk_core/common/action_macro.c **** 
  44              		.loc 1 37 0
  45 0006 0025     		movs	r5, #0
  40:tmk_core/common/action_macro.c ****     while (true) {
  41:tmk_core/common/action_macro.c ****         switch (MACRO_READ()) {
  42:tmk_core/common/action_macro.c ****             case KEY_DOWN:
  43:tmk_core/common/action_macro.c ****                 MACRO_READ();
  44:tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
  45:tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  46:tmk_core/common/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
  47:tmk_core/common/action_macro.c ****                     send_keyboard_report();
  48:tmk_core/common/action_macro.c ****                 } else {
  49:tmk_core/common/action_macro.c ****                     register_code(macro);
  50:tmk_core/common/action_macro.c ****                 }
  51:tmk_core/common/action_macro.c ****                 break;
  52:tmk_core/common/action_macro.c ****             case KEY_UP:
  53:tmk_core/common/action_macro.c ****                 MACRO_READ();
  54:tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
  55:tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  56:tmk_core/common/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
  46              		.loc 1 56 0
  47 0008 0126     		movs	r6, #1
  48              	.LVL1:
  49              	.L17:
  41:tmk_core/common/action_macro.c ****             case KEY_DOWN:
  50              		.loc 1 41 0
  51 000a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
  52 000c 7328     		cmp	r0, #115
  53 000e 03F10104 		add	r4, r3, #1
  54              	.LVL2:
  55 0012 06D8     		bhi	.L3
  56 0014 0428     		cmp	r0, #4
  57 0016 27D2     		bcs	.L4
  58 0018 0128     		cmp	r0, #1
  59 001a 0ED0     		beq	.L5
  60 001c 0228     		cmp	r0, #2
  61 001e 26D0     		beq	.L6
  62              	.LVL3:
  63              	.L1:
  57:tmk_core/common/action_macro.c ****                     send_keyboard_report();
  58:tmk_core/common/action_macro.c ****                 } else {
  59:tmk_core/common/action_macro.c ****                     unregister_code(macro);
  60:tmk_core/common/action_macro.c ****                 }
  61:tmk_core/common/action_macro.c ****                 break;
  62:tmk_core/common/action_macro.c ****             case WAIT:
  63:tmk_core/common/action_macro.c ****                 MACRO_READ();
  64:tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
  65:tmk_core/common/action_macro.c ****                 {
  66:tmk_core/common/action_macro.c ****                     uint8_t ms = macro;
  67:tmk_core/common/action_macro.c ****                     while (ms--) wait_ms(1);
  68:tmk_core/common/action_macro.c ****                 }
  69:tmk_core/common/action_macro.c ****                 break;
  70:tmk_core/common/action_macro.c ****             case INTERVAL:
  71:tmk_core/common/action_macro.c ****                 interval = MACRO_READ();
  72:tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
  73:tmk_core/common/action_macro.c ****                 break;
  74:tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
  75:tmk_core/common/action_macro.c ****                 dprintf("DOWN(%02X)\n", macro);
  76:tmk_core/common/action_macro.c ****                 register_code(macro);
  77:tmk_core/common/action_macro.c ****                 break;
  78:tmk_core/common/action_macro.c ****             case 0x84 ... 0xF3:
  79:tmk_core/common/action_macro.c ****                 dprintf("UP(%02X)\n", macro);
  80:tmk_core/common/action_macro.c ****                 unregister_code(macro & 0x7F);
  81:tmk_core/common/action_macro.c ****                 break;
  82:tmk_core/common/action_macro.c ****             case END:
  83:tmk_core/common/action_macro.c ****             default:
  84:tmk_core/common/action_macro.c ****                 return;
  85:tmk_core/common/action_macro.c ****         }
  86:tmk_core/common/action_macro.c ****         // interval
  87:tmk_core/common/action_macro.c ****         {
  88:tmk_core/common/action_macro.c ****             uint8_t ms = interval;
  89:tmk_core/common/action_macro.c ****             while (ms--) wait_ms(1);
  90:tmk_core/common/action_macro.c ****         }
  91:tmk_core/common/action_macro.c ****     }
  92:tmk_core/common/action_macro.c **** }
  64              		.loc 1 92 0
  65 0020 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
  66              	.LVL4:
  67              	.L3:
  41:tmk_core/common/action_macro.c ****             case KEY_DOWN:
  68              		.loc 1 41 0
  69 0022 7528     		cmp	r0, #117
  70 0024 3DD0     		beq	.L7
  71 0026 31D3     		bcc	.L8
  72 0028 A0F18403 		sub	r3, r0, #132
  73 002c 6F2B     		cmp	r3, #111
  74 002e F7D8     		bhi	.L1
  80:tmk_core/common/action_macro.c ****                 break;
  75              		.loc 1 80 0
  76 0030 00F07F00 		and	r0, r0, #127
  77              	.LVL5:
  78              	.L23:
  79 0034 FFF7FEFF 		bl	unregister_code
  80              	.LVL6:
  81:tmk_core/common/action_macro.c ****             case END:
  81              		.loc 1 81 0
  82 0038 0EE0     		b	.L11
  83              	.LVL7:
  84              	.L5:
  43:tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
  85              		.loc 1 43 0
  86 003a 9C1C     		adds	r4, r3, #2
  87              	.LVL8:
  88 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
  89              	.LVL9:
  45:tmk_core/common/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
  90              		.loc 1 45 0
  91 003e 03F12002 		add	r2, r3, #32
  92 0042 D2B2     		uxtb	r2, r2
  93 0044 072A     		cmp	r2, #7
  94 0046 0ED8     		bhi	.L10
  46:tmk_core/common/action_macro.c ****                     send_keyboard_report();
  95              		.loc 1 46 0
  96 0048 03F00703 		and	r3, r3, #7
  97              	.LVL10:
  98 004c 9840     		lsls	r0, r0, r3
  99 004e C0B2     		uxtb	r0, r0
 100 0050 FFF7FEFF 		bl	add_macro_mods
 101              	.LVL11:
 102              	.L22:
  57:tmk_core/common/action_macro.c ****                 } else {
 103              		.loc 1 57 0
 104 0054 FFF7FEFF 		bl	send_keyboard_report
 105              	.LVL12:
 106              	.L11:
 107              	.LBB2:
  88:tmk_core/common/action_macro.c ****             while (ms--) wait_ms(1);
 108              		.loc 1 88 0
 109 0058 2F46     		mov	r7, r5
 110              	.LVL13:
 111              	.L15:
  89:tmk_core/common/action_macro.c ****         }
 112              		.loc 1 89 0 discriminator 1
 113 005a 013F     		subs	r7, r7, #1
 114              	.LVL14:
 115 005c FFB2     		uxtb	r7, r7
 116              	.LVL15:
 117 005e FF2F     		cmp	r7, #255
 118 0060 22D1     		bne	.L16
 119 0062 2346     		mov	r3, r4
 120 0064 D1E7     		b	.L17
 121              	.LVL16:
 122              	.L10:
 123              	.LBE2:
  49:tmk_core/common/action_macro.c ****                 }
 124              		.loc 1 49 0
 125 0066 1846     		mov	r0, r3
 126              	.LVL17:
 127              	.L4:
  76:tmk_core/common/action_macro.c ****                 break;
 128              		.loc 1 76 0
 129 0068 FFF7FEFF 		bl	register_code
 130              	.LVL18:
  77:tmk_core/common/action_macro.c ****             case 0x84 ... 0xF3:
 131              		.loc 1 77 0
 132 006c F4E7     		b	.L11
 133              	.LVL19:
 134              	.L6:
  53:tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 135              		.loc 1 53 0
 136 006e 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 137              	.LVL20:
 138 0070 9C1C     		adds	r4, r3, #2
 139              	.LVL21:
  55:tmk_core/common/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
 140              		.loc 1 55 0
 141 0072 00F12003 		add	r3, r0, #32
 142 0076 DBB2     		uxtb	r3, r3
 143 0078 072B     		cmp	r3, #7
 144 007a DBD8     		bhi	.L23
  56:tmk_core/common/action_macro.c ****                     send_keyboard_report();
 145              		.loc 1 56 0
 146 007c 00F00700 		and	r0, r0, #7
 147              	.LVL22:
 148 0080 06FA00F0 		lsl	r0, r6, r0
 149 0084 C0B2     		uxtb	r0, r0
 150 0086 FFF7FEFF 		bl	del_macro_mods
 151              	.LVL23:
 152 008a E3E7     		b	.L22
 153              	.LVL24:
 154              	.L8:
  63:tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 155              		.loc 1 63 0
 156 008c 5F78     		ldrb	r7, [r3, #1]	@ zero_extendqisi2
 157 008e 9C1C     		adds	r4, r3, #2
 158              	.LVL25:
 159              	.L13:
 160              	.LBB3:
  67:tmk_core/common/action_macro.c ****                 }
 161              		.loc 1 67 0 discriminator 1
 162 0090 013F     		subs	r7, r7, #1
 163              	.LVL26:
 164 0092 FFB2     		uxtb	r7, r7
 165              	.LVL27:
 166 0094 FF2F     		cmp	r7, #255
 167 0096 DFD0     		beq	.L11
  67:tmk_core/common/action_macro.c ****                 }
 168              		.loc 1 67 0 is_stmt 0 discriminator 2
 169 0098 0120     		movs	r0, #1
 170 009a 0021     		movs	r1, #0
 171 009c FFF7FEFF 		bl	CLK_delay_ms
 172              	.LVL28:
 173 00a0 F6E7     		b	.L13
 174              	.LVL29:
 175              	.L7:
 176              	.LBE3:
  71:tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 177              		.loc 1 71 0 is_stmt 1
 178 00a2 9C1C     		adds	r4, r3, #2
 179              	.LVL30:
 180 00a4 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 181              	.LVL31:
  73:tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
 182              		.loc 1 73 0
 183 00a6 D7E7     		b	.L11
 184              	.LVL32:
 185              	.L16:
 186              	.LBB4:
  89:tmk_core/common/action_macro.c ****         }
 187              		.loc 1 89 0 discriminator 2
 188 00a8 0120     		movs	r0, #1
 189 00aa 0021     		movs	r1, #0
 190 00ac FFF7FEFF 		bl	CLK_delay_ms
 191              	.LVL33:
 192 00b0 D3E7     		b	.L15
 193              	.LBE4:
 194              		.cfi_endproc
 195              	.LFE6:
 197              		.text
 198              	.Letext0:
 199              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 200              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 201              		.file 4 "tmk_core/common/action_macro.h"
 202              		.file 5 "tmk_core/common/keycode.h"
 203              		.file 6 "tmk_core/common/report.h"
 204              		.file 7 "tmk_core/common/action.h"
 205              		.file 8 "tmk_core/common/action_util.h"
 206              		.file 9 "tmk_core/protocol/arm_atsam/clks.h"
 207              		.file 10 "tmk_core/common/debug.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_macro.c
/var/tmp//cctsQbLj.s:18     .text.action_macro_play:0000000000000000 $t
/var/tmp//cctsQbLj.s:25     .text.action_macro_play:0000000000000000 action_macro_play

UNDEFINED SYMBOLS
unregister_code
add_macro_mods
send_keyboard_report
register_code
del_macro_mods
CLK_delay_ms
