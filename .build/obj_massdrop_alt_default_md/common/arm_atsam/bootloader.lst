   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"bootloader.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.bootloader_jump,"ax",%progbits
  18              		.align	1
  19              		.global	bootloader_jump
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	bootloader_jump:
  26              	.LFB123:
  27              		.file 1 "tmk_core/common/arm_atsam/bootloader.c"
   1:tmk_core/common/arm_atsam/bootloader.c **** /* Copyright 2017 Fred Sundvik
   2:tmk_core/common/arm_atsam/bootloader.c ****  *
   3:tmk_core/common/arm_atsam/bootloader.c ****  * This program is free software: you can redistribute it and/or modify
   4:tmk_core/common/arm_atsam/bootloader.c ****  * it under the terms of the GNU General Public License as published by
   5:tmk_core/common/arm_atsam/bootloader.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:tmk_core/common/arm_atsam/bootloader.c ****  * (at your option) any later version.
   7:tmk_core/common/arm_atsam/bootloader.c ****  *
   8:tmk_core/common/arm_atsam/bootloader.c ****  * This program is distributed in the hope that it will be useful,
   9:tmk_core/common/arm_atsam/bootloader.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:tmk_core/common/arm_atsam/bootloader.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:tmk_core/common/arm_atsam/bootloader.c ****  * GNU General Public License for more details.
  12:tmk_core/common/arm_atsam/bootloader.c ****  *
  13:tmk_core/common/arm_atsam/bootloader.c ****  * You should have received a copy of the GNU General Public License
  14:tmk_core/common/arm_atsam/bootloader.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:tmk_core/common/arm_atsam/bootloader.c ****  */
  16:tmk_core/common/arm_atsam/bootloader.c **** 
  17:tmk_core/common/arm_atsam/bootloader.c **** #include "bootloader.h"
  18:tmk_core/common/arm_atsam/bootloader.c **** #include "samd51j18a.h"
  19:tmk_core/common/arm_atsam/bootloader.c **** #include "md_bootloader.h"
  20:tmk_core/common/arm_atsam/bootloader.c **** 
  21:tmk_core/common/arm_atsam/bootloader.c **** // Set watchdog timer to reset. Directs the bootloader to stay in programming mode.
  22:tmk_core/common/arm_atsam/bootloader.c **** void bootloader_jump(void) {
  28              		.loc 1 22 0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  23:tmk_core/common/arm_atsam/bootloader.c **** #ifdef KEYBOARD_massdrop_ctrl
  24:tmk_core/common/arm_atsam/bootloader.c ****     // CTRL keyboards released with bootloader version below must use RAM method. Otherwise use WDT
  25:tmk_core/common/arm_atsam/bootloader.c ****     uint8_t  ver_ram_method[] = "v2.18Jun 22 2018 17:28:08";  // The version to match (NULL termina
  26:tmk_core/common/arm_atsam/bootloader.c ****     uint8_t *ver_check        = ver_ram_method;               // Pointer to version match string fo
  27:tmk_core/common/arm_atsam/bootloader.c ****     uint8_t *ver_rom          = (uint8_t *)0x21A0;            // Pointer to address in ROM where th
  28:tmk_core/common/arm_atsam/bootloader.c **** 
  29:tmk_core/common/arm_atsam/bootloader.c ****     while (*ver_check && *ver_rom == *ver_check) {  // While there are check version characters to 
  30:tmk_core/common/arm_atsam/bootloader.c ****         ver_check++;                                // Move check version pointer to next character
  31:tmk_core/common/arm_atsam/bootloader.c ****         ver_rom++;                                  // Move ROM version pointer to next character
  32:tmk_core/common/arm_atsam/bootloader.c ****     }
  33:tmk_core/common/arm_atsam/bootloader.c **** 
  34:tmk_core/common/arm_atsam/bootloader.c ****     if (!*ver_check) {                   // If check version pointer is NULL, all characters have m
  35:tmk_core/common/arm_atsam/bootloader.c ****         *MAGIC_ADDR = BOOTLOADER_MAGIC;  // Set magic number into RAM
  36:tmk_core/common/arm_atsam/bootloader.c ****         NVIC_SystemReset();              // Perform system reset
  37:tmk_core/common/arm_atsam/bootloader.c ****         while (1) {
  38:tmk_core/common/arm_atsam/bootloader.c ****         }  // Won't get here
  39:tmk_core/common/arm_atsam/bootloader.c ****     }
  40:tmk_core/common/arm_atsam/bootloader.c **** #endif
  41:tmk_core/common/arm_atsam/bootloader.c **** 
  42:tmk_core/common/arm_atsam/bootloader.c ****     WDT->CTRLA.bit.ENABLE = 0;
  34              		.loc 1 42 0
  35 0000 124B     		ldr	r3, .L12
  36 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  37 0004 6FF34102 		bfc	r2, #1, #1
  38 0008 1A70     		strb	r2, [r3]
  39              	.L2:
  43:tmk_core/common/arm_atsam/bootloader.c ****     while (WDT->SYNCBUSY.bit.ENABLE) {
  40              		.loc 1 43 0 discriminator 1
  41 000a 9A68     		ldr	r2, [r3, #8]
  42 000c 9007     		lsls	r0, r2, #30
  43 000e FCD4     		bmi	.L2
  44              	.L3:
  44:tmk_core/common/arm_atsam/bootloader.c ****     }
  45:tmk_core/common/arm_atsam/bootloader.c ****     while (WDT->CTRLA.bit.ENABLE) {
  45              		.loc 1 45 0 discriminator 1
  46 0010 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  47 0012 C2F34002 		ubfx	r2, r2, #1, #1
  48 0016 002A     		cmp	r2, #0
  49 0018 FAD1     		bne	.L3
  46:tmk_core/common/arm_atsam/bootloader.c ****     }
  47:tmk_core/common/arm_atsam/bootloader.c ****     WDT->CONFIG.bit.WINDOW   = 0;
  50              		.loc 1 47 0
  51 001a 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
  52 001c 62F30711 		bfi	r1, r2, #4, #4
  53 0020 5970     		strb	r1, [r3, #1]
  48:tmk_core/common/arm_atsam/bootloader.c ****     WDT->CONFIG.bit.PER      = 0;
  54              		.loc 1 48 0
  55 0022 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
  56 0024 62F30301 		bfi	r1, r2, #0, #4
  57 0028 5970     		strb	r1, [r3, #1]
  49:tmk_core/common/arm_atsam/bootloader.c ****     WDT->EWCTRL.bit.EWOFFSET = 0;
  58              		.loc 1 49 0
  59 002a 9978     		ldrb	r1, [r3, #2]	@ zero_extendqisi2
  60 002c 62F30301 		bfi	r1, r2, #0, #4
  61 0030 9970     		strb	r1, [r3, #2]
  50:tmk_core/common/arm_atsam/bootloader.c ****     WDT->CTRLA.bit.ENABLE    = 1;
  62              		.loc 1 50 0
  63 0032 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  64 0034 42F00202 		orr	r2, r2, #2
  65 0038 1A70     		strb	r2, [r3]
  51:tmk_core/common/arm_atsam/bootloader.c ****     while (WDT->SYNCBUSY.bit.ENABLE) {
  66              		.loc 1 51 0
  67 003a 044B     		ldr	r3, .L12
  68 003c 1A46     		mov	r2, r3
  69              	.L4:
  70              		.loc 1 51 0 is_stmt 0 discriminator 1
  71 003e 9968     		ldr	r1, [r3, #8]
  72 0040 8907     		lsls	r1, r1, #30
  73 0042 FCD4     		bmi	.L4
  74              	.L5:
  52:tmk_core/common/arm_atsam/bootloader.c ****     }
  53:tmk_core/common/arm_atsam/bootloader.c ****     while (!WDT->CTRLA.bit.ENABLE) {
  75              		.loc 1 53 0 is_stmt 1 discriminator 1
  76 0044 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  77 0046 9B07     		lsls	r3, r3, #30
  78 0048 FCD5     		bpl	.L5
  79              	.L6:
  80 004a FEE7     		b	.L6
  81              	.L13:
  82              		.align	2
  83              	.L12:
  84 004c 00200040 		.word	1073750016
  85              		.cfi_endproc
  86              	.LFE123:
  88              		.text
  89              	.Letext0:
  90              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
  91              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
  92              		.file 4 "lib/arm_atsam/packs/atmel/SAMD51_DFP/1.0.70/include/samd51j18a.h"
  93              		.file 5 "lib/arm_atsam/packs/arm/cmsis/5.0.1/CMSIS/Include/core_cm4.h"
  94              		.file 6 "lib/arm_atsam/packs/atmel/SAMD51_DFP/1.0.70/include/system_samd51.h"
  95              		.file 7 "lib/arm_atsam/packs/atmel/SAMD51_DFP/1.0.70/include/component/wdt.h"
  96              		.file 8 "tmk_core/protocol/arm_atsam/md_bootloader.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 bootloader.c
/var/tmp//ccV7Dj1V.s:18     .text.bootloader_jump:0000000000000000 $t
/var/tmp//ccV7Dj1V.s:25     .text.bootloader_jump:0000000000000000 bootloader_jump
/var/tmp//ccV7Dj1V.s:84     .text.bootloader_jump:000000000000004c $d

NO UNDEFINED SYMBOLS
