   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"action_util.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.add_key,"ax",%progbits
  18              		.align	1
  19              		.global	add_key
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	add_key:
  26              	.LFB0:
  27              		.file 1 "tmk_core/common/action_util.h"
   1:tmk_core/common/action_util.h **** /*
   2:tmk_core/common/action_util.h **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action_util.h **** 
   4:tmk_core/common/action_util.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action_util.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action_util.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action_util.h **** (at your option) any later version.
   8:tmk_core/common/action_util.h **** 
   9:tmk_core/common/action_util.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action_util.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action_util.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action_util.h **** GNU General Public License for more details.
  13:tmk_core/common/action_util.h **** 
  14:tmk_core/common/action_util.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action_util.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action_util.h **** */
  17:tmk_core/common/action_util.h **** #ifndef ACTION_UTIL_H
  18:tmk_core/common/action_util.h **** #define ACTION_UTIL_H
  19:tmk_core/common/action_util.h **** 
  20:tmk_core/common/action_util.h **** #include <stdint.h>
  21:tmk_core/common/action_util.h **** #include "report.h"
  22:tmk_core/common/action_util.h **** 
  23:tmk_core/common/action_util.h **** #ifdef __cplusplus
  24:tmk_core/common/action_util.h **** extern "C" {
  25:tmk_core/common/action_util.h **** #endif
  26:tmk_core/common/action_util.h **** 
  27:tmk_core/common/action_util.h **** extern report_keyboard_t *keyboard_report;
  28:tmk_core/common/action_util.h **** 
  29:tmk_core/common/action_util.h **** void send_keyboard_report(void);
  30:tmk_core/common/action_util.h **** 
  31:tmk_core/common/action_util.h **** /* key */
  32:tmk_core/common/action_util.h **** inline void add_key(uint8_t key) { add_key_to_report(keyboard_report, key); }
  28              		.loc 1 32 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34              		.loc 1 32 0
  35 0000 024B     		ldr	r3, .L2
  36 0002 0146     		mov	r1, r0
  37 0004 1868     		ldr	r0, [r3]
  38              	.LVL1:
  39 0006 FFF7FEBF 		b	add_key_to_report
  40              	.LVL2:
  41              	.L3:
  42 000a 00BF     		.align	2
  43              	.L2:
  44 000c 00000000 		.word	.LANCHOR0
  45              		.cfi_endproc
  46              	.LFE0:
  48              		.section	.text.del_key,"ax",%progbits
  49              		.align	1
  50              		.global	del_key
  51              		.syntax unified
  52              		.thumb
  53              		.thumb_func
  54              		.fpu fpv4-sp-d16
  56              	del_key:
  57              	.LFB1:
  33:tmk_core/common/action_util.h **** 
  34:tmk_core/common/action_util.h **** inline void del_key(uint8_t key) { del_key_from_report(keyboard_report, key); }
  58              		.loc 1 34 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63              	.LVL3:
  64              		.loc 1 34 0
  65 0000 024B     		ldr	r3, .L5
  66 0002 0146     		mov	r1, r0
  67 0004 1868     		ldr	r0, [r3]
  68              	.LVL4:
  69 0006 FFF7FEBF 		b	del_key_from_report
  70              	.LVL5:
  71              	.L6:
  72 000a 00BF     		.align	2
  73              	.L5:
  74 000c 00000000 		.word	.LANCHOR0
  75              		.cfi_endproc
  76              	.LFE1:
  78              		.section	.text.clear_keys,"ax",%progbits
  79              		.align	1
  80              		.global	clear_keys
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu fpv4-sp-d16
  86              	clear_keys:
  87              	.LFB2:
  35:tmk_core/common/action_util.h **** 
  36:tmk_core/common/action_util.h **** inline void clear_keys(void) { clear_keys_from_report(keyboard_report); }
  88              		.loc 1 36 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              		@ link register save eliminated.
  93              		.loc 1 36 0
  94 0000 014B     		ldr	r3, .L8
  95 0002 1868     		ldr	r0, [r3]
  96 0004 FFF7FEBF 		b	clear_keys_from_report
  97              	.LVL6:
  98              	.L9:
  99              		.align	2
 100              	.L8:
 101 0008 00000000 		.word	.LANCHOR0
 102              		.cfi_endproc
 103              	.LFE2:
 105              		.section	.text.get_oneshot_locked_mods,"ax",%progbits
 106              		.align	1
 107              		.global	get_oneshot_locked_mods
 108              		.syntax unified
 109              		.thumb
 110              		.thumb_func
 111              		.fpu fpv4-sp-d16
 113              	get_oneshot_locked_mods:
 114              	.LFB8:
 115              		.file 2 "tmk_core/common/action_util.c"
   1:tmk_core/common/action_util.c **** /*
   2:tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action_util.c **** 
   4:tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action_util.c **** (at your option) any later version.
   8:tmk_core/common/action_util.c **** 
   9:tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:tmk_core/common/action_util.c **** 
  14:tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action_util.c **** */
  17:tmk_core/common/action_util.c **** #include "host.h"
  18:tmk_core/common/action_util.c **** #include "report.h"
  19:tmk_core/common/action_util.c **** #include "debug.h"
  20:tmk_core/common/action_util.c **** #include "action_util.h"
  21:tmk_core/common/action_util.c **** #include "action_layer.h"
  22:tmk_core/common/action_util.c **** #include "timer.h"
  23:tmk_core/common/action_util.c **** #include "keycode_config.h"
  24:tmk_core/common/action_util.c **** 
  25:tmk_core/common/action_util.c **** extern keymap_config_t keymap_config;
  26:tmk_core/common/action_util.c **** 
  27:tmk_core/common/action_util.c **** static uint8_t real_mods  = 0;
  28:tmk_core/common/action_util.c **** static uint8_t weak_mods  = 0;
  29:tmk_core/common/action_util.c **** static uint8_t macro_mods = 0;
  30:tmk_core/common/action_util.c **** 
  31:tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  32:tmk_core/common/action_util.c **** #    define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  33:tmk_core/common/action_util.c **** #    define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  34:tmk_core/common/action_util.c **** #    define RO_INC(a) RO_ADD(a, 1)
  35:tmk_core/common/action_util.c **** #    define RO_DEC(a) RO_SUB(a, 1)
  36:tmk_core/common/action_util.c **** static int8_t cb_head  = 0;
  37:tmk_core/common/action_util.c **** static int8_t cb_tail  = 0;
  38:tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  39:tmk_core/common/action_util.c **** #endif
  40:tmk_core/common/action_util.c **** 
  41:tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  42:tmk_core/common/action_util.c **** // report_keyboard_t keyboard_report = {};
  43:tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  44:tmk_core/common/action_util.c **** 
  45:tmk_core/common/action_util.c **** extern inline void add_key(uint8_t key);
  46:tmk_core/common/action_util.c **** extern inline void del_key(uint8_t key);
  47:tmk_core/common/action_util.c **** extern inline void clear_keys(void);
  48:tmk_core/common/action_util.c **** 
  49:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  50:tmk_core/common/action_util.c **** static uint8_t oneshot_mods        = 0;
  51:tmk_core/common/action_util.c **** static uint8_t oneshot_locked_mods = 0;
  52:tmk_core/common/action_util.c **** uint8_t        get_oneshot_locked_mods(void) { return oneshot_locked_mods; }
 116              		.loc 2 52 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121              		.loc 2 52 0
 122 0000 014B     		ldr	r3, .L11
 123 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 124 0004 7047     		bx	lr
 125              	.L12:
 126 0006 00BF     		.align	2
 127              	.L11:
 128 0008 00000000 		.word	.LANCHOR1
 129              		.cfi_endproc
 130              	.LFE8:
 132              		.section	.text.has_oneshot_mods_timed_out,"ax",%progbits
 133              		.align	1
 134              		.global	has_oneshot_mods_timed_out
 135              		.syntax unified
 136              		.thumb
 137              		.thumb_func
 138              		.fpu fpv4-sp-d16
 140              	has_oneshot_mods_timed_out:
 141              	.LFB11:
  53:tmk_core/common/action_util.c **** void           set_oneshot_locked_mods(uint8_t mods) {
  54:tmk_core/common/action_util.c ****     if (mods != oneshot_locked_mods) {
  55:tmk_core/common/action_util.c ****         oneshot_locked_mods = mods;
  56:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
  57:tmk_core/common/action_util.c ****     }
  58:tmk_core/common/action_util.c **** }
  59:tmk_core/common/action_util.c **** void clear_oneshot_locked_mods(void) {
  60:tmk_core/common/action_util.c ****     if (oneshot_locked_mods) {
  61:tmk_core/common/action_util.c ****         oneshot_locked_mods = 0;
  62:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
  63:tmk_core/common/action_util.c ****     }
  64:tmk_core/common/action_util.c **** }
  65:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  66:tmk_core/common/action_util.c **** static uint16_t oneshot_time = 0;
  67:tmk_core/common/action_util.c **** bool            has_oneshot_mods_timed_out(void) { return TIMER_DIFF_16(timer_read(), oneshot_time)
  68:tmk_core/common/action_util.c **** #    else
  69:tmk_core/common/action_util.c **** bool has_oneshot_mods_timed_out(void) { return false; }
 142              		.loc 2 69 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              		@ link register save eliminated.
 147              		.loc 2 69 0
 148 0000 0020     		movs	r0, #0
 149 0002 7047     		bx	lr
 150              		.cfi_endproc
 151              	.LFE11:
 153              		.section	.text.get_oneshot_layer,"ax",%progbits
 154              		.align	1
 155              		.global	get_oneshot_layer
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 159              		.fpu fpv4-sp-d16
 161              	get_oneshot_layer:
 162              	.LFB12:
  70:tmk_core/common/action_util.c **** #    endif
  71:tmk_core/common/action_util.c **** #endif
  72:tmk_core/common/action_util.c **** 
  73:tmk_core/common/action_util.c **** /* oneshot layer */
  74:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  75:tmk_core/common/action_util.c **** /** \brief oneshot_layer_data bits
  76:tmk_core/common/action_util.c ****  * LLLL LSSS
  77:tmk_core/common/action_util.c ****  * where:
  78:tmk_core/common/action_util.c ****  *   L => are layer bits
  79:tmk_core/common/action_util.c ****  *   S => oneshot state bits
  80:tmk_core/common/action_util.c ****  */
  81:tmk_core/common/action_util.c **** static int8_t oneshot_layer_data = 0;
  82:tmk_core/common/action_util.c **** 
  83:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
 163              		.loc 2 83 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 168              		.loc 2 83 0
 169 0000 024B     		ldr	r3, .L15
 170 0002 93F90100 		ldrsb	r0, [r3, #1]
 171 0006 C0F3C700 		ubfx	r0, r0, #3, #8
 172 000a 7047     		bx	lr
 173              	.L16:
 174              		.align	2
 175              	.L15:
 176 000c 00000000 		.word	.LANCHOR1
 177              		.cfi_endproc
 178              	.LFE12:
 180              		.section	.text.get_oneshot_layer_state,"ax",%progbits
 181              		.align	1
 182              		.global	get_oneshot_layer_state
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu fpv4-sp-d16
 188              	get_oneshot_layer_state:
 189              	.LFB13:
  84:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 190              		.loc 2 84 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 195              		.loc 2 84 0
 196 0000 024B     		ldr	r3, .L18
 197 0002 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 198 0004 00F00700 		and	r0, r0, #7
 199 0008 7047     		bx	lr
 200              	.L19:
 201 000a 00BF     		.align	2
 202              	.L18:
 203 000c 00000000 		.word	.LANCHOR1
 204              		.cfi_endproc
 205              	.LFE13:
 207              		.section	.text.is_oneshot_layer_active,"ax",%progbits
 208              		.align	1
 209              		.global	is_oneshot_layer_active
 210              		.syntax unified
 211              		.thumb
 212              		.thumb_func
 213              		.fpu fpv4-sp-d16
 215              	is_oneshot_layer_active:
 216              	.LFB17:
  85:tmk_core/common/action_util.c **** 
  86:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  87:tmk_core/common/action_util.c **** static uint16_t oneshot_layer_time = 0;
  88:tmk_core/common/action_util.c **** inline bool     has_oneshot_layer_timed_out() { return TIMER_DIFF_16(timer_read(), oneshot_layer_ti
  89:tmk_core/common/action_util.c **** #    endif
  90:tmk_core/common/action_util.c **** 
  91:tmk_core/common/action_util.c **** /** \brief Set oneshot layer
  92:tmk_core/common/action_util.c ****  *
  93:tmk_core/common/action_util.c ****  * FIXME: needs doc
  94:tmk_core/common/action_util.c ****  */
  95:tmk_core/common/action_util.c **** void set_oneshot_layer(uint8_t layer, uint8_t state) {
  96:tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
  97:tmk_core/common/action_util.c ****     layer_on(layer);
  98:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  99:tmk_core/common/action_util.c ****     oneshot_layer_time = timer_read();
 100:tmk_core/common/action_util.c **** #    endif
 101:tmk_core/common/action_util.c ****     oneshot_layer_changed_kb(get_oneshot_layer());
 102:tmk_core/common/action_util.c **** }
 103:tmk_core/common/action_util.c **** /** \brief Reset oneshot layer
 104:tmk_core/common/action_util.c ****  *
 105:tmk_core/common/action_util.c ****  * FIXME: needs doc
 106:tmk_core/common/action_util.c ****  */
 107:tmk_core/common/action_util.c **** void reset_oneshot_layer(void) {
 108:tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 109:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 110:tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 111:tmk_core/common/action_util.c **** #    endif
 112:tmk_core/common/action_util.c ****     oneshot_layer_changed_kb(get_oneshot_layer());
 113:tmk_core/common/action_util.c **** }
 114:tmk_core/common/action_util.c **** /** \brief Clear oneshot layer
 115:tmk_core/common/action_util.c ****  *
 116:tmk_core/common/action_util.c ****  * FIXME: needs doc
 117:tmk_core/common/action_util.c ****  */
 118:tmk_core/common/action_util.c **** void clear_oneshot_layer_state(oneshot_fullfillment_t state) {
 119:tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 120:tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 121:tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 122:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 123:tmk_core/common/action_util.c ****         reset_oneshot_layer();
 124:tmk_core/common/action_util.c ****     }
 125:tmk_core/common/action_util.c **** }
 126:tmk_core/common/action_util.c **** /** \brief Is oneshot layer active
 127:tmk_core/common/action_util.c ****  *
 128:tmk_core/common/action_util.c ****  * FIXME: needs doc
 129:tmk_core/common/action_util.c ****  */
 130:tmk_core/common/action_util.c **** bool is_oneshot_layer_active(void) { return get_oneshot_layer_state(); }
 217              		.loc 2 130 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221              		@ link register save eliminated.
 222              	.LBB12:
 223              	.LBB13:
  84:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 224              		.loc 2 84 0
 225 0000 034B     		ldr	r3, .L21
 226 0002 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 227              	.LBE13:
 228              	.LBE12:
 229              		.loc 2 130 0
 230 0004 10F00700 		ands	r0, r0, #7
 231 0008 18BF     		it	ne
 232 000a 0120     		movne	r0, #1
 233 000c 7047     		bx	lr
 234              	.L22:
 235 000e 00BF     		.align	2
 236              	.L21:
 237 0010 00000000 		.word	.LANCHOR1
 238              		.cfi_endproc
 239              	.LFE17:
 241              		.section	.text.get_mods,"ax",%progbits
 242              		.align	1
 243              		.global	get_mods
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 247              		.fpu fpv4-sp-d16
 249              	get_mods:
 250              	.LFB19:
 131:tmk_core/common/action_util.c **** #endif
 132:tmk_core/common/action_util.c **** 
 133:tmk_core/common/action_util.c **** /** \brief Send keyboard report
 134:tmk_core/common/action_util.c ****  *
 135:tmk_core/common/action_util.c ****  * FIXME: needs doc
 136:tmk_core/common/action_util.c ****  */
 137:tmk_core/common/action_util.c **** void send_keyboard_report(void) {
 138:tmk_core/common/action_util.c ****     keyboard_report->mods = real_mods;
 139:tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 140:tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 141:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 142:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 143:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 144:tmk_core/common/action_util.c ****         if (has_oneshot_mods_timed_out()) {
 145:tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 146:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 147:tmk_core/common/action_util.c ****         }
 148:tmk_core/common/action_util.c **** #    endif
 149:tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
 150:tmk_core/common/action_util.c ****         if (has_anykey(keyboard_report)) {
 151:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 152:tmk_core/common/action_util.c ****         }
 153:tmk_core/common/action_util.c ****     }
 154:tmk_core/common/action_util.c **** 
 155:tmk_core/common/action_util.c **** #endif
 156:tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
 157:tmk_core/common/action_util.c **** }
 158:tmk_core/common/action_util.c **** 
 159:tmk_core/common/action_util.c **** /** \brief Get mods
 160:tmk_core/common/action_util.c ****  *
 161:tmk_core/common/action_util.c ****  * FIXME: needs doc
 162:tmk_core/common/action_util.c ****  */
 163:tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 251              		.loc 2 163 0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255              		@ link register save eliminated.
 256              		.loc 2 163 0
 257 0000 014B     		ldr	r3, .L24
 258 0002 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 259 0004 7047     		bx	lr
 260              	.L25:
 261 0006 00BF     		.align	2
 262              	.L24:
 263 0008 00000000 		.word	.LANCHOR1
 264              		.cfi_endproc
 265              	.LFE19:
 267              		.section	.text.add_mods,"ax",%progbits
 268              		.align	1
 269              		.global	add_mods
 270              		.syntax unified
 271              		.thumb
 272              		.thumb_func
 273              		.fpu fpv4-sp-d16
 275              	add_mods:
 276              	.LFB20:
 164:tmk_core/common/action_util.c **** /** \brief add mods
 165:tmk_core/common/action_util.c ****  *
 166:tmk_core/common/action_util.c ****  * FIXME: needs doc
 167:tmk_core/common/action_util.c ****  */
 168:tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 277              		.loc 2 168 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 282              	.LVL7:
 283              		.loc 2 168 0
 284 0000 024A     		ldr	r2, .L27
 285 0002 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 286 0004 1843     		orrs	r0, r0, r3
 287              	.LVL8:
 288 0006 9070     		strb	r0, [r2, #2]
 289 0008 7047     		bx	lr
 290              	.L28:
 291 000a 00BF     		.align	2
 292              	.L27:
 293 000c 00000000 		.word	.LANCHOR1
 294              		.cfi_endproc
 295              	.LFE20:
 297              		.section	.text.del_mods,"ax",%progbits
 298              		.align	1
 299              		.global	del_mods
 300              		.syntax unified
 301              		.thumb
 302              		.thumb_func
 303              		.fpu fpv4-sp-d16
 305              	del_mods:
 306              	.LFB21:
 169:tmk_core/common/action_util.c **** /** \brief del mods
 170:tmk_core/common/action_util.c ****  *
 171:tmk_core/common/action_util.c ****  * FIXME: needs doc
 172:tmk_core/common/action_util.c ****  */
 173:tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 307              		.loc 2 173 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 312              	.LVL9:
 313              		.loc 2 173 0
 314 0000 024A     		ldr	r2, .L30
 315 0002 9378     		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 316 0004 23EA0000 		bic	r0, r3, r0
 317              	.LVL10:
 318 0008 9070     		strb	r0, [r2, #2]
 319 000a 7047     		bx	lr
 320              	.L31:
 321              		.align	2
 322              	.L30:
 323 000c 00000000 		.word	.LANCHOR1
 324              		.cfi_endproc
 325              	.LFE21:
 327              		.section	.text.set_mods,"ax",%progbits
 328              		.align	1
 329              		.global	set_mods
 330              		.syntax unified
 331              		.thumb
 332              		.thumb_func
 333              		.fpu fpv4-sp-d16
 335              	set_mods:
 336              	.LFB22:
 174:tmk_core/common/action_util.c **** /** \brief set mods
 175:tmk_core/common/action_util.c ****  *
 176:tmk_core/common/action_util.c ****  * FIXME: needs doc
 177:tmk_core/common/action_util.c ****  */
 178:tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 337              		.loc 2 178 0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 0
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341              		@ link register save eliminated.
 342              	.LVL11:
 343              		.loc 2 178 0
 344 0000 014B     		ldr	r3, .L33
 345 0002 9870     		strb	r0, [r3, #2]
 346 0004 7047     		bx	lr
 347              	.L34:
 348 0006 00BF     		.align	2
 349              	.L33:
 350 0008 00000000 		.word	.LANCHOR1
 351              		.cfi_endproc
 352              	.LFE22:
 354              		.section	.text.clear_mods,"ax",%progbits
 355              		.align	1
 356              		.global	clear_mods
 357              		.syntax unified
 358              		.thumb
 359              		.thumb_func
 360              		.fpu fpv4-sp-d16
 362              	clear_mods:
 363              	.LFB23:
 179:tmk_core/common/action_util.c **** /** \brief clear mods
 180:tmk_core/common/action_util.c ****  *
 181:tmk_core/common/action_util.c ****  * FIXME: needs doc
 182:tmk_core/common/action_util.c ****  */
 183:tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 364              		.loc 2 183 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 0
 367              		@ frame_needed = 0, uses_anonymous_args = 0
 368              		@ link register save eliminated.
 369              		.loc 2 183 0
 370 0000 014B     		ldr	r3, .L36
 371 0002 0022     		movs	r2, #0
 372 0004 9A70     		strb	r2, [r3, #2]
 373 0006 7047     		bx	lr
 374              	.L37:
 375              		.align	2
 376              	.L36:
 377 0008 00000000 		.word	.LANCHOR1
 378              		.cfi_endproc
 379              	.LFE23:
 381              		.section	.text.get_weak_mods,"ax",%progbits
 382              		.align	1
 383              		.global	get_weak_mods
 384              		.syntax unified
 385              		.thumb
 386              		.thumb_func
 387              		.fpu fpv4-sp-d16
 389              	get_weak_mods:
 390              	.LFB24:
 184:tmk_core/common/action_util.c **** 
 185:tmk_core/common/action_util.c **** /** \brief get weak mods
 186:tmk_core/common/action_util.c ****  *
 187:tmk_core/common/action_util.c ****  * FIXME: needs doc
 188:tmk_core/common/action_util.c ****  */
 189:tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 391              		.loc 2 189 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 396              		.loc 2 189 0
 397 0000 014B     		ldr	r3, .L39
 398 0002 D878     		ldrb	r0, [r3, #3]	@ zero_extendqisi2
 399 0004 7047     		bx	lr
 400              	.L40:
 401 0006 00BF     		.align	2
 402              	.L39:
 403 0008 00000000 		.word	.LANCHOR1
 404              		.cfi_endproc
 405              	.LFE24:
 407              		.section	.text.add_weak_mods,"ax",%progbits
 408              		.align	1
 409              		.global	add_weak_mods
 410              		.syntax unified
 411              		.thumb
 412              		.thumb_func
 413              		.fpu fpv4-sp-d16
 415              	add_weak_mods:
 416              	.LFB25:
 190:tmk_core/common/action_util.c **** /** \brief add weak mods
 191:tmk_core/common/action_util.c ****  *
 192:tmk_core/common/action_util.c ****  * FIXME: needs doc
 193:tmk_core/common/action_util.c ****  */
 194:tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 417              		.loc 2 194 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421              		@ link register save eliminated.
 422              	.LVL12:
 423              		.loc 2 194 0
 424 0000 024A     		ldr	r2, .L42
 425 0002 D378     		ldrb	r3, [r2, #3]	@ zero_extendqisi2
 426 0004 1843     		orrs	r0, r0, r3
 427              	.LVL13:
 428 0006 D070     		strb	r0, [r2, #3]
 429 0008 7047     		bx	lr
 430              	.L43:
 431 000a 00BF     		.align	2
 432              	.L42:
 433 000c 00000000 		.word	.LANCHOR1
 434              		.cfi_endproc
 435              	.LFE25:
 437              		.section	.text.del_weak_mods,"ax",%progbits
 438              		.align	1
 439              		.global	del_weak_mods
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv4-sp-d16
 445              	del_weak_mods:
 446              	.LFB26:
 195:tmk_core/common/action_util.c **** /** \brief del weak mods
 196:tmk_core/common/action_util.c ****  *
 197:tmk_core/common/action_util.c ****  * FIXME: needs doc
 198:tmk_core/common/action_util.c ****  */
 199:tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 447              		.loc 2 199 0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 0
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 451              		@ link register save eliminated.
 452              	.LVL14:
 453              		.loc 2 199 0
 454 0000 024A     		ldr	r2, .L45
 455 0002 D378     		ldrb	r3, [r2, #3]	@ zero_extendqisi2
 456 0004 23EA0000 		bic	r0, r3, r0
 457              	.LVL15:
 458 0008 D070     		strb	r0, [r2, #3]
 459 000a 7047     		bx	lr
 460              	.L46:
 461              		.align	2
 462              	.L45:
 463 000c 00000000 		.word	.LANCHOR1
 464              		.cfi_endproc
 465              	.LFE26:
 467              		.section	.text.set_weak_mods,"ax",%progbits
 468              		.align	1
 469              		.global	set_weak_mods
 470              		.syntax unified
 471              		.thumb
 472              		.thumb_func
 473              		.fpu fpv4-sp-d16
 475              	set_weak_mods:
 476              	.LFB27:
 200:tmk_core/common/action_util.c **** /** \brief set weak mods
 201:tmk_core/common/action_util.c ****  *
 202:tmk_core/common/action_util.c ****  * FIXME: needs doc
 203:tmk_core/common/action_util.c ****  */
 204:tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 477              		.loc 2 204 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              		@ link register save eliminated.
 482              	.LVL16:
 483              		.loc 2 204 0
 484 0000 014B     		ldr	r3, .L48
 485 0002 D870     		strb	r0, [r3, #3]
 486 0004 7047     		bx	lr
 487              	.L49:
 488 0006 00BF     		.align	2
 489              	.L48:
 490 0008 00000000 		.word	.LANCHOR1
 491              		.cfi_endproc
 492              	.LFE27:
 494              		.section	.text.clear_weak_mods,"ax",%progbits
 495              		.align	1
 496              		.global	clear_weak_mods
 497              		.syntax unified
 498              		.thumb
 499              		.thumb_func
 500              		.fpu fpv4-sp-d16
 502              	clear_weak_mods:
 503              	.LFB28:
 205:tmk_core/common/action_util.c **** /** \brief clear weak mods
 206:tmk_core/common/action_util.c ****  *
 207:tmk_core/common/action_util.c ****  * FIXME: needs doc
 208:tmk_core/common/action_util.c ****  */
 209:tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 504              		.loc 2 209 0
 505              		.cfi_startproc
 506              		@ args = 0, pretend = 0, frame = 0
 507              		@ frame_needed = 0, uses_anonymous_args = 0
 508              		@ link register save eliminated.
 509              		.loc 2 209 0
 510 0000 014B     		ldr	r3, .L51
 511 0002 0022     		movs	r2, #0
 512 0004 DA70     		strb	r2, [r3, #3]
 513 0006 7047     		bx	lr
 514              	.L52:
 515              		.align	2
 516              	.L51:
 517 0008 00000000 		.word	.LANCHOR1
 518              		.cfi_endproc
 519              	.LFE28:
 521              		.section	.text.get_macro_mods,"ax",%progbits
 522              		.align	1
 523              		.global	get_macro_mods
 524              		.syntax unified
 525              		.thumb
 526              		.thumb_func
 527              		.fpu fpv4-sp-d16
 529              	get_macro_mods:
 530              	.LFB29:
 210:tmk_core/common/action_util.c **** 
 211:tmk_core/common/action_util.c **** /* macro modifier */
 212:tmk_core/common/action_util.c **** /** \brief get macro mods
 213:tmk_core/common/action_util.c ****  *
 214:tmk_core/common/action_util.c ****  * FIXME: needs doc
 215:tmk_core/common/action_util.c ****  */
 216:tmk_core/common/action_util.c **** uint8_t get_macro_mods(void) { return macro_mods; }
 531              		.loc 2 216 0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 0
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 535              		@ link register save eliminated.
 536              		.loc 2 216 0
 537 0000 014B     		ldr	r3, .L54
 538 0002 1879     		ldrb	r0, [r3, #4]	@ zero_extendqisi2
 539 0004 7047     		bx	lr
 540              	.L55:
 541 0006 00BF     		.align	2
 542              	.L54:
 543 0008 00000000 		.word	.LANCHOR1
 544              		.cfi_endproc
 545              	.LFE29:
 547              		.section	.text.add_macro_mods,"ax",%progbits
 548              		.align	1
 549              		.global	add_macro_mods
 550              		.syntax unified
 551              		.thumb
 552              		.thumb_func
 553              		.fpu fpv4-sp-d16
 555              	add_macro_mods:
 556              	.LFB30:
 217:tmk_core/common/action_util.c **** /** \brief add macro mods
 218:tmk_core/common/action_util.c ****  *
 219:tmk_core/common/action_util.c ****  * FIXME: needs doc
 220:tmk_core/common/action_util.c ****  */
 221:tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 557              		.loc 2 221 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 0
 560              		@ frame_needed = 0, uses_anonymous_args = 0
 561              		@ link register save eliminated.
 562              	.LVL17:
 563              		.loc 2 221 0
 564 0000 024A     		ldr	r2, .L57
 565 0002 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 566 0004 1843     		orrs	r0, r0, r3
 567              	.LVL18:
 568 0006 1071     		strb	r0, [r2, #4]
 569 0008 7047     		bx	lr
 570              	.L58:
 571 000a 00BF     		.align	2
 572              	.L57:
 573 000c 00000000 		.word	.LANCHOR1
 574              		.cfi_endproc
 575              	.LFE30:
 577              		.section	.text.del_macro_mods,"ax",%progbits
 578              		.align	1
 579              		.global	del_macro_mods
 580              		.syntax unified
 581              		.thumb
 582              		.thumb_func
 583              		.fpu fpv4-sp-d16
 585              	del_macro_mods:
 586              	.LFB31:
 222:tmk_core/common/action_util.c **** /** \brief del macro mods
 223:tmk_core/common/action_util.c ****  *
 224:tmk_core/common/action_util.c ****  * FIXME: needs doc
 225:tmk_core/common/action_util.c ****  */
 226:tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 587              		.loc 2 226 0
 588              		.cfi_startproc
 589              		@ args = 0, pretend = 0, frame = 0
 590              		@ frame_needed = 0, uses_anonymous_args = 0
 591              		@ link register save eliminated.
 592              	.LVL19:
 593              		.loc 2 226 0
 594 0000 024A     		ldr	r2, .L60
 595 0002 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 596 0004 23EA0000 		bic	r0, r3, r0
 597              	.LVL20:
 598 0008 1071     		strb	r0, [r2, #4]
 599 000a 7047     		bx	lr
 600              	.L61:
 601              		.align	2
 602              	.L60:
 603 000c 00000000 		.word	.LANCHOR1
 604              		.cfi_endproc
 605              	.LFE31:
 607              		.section	.text.set_macro_mods,"ax",%progbits
 608              		.align	1
 609              		.global	set_macro_mods
 610              		.syntax unified
 611              		.thumb
 612              		.thumb_func
 613              		.fpu fpv4-sp-d16
 615              	set_macro_mods:
 616              	.LFB32:
 227:tmk_core/common/action_util.c **** /** \brief set macro mods
 228:tmk_core/common/action_util.c ****  *
 229:tmk_core/common/action_util.c ****  * FIXME: needs doc
 230:tmk_core/common/action_util.c ****  */
 231:tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 617              		.loc 2 231 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621              		@ link register save eliminated.
 622              	.LVL21:
 623              		.loc 2 231 0
 624 0000 014B     		ldr	r3, .L63
 625 0002 1871     		strb	r0, [r3, #4]
 626 0004 7047     		bx	lr
 627              	.L64:
 628 0006 00BF     		.align	2
 629              	.L63:
 630 0008 00000000 		.word	.LANCHOR1
 631              		.cfi_endproc
 632              	.LFE32:
 634              		.section	.text.clear_macro_mods,"ax",%progbits
 635              		.align	1
 636              		.global	clear_macro_mods
 637              		.syntax unified
 638              		.thumb
 639              		.thumb_func
 640              		.fpu fpv4-sp-d16
 642              	clear_macro_mods:
 643              	.LFB33:
 232:tmk_core/common/action_util.c **** /** \brief clear macro mods
 233:tmk_core/common/action_util.c ****  *
 234:tmk_core/common/action_util.c ****  * FIXME: needs doc
 235:tmk_core/common/action_util.c ****  */
 236:tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 644              		.loc 2 236 0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 0
 647              		@ frame_needed = 0, uses_anonymous_args = 0
 648              		@ link register save eliminated.
 649              		.loc 2 236 0
 650 0000 014B     		ldr	r3, .L66
 651 0002 0022     		movs	r2, #0
 652 0004 1A71     		strb	r2, [r3, #4]
 653 0006 7047     		bx	lr
 654              	.L67:
 655              		.align	2
 656              	.L66:
 657 0008 00000000 		.word	.LANCHOR1
 658              		.cfi_endproc
 659              	.LFE33:
 661              		.section	.text.get_oneshot_mods,"ax",%progbits
 662              		.align	1
 663              		.global	get_oneshot_mods
 664              		.syntax unified
 665              		.thumb
 666              		.thumb_func
 667              		.fpu fpv4-sp-d16
 669              	get_oneshot_mods:
 670              	.LFB36:
 237:tmk_core/common/action_util.c **** 
 238:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 239:tmk_core/common/action_util.c **** /** \brief set oneshot mods
 240:tmk_core/common/action_util.c ****  *
 241:tmk_core/common/action_util.c ****  * FIXME: needs doc
 242:tmk_core/common/action_util.c ****  */
 243:tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods) {
 244:tmk_core/common/action_util.c ****     if (oneshot_mods != mods) {
 245:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 246:tmk_core/common/action_util.c ****         oneshot_time = timer_read();
 247:tmk_core/common/action_util.c **** #    endif
 248:tmk_core/common/action_util.c ****         oneshot_mods = mods;
 249:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(mods);
 250:tmk_core/common/action_util.c ****     }
 251:tmk_core/common/action_util.c **** }
 252:tmk_core/common/action_util.c **** /** \brief clear oneshot mods
 253:tmk_core/common/action_util.c ****  *
 254:tmk_core/common/action_util.c ****  * FIXME: needs doc
 255:tmk_core/common/action_util.c ****  */
 256:tmk_core/common/action_util.c **** void clear_oneshot_mods(void) {
 257:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 258:tmk_core/common/action_util.c ****         oneshot_mods = 0;
 259:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 260:tmk_core/common/action_util.c ****         oneshot_time = 0;
 261:tmk_core/common/action_util.c **** #    endif
 262:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(oneshot_mods);
 263:tmk_core/common/action_util.c ****     }
 264:tmk_core/common/action_util.c **** }
 265:tmk_core/common/action_util.c **** /** \brief get oneshot mods
 266:tmk_core/common/action_util.c ****  *
 267:tmk_core/common/action_util.c ****  * FIXME: needs doc
 268:tmk_core/common/action_util.c ****  */
 269:tmk_core/common/action_util.c **** uint8_t get_oneshot_mods(void) { return oneshot_mods; }
 671              		.loc 2 269 0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 675              		@ link register save eliminated.
 676              		.loc 2 269 0
 677 0000 014B     		ldr	r3, .L69
 678 0002 5879     		ldrb	r0, [r3, #5]	@ zero_extendqisi2
 679 0004 7047     		bx	lr
 680              	.L70:
 681 0006 00BF     		.align	2
 682              	.L69:
 683 0008 00000000 		.word	.LANCHOR1
 684              		.cfi_endproc
 685              	.LFE36:
 687              		.section	.text.oneshot_locked_mods_changed_user,"ax",%progbits
 688              		.align	1
 689              		.weak	oneshot_locked_mods_changed_user
 690              		.syntax unified
 691              		.thumb
 692              		.thumb_func
 693              		.fpu fpv4-sp-d16
 695              	oneshot_locked_mods_changed_user:
 696              	.LFB37:
 270:tmk_core/common/action_util.c **** #endif
 271:tmk_core/common/action_util.c **** 
 272:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 273:tmk_core/common/action_util.c ****  *
 274:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 275:tmk_core/common/action_util.c ****  */
 276:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_locked_mods_changed_user(uint8_t mods) {}
 697              		.loc 2 276 0
 698              		.cfi_startproc
 699              		@ args = 0, pretend = 0, frame = 0
 700              		@ frame_needed = 0, uses_anonymous_args = 0
 701              		@ link register save eliminated.
 702              	.LVL22:
 703              		.loc 2 276 0
 704 0000 7047     		bx	lr
 705              		.cfi_endproc
 706              	.LFE37:
 708              		.thumb_set oneshot_locked_mods_changed_user.localalias.0,oneshot_locked_mods_changed_user
 709              		.section	.text.oneshot_locked_mods_changed_kb,"ax",%progbits
 710              		.align	1
 711              		.weak	oneshot_locked_mods_changed_kb
 712              		.syntax unified
 713              		.thumb
 714              		.thumb_func
 715              		.fpu fpv4-sp-d16
 717              	oneshot_locked_mods_changed_kb:
 718              	.LFB38:
 277:tmk_core/common/action_util.c **** 
 278:tmk_core/common/action_util.c **** /** \brief Called when the locked one shot modifiers have been changed.
 279:tmk_core/common/action_util.c ****  *
 280:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 281:tmk_core/common/action_util.c ****  */
 282:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_locked_mods_changed_kb(uint8_t mods) { oneshot_locked_mods_chang
 719              		.loc 2 282 0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 0
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 723              	.LVL23:
 724 0000 08B5     		push	{r3, lr}
 725              		.cfi_def_cfa_offset 8
 726              		.cfi_offset 3, -8
 727              		.cfi_offset 14, -4
 728              		.loc 2 282 0
 729 0002 FFF7FEFF 		bl	oneshot_locked_mods_changed_user
 730              	.LVL24:
 731 0006 08BD     		pop	{r3, pc}
 732              		.cfi_endproc
 733              	.LFE38:
 735              		.section	.text.set_oneshot_locked_mods,"ax",%progbits
 736              		.align	1
 737              		.global	set_oneshot_locked_mods
 738              		.syntax unified
 739              		.thumb
 740              		.thumb_func
 741              		.fpu fpv4-sp-d16
 743              	set_oneshot_locked_mods:
 744              	.LFB9:
  53:tmk_core/common/action_util.c ****     if (mods != oneshot_locked_mods) {
 745              		.loc 2 53 0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749              	.LVL25:
 750 0000 08B5     		push	{r3, lr}
 751              		.cfi_def_cfa_offset 8
 752              		.cfi_offset 3, -8
 753              		.cfi_offset 14, -4
  54:tmk_core/common/action_util.c ****         oneshot_locked_mods = mods;
 754              		.loc 2 54 0
 755 0002 044B     		ldr	r3, .L75
 756 0004 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 757 0006 8142     		cmp	r1, r0
 758 0008 02D0     		beq	.L73
  55:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
 759              		.loc 2 55 0
 760 000a 1870     		strb	r0, [r3]
  56:tmk_core/common/action_util.c ****     }
 761              		.loc 2 56 0
 762 000c FFF7FEFF 		bl	oneshot_locked_mods_changed_kb
 763              	.LVL26:
 764              	.L73:
  58:tmk_core/common/action_util.c **** void clear_oneshot_locked_mods(void) {
 765              		.loc 2 58 0
 766 0010 08BD     		pop	{r3, pc}
 767              	.L76:
 768 0012 00BF     		.align	2
 769              	.L75:
 770 0014 00000000 		.word	.LANCHOR1
 771              		.cfi_endproc
 772              	.LFE9:
 774              		.section	.text.clear_oneshot_locked_mods,"ax",%progbits
 775              		.align	1
 776              		.global	clear_oneshot_locked_mods
 777              		.syntax unified
 778              		.thumb
 779              		.thumb_func
 780              		.fpu fpv4-sp-d16
 782              	clear_oneshot_locked_mods:
 783              	.LFB10:
  59:tmk_core/common/action_util.c ****     if (oneshot_locked_mods) {
 784              		.loc 2 59 0
 785              		.cfi_startproc
 786              		@ args = 0, pretend = 0, frame = 0
 787              		@ frame_needed = 0, uses_anonymous_args = 0
 788 0000 08B5     		push	{r3, lr}
 789              		.cfi_def_cfa_offset 8
 790              		.cfi_offset 3, -8
 791              		.cfi_offset 14, -4
  60:tmk_core/common/action_util.c ****         oneshot_locked_mods = 0;
 792              		.loc 2 60 0
 793 0002 044B     		ldr	r3, .L82
 794 0004 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 795 0006 1AB1     		cbz	r2, .L77
  61:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
 796              		.loc 2 61 0
 797 0008 0020     		movs	r0, #0
 798 000a 1870     		strb	r0, [r3]
  62:tmk_core/common/action_util.c ****     }
 799              		.loc 2 62 0
 800 000c FFF7FEFF 		bl	oneshot_locked_mods_changed_kb
 801              	.LVL27:
 802              	.L77:
  64:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 803              		.loc 2 64 0
 804 0010 08BD     		pop	{r3, pc}
 805              	.L83:
 806 0012 00BF     		.align	2
 807              	.L82:
 808 0014 00000000 		.word	.LANCHOR1
 809              		.cfi_endproc
 810              	.LFE10:
 812              		.section	.text.oneshot_mods_changed_user,"ax",%progbits
 813              		.align	1
 814              		.weak	oneshot_mods_changed_user
 815              		.syntax unified
 816              		.thumb
 817              		.thumb_func
 818              		.fpu fpv4-sp-d16
 820              	oneshot_mods_changed_user:
 821              	.LFB45:
 822              		.cfi_startproc
 823              		@ args = 0, pretend = 0, frame = 0
 824              		@ frame_needed = 0, uses_anonymous_args = 0
 825              		@ link register save eliminated.
 826 0000 7047     		bx	lr
 827              		.cfi_endproc
 828              	.LFE45:
 830              		.section	.text.oneshot_mods_changed_kb,"ax",%progbits
 831              		.align	1
 832              		.weak	oneshot_mods_changed_kb
 833              		.syntax unified
 834              		.thumb
 835              		.thumb_func
 836              		.fpu fpv4-sp-d16
 838              	oneshot_mods_changed_kb:
 839              	.LFB40:
 283:tmk_core/common/action_util.c **** 
 284:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 285:tmk_core/common/action_util.c ****  *
 286:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 287:tmk_core/common/action_util.c ****  */
 288:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_mods_changed_user(uint8_t mods) {}
 289:tmk_core/common/action_util.c **** 
 290:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 291:tmk_core/common/action_util.c ****  *
 292:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 293:tmk_core/common/action_util.c ****  */
 294:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_mods_changed_kb(uint8_t mods) { oneshot_mods_changed_user(mods);
 840              		.loc 2 294 0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 0
 843              		@ frame_needed = 0, uses_anonymous_args = 0
 844              	.LVL28:
 845              		.loc 2 294 0
 846 0000 08B5     		push	{r3, lr}
 847              		.cfi_def_cfa_offset 8
 848              		.cfi_offset 3, -8
 849              		.cfi_offset 14, -4
 850              		.loc 2 294 0
 851 0002 FFF7FEFF 		bl	oneshot_mods_changed_user
 852              	.LVL29:
 853 0006 08BD     		pop	{r3, pc}
 854              		.cfi_endproc
 855              	.LFE40:
 857              		.section	.text.set_oneshot_mods,"ax",%progbits
 858              		.align	1
 859              		.global	set_oneshot_mods
 860              		.syntax unified
 861              		.thumb
 862              		.thumb_func
 863              		.fpu fpv4-sp-d16
 865              	set_oneshot_mods:
 866              	.LFB34:
 243:tmk_core/common/action_util.c ****     if (oneshot_mods != mods) {
 867              		.loc 2 243 0
 868              		.cfi_startproc
 869              		@ args = 0, pretend = 0, frame = 0
 870              		@ frame_needed = 0, uses_anonymous_args = 0
 871              	.LVL30:
 872 0000 08B5     		push	{r3, lr}
 873              		.cfi_def_cfa_offset 8
 874              		.cfi_offset 3, -8
 875              		.cfi_offset 14, -4
 244:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 876              		.loc 2 244 0
 877 0002 044B     		ldr	r3, .L88
 878 0004 5979     		ldrb	r1, [r3, #5]	@ zero_extendqisi2
 879 0006 8142     		cmp	r1, r0
 880 0008 02D0     		beq	.L86
 248:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(mods);
 881              		.loc 2 248 0
 882 000a 5871     		strb	r0, [r3, #5]
 249:tmk_core/common/action_util.c ****     }
 883              		.loc 2 249 0
 884 000c FFF7FEFF 		bl	oneshot_mods_changed_kb
 885              	.LVL31:
 886              	.L86:
 251:tmk_core/common/action_util.c **** /** \brief clear oneshot mods
 887              		.loc 2 251 0
 888 0010 08BD     		pop	{r3, pc}
 889              	.L89:
 890 0012 00BF     		.align	2
 891              	.L88:
 892 0014 00000000 		.word	.LANCHOR1
 893              		.cfi_endproc
 894              	.LFE34:
 896              		.section	.text.clear_oneshot_mods,"ax",%progbits
 897              		.align	1
 898              		.global	clear_oneshot_mods
 899              		.syntax unified
 900              		.thumb
 901              		.thumb_func
 902              		.fpu fpv4-sp-d16
 904              	clear_oneshot_mods:
 905              	.LFB35:
 256:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 906              		.loc 2 256 0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 0
 909              		@ frame_needed = 0, uses_anonymous_args = 0
 910 0000 08B5     		push	{r3, lr}
 911              		.cfi_def_cfa_offset 8
 912              		.cfi_offset 3, -8
 913              		.cfi_offset 14, -4
 257:tmk_core/common/action_util.c ****         oneshot_mods = 0;
 914              		.loc 2 257 0
 915 0002 044B     		ldr	r3, .L95
 916 0004 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 917 0006 1AB1     		cbz	r2, .L90
 258:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 918              		.loc 2 258 0
 919 0008 0020     		movs	r0, #0
 920 000a 5871     		strb	r0, [r3, #5]
 262:tmk_core/common/action_util.c ****     }
 921              		.loc 2 262 0
 922 000c FFF7FEFF 		bl	oneshot_mods_changed_kb
 923              	.LVL32:
 924              	.L90:
 264:tmk_core/common/action_util.c **** /** \brief get oneshot mods
 925              		.loc 2 264 0
 926 0010 08BD     		pop	{r3, pc}
 927              	.L96:
 928 0012 00BF     		.align	2
 929              	.L95:
 930 0014 00000000 		.word	.LANCHOR1
 931              		.cfi_endproc
 932              	.LFE35:
 934              		.section	.text.send_keyboard_report,"ax",%progbits
 935              		.align	1
 936              		.global	send_keyboard_report
 937              		.syntax unified
 938              		.thumb
 939              		.thumb_func
 940              		.fpu fpv4-sp-d16
 942              	send_keyboard_report:
 943              	.LFB18:
 137:tmk_core/common/action_util.c ****     keyboard_report->mods = real_mods;
 944              		.loc 2 137 0
 945              		.cfi_startproc
 946              		@ args = 0, pretend = 0, frame = 0
 947              		@ frame_needed = 0, uses_anonymous_args = 0
 948 0000 10B5     		push	{r4, lr}
 949              		.cfi_def_cfa_offset 8
 950              		.cfi_offset 4, -8
 951              		.cfi_offset 14, -4
 138:tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 952              		.loc 2 138 0
 953 0002 104B     		ldr	r3, .L104
 954 0004 104A     		ldr	r2, .L104+4
 955 0006 1968     		ldr	r1, [r3]
 956 0008 9078     		ldrb	r0, [r2, #2]	@ zero_extendqisi2
 957 000a 0870     		strb	r0, [r1]
 139:tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 958              		.loc 2 139 0
 959 000c 1868     		ldr	r0, [r3]
 960 000e D478     		ldrb	r4, [r2, #3]	@ zero_extendqisi2
 961 0010 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 962 0012 2143     		orrs	r1, r1, r4
 963 0014 0170     		strb	r1, [r0]
 140:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 964              		.loc 2 140 0
 965 0016 1868     		ldr	r0, [r3]
 966 0018 1479     		ldrb	r4, [r2, #4]	@ zero_extendqisi2
 967 001a 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 142:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 968              		.loc 2 142 0
 969 001c 5279     		ldrb	r2, [r2, #5]	@ zero_extendqisi2
 140:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 970              		.loc 2 140 0
 971 001e 2143     		orrs	r1, r1, r4
 972 0020 0170     		strb	r1, [r0]
 973 0022 1C46     		mov	r4, r3
 142:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 974              		.loc 2 142 0
 975 0024 4AB1     		cbz	r2, .L99
 149:tmk_core/common/action_util.c ****         if (has_anykey(keyboard_report)) {
 976              		.loc 2 149 0
 977 0026 1B68     		ldr	r3, [r3]
 978 0028 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 979 002a 0A43     		orrs	r2, r2, r1
 980 002c 1A70     		strb	r2, [r3]
 150:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 981              		.loc 2 150 0
 982 002e 2068     		ldr	r0, [r4]
 983 0030 FFF7FEFF 		bl	has_anykey
 984              	.LVL33:
 985 0034 08B1     		cbz	r0, .L99
 151:tmk_core/common/action_util.c ****         }
 986              		.loc 2 151 0
 987 0036 FFF7FEFF 		bl	clear_oneshot_mods
 988              	.LVL34:
 989              	.L99:
 156:tmk_core/common/action_util.c **** }
 990              		.loc 2 156 0
 991 003a 2068     		ldr	r0, [r4]
 157:tmk_core/common/action_util.c **** 
 992              		.loc 2 157 0
 993 003c BDE81040 		pop	{r4, lr}
 994              		.cfi_restore 14
 995              		.cfi_restore 4
 996              		.cfi_def_cfa_offset 0
 156:tmk_core/common/action_util.c **** }
 997              		.loc 2 156 0
 998 0040 FFF7FEBF 		b	host_keyboard_send
 999              	.LVL35:
 1000              	.L105:
 1001              		.align	2
 1002              	.L104:
 1003 0044 00000000 		.word	.LANCHOR0
 1004 0048 00000000 		.word	.LANCHOR1
 1005              		.cfi_endproc
 1006              	.LFE18:
 1008              		.section	.text.oneshot_layer_changed_user,"ax",%progbits
 1009              		.align	1
 1010              		.weak	oneshot_layer_changed_user
 1011              		.syntax unified
 1012              		.thumb
 1013              		.thumb_func
 1014              		.fpu fpv4-sp-d16
 1016              	oneshot_layer_changed_user:
 1017              	.LFB47:
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 1021              		@ link register save eliminated.
 1022 0000 7047     		bx	lr
 1023              		.cfi_endproc
 1024              	.LFE47:
 1026              		.section	.text.oneshot_layer_changed_kb,"ax",%progbits
 1027              		.align	1
 1028              		.weak	oneshot_layer_changed_kb
 1029              		.syntax unified
 1030              		.thumb
 1031              		.thumb_func
 1032              		.fpu fpv4-sp-d16
 1034              	oneshot_layer_changed_kb:
 1035              	.LFB42:
 295:tmk_core/common/action_util.c **** 
 296:tmk_core/common/action_util.c **** /** \brief Called when the one shot layers have been changed.
 297:tmk_core/common/action_util.c ****  *
 298:tmk_core/common/action_util.c ****  * \param layer Contains the layer that is toggled on, or zero when toggled off.
 299:tmk_core/common/action_util.c ****  */
 300:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_layer_changed_user(uint8_t layer) {}
 301:tmk_core/common/action_util.c **** 
 302:tmk_core/common/action_util.c **** /** \brief Called when the one shot layers have been changed.
 303:tmk_core/common/action_util.c ****  *
 304:tmk_core/common/action_util.c ****  * \param layer Contains the layer that is toggled on, or zero when toggled off.
 305:tmk_core/common/action_util.c ****  */
 306:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_layer_changed_kb(uint8_t layer) { oneshot_layer_changed_user(lay
 1036              		.loc 2 306 0
 1037              		.cfi_startproc
 1038              		@ args = 0, pretend = 0, frame = 0
 1039              		@ frame_needed = 0, uses_anonymous_args = 0
 1040              	.LVL36:
 1041              		.loc 2 306 0
 1042 0000 08B5     		push	{r3, lr}
 1043              		.cfi_def_cfa_offset 8
 1044              		.cfi_offset 3, -8
 1045              		.cfi_offset 14, -4
 1046              		.loc 2 306 0
 1047 0002 FFF7FEFF 		bl	oneshot_layer_changed_user
 1048              	.LVL37:
 1049 0006 08BD     		pop	{r3, pc}
 1050              		.cfi_endproc
 1051              	.LFE42:
 1053              		.section	.text.set_oneshot_layer,"ax",%progbits
 1054              		.align	1
 1055              		.global	set_oneshot_layer
 1056              		.syntax unified
 1057              		.thumb
 1058              		.thumb_func
 1059              		.fpu fpv4-sp-d16
 1061              	set_oneshot_layer:
 1062              	.LFB14:
  95:tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
 1063              		.loc 2 95 0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 0
 1066              		@ frame_needed = 0, uses_anonymous_args = 0
 1067              	.LVL38:
 1068 0000 10B5     		push	{r4, lr}
 1069              		.cfi_def_cfa_offset 8
 1070              		.cfi_offset 4, -8
 1071              		.cfi_offset 14, -4
  96:tmk_core/common/action_util.c ****     layer_on(layer);
 1072              		.loc 2 96 0
 1073 0002 064C     		ldr	r4, .L109
 1074 0004 41EAC001 		orr	r1, r1, r0, lsl #3
 1075              	.LVL39:
 1076 0008 6170     		strb	r1, [r4, #1]
  97:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 1077              		.loc 2 97 0
 1078 000a FFF7FEFF 		bl	layer_on
 1079              	.LVL40:
 1080              	.LBB14:
 1081              	.LBB15:
  83:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 1082              		.loc 2 83 0
 1083 000e 94F90100 		ldrsb	r0, [r4, #1]
 1084              	.LBE15:
 1085              	.LBE14:
 101:tmk_core/common/action_util.c **** }
 1086              		.loc 2 101 0
 1087 0012 C0F3C700 		ubfx	r0, r0, #3, #8
 1088 0016 FFF7FEFF 		bl	oneshot_layer_changed_kb
 1089              	.LVL41:
 102:tmk_core/common/action_util.c **** /** \brief Reset oneshot layer
 1090              		.loc 2 102 0
 1091 001a 10BD     		pop	{r4, pc}
 1092              	.L110:
 1093              		.align	2
 1094              	.L109:
 1095 001c 00000000 		.word	.LANCHOR1
 1096              		.cfi_endproc
 1097              	.LFE14:
 1099              		.section	.text.reset_oneshot_layer,"ax",%progbits
 1100              		.align	1
 1101              		.global	reset_oneshot_layer
 1102              		.syntax unified
 1103              		.thumb
 1104              		.thumb_func
 1105              		.fpu fpv4-sp-d16
 1107              	reset_oneshot_layer:
 1108              	.LFB15:
 107:tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 1109              		.loc 2 107 0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 0
 1112              		@ frame_needed = 0, uses_anonymous_args = 0
 1113 0000 08B5     		push	{r3, lr}
 1114              		.cfi_def_cfa_offset 8
 1115              		.cfi_offset 3, -8
 1116              		.cfi_offset 14, -4
 108:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 1117              		.loc 2 108 0
 1118 0002 034B     		ldr	r3, .L112
 1119 0004 0020     		movs	r0, #0
 1120 0006 5870     		strb	r0, [r3, #1]
 112:tmk_core/common/action_util.c **** }
 1121              		.loc 2 112 0
 1122 0008 FFF7FEFF 		bl	oneshot_layer_changed_kb
 1123              	.LVL42:
 113:tmk_core/common/action_util.c **** /** \brief Clear oneshot layer
 1124              		.loc 2 113 0
 1125 000c 08BD     		pop	{r3, pc}
 1126              	.L113:
 1127 000e 00BF     		.align	2
 1128              	.L112:
 1129 0010 00000000 		.word	.LANCHOR1
 1130              		.cfi_endproc
 1131              	.LFE15:
 1133              		.section	.text.clear_oneshot_layer_state,"ax",%progbits
 1134              		.align	1
 1135              		.global	clear_oneshot_layer_state
 1136              		.syntax unified
 1137              		.thumb
 1138              		.thumb_func
 1139              		.fpu fpv4-sp-d16
 1141              	clear_oneshot_layer_state:
 1142              	.LFB16:
 118:tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 1143              		.loc 2 118 0
 1144              		.cfi_startproc
 1145              		@ args = 0, pretend = 0, frame = 0
 1146              		@ frame_needed = 0, uses_anonymous_args = 0
 1147              	.LVL43:
 1148 0000 08B5     		push	{r3, lr}
 1149              		.cfi_def_cfa_offset 8
 1150              		.cfi_offset 3, -8
 1151              		.cfi_offset 14, -4
 119:tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 1152              		.loc 2 119 0
 1153 0002 0A4A     		ldr	r2, .L116
 1154 0004 92F90130 		ldrsb	r3, [r2, #1]
 1155              	.LVL44:
 120:tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 1156              		.loc 2 120 0
 1157 0008 23EA0000 		bic	r0, r3, r0
 1158              	.LVL45:
 1159 000c 40B2     		sxtb	r0, r0
 1160 000e 5070     		strb	r0, [r2, #1]
 121:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 1161              		.loc 2 121 0
 1162 0010 4207     		lsls	r2, r0, #29
 1163 0012 0AD1     		bne	.L114
 121:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 1164              		.loc 2 121 0 is_stmt 0 discriminator 1
 1165 0014 DBB2     		uxtb	r3, r3
 1166 0016 8342     		cmp	r3, r0
 1167 0018 07D0     		beq	.L114
 122:tmk_core/common/action_util.c ****         reset_oneshot_layer();
 1168              		.loc 2 122 0 is_stmt 1
 1169 001a C0F3C700 		ubfx	r0, r0, #3, #8
 1170 001e FFF7FEFF 		bl	layer_off
 1171              	.LVL46:
 125:tmk_core/common/action_util.c **** /** \brief Is oneshot layer active
 1172              		.loc 2 125 0
 1173 0022 BDE80840 		pop	{r3, lr}
 1174              		.cfi_remember_state
 1175              		.cfi_restore 14
 1176              		.cfi_restore 3
 1177              		.cfi_def_cfa_offset 0
 123:tmk_core/common/action_util.c ****     }
 1178              		.loc 2 123 0
 1179 0026 FFF7FEBF 		b	reset_oneshot_layer
 1180              	.LVL47:
 1181              	.L114:
 1182              		.cfi_restore_state
 125:tmk_core/common/action_util.c **** /** \brief Is oneshot layer active
 1183              		.loc 2 125 0
 1184 002a 08BD     		pop	{r3, pc}
 1185              	.L117:
 1186              		.align	2
 1187              	.L116:
 1188 002c 00000000 		.word	.LANCHOR1
 1189              		.cfi_endproc
 1190              	.LFE16:
 1192              		.section	.text.has_anymod,"ax",%progbits
 1193              		.align	1
 1194              		.global	has_anymod
 1195              		.syntax unified
 1196              		.thumb
 1197              		.thumb_func
 1198              		.fpu fpv4-sp-d16
 1200              	has_anymod:
 1201              	.LFB43:
 307:tmk_core/common/action_util.c **** 
 308:tmk_core/common/action_util.c **** /** \brief inspect keyboard state
 309:tmk_core/common/action_util.c ****  *
 310:tmk_core/common/action_util.c ****  * FIXME: needs doc
 311:tmk_core/common/action_util.c ****  */
 312:tmk_core/common/action_util.c **** uint8_t has_anymod(void) { return bitpop(real_mods); }
 1202              		.loc 2 312 0
 1203              		.cfi_startproc
 1204              		@ args = 0, pretend = 0, frame = 0
 1205              		@ frame_needed = 0, uses_anonymous_args = 0
 1206              		@ link register save eliminated.
 1207              		.loc 2 312 0
 1208 0000 014B     		ldr	r3, .L119
 1209 0002 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 1210 0004 FFF7FEBF 		b	bitpop
 1211              	.LVL48:
 1212              	.L120:
 1213              		.align	2
 1214              	.L119:
 1215 0008 00000000 		.word	.LANCHOR1
 1216              		.cfi_endproc
 1217              	.LFE43:
 1219              		.global	keyboard_report
 1220              		.data
 1221              		.align	2
 1222              		.set	.LANCHOR0,. + 0
 1225              	keyboard_report:
 1226 0000 06000000 		.word	__compound_literal.0
 1227              		.bss
 1228              		.set	.LANCHOR1,. + 0
 1231              	oneshot_locked_mods:
 1232 0000 00       		.space	1
 1235              	oneshot_layer_data:
 1236 0001 00       		.space	1
 1239              	real_mods:
 1240 0002 00       		.space	1
 1243              	weak_mods:
 1244 0003 00       		.space	1
 1247              	macro_mods:
 1248 0004 00       		.space	1
 1251              	oneshot_mods:
 1252 0005 00       		.space	1
 1255              	__compound_literal.0:
 1256 0006 00000000 		.space	32
 1256      00000000 
 1256      00000000 
 1256      00000000 
 1256      00000000 
 1257              		.text
 1258              	.Letext0:
 1259              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 1260              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 1261              		.file 5 "tmk_core/common/report.h"
 1262              		.file 6 "tmk_core/common/host.h"
 1263              		.file 7 "tmk_core/common/debug.h"
 1264              		.file 8 "tmk_core/common/action.h"
 1265              		.file 9 "tmk_core/common/action_layer.h"
 1266              		.file 10 "tmk_core/common/timer.h"
 1267              		.file 11 "quantum/keycode_config.h"
 1268              		.file 12 "tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
/var/tmp//ccmrZMeX.s:18     .text.add_key:0000000000000000 $t
/var/tmp//ccmrZMeX.s:25     .text.add_key:0000000000000000 add_key
/var/tmp//ccmrZMeX.s:44     .text.add_key:000000000000000c $d
/var/tmp//ccmrZMeX.s:49     .text.del_key:0000000000000000 $t
/var/tmp//ccmrZMeX.s:56     .text.del_key:0000000000000000 del_key
/var/tmp//ccmrZMeX.s:74     .text.del_key:000000000000000c $d
/var/tmp//ccmrZMeX.s:79     .text.clear_keys:0000000000000000 $t
/var/tmp//ccmrZMeX.s:86     .text.clear_keys:0000000000000000 clear_keys
/var/tmp//ccmrZMeX.s:101    .text.clear_keys:0000000000000008 $d
/var/tmp//ccmrZMeX.s:106    .text.get_oneshot_locked_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:113    .text.get_oneshot_locked_mods:0000000000000000 get_oneshot_locked_mods
/var/tmp//ccmrZMeX.s:128    .text.get_oneshot_locked_mods:0000000000000008 $d
/var/tmp//ccmrZMeX.s:133    .text.has_oneshot_mods_timed_out:0000000000000000 $t
/var/tmp//ccmrZMeX.s:140    .text.has_oneshot_mods_timed_out:0000000000000000 has_oneshot_mods_timed_out
/var/tmp//ccmrZMeX.s:154    .text.get_oneshot_layer:0000000000000000 $t
/var/tmp//ccmrZMeX.s:161    .text.get_oneshot_layer:0000000000000000 get_oneshot_layer
/var/tmp//ccmrZMeX.s:176    .text.get_oneshot_layer:000000000000000c $d
/var/tmp//ccmrZMeX.s:181    .text.get_oneshot_layer_state:0000000000000000 $t
/var/tmp//ccmrZMeX.s:188    .text.get_oneshot_layer_state:0000000000000000 get_oneshot_layer_state
/var/tmp//ccmrZMeX.s:203    .text.get_oneshot_layer_state:000000000000000c $d
/var/tmp//ccmrZMeX.s:208    .text.is_oneshot_layer_active:0000000000000000 $t
/var/tmp//ccmrZMeX.s:215    .text.is_oneshot_layer_active:0000000000000000 is_oneshot_layer_active
/var/tmp//ccmrZMeX.s:237    .text.is_oneshot_layer_active:0000000000000010 $d
/var/tmp//ccmrZMeX.s:242    .text.get_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:249    .text.get_mods:0000000000000000 get_mods
/var/tmp//ccmrZMeX.s:263    .text.get_mods:0000000000000008 $d
/var/tmp//ccmrZMeX.s:268    .text.add_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:275    .text.add_mods:0000000000000000 add_mods
/var/tmp//ccmrZMeX.s:293    .text.add_mods:000000000000000c $d
/var/tmp//ccmrZMeX.s:298    .text.del_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:305    .text.del_mods:0000000000000000 del_mods
/var/tmp//ccmrZMeX.s:323    .text.del_mods:000000000000000c $d
/var/tmp//ccmrZMeX.s:328    .text.set_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:335    .text.set_mods:0000000000000000 set_mods
/var/tmp//ccmrZMeX.s:350    .text.set_mods:0000000000000008 $d
/var/tmp//ccmrZMeX.s:355    .text.clear_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:362    .text.clear_mods:0000000000000000 clear_mods
/var/tmp//ccmrZMeX.s:377    .text.clear_mods:0000000000000008 $d
/var/tmp//ccmrZMeX.s:382    .text.get_weak_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:389    .text.get_weak_mods:0000000000000000 get_weak_mods
/var/tmp//ccmrZMeX.s:403    .text.get_weak_mods:0000000000000008 $d
/var/tmp//ccmrZMeX.s:408    .text.add_weak_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:415    .text.add_weak_mods:0000000000000000 add_weak_mods
/var/tmp//ccmrZMeX.s:433    .text.add_weak_mods:000000000000000c $d
/var/tmp//ccmrZMeX.s:438    .text.del_weak_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:445    .text.del_weak_mods:0000000000000000 del_weak_mods
/var/tmp//ccmrZMeX.s:463    .text.del_weak_mods:000000000000000c $d
/var/tmp//ccmrZMeX.s:468    .text.set_weak_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:475    .text.set_weak_mods:0000000000000000 set_weak_mods
/var/tmp//ccmrZMeX.s:490    .text.set_weak_mods:0000000000000008 $d
/var/tmp//ccmrZMeX.s:495    .text.clear_weak_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:502    .text.clear_weak_mods:0000000000000000 clear_weak_mods
/var/tmp//ccmrZMeX.s:517    .text.clear_weak_mods:0000000000000008 $d
/var/tmp//ccmrZMeX.s:522    .text.get_macro_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:529    .text.get_macro_mods:0000000000000000 get_macro_mods
/var/tmp//ccmrZMeX.s:543    .text.get_macro_mods:0000000000000008 $d
/var/tmp//ccmrZMeX.s:548    .text.add_macro_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:555    .text.add_macro_mods:0000000000000000 add_macro_mods
/var/tmp//ccmrZMeX.s:573    .text.add_macro_mods:000000000000000c $d
/var/tmp//ccmrZMeX.s:578    .text.del_macro_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:585    .text.del_macro_mods:0000000000000000 del_macro_mods
/var/tmp//ccmrZMeX.s:603    .text.del_macro_mods:000000000000000c $d
/var/tmp//ccmrZMeX.s:608    .text.set_macro_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:615    .text.set_macro_mods:0000000000000000 set_macro_mods
/var/tmp//ccmrZMeX.s:630    .text.set_macro_mods:0000000000000008 $d
/var/tmp//ccmrZMeX.s:635    .text.clear_macro_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:642    .text.clear_macro_mods:0000000000000000 clear_macro_mods
/var/tmp//ccmrZMeX.s:657    .text.clear_macro_mods:0000000000000008 $d
/var/tmp//ccmrZMeX.s:662    .text.get_oneshot_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:669    .text.get_oneshot_mods:0000000000000000 get_oneshot_mods
/var/tmp//ccmrZMeX.s:683    .text.get_oneshot_mods:0000000000000008 $d
/var/tmp//ccmrZMeX.s:688    .text.oneshot_locked_mods_changed_user:0000000000000000 $t
/var/tmp//ccmrZMeX.s:695    .text.oneshot_locked_mods_changed_user:0000000000000000 oneshot_locked_mods_changed_user
/var/tmp//ccmrZMeX.s:695    .text.oneshot_locked_mods_changed_user:0000000000000000 oneshot_locked_mods_changed_user.localalias.0
/var/tmp//ccmrZMeX.s:710    .text.oneshot_locked_mods_changed_kb:0000000000000000 $t
/var/tmp//ccmrZMeX.s:717    .text.oneshot_locked_mods_changed_kb:0000000000000000 oneshot_locked_mods_changed_kb
/var/tmp//ccmrZMeX.s:736    .text.set_oneshot_locked_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:743    .text.set_oneshot_locked_mods:0000000000000000 set_oneshot_locked_mods
/var/tmp//ccmrZMeX.s:770    .text.set_oneshot_locked_mods:0000000000000014 $d
/var/tmp//ccmrZMeX.s:775    .text.clear_oneshot_locked_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:782    .text.clear_oneshot_locked_mods:0000000000000000 clear_oneshot_locked_mods
/var/tmp//ccmrZMeX.s:808    .text.clear_oneshot_locked_mods:0000000000000014 $d
/var/tmp//ccmrZMeX.s:813    .text.oneshot_mods_changed_user:0000000000000000 $t
/var/tmp//ccmrZMeX.s:820    .text.oneshot_mods_changed_user:0000000000000000 oneshot_mods_changed_user
/var/tmp//ccmrZMeX.s:831    .text.oneshot_mods_changed_kb:0000000000000000 $t
/var/tmp//ccmrZMeX.s:838    .text.oneshot_mods_changed_kb:0000000000000000 oneshot_mods_changed_kb
/var/tmp//ccmrZMeX.s:858    .text.set_oneshot_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:865    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
/var/tmp//ccmrZMeX.s:892    .text.set_oneshot_mods:0000000000000014 $d
/var/tmp//ccmrZMeX.s:897    .text.clear_oneshot_mods:0000000000000000 $t
/var/tmp//ccmrZMeX.s:904    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
/var/tmp//ccmrZMeX.s:930    .text.clear_oneshot_mods:0000000000000014 $d
/var/tmp//ccmrZMeX.s:935    .text.send_keyboard_report:0000000000000000 $t
/var/tmp//ccmrZMeX.s:942    .text.send_keyboard_report:0000000000000000 send_keyboard_report
/var/tmp//ccmrZMeX.s:1003   .text.send_keyboard_report:0000000000000044 $d
/var/tmp//ccmrZMeX.s:1009   .text.oneshot_layer_changed_user:0000000000000000 $t
/var/tmp//ccmrZMeX.s:1016   .text.oneshot_layer_changed_user:0000000000000000 oneshot_layer_changed_user
/var/tmp//ccmrZMeX.s:1027   .text.oneshot_layer_changed_kb:0000000000000000 $t
/var/tmp//ccmrZMeX.s:1034   .text.oneshot_layer_changed_kb:0000000000000000 oneshot_layer_changed_kb
/var/tmp//ccmrZMeX.s:1054   .text.set_oneshot_layer:0000000000000000 $t
/var/tmp//ccmrZMeX.s:1061   .text.set_oneshot_layer:0000000000000000 set_oneshot_layer
/var/tmp//ccmrZMeX.s:1095   .text.set_oneshot_layer:000000000000001c $d
/var/tmp//ccmrZMeX.s:1100   .text.reset_oneshot_layer:0000000000000000 $t
/var/tmp//ccmrZMeX.s:1107   .text.reset_oneshot_layer:0000000000000000 reset_oneshot_layer
/var/tmp//ccmrZMeX.s:1129   .text.reset_oneshot_layer:0000000000000010 $d
/var/tmp//ccmrZMeX.s:1134   .text.clear_oneshot_layer_state:0000000000000000 $t
/var/tmp//ccmrZMeX.s:1141   .text.clear_oneshot_layer_state:0000000000000000 clear_oneshot_layer_state
/var/tmp//ccmrZMeX.s:1188   .text.clear_oneshot_layer_state:000000000000002c $d
/var/tmp//ccmrZMeX.s:1193   .text.has_anymod:0000000000000000 $t
/var/tmp//ccmrZMeX.s:1200   .text.has_anymod:0000000000000000 has_anymod
/var/tmp//ccmrZMeX.s:1215   .text.has_anymod:0000000000000008 $d
/var/tmp//ccmrZMeX.s:1225   .data:0000000000000000 keyboard_report
/var/tmp//ccmrZMeX.s:1221   .data:0000000000000000 $d
/var/tmp//ccmrZMeX.s:1255   .bss:0000000000000006 __compound_literal.0
/var/tmp//ccmrZMeX.s:1231   .bss:0000000000000000 oneshot_locked_mods
/var/tmp//ccmrZMeX.s:1232   .bss:0000000000000000 $d
/var/tmp//ccmrZMeX.s:1235   .bss:0000000000000001 oneshot_layer_data
/var/tmp//ccmrZMeX.s:1239   .bss:0000000000000002 real_mods
/var/tmp//ccmrZMeX.s:1243   .bss:0000000000000003 weak_mods
/var/tmp//ccmrZMeX.s:1247   .bss:0000000000000004 macro_mods
/var/tmp//ccmrZMeX.s:1251   .bss:0000000000000005 oneshot_mods

UNDEFINED SYMBOLS
add_key_to_report
del_key_from_report
clear_keys_from_report
has_anykey
host_keyboard_send
layer_on
layer_off
bitpop
