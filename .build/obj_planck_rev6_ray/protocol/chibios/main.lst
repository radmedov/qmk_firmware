   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.startup.main,"ax",%progbits
  16              		.align	1
  17              		.global	main
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	main:
  24              	.LFB285:
  25              		.file 1 "tmk_core/protocol/chibios/main.c"
   1:tmk_core/protocol/chibios/main.c **** /*
   2:tmk_core/protocol/chibios/main.c ****  * (c) 2015 flabberast <s3+flabbergast@sdfeu.org>
   3:tmk_core/protocol/chibios/main.c ****  *
   4:tmk_core/protocol/chibios/main.c ****  * Based on the following work:
   5:tmk_core/protocol/chibios/main.c ****  *  - Guillaume Duc's raw hid example (MIT License)
   6:tmk_core/protocol/chibios/main.c ****  *    https://github.com/guiduc/usb-hid-chibios-example
   7:tmk_core/protocol/chibios/main.c ****  *  - PJRC Teensy examples (MIT License)
   8:tmk_core/protocol/chibios/main.c ****  *    https://www.pjrc.com/teensy/usb_keyboard.html
   9:tmk_core/protocol/chibios/main.c ****  *  - hasu's TMK keyboard code (GPL v2 and some code Modified BSD)
  10:tmk_core/protocol/chibios/main.c ****  *    https://github.com/tmk/tmk_keyboard/
  11:tmk_core/protocol/chibios/main.c ****  *  - ChibiOS demo code (Apache 2.0 License)
  12:tmk_core/protocol/chibios/main.c ****  *    http://www.chibios.org
  13:tmk_core/protocol/chibios/main.c ****  *
  14:tmk_core/protocol/chibios/main.c ****  * Since some GPL'd code is used, this work is licensed under
  15:tmk_core/protocol/chibios/main.c ****  * GPL v2 or later.
  16:tmk_core/protocol/chibios/main.c ****  */
  17:tmk_core/protocol/chibios/main.c **** 
  18:tmk_core/protocol/chibios/main.c **** #include "ch.h"
  19:tmk_core/protocol/chibios/main.c **** #include "hal.h"
  20:tmk_core/protocol/chibios/main.c **** 
  21:tmk_core/protocol/chibios/main.c **** #include "usb_main.h"
  22:tmk_core/protocol/chibios/main.c **** 
  23:tmk_core/protocol/chibios/main.c **** /* TMK includes */
  24:tmk_core/protocol/chibios/main.c **** #include "report.h"
  25:tmk_core/protocol/chibios/main.c **** #include "host.h"
  26:tmk_core/protocol/chibios/main.c **** #include "host_driver.h"
  27:tmk_core/protocol/chibios/main.c **** #include "keyboard.h"
  28:tmk_core/protocol/chibios/main.c **** #include "action.h"
  29:tmk_core/protocol/chibios/main.c **** #include "action_util.h"
  30:tmk_core/protocol/chibios/main.c **** #include "mousekey.h"
  31:tmk_core/protocol/chibios/main.c **** #include "led.h"
  32:tmk_core/protocol/chibios/main.c **** #include "sendchar.h"
  33:tmk_core/protocol/chibios/main.c **** #include "debug.h"
  34:tmk_core/protocol/chibios/main.c **** #include "printf.h"
  35:tmk_core/protocol/chibios/main.c **** #ifdef SLEEP_LED_ENABLE
  36:tmk_core/protocol/chibios/main.c **** #    include "sleep_led.h"
  37:tmk_core/protocol/chibios/main.c **** #endif
  38:tmk_core/protocol/chibios/main.c **** #ifdef SERIAL_LINK_ENABLE
  39:tmk_core/protocol/chibios/main.c **** #    include "serial_link/system/serial_link.h"
  40:tmk_core/protocol/chibios/main.c **** #endif
  41:tmk_core/protocol/chibios/main.c **** #ifdef VISUALIZER_ENABLE
  42:tmk_core/protocol/chibios/main.c **** #    include "visualizer/visualizer.h"
  43:tmk_core/protocol/chibios/main.c **** #endif
  44:tmk_core/protocol/chibios/main.c **** #ifdef MIDI_ENABLE
  45:tmk_core/protocol/chibios/main.c **** #    include "qmk_midi.h"
  46:tmk_core/protocol/chibios/main.c **** #endif
  47:tmk_core/protocol/chibios/main.c **** #ifdef STM32_EEPROM_ENABLE
  48:tmk_core/protocol/chibios/main.c **** #    include "eeprom_stm32.h"
  49:tmk_core/protocol/chibios/main.c **** #endif
  50:tmk_core/protocol/chibios/main.c **** #include "suspend.h"
  51:tmk_core/protocol/chibios/main.c **** #include "wait.h"
  52:tmk_core/protocol/chibios/main.c **** 
  53:tmk_core/protocol/chibios/main.c **** /* -------------------------
  54:tmk_core/protocol/chibios/main.c ****  *   TMK host driver defs
  55:tmk_core/protocol/chibios/main.c ****  * -------------------------
  56:tmk_core/protocol/chibios/main.c ****  */
  57:tmk_core/protocol/chibios/main.c **** 
  58:tmk_core/protocol/chibios/main.c **** /* declarations */
  59:tmk_core/protocol/chibios/main.c **** uint8_t keyboard_leds(void);
  60:tmk_core/protocol/chibios/main.c **** void    send_keyboard(report_keyboard_t *report);
  61:tmk_core/protocol/chibios/main.c **** void    send_mouse(report_mouse_t *report);
  62:tmk_core/protocol/chibios/main.c **** void    send_system(uint16_t data);
  63:tmk_core/protocol/chibios/main.c **** void    send_consumer(uint16_t data);
  64:tmk_core/protocol/chibios/main.c **** 
  65:tmk_core/protocol/chibios/main.c **** /* host struct */
  66:tmk_core/protocol/chibios/main.c **** host_driver_t chibios_driver = {keyboard_leds, send_keyboard, send_mouse, send_system, send_consume
  67:tmk_core/protocol/chibios/main.c **** 
  68:tmk_core/protocol/chibios/main.c **** #ifdef VIRTSER_ENABLE
  69:tmk_core/protocol/chibios/main.c **** void virtser_task(void);
  70:tmk_core/protocol/chibios/main.c **** #endif
  71:tmk_core/protocol/chibios/main.c **** 
  72:tmk_core/protocol/chibios/main.c **** #ifdef RAW_ENABLE
  73:tmk_core/protocol/chibios/main.c **** void raw_hid_task(void);
  74:tmk_core/protocol/chibios/main.c **** #endif
  75:tmk_core/protocol/chibios/main.c **** 
  76:tmk_core/protocol/chibios/main.c **** #ifdef CONSOLE_ENABLE
  77:tmk_core/protocol/chibios/main.c **** void console_task(void);
  78:tmk_core/protocol/chibios/main.c **** #endif
  79:tmk_core/protocol/chibios/main.c **** 
  80:tmk_core/protocol/chibios/main.c **** /* TESTING
  81:tmk_core/protocol/chibios/main.c ****  * Amber LED blinker thread, times are in milliseconds.
  82:tmk_core/protocol/chibios/main.c ****  */
  83:tmk_core/protocol/chibios/main.c **** /* set this variable to non-zero anywhere to blink once */
  84:tmk_core/protocol/chibios/main.c **** // static THD_WORKING_AREA(waThread1, 128);
  85:tmk_core/protocol/chibios/main.c **** // static THD_FUNCTION(Thread1, arg) {
  86:tmk_core/protocol/chibios/main.c **** 
  87:tmk_core/protocol/chibios/main.c **** //   (void)arg;
  88:tmk_core/protocol/chibios/main.c **** //   chRegSetThreadName("blinker");
  89:tmk_core/protocol/chibios/main.c **** //   while (true) {
  90:tmk_core/protocol/chibios/main.c **** //     systime_t time;
  91:tmk_core/protocol/chibios/main.c **** 
  92:tmk_core/protocol/chibios/main.c **** //     time = USB_DRIVER.state == USB_ACTIVE ? 250 : 500;
  93:tmk_core/protocol/chibios/main.c **** //     palClearLine(LINE_CAPS_LOCK);
  94:tmk_core/protocol/chibios/main.c **** //     chSysPolledDelayX(MS2RTC(STM32_HCLK, time));
  95:tmk_core/protocol/chibios/main.c **** //     palSetLine(LINE_CAPS_LOCK);
  96:tmk_core/protocol/chibios/main.c **** //     chSysPolledDelayX(MS2RTC(STM32_HCLK, time));
  97:tmk_core/protocol/chibios/main.c **** //   }
  98:tmk_core/protocol/chibios/main.c **** // }
  99:tmk_core/protocol/chibios/main.c **** 
 100:tmk_core/protocol/chibios/main.c **** /* Main thread
 101:tmk_core/protocol/chibios/main.c ****  */
 102:tmk_core/protocol/chibios/main.c **** int main(void) {
  26              		.loc 1 102 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 70B5     		push	{r4, r5, r6, lr}
  31              		.cfi_def_cfa_offset 16
  32              		.cfi_offset 4, -16
  33              		.cfi_offset 5, -12
  34              		.cfi_offset 6, -8
  35              		.cfi_offset 14, -4
 103:tmk_core/protocol/chibios/main.c ****     /* ChibiOS/RT init */
 104:tmk_core/protocol/chibios/main.c ****     halInit();
  36              		.loc 1 104 0
  37 0002 FFF7FEFF 		bl	halInit
  38              	.LVL0:
 105:tmk_core/protocol/chibios/main.c ****     chSysInit();
  39              		.loc 1 105 0
  40 0006 FFF7FEFF 		bl	chSysInit
  41              	.LVL1:
 106:tmk_core/protocol/chibios/main.c **** 
 107:tmk_core/protocol/chibios/main.c **** #ifdef STM32_EEPROM_ENABLE
 108:tmk_core/protocol/chibios/main.c ****     EEPROM_Init();
  42              		.loc 1 108 0
  43 000a FFF7FEFF 		bl	EEPROM_Init
  44              	.LVL2:
 109:tmk_core/protocol/chibios/main.c **** #endif
 110:tmk_core/protocol/chibios/main.c **** 
 111:tmk_core/protocol/chibios/main.c ****     // TESTING
 112:tmk_core/protocol/chibios/main.c ****     // chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 113:tmk_core/protocol/chibios/main.c **** 
 114:tmk_core/protocol/chibios/main.c ****     keyboard_setup();
  45              		.loc 1 114 0
  46 000e FFF7FEFF 		bl	keyboard_setup
  47              	.LVL3:
 115:tmk_core/protocol/chibios/main.c **** 
 116:tmk_core/protocol/chibios/main.c ****     /* Init USB */
 117:tmk_core/protocol/chibios/main.c ****     init_usb_driver(&USB_DRIVER);
  48              		.loc 1 117 0
  49 0012 1A48     		ldr	r0, .L9
 118:tmk_core/protocol/chibios/main.c **** 
 119:tmk_core/protocol/chibios/main.c ****     /* init printf */
 120:tmk_core/protocol/chibios/main.c ****     init_printf(NULL, sendchar_pf);
 121:tmk_core/protocol/chibios/main.c **** 
 122:tmk_core/protocol/chibios/main.c **** #ifdef MIDI_ENABLE
 123:tmk_core/protocol/chibios/main.c ****     setup_midi();
 124:tmk_core/protocol/chibios/main.c **** #endif
 125:tmk_core/protocol/chibios/main.c **** 
 126:tmk_core/protocol/chibios/main.c **** #ifdef SERIAL_LINK_ENABLE
 127:tmk_core/protocol/chibios/main.c ****     init_serial_link();
 128:tmk_core/protocol/chibios/main.c **** #endif
 129:tmk_core/protocol/chibios/main.c **** 
 130:tmk_core/protocol/chibios/main.c **** #ifdef VISUALIZER_ENABLE
 131:tmk_core/protocol/chibios/main.c ****     visualizer_init();
 132:tmk_core/protocol/chibios/main.c **** #endif
 133:tmk_core/protocol/chibios/main.c **** 
 134:tmk_core/protocol/chibios/main.c ****     host_driver_t *driver = NULL;
 135:tmk_core/protocol/chibios/main.c **** 
 136:tmk_core/protocol/chibios/main.c ****     /* Wait until the USB or serial link is active */
 137:tmk_core/protocol/chibios/main.c ****     while (true) {
 138:tmk_core/protocol/chibios/main.c **** #if defined(WAIT_FOR_USB) || defined(SERIAL_LINK_ENABLE)
 139:tmk_core/protocol/chibios/main.c ****         if (USB_DRIVER.state == USB_ACTIVE) {
 140:tmk_core/protocol/chibios/main.c ****             driver = &chibios_driver;
 141:tmk_core/protocol/chibios/main.c ****             break;
 142:tmk_core/protocol/chibios/main.c ****         }
 143:tmk_core/protocol/chibios/main.c **** #else
 144:tmk_core/protocol/chibios/main.c ****         driver = &chibios_driver;
 145:tmk_core/protocol/chibios/main.c ****         break;
 146:tmk_core/protocol/chibios/main.c **** #endif
 147:tmk_core/protocol/chibios/main.c **** #ifdef SERIAL_LINK_ENABLE
 148:tmk_core/protocol/chibios/main.c ****         if (is_serial_link_connected()) {
 149:tmk_core/protocol/chibios/main.c ****             driver = get_serial_link_driver();
 150:tmk_core/protocol/chibios/main.c ****             break;
 151:tmk_core/protocol/chibios/main.c ****         }
 152:tmk_core/protocol/chibios/main.c ****         serial_link_update();
 153:tmk_core/protocol/chibios/main.c **** #endif
 154:tmk_core/protocol/chibios/main.c ****         wait_ms(50);
 155:tmk_core/protocol/chibios/main.c ****     }
 156:tmk_core/protocol/chibios/main.c **** 
 157:tmk_core/protocol/chibios/main.c ****     /* Do need to wait here!
 158:tmk_core/protocol/chibios/main.c ****      * Otherwise the next print might start a transfer on console EP
 159:tmk_core/protocol/chibios/main.c ****      * before the USB is completely ready, which sometimes causes
 160:tmk_core/protocol/chibios/main.c ****      * HardFaults.
 161:tmk_core/protocol/chibios/main.c ****      */
 162:tmk_core/protocol/chibios/main.c ****     wait_ms(50);
 163:tmk_core/protocol/chibios/main.c **** 
 164:tmk_core/protocol/chibios/main.c ****     print("USB configured.\n");
 165:tmk_core/protocol/chibios/main.c **** 
 166:tmk_core/protocol/chibios/main.c ****     /* init TMK modules */
 167:tmk_core/protocol/chibios/main.c ****     keyboard_init();
 168:tmk_core/protocol/chibios/main.c ****     host_set_driver(driver);
 169:tmk_core/protocol/chibios/main.c **** 
 170:tmk_core/protocol/chibios/main.c **** #ifdef SLEEP_LED_ENABLE
 171:tmk_core/protocol/chibios/main.c ****     sleep_led_init();
 172:tmk_core/protocol/chibios/main.c **** #endif
 173:tmk_core/protocol/chibios/main.c **** 
 174:tmk_core/protocol/chibios/main.c ****     print("Keyboard start.\n");
 175:tmk_core/protocol/chibios/main.c **** 
 176:tmk_core/protocol/chibios/main.c ****     /* Main loop */
 177:tmk_core/protocol/chibios/main.c ****     while (true) {
 178:tmk_core/protocol/chibios/main.c **** #if !defined(NO_USB_STARTUP_CHECK)
 179:tmk_core/protocol/chibios/main.c ****         if (USB_DRIVER.state == USB_SUSPENDED) {
  50              		.loc 1 179 0
  51 0014 194C     		ldr	r4, .L9
 180:tmk_core/protocol/chibios/main.c ****             print("[s]");
  52              		.loc 1 180 0
  53 0016 1A4E     		ldr	r6, .L9+4
 117:tmk_core/protocol/chibios/main.c **** 
  54              		.loc 1 117 0
  55 0018 FFF7FEFF 		bl	init_usb_driver
  56              	.LVL4:
 120:tmk_core/protocol/chibios/main.c **** 
  57              		.loc 1 120 0
  58 001c 1949     		ldr	r1, .L9+8
  59 001e 0020     		movs	r0, #0
  60 0020 FFF7FEFF 		bl	init_printf
  61              	.LVL5:
 162:tmk_core/protocol/chibios/main.c **** 
  62              		.loc 1 162 0
  63 0024 41F28830 		movw	r0, #5000
  64 0028 FFF7FEFF 		bl	chThdSleep
  65              	.LVL6:
 164:tmk_core/protocol/chibios/main.c **** 
  66              		.loc 1 164 0
  67 002c 1648     		ldr	r0, .L9+12
  68 002e FFF7FEFF 		bl	tfp_printf
  69              	.LVL7:
 167:tmk_core/protocol/chibios/main.c ****     host_set_driver(driver);
  70              		.loc 1 167 0
  71 0032 FFF7FEFF 		bl	keyboard_init
  72              	.LVL8:
 168:tmk_core/protocol/chibios/main.c **** 
  73              		.loc 1 168 0
  74 0036 1548     		ldr	r0, .L9+16
  75 0038 FFF7FEFF 		bl	host_set_driver
  76              	.LVL9:
 174:tmk_core/protocol/chibios/main.c **** 
  77              		.loc 1 174 0
  78 003c 1448     		ldr	r0, .L9+20
  79 003e FFF7FEFF 		bl	tfp_printf
  80              	.LVL10:
  81 0042 2546     		mov	r5, r4
  82              	.L6:
 179:tmk_core/protocol/chibios/main.c ****             print("[s]");
  83              		.loc 1 179 0
  84 0044 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
  85 0046 052B     		cmp	r3, #5
  86 0048 09D1     		bne	.L2
  87              		.loc 1 180 0
  88 004a 3046     		mov	r0, r6
  89 004c FFF7FEFF 		bl	tfp_printf
  90              	.LVL11:
  91              	.L4:
 181:tmk_core/protocol/chibios/main.c **** #    ifdef VISUALIZER_ENABLE
 182:tmk_core/protocol/chibios/main.c ****             visualizer_suspend();
 183:tmk_core/protocol/chibios/main.c **** #    endif
 184:tmk_core/protocol/chibios/main.c ****             while (USB_DRIVER.state == USB_SUSPENDED) {
  92              		.loc 1 184 0
  93 0050 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
  94 0052 052B     		cmp	r3, #5
  95 0054 08D0     		beq	.L5
 185:tmk_core/protocol/chibios/main.c ****                 /* Do this in the suspended state */
 186:tmk_core/protocol/chibios/main.c **** #    ifdef SERIAL_LINK_ENABLE
 187:tmk_core/protocol/chibios/main.c ****                 serial_link_update();
 188:tmk_core/protocol/chibios/main.c **** #    endif
 189:tmk_core/protocol/chibios/main.c ****                 suspend_power_down();  // on AVR this deep sleeps for 15ms
 190:tmk_core/protocol/chibios/main.c ****                 /* Remote wakeup */
 191:tmk_core/protocol/chibios/main.c ****                 if (suspend_wakeup_condition()) {
 192:tmk_core/protocol/chibios/main.c ****                     usbWakeupHost(&USB_DRIVER);
 193:tmk_core/protocol/chibios/main.c ****                 }
 194:tmk_core/protocol/chibios/main.c ****             }
 195:tmk_core/protocol/chibios/main.c ****             /* Woken up */
 196:tmk_core/protocol/chibios/main.c ****             // variables has been already cleared by the wakeup hook
 197:tmk_core/protocol/chibios/main.c ****             send_keyboard_report();
  96              		.loc 1 197 0
  97 0056 FFF7FEFF 		bl	send_keyboard_report
  98              	.LVL12:
 198:tmk_core/protocol/chibios/main.c **** #    ifdef MOUSEKEY_ENABLE
 199:tmk_core/protocol/chibios/main.c ****             mousekey_send();
  99              		.loc 1 199 0
 100 005a FFF7FEFF 		bl	mousekey_send
 101              	.LVL13:
 102              	.L2:
 200:tmk_core/protocol/chibios/main.c **** #    endif /* MOUSEKEY_ENABLE */
 201:tmk_core/protocol/chibios/main.c **** 
 202:tmk_core/protocol/chibios/main.c **** #    ifdef VISUALIZER_ENABLE
 203:tmk_core/protocol/chibios/main.c ****             visualizer_resume();
 204:tmk_core/protocol/chibios/main.c **** #    endif
 205:tmk_core/protocol/chibios/main.c ****         }
 206:tmk_core/protocol/chibios/main.c **** #endif
 207:tmk_core/protocol/chibios/main.c **** 
 208:tmk_core/protocol/chibios/main.c ****         keyboard_task();
 103              		.loc 1 208 0
 104 005e FFF7FEFF 		bl	keyboard_task
 105              	.LVL14:
 209:tmk_core/protocol/chibios/main.c **** #ifdef CONSOLE_ENABLE
 210:tmk_core/protocol/chibios/main.c ****         console_task();
 106              		.loc 1 210 0
 107 0062 FFF7FEFF 		bl	console_task
 108              	.LVL15:
 179:tmk_core/protocol/chibios/main.c ****             print("[s]");
 109              		.loc 1 179 0
 110 0066 EDE7     		b	.L6
 111              	.L5:
 189:tmk_core/protocol/chibios/main.c ****                 /* Remote wakeup */
 112              		.loc 1 189 0
 113 0068 FFF7FEFF 		bl	suspend_power_down
 114              	.LVL16:
 191:tmk_core/protocol/chibios/main.c ****                     usbWakeupHost(&USB_DRIVER);
 115              		.loc 1 191 0
 116 006c FFF7FEFF 		bl	suspend_wakeup_condition
 117              	.LVL17:
 118 0070 0028     		cmp	r0, #0
 119 0072 EDD0     		beq	.L4
 192:tmk_core/protocol/chibios/main.c ****                 }
 120              		.loc 1 192 0
 121 0074 2846     		mov	r0, r5
 122 0076 FFF7FEFF 		bl	usbWakeupHost
 123              	.LVL18:
 124 007a E9E7     		b	.L4
 125              	.L10:
 126              		.align	2
 127              	.L9:
 128 007c 00000000 		.word	USBD1
 129 0080 22000000 		.word	.LC2
 130 0084 00000000 		.word	sendchar_pf
 131 0088 00000000 		.word	.LC0
 132 008c 00000000 		.word	.LANCHOR0
 133 0090 11000000 		.word	.LC1
 134              		.cfi_endproc
 135              	.LFE285:
 137              		.global	chibios_driver
 138              		.section	.data.chibios_driver,"aw",%progbits
 139              		.align	2
 140              		.set	.LANCHOR0,. + 0
 143              	chibios_driver:
 144 0000 00000000 		.word	keyboard_leds
 145 0004 00000000 		.word	send_keyboard
 146 0008 00000000 		.word	send_mouse
 147 000c 00000000 		.word	send_system
 148 0010 00000000 		.word	send_consumer
 149              		.section	.rodata.main.str1.1,"aMS",%progbits,1
 150              	.LC0:
 151 0000 55534220 		.ascii	"USB configured.\012\000"
 151      636F6E66 
 151      69677572 
 151      65642E0A 
 151      00
 152              	.LC1:
 153 0011 4B657962 		.ascii	"Keyboard start.\012\000"
 153      6F617264 
 153      20737461 
 153      72742E0A 
 153      00
 154              	.LC2:
 155 0022 5B735D00 		.ascii	"[s]\000"
 156              		.text
 157              	.Letext0:
 158              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 159              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 160              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 161              		.file 5 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 162              		.file 6 "./lib/chibios/os/rt/include/chsystypes.h"
 163              		.file 7 "./lib/chibios/os/rt/include/chschd.h"
 164              		.file 8 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 165              		.file 9 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 166              		.file 10 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/stm32f303xc.h"
 167              		.file 11 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 168              		.file 12 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 169              		.file 13 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 170              		.file 14 "./lib/chibios/os/rt/include/chtm.h"
 171              		.file 15 "./lib/chibios/os/rt/include/chsem.h"
 172              		.file 16 "./lib/chibios/os/rt/include/chmtx.h"
 173              		.file 17 "./lib/chibios/os/rt/include/chsys.h"
 174              		.file 18 "./lib/chibios/os/rt/include/chregistry.h"
 175              		.file 19 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 176              		.file 20 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 177              		.file 21 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 178              		.file 22 "./lib/chibios/os/hal/include/hal_dac.h"
 179              		.file 23 "./lib/chibios/os/hal/ports/STM32/LLD/DACv1/hal_dac_lld.h"
 180              		.file 24 "./lib/chibios/os/hal/include/hal_gpt.h"
 181              		.file 25 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_gpt_lld.h"
 182              		.file 26 "./lib/chibios/os/hal/include/hal_i2c.h"
 183              		.file 27 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 184              		.file 28 "./lib/chibios/os/hal/include/hal_pwm.h"
 185              		.file 29 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 186              		.file 30 "./lib/chibios/os/hal/include/hal_usb.h"
 187              		.file 31 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 188              		.file 32 "tmk_core/common/report.h"
 189              		.file 33 "tmk_core/common/host_driver.h"
 190              		.file 34 "tmk_core/common/host.h"
 191              		.file 35 "tmk_core/common/action.h"
 192              		.file 36 "tmk_core/common/action_util.h"
 193              		.file 37 "tmk_core/common/mousekey.h"
 194              		.file 38 "tmk_core/common/debug.h"
 195              		.file 39 "./lib/chibios/os/hal/include/hal.h"
 196              		.file 40 "tmk_core/common/chibios/eeprom_stm32.h"
 197              		.file 41 "tmk_core/common/keyboard.h"
 198              		.file 42 "tmk_core/protocol/chibios/usb_main.h"
 199              		.file 43 "tmk_core/common/chibios/printf.h"
 200              		.file 44 "./lib/chibios/os/rt/include/chthreads.h"
 201              		.file 45 "tmk_core/common/suspend.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccnOg6SJ.s:16     .text.startup.main:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccnOg6SJ.s:23     .text.startup.main:0000000000000000 main
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccnOg6SJ.s:128    .text.startup.main:000000000000007c $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccnOg6SJ.s:143    .data.chibios_driver:0000000000000000 chibios_driver
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccnOg6SJ.s:139    .data.chibios_driver:0000000000000000 $d

UNDEFINED SYMBOLS
halInit
chSysInit
EEPROM_Init
keyboard_setup
init_usb_driver
init_printf
chThdSleep
tfp_printf
keyboard_init
host_set_driver
send_keyboard_report
mousekey_send
keyboard_task
console_task
suspend_power_down
suspend_wakeup_condition
usbWakeupHost
USBD1
sendchar_pf
keyboard_leds
send_keyboard
send_mouse
send_system
send_consumer
