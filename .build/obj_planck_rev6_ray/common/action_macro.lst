   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"action_macro.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.action_macro_play,"ax",%progbits
  16              		.align	1
  17              		.global	action_macro_play
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	action_macro_play:
  24              	.LFB285:
  25              		.file 1 "tmk_core/common/action_macro.c"
   1:tmk_core/common/action_macro.c **** /*
   2:tmk_core/common/action_macro.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action_macro.c **** 
   4:tmk_core/common/action_macro.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action_macro.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action_macro.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action_macro.c **** (at your option) any later version.
   8:tmk_core/common/action_macro.c **** 
   9:tmk_core/common/action_macro.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action_macro.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action_macro.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action_macro.c **** GNU General Public License for more details.
  13:tmk_core/common/action_macro.c **** 
  14:tmk_core/common/action_macro.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action_macro.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action_macro.c **** */
  17:tmk_core/common/action_macro.c **** #include "action.h"
  18:tmk_core/common/action_macro.c **** #include "action_util.h"
  19:tmk_core/common/action_macro.c **** #include "action_macro.h"
  20:tmk_core/common/action_macro.c **** #include "wait.h"
  21:tmk_core/common/action_macro.c **** 
  22:tmk_core/common/action_macro.c **** #ifdef DEBUG_ACTION
  23:tmk_core/common/action_macro.c **** #    include "debug.h"
  24:tmk_core/common/action_macro.c **** #else
  25:tmk_core/common/action_macro.c **** #    include "nodebug.h"
  26:tmk_core/common/action_macro.c **** #endif
  27:tmk_core/common/action_macro.c **** 
  28:tmk_core/common/action_macro.c **** #ifndef NO_ACTION_MACRO
  29:tmk_core/common/action_macro.c **** 
  30:tmk_core/common/action_macro.c **** #    define MACRO_READ() (macro = MACRO_GET(macro_p++))
  31:tmk_core/common/action_macro.c **** /** \brief Action Macro Play
  32:tmk_core/common/action_macro.c ****  *
  33:tmk_core/common/action_macro.c ****  * FIXME: Needs doc
  34:tmk_core/common/action_macro.c ****  */
  35:tmk_core/common/action_macro.c **** void action_macro_play(const macro_t *macro_p) {
  26              		.loc 1 35 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  32              		.cfi_def_cfa_offset 24
  33              		.cfi_offset 3, -24
  34              		.cfi_offset 4, -20
  35              		.cfi_offset 5, -16
  36              		.cfi_offset 6, -12
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  36:tmk_core/common/action_macro.c ****     macro_t macro    = END;
  37:tmk_core/common/action_macro.c ****     uint8_t interval = 0;
  38:tmk_core/common/action_macro.c **** 
  39:tmk_core/common/action_macro.c ****     if (!macro_p) return;
  39              		.loc 1 39 0
  40 0002 0346     		mov	r3, r0
  41 0004 60B1     		cbz	r0, .L1
  37:tmk_core/common/action_macro.c **** 
  42              		.loc 1 37 0
  43 0006 0025     		movs	r5, #0
  40:tmk_core/common/action_macro.c ****     while (true) {
  41:tmk_core/common/action_macro.c ****         switch (MACRO_READ()) {
  42:tmk_core/common/action_macro.c ****             case KEY_DOWN:
  43:tmk_core/common/action_macro.c ****                 MACRO_READ();
  44:tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
  45:tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  46:tmk_core/common/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
  47:tmk_core/common/action_macro.c ****                     send_keyboard_report();
  48:tmk_core/common/action_macro.c ****                 } else {
  49:tmk_core/common/action_macro.c ****                     register_code(macro);
  50:tmk_core/common/action_macro.c ****                 }
  51:tmk_core/common/action_macro.c ****                 break;
  52:tmk_core/common/action_macro.c ****             case KEY_UP:
  53:tmk_core/common/action_macro.c ****                 MACRO_READ();
  54:tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
  55:tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  56:tmk_core/common/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
  44              		.loc 1 56 0
  45 0008 0126     		movs	r6, #1
  46              	.LVL1:
  47              	.L17:
  41:tmk_core/common/action_macro.c ****             case KEY_DOWN:
  48              		.loc 1 41 0
  49 000a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
  50 000c 7328     		cmp	r0, #115
  51 000e 03F10104 		add	r4, r3, #1
  52              	.LVL2:
  53 0012 06D8     		bhi	.L3
  54 0014 0428     		cmp	r0, #4
  55 0016 27D2     		bcs	.L4
  56 0018 0128     		cmp	r0, #1
  57 001a 0ED0     		beq	.L5
  58 001c 0228     		cmp	r0, #2
  59 001e 26D0     		beq	.L6
  60              	.LVL3:
  61              	.L1:
  57:tmk_core/common/action_macro.c ****                     send_keyboard_report();
  58:tmk_core/common/action_macro.c ****                 } else {
  59:tmk_core/common/action_macro.c ****                     unregister_code(macro);
  60:tmk_core/common/action_macro.c ****                 }
  61:tmk_core/common/action_macro.c ****                 break;
  62:tmk_core/common/action_macro.c ****             case WAIT:
  63:tmk_core/common/action_macro.c ****                 MACRO_READ();
  64:tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
  65:tmk_core/common/action_macro.c ****                 {
  66:tmk_core/common/action_macro.c ****                     uint8_t ms = macro;
  67:tmk_core/common/action_macro.c ****                     while (ms--) wait_ms(1);
  68:tmk_core/common/action_macro.c ****                 }
  69:tmk_core/common/action_macro.c ****                 break;
  70:tmk_core/common/action_macro.c ****             case INTERVAL:
  71:tmk_core/common/action_macro.c ****                 interval = MACRO_READ();
  72:tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
  73:tmk_core/common/action_macro.c ****                 break;
  74:tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
  75:tmk_core/common/action_macro.c ****                 dprintf("DOWN(%02X)\n", macro);
  76:tmk_core/common/action_macro.c ****                 register_code(macro);
  77:tmk_core/common/action_macro.c ****                 break;
  78:tmk_core/common/action_macro.c ****             case 0x84 ... 0xF3:
  79:tmk_core/common/action_macro.c ****                 dprintf("UP(%02X)\n", macro);
  80:tmk_core/common/action_macro.c ****                 unregister_code(macro & 0x7F);
  81:tmk_core/common/action_macro.c ****                 break;
  82:tmk_core/common/action_macro.c ****             case END:
  83:tmk_core/common/action_macro.c ****             default:
  84:tmk_core/common/action_macro.c ****                 return;
  85:tmk_core/common/action_macro.c ****         }
  86:tmk_core/common/action_macro.c ****         // interval
  87:tmk_core/common/action_macro.c ****         {
  88:tmk_core/common/action_macro.c ****             uint8_t ms = interval;
  89:tmk_core/common/action_macro.c ****             while (ms--) wait_ms(1);
  90:tmk_core/common/action_macro.c ****         }
  91:tmk_core/common/action_macro.c ****     }
  92:tmk_core/common/action_macro.c **** }
  62              		.loc 1 92 0
  63 0020 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
  64              	.LVL4:
  65              	.L3:
  41:tmk_core/common/action_macro.c ****             case KEY_DOWN:
  66              		.loc 1 41 0
  67 0022 7528     		cmp	r0, #117
  68 0024 3CD0     		beq	.L7
  69 0026 31D3     		bcc	.L8
  70 0028 A0F18403 		sub	r3, r0, #132
  71 002c 6F2B     		cmp	r3, #111
  72 002e F7D8     		bhi	.L1
  80:tmk_core/common/action_macro.c ****                 break;
  73              		.loc 1 80 0
  74 0030 00F07F00 		and	r0, r0, #127
  75              	.LVL5:
  76              	.L23:
  77 0034 FFF7FEFF 		bl	unregister_code
  78              	.LVL6:
  81:tmk_core/common/action_macro.c ****             case END:
  79              		.loc 1 81 0
  80 0038 0EE0     		b	.L11
  81              	.LVL7:
  82              	.L5:
  43:tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
  83              		.loc 1 43 0
  84 003a 9C1C     		adds	r4, r3, #2
  85              	.LVL8:
  86 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
  87              	.LVL9:
  45:tmk_core/common/action_macro.c ****                     add_macro_mods(MOD_BIT(macro));
  88              		.loc 1 45 0
  89 003e 03F12002 		add	r2, r3, #32
  90 0042 D2B2     		uxtb	r2, r2
  91 0044 072A     		cmp	r2, #7
  92 0046 0ED8     		bhi	.L10
  46:tmk_core/common/action_macro.c ****                     send_keyboard_report();
  93              		.loc 1 46 0
  94 0048 03F00703 		and	r3, r3, #7
  95              	.LVL10:
  96 004c 9840     		lsls	r0, r0, r3
  97 004e C0B2     		uxtb	r0, r0
  98 0050 FFF7FEFF 		bl	add_macro_mods
  99              	.LVL11:
 100              	.L22:
  57:tmk_core/common/action_macro.c ****                 } else {
 101              		.loc 1 57 0
 102 0054 FFF7FEFF 		bl	send_keyboard_report
 103              	.LVL12:
 104              	.L11:
 105              	.LBB2:
  88:tmk_core/common/action_macro.c ****             while (ms--) wait_ms(1);
 106              		.loc 1 88 0
 107 0058 2F46     		mov	r7, r5
 108              	.LVL13:
 109              	.L15:
  89:tmk_core/common/action_macro.c ****         }
 110              		.loc 1 89 0 discriminator 4
 111 005a 013F     		subs	r7, r7, #1
 112              	.LVL14:
 113 005c FFB2     		uxtb	r7, r7
 114              	.LVL15:
 115 005e FF2F     		cmp	r7, #255
 116 0060 21D1     		bne	.L16
 117 0062 2346     		mov	r3, r4
 118 0064 D1E7     		b	.L17
 119              	.LVL16:
 120              	.L10:
 121              	.LBE2:
  49:tmk_core/common/action_macro.c ****                 }
 122              		.loc 1 49 0
 123 0066 1846     		mov	r0, r3
 124              	.LVL17:
 125              	.L4:
  76:tmk_core/common/action_macro.c ****                 break;
 126              		.loc 1 76 0
 127 0068 FFF7FEFF 		bl	register_code
 128              	.LVL18:
  77:tmk_core/common/action_macro.c ****             case 0x84 ... 0xF3:
 129              		.loc 1 77 0
 130 006c F4E7     		b	.L11
 131              	.LVL19:
 132              	.L6:
  53:tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 133              		.loc 1 53 0
 134 006e 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 135              	.LVL20:
 136 0070 9C1C     		adds	r4, r3, #2
 137              	.LVL21:
  55:tmk_core/common/action_macro.c ****                     del_macro_mods(MOD_BIT(macro));
 138              		.loc 1 55 0
 139 0072 00F12003 		add	r3, r0, #32
 140 0076 DBB2     		uxtb	r3, r3
 141 0078 072B     		cmp	r3, #7
 142 007a DBD8     		bhi	.L23
  56:tmk_core/common/action_macro.c ****                     send_keyboard_report();
 143              		.loc 1 56 0
 144 007c 00F00700 		and	r0, r0, #7
 145              	.LVL22:
 146 0080 06FA00F0 		lsl	r0, r6, r0
 147 0084 C0B2     		uxtb	r0, r0
 148 0086 FFF7FEFF 		bl	del_macro_mods
 149              	.LVL23:
 150 008a E3E7     		b	.L22
 151              	.LVL24:
 152              	.L8:
  63:tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 153              		.loc 1 63 0
 154 008c 5F78     		ldrb	r7, [r3, #1]	@ zero_extendqisi2
 155 008e 9C1C     		adds	r4, r3, #2
 156              	.LVL25:
 157              	.L13:
 158              	.LBB3:
  67:tmk_core/common/action_macro.c ****                 }
 159              		.loc 1 67 0 discriminator 4
 160 0090 013F     		subs	r7, r7, #1
 161              	.LVL26:
 162 0092 FFB2     		uxtb	r7, r7
 163              	.LVL27:
 164 0094 FF2F     		cmp	r7, #255
 165 0096 DFD0     		beq	.L11
  67:tmk_core/common/action_macro.c ****                 }
 166              		.loc 1 67 0 is_stmt 0 discriminator 1
 167 0098 6420     		movs	r0, #100
 168 009a FFF7FEFF 		bl	chThdSleep
 169              	.LVL28:
 170 009e F7E7     		b	.L13
 171              	.LVL29:
 172              	.L7:
 173              	.LBE3:
  71:tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 174              		.loc 1 71 0 is_stmt 1
 175 00a0 9C1C     		adds	r4, r3, #2
 176              	.LVL30:
 177 00a2 5D78     		ldrb	r5, [r3, #1]	@ zero_extendqisi2
 178              	.LVL31:
  73:tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
 179              		.loc 1 73 0
 180 00a4 D8E7     		b	.L11
 181              	.LVL32:
 182              	.L16:
 183              	.LBB4:
  89:tmk_core/common/action_macro.c ****         }
 184              		.loc 1 89 0 discriminator 1
 185 00a6 6420     		movs	r0, #100
 186 00a8 FFF7FEFF 		bl	chThdSleep
 187              	.LVL33:
 188 00ac D5E7     		b	.L15
 189              	.LBE4:
 190              		.cfi_endproc
 191              	.LFE285:
 193              		.text
 194              	.Letext0:
 195              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 196              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 197              		.file 4 "tmk_core/common/action_macro.h"
 198              		.file 5 "tmk_core/common/keycode.h"
 199              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 200              		.file 7 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 201              		.file 8 "./lib/chibios/os/rt/include/chsystypes.h"
 202              		.file 9 "./lib/chibios/os/rt/include/chschd.h"
 203              		.file 10 "tmk_core/common/action.h"
 204              		.file 11 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 205              		.file 12 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 206              		.file 13 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/stm32f303xc.h"
 207              		.file 14 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 208              		.file 15 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 209              		.file 16 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 210              		.file 17 "./lib/chibios/os/rt/include/chtm.h"
 211              		.file 18 "./lib/chibios/os/rt/include/chsem.h"
 212              		.file 19 "./lib/chibios/os/rt/include/chmtx.h"
 213              		.file 20 "./lib/chibios/os/rt/include/chsys.h"
 214              		.file 21 "./lib/chibios/os/rt/include/chregistry.h"
 215              		.file 22 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 216              		.file 23 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 217              		.file 24 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 218              		.file 25 "./lib/chibios/os/hal/include/hal_dac.h"
 219              		.file 26 "./lib/chibios/os/hal/ports/STM32/LLD/DACv1/hal_dac_lld.h"
 220              		.file 27 "./lib/chibios/os/hal/include/hal_gpt.h"
 221              		.file 28 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_gpt_lld.h"
 222              		.file 29 "./lib/chibios/os/hal/include/hal_i2c.h"
 223              		.file 30 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 224              		.file 31 "./lib/chibios/os/hal/include/hal_pwm.h"
 225              		.file 32 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 226              		.file 33 "./lib/chibios/os/hal/include/hal_usb.h"
 227              		.file 34 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 228              		.file 35 "tmk_core/common/report.h"
 229              		.file 36 "tmk_core/common/action_util.h"
 230              		.file 37 "tmk_core/common/debug.h"
 231              		.file 38 "./lib/chibios/os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_macro.c
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccJ82PM4.s:16     .text.action_macro_play:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccJ82PM4.s:23     .text.action_macro_play:0000000000000000 action_macro_play

UNDEFINED SYMBOLS
unregister_code
add_macro_mods
send_keyboard_report
register_code
del_macro_mods
chThdSleep
