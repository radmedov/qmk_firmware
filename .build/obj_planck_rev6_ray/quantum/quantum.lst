   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"quantum.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.qk_register_weak_mods,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	qk_register_weak_mods:
  23              	.LFB299:
  24              		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** /* Copyright 2016-2017 Jack Humbert
   2:quantum/quantum.c ****  *
   3:quantum/quantum.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/quantum.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/quantum.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/quantum.c ****  * (at your option) any later version.
   7:quantum/quantum.c ****  *
   8:quantum/quantum.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/quantum.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/quantum.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/quantum.c ****  * GNU General Public License for more details.
  12:quantum/quantum.c ****  *
  13:quantum/quantum.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/quantum.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/quantum.c ****  */
  16:quantum/quantum.c **** 
  17:quantum/quantum.c **** #include "quantum.h"
  18:quantum/quantum.c **** 
  19:quantum/quantum.c **** #if !defined(RGBLIGHT_ENABLE) && !defined(RGB_MATRIX_ENABLE)
  20:quantum/quantum.c **** #    include "rgb.h"
  21:quantum/quantum.c **** #endif
  22:quantum/quantum.c **** 
  23:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
  24:quantum/quantum.c **** #    include "outputselect.h"
  25:quantum/quantum.c **** #endif
  26:quantum/quantum.c **** 
  27:quantum/quantum.c **** #ifndef BREATHING_PERIOD
  28:quantum/quantum.c **** #    define BREATHING_PERIOD 6
  29:quantum/quantum.c **** #endif
  30:quantum/quantum.c **** 
  31:quantum/quantum.c **** #include "backlight.h"
  32:quantum/quantum.c **** extern backlight_config_t backlight_config;
  33:quantum/quantum.c **** 
  34:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
  35:quantum/quantum.c **** #    include "fauxclicky.h"
  36:quantum/quantum.c **** #endif
  37:quantum/quantum.c **** 
  38:quantum/quantum.c **** #ifdef API_ENABLE
  39:quantum/quantum.c **** #    include "api.h"
  40:quantum/quantum.c **** #endif
  41:quantum/quantum.c **** 
  42:quantum/quantum.c **** #ifdef MIDI_ENABLE
  43:quantum/quantum.c **** #    include "process_midi.h"
  44:quantum/quantum.c **** #endif
  45:quantum/quantum.c **** 
  46:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
  47:quantum/quantum.c **** #    include "velocikey.h"
  48:quantum/quantum.c **** #endif
  49:quantum/quantum.c **** 
  50:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
  51:quantum/quantum.c **** #    include "haptic.h"
  52:quantum/quantum.c **** #endif
  53:quantum/quantum.c **** 
  54:quantum/quantum.c **** #ifdef ENCODER_ENABLE
  55:quantum/quantum.c **** #    include "encoder.h"
  56:quantum/quantum.c **** #endif
  57:quantum/quantum.c **** 
  58:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  59:quantum/quantum.c **** #    ifndef GOODBYE_SONG
  60:quantum/quantum.c **** #        define GOODBYE_SONG SONG(GOODBYE_SOUND)
  61:quantum/quantum.c **** #    endif
  62:quantum/quantum.c **** #    ifndef AG_NORM_SONG
  63:quantum/quantum.c **** #        define AG_NORM_SONG SONG(AG_NORM_SOUND)
  64:quantum/quantum.c **** #    endif
  65:quantum/quantum.c **** #    ifndef AG_SWAP_SONG
  66:quantum/quantum.c **** #        define AG_SWAP_SONG SONG(AG_SWAP_SOUND)
  67:quantum/quantum.c **** #    endif
  68:quantum/quantum.c **** #    ifndef CG_NORM_SONG
  69:quantum/quantum.c **** #        define CG_NORM_SONG SONG(AG_NORM_SOUND)
  70:quantum/quantum.c **** #    endif
  71:quantum/quantum.c **** #    ifndef CG_SWAP_SONG
  72:quantum/quantum.c **** #        define CG_SWAP_SONG SONG(AG_SWAP_SOUND)
  73:quantum/quantum.c **** #    endif
  74:quantum/quantum.c **** float goodbye_song[][2] = GOODBYE_SONG;
  75:quantum/quantum.c **** float ag_norm_song[][2] = AG_NORM_SONG;
  76:quantum/quantum.c **** float ag_swap_song[][2] = AG_SWAP_SONG;
  77:quantum/quantum.c **** float cg_norm_song[][2] = CG_NORM_SONG;
  78:quantum/quantum.c **** float cg_swap_song[][2] = CG_SWAP_SONG;
  79:quantum/quantum.c **** #    ifdef DEFAULT_LAYER_SONGS
  80:quantum/quantum.c **** float default_layer_songs[][16][2] = DEFAULT_LAYER_SONGS;
  81:quantum/quantum.c **** #    endif
  82:quantum/quantum.c **** #endif
  83:quantum/quantum.c **** 
  84:quantum/quantum.c **** static void do_code16(uint16_t code, void (*f)(uint8_t)) {
  85:quantum/quantum.c ****     switch (code) {
  86:quantum/quantum.c ****         case QK_MODS ... QK_MODS_MAX:
  87:quantum/quantum.c ****             break;
  88:quantum/quantum.c ****         default:
  89:quantum/quantum.c ****             return;
  90:quantum/quantum.c ****     }
  91:quantum/quantum.c **** 
  92:quantum/quantum.c ****     if (code & QK_LCTL) f(KC_LCTL);
  93:quantum/quantum.c ****     if (code & QK_LSFT) f(KC_LSFT);
  94:quantum/quantum.c ****     if (code & QK_LALT) f(KC_LALT);
  95:quantum/quantum.c ****     if (code & QK_LGUI) f(KC_LGUI);
  96:quantum/quantum.c **** 
  97:quantum/quantum.c ****     if (code < QK_RMODS_MIN) return;
  98:quantum/quantum.c **** 
  99:quantum/quantum.c ****     if (code & QK_RCTL) f(KC_RCTL);
 100:quantum/quantum.c ****     if (code & QK_RSFT) f(KC_RSFT);
 101:quantum/quantum.c ****     if (code & QK_RALT) f(KC_RALT);
 102:quantum/quantum.c ****     if (code & QK_RGUI) f(KC_RGUI);
 103:quantum/quantum.c **** }
 104:quantum/quantum.c **** 
 105:quantum/quantum.c **** static inline void qk_register_weak_mods(uint8_t kc) {
  25              		.loc 1 105 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
  30 0000 08B5     		push	{r3, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 3, -8
  33              		.cfi_offset 14, -4
 106:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
  34              		.loc 1 106 0
  35 0002 00F00703 		and	r3, r0, #7
  36 0006 0120     		movs	r0, #1
  37              	.LVL1:
  38 0008 9840     		lsls	r0, r0, r3
  39 000a C0B2     		uxtb	r0, r0
  40 000c FFF7FEFF 		bl	add_weak_mods
  41              	.LVL2:
 107:quantum/quantum.c ****     send_keyboard_report();
 108:quantum/quantum.c **** }
  42              		.loc 1 108 0
  43 0010 BDE80840 		pop	{r3, lr}
  44              		.cfi_restore 14
  45              		.cfi_restore 3
  46              		.cfi_def_cfa_offset 0
 107:quantum/quantum.c ****     send_keyboard_report();
  47              		.loc 1 107 0
  48 0014 FFF7FEBF 		b	send_keyboard_report
  49              	.LVL3:
  50              		.cfi_endproc
  51              	.LFE299:
  53              		.section	.text.qk_register_mods,"ax",%progbits
  54              		.align	1
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  58              		.fpu softvfp
  60              	qk_register_mods:
  61              	.LFB376:
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66 0000 FFF7FEBF 		b	qk_register_weak_mods
  67              		.cfi_endproc
  68              	.LFE376:
  70              		.section	.text.qk_unregister_weak_mods,"ax",%progbits
  71              		.align	1
  72              		.syntax unified
  73              		.thumb
  74              		.thumb_func
  75              		.fpu softvfp
  77              	qk_unregister_weak_mods:
  78              	.LFB300:
 109:quantum/quantum.c **** 
 110:quantum/quantum.c **** static inline void qk_unregister_weak_mods(uint8_t kc) {
  79              		.loc 1 110 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              	.LVL4:
  84              		.loc 1 110 0
  85 0000 08B5     		push	{r3, lr}
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 3, -8
  88              		.cfi_offset 14, -4
 111:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
  89              		.loc 1 111 0
  90 0002 00F00703 		and	r3, r0, #7
  91 0006 0120     		movs	r0, #1
  92              	.LVL5:
  93 0008 9840     		lsls	r0, r0, r3
  94 000a C0B2     		uxtb	r0, r0
  95 000c FFF7FEFF 		bl	del_weak_mods
  96              	.LVL6:
 112:quantum/quantum.c ****     send_keyboard_report();
 113:quantum/quantum.c **** }
  97              		.loc 1 113 0
  98 0010 BDE80840 		pop	{r3, lr}
  99              		.cfi_restore 14
 100              		.cfi_restore 3
 101              		.cfi_def_cfa_offset 0
 112:quantum/quantum.c ****     send_keyboard_report();
 102              		.loc 1 112 0
 103 0014 FFF7FEBF 		b	send_keyboard_report
 104              	.LVL7:
 105              		.cfi_endproc
 106              	.LFE300:
 108              		.section	.text.qk_unregister_mods,"ax",%progbits
 109              		.align	1
 110              		.syntax unified
 111              		.thumb
 112              		.thumb_func
 113              		.fpu softvfp
 115              	qk_unregister_mods:
 116              	.LFB378:
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121 0000 FFF7FEBF 		b	qk_unregister_weak_mods
 122              		.cfi_endproc
 123              	.LFE378:
 125              		.section	.text.do_code16,"ax",%progbits
 126              		.align	1
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 130              		.fpu softvfp
 132              	do_code16:
 133              	.LFB298:
  84:quantum/quantum.c ****     switch (code) {
 134              		.loc 1 84 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              	.LVL8:
  85:quantum/quantum.c ****         case QK_MODS ... QK_MODS_MAX:
 139              		.loc 1 85 0
 140 0000 A0F58073 		sub	r3, r0, #256
 141 0004 B3F5F85F 		cmp	r3, #7936
  84:quantum/quantum.c ****     switch (code) {
 142              		.loc 1 84 0
 143 0008 70B5     		push	{r4, r5, r6, lr}
 144              		.cfi_def_cfa_offset 16
 145              		.cfi_offset 4, -16
 146              		.cfi_offset 5, -12
 147              		.cfi_offset 6, -8
 148              		.cfi_offset 14, -4
  84:quantum/quantum.c ****     switch (code) {
 149              		.loc 1 84 0
 150 000a 0546     		mov	r5, r0
 151 000c 0C46     		mov	r4, r1
  85:quantum/quantum.c ****         case QK_MODS ... QK_MODS_MAX:
 152              		.loc 1 85 0
 153 000e 12D2     		bcs	.L5
  92:quantum/quantum.c ****     if (code & QK_LSFT) f(KC_LSFT);
 154              		.loc 1 92 0
 155 0010 E805     		lsls	r0, r5, #23
 156              	.LVL9:
 157 0012 01D5     		bpl	.L8
  92:quantum/quantum.c ****     if (code & QK_LSFT) f(KC_LSFT);
 158              		.loc 1 92 0 is_stmt 0 discriminator 1
 159 0014 E020     		movs	r0, #224
 160 0016 8847     		blx	r1
 161              	.LVL10:
 162              	.L8:
  93:quantum/quantum.c ****     if (code & QK_LALT) f(KC_LALT);
 163              		.loc 1 93 0 is_stmt 1
 164 0018 A905     		lsls	r1, r5, #22
 165 001a 01D5     		bpl	.L9
  93:quantum/quantum.c ****     if (code & QK_LALT) f(KC_LALT);
 166              		.loc 1 93 0 is_stmt 0 discriminator 1
 167 001c E120     		movs	r0, #225
 168 001e A047     		blx	r4
 169              	.LVL11:
 170              	.L9:
  94:quantum/quantum.c ****     if (code & QK_LGUI) f(KC_LGUI);
 171              		.loc 1 94 0 is_stmt 1
 172 0020 6A05     		lsls	r2, r5, #21
 173 0022 01D5     		bpl	.L10
  94:quantum/quantum.c ****     if (code & QK_LGUI) f(KC_LGUI);
 174              		.loc 1 94 0 is_stmt 0 discriminator 1
 175 0024 E220     		movs	r0, #226
 176 0026 A047     		blx	r4
 177              	.LVL12:
 178              	.L10:
  95:quantum/quantum.c **** 
 179              		.loc 1 95 0 is_stmt 1
 180 0028 2B05     		lsls	r3, r5, #20
 181 002a 01D5     		bpl	.L11
  95:quantum/quantum.c **** 
 182              		.loc 1 95 0 is_stmt 0 discriminator 1
 183 002c E320     		movs	r0, #227
 184 002e A047     		blx	r4
 185              	.LVL13:
 186              	.L11:
  97:quantum/quantum.c **** 
 187              		.loc 1 97 0 is_stmt 1
 188 0030 B5F5805F 		cmp	r5, #4096
 189 0034 00D2     		bcs	.L25
 190              	.L5:
 103:quantum/quantum.c **** 
 191              		.loc 1 103 0
 192 0036 70BD     		pop	{r4, r5, r6, pc}
 193              	.LVL14:
 194              	.L25:
 195              	.LBB4:
 196              	.LBB5:
  99:quantum/quantum.c ****     if (code & QK_RSFT) f(KC_RSFT);
 197              		.loc 1 99 0
 198 0038 E420     		movs	r0, #228
 199 003a A047     		blx	r4
 200              	.LVL15:
 100:quantum/quantum.c ****     if (code & QK_RALT) f(KC_RALT);
 201              		.loc 1 100 0
 202 003c E520     		movs	r0, #229
 203 003e A047     		blx	r4
 204              	.LVL16:
 101:quantum/quantum.c ****     if (code & QK_RGUI) f(KC_RGUI);
 205              		.loc 1 101 0
 206 0040 E620     		movs	r0, #230
 207 0042 A047     		blx	r4
 208              	.LVL17:
 102:quantum/quantum.c **** }
 209              		.loc 1 102 0
 210 0044 2346     		mov	r3, r4
 211 0046 E720     		movs	r0, #231
 212              	.LBE5:
 213              	.LBE4:
 103:quantum/quantum.c **** 
 214              		.loc 1 103 0
 215 0048 BDE87040 		pop	{r4, r5, r6, lr}
 216              		.cfi_restore 14
 217              		.cfi_restore 6
 218              		.cfi_restore 5
 219              		.cfi_restore 4
 220              		.cfi_def_cfa_offset 0
 221              	.LVL18:
 222              	.LBB7:
 223              	.LBB6:
 102:quantum/quantum.c **** }
 224              		.loc 1 102 0
 225 004c 1847     		bx	r3	@ indirect register sibling call
 226              	.LVL19:
 227              	.LBE6:
 228              	.LBE7:
 229              		.cfi_endproc
 230              	.LFE298:
 232              		.section	.text.rgblight_toggle,"ax",%progbits
 233              		.align	1
 234              		.weak	rgblight_toggle
 235              		.syntax unified
 236              		.thumb
 237              		.thumb_func
 238              		.fpu softvfp
 240              	rgblight_toggle:
 241              	.LFB346:
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 0
 244              		@ frame_needed = 0, uses_anonymous_args = 0
 245              		@ link register save eliminated.
 246 0000 7047     		bx	lr
 247              		.cfi_endproc
 248              	.LFE346:
 250              		.section	.text.rgblight_step,"ax",%progbits
 251              		.align	1
 252              		.weak	rgblight_step
 253              		.syntax unified
 254              		.thumb
 255              		.thumb_func
 256              		.fpu softvfp
 258              	rgblight_step:
 259              	.LFB348:
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              		@ link register save eliminated.
 264 0000 7047     		bx	lr
 265              		.cfi_endproc
 266              	.LFE348:
 268              		.section	.text.rgblight_step_reverse,"ax",%progbits
 269              		.align	1
 270              		.weak	rgblight_step_reverse
 271              		.syntax unified
 272              		.thumb
 273              		.thumb_func
 274              		.fpu softvfp
 276              	rgblight_step_reverse:
 277              	.LFB350:
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 282 0000 7047     		bx	lr
 283              		.cfi_endproc
 284              	.LFE350:
 286              		.section	.text.rgblight_increase_hue,"ax",%progbits
 287              		.align	1
 288              		.weak	rgblight_increase_hue
 289              		.syntax unified
 290              		.thumb
 291              		.thumb_func
 292              		.fpu softvfp
 294              	rgblight_increase_hue:
 295              	.LFB352:
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 0
 298              		@ frame_needed = 0, uses_anonymous_args = 0
 299              		@ link register save eliminated.
 300 0000 7047     		bx	lr
 301              		.cfi_endproc
 302              	.LFE352:
 304              		.section	.text.rgblight_decrease_hue,"ax",%progbits
 305              		.align	1
 306              		.weak	rgblight_decrease_hue
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 310              		.fpu softvfp
 312              	rgblight_decrease_hue:
 313              	.LFB354:
 314              		.cfi_startproc
 315              		@ args = 0, pretend = 0, frame = 0
 316              		@ frame_needed = 0, uses_anonymous_args = 0
 317              		@ link register save eliminated.
 318 0000 7047     		bx	lr
 319              		.cfi_endproc
 320              	.LFE354:
 322              		.section	.text.rgblight_increase_sat,"ax",%progbits
 323              		.align	1
 324              		.weak	rgblight_increase_sat
 325              		.syntax unified
 326              		.thumb
 327              		.thumb_func
 328              		.fpu softvfp
 330              	rgblight_increase_sat:
 331              	.LFB356:
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              		@ link register save eliminated.
 336 0000 7047     		bx	lr
 337              		.cfi_endproc
 338              	.LFE356:
 340              		.section	.text.rgblight_decrease_sat,"ax",%progbits
 341              		.align	1
 342              		.weak	rgblight_decrease_sat
 343              		.syntax unified
 344              		.thumb
 345              		.thumb_func
 346              		.fpu softvfp
 348              	rgblight_decrease_sat:
 349              	.LFB358:
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 0
 352              		@ frame_needed = 0, uses_anonymous_args = 0
 353              		@ link register save eliminated.
 354 0000 7047     		bx	lr
 355              		.cfi_endproc
 356              	.LFE358:
 358              		.section	.text.rgblight_increase_val,"ax",%progbits
 359              		.align	1
 360              		.weak	rgblight_increase_val
 361              		.syntax unified
 362              		.thumb
 363              		.thumb_func
 364              		.fpu softvfp
 366              	rgblight_increase_val:
 367              	.LFB360:
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371              		@ link register save eliminated.
 372 0000 7047     		bx	lr
 373              		.cfi_endproc
 374              	.LFE360:
 376              		.section	.text.rgblight_decrease_val,"ax",%progbits
 377              		.align	1
 378              		.weak	rgblight_decrease_val
 379              		.syntax unified
 380              		.thumb
 381              		.thumb_func
 382              		.fpu softvfp
 384              	rgblight_decrease_val:
 385              	.LFB362:
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 0
 388              		@ frame_needed = 0, uses_anonymous_args = 0
 389              		@ link register save eliminated.
 390 0000 7047     		bx	lr
 391              		.cfi_endproc
 392              	.LFE362:
 394              		.section	.text.rgblight_increase_speed,"ax",%progbits
 395              		.align	1
 396              		.weak	rgblight_increase_speed
 397              		.syntax unified
 398              		.thumb
 399              		.thumb_func
 400              		.fpu softvfp
 402              	rgblight_increase_speed:
 403              	.LFB364:
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 408 0000 7047     		bx	lr
 409              		.cfi_endproc
 410              	.LFE364:
 412              		.section	.text.rgblight_decrease_speed,"ax",%progbits
 413              		.align	1
 414              		.weak	rgblight_decrease_speed
 415              		.syntax unified
 416              		.thumb
 417              		.thumb_func
 418              		.fpu softvfp
 420              	rgblight_decrease_speed:
 421              	.LFB366:
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 0
 424              		@ frame_needed = 0, uses_anonymous_args = 0
 425              		@ link register save eliminated.
 426 0000 7047     		bx	lr
 427              		.cfi_endproc
 428              	.LFE366:
 430              		.section	.text.register_code16,"ax",%progbits
 431              		.align	1
 432              		.global	register_code16
 433              		.syntax unified
 434              		.thumb
 435              		.thumb_func
 436              		.fpu softvfp
 438              	register_code16:
 439              	.LFB303:
 114:quantum/quantum.c **** 
 115:quantum/quantum.c **** static inline void qk_register_mods(uint8_t kc) {
 116:quantum/quantum.c ****     add_weak_mods(MOD_BIT(kc));
 117:quantum/quantum.c ****     send_keyboard_report();
 118:quantum/quantum.c **** }
 119:quantum/quantum.c **** 
 120:quantum/quantum.c **** static inline void qk_unregister_mods(uint8_t kc) {
 121:quantum/quantum.c ****     del_weak_mods(MOD_BIT(kc));
 122:quantum/quantum.c ****     send_keyboard_report();
 123:quantum/quantum.c **** }
 124:quantum/quantum.c **** 
 125:quantum/quantum.c **** void register_code16(uint16_t code) {
 440              		.loc 1 125 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 0
 443              		@ frame_needed = 0, uses_anonymous_args = 0
 444              	.LVL20:
 126:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 445              		.loc 1 126 0
 446 0000 A0F1E003 		sub	r3, r0, #224
 447 0004 072B     		cmp	r3, #7
 125:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 448              		.loc 1 125 0
 449 0006 10B5     		push	{r4, lr}
 450              		.cfi_def_cfa_offset 8
 451              		.cfi_offset 4, -8
 452              		.cfi_offset 14, -4
 125:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 453              		.loc 1 125 0
 454 0008 0446     		mov	r4, r0
 455              		.loc 1 126 0
 456 000a 00D9     		bls	.L38
 457              		.loc 1 126 0 is_stmt 0 discriminator 1
 458 000c 40B9     		cbnz	r0, .L39
 459              	.L38:
 127:quantum/quantum.c ****         do_code16(code, qk_register_mods);
 460              		.loc 1 127 0 is_stmt 1
 461 000e 0549     		ldr	r1, .L42
 462 0010 2046     		mov	r0, r4
 463              	.LVL21:
 464              	.L41:
 128:quantum/quantum.c ****     } else {
 129:quantum/quantum.c ****         do_code16(code, qk_register_weak_mods);
 465              		.loc 1 129 0
 466 0012 FFF7FEFF 		bl	do_code16
 467              	.LVL22:
 130:quantum/quantum.c ****     }
 131:quantum/quantum.c ****     register_code(code);
 468              		.loc 1 131 0
 469 0016 E0B2     		uxtb	r0, r4
 132:quantum/quantum.c **** }
 470              		.loc 1 132 0
 471 0018 BDE81040 		pop	{r4, lr}
 472              		.cfi_remember_state
 473              		.cfi_restore 14
 474              		.cfi_restore 4
 475              		.cfi_def_cfa_offset 0
 131:quantum/quantum.c **** }
 476              		.loc 1 131 0
 477 001c FFF7FEBF 		b	register_code
 478              	.LVL23:
 479              	.L39:
 480              		.cfi_restore_state
 129:quantum/quantum.c ****     }
 481              		.loc 1 129 0
 482 0020 0149     		ldr	r1, .L42+4
 483 0022 F6E7     		b	.L41
 484              	.L43:
 485              		.align	2
 486              	.L42:
 487 0024 00000000 		.word	qk_register_mods
 488 0028 00000000 		.word	qk_register_weak_mods
 489              		.cfi_endproc
 490              	.LFE303:
 492              		.section	.text.unregister_code16,"ax",%progbits
 493              		.align	1
 494              		.global	unregister_code16
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
 498              		.fpu softvfp
 500              	unregister_code16:
 501              	.LFB304:
 133:quantum/quantum.c **** 
 134:quantum/quantum.c **** void unregister_code16(uint16_t code) {
 502              		.loc 1 134 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 0
 505              		@ frame_needed = 0, uses_anonymous_args = 0
 506              	.LVL24:
 507 0000 10B5     		push	{r4, lr}
 508              		.cfi_def_cfa_offset 8
 509              		.cfi_offset 4, -8
 510              		.cfi_offset 14, -4
 511              		.loc 1 134 0
 512 0002 0446     		mov	r4, r0
 135:quantum/quantum.c ****     unregister_code(code);
 513              		.loc 1 135 0
 514 0004 C0B2     		uxtb	r0, r0
 515              	.LVL25:
 516 0006 FFF7FEFF 		bl	unregister_code
 517              	.LVL26:
 136:quantum/quantum.c ****     if (IS_MOD(code) || code == KC_NO) {
 518              		.loc 1 136 0
 519 000a A4F1E003 		sub	r3, r4, #224
 520 000e 072B     		cmp	r3, #7
 521 0010 00D9     		bls	.L45
 522              		.loc 1 136 0 is_stmt 0 discriminator 1
 523 0012 2CB9     		cbnz	r4, .L46
 524              	.L45:
 137:quantum/quantum.c ****         do_code16(code, qk_unregister_mods);
 525              		.loc 1 137 0 is_stmt 1
 526 0014 0349     		ldr	r1, .L48
 527              	.L47:
 138:quantum/quantum.c ****     } else {
 139:quantum/quantum.c ****         do_code16(code, qk_unregister_weak_mods);
 528              		.loc 1 139 0
 529 0016 2046     		mov	r0, r4
 140:quantum/quantum.c ****     }
 141:quantum/quantum.c **** }
 530              		.loc 1 141 0
 531 0018 BDE81040 		pop	{r4, lr}
 532              		.cfi_remember_state
 533              		.cfi_restore 14
 534              		.cfi_restore 4
 535              		.cfi_def_cfa_offset 0
 139:quantum/quantum.c ****     }
 536              		.loc 1 139 0
 537 001c FFF7FEBF 		b	do_code16
 538              	.LVL27:
 539              	.L46:
 540              		.cfi_restore_state
 541 0020 0149     		ldr	r1, .L48+4
 542 0022 F8E7     		b	.L47
 543              	.L49:
 544              		.align	2
 545              	.L48:
 546 0024 00000000 		.word	qk_unregister_mods
 547 0028 00000000 		.word	qk_unregister_weak_mods
 548              		.cfi_endproc
 549              	.LFE304:
 551              		.section	.text.tap_code16,"ax",%progbits
 552              		.align	1
 553              		.global	tap_code16
 554              		.syntax unified
 555              		.thumb
 556              		.thumb_func
 557              		.fpu softvfp
 559              	tap_code16:
 560              	.LFB305:
 142:quantum/quantum.c **** 
 143:quantum/quantum.c **** void tap_code16(uint16_t code) {
 561              		.loc 1 143 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 0
 564              		@ frame_needed = 0, uses_anonymous_args = 0
 565              	.LVL28:
 566 0000 10B5     		push	{r4, lr}
 567              		.cfi_def_cfa_offset 8
 568              		.cfi_offset 4, -8
 569              		.cfi_offset 14, -4
 570              		.loc 1 143 0
 571 0002 0446     		mov	r4, r0
 144:quantum/quantum.c ****     register_code16(code);
 572              		.loc 1 144 0
 573 0004 FFF7FEFF 		bl	register_code16
 574              	.LVL29:
 145:quantum/quantum.c **** #if TAP_CODE_DELAY > 0
 146:quantum/quantum.c ****     wait_ms(TAP_CODE_DELAY);
 147:quantum/quantum.c **** #endif
 148:quantum/quantum.c ****     unregister_code16(code);
 575              		.loc 1 148 0
 576 0008 2046     		mov	r0, r4
 149:quantum/quantum.c **** }
 577              		.loc 1 149 0
 578 000a BDE81040 		pop	{r4, lr}
 579              		.cfi_restore 14
 580              		.cfi_restore 4
 581              		.cfi_def_cfa_offset 0
 148:quantum/quantum.c **** }
 582              		.loc 1 148 0
 583 000e FFF7FEBF 		b	unregister_code16
 584              	.LVL30:
 585              		.cfi_endproc
 586              	.LFE305:
 588              		.section	.text.process_action_kb,"ax",%progbits
 589              		.align	1
 590              		.weak	process_action_kb
 591              		.syntax unified
 592              		.thumb
 593              		.thumb_func
 594              		.fpu softvfp
 596              	process_action_kb:
 597              	.LFB306:
 150:quantum/quantum.c **** 
 151:quantum/quantum.c **** __attribute__((weak)) bool process_action_kb(keyrecord_t *record) { return true; }
 598              		.loc 1 151 0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 0
 601              		@ frame_needed = 0, uses_anonymous_args = 0
 602              		@ link register save eliminated.
 603              	.LVL31:
 604              		.loc 1 151 0
 605 0000 0120     		movs	r0, #1
 606              	.LVL32:
 607 0002 7047     		bx	lr
 608              		.cfi_endproc
 609              	.LFE306:
 611              		.section	.text.process_record_user,"ax",%progbits
 612              		.align	1
 613              		.weak	process_record_user
 614              		.syntax unified
 615              		.thumb
 616              		.thumb_func
 617              		.fpu softvfp
 619              	process_record_user:
 620              	.LFB308:
 152:quantum/quantum.c **** 
 153:quantum/quantum.c **** __attribute__((weak)) bool process_record_kb(uint16_t keycode, keyrecord_t *record) { return proces
 154:quantum/quantum.c **** 
 155:quantum/quantum.c **** __attribute__((weak)) bool process_record_user(uint16_t keycode, keyrecord_t *record) { return true
 621              		.loc 1 155 0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 0
 624              		@ frame_needed = 0, uses_anonymous_args = 0
 625              		@ link register save eliminated.
 626              	.LVL33:
 627              		.loc 1 155 0
 628 0000 0120     		movs	r0, #1
 629              	.LVL34:
 630 0002 7047     		bx	lr
 631              		.cfi_endproc
 632              	.LFE308:
 634              		.section	.text.process_record_kb,"ax",%progbits
 635              		.align	1
 636              		.weak	process_record_kb
 637              		.syntax unified
 638              		.thumb
 639              		.thumb_func
 640              		.fpu softvfp
 642              	process_record_kb:
 643              	.LFB307:
 153:quantum/quantum.c **** 
 644              		.loc 1 153 0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 0
 647              		@ frame_needed = 0, uses_anonymous_args = 0
 648              	.LVL35:
 649 0000 08B5     		push	{r3, lr}
 650              		.cfi_def_cfa_offset 8
 651              		.cfi_offset 3, -8
 652              		.cfi_offset 14, -4
 153:quantum/quantum.c **** 
 653              		.loc 1 153 0
 654 0002 FFF7FEFF 		bl	process_record_user
 655              	.LVL36:
 656 0006 08BD     		pop	{r3, pc}
 657              		.cfi_endproc
 658              	.LFE307:
 660              		.section	.text.get_event_keycode,"ax",%progbits
 661              		.align	1
 662              		.global	get_event_keycode
 663              		.syntax unified
 664              		.thumb
 665              		.thumb_func
 666              		.fpu softvfp
 668              	get_event_keycode:
 669              	.LFB311:
 156:quantum/quantum.c **** 
 157:quantum/quantum.c **** void reset_keyboard(void) {
 158:quantum/quantum.c ****     clear_keyboard();
 159:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 160:quantum/quantum.c ****     process_midi_all_notes_off();
 161:quantum/quantum.c **** #endif
 162:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 163:quantum/quantum.c **** #    ifndef NO_MUSIC_MODE
 164:quantum/quantum.c ****     music_all_notes_off();
 165:quantum/quantum.c **** #    endif
 166:quantum/quantum.c ****     uint16_t timer_start = timer_read();
 167:quantum/quantum.c ****     PLAY_SONG(goodbye_song);
 168:quantum/quantum.c ****     shutdown_user();
 169:quantum/quantum.c ****     while (timer_elapsed(timer_start) < 250) wait_ms(1);
 170:quantum/quantum.c ****     stop_all_notes();
 171:quantum/quantum.c **** #else
 172:quantum/quantum.c ****     shutdown_user();
 173:quantum/quantum.c ****     wait_ms(250);
 174:quantum/quantum.c **** #endif
 175:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 176:quantum/quantum.c ****     haptic_shutdown();
 177:quantum/quantum.c **** #endif
 178:quantum/quantum.c **** // this is also done later in bootloader.c - not sure if it's neccesary here
 179:quantum/quantum.c **** #ifdef BOOTLOADER_CATERINA
 180:quantum/quantum.c ****     *(uint16_t *)0x0800 = 0x7777;  // these two are a-star-specific
 181:quantum/quantum.c **** #endif
 182:quantum/quantum.c ****     bootloader_jump();
 183:quantum/quantum.c **** }
 184:quantum/quantum.c **** 
 185:quantum/quantum.c **** /* true if the last press of GRAVE_ESC was shifted (i.e. GUI or SHIFT were pressed), false otherwis
 186:quantum/quantum.c ****  * Used to ensure that the correct keycode is released if the key is released.
 187:quantum/quantum.c ****  */
 188:quantum/quantum.c **** static bool grave_esc_was_shifted = false;
 189:quantum/quantum.c **** 
 190:quantum/quantum.c **** /* Convert record into usable keycode via the contained event. */
 191:quantum/quantum.c **** uint16_t get_record_keycode(keyrecord_t *record) { return get_event_keycode(record->event); }
 192:quantum/quantum.c **** 
 193:quantum/quantum.c **** /* Convert event into usable keycode. Checks the layer cache to ensure that it
 194:quantum/quantum.c ****  * retains the correct keycode after a layer change, if the key is still pressed.
 195:quantum/quantum.c ****  */
 196:quantum/quantum.c **** uint16_t get_event_keycode(keyevent_t event) {
 670              		.loc 1 196 0
 671              		.cfi_startproc
 672              		@ args = 0, pretend = 0, frame = 8
 673              		@ frame_needed = 0, uses_anonymous_args = 0
 674 0000 13B5     		push	{r0, r1, r4, lr}
 675              		.cfi_def_cfa_offset 16
 676              		.cfi_offset 4, -8
 677              		.cfi_offset 14, -4
 678              		.loc 1 196 0
 679 0002 02AB     		add	r3, sp, #8
 680 0004 03E90300 		stmdb	r3, {r0, r1}
 197:quantum/quantum.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 198:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
 199:quantum/quantum.c ****     if (!disable_action_cache) {
 681              		.loc 1 199 0
 682 0008 0E4B     		ldr	r3, .L59
 683 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 684 000c ABB9     		cbnz	r3, .L55
 685              	.LBB8:
 200:quantum/quantum.c ****         uint8_t layer;
 201:quantum/quantum.c **** 
 202:quantum/quantum.c ****         if (event.pressed) {
 686              		.loc 1 202 0
 687 000e 9DF80230 		ldrb	r3, [sp, #2]	@ zero_extendqisi2
 203:quantum/quantum.c ****             layer = layer_switch_get_layer(event.key);
 688              		.loc 1 203 0
 689 0012 0098     		ldr	r0, [sp]
 202:quantum/quantum.c ****             layer = layer_switch_get_layer(event.key);
 690              		.loc 1 202 0
 691 0014 6BB1     		cbz	r3, .L56
 692              		.loc 1 203 0
 693 0016 FFF7FEFF 		bl	layer_switch_get_layer
 694              	.LVL37:
 695 001a 0446     		mov	r4, r0
 696              	.LVL38:
 204:quantum/quantum.c ****             update_source_layers_cache(event.key, layer);
 697              		.loc 1 204 0
 698 001c 0146     		mov	r1, r0
 699 001e 0098     		ldr	r0, [sp]
 700              	.LVL39:
 701 0020 FFF7FEFF 		bl	update_source_layers_cache
 702              	.LVL40:
 703              	.L57:
 205:quantum/quantum.c ****         } else {
 206:quantum/quantum.c ****             layer = read_source_layers_cache(event.key);
 207:quantum/quantum.c ****         }
 208:quantum/quantum.c ****         return keymap_key_to_keycode(layer, event.key);
 704              		.loc 1 208 0
 705 0024 0099     		ldr	r1, [sp]
 706 0026 2046     		mov	r0, r4
 707              	.LVL41:
 708              	.L58:
 709              	.LBE8:
 209:quantum/quantum.c ****     } else
 210:quantum/quantum.c **** #endif
 211:quantum/quantum.c ****         return keymap_key_to_keycode(layer_switch_get_layer(event.key), event.key);
 212:quantum/quantum.c **** }
 710              		.loc 1 212 0
 711 0028 02B0     		add	sp, sp, #8
 712              		.cfi_remember_state
 713              		.cfi_def_cfa_offset 8
 714              		@ sp needed
 715 002a BDE81040 		pop	{r4, lr}
 716              		.cfi_restore 14
 717              		.cfi_restore 4
 718              		.cfi_def_cfa_offset 0
 211:quantum/quantum.c **** }
 719              		.loc 1 211 0
 720 002e FFF7FEBF 		b	keymap_key_to_keycode
 721              	.LVL42:
 722              	.L56:
 723              		.cfi_restore_state
 724              	.LBB9:
 206:quantum/quantum.c ****         }
 725              		.loc 1 206 0
 726 0032 FFF7FEFF 		bl	read_source_layers_cache
 727              	.LVL43:
 728 0036 0446     		mov	r4, r0
 729              	.LVL44:
 730 0038 F4E7     		b	.L57
 731              	.LVL45:
 732              	.L55:
 733              	.LBE9:
 211:quantum/quantum.c **** }
 734              		.loc 1 211 0
 735 003a 0098     		ldr	r0, [sp]
 736 003c FFF7FEFF 		bl	layer_switch_get_layer
 737              	.LVL46:
 738 0040 0099     		ldr	r1, [sp]
 739 0042 F1E7     		b	.L58
 740              	.L60:
 741              		.align	2
 742              	.L59:
 743 0044 00000000 		.word	disable_action_cache
 744              		.cfi_endproc
 745              	.LFE311:
 747              		.section	.text.get_record_keycode,"ax",%progbits
 748              		.align	1
 749              		.global	get_record_keycode
 750              		.syntax unified
 751              		.thumb
 752              		.thumb_func
 753              		.fpu softvfp
 755              	get_record_keycode:
 756              	.LFB310:
 191:quantum/quantum.c **** 
 757              		.loc 1 191 0
 758              		.cfi_startproc
 759              		@ args = 0, pretend = 0, frame = 0
 760              		@ frame_needed = 0, uses_anonymous_args = 0
 761              		@ link register save eliminated.
 762              	.LVL47:
 191:quantum/quantum.c **** 
 763              		.loc 1 191 0
 764 0000 0346     		mov	r3, r0
 765 0002 0068     		ldr	r0, [r0]	@ unaligned
 766              	.LVL48:
 767 0004 9988     		ldrh	r1, [r3, #4]
 768 0006 FFF7FEBF 		b	get_event_keycode
 769              	.LVL49:
 770              		.cfi_endproc
 771              	.LFE310:
 773              		.section	.text.send_char,"ax",%progbits
 774              		.align	1
 775              		.global	send_char
 776              		.syntax unified
 777              		.thumb
 778              		.thumb_func
 779              		.fpu softvfp
 781              	send_char:
 782              	.LFB317:
 213:quantum/quantum.c **** 
 214:quantum/quantum.c **** /* Main keycode processing function. Hands off handling to other functions,
 215:quantum/quantum.c ****  * then processes internal Quantum keycodes, then processes ACTIONs.
 216:quantum/quantum.c ****  */
 217:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 218:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 219:quantum/quantum.c **** 
 220:quantum/quantum.c ****     // This is how you use actions here
 221:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 222:quantum/quantum.c ****     //   action_t action;
 223:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 224:quantum/quantum.c ****     //   process_action(record, action);
 225:quantum/quantum.c ****     //   return false;
 226:quantum/quantum.c ****     // }
 227:quantum/quantum.c **** 
 228:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
 229:quantum/quantum.c ****     if (velocikey_enabled() && record->event.pressed) {
 230:quantum/quantum.c ****         velocikey_accelerate();
 231:quantum/quantum.c ****     }
 232:quantum/quantum.c **** #endif
 233:quantum/quantum.c **** 
 234:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 235:quantum/quantum.c ****     preprocess_tap_dance(keycode, record);
 236:quantum/quantum.c **** #endif
 237:quantum/quantum.c **** 
 238:quantum/quantum.c ****     if (!(
 239:quantum/quantum.c **** #if defined(KEY_LOCK_ENABLE)
 240:quantum/quantum.c ****             // Must run first to be able to mask key_up events.
 241:quantum/quantum.c ****             process_key_lock(&keycode, record) &&
 242:quantum/quantum.c **** #endif
 243:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && defined(AUDIO_CLICKY)
 244:quantum/quantum.c ****             process_clicky(keycode, record) &&
 245:quantum/quantum.c **** #endif  // AUDIO_CLICKY
 246:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 247:quantum/quantum.c ****             process_haptic(keycode, record) &&
 248:quantum/quantum.c **** #endif  // HAPTIC_ENABLE
 249:quantum/quantum.c **** #if defined(RGB_MATRIX_ENABLE)
 250:quantum/quantum.c ****             process_rgb_matrix(keycode, record) &&
 251:quantum/quantum.c **** #endif
 252:quantum/quantum.c ****             process_record_kb(keycode, record) &&
 253:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 254:quantum/quantum.c ****             process_midi(keycode, record) &&
 255:quantum/quantum.c **** #endif
 256:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 257:quantum/quantum.c ****             process_audio(keycode, record) &&
 258:quantum/quantum.c **** #endif
 259:quantum/quantum.c **** #ifdef STENO_ENABLE
 260:quantum/quantum.c ****             process_steno(keycode, record) &&
 261:quantum/quantum.c **** #endif
 262:quantum/quantum.c **** #if (defined(AUDIO_ENABLE) || (defined(MIDI_ENABLE) && defined(MIDI_BASIC))) && !defined(NO_MUSIC_M
 263:quantum/quantum.c ****             process_music(keycode, record) &&
 264:quantum/quantum.c **** #endif
 265:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 266:quantum/quantum.c ****             process_tap_dance(keycode, record) &&
 267:quantum/quantum.c **** #endif
 268:quantum/quantum.c **** #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 269:quantum/quantum.c ****             process_unicode_common(keycode, record) &&
 270:quantum/quantum.c **** #endif
 271:quantum/quantum.c **** #ifdef LEADER_ENABLE
 272:quantum/quantum.c ****             process_leader(keycode, record) &&
 273:quantum/quantum.c **** #endif
 274:quantum/quantum.c **** #ifdef COMBO_ENABLE
 275:quantum/quantum.c ****             process_combo(keycode, record) &&
 276:quantum/quantum.c **** #endif
 277:quantum/quantum.c **** #ifdef PRINTING_ENABLE
 278:quantum/quantum.c ****             process_printer(keycode, record) &&
 279:quantum/quantum.c **** #endif
 280:quantum/quantum.c **** #ifdef AUTO_SHIFT_ENABLE
 281:quantum/quantum.c ****             process_auto_shift(keycode, record) &&
 282:quantum/quantum.c **** #endif
 283:quantum/quantum.c **** #ifdef TERMINAL_ENABLE
 284:quantum/quantum.c ****             process_terminal(keycode, record) &&
 285:quantum/quantum.c **** #endif
 286:quantum/quantum.c **** #ifdef SPACE_CADET_ENABLE
 287:quantum/quantum.c ****             process_space_cadet(keycode, record) &&
 288:quantum/quantum.c **** #endif
 289:quantum/quantum.c ****             true)) {
 290:quantum/quantum.c ****         return false;
 291:quantum/quantum.c ****     }
 292:quantum/quantum.c **** 
 293:quantum/quantum.c ****     // Shift / paren setup
 294:quantum/quantum.c **** 
 295:quantum/quantum.c ****     switch (keycode) {
 296:quantum/quantum.c ****         case RESET:
 297:quantum/quantum.c ****             if (record->event.pressed) {
 298:quantum/quantum.c ****                 reset_keyboard();
 299:quantum/quantum.c ****             }
 300:quantum/quantum.c ****             return false;
 301:quantum/quantum.c ****         case DEBUG:
 302:quantum/quantum.c ****             if (record->event.pressed) {
 303:quantum/quantum.c ****                 debug_enable ^= 1;
 304:quantum/quantum.c ****                 if (debug_enable) {
 305:quantum/quantum.c ****                     print("DEBUG: enabled.\n");
 306:quantum/quantum.c ****                 } else {
 307:quantum/quantum.c ****                     print("DEBUG: disabled.\n");
 308:quantum/quantum.c ****                 }
 309:quantum/quantum.c ****             }
 310:quantum/quantum.c ****             return false;
 311:quantum/quantum.c ****         case EEPROM_RESET:
 312:quantum/quantum.c ****             if (record->event.pressed) {
 313:quantum/quantum.c ****                 eeconfig_init();
 314:quantum/quantum.c ****             }
 315:quantum/quantum.c ****             return false;
 316:quantum/quantum.c **** #ifdef FAUXCLICKY_ENABLE
 317:quantum/quantum.c ****         case FC_TOG:
 318:quantum/quantum.c ****             if (record->event.pressed) {
 319:quantum/quantum.c ****                 FAUXCLICKY_TOGGLE;
 320:quantum/quantum.c ****             }
 321:quantum/quantum.c ****             return false;
 322:quantum/quantum.c ****         case FC_ON:
 323:quantum/quantum.c ****             if (record->event.pressed) {
 324:quantum/quantum.c ****                 FAUXCLICKY_ON;
 325:quantum/quantum.c ****             }
 326:quantum/quantum.c ****             return false;
 327:quantum/quantum.c ****         case FC_OFF:
 328:quantum/quantum.c ****             if (record->event.pressed) {
 329:quantum/quantum.c ****                 FAUXCLICKY_OFF;
 330:quantum/quantum.c ****             }
 331:quantum/quantum.c ****             return false;
 332:quantum/quantum.c **** #endif
 333:quantum/quantum.c **** #if defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 334:quantum/quantum.c ****         case RGB_TOG:
 335:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 336:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 337:quantum/quantum.c ****             if (record->event.pressed) {
 338:quantum/quantum.c **** #    else
 339:quantum/quantum.c ****             if (!record->event.pressed) {
 340:quantum/quantum.c **** #    endif
 341:quantum/quantum.c ****                 rgblight_toggle();
 342:quantum/quantum.c ****             }
 343:quantum/quantum.c ****             return false;
 344:quantum/quantum.c ****         case RGB_MODE_FORWARD:
 345:quantum/quantum.c ****             if (record->event.pressed) {
 346:quantum/quantum.c ****                 uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT));
 347:quantum/quantum.c ****                 if (shifted) {
 348:quantum/quantum.c ****                     rgblight_step_reverse();
 349:quantum/quantum.c ****                 } else {
 350:quantum/quantum.c ****                     rgblight_step();
 351:quantum/quantum.c ****                 }
 352:quantum/quantum.c ****             }
 353:quantum/quantum.c ****             return false;
 354:quantum/quantum.c ****         case RGB_MODE_REVERSE:
 355:quantum/quantum.c ****             if (record->event.pressed) {
 356:quantum/quantum.c ****                 uint8_t shifted = get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT));
 357:quantum/quantum.c ****                 if (shifted) {
 358:quantum/quantum.c ****                     rgblight_step();
 359:quantum/quantum.c ****                 } else {
 360:quantum/quantum.c ****                     rgblight_step_reverse();
 361:quantum/quantum.c ****                 }
 362:quantum/quantum.c ****             }
 363:quantum/quantum.c ****             return false;
 364:quantum/quantum.c ****         case RGB_HUI:
 365:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 366:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 367:quantum/quantum.c ****             if (record->event.pressed) {
 368:quantum/quantum.c **** #    else
 369:quantum/quantum.c ****             if (!record->event.pressed) {
 370:quantum/quantum.c **** #    endif
 371:quantum/quantum.c ****                 rgblight_increase_hue();
 372:quantum/quantum.c ****             }
 373:quantum/quantum.c ****             return false;
 374:quantum/quantum.c ****         case RGB_HUD:
 375:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 376:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 377:quantum/quantum.c ****             if (record->event.pressed) {
 378:quantum/quantum.c **** #    else
 379:quantum/quantum.c ****             if (!record->event.pressed) {
 380:quantum/quantum.c **** #    endif
 381:quantum/quantum.c ****                 rgblight_decrease_hue();
 382:quantum/quantum.c ****             }
 383:quantum/quantum.c ****             return false;
 384:quantum/quantum.c ****         case RGB_SAI:
 385:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 386:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 387:quantum/quantum.c ****             if (record->event.pressed) {
 388:quantum/quantum.c **** #    else
 389:quantum/quantum.c ****             if (!record->event.pressed) {
 390:quantum/quantum.c **** #    endif
 391:quantum/quantum.c ****                 rgblight_increase_sat();
 392:quantum/quantum.c ****             }
 393:quantum/quantum.c ****             return false;
 394:quantum/quantum.c ****         case RGB_SAD:
 395:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 396:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 397:quantum/quantum.c ****             if (record->event.pressed) {
 398:quantum/quantum.c **** #    else
 399:quantum/quantum.c ****             if (!record->event.pressed) {
 400:quantum/quantum.c **** #    endif
 401:quantum/quantum.c ****                 rgblight_decrease_sat();
 402:quantum/quantum.c ****             }
 403:quantum/quantum.c ****             return false;
 404:quantum/quantum.c ****         case RGB_VAI:
 405:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 406:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 407:quantum/quantum.c ****             if (record->event.pressed) {
 408:quantum/quantum.c **** #    else
 409:quantum/quantum.c ****             if (!record->event.pressed) {
 410:quantum/quantum.c **** #    endif
 411:quantum/quantum.c ****                 rgblight_increase_val();
 412:quantum/quantum.c ****             }
 413:quantum/quantum.c ****             return false;
 414:quantum/quantum.c ****         case RGB_VAD:
 415:quantum/quantum.c **** // Split keyboards need to trigger on key-up for edge-case issue
 416:quantum/quantum.c **** #    ifndef SPLIT_KEYBOARD
 417:quantum/quantum.c ****             if (record->event.pressed) {
 418:quantum/quantum.c **** #    else
 419:quantum/quantum.c ****             if (!record->event.pressed) {
 420:quantum/quantum.c **** #    endif
 421:quantum/quantum.c ****                 rgblight_decrease_val();
 422:quantum/quantum.c ****             }
 423:quantum/quantum.c ****             return false;
 424:quantum/quantum.c ****         case RGB_SPI:
 425:quantum/quantum.c ****             if (record->event.pressed) {
 426:quantum/quantum.c ****                 rgblight_increase_speed();
 427:quantum/quantum.c ****             }
 428:quantum/quantum.c ****             return false;
 429:quantum/quantum.c ****         case RGB_SPD:
 430:quantum/quantum.c ****             if (record->event.pressed) {
 431:quantum/quantum.c ****                 rgblight_decrease_speed();
 432:quantum/quantum.c ****             }
 433:quantum/quantum.c ****             return false;
 434:quantum/quantum.c ****         case RGB_MODE_PLAIN:
 435:quantum/quantum.c ****             if (record->event.pressed) {
 436:quantum/quantum.c ****                 rgblight_mode(RGBLIGHT_MODE_STATIC_LIGHT);
 437:quantum/quantum.c ****             }
 438:quantum/quantum.c ****             return false;
 439:quantum/quantum.c ****         case RGB_MODE_BREATHE:
 440:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_BREATHING
 441:quantum/quantum.c ****             if (record->event.pressed) {
 442:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_BREATHING <= rgblight_get_mode()) && (rgblight_get_mode() < RGBL
 443:quantum/quantum.c ****                     rgblight_step();
 444:quantum/quantum.c ****                 } else {
 445:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_BREATHING);
 446:quantum/quantum.c ****                 }
 447:quantum/quantum.c ****             }
 448:quantum/quantum.c **** #    endif
 449:quantum/quantum.c ****             return false;
 450:quantum/quantum.c ****         case RGB_MODE_RAINBOW:
 451:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_RAINBOW_MOOD
 452:quantum/quantum.c ****             if (record->event.pressed) {
 453:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_RAINBOW_MOOD <= rgblight_get_mode()) && (rgblight_get_mode() < R
 454:quantum/quantum.c ****                     rgblight_step();
 455:quantum/quantum.c ****                 } else {
 456:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_RAINBOW_MOOD);
 457:quantum/quantum.c ****                 }
 458:quantum/quantum.c ****             }
 459:quantum/quantum.c **** #    endif
 460:quantum/quantum.c ****             return false;
 461:quantum/quantum.c ****         case RGB_MODE_SWIRL:
 462:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_RAINBOW_SWIRL
 463:quantum/quantum.c ****             if (record->event.pressed) {
 464:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_RAINBOW_SWIRL <= rgblight_get_mode()) && (rgblight_get_mode() < 
 465:quantum/quantum.c ****                     rgblight_step();
 466:quantum/quantum.c ****                 } else {
 467:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_RAINBOW_SWIRL);
 468:quantum/quantum.c ****                 }
 469:quantum/quantum.c ****             }
 470:quantum/quantum.c **** #    endif
 471:quantum/quantum.c ****             return false;
 472:quantum/quantum.c ****         case RGB_MODE_SNAKE:
 473:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_SNAKE
 474:quantum/quantum.c ****             if (record->event.pressed) {
 475:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_SNAKE <= rgblight_get_mode()) && (rgblight_get_mode() < RGBLIGHT
 476:quantum/quantum.c ****                     rgblight_step();
 477:quantum/quantum.c ****                 } else {
 478:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_SNAKE);
 479:quantum/quantum.c ****                 }
 480:quantum/quantum.c ****             }
 481:quantum/quantum.c **** #    endif
 482:quantum/quantum.c ****             return false;
 483:quantum/quantum.c ****         case RGB_MODE_KNIGHT:
 484:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_KNIGHT
 485:quantum/quantum.c ****             if (record->event.pressed) {
 486:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_KNIGHT <= rgblight_get_mode()) && (rgblight_get_mode() < RGBLIGH
 487:quantum/quantum.c ****                     rgblight_step();
 488:quantum/quantum.c ****                 } else {
 489:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_KNIGHT);
 490:quantum/quantum.c ****                 }
 491:quantum/quantum.c ****             }
 492:quantum/quantum.c **** #    endif
 493:quantum/quantum.c ****             return false;
 494:quantum/quantum.c ****         case RGB_MODE_XMAS:
 495:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_CHRISTMAS
 496:quantum/quantum.c ****             if (record->event.pressed) {
 497:quantum/quantum.c ****                 rgblight_mode(RGBLIGHT_MODE_CHRISTMAS);
 498:quantum/quantum.c ****             }
 499:quantum/quantum.c **** #    endif
 500:quantum/quantum.c ****             return false;
 501:quantum/quantum.c ****         case RGB_MODE_GRADIENT:
 502:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_STATIC_GRADIENT
 503:quantum/quantum.c ****             if (record->event.pressed) {
 504:quantum/quantum.c ****                 if ((RGBLIGHT_MODE_STATIC_GRADIENT <= rgblight_get_mode()) && (rgblight_get_mode() 
 505:quantum/quantum.c ****                     rgblight_step();
 506:quantum/quantum.c ****                 } else {
 507:quantum/quantum.c ****                     rgblight_mode(RGBLIGHT_MODE_STATIC_GRADIENT);
 508:quantum/quantum.c ****                 }
 509:quantum/quantum.c ****             }
 510:quantum/quantum.c **** #    endif
 511:quantum/quantum.c ****             return false;
 512:quantum/quantum.c ****         case RGB_MODE_RGBTEST:
 513:quantum/quantum.c **** #    ifdef RGBLIGHT_EFFECT_RGB_TEST
 514:quantum/quantum.c ****             if (record->event.pressed) {
 515:quantum/quantum.c ****                 rgblight_mode(RGBLIGHT_MODE_RGB_TEST);
 516:quantum/quantum.c ****             }
 517:quantum/quantum.c **** #    endif
 518:quantum/quantum.c ****             return false;
 519:quantum/quantum.c **** #endif  // defined(RGBLIGHT_ENABLE) || defined(RGB_MATRIX_ENABLE)
 520:quantum/quantum.c **** #ifdef VELOCIKEY_ENABLE
 521:quantum/quantum.c ****         case VLK_TOG:
 522:quantum/quantum.c ****             if (record->event.pressed) {
 523:quantum/quantum.c ****                 velocikey_toggle();
 524:quantum/quantum.c ****             }
 525:quantum/quantum.c ****             return false;
 526:quantum/quantum.c **** #endif
 527:quantum/quantum.c **** #ifdef PROTOCOL_LUFA
 528:quantum/quantum.c ****         case OUT_AUTO:
 529:quantum/quantum.c ****             if (record->event.pressed) {
 530:quantum/quantum.c ****                 set_output(OUTPUT_AUTO);
 531:quantum/quantum.c ****             }
 532:quantum/quantum.c ****             return false;
 533:quantum/quantum.c ****         case OUT_USB:
 534:quantum/quantum.c ****             if (record->event.pressed) {
 535:quantum/quantum.c ****                 set_output(OUTPUT_USB);
 536:quantum/quantum.c ****             }
 537:quantum/quantum.c ****             return false;
 538:quantum/quantum.c **** #    ifdef BLUETOOTH_ENABLE
 539:quantum/quantum.c ****         case OUT_BT:
 540:quantum/quantum.c ****             if (record->event.pressed) {
 541:quantum/quantum.c ****                 set_output(OUTPUT_BLUETOOTH);
 542:quantum/quantum.c ****             }
 543:quantum/quantum.c ****             return false;
 544:quantum/quantum.c **** #    endif
 545:quantum/quantum.c **** #endif
 546:quantum/quantum.c ****         case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_ALT_GUI:
 547:quantum/quantum.c ****         case MAGIC_SWAP_LCTL_LGUI ... MAGIC_TOGGLE_CTL_GUI:
 548:quantum/quantum.c ****             if (record->event.pressed) {
 549:quantum/quantum.c ****                 // MAGIC actions (BOOTMAGIC without the boot)
 550:quantum/quantum.c ****                 if (!eeconfig_is_enabled()) {
 551:quantum/quantum.c ****                     eeconfig_init();
 552:quantum/quantum.c ****                 }
 553:quantum/quantum.c ****                 /* keymap config */
 554:quantum/quantum.c ****                 keymap_config.raw = eeconfig_read_keymap();
 555:quantum/quantum.c ****                 switch (keycode) {
 556:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 557:quantum/quantum.c ****                         keymap_config.swap_control_capslock = true;
 558:quantum/quantum.c ****                         break;
 559:quantum/quantum.c ****                     case MAGIC_CAPSLOCK_TO_CONTROL:
 560:quantum/quantum.c ****                         keymap_config.capslock_to_control = true;
 561:quantum/quantum.c ****                         break;
 562:quantum/quantum.c ****                     case MAGIC_SWAP_LALT_LGUI:
 563:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = true;
 564:quantum/quantum.c ****                         break;
 565:quantum/quantum.c ****                     case MAGIC_SWAP_RALT_RGUI:
 566:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = true;
 567:quantum/quantum.c ****                         break;
 568:quantum/quantum.c ****                     case MAGIC_SWAP_LCTL_LGUI:
 569:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = true;
 570:quantum/quantum.c ****                         break;
 571:quantum/quantum.c ****                     case MAGIC_SWAP_RCTL_RGUI:
 572:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = true;
 573:quantum/quantum.c ****                         break;
 574:quantum/quantum.c ****                     case MAGIC_NO_GUI:
 575:quantum/quantum.c ****                         keymap_config.no_gui = true;
 576:quantum/quantum.c ****                         break;
 577:quantum/quantum.c ****                     case MAGIC_SWAP_GRAVE_ESC:
 578:quantum/quantum.c ****                         keymap_config.swap_grave_esc = true;
 579:quantum/quantum.c ****                         break;
 580:quantum/quantum.c ****                     case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 581:quantum/quantum.c ****                         keymap_config.swap_backslash_backspace = true;
 582:quantum/quantum.c ****                         break;
 583:quantum/quantum.c ****                     case MAGIC_HOST_NKRO:
 584:quantum/quantum.c ****                         keymap_config.nkro = true;
 585:quantum/quantum.c ****                         break;
 586:quantum/quantum.c ****                     case MAGIC_SWAP_ALT_GUI:
 587:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = keymap_config.swap_ralt_rgui = true;
 588:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 589:quantum/quantum.c ****                         PLAY_SONG(ag_swap_song);
 590:quantum/quantum.c **** #endif
 591:quantum/quantum.c ****                         break;
 592:quantum/quantum.c ****                     case MAGIC_SWAP_CTL_GUI:
 593:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = keymap_config.swap_rctl_rgui = true;
 594:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 595:quantum/quantum.c ****                         PLAY_SONG(cg_swap_song);
 596:quantum/quantum.c **** #endif
 597:quantum/quantum.c ****                         break;
 598:quantum/quantum.c ****                     case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 599:quantum/quantum.c ****                         keymap_config.swap_control_capslock = false;
 600:quantum/quantum.c ****                         break;
 601:quantum/quantum.c ****                     case MAGIC_UNCAPSLOCK_TO_CONTROL:
 602:quantum/quantum.c ****                         keymap_config.capslock_to_control = false;
 603:quantum/quantum.c ****                         break;
 604:quantum/quantum.c ****                     case MAGIC_UNSWAP_LALT_LGUI:
 605:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = false;
 606:quantum/quantum.c ****                         break;
 607:quantum/quantum.c ****                     case MAGIC_UNSWAP_RALT_RGUI:
 608:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = false;
 609:quantum/quantum.c ****                         break;
 610:quantum/quantum.c ****                     case MAGIC_UNSWAP_LCTL_LGUI:
 611:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = false;
 612:quantum/quantum.c ****                         break;
 613:quantum/quantum.c ****                     case MAGIC_UNSWAP_RCTL_RGUI:
 614:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = false;
 615:quantum/quantum.c ****                         break;
 616:quantum/quantum.c ****                     case MAGIC_UNNO_GUI:
 617:quantum/quantum.c ****                         keymap_config.no_gui = false;
 618:quantum/quantum.c ****                         break;
 619:quantum/quantum.c ****                     case MAGIC_UNSWAP_GRAVE_ESC:
 620:quantum/quantum.c ****                         keymap_config.swap_grave_esc = false;
 621:quantum/quantum.c ****                         break;
 622:quantum/quantum.c ****                     case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 623:quantum/quantum.c ****                         keymap_config.swap_backslash_backspace = false;
 624:quantum/quantum.c ****                         break;
 625:quantum/quantum.c ****                     case MAGIC_UNHOST_NKRO:
 626:quantum/quantum.c ****                         keymap_config.nkro = false;
 627:quantum/quantum.c ****                         break;
 628:quantum/quantum.c ****                     case MAGIC_UNSWAP_ALT_GUI:
 629:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = keymap_config.swap_ralt_rgui = false;
 630:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 631:quantum/quantum.c ****                         PLAY_SONG(ag_norm_song);
 632:quantum/quantum.c **** #endif
 633:quantum/quantum.c ****                         break;
 634:quantum/quantum.c ****                     case MAGIC_UNSWAP_CTL_GUI:
 635:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = keymap_config.swap_rctl_rgui = false;
 636:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 637:quantum/quantum.c ****                         PLAY_SONG(cg_norm_song);
 638:quantum/quantum.c **** #endif
 639:quantum/quantum.c ****                         break;
 640:quantum/quantum.c ****                     case MAGIC_TOGGLE_ALT_GUI:
 641:quantum/quantum.c ****                         keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
 642:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = keymap_config.swap_lalt_lgui;
 643:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 644:quantum/quantum.c ****                         if (keymap_config.swap_ralt_rgui) {
 645:quantum/quantum.c ****                             PLAY_SONG(ag_swap_song);
 646:quantum/quantum.c ****                         } else {
 647:quantum/quantum.c ****                             PLAY_SONG(ag_norm_song);
 648:quantum/quantum.c ****                         }
 649:quantum/quantum.c **** #endif
 650:quantum/quantum.c ****                         break;
 651:quantum/quantum.c ****                     case MAGIC_TOGGLE_CTL_GUI:
 652:quantum/quantum.c ****                         keymap_config.swap_lctl_lgui = !keymap_config.swap_lctl_lgui;
 653:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = keymap_config.swap_lctl_lgui;
 654:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 655:quantum/quantum.c ****                         if (keymap_config.swap_rctl_rgui) {
 656:quantum/quantum.c ****                             PLAY_SONG(cg_swap_song);
 657:quantum/quantum.c ****                         } else {
 658:quantum/quantum.c ****                             PLAY_SONG(cg_norm_song);
 659:quantum/quantum.c ****                         }
 660:quantum/quantum.c **** #endif
 661:quantum/quantum.c ****                         break;
 662:quantum/quantum.c ****                     case MAGIC_TOGGLE_NKRO:
 663:quantum/quantum.c ****                         keymap_config.nkro = !keymap_config.nkro;
 664:quantum/quantum.c ****                         break;
 665:quantum/quantum.c ****                     default:
 666:quantum/quantum.c ****                         break;
 667:quantum/quantum.c ****                 }
 668:quantum/quantum.c ****                 eeconfig_update_keymap(keymap_config.raw);
 669:quantum/quantum.c ****                 clear_keyboard();  // clear to prevent stuck keys
 670:quantum/quantum.c **** 
 671:quantum/quantum.c ****                 return false;
 672:quantum/quantum.c ****             }
 673:quantum/quantum.c ****             break;
 674:quantum/quantum.c **** 
 675:quantum/quantum.c ****         case GRAVE_ESC: {
 676:quantum/quantum.c ****             uint8_t shifted = get_mods() & ((MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT) | MOD_BIT(KC_L
 677:quantum/quantum.c **** 
 678:quantum/quantum.c **** #ifdef GRAVE_ESC_ALT_OVERRIDE
 679:quantum/quantum.c ****             // if ALT is pressed, ESC is always sent
 680:quantum/quantum.c ****             // this is handy for the cmd+opt+esc shortcut on macOS, among other things.
 681:quantum/quantum.c ****             if (get_mods() & (MOD_BIT(KC_LALT) | MOD_BIT(KC_RALT))) {
 682:quantum/quantum.c ****                 shifted = 0;
 683:quantum/quantum.c ****             }
 684:quantum/quantum.c **** #endif
 685:quantum/quantum.c **** 
 686:quantum/quantum.c **** #ifdef GRAVE_ESC_CTRL_OVERRIDE
 687:quantum/quantum.c ****             // if CTRL is pressed, ESC is always sent
 688:quantum/quantum.c ****             // this is handy for the ctrl+shift+esc shortcut on windows, among other things.
 689:quantum/quantum.c ****             if (get_mods() & (MOD_BIT(KC_LCTL) | MOD_BIT(KC_RCTL))) {
 690:quantum/quantum.c ****                 shifted = 0;
 691:quantum/quantum.c ****             }
 692:quantum/quantum.c **** #endif
 693:quantum/quantum.c **** 
 694:quantum/quantum.c **** #ifdef GRAVE_ESC_GUI_OVERRIDE
 695:quantum/quantum.c ****             // if GUI is pressed, ESC is always sent
 696:quantum/quantum.c ****             if (get_mods() & (MOD_BIT(KC_LGUI) | MOD_BIT(KC_RGUI))) {
 697:quantum/quantum.c ****                 shifted = 0;
 698:quantum/quantum.c ****             }
 699:quantum/quantum.c **** #endif
 700:quantum/quantum.c **** 
 701:quantum/quantum.c **** #ifdef GRAVE_ESC_SHIFT_OVERRIDE
 702:quantum/quantum.c ****             // if SHIFT is pressed, ESC is always sent
 703:quantum/quantum.c ****             if (get_mods() & (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT))) {
 704:quantum/quantum.c ****                 shifted = 0;
 705:quantum/quantum.c ****             }
 706:quantum/quantum.c **** #endif
 707:quantum/quantum.c **** 
 708:quantum/quantum.c ****             if (record->event.pressed) {
 709:quantum/quantum.c ****                 grave_esc_was_shifted = shifted;
 710:quantum/quantum.c ****                 add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 711:quantum/quantum.c ****             } else {
 712:quantum/quantum.c ****                 del_key(grave_esc_was_shifted ? KC_GRAVE : KC_ESCAPE);
 713:quantum/quantum.c ****             }
 714:quantum/quantum.c **** 
 715:quantum/quantum.c ****             send_keyboard_report();
 716:quantum/quantum.c ****             return false;
 717:quantum/quantum.c ****         }
 718:quantum/quantum.c **** 
 719:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_BREATHING)
 720:quantum/quantum.c ****         case BL_BRTG: {
 721:quantum/quantum.c ****             if (record->event.pressed) {
 722:quantum/quantum.c ****                 backlight_toggle_breathing();
 723:quantum/quantum.c ****             }
 724:quantum/quantum.c ****             return false;
 725:quantum/quantum.c ****         }
 726:quantum/quantum.c **** #endif
 727:quantum/quantum.c ****     }
 728:quantum/quantum.c **** 
 729:quantum/quantum.c ****     return process_action_kb(record);
 730:quantum/quantum.c **** }
 731:quantum/quantum.c **** 
 732:quantum/quantum.c **** __attribute__((weak)) const bool ascii_to_shift_lut[128] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 733:quantum/quantum.c **** 
 734:quantum/quantum.c ****                                                                     0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1
 735:quantum/quantum.c **** 
 736:quantum/quantum.c **** __attribute__((weak)) const bool ascii_to_altgr_lut[128] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 737:quantum/quantum.c **** 
 738:quantum/quantum.c ****                                                                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 739:quantum/quantum.c **** 
 740:quantum/quantum.c **** __attribute__((weak)) const uint8_t ascii_to_keycode_lut[128] PROGMEM = {// NUL   SOH      STX     
 741:quantum/quantum.c ****                                                                          XXXXXXX, XXXXXXX, XXXXXXX,
 742:quantum/quantum.c ****                                                                          // BS    TAB      LF      
 743:quantum/quantum.c ****                                                                          KC_BSPC, KC_TAB, KC_ENT, X
 744:quantum/quantum.c ****                                                                          // DLE   DC1      DC2     
 745:quantum/quantum.c ****                                                                          XXXXXXX, XXXXXXX, XXXXXXX,
 746:quantum/quantum.c ****                                                                          // CAN   EM       SUB     
 747:quantum/quantum.c ****                                                                          XXXXXXX, XXXXXXX, XXXXXXX,
 748:quantum/quantum.c **** 
 749:quantum/quantum.c ****                                                                          //       !        "       
 750:quantum/quantum.c ****                                                                          KC_SPC, KC_1, KC_QUOT, KC_
 751:quantum/quantum.c ****                                                                          // (     )        *       
 752:quantum/quantum.c ****                                                                          KC_9, KC_0, KC_8, KC_EQL, 
 753:quantum/quantum.c ****                                                                          // 0     1        2       
 754:quantum/quantum.c ****                                                                          KC_0, KC_1, KC_2, KC_3, KC
 755:quantum/quantum.c ****                                                                          // 8     9        :       
 756:quantum/quantum.c ****                                                                          KC_8, KC_9, KC_SCLN, KC_SC
 757:quantum/quantum.c ****                                                                          // @     A        B       
 758:quantum/quantum.c ****                                                                          KC_2, KC_A, KC_B, KC_C, KC
 759:quantum/quantum.c ****                                                                          // H     I        J       
 760:quantum/quantum.c ****                                                                          KC_H, KC_I, KC_J, KC_K, KC
 761:quantum/quantum.c ****                                                                          // P     Q        R       
 762:quantum/quantum.c ****                                                                          KC_P, KC_Q, KC_R, KC_S, KC
 763:quantum/quantum.c ****                                                                          // X     Y        Z       
 764:quantum/quantum.c ****                                                                          KC_X, KC_Y, KC_Z, KC_LBRC,
 765:quantum/quantum.c ****                                                                          // `     a        b       
 766:quantum/quantum.c ****                                                                          KC_GRV, KC_A, KC_B, KC_C, 
 767:quantum/quantum.c ****                                                                          // h     i        j       
 768:quantum/quantum.c ****                                                                          KC_H, KC_I, KC_J, KC_K, KC
 769:quantum/quantum.c ****                                                                          // p     q        r       
 770:quantum/quantum.c ****                                                                          KC_P, KC_Q, KC_R, KC_S, KC
 771:quantum/quantum.c ****                                                                          // x     y        z       
 772:quantum/quantum.c ****                                                                          KC_X, KC_Y, KC_Z, KC_LBRC,
 773:quantum/quantum.c **** 
 774:quantum/quantum.c **** void send_string(const char *str) { send_string_with_delay(str, 0); }
 775:quantum/quantum.c **** 
 776:quantum/quantum.c **** void send_string_P(const char *str) { send_string_with_delay_P(str, 0); }
 777:quantum/quantum.c **** 
 778:quantum/quantum.c **** void send_string_with_delay(const char *str, uint8_t interval) {
 779:quantum/quantum.c ****     while (1) {
 780:quantum/quantum.c ****         char ascii_code = *str;
 781:quantum/quantum.c ****         if (!ascii_code) break;
 782:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 783:quantum/quantum.c ****             // tap
 784:quantum/quantum.c ****             uint8_t keycode = *(++str);
 785:quantum/quantum.c ****             register_code(keycode);
 786:quantum/quantum.c ****             unregister_code(keycode);
 787:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 788:quantum/quantum.c ****             // down
 789:quantum/quantum.c ****             uint8_t keycode = *(++str);
 790:quantum/quantum.c ****             register_code(keycode);
 791:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 792:quantum/quantum.c ****             // up
 793:quantum/quantum.c ****             uint8_t keycode = *(++str);
 794:quantum/quantum.c ****             unregister_code(keycode);
 795:quantum/quantum.c ****         } else {
 796:quantum/quantum.c ****             send_char(ascii_code);
 797:quantum/quantum.c ****         }
 798:quantum/quantum.c ****         ++str;
 799:quantum/quantum.c ****         // interval
 800:quantum/quantum.c ****         {
 801:quantum/quantum.c ****             uint8_t ms = interval;
 802:quantum/quantum.c ****             while (ms--) wait_ms(1);
 803:quantum/quantum.c ****         }
 804:quantum/quantum.c ****     }
 805:quantum/quantum.c **** }
 806:quantum/quantum.c **** 
 807:quantum/quantum.c **** void send_string_with_delay_P(const char *str, uint8_t interval) {
 808:quantum/quantum.c ****     while (1) {
 809:quantum/quantum.c ****         char ascii_code = pgm_read_byte(str);
 810:quantum/quantum.c ****         if (!ascii_code) break;
 811:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 812:quantum/quantum.c ****             // tap
 813:quantum/quantum.c ****             uint8_t keycode = pgm_read_byte(++str);
 814:quantum/quantum.c ****             register_code(keycode);
 815:quantum/quantum.c ****             unregister_code(keycode);
 816:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 817:quantum/quantum.c ****             // down
 818:quantum/quantum.c ****             uint8_t keycode = pgm_read_byte(++str);
 819:quantum/quantum.c ****             register_code(keycode);
 820:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 821:quantum/quantum.c ****             // up
 822:quantum/quantum.c ****             uint8_t keycode = pgm_read_byte(++str);
 823:quantum/quantum.c ****             unregister_code(keycode);
 824:quantum/quantum.c ****         } else {
 825:quantum/quantum.c ****             send_char(ascii_code);
 826:quantum/quantum.c ****         }
 827:quantum/quantum.c ****         ++str;
 828:quantum/quantum.c ****         // interval
 829:quantum/quantum.c ****         {
 830:quantum/quantum.c ****             uint8_t ms = interval;
 831:quantum/quantum.c ****             while (ms--) wait_ms(1);
 832:quantum/quantum.c ****         }
 833:quantum/quantum.c ****     }
 834:quantum/quantum.c **** }
 835:quantum/quantum.c **** 
 836:quantum/quantum.c **** void send_char(char ascii_code) {
 783              		.loc 1 836 0
 784              		.cfi_startproc
 785              		@ args = 0, pretend = 0, frame = 0
 786              		@ frame_needed = 0, uses_anonymous_args = 0
 787              	.LVL50:
 788 0000 70B5     		push	{r4, r5, r6, lr}
 789              		.cfi_def_cfa_offset 16
 790              		.cfi_offset 4, -16
 791              		.cfi_offset 5, -12
 792              		.cfi_offset 6, -8
 793              		.cfi_offset 14, -4
 837:quantum/quantum.c ****     uint8_t keycode    = pgm_read_byte(&ascii_to_keycode_lut[(uint8_t)ascii_code]);
 794              		.loc 1 837 0
 795 0002 0E4B     		ldr	r3, .L76
 796 0004 1E5C     		ldrb	r6, [r3, r0]	@ zero_extendqisi2
 797              	.LVL51:
 838:quantum/quantum.c ****     bool    is_shifted = pgm_read_byte(&ascii_to_shift_lut[(uint8_t)ascii_code]);
 798              		.loc 1 838 0
 799 0006 0E4B     		ldr	r3, .L76+4
 800 0008 C45C     		ldrb	r4, [r0, r3]	@ zero_extendqisi2
 801              	.LVL52:
 839:quantum/quantum.c ****     bool    is_altgred = pgm_read_byte(&ascii_to_altgr_lut[(uint8_t)ascii_code]);
 802              		.loc 1 839 0
 803 000a 0E4B     		ldr	r3, .L76+8
 804 000c C55C     		ldrb	r5, [r0, r3]	@ zero_extendqisi2
 805              	.LVL53:
 840:quantum/quantum.c **** 
 841:quantum/quantum.c ****     if (is_shifted) {
 806              		.loc 1 841 0
 807 000e 14B1     		cbz	r4, .L63
 842:quantum/quantum.c ****         register_code(KC_LSFT);
 808              		.loc 1 842 0
 809 0010 E120     		movs	r0, #225
 810              	.LVL54:
 811 0012 FFF7FEFF 		bl	register_code
 812              	.LVL55:
 813              	.L63:
 843:quantum/quantum.c ****     }
 844:quantum/quantum.c ****     if (is_altgred) {
 814              		.loc 1 844 0
 815 0016 15B1     		cbz	r5, .L64
 845:quantum/quantum.c ****         register_code(KC_RALT);
 816              		.loc 1 845 0
 817 0018 E620     		movs	r0, #230
 818 001a FFF7FEFF 		bl	register_code
 819              	.LVL56:
 820              	.L64:
 846:quantum/quantum.c ****     }
 847:quantum/quantum.c ****     tap_code(keycode);
 821              		.loc 1 847 0
 822 001e 3046     		mov	r0, r6
 823 0020 FFF7FEFF 		bl	tap_code
 824              	.LVL57:
 848:quantum/quantum.c ****     if (is_altgred) {
 825              		.loc 1 848 0
 826 0024 15B1     		cbz	r5, .L65
 849:quantum/quantum.c ****         unregister_code(KC_RALT);
 827              		.loc 1 849 0
 828 0026 E620     		movs	r0, #230
 829 0028 FFF7FEFF 		bl	unregister_code
 830              	.LVL58:
 831              	.L65:
 850:quantum/quantum.c ****     }
 851:quantum/quantum.c ****     if (is_shifted) {
 832              		.loc 1 851 0
 833 002c 24B1     		cbz	r4, .L62
 852:quantum/quantum.c ****         unregister_code(KC_LSFT);
 834              		.loc 1 852 0
 835 002e E120     		movs	r0, #225
 853:quantum/quantum.c ****     }
 854:quantum/quantum.c **** }
 836              		.loc 1 854 0
 837 0030 BDE87040 		pop	{r4, r5, r6, lr}
 838              		.cfi_remember_state
 839              		.cfi_restore 14
 840              		.cfi_restore 6
 841              		.cfi_restore 5
 842              		.cfi_restore 4
 843              		.cfi_def_cfa_offset 0
 844              	.LVL59:
 852:quantum/quantum.c ****         unregister_code(KC_LSFT);
 845              		.loc 1 852 0
 846 0034 FFF7FEBF 		b	unregister_code
 847              	.LVL60:
 848              	.L62:
 849              		.cfi_restore_state
 850              		.loc 1 854 0
 851 0038 70BD     		pop	{r4, r5, r6, pc}
 852              	.LVL61:
 853              	.L77:
 854 003a 00BF     		.align	2
 855              	.L76:
 856 003c 00000000 		.word	ascii_to_keycode_lut
 857 0040 00000000 		.word	ascii_to_shift_lut
 858 0044 00000000 		.word	ascii_to_altgr_lut
 859              		.cfi_endproc
 860              	.LFE317:
 862              		.section	.text.send_string_with_delay,"ax",%progbits
 863              		.align	1
 864              		.global	send_string_with_delay
 865              		.syntax unified
 866              		.thumb
 867              		.thumb_func
 868              		.fpu softvfp
 870              	send_string_with_delay:
 871              	.LFB315:
 778:quantum/quantum.c ****     while (1) {
 872              		.loc 1 778 0
 873              		.cfi_startproc
 874              		@ args = 0, pretend = 0, frame = 0
 875              		@ frame_needed = 0, uses_anonymous_args = 0
 876              	.LVL62:
 877 0000 70B5     		push	{r4, r5, r6, lr}
 878              		.cfi_def_cfa_offset 16
 879              		.cfi_offset 4, -16
 880              		.cfi_offset 5, -12
 881              		.cfi_offset 6, -8
 882              		.cfi_offset 14, -4
 883 0002 0446     		mov	r4, r0
 884 0004 0E46     		mov	r6, r1
 885              	.LVL63:
 886              	.L86:
 887              	.LBB10:
 780:quantum/quantum.c ****         if (!ascii_code) break;
 888              		.loc 1 780 0
 889 0006 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 890              	.LVL64:
 781:quantum/quantum.c ****         if (ascii_code == SS_TAP_CODE) {
 891              		.loc 1 781 0
 892 0008 10B3     		cbz	r0, .L78
 782:quantum/quantum.c ****             // tap
 893              		.loc 1 782 0
 894 000a 0128     		cmp	r0, #1
 895 000c 04F10105 		add	r5, r4, #1
 896 0010 07D1     		bne	.L80
 897              	.LVL65:
 898              	.LBB11:
 784:quantum/quantum.c ****             register_code(keycode);
 899              		.loc 1 784 0
 900 0012 6478     		ldrb	r4, [r4, #1]	@ zero_extendqisi2
 901              	.LVL66:
 785:quantum/quantum.c ****             unregister_code(keycode);
 902              		.loc 1 785 0
 903 0014 2046     		mov	r0, r4
 904              	.LVL67:
 905 0016 FFF7FEFF 		bl	register_code
 906              	.LVL68:
 786:quantum/quantum.c ****         } else if (ascii_code == SS_DOWN_CODE) {
 907              		.loc 1 786 0
 908 001a 2046     		mov	r0, r4
 909              	.LVL69:
 910              	.L87:
 911              	.LBE11:
 912              	.LBB12:
 794:quantum/quantum.c ****         } else {
 913              		.loc 1 794 0
 914 001c FFF7FEFF 		bl	unregister_code
 915              	.LVL70:
 916              	.LBE12:
 917 0020 04E0     		b	.L81
 918              	.LVL71:
 919              	.L80:
 787:quantum/quantum.c ****             // down
 920              		.loc 1 787 0
 921 0022 0228     		cmp	r0, #2
 922 0024 0CD1     		bne	.L82
 923              	.LVL72:
 924              	.LBB13:
 790:quantum/quantum.c ****         } else if (ascii_code == SS_UP_CODE) {
 925              		.loc 1 790 0
 926 0026 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 927              	.LVL73:
 928 0028 FFF7FEFF 		bl	register_code
 929              	.LVL74:
 930              	.L81:
 931              	.LBE13:
 798:quantum/quantum.c ****         // interval
 932              		.loc 1 798 0
 933 002c 6C1C     		adds	r4, r5, #1
 934              	.LVL75:
 935              	.LBB14:
 801:quantum/quantum.c ****             while (ms--) wait_ms(1);
 936              		.loc 1 801 0
 937 002e 3546     		mov	r5, r6
 938              	.L84:
 939              	.LVL76:
 802:quantum/quantum.c ****         }
 940              		.loc 1 802 0 discriminator 4
 941 0030 013D     		subs	r5, r5, #1
 942              	.LVL77:
 943 0032 EDB2     		uxtb	r5, r5
 944              	.LVL78:
 945 0034 FF2D     		cmp	r5, #255
 946 0036 E6D0     		beq	.L86
 802:quantum/quantum.c ****         }
 947              		.loc 1 802 0 is_stmt 0 discriminator 1
 948 0038 6420     		movs	r0, #100
 949 003a FFF7FEFF 		bl	chThdSleep
 950              	.LVL79:
 951 003e F7E7     		b	.L84
 952              	.LVL80:
 953              	.L82:
 954              	.LBE14:
 791:quantum/quantum.c ****             // up
 955              		.loc 1 791 0 is_stmt 1
 956 0040 0328     		cmp	r0, #3
 957 0042 01D1     		bne	.L83
 958              	.LVL81:
 959              	.LBB15:
 794:quantum/quantum.c ****         } else {
 960              		.loc 1 794 0
 961 0044 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 962              	.LVL82:
 963 0046 E9E7     		b	.L87
 964              	.LVL83:
 965              	.L83:
 966              	.LBE15:
 796:quantum/quantum.c ****         }
 967              		.loc 1 796 0
 968 0048 FFF7FEFF 		bl	send_char
 969              	.LVL84:
 970 004c 2546     		mov	r5, r4
 971 004e EDE7     		b	.L81
 972              	.LVL85:
 973              	.L78:
 974              	.LBE10:
 805:quantum/quantum.c **** 
 975              		.loc 1 805 0
 976 0050 70BD     		pop	{r4, r5, r6, pc}
 977              		.cfi_endproc
 978              	.LFE315:
 980              		.section	.text.send_string,"ax",%progbits
 981              		.align	1
 982              		.global	send_string
 983              		.syntax unified
 984              		.thumb
 985              		.thumb_func
 986              		.fpu softvfp
 988              	send_string:
 989              	.LFB313:
 774:quantum/quantum.c **** 
 990              		.loc 1 774 0
 991              		.cfi_startproc
 992              		@ args = 0, pretend = 0, frame = 0
 993              		@ frame_needed = 0, uses_anonymous_args = 0
 994              		@ link register save eliminated.
 995              	.LVL86:
 774:quantum/quantum.c **** 
 996              		.loc 1 774 0
 997 0000 0021     		movs	r1, #0
 998 0002 FFF7FEBF 		b	send_string_with_delay
 999              	.LVL87:
 1000              		.cfi_endproc
 1001              	.LFE313:
 1003              		.section	.text.send_string_P,"ax",%progbits
 1004              		.align	1
 1005              		.global	send_string_P
 1006              		.syntax unified
 1007              		.thumb
 1008              		.thumb_func
 1009              		.fpu softvfp
 1011              	send_string_P:
 1012              	.LFB370:
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 0
 1015              		@ frame_needed = 0, uses_anonymous_args = 0
 1016              		@ link register save eliminated.
 1017 0000 FFF7FEBF 		b	send_string
 1018              		.cfi_endproc
 1019              	.LFE370:
 1021              		.section	.text.send_string_with_delay_P,"ax",%progbits
 1022              		.align	1
 1023              		.global	send_string_with_delay_P
 1024              		.syntax unified
 1025              		.thumb
 1026              		.thumb_func
 1027              		.fpu softvfp
 1029              	send_string_with_delay_P:
 1030              	.LFB372:
 1031              		.cfi_startproc
 1032              		@ args = 0, pretend = 0, frame = 0
 1033              		@ frame_needed = 0, uses_anonymous_args = 0
 1034              		@ link register save eliminated.
 1035 0000 FFF7FEBF 		b	send_string_with_delay
 1036              		.cfi_endproc
 1037              	.LFE372:
 1039              		.section	.text.set_single_persistent_default_layer,"ax",%progbits
 1040              		.align	1
 1041              		.global	set_single_persistent_default_layer
 1042              		.syntax unified
 1043              		.thumb
 1044              		.thumb_func
 1045              		.fpu softvfp
 1047              	set_single_persistent_default_layer:
 1048              	.LFB318:
 855:quantum/quantum.c **** 
 856:quantum/quantum.c **** void set_single_persistent_default_layer(uint8_t default_layer) {
 1049              		.loc 1 856 0
 1050              		.cfi_startproc
 1051              		@ args = 0, pretend = 0, frame = 0
 1052              		@ frame_needed = 0, uses_anonymous_args = 0
 1053              	.LVL88:
 1054              		.loc 1 856 0
 1055 0000 38B5     		push	{r3, r4, r5, lr}
 1056              		.cfi_def_cfa_offset 16
 1057              		.cfi_offset 3, -16
 1058              		.cfi_offset 4, -12
 1059              		.cfi_offset 5, -8
 1060              		.cfi_offset 14, -4
 1061              		.loc 1 856 0
 1062 0002 0546     		mov	r5, r0
 857:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && defined(DEFAULT_LAYER_SONGS)
 858:quantum/quantum.c ****     PLAY_SONG(default_layer_songs[default_layer]);
 1063              		.loc 1 858 0
 1064 0004 0848     		ldr	r0, .L92
 1065              	.LVL89:
 859:quantum/quantum.c **** #endif
 860:quantum/quantum.c ****     eeconfig_update_default_layer(1U << default_layer);
 1066              		.loc 1 860 0
 1067 0006 0124     		movs	r4, #1
 858:quantum/quantum.c **** #endif
 1068              		.loc 1 858 0
 1069 0008 00EBC510 		add	r0, r0, r5, lsl #7
 1070              		.loc 1 860 0
 1071 000c AC40     		lsls	r4, r4, r5
 858:quantum/quantum.c **** #endif
 1072              		.loc 1 858 0
 1073 000e 0022     		movs	r2, #0
 1074 0010 1021     		movs	r1, #16
 1075 0012 FFF7FEFF 		bl	play_notes
 1076              	.LVL90:
 1077              		.loc 1 860 0
 1078 0016 E0B2     		uxtb	r0, r4
 1079 0018 FFF7FEFF 		bl	eeconfig_update_default_layer
 1080              	.LVL91:
 861:quantum/quantum.c ****     default_layer_set(1U << default_layer);
 1081              		.loc 1 861 0
 1082 001c 2046     		mov	r0, r4
 862:quantum/quantum.c **** }
 1083              		.loc 1 862 0
 1084 001e BDE83840 		pop	{r3, r4, r5, lr}
 1085              		.cfi_restore 14
 1086              		.cfi_restore 5
 1087              		.cfi_restore 4
 1088              		.cfi_restore 3
 1089              		.cfi_def_cfa_offset 0
 861:quantum/quantum.c ****     default_layer_set(1U << default_layer);
 1090              		.loc 1 861 0
 1091 0022 FFF7FEBF 		b	default_layer_set
 1092              	.LVL92:
 1093              	.L93:
 1094 0026 00BF     		.align	2
 1095              	.L92:
 1096 0028 00000000 		.word	.LANCHOR0
 1097              		.cfi_endproc
 1098              	.LFE318:
 1100              		.section	.text.update_tri_layer_state,"ax",%progbits
 1101              		.align	1
 1102              		.global	update_tri_layer_state
 1103              		.syntax unified
 1104              		.thumb
 1105              		.thumb_func
 1106              		.fpu softvfp
 1108              	update_tri_layer_state:
 1109              	.LFB319:
 863:quantum/quantum.c **** 
 864:quantum/quantum.c **** layer_state_t update_tri_layer_state(layer_state_t state, uint8_t layer1, uint8_t layer2, uint8_t l
 1110              		.loc 1 864 0
 1111              		.cfi_startproc
 1112              		@ args = 0, pretend = 0, frame = 0
 1113              		@ frame_needed = 0, uses_anonymous_args = 0
 1114              	.LVL93:
 1115 0000 10B5     		push	{r4, lr}
 1116              		.cfi_def_cfa_offset 8
 1117              		.cfi_offset 4, -8
 1118              		.cfi_offset 14, -4
 865:quantum/quantum.c ****     layer_state_t mask12 = (1UL << layer1) | (1UL << layer2);
 1119              		.loc 1 865 0
 1120 0002 0124     		movs	r4, #1
 1121 0004 04FA02F2 		lsl	r2, r4, r2
 1122              	.LVL94:
 1123 0008 04FA01F1 		lsl	r1, r4, r1
 1124              	.LVL95:
 1125 000c 1143     		orrs	r1, r1, r2
 1126              	.LVL96:
 866:quantum/quantum.c ****     layer_state_t mask3  = 1UL << layer3;
 1127              		.loc 1 866 0
 1128 000e 04FA03F3 		lsl	r3, r4, r3
 1129              	.LVL97:
 867:quantum/quantum.c ****     return (state & mask12) == mask12 ? (state | mask3) : (state & ~mask3);
 1130              		.loc 1 867 0
 1131 0012 31EA0002 		bics	r2, r1, r0
 1132 0016 0CBF     		ite	eq
 1133 0018 1843     		orreq	r0, r0, r3
 1134              	.LVL98:
 1135 001a 9843     		bicne	r0, r0, r3
 868:quantum/quantum.c **** }
 1136              		.loc 1 868 0
 1137 001c 10BD     		pop	{r4, pc}
 1138              		.cfi_endproc
 1139              	.LFE319:
 1141              		.section	.text.update_tri_layer,"ax",%progbits
 1142              		.align	1
 1143              		.global	update_tri_layer
 1144              		.syntax unified
 1145              		.thumb
 1146              		.thumb_func
 1147              		.fpu softvfp
 1149              	update_tri_layer:
 1150              	.LFB320:
 869:quantum/quantum.c **** 
 870:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) { layer_state_set(update_tri_
 1151              		.loc 1 870 0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 0
 1154              		@ frame_needed = 0, uses_anonymous_args = 0
 1155              	.LVL99:
 1156 0000 08B5     		push	{r3, lr}
 1157              		.cfi_def_cfa_offset 8
 1158              		.cfi_offset 3, -8
 1159              		.cfi_offset 14, -4
 1160              		.loc 1 870 0
 1161 0002 1346     		mov	r3, r2
 1162 0004 0A46     		mov	r2, r1
 1163              	.LVL100:
 1164 0006 0146     		mov	r1, r0
 1165              	.LVL101:
 1166 0008 0348     		ldr	r0, .L98
 1167              	.LVL102:
 1168 000a 0068     		ldr	r0, [r0]
 1169 000c FFF7FEFF 		bl	update_tri_layer_state
 1170              	.LVL103:
 1171 0010 BDE80840 		pop	{r3, lr}
 1172              		.cfi_restore 14
 1173              		.cfi_restore 3
 1174              		.cfi_def_cfa_offset 0
 1175 0014 FFF7FEBF 		b	layer_state_set
 1176              	.LVL104:
 1177              	.L99:
 1178              		.align	2
 1179              	.L98:
 1180 0018 00000000 		.word	layer_state
 1181              		.cfi_endproc
 1182              	.LFE320:
 1184              		.section	.text.tap_random_base64,"ax",%progbits
 1185              		.align	1
 1186              		.global	tap_random_base64
 1187              		.syntax unified
 1188              		.thumb
 1189              		.thumb_func
 1190              		.fpu softvfp
 1192              	tap_random_base64:
 1193              	.LFB321:
 871:quantum/quantum.c **** 
 872:quantum/quantum.c **** void tap_random_base64(void) {
 1194              		.loc 1 872 0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 0
 1197              		@ frame_needed = 0, uses_anonymous_args = 0
 1198 0000 10B5     		push	{r4, lr}
 1199              		.cfi_def_cfa_offset 8
 1200              		.cfi_offset 4, -8
 1201              		.cfi_offset 14, -4
 873:quantum/quantum.c **** #if defined(__AVR_ATmega32U4__)
 874:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 875:quantum/quantum.c **** #else
 876:quantum/quantum.c ****     uint8_t key = rand() % 64;
 1202              		.loc 1 876 0
 1203 0002 FFF7FEFF 		bl	rand
 1204              	.LVL105:
 1205 0006 4342     		rsbs	r3, r0, #0
 1206 0008 03F03F03 		and	r3, r3, #63
 1207 000c 00F03F04 		and	r4, r0, #63
 1208 0010 58BF     		it	pl
 1209 0012 5C42     		rsbpl	r4, r3, #0
 1210 0014 E4B2     		uxtb	r4, r4
 1211              	.LVL106:
 877:quantum/quantum.c **** #endif
 878:quantum/quantum.c ****     switch (key) {
 1212              		.loc 1 878 0
 1213 0016 342C     		cmp	r4, #52
 1214 0018 1CD0     		beq	.L102
 1215 001a 0EDC     		bgt	.L103
 1216 001c 192C     		cmp	r4, #25
 1217 001e 12DC     		bgt	.L109
 879:quantum/quantum.c ****         case 0 ... 25:
 880:quantum/quantum.c ****             register_code(KC_LSFT);
 881:quantum/quantum.c ****             register_code(key + KC_A);
 1218              		.loc 1 881 0
 1219 0020 0434     		adds	r4, r4, #4
 1220              	.LVL107:
 880:quantum/quantum.c ****             register_code(key + KC_A);
 1221              		.loc 1 880 0
 1222 0022 E120     		movs	r0, #225
 1223              		.loc 1 881 0
 1224 0024 E4B2     		uxtb	r4, r4
 1225              	.LVL108:
 880:quantum/quantum.c ****             register_code(key + KC_A);
 1226              		.loc 1 880 0
 1227 0026 FFF7FEFF 		bl	register_code
 1228              	.LVL109:
 1229              		.loc 1 881 0
 1230 002a 2046     		mov	r0, r4
 1231 002c FFF7FEFF 		bl	register_code
 1232              	.LVL110:
 882:quantum/quantum.c ****             unregister_code(key + KC_A);
 1233              		.loc 1 882 0
 1234 0030 2046     		mov	r0, r4
 1235              	.L112:
 883:quantum/quantum.c ****             unregister_code(KC_LSFT);
 884:quantum/quantum.c ****             break;
 885:quantum/quantum.c ****         case 26 ... 51:
 886:quantum/quantum.c ****             register_code(key - 26 + KC_A);
 887:quantum/quantum.c ****             unregister_code(key - 26 + KC_A);
 888:quantum/quantum.c ****             break;
 889:quantum/quantum.c ****         case 52:
 890:quantum/quantum.c ****             register_code(KC_0);
 891:quantum/quantum.c ****             unregister_code(KC_0);
 892:quantum/quantum.c ****             break;
 893:quantum/quantum.c ****         case 53 ... 61:
 894:quantum/quantum.c ****             register_code(key - 53 + KC_1);
 895:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 896:quantum/quantum.c ****             break;
 897:quantum/quantum.c ****         case 62:
 898:quantum/quantum.c ****             register_code(KC_LSFT);
 899:quantum/quantum.c ****             register_code(KC_EQL);
 900:quantum/quantum.c ****             unregister_code(KC_EQL);
 1236              		.loc 1 900 0
 1237 0032 FFF7FEFF 		bl	unregister_code
 1238              	.LVL111:
 901:quantum/quantum.c ****             unregister_code(KC_LSFT);
 1239              		.loc 1 901 0
 1240 0036 E120     		movs	r0, #225
 1241 0038 10E0     		b	.L111
 1242              	.LVL112:
 1243              	.L103:
 878:quantum/quantum.c ****         case 0 ... 25:
 1244              		.loc 1 878 0
 1245 003a 3E2C     		cmp	r4, #62
 1246 003c 14D0     		beq	.L106
 1247 003e 11DB     		blt	.L107
 1248 0040 3F2C     		cmp	r4, #63
 1249 0042 19D0     		beq	.L108
 902:quantum/quantum.c ****             break;
 903:quantum/quantum.c ****         case 63:
 904:quantum/quantum.c ****             register_code(KC_SLSH);
 905:quantum/quantum.c ****             unregister_code(KC_SLSH);
 906:quantum/quantum.c ****             break;
 907:quantum/quantum.c ****     }
 908:quantum/quantum.c **** }
 1250              		.loc 1 908 0
 1251 0044 10BD     		pop	{r4, pc}
 1252              	.LVL113:
 1253              	.L109:
 886:quantum/quantum.c ****             unregister_code(key - 26 + KC_A);
 1254              		.loc 1 886 0
 1255 0046 163C     		subs	r4, r4, #22
 1256              	.LVL114:
 1257              	.L113:
 894:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 1258              		.loc 1 894 0
 1259 0048 E4B2     		uxtb	r4, r4
 1260 004a 2046     		mov	r0, r4
 1261              	.LVL115:
 1262 004c FFF7FEFF 		bl	register_code
 1263              	.LVL116:
 895:quantum/quantum.c ****             break;
 1264              		.loc 1 895 0
 1265 0050 2046     		mov	r0, r4
 1266 0052 03E0     		b	.L111
 1267              	.LVL117:
 1268              	.L102:
 890:quantum/quantum.c ****             unregister_code(KC_0);
 1269              		.loc 1 890 0
 1270 0054 2720     		movs	r0, #39
 1271 0056 FFF7FEFF 		bl	register_code
 1272              	.LVL118:
 891:quantum/quantum.c ****             break;
 1273              		.loc 1 891 0
 1274 005a 2720     		movs	r0, #39
 1275              	.LVL119:
 1276              	.L111:
 1277              		.loc 1 908 0
 1278 005c BDE81040 		pop	{r4, lr}
 1279              		.cfi_remember_state
 1280              		.cfi_restore 14
 1281              		.cfi_restore 4
 1282              		.cfi_def_cfa_offset 0
 905:quantum/quantum.c ****             break;
 1283              		.loc 1 905 0
 1284 0060 FFF7FEBF 		b	unregister_code
 1285              	.LVL120:
 1286              	.L107:
 1287              		.cfi_restore_state
 894:quantum/quantum.c ****             unregister_code(key - 53 + KC_1);
 1288              		.loc 1 894 0
 1289 0064 173C     		subs	r4, r4, #23
 1290              	.LVL121:
 1291 0066 EFE7     		b	.L113
 1292              	.LVL122:
 1293              	.L106:
 898:quantum/quantum.c ****             register_code(KC_EQL);
 1294              		.loc 1 898 0
 1295 0068 E120     		movs	r0, #225
 1296 006a FFF7FEFF 		bl	register_code
 1297              	.LVL123:
 899:quantum/quantum.c ****             unregister_code(KC_EQL);
 1298              		.loc 1 899 0
 1299 006e 2E20     		movs	r0, #46
 1300 0070 FFF7FEFF 		bl	register_code
 1301              	.LVL124:
 900:quantum/quantum.c ****             unregister_code(KC_LSFT);
 1302              		.loc 1 900 0
 1303 0074 2E20     		movs	r0, #46
 1304 0076 DCE7     		b	.L112
 1305              	.L108:
 904:quantum/quantum.c ****             unregister_code(KC_SLSH);
 1306              		.loc 1 904 0
 1307 0078 3820     		movs	r0, #56
 1308 007a FFF7FEFF 		bl	register_code
 1309              	.LVL125:
 905:quantum/quantum.c ****             break;
 1310              		.loc 1 905 0
 1311 007e 3820     		movs	r0, #56
 1312 0080 ECE7     		b	.L111
 1313              		.cfi_endproc
 1314              	.LFE321:
 1316              		.section	.text.bootmagic_lite,"ax",%progbits
 1317              		.align	1
 1318              		.weak	bootmagic_lite
 1319              		.syntax unified
 1320              		.thumb
 1321              		.thumb_func
 1322              		.fpu softvfp
 1324              	bootmagic_lite:
 1325              	.LFB322:
 909:quantum/quantum.c **** 
 910:quantum/quantum.c **** __attribute__((weak)) void bootmagic_lite(void) {
 1326              		.loc 1 910 0
 1327              		.cfi_startproc
 1328              		@ args = 0, pretend = 0, frame = 0
 1329              		@ frame_needed = 0, uses_anonymous_args = 0
 1330 0000 08B5     		push	{r3, lr}
 1331              		.cfi_def_cfa_offset 8
 1332              		.cfi_offset 3, -8
 1333              		.cfi_offset 14, -4
 911:quantum/quantum.c ****     // The lite version of TMK's bootmagic based on Wilba.
 912:quantum/quantum.c ****     // 100% less potential for accidentally making the
 913:quantum/quantum.c ****     // keyboard do stupid things.
 914:quantum/quantum.c **** 
 915:quantum/quantum.c ****     // We need multiple scans because debouncing can't be turned off.
 916:quantum/quantum.c ****     matrix_scan();
 1334              		.loc 1 916 0
 1335 0002 FFF7FEFF 		bl	matrix_scan
 1336              	.LVL126:
 917:quantum/quantum.c **** #if defined(DEBOUNCING_DELAY) && DEBOUNCING_DELAY > 0
 918:quantum/quantum.c ****     wait_ms(DEBOUNCING_DELAY * 2);
 919:quantum/quantum.c **** #elif defined(DEBOUNCE) && DEBOUNCE > 0
 920:quantum/quantum.c ****     wait_ms(DEBOUNCE * 2);
 1337              		.loc 1 920 0
 1338 0006 4FF47A70 		mov	r0, #1000
 1339 000a FFF7FEFF 		bl	chThdSleep
 1340              	.LVL127:
 921:quantum/quantum.c **** #else
 922:quantum/quantum.c ****     wait_ms(30);
 923:quantum/quantum.c **** #endif
 924:quantum/quantum.c ****     matrix_scan();
 1341              		.loc 1 924 0
 1342 000e FFF7FEFF 		bl	matrix_scan
 1343              	.LVL128:
 925:quantum/quantum.c **** 
 926:quantum/quantum.c ****     // If the Esc and space bar are held down on power up,
 927:quantum/quantum.c ****     // reset the EEPROM valid state and jump to bootloader.
 928:quantum/quantum.c ****     // Assumes Esc is at [0,0].
 929:quantum/quantum.c ****     // This isn't very generalized, but we need something that doesn't
 930:quantum/quantum.c ****     // rely on user's keymaps in firmware or EEPROM.
 931:quantum/quantum.c ****     if (matrix_get_row(BOOTMAGIC_LITE_ROW) & (1 << BOOTMAGIC_LITE_COLUMN)) {
 1344              		.loc 1 931 0
 1345 0012 0020     		movs	r0, #0
 1346 0014 FFF7FEFF 		bl	matrix_get_row
 1347              	.LVL129:
 1348 0018 C307     		lsls	r3, r0, #31
 1349 001a 05D5     		bpl	.L114
 932:quantum/quantum.c ****         eeconfig_disable();
 1350              		.loc 1 932 0
 1351 001c FFF7FEFF 		bl	eeconfig_disable
 1352              	.LVL130:
 933:quantum/quantum.c ****         // Jump to bootloader.
 934:quantum/quantum.c ****         bootloader_jump();
 935:quantum/quantum.c ****     }
 936:quantum/quantum.c **** }
 1353              		.loc 1 936 0
 1354 0020 BDE80840 		pop	{r3, lr}
 1355              		.cfi_remember_state
 1356              		.cfi_restore 14
 1357              		.cfi_restore 3
 1358              		.cfi_def_cfa_offset 0
 934:quantum/quantum.c ****     }
 1359              		.loc 1 934 0
 1360 0024 FFF7FEBF 		b	bootloader_jump
 1361              	.LVL131:
 1362              	.L114:
 1363              		.cfi_restore_state
 1364              		.loc 1 936 0
 1365 0028 08BD     		pop	{r3, pc}
 1366              		.cfi_endproc
 1367              	.LFE322:
 1369              		.section	.text.matrix_init_quantum,"ax",%progbits
 1370              		.align	1
 1371              		.global	matrix_init_quantum
 1372              		.syntax unified
 1373              		.thumb
 1374              		.thumb_func
 1375              		.fpu softvfp
 1377              	matrix_init_quantum:
 1378              	.LFB323:
 937:quantum/quantum.c **** 
 938:quantum/quantum.c **** void matrix_init_quantum() {
 1379              		.loc 1 938 0
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 0
 1382              		@ frame_needed = 0, uses_anonymous_args = 0
 1383 0000 08B5     		push	{r3, lr}
 1384              		.cfi_def_cfa_offset 8
 1385              		.cfi_offset 3, -8
 1386              		.cfi_offset 14, -4
 939:quantum/quantum.c **** #ifdef BOOTMAGIC_LITE
 940:quantum/quantum.c ****     bootmagic_lite();
 941:quantum/quantum.c **** #endif
 942:quantum/quantum.c ****     if (!eeconfig_is_enabled()) {
 1387              		.loc 1 942 0
 1388 0002 FFF7FEFF 		bl	eeconfig_is_enabled
 1389              	.LVL132:
 1390 0006 08B9     		cbnz	r0, .L117
 943:quantum/quantum.c ****         eeconfig_init();
 1391              		.loc 1 943 0
 1392 0008 FFF7FEFF 		bl	eeconfig_init
 1393              	.LVL133:
 1394              	.L117:
 944:quantum/quantum.c ****     }
 945:quantum/quantum.c **** #ifdef BACKLIGHT_ENABLE
 946:quantum/quantum.c **** #    ifdef LED_MATRIX_ENABLE
 947:quantum/quantum.c ****     led_matrix_init();
 948:quantum/quantum.c **** #    else
 949:quantum/quantum.c ****     backlight_init_ports();
 950:quantum/quantum.c **** #    endif
 951:quantum/quantum.c **** #endif
 952:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 953:quantum/quantum.c ****     audio_init();
 1395              		.loc 1 953 0
 1396 000c FFF7FEFF 		bl	audio_init
 1397              	.LVL134:
 954:quantum/quantum.c **** #endif
 955:quantum/quantum.c **** #ifdef RGB_MATRIX_ENABLE
 956:quantum/quantum.c ****     rgb_matrix_init();
 957:quantum/quantum.c **** #endif
 958:quantum/quantum.c **** #ifdef ENCODER_ENABLE
 959:quantum/quantum.c ****     encoder_init();
 1398              		.loc 1 959 0
 1399 0010 FFF7FEFF 		bl	encoder_init
 1400              	.LVL135:
 960:quantum/quantum.c **** #endif
 961:quantum/quantum.c **** #if defined(UNICODE_ENABLE) || defined(UNICODEMAP_ENABLE) || defined(UCIS_ENABLE)
 962:quantum/quantum.c ****     unicode_input_mode_init();
 963:quantum/quantum.c **** #endif
 964:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
 965:quantum/quantum.c ****     haptic_init();
 966:quantum/quantum.c **** #endif
 967:quantum/quantum.c **** #ifdef OUTPUT_AUTO_ENABLE
 968:quantum/quantum.c ****     set_output(OUTPUT_AUTO);
 969:quantum/quantum.c **** #endif
 970:quantum/quantum.c **** #ifdef DIP_SWITCH_ENABLE
 971:quantum/quantum.c ****     dip_switch_init();
 1401              		.loc 1 971 0
 1402 0014 FFF7FEFF 		bl	dip_switch_init
 1403              	.LVL136:
 972:quantum/quantum.c **** #endif
 973:quantum/quantum.c **** 
 974:quantum/quantum.c ****     matrix_init_kb();
 975:quantum/quantum.c **** }
 1404              		.loc 1 975 0
 1405 0018 BDE80840 		pop	{r3, lr}
 1406              		.cfi_restore 14
 1407              		.cfi_restore 3
 1408              		.cfi_def_cfa_offset 0
 974:quantum/quantum.c **** }
 1409              		.loc 1 974 0
 1410 001c FFF7FEBF 		b	matrix_init_kb
 1411              	.LVL137:
 1412              		.cfi_endproc
 1413              	.LFE323:
 1415              		.section	.text.matrix_scan_quantum,"ax",%progbits
 1416              		.align	1
 1417              		.global	matrix_scan_quantum
 1418              		.syntax unified
 1419              		.thumb
 1420              		.thumb_func
 1421              		.fpu softvfp
 1423              	matrix_scan_quantum:
 1424              	.LFB324:
 976:quantum/quantum.c **** 
 977:quantum/quantum.c **** void matrix_scan_quantum() {
 1425              		.loc 1 977 0
 1426              		.cfi_startproc
 1427              		@ args = 0, pretend = 0, frame = 0
 1428              		@ frame_needed = 0, uses_anonymous_args = 0
 1429 0000 08B5     		push	{r3, lr}
 1430              		.cfi_def_cfa_offset 8
 1431              		.cfi_offset 3, -8
 1432              		.cfi_offset 14, -4
 978:quantum/quantum.c **** #if defined(AUDIO_ENABLE) && !defined(NO_MUSIC_MODE)
 979:quantum/quantum.c ****     matrix_scan_music();
 1433              		.loc 1 979 0
 1434 0002 FFF7FEFF 		bl	matrix_scan_music
 1435              	.LVL138:
 980:quantum/quantum.c **** #endif
 981:quantum/quantum.c **** 
 982:quantum/quantum.c **** #ifdef TAP_DANCE_ENABLE
 983:quantum/quantum.c ****     matrix_scan_tap_dance();
 984:quantum/quantum.c **** #endif
 985:quantum/quantum.c **** 
 986:quantum/quantum.c **** #ifdef COMBO_ENABLE
 987:quantum/quantum.c ****     matrix_scan_combo();
 988:quantum/quantum.c **** #endif
 989:quantum/quantum.c **** 
 990:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE)
 991:quantum/quantum.c **** #    if defined(LED_MATRIX_ENABLE)
 992:quantum/quantum.c ****     led_matrix_task();
 993:quantum/quantum.c **** #    elif defined(BACKLIGHT_PIN)
 994:quantum/quantum.c ****     backlight_task();
 995:quantum/quantum.c **** #    endif
 996:quantum/quantum.c **** #endif
 997:quantum/quantum.c **** 
 998:quantum/quantum.c **** #ifdef RGB_MATRIX_ENABLE
 999:quantum/quantum.c ****     rgb_matrix_task();
1000:quantum/quantum.c **** #endif
1001:quantum/quantum.c **** 
1002:quantum/quantum.c **** #ifdef ENCODER_ENABLE
1003:quantum/quantum.c ****     encoder_read();
 1436              		.loc 1 1003 0
 1437 0006 FFF7FEFF 		bl	encoder_read
 1438              	.LVL139:
1004:quantum/quantum.c **** #endif
1005:quantum/quantum.c **** 
1006:quantum/quantum.c **** #ifdef HAPTIC_ENABLE
1007:quantum/quantum.c ****     haptic_task();
1008:quantum/quantum.c **** #endif
1009:quantum/quantum.c **** 
1010:quantum/quantum.c **** #ifdef DIP_SWITCH_ENABLE
1011:quantum/quantum.c ****     dip_switch_read(false);
 1439              		.loc 1 1011 0
 1440 000a 0020     		movs	r0, #0
 1441 000c FFF7FEFF 		bl	dip_switch_read
 1442              	.LVL140:
1012:quantum/quantum.c **** #endif
1013:quantum/quantum.c **** 
1014:quantum/quantum.c ****     matrix_scan_kb();
1015:quantum/quantum.c **** }
 1443              		.loc 1 1015 0
 1444 0010 BDE80840 		pop	{r3, lr}
 1445              		.cfi_restore 14
 1446              		.cfi_restore 3
 1447              		.cfi_def_cfa_offset 0
1014:quantum/quantum.c **** }
 1448              		.loc 1 1014 0
 1449 0014 FFF7FEBF 		b	matrix_scan_kb
 1450              	.LVL141:
 1451              		.cfi_endproc
 1452              	.LFE324:
 1454              		.section	.text.backlight_init_ports,"ax",%progbits
 1455              		.align	1
 1456              		.weak	backlight_init_ports
 1457              		.syntax unified
 1458              		.thumb
 1459              		.thumb_func
 1460              		.fpu softvfp
 1462              	backlight_init_ports:
 1463              	.LFB368:
 1464              		.cfi_startproc
 1465              		@ args = 0, pretend = 0, frame = 0
 1466              		@ frame_needed = 0, uses_anonymous_args = 0
 1467              		@ link register save eliminated.
 1468 0000 7047     		bx	lr
 1469              		.cfi_endproc
 1470              	.LFE368:
 1472              		.section	.text.backlight_set,"ax",%progbits
 1473              		.align	1
 1474              		.weak	backlight_set
 1475              		.syntax unified
 1476              		.thumb
 1477              		.thumb_func
 1478              		.fpu softvfp
 1480              	backlight_set:
 1481              	.LFB374:
 1482              		.cfi_startproc
 1483              		@ args = 0, pretend = 0, frame = 0
 1484              		@ frame_needed = 0, uses_anonymous_args = 0
 1485              		@ link register save eliminated.
 1486 0000 7047     		bx	lr
 1487              		.cfi_endproc
 1488              	.LFE374:
 1490              		.section	.text.send_nibble,"ax",%progbits
 1491              		.align	1
 1492              		.global	send_nibble
 1493              		.syntax unified
 1494              		.thumb
 1495              		.thumb_func
 1496              		.fpu softvfp
 1498              	send_nibble:
 1499              	.LFB330:
1016:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && (defined(BACKLIGHT_PIN) || defined(BACKLIGHT_PINS))
1017:quantum/quantum.c **** 
1018:quantum/quantum.c **** // This logic is a bit complex, we support 3 setups:
1019:quantum/quantum.c **** //
1020:quantum/quantum.c **** //   1. Hardware PWM when backlight is wired to a PWM pin.
1021:quantum/quantum.c **** //      Depending on this pin, we use a different output compare unit.
1022:quantum/quantum.c **** //   2. Software PWM with hardware timers, but the used timer
1023:quantum/quantum.c **** //      depends on the Audio setup (Audio wins over Backlight).
1024:quantum/quantum.c **** //   3. Full software PWM, driven by the matrix scan, if both timers are used by Audio.
1025:quantum/quantum.c **** 
1026:quantum/quantum.c **** #    if (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_AT90USB1286__)
1027:quantum/quantum.c **** #        define HARDWARE_PWM
1028:quantum/quantum.c **** #        define ICRx ICR1
1029:quantum/quantum.c **** #        define TCCRxA TCCR1A
1030:quantum/quantum.c **** #        define TCCRxB TCCR1B
1031:quantum/quantum.c **** #        define TIMERx_OVF_vect TIMER1_OVF_vect
1032:quantum/quantum.c **** #        define TIMSKx TIMSK1
1033:quantum/quantum.c **** #        define TOIEx TOIE1
1034:quantum/quantum.c **** 
1035:quantum/quantum.c **** #        if BACKLIGHT_PIN == B5
1036:quantum/quantum.c **** #            define COMxx1 COM1A1
1037:quantum/quantum.c **** #            define OCRxx OCR1A
1038:quantum/quantum.c **** #        elif BACKLIGHT_PIN == B6
1039:quantum/quantum.c **** #            define COMxx1 COM1B1
1040:quantum/quantum.c **** #            define OCRxx OCR1B
1041:quantum/quantum.c **** #        elif BACKLIGHT_PIN == B7
1042:quantum/quantum.c **** #            define COMxx1 COM1C1
1043:quantum/quantum.c **** #            define OCRxx OCR1C
1044:quantum/quantum.c **** #        endif
1045:quantum/quantum.c **** #    elif (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_AT90USB1286_
1046:quantum/quantum.c **** #        define HARDWARE_PWM
1047:quantum/quantum.c **** #        define ICRx ICR3
1048:quantum/quantum.c **** #        define TCCRxA TCCR3A
1049:quantum/quantum.c **** #        define TCCRxB TCCR3B
1050:quantum/quantum.c **** #        define TIMERx_OVF_vect TIMER3_OVF_vect
1051:quantum/quantum.c **** #        define TIMSKx TIMSK3
1052:quantum/quantum.c **** #        define TOIEx TOIE3
1053:quantum/quantum.c **** 
1054:quantum/quantum.c **** #        if BACKLIGHT_PIN == C4
1055:quantum/quantum.c **** #            if (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
1056:quantum/quantum.c **** #                error This MCU has no C4 pin!
1057:quantum/quantum.c **** #            else
1058:quantum/quantum.c **** #                define COMxx1 COM3C1
1059:quantum/quantum.c **** #                define OCRxx OCR3C
1060:quantum/quantum.c **** #            endif
1061:quantum/quantum.c **** #        elif BACKLIGHT_PIN == C5
1062:quantum/quantum.c **** #            if (defined(__AVR_ATmega16U4__) || defined(__AVR_ATmega32U4__))
1063:quantum/quantum.c **** #                error This MCU has no C5 pin!
1064:quantum/quantum.c **** #            else
1065:quantum/quantum.c **** #                define COMxx1 COM3B1
1066:quantum/quantum.c **** #                define OCRxx OCR3B
1067:quantum/quantum.c **** #            endif
1068:quantum/quantum.c **** #        elif BACKLIGHT_PIN == C6
1069:quantum/quantum.c **** #            define COMxx1 COM3A1
1070:quantum/quantum.c **** #            define OCRxx OCR3A
1071:quantum/quantum.c **** #        endif
1072:quantum/quantum.c **** #    elif (defined(__AVR_ATmega16U2__) || defined(__AVR_ATmega32U2__)) && (BACKLIGHT_PIN == B7 || B
1073:quantum/quantum.c **** #        define HARDWARE_PWM
1074:quantum/quantum.c **** #        define ICRx ICR1
1075:quantum/quantum.c **** #        define TCCRxA TCCR1A
1076:quantum/quantum.c **** #        define TCCRxB TCCR1B
1077:quantum/quantum.c **** #        define TIMERx_OVF_vect TIMER1_OVF_vect
1078:quantum/quantum.c **** #        define TIMSKx TIMSK1
1079:quantum/quantum.c **** #        define TOIEx TOIE1
1080:quantum/quantum.c **** 
1081:quantum/quantum.c **** #        if BACKLIGHT_PIN == B7
1082:quantum/quantum.c **** #            define COMxx1 COM1C1
1083:quantum/quantum.c **** #            define OCRxx OCR1C
1084:quantum/quantum.c **** #        elif BACKLIGHT_PIN == C5
1085:quantum/quantum.c **** #            define COMxx1 COM1B1
1086:quantum/quantum.c **** #            define OCRxx OCR1B
1087:quantum/quantum.c **** #        elif BACKLIGHT_PIN == C6
1088:quantum/quantum.c **** #            define COMxx1 COM1A1
1089:quantum/quantum.c **** #            define OCRxx OCR1A
1090:quantum/quantum.c **** #        endif
1091:quantum/quantum.c **** #    elif defined(__AVR_ATmega32A__) && (BACKLIGHT_PIN == D4 || BACKLIGHT_PIN == D5)
1092:quantum/quantum.c **** #        define HARDWARE_PWM
1093:quantum/quantum.c **** #        define ICRx ICR1
1094:quantum/quantum.c **** #        define TCCRxA TCCR1A
1095:quantum/quantum.c **** #        define TCCRxB TCCR1B
1096:quantum/quantum.c **** #        define TIMERx_OVF_vect TIMER1_OVF_vect
1097:quantum/quantum.c **** #        define TIMSKx TIMSK
1098:quantum/quantum.c **** #        define TOIEx TOIE1
1099:quantum/quantum.c **** 
1100:quantum/quantum.c **** #        if BACKLIGHT_PIN == D4
1101:quantum/quantum.c **** #            define COMxx1 COM1B1
1102:quantum/quantum.c **** #            define OCRxx OCR1B
1103:quantum/quantum.c **** #        elif BACKLIGHT_PIN == D5
1104:quantum/quantum.c **** #            define COMxx1 COM1A1
1105:quantum/quantum.c **** #            define OCRxx OCR1A
1106:quantum/quantum.c **** #        endif
1107:quantum/quantum.c **** #    elif defined(__AVR_ATmega328P__) && (BACKLIGHT_PIN == B1 || BACKLIGHT_PIN == B2)
1108:quantum/quantum.c **** #        define HARDWARE_PWM
1109:quantum/quantum.c **** #        define ICRx ICR1
1110:quantum/quantum.c **** #        define TCCRxA TCCR1A
1111:quantum/quantum.c **** #        define TCCRxB TCCR1B
1112:quantum/quantum.c **** #        define TIMERx_OVF_vect TIMER1_OVF_vect
1113:quantum/quantum.c **** #        define TIMSKx TIMSK1
1114:quantum/quantum.c **** #        define TOIEx TOIE1
1115:quantum/quantum.c **** 
1116:quantum/quantum.c **** #        if BACKLIGHT_PIN == B1
1117:quantum/quantum.c **** #            define COMxx1 COM1A1
1118:quantum/quantum.c **** #            define OCRxx OCR1A
1119:quantum/quantum.c **** #        elif BACKLIGHT_PIN == B2
1120:quantum/quantum.c **** #            define COMxx1 COM1B1
1121:quantum/quantum.c **** #            define OCRxx OCR1B
1122:quantum/quantum.c **** #        endif
1123:quantum/quantum.c **** #    else
1124:quantum/quantum.c **** #        if !defined(BACKLIGHT_CUSTOM_DRIVER)
1125:quantum/quantum.c **** #            if !defined(B5_AUDIO) && !defined(B6_AUDIO) && !defined(B7_AUDIO)
1126:quantum/quantum.c **** // Timer 1 is not in use by Audio feature, Backlight can use it
1127:quantum/quantum.c **** #                pragma message "Using hardware timer 1 with software PWM"
1128:quantum/quantum.c **** #                define HARDWARE_PWM
1129:quantum/quantum.c **** #                define BACKLIGHT_PWM_TIMER
1130:quantum/quantum.c **** #                define ICRx ICR1
1131:quantum/quantum.c **** #                define TCCRxA TCCR1A
1132:quantum/quantum.c **** #                define TCCRxB TCCR1B
1133:quantum/quantum.c **** #                define TIMERx_COMPA_vect TIMER1_COMPA_vect
1134:quantum/quantum.c **** #                define TIMERx_OVF_vect TIMER1_OVF_vect
1135:quantum/quantum.c **** #                if defined(__AVR_ATmega32A__)  // This MCU has only one TIMSK register
1136:quantum/quantum.c **** #                    define TIMSKx TIMSK
1137:quantum/quantum.c **** #                else
1138:quantum/quantum.c **** #                    define TIMSKx TIMSK1
1139:quantum/quantum.c **** #                endif
1140:quantum/quantum.c **** #                define TOIEx TOIE1
1141:quantum/quantum.c **** 
1142:quantum/quantum.c **** #                define OCIExA OCIE1A
1143:quantum/quantum.c **** #                define OCRxx OCR1A
1144:quantum/quantum.c **** #            elif !defined(C6_AUDIO) && !defined(C5_AUDIO) && !defined(C4_AUDIO)
1145:quantum/quantum.c **** #                pragma message "Using hardware timer 3 with software PWM"
1146:quantum/quantum.c **** // Timer 3 is not in use by Audio feature, Backlight can use it
1147:quantum/quantum.c **** #                define HARDWARE_PWM
1148:quantum/quantum.c **** #                define BACKLIGHT_PWM_TIMER
1149:quantum/quantum.c **** #                define ICRx ICR1
1150:quantum/quantum.c **** #                define TCCRxA TCCR3A
1151:quantum/quantum.c **** #                define TCCRxB TCCR3B
1152:quantum/quantum.c **** #                define TIMERx_COMPA_vect TIMER3_COMPA_vect
1153:quantum/quantum.c **** #                define TIMERx_OVF_vect TIMER3_OVF_vect
1154:quantum/quantum.c **** #                define TIMSKx TIMSK3
1155:quantum/quantum.c **** #                define TOIEx TOIE3
1156:quantum/quantum.c **** 
1157:quantum/quantum.c **** #                define OCIExA OCIE3A
1158:quantum/quantum.c **** #                define OCRxx OCR3A
1159:quantum/quantum.c **** #            else
1160:quantum/quantum.c **** #                pragma message "Audio in use - using pure software PWM"
1161:quantum/quantum.c **** #                define NO_HARDWARE_PWM
1162:quantum/quantum.c **** #            endif
1163:quantum/quantum.c **** #        else
1164:quantum/quantum.c **** #            pragma message "Custom driver defined - using pure software PWM"
1165:quantum/quantum.c **** #            define NO_HARDWARE_PWM
1166:quantum/quantum.c **** #        endif
1167:quantum/quantum.c **** #    endif
1168:quantum/quantum.c **** 
1169:quantum/quantum.c **** #    ifndef BACKLIGHT_ON_STATE
1170:quantum/quantum.c **** #        define BACKLIGHT_ON_STATE 0
1171:quantum/quantum.c **** #    endif
1172:quantum/quantum.c **** 
1173:quantum/quantum.c **** void backlight_on(uint8_t backlight_pin) {
1174:quantum/quantum.c **** #    if BACKLIGHT_ON_STATE == 0
1175:quantum/quantum.c ****     writePinLow(backlight_pin);
1176:quantum/quantum.c **** #    else
1177:quantum/quantum.c ****     writePinHigh(backlight_pin);
1178:quantum/quantum.c **** #    endif
1179:quantum/quantum.c **** }
1180:quantum/quantum.c **** 
1181:quantum/quantum.c **** void backlight_off(uint8_t backlight_pin) {
1182:quantum/quantum.c **** #    if BACKLIGHT_ON_STATE == 0
1183:quantum/quantum.c ****     writePinHigh(backlight_pin);
1184:quantum/quantum.c **** #    else
1185:quantum/quantum.c ****     writePinLow(backlight_pin);
1186:quantum/quantum.c **** #    endif
1187:quantum/quantum.c **** }
1188:quantum/quantum.c **** 
1189:quantum/quantum.c **** #    if defined(NO_HARDWARE_PWM) || defined(BACKLIGHT_PWM_TIMER)  // pwm through software
1190:quantum/quantum.c **** 
1191:quantum/quantum.c **** // we support multiple backlight pins
1192:quantum/quantum.c **** #        ifndef BACKLIGHT_LED_COUNT
1193:quantum/quantum.c **** #            define BACKLIGHT_LED_COUNT 1
1194:quantum/quantum.c **** #        endif
1195:quantum/quantum.c **** 
1196:quantum/quantum.c **** #        if BACKLIGHT_LED_COUNT == 1
1197:quantum/quantum.c **** #            define BACKLIGHT_PIN_INIT \
1198:quantum/quantum.c ****                 { BACKLIGHT_PIN }
1199:quantum/quantum.c **** #        else
1200:quantum/quantum.c **** #            define BACKLIGHT_PIN_INIT BACKLIGHT_PINS
1201:quantum/quantum.c **** #        endif
1202:quantum/quantum.c **** 
1203:quantum/quantum.c **** #        define FOR_EACH_LED(x)                                 \
1204:quantum/quantum.c ****             for (uint8_t i = 0; i < BACKLIGHT_LED_COUNT; i++) { \
1205:quantum/quantum.c ****                 uint8_t backlight_pin = backlight_pins[i];      \
1206:quantum/quantum.c ****                 { x }                                           \
1207:quantum/quantum.c ****             }
1208:quantum/quantum.c **** 
1209:quantum/quantum.c **** static const uint8_t backlight_pins[BACKLIGHT_LED_COUNT] = BACKLIGHT_PIN_INIT;
1210:quantum/quantum.c **** 
1211:quantum/quantum.c **** #    else  // full hardware PWM
1212:quantum/quantum.c **** 
1213:quantum/quantum.c **** // we support only one backlight pin
1214:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
1215:quantum/quantum.c **** #        define FOR_EACH_LED(x) x
1216:quantum/quantum.c **** 
1217:quantum/quantum.c **** #    endif
1218:quantum/quantum.c **** 
1219:quantum/quantum.c **** #    ifdef NO_HARDWARE_PWM
1220:quantum/quantum.c **** __attribute__((weak)) void backlight_init_ports(void) {
1221:quantum/quantum.c ****     // Setup backlight pin as output and output to on state.
1222:quantum/quantum.c ****     FOR_EACH_LED(setPinOutput(backlight_pin); backlight_on(backlight_pin);)
1223:quantum/quantum.c **** 
1224:quantum/quantum.c **** #        ifdef BACKLIGHT_BREATHING
1225:quantum/quantum.c ****     if (is_backlight_breathing()) {
1226:quantum/quantum.c ****         breathing_enable();
1227:quantum/quantum.c ****     }
1228:quantum/quantum.c **** #        endif
1229:quantum/quantum.c **** }
1230:quantum/quantum.c **** 
1231:quantum/quantum.c **** __attribute__((weak)) void backlight_set(uint8_t level) {}
1232:quantum/quantum.c **** 
1233:quantum/quantum.c **** uint8_t backlight_tick = 0;
1234:quantum/quantum.c **** 
1235:quantum/quantum.c **** #        ifndef BACKLIGHT_CUSTOM_DRIVER
1236:quantum/quantum.c **** void backlight_task(void) {
1237:quantum/quantum.c ****     if ((0xFFFF >> ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2))) & (
1238:quantum/quantum.c ****         FOR_EACH_LED(backlight_on(backlight_pin);)
1239:quantum/quantum.c ****     } else {
1240:quantum/quantum.c ****         FOR_EACH_LED(backlight_off(backlight_pin);)
1241:quantum/quantum.c ****     }
1242:quantum/quantum.c ****     backlight_tick = (backlight_tick + 1) % 16;
1243:quantum/quantum.c **** }
1244:quantum/quantum.c **** #        endif
1245:quantum/quantum.c **** 
1246:quantum/quantum.c **** #        ifdef BACKLIGHT_BREATHING
1247:quantum/quantum.c **** #            ifndef BACKLIGHT_CUSTOM_DRIVER
1248:quantum/quantum.c **** #                error "Backlight breathing only available with hardware PWM. Please disable."
1249:quantum/quantum.c **** #            endif
1250:quantum/quantum.c **** #        endif
1251:quantum/quantum.c **** 
1252:quantum/quantum.c **** #    else  // hardware pwm through timer
1253:quantum/quantum.c **** 
1254:quantum/quantum.c **** #        ifdef BACKLIGHT_PWM_TIMER
1255:quantum/quantum.c **** 
1256:quantum/quantum.c **** // The idea of software PWM assisted by hardware timers is the following
1257:quantum/quantum.c **** // we use the hardware timer in fast PWM mode like for hardware PWM, but
1258:quantum/quantum.c **** // instead of letting the Output Match Comparator control the led pin
1259:quantum/quantum.c **** // (which is not possible since the backlight is not wired to PWM pins on the
1260:quantum/quantum.c **** // CPU), we do the LED on/off by oursleves.
1261:quantum/quantum.c **** // The timer is setup to count up to 0xFFFF, and we set the Output Compare
1262:quantum/quantum.c **** // register to the current 16bits backlight level (after CIE correction).
1263:quantum/quantum.c **** // This means the CPU will trigger a compare match interrupt when the counter
1264:quantum/quantum.c **** // reaches the backlight level, where we turn off the LEDs,
1265:quantum/quantum.c **** // but also an overflow interrupt when the counter rolls back to 0,
1266:quantum/quantum.c **** // in which we're going to turn on the LEDs.
1267:quantum/quantum.c **** // The LED will then be on for OCRxx/0xFFFF time, adjusted every 244Hz.
1268:quantum/quantum.c **** 
1269:quantum/quantum.c **** // Triggered when the counter reaches the OCRx value
1270:quantum/quantum.c **** ISR(TIMERx_COMPA_vect) { FOR_EACH_LED(backlight_off(backlight_pin);) }
1271:quantum/quantum.c **** 
1272:quantum/quantum.c **** // Triggered when the counter reaches the TOP value
1273:quantum/quantum.c **** // this one triggers at F_CPU/65536 =~ 244 Hz
1274:quantum/quantum.c **** ISR(TIMERx_OVF_vect) {
1275:quantum/quantum.c **** #            ifdef BACKLIGHT_BREATHING
1276:quantum/quantum.c ****     if (is_breathing()) {
1277:quantum/quantum.c ****         breathing_task();
1278:quantum/quantum.c ****     }
1279:quantum/quantum.c **** #            endif
1280:quantum/quantum.c ****     // for very small values of OCRxx (or backlight level)
1281:quantum/quantum.c ****     // we can't guarantee this whole code won't execute
1282:quantum/quantum.c ****     // at the same time as the compare match interrupt
1283:quantum/quantum.c ****     // which means that we might turn on the leds while
1284:quantum/quantum.c ****     // trying to turn them off, leading to flickering
1285:quantum/quantum.c ****     // artifacts (especially while breathing, because breathing_task
1286:quantum/quantum.c ****     // takes many computation cycles).
1287:quantum/quantum.c ****     // so better not turn them on while the counter TOP is very low.
1288:quantum/quantum.c ****     if (OCRxx > 256) {
1289:quantum/quantum.c ****         FOR_EACH_LED(backlight_on(backlight_pin);)
1290:quantum/quantum.c ****     }
1291:quantum/quantum.c **** }
1292:quantum/quantum.c **** 
1293:quantum/quantum.c **** #        endif
1294:quantum/quantum.c **** 
1295:quantum/quantum.c **** #        define TIMER_TOP 0xFFFFU
1296:quantum/quantum.c **** 
1297:quantum/quantum.c **** // See http://jared.geek.nz/2013/feb/linear-led-pwm
1298:quantum/quantum.c **** static uint16_t cie_lightness(uint16_t v) {
1299:quantum/quantum.c ****     if (v <= 5243)     // if below 8% of max
1300:quantum/quantum.c ****         return v / 9;  // same as dividing by 900%
1301:quantum/quantum.c ****     else {
1302:quantum/quantum.c ****         uint32_t y = (((uint32_t)v + 10486) << 8) / (10486 + 0xFFFFUL);  // add 16% of max and comp
1303:quantum/quantum.c ****         // to get a useful result with integer division, we shift left in the expression above
1304:quantum/quantum.c ****         // and revert what we've done again after squaring.
1305:quantum/quantum.c ****         y = y * y * y >> 8;
1306:quantum/quantum.c ****         if (y > 0xFFFFUL)  // prevent overflow
1307:quantum/quantum.c ****             return 0xFFFFU;
1308:quantum/quantum.c ****         else
1309:quantum/quantum.c ****             return (uint16_t)y;
1310:quantum/quantum.c ****     }
1311:quantum/quantum.c **** }
1312:quantum/quantum.c **** 
1313:quantum/quantum.c **** // range for val is [0..TIMER_TOP]. PWM pin is high while the timer count is below val.
1314:quantum/quantum.c **** static inline void set_pwm(uint16_t val) { OCRxx = val; }
1315:quantum/quantum.c **** 
1316:quantum/quantum.c **** #        ifndef BACKLIGHT_CUSTOM_DRIVER
1317:quantum/quantum.c **** __attribute__((weak)) void backlight_set(uint8_t level) {
1318:quantum/quantum.c ****     if (level > BACKLIGHT_LEVELS) level = BACKLIGHT_LEVELS;
1319:quantum/quantum.c **** 
1320:quantum/quantum.c ****     if (level == 0) {
1321:quantum/quantum.c **** #            ifdef BACKLIGHT_PWM_TIMER
1322:quantum/quantum.c ****         if (OCRxx) {
1323:quantum/quantum.c ****             TIMSKx &= ~(_BV(OCIExA));
1324:quantum/quantum.c ****             TIMSKx &= ~(_BV(TOIEx));
1325:quantum/quantum.c ****             FOR_EACH_LED(backlight_off(backlight_pin);)
1326:quantum/quantum.c ****         }
1327:quantum/quantum.c **** #            else
1328:quantum/quantum.c ****         // Turn off PWM control on backlight pin
1329:quantum/quantum.c ****         TCCRxA &= ~(_BV(COMxx1));
1330:quantum/quantum.c **** #            endif
1331:quantum/quantum.c ****     } else {
1332:quantum/quantum.c **** #            ifdef BACKLIGHT_PWM_TIMER
1333:quantum/quantum.c ****         if (!OCRxx) {
1334:quantum/quantum.c ****             TIMSKx |= _BV(OCIExA);
1335:quantum/quantum.c ****             TIMSKx |= _BV(TOIEx);
1336:quantum/quantum.c ****         }
1337:quantum/quantum.c **** #            else
1338:quantum/quantum.c ****         // Turn on PWM control of backlight pin
1339:quantum/quantum.c ****         TCCRxA |= _BV(COMxx1);
1340:quantum/quantum.c **** #            endif
1341:quantum/quantum.c ****     }
1342:quantum/quantum.c ****     // Set the brightness
1343:quantum/quantum.c ****     set_pwm(cie_lightness(TIMER_TOP * (uint32_t)level / BACKLIGHT_LEVELS));
1344:quantum/quantum.c **** }
1345:quantum/quantum.c **** 
1346:quantum/quantum.c **** void backlight_task(void) {}
1347:quantum/quantum.c **** #        endif  // BACKLIGHT_CUSTOM_DRIVER
1348:quantum/quantum.c **** 
1349:quantum/quantum.c **** #        ifdef BACKLIGHT_BREATHING
1350:quantum/quantum.c **** 
1351:quantum/quantum.c **** #            define BREATHING_NO_HALT 0
1352:quantum/quantum.c **** #            define BREATHING_HALT_OFF 1
1353:quantum/quantum.c **** #            define BREATHING_HALT_ON 2
1354:quantum/quantum.c **** #            define BREATHING_STEPS 128
1355:quantum/quantum.c **** 
1356:quantum/quantum.c **** static uint8_t breathing_period = BREATHING_PERIOD;
1357:quantum/quantum.c **** static uint8_t breathing_halt = BREATHING_NO_HALT;
1358:quantum/quantum.c **** static uint16_t breathing_counter = 0;
1359:quantum/quantum.c **** 
1360:quantum/quantum.c **** #            ifdef BACKLIGHT_PWM_TIMER
1361:quantum/quantum.c **** static bool breathing = false;
1362:quantum/quantum.c **** 
1363:quantum/quantum.c **** bool is_breathing(void) { return breathing; }
1364:quantum/quantum.c **** 
1365:quantum/quantum.c **** #                define breathing_interrupt_enable() \
1366:quantum/quantum.c ****                     do {                             \
1367:quantum/quantum.c ****                         breathing = true;            \
1368:quantum/quantum.c ****                     } while (0)
1369:quantum/quantum.c **** #                define breathing_interrupt_disable() \
1370:quantum/quantum.c ****                     do {                              \
1371:quantum/quantum.c ****                         breathing = false;            \
1372:quantum/quantum.c ****                     } while (0)
1373:quantum/quantum.c **** #            else
1374:quantum/quantum.c **** 
1375:quantum/quantum.c **** bool is_breathing(void) { return !!(TIMSKx & _BV(TOIEx)); }
1376:quantum/quantum.c **** 
1377:quantum/quantum.c **** #                define breathing_interrupt_enable() \
1378:quantum/quantum.c ****                     do {                             \
1379:quantum/quantum.c ****                         TIMSKx |= _BV(TOIEx);        \
1380:quantum/quantum.c ****                     } while (0)
1381:quantum/quantum.c **** #                define breathing_interrupt_disable() \
1382:quantum/quantum.c ****                     do {                              \
1383:quantum/quantum.c ****                         TIMSKx &= ~_BV(TOIEx);        \
1384:quantum/quantum.c ****                     } while (0)
1385:quantum/quantum.c **** #            endif
1386:quantum/quantum.c **** 
1387:quantum/quantum.c **** #            define breathing_min()        \
1388:quantum/quantum.c ****                 do {                       \
1389:quantum/quantum.c ****                     breathing_counter = 0; \
1390:quantum/quantum.c ****                 } while (0)
1391:quantum/quantum.c **** #            define breathing_max()                                 \
1392:quantum/quantum.c ****                 do {                                                \
1393:quantum/quantum.c ****                     breathing_counter = breathing_period * 244 / 2; \
1394:quantum/quantum.c ****                 } while (0)
1395:quantum/quantum.c **** 
1396:quantum/quantum.c **** void breathing_enable(void) {
1397:quantum/quantum.c ****     breathing_counter = 0;
1398:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
1399:quantum/quantum.c ****     breathing_interrupt_enable();
1400:quantum/quantum.c **** }
1401:quantum/quantum.c **** 
1402:quantum/quantum.c **** void breathing_pulse(void) {
1403:quantum/quantum.c ****     if (get_backlight_level() == 0)
1404:quantum/quantum.c ****         breathing_min();
1405:quantum/quantum.c ****     else
1406:quantum/quantum.c ****         breathing_max();
1407:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
1408:quantum/quantum.c ****     breathing_interrupt_enable();
1409:quantum/quantum.c **** }
1410:quantum/quantum.c **** 
1411:quantum/quantum.c **** void breathing_disable(void) {
1412:quantum/quantum.c ****     breathing_interrupt_disable();
1413:quantum/quantum.c ****     // Restore backlight level
1414:quantum/quantum.c ****     backlight_set(get_backlight_level());
1415:quantum/quantum.c **** }
1416:quantum/quantum.c **** 
1417:quantum/quantum.c **** void breathing_self_disable(void) {
1418:quantum/quantum.c ****     if (get_backlight_level() == 0)
1419:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_OFF;
1420:quantum/quantum.c ****     else
1421:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_ON;
1422:quantum/quantum.c **** }
1423:quantum/quantum.c **** 
1424:quantum/quantum.c **** void breathing_toggle(void) {
1425:quantum/quantum.c ****     if (is_breathing())
1426:quantum/quantum.c ****         breathing_disable();
1427:quantum/quantum.c ****     else
1428:quantum/quantum.c ****         breathing_enable();
1429:quantum/quantum.c **** }
1430:quantum/quantum.c **** 
1431:quantum/quantum.c **** void breathing_period_set(uint8_t value) {
1432:quantum/quantum.c ****     if (!value) value = 1;
1433:quantum/quantum.c ****     breathing_period = value;
1434:quantum/quantum.c **** }
1435:quantum/quantum.c **** 
1436:quantum/quantum.c **** void breathing_period_default(void) { breathing_period_set(BREATHING_PERIOD); }
1437:quantum/quantum.c **** 
1438:quantum/quantum.c **** void breathing_period_inc(void) { breathing_period_set(breathing_period + 1); }
1439:quantum/quantum.c **** 
1440:quantum/quantum.c **** void breathing_period_dec(void) { breathing_period_set(breathing_period - 1); }
1441:quantum/quantum.c **** 
1442:quantum/quantum.c **** /* To generate breathing curve in python:
1443:quantum/quantum.c ****  * from math import sin, pi; [int(sin(x/128.0*pi)**4*255) for x in range(128)]
1444:quantum/quantum.c ****  */
1445:quantum/quantum.c **** static const uint8_t breathing_table[BREATHING_STEPS] PROGMEM = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
1446:quantum/quantum.c **** 
1447:quantum/quantum.c **** // Use this before the cie_lightness function.
1448:quantum/quantum.c **** static inline uint16_t scale_backlight(uint16_t v) { return v / BACKLIGHT_LEVELS * get_backlight_le
1449:quantum/quantum.c **** 
1450:quantum/quantum.c **** #            ifdef BACKLIGHT_PWM_TIMER
1451:quantum/quantum.c **** void breathing_task(void)
1452:quantum/quantum.c **** #            else
1453:quantum/quantum.c **** /* Assuming a 16MHz CPU clock and a timer that resets at 64k (ICR1), the following interrupt handle
1454:quantum/quantum.c ****  * about 244 times per second.
1455:quantum/quantum.c ****  */
1456:quantum/quantum.c **** ISR(TIMERx_OVF_vect)
1457:quantum/quantum.c **** #            endif
1458:quantum/quantum.c **** {
1459:quantum/quantum.c ****     uint16_t interval = (uint16_t)breathing_period * 244 / BREATHING_STEPS;
1460:quantum/quantum.c ****     // resetting after one period to prevent ugly reset at overflow.
1461:quantum/quantum.c ****     breathing_counter = (breathing_counter + 1) % (breathing_period * 244);
1462:quantum/quantum.c ****     uint8_t index = breathing_counter / interval % BREATHING_STEPS;
1463:quantum/quantum.c **** 
1464:quantum/quantum.c ****     if (((breathing_halt == BREATHING_HALT_ON) && (index == BREATHING_STEPS / 2)) || ((breathing_ha
1465:quantum/quantum.c ****         breathing_interrupt_disable();
1466:quantum/quantum.c ****     }
1467:quantum/quantum.c **** 
1468:quantum/quantum.c ****     set_pwm(cie_lightness(scale_backlight((uint16_t)pgm_read_byte(&breathing_table[index]) * 0x0101
1469:quantum/quantum.c **** }
1470:quantum/quantum.c **** 
1471:quantum/quantum.c **** #        endif  // BACKLIGHT_BREATHING
1472:quantum/quantum.c **** 
1473:quantum/quantum.c **** __attribute__((weak)) void backlight_init_ports(void) {
1474:quantum/quantum.c ****     // Setup backlight pin as output and output to on state.
1475:quantum/quantum.c ****     FOR_EACH_LED(setPinOutput(backlight_pin); backlight_on(backlight_pin);)
1476:quantum/quantum.c **** 
1477:quantum/quantum.c ****     // I could write a wall of text here to explain... but TL;DW
1478:quantum/quantum.c ****     // Go read the ATmega32u4 datasheet.
1479:quantum/quantum.c ****     // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolut
1480:quantum/quantum.c **** 
1481:quantum/quantum.c **** #        ifdef BACKLIGHT_PWM_TIMER
1482:quantum/quantum.c ****     // TimerX setup, Fast PWM mode count to TOP set in ICRx
1483:quantum/quantum.c ****     TCCRxA = _BV(WGM11);  // = 0b00000010;
1484:quantum/quantum.c ****     // clock select clk/1
1485:quantum/quantum.c ****     TCCRxB = _BV(WGM13) | _BV(WGM12) | _BV(CS10);  // = 0b00011001;
1486:quantum/quantum.c **** #        else  // hardware PWM
1487:quantum/quantum.c ****     // Pin PB7 = OCR1C (Timer 1, Channel C)
1488:quantum/quantum.c ****     // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
1489:quantum/quantum.c ****     // (i.e. start high, go low when counter matches.)
1490:quantum/quantum.c ****     // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
1491:quantum/quantum.c ****     // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
1492:quantum/quantum.c **** 
1493:quantum/quantum.c ****     /*
1494:quantum/quantum.c ****     14.8.3:
1495:quantum/quantum.c ****     "In fast PWM mode, the compare units allow generation of PWM waveforms on the OCnx pins. Settin
1496:quantum/quantum.c ****     "In fast PWM mode the counter is incremented until the counter value matches either one of the 
1497:quantum/quantum.c ****     */
1498:quantum/quantum.c ****     TCCRxA = _BV(COMxx1) | _BV(WGM11);             // = 0b00001010;
1499:quantum/quantum.c ****     TCCRxB = _BV(WGM13) | _BV(WGM12) | _BV(CS10);  // = 0b00011001;
1500:quantum/quantum.c **** #        endif
1501:quantum/quantum.c ****     // Use full 16-bit resolution. Counter counts to ICR1 before reset to 0.
1502:quantum/quantum.c ****     ICRx = TIMER_TOP;
1503:quantum/quantum.c **** 
1504:quantum/quantum.c ****     backlight_init();
1505:quantum/quantum.c **** #        ifdef BACKLIGHT_BREATHING
1506:quantum/quantum.c ****     if (is_backlight_breathing()) {
1507:quantum/quantum.c ****         breathing_enable();
1508:quantum/quantum.c ****     }
1509:quantum/quantum.c **** #        endif
1510:quantum/quantum.c **** }
1511:quantum/quantum.c **** 
1512:quantum/quantum.c **** #    endif  // hardware backlight
1513:quantum/quantum.c **** 
1514:quantum/quantum.c **** #else  // no backlight
1515:quantum/quantum.c **** 
1516:quantum/quantum.c **** __attribute__((weak)) void backlight_init_ports(void) {}
1517:quantum/quantum.c **** 
1518:quantum/quantum.c **** __attribute__((weak)) void backlight_set(uint8_t level) {}
1519:quantum/quantum.c **** 
1520:quantum/quantum.c **** #endif  // backlight
1521:quantum/quantum.c **** 
1522:quantum/quantum.c **** #ifdef HD44780_ENABLED
1523:quantum/quantum.c **** #    include "hd44780.h"
1524:quantum/quantum.c **** #endif
1525:quantum/quantum.c **** 
1526:quantum/quantum.c **** // Functions for spitting out values
1527:quantum/quantum.c **** //
1528:quantum/quantum.c **** 
1529:quantum/quantum.c **** void send_dword(uint32_t number) {  // this might not actually work
1530:quantum/quantum.c ****     uint16_t word = (number >> 16);
1531:quantum/quantum.c ****     send_word(word);
1532:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
1533:quantum/quantum.c **** }
1534:quantum/quantum.c **** 
1535:quantum/quantum.c **** void send_word(uint16_t number) {
1536:quantum/quantum.c ****     uint8_t byte = number >> 8;
1537:quantum/quantum.c ****     send_byte(byte);
1538:quantum/quantum.c ****     send_byte(number & 0xFF);
1539:quantum/quantum.c **** }
1540:quantum/quantum.c **** 
1541:quantum/quantum.c **** void send_byte(uint8_t number) {
1542:quantum/quantum.c ****     uint8_t nibble = number >> 4;
1543:quantum/quantum.c ****     send_nibble(nibble);
1544:quantum/quantum.c ****     send_nibble(number & 0xF);
1545:quantum/quantum.c **** }
1546:quantum/quantum.c **** 
1547:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1500              		.loc 1 1547 0
 1501              		.cfi_startproc
 1502              		@ args = 0, pretend = 0, frame = 0
 1503              		@ frame_needed = 0, uses_anonymous_args = 0
 1504              	.LVL142:
 1505              		.loc 1 1547 0
 1506 0000 10B5     		push	{r4, lr}
 1507              		.cfi_def_cfa_offset 8
 1508              		.cfi_offset 4, -8
 1509              		.cfi_offset 14, -4
1548:quantum/quantum.c ****     switch (number) {
 1510              		.loc 1 1548 0
 1511 0002 0F28     		cmp	r0, #15
 1512 0004 1AD8     		bhi	.L121
 1513 0006 DFE800F0 		tbb	[pc, r0]
 1514              	.L124:
 1515 000a 08       		.byte	(.L123-.L124)/2
 1516 000b 10       		.byte	(.L125-.L124)/2
 1517 000c 10       		.byte	(.L125-.L124)/2
 1518 000d 10       		.byte	(.L125-.L124)/2
 1519 000e 10       		.byte	(.L125-.L124)/2
 1520 000f 10       		.byte	(.L125-.L124)/2
 1521 0010 10       		.byte	(.L125-.L124)/2
 1522 0011 10       		.byte	(.L125-.L124)/2
 1523 0012 10       		.byte	(.L125-.L124)/2
 1524 0013 10       		.byte	(.L125-.L124)/2
 1525 0014 17       		.byte	(.L126-.L124)/2
 1526 0015 17       		.byte	(.L126-.L124)/2
 1527 0016 17       		.byte	(.L126-.L124)/2
 1528 0017 17       		.byte	(.L126-.L124)/2
 1529 0018 17       		.byte	(.L126-.L124)/2
 1530 0019 17       		.byte	(.L126-.L124)/2
 1531              		.p2align 1
 1532              	.L123:
1549:quantum/quantum.c ****         case 0:
1550:quantum/quantum.c ****             register_code(KC_0);
 1533              		.loc 1 1550 0
 1534 001a 2720     		movs	r0, #39
 1535              	.LVL143:
 1536 001c FFF7FEFF 		bl	register_code
 1537              	.LVL144:
1551:quantum/quantum.c ****             unregister_code(KC_0);
 1538              		.loc 1 1551 0
 1539 0020 2720     		movs	r0, #39
 1540              	.L127:
1552:quantum/quantum.c ****             break;
1553:quantum/quantum.c ****         case 1 ... 9:
1554:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
1555:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
1556:quantum/quantum.c ****             break;
1557:quantum/quantum.c ****         case 0xA ... 0xF:
1558:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
1559:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
1560:quantum/quantum.c ****             break;
1561:quantum/quantum.c ****     }
1562:quantum/quantum.c **** }
 1541              		.loc 1 1562 0
 1542 0022 BDE81040 		pop	{r4, lr}
 1543              		.cfi_remember_state
 1544              		.cfi_restore 14
 1545              		.cfi_restore 4
 1546              		.cfi_def_cfa_offset 0
1559:quantum/quantum.c ****             break;
 1547              		.loc 1 1559 0
 1548 0026 FFF7FEBF 		b	unregister_code
 1549              	.LVL145:
 1550              	.L125:
 1551              		.cfi_restore_state
 1552              	.LBB18:
 1553              	.LBB19:
1554:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
 1554              		.loc 1 1554 0
 1555 002a 1D30     		adds	r0, r0, #29
 1556              	.LVL146:
 1557              	.L128:
 1558              	.LBE19:
 1559              	.LBE18:
1558:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1560              		.loc 1 1558 0
 1561 002c C4B2     		uxtb	r4, r0
 1562 002e 2046     		mov	r0, r4
 1563 0030 FFF7FEFF 		bl	register_code
 1564              	.LVL147:
1559:quantum/quantum.c ****             break;
 1565              		.loc 1 1559 0
 1566 0034 2046     		mov	r0, r4
 1567 0036 F4E7     		b	.L127
 1568              	.LVL148:
 1569              	.L126:
1558:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1570              		.loc 1 1558 0
 1571 0038 0638     		subs	r0, r0, #6
 1572              	.LVL149:
 1573 003a F7E7     		b	.L128
 1574              	.LVL150:
 1575              	.L121:
 1576              		.loc 1 1562 0
 1577 003c 10BD     		pop	{r4, pc}
 1578              		.cfi_endproc
 1579              	.LFE330:
 1581              		.section	.text.send_byte,"ax",%progbits
 1582              		.align	1
 1583              		.global	send_byte
 1584              		.syntax unified
 1585              		.thumb
 1586              		.thumb_func
 1587              		.fpu softvfp
 1589              	send_byte:
 1590              	.LFB329:
1541:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1591              		.loc 1 1541 0
 1592              		.cfi_startproc
 1593              		@ args = 0, pretend = 0, frame = 0
 1594              		@ frame_needed = 0, uses_anonymous_args = 0
 1595              	.LVL151:
 1596 0000 10B5     		push	{r4, lr}
 1597              		.cfi_def_cfa_offset 8
 1598              		.cfi_offset 4, -8
 1599              		.cfi_offset 14, -4
1541:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1600              		.loc 1 1541 0
 1601 0002 0446     		mov	r4, r0
1543:quantum/quantum.c ****     send_nibble(number & 0xF);
 1602              		.loc 1 1543 0
 1603 0004 0009     		lsrs	r0, r0, #4
 1604              	.LVL152:
 1605 0006 FFF7FEFF 		bl	send_nibble
 1606              	.LVL153:
1544:quantum/quantum.c **** }
 1607              		.loc 1 1544 0
 1608 000a 04F00F00 		and	r0, r4, #15
1545:quantum/quantum.c **** 
 1609              		.loc 1 1545 0
 1610 000e BDE81040 		pop	{r4, lr}
 1611              		.cfi_restore 14
 1612              		.cfi_restore 4
 1613              		.cfi_def_cfa_offset 0
1544:quantum/quantum.c **** }
 1614              		.loc 1 1544 0
 1615 0012 FFF7FEBF 		b	send_nibble
 1616              	.LVL154:
 1617              		.cfi_endproc
 1618              	.LFE329:
 1620              		.section	.text.send_word,"ax",%progbits
 1621              		.align	1
 1622              		.global	send_word
 1623              		.syntax unified
 1624              		.thumb
 1625              		.thumb_func
 1626              		.fpu softvfp
 1628              	send_word:
 1629              	.LFB328:
1535:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1630              		.loc 1 1535 0
 1631              		.cfi_startproc
 1632              		@ args = 0, pretend = 0, frame = 0
 1633              		@ frame_needed = 0, uses_anonymous_args = 0
 1634              	.LVL155:
 1635 0000 10B5     		push	{r4, lr}
 1636              		.cfi_def_cfa_offset 8
 1637              		.cfi_offset 4, -8
 1638              		.cfi_offset 14, -4
1535:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1639              		.loc 1 1535 0
 1640 0002 0446     		mov	r4, r0
1537:quantum/quantum.c ****     send_byte(number & 0xFF);
 1641              		.loc 1 1537 0
 1642 0004 000A     		lsrs	r0, r0, #8
 1643              	.LVL156:
 1644 0006 FFF7FEFF 		bl	send_byte
 1645              	.LVL157:
1538:quantum/quantum.c **** }
 1646              		.loc 1 1538 0
 1647 000a E0B2     		uxtb	r0, r4
1539:quantum/quantum.c **** 
 1648              		.loc 1 1539 0
 1649 000c BDE81040 		pop	{r4, lr}
 1650              		.cfi_restore 14
 1651              		.cfi_restore 4
 1652              		.cfi_def_cfa_offset 0
1538:quantum/quantum.c **** }
 1653              		.loc 1 1538 0
 1654 0010 FFF7FEBF 		b	send_byte
 1655              	.LVL158:
 1656              		.cfi_endproc
 1657              	.LFE328:
 1659              		.section	.text.send_dword,"ax",%progbits
 1660              		.align	1
 1661              		.global	send_dword
 1662              		.syntax unified
 1663              		.thumb
 1664              		.thumb_func
 1665              		.fpu softvfp
 1667              	send_dword:
 1668              	.LFB327:
1529:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1669              		.loc 1 1529 0
 1670              		.cfi_startproc
 1671              		@ args = 0, pretend = 0, frame = 0
 1672              		@ frame_needed = 0, uses_anonymous_args = 0
 1673              	.LVL159:
 1674 0000 10B5     		push	{r4, lr}
 1675              		.cfi_def_cfa_offset 8
 1676              		.cfi_offset 4, -8
 1677              		.cfi_offset 14, -4
1529:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1678              		.loc 1 1529 0
 1679 0002 0446     		mov	r4, r0
1531:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 1680              		.loc 1 1531 0
 1681 0004 000C     		lsrs	r0, r0, #16
 1682              	.LVL160:
 1683 0006 FFF7FEFF 		bl	send_word
 1684              	.LVL161:
1532:quantum/quantum.c **** }
 1685              		.loc 1 1532 0
 1686 000a A0B2     		uxth	r0, r4
1533:quantum/quantum.c **** 
 1687              		.loc 1 1533 0
 1688 000c BDE81040 		pop	{r4, lr}
 1689              		.cfi_restore 14
 1690              		.cfi_restore 4
 1691              		.cfi_def_cfa_offset 0
 1692              	.LVL162:
1532:quantum/quantum.c **** }
 1693              		.loc 1 1532 0
 1694 0010 FFF7FEBF 		b	send_word
 1695              	.LVL163:
 1696              		.cfi_endproc
 1697              	.LFE327:
 1699              		.section	.text.hex_to_keycode,"ax",%progbits
 1700              		.align	1
 1701              		.weak	hex_to_keycode
 1702              		.syntax unified
 1703              		.thumb
 1704              		.thumb_func
 1705              		.fpu softvfp
 1707              	hex_to_keycode:
 1708              	.LFB331:
1563:quantum/quantum.c **** 
1564:quantum/quantum.c **** __attribute__((weak)) uint16_t hex_to_keycode(uint8_t hex) {
 1709              		.loc 1 1564 0
 1710              		.cfi_startproc
 1711              		@ args = 0, pretend = 0, frame = 0
 1712              		@ frame_needed = 0, uses_anonymous_args = 0
 1713              		@ link register save eliminated.
 1714              	.LVL164:
1565:quantum/quantum.c ****     hex = hex & 0xF;
1566:quantum/quantum.c ****     if (hex == 0x0) {
 1715              		.loc 1 1566 0
 1716 0000 10F00F03 		ands	r3, r0, #15
 1717 0004 06D0     		beq	.L135
 1718 0006 98B2     		uxth	r0, r3
 1719              	.LVL165:
1567:quantum/quantum.c ****         return KC_0;
1568:quantum/quantum.c ****     } else if (hex < 0xA) {
 1720              		.loc 1 1568 0
 1721 0008 092B     		cmp	r3, #9
1569:quantum/quantum.c ****         return KC_1 + (hex - 0x1);
 1722              		.loc 1 1569 0
 1723 000a 92BF     		itee	ls
 1724 000c 1D30     		addls	r0, r0, #29
1570:quantum/quantum.c ****     } else {
1571:quantum/quantum.c ****         return KC_A + (hex - 0xA);
 1725              		.loc 1 1571 0
 1726 000e 0638     		subhi	r0, r0, #6
 1727 0010 80B2     		uxthhi	r0, r0
 1728 0012 7047     		bx	lr
 1729              	.LVL166:
 1730              	.L135:
1567:quantum/quantum.c ****     } else if (hex < 0xA) {
 1731              		.loc 1 1567 0
 1732 0014 2720     		movs	r0, #39
 1733              	.LVL167:
1572:quantum/quantum.c ****     }
1573:quantum/quantum.c **** }
 1734              		.loc 1 1573 0
 1735 0016 7047     		bx	lr
 1736              		.cfi_endproc
 1737              	.LFE331:
 1739              		.section	.text.api_send_unicode,"ax",%progbits
 1740              		.align	1
 1741              		.global	api_send_unicode
 1742              		.syntax unified
 1743              		.thumb
 1744              		.thumb_func
 1745              		.fpu softvfp
 1747              	api_send_unicode:
 1748              	.LFB332:
1574:quantum/quantum.c **** 
1575:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 1749              		.loc 1 1575 0
 1750              		.cfi_startproc
 1751              		@ args = 0, pretend = 0, frame = 0
 1752              		@ frame_needed = 0, uses_anonymous_args = 0
 1753              		@ link register save eliminated.
 1754              	.LVL168:
1576:quantum/quantum.c **** #ifdef API_ENABLE
1577:quantum/quantum.c ****     uint8_t chunk[4];
1578:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
1579:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
1580:quantum/quantum.c **** #endif
1581:quantum/quantum.c **** }
 1755              		.loc 1 1581 0
 1756 0000 7047     		bx	lr
 1757              		.cfi_endproc
 1758              	.LFE332:
 1760              		.section	.text.led_set_user,"ax",%progbits
 1761              		.align	1
 1762              		.weak	led_set_user
 1763              		.syntax unified
 1764              		.thumb
 1765              		.thumb_func
 1766              		.fpu softvfp
 1768              	led_set_user:
 1769              	.LFB333:
1582:quantum/quantum.c **** 
1583:quantum/quantum.c **** __attribute__((weak)) void led_set_user(uint8_t usb_led) {}
 1770              		.loc 1 1583 0
 1771              		.cfi_startproc
 1772              		@ args = 0, pretend = 0, frame = 0
 1773              		@ frame_needed = 0, uses_anonymous_args = 0
 1774              		@ link register save eliminated.
 1775              	.LVL169:
 1776              		.loc 1 1583 0
 1777 0000 7047     		bx	lr
 1778              		.cfi_endproc
 1779              	.LFE333:
 1781              		.section	.text.led_set_kb,"ax",%progbits
 1782              		.align	1
 1783              		.weak	led_set_kb
 1784              		.syntax unified
 1785              		.thumb
 1786              		.thumb_func
 1787              		.fpu softvfp
 1789              	led_set_kb:
 1790              	.LFB334:
1584:quantum/quantum.c **** 
1585:quantum/quantum.c **** __attribute__((weak)) void led_set_kb(uint8_t usb_led) { led_set_user(usb_led); }
 1791              		.loc 1 1585 0
 1792              		.cfi_startproc
 1793              		@ args = 0, pretend = 0, frame = 0
 1794              		@ frame_needed = 0, uses_anonymous_args = 0
 1795              	.LVL170:
 1796 0000 08B5     		push	{r3, lr}
 1797              		.cfi_def_cfa_offset 8
 1798              		.cfi_offset 3, -8
 1799              		.cfi_offset 14, -4
 1800              		.loc 1 1585 0
 1801 0002 FFF7FEFF 		bl	led_set_user
 1802              	.LVL171:
 1803 0006 08BD     		pop	{r3, pc}
 1804              		.cfi_endproc
 1805              	.LFE334:
 1807              		.section	.text.led_init_ports,"ax",%progbits
 1808              		.align	1
 1809              		.weak	led_init_ports
 1810              		.syntax unified
 1811              		.thumb
 1812              		.thumb_func
 1813              		.fpu softvfp
 1815              	led_init_ports:
 1816              	.LFB335:
1586:quantum/quantum.c **** 
1587:quantum/quantum.c **** __attribute__((weak)) void led_init_ports(void) {}
 1817              		.loc 1 1587 0
 1818              		.cfi_startproc
 1819              		@ args = 0, pretend = 0, frame = 0
 1820              		@ frame_needed = 0, uses_anonymous_args = 0
 1821              		@ link register save eliminated.
 1822              		.loc 1 1587 0
 1823 0000 7047     		bx	lr
 1824              		.cfi_endproc
 1825              	.LFE335:
 1827              		.section	.text.led_set,"ax",%progbits
 1828              		.align	1
 1829              		.weak	led_set
 1830              		.syntax unified
 1831              		.thumb
 1832              		.thumb_func
 1833              		.fpu softvfp
 1835              	led_set:
 1836              	.LFB336:
1588:quantum/quantum.c **** 
1589:quantum/quantum.c **** __attribute__((weak)) void led_set(uint8_t usb_led) {
 1837              		.loc 1 1589 0
 1838              		.cfi_startproc
 1839              		@ args = 0, pretend = 0, frame = 0
 1840              		@ frame_needed = 0, uses_anonymous_args = 0
 1841              	.LVL172:
 1842 0000 08B5     		push	{r3, lr}
 1843              		.cfi_def_cfa_offset 8
 1844              		.cfi_offset 3, -8
 1845              		.cfi_offset 14, -4
1590:quantum/quantum.c **** #if defined(BACKLIGHT_CAPS_LOCK) && defined(BACKLIGHT_ENABLE)
1591:quantum/quantum.c ****     // Use backlight as Caps Lock indicator
1592:quantum/quantum.c ****     uint8_t bl_toggle_lvl = 0;
1593:quantum/quantum.c **** 
1594:quantum/quantum.c ****     if (IS_LED_ON(usb_led, USB_LED_CAPS_LOCK) && !backlight_config.enable) {
1595:quantum/quantum.c ****         // Turning Caps Lock ON and backlight is disabled in config
1596:quantum/quantum.c ****         // Toggling backlight to the brightest level
1597:quantum/quantum.c ****         bl_toggle_lvl = BACKLIGHT_LEVELS;
1598:quantum/quantum.c ****     } else if (IS_LED_OFF(usb_led, USB_LED_CAPS_LOCK) && backlight_config.enable) {
1599:quantum/quantum.c ****         // Turning Caps Lock OFF and backlight is enabled in config
1600:quantum/quantum.c ****         // Toggling backlight and restoring config level
1601:quantum/quantum.c ****         bl_toggle_lvl = backlight_config.level;
1602:quantum/quantum.c ****     }
1603:quantum/quantum.c **** 
1604:quantum/quantum.c ****     // Set level without modify backlight_config to keep ability to restore state
1605:quantum/quantum.c ****     backlight_set(bl_toggle_lvl);
1606:quantum/quantum.c **** #endif
1607:quantum/quantum.c **** 
1608:quantum/quantum.c ****     led_set_kb(usb_led);
 1846              		.loc 1 1608 0
 1847 0002 FFF7FEFF 		bl	led_set_kb
 1848              	.LVL173:
1609:quantum/quantum.c **** }
 1849              		.loc 1 1609 0
 1850 0006 08BD     		pop	{r3, pc}
 1851              		.cfi_endproc
 1852              	.LFE336:
 1854              		.section	.text.startup_user,"ax",%progbits
 1855              		.align	1
 1856              		.weak	startup_user
 1857              		.syntax unified
 1858              		.thumb
 1859              		.thumb_func
 1860              		.fpu softvfp
 1862              	startup_user:
 1863              	.LFB342:
 1864              		.cfi_startproc
 1865              		@ args = 0, pretend = 0, frame = 0
 1866              		@ frame_needed = 0, uses_anonymous_args = 0
 1867              		@ link register save eliminated.
 1868 0000 7047     		bx	lr
 1869              		.cfi_endproc
 1870              	.LFE342:
 1872              		.section	.text.shutdown_user,"ax",%progbits
 1873              		.align	1
 1874              		.weak	shutdown_user
 1875              		.syntax unified
 1876              		.thumb
 1877              		.thumb_func
 1878              		.fpu softvfp
 1880              	shutdown_user:
 1881              	.LFB344:
 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 0
 1884              		@ frame_needed = 0, uses_anonymous_args = 0
 1885              		@ link register save eliminated.
 1886 0000 7047     		bx	lr
 1887              		.cfi_endproc
 1888              	.LFE344:
 1890              		.section	.text.reset_keyboard,"ax",%progbits
 1891              		.align	1
 1892              		.global	reset_keyboard
 1893              		.syntax unified
 1894              		.thumb
 1895              		.thumb_func
 1896              		.fpu softvfp
 1898              	reset_keyboard:
 1899              	.LFB309:
 157:quantum/quantum.c ****     clear_keyboard();
 1900              		.loc 1 157 0
 1901              		.cfi_startproc
 1902              		@ args = 0, pretend = 0, frame = 0
 1903              		@ frame_needed = 0, uses_anonymous_args = 0
 157:quantum/quantum.c ****     clear_keyboard();
 1904              		.loc 1 157 0
 1905 0000 10B5     		push	{r4, lr}
 1906              		.cfi_def_cfa_offset 8
 1907              		.cfi_offset 4, -8
 1908              		.cfi_offset 14, -4
 158:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_BASIC)
 1909              		.loc 1 158 0
 1910 0002 FFF7FEFF 		bl	clear_keyboard
 1911              	.LVL174:
 164:quantum/quantum.c **** #    endif
 1912              		.loc 1 164 0
 1913 0006 FFF7FEFF 		bl	music_all_notes_off
 1914              	.LVL175:
 166:quantum/quantum.c ****     PLAY_SONG(goodbye_song);
 1915              		.loc 1 166 0
 1916 000a FFF7FEFF 		bl	timer_read
 1917              	.LVL176:
 167:quantum/quantum.c ****     shutdown_user();
 1918              		.loc 1 167 0
 1919 000e 0022     		movs	r2, #0
 166:quantum/quantum.c ****     PLAY_SONG(goodbye_song);
 1920              		.loc 1 166 0
 1921 0010 0446     		mov	r4, r0
 1922              	.LVL177:
 167:quantum/quantum.c ****     shutdown_user();
 1923              		.loc 1 167 0
 1924 0012 0321     		movs	r1, #3
 1925 0014 0948     		ldr	r0, .L146
 1926 0016 FFF7FEFF 		bl	play_notes
 1927              	.LVL178:
 168:quantum/quantum.c ****     while (timer_elapsed(timer_start) < 250) wait_ms(1);
 1928              		.loc 1 168 0
 1929 001a FFF7FEFF 		bl	shutdown_user
 1930              	.LVL179:
 1931              	.L144:
 169:quantum/quantum.c ****     stop_all_notes();
 1932              		.loc 1 169 0 discriminator 4
 1933 001e 2046     		mov	r0, r4
 1934 0020 FFF7FEFF 		bl	timer_elapsed
 1935              	.LVL180:
 1936 0024 F928     		cmp	r0, #249
 1937 0026 05D9     		bls	.L145
 170:quantum/quantum.c **** #else
 1938              		.loc 1 170 0
 1939 0028 FFF7FEFF 		bl	stop_all_notes
 1940              	.LVL181:
 183:quantum/quantum.c **** 
 1941              		.loc 1 183 0
 1942 002c BDE81040 		pop	{r4, lr}
 1943              		.cfi_remember_state
 1944              		.cfi_restore 14
 1945              		.cfi_restore 4
 1946              		.cfi_def_cfa_offset 0
 1947              	.LVL182:
 182:quantum/quantum.c **** }
 1948              		.loc 1 182 0
 1949 0030 FFF7FEBF 		b	bootloader_jump
 1950              	.LVL183:
 1951              	.L145:
 1952              		.cfi_restore_state
 169:quantum/quantum.c ****     stop_all_notes();
 1953              		.loc 1 169 0 discriminator 1
 1954 0034 6420     		movs	r0, #100
 1955 0036 FFF7FEFF 		bl	chThdSleep
 1956              	.LVL184:
 1957 003a F0E7     		b	.L144
 1958              	.L147:
 1959              		.align	2
 1960              	.L146:
 1961 003c 00000000 		.word	.LANCHOR1
 1962              		.cfi_endproc
 1963              	.LFE309:
 1965              		.section	.text.process_record_quantum,"ax",%progbits
 1966              		.align	1
 1967              		.global	process_record_quantum
 1968              		.syntax unified
 1969              		.thumb
 1970              		.thumb_func
 1971              		.fpu softvfp
 1973              	process_record_quantum:
 1974              	.LFB312:
 217:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 1975              		.loc 1 217 0
 1976              		.cfi_startproc
 1977              		@ args = 0, pretend = 0, frame = 0
 1978              		@ frame_needed = 0, uses_anonymous_args = 0
 1979              	.LVL185:
 1980 0000 38B5     		push	{r3, r4, r5, lr}
 1981              		.cfi_def_cfa_offset 16
 1982              		.cfi_offset 3, -16
 1983              		.cfi_offset 4, -12
 1984              		.cfi_offset 5, -8
 1985              		.cfi_offset 14, -4
 217:quantum/quantum.c ****     uint16_t keycode = get_record_keycode(record);
 1986              		.loc 1 217 0
 1987 0002 0446     		mov	r4, r0
 218:quantum/quantum.c **** 
 1988              		.loc 1 218 0
 1989 0004 FFF7FEFF 		bl	get_record_keycode
 1990              	.LVL186:
 252:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 1991              		.loc 1 252 0
 1992 0008 2146     		mov	r1, r4
 218:quantum/quantum.c **** 
 1993              		.loc 1 218 0
 1994 000a 0546     		mov	r5, r0
 1995              	.LVL187:
 252:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 1996              		.loc 1 252 0
 1997 000c FFF7FEFF 		bl	process_record_kb
 1998              	.LVL188:
 263:quantum/quantum.c **** #endif
 1999              		.loc 1 263 0
 2000 0010 08B9     		cbnz	r0, .L149
 2001              	.LVL189:
 2002              	.L233:
 300:quantum/quantum.c ****         case DEBUG:
 2003              		.loc 1 300 0
 2004 0012 0020     		movs	r0, #0
 2005              	.L150:
 730:quantum/quantum.c **** 
 2006              		.loc 1 730 0
 2007 0014 38BD     		pop	{r3, r4, r5, pc}
 2008              	.LVL190:
 2009              	.L149:
 257:quantum/quantum.c **** #endif
 2010              		.loc 1 257 0
 2011 0016 2146     		mov	r1, r4
 2012 0018 2846     		mov	r0, r5
 2013 001a FFF7FEFF 		bl	process_audio
 2014              	.LVL191:
 252:quantum/quantum.c **** #if defined(MIDI_ENABLE) && defined(MIDI_ADVANCED)
 2015              		.loc 1 252 0
 2016 001e 0028     		cmp	r0, #0
 2017 0020 F7D0     		beq	.L233
 263:quantum/quantum.c **** #endif
 2018              		.loc 1 263 0
 2019 0022 2146     		mov	r1, r4
 2020 0024 2846     		mov	r0, r5
 2021 0026 FFF7FEFF 		bl	process_music
 2022              	.LVL192:
 257:quantum/quantum.c **** #endif
 2023              		.loc 1 257 0
 2024 002a 0028     		cmp	r0, #0
 2025 002c F1D0     		beq	.L233
 287:quantum/quantum.c **** #endif
 2026              		.loc 1 287 0 discriminator 2
 2027 002e 2146     		mov	r1, r4
 2028 0030 2846     		mov	r0, r5
 2029 0032 FFF7FEFF 		bl	process_space_cadet
 2030              	.LVL193:
 263:quantum/quantum.c **** #endif
 2031              		.loc 1 263 0 discriminator 2
 2032 0036 0028     		cmp	r0, #0
 2033 0038 EBD0     		beq	.L233
 295:quantum/quantum.c ****         case RESET:
 2034              		.loc 1 295 0
 2035 003a 45F61543 		movw	r3, #23573
 2036 003e 9D42     		cmp	r5, r3
 2037 0040 0ED8     		bhi	.L153
 2038 0042 45F60243 		movw	r3, #23554
 2039 0046 9D42     		cmp	r5, r3
 2040 0048 2DD2     		bcs	.L154
 2041 004a B5F5B84F 		cmp	r5, #23552
 2042 004e 58D0     		beq	.L155
 2043 0050 45F60143 		movw	r3, #23553
 2044 0054 9D42     		cmp	r5, r3
 2045 0056 5AD0     		beq	.L156
 2046              	.L152:
 729:quantum/quantum.c **** }
 2047              		.loc 1 729 0
 2048 0058 2046     		mov	r0, r4
 2049 005a FFF7FEFF 		bl	process_action_kb
 2050              	.LVL194:
 2051 005e D9E7     		b	.L150
 2052              	.L153:
 295:quantum/quantum.c ****         case RESET:
 2053              		.loc 1 295 0
 2054 0060 45F6DE43 		movw	r3, #23774
 2055 0064 9D42     		cmp	r5, r3
 2056 0066 66D0     		beq	.L157
 2057 0068 18D8     		bhi	.L158
 2058 006a 45F61643 		movw	r3, #23574
 2059 006e 9D42     		cmp	r5, r3
 2060 0070 F2D1     		bne	.L152
 2061              	.LBB20:
 676:quantum/quantum.c **** 
 2062              		.loc 1 676 0
 2063 0072 FFF7FEFF 		bl	get_mods
 2064              	.LVL195:
 708:quantum/quantum.c ****                 grave_esc_was_shifted = shifted;
 2065              		.loc 1 708 0
 2066 0076 A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 2067 0078 AF4B     		ldr	r3, .L236
 2068 007a 002A     		cmp	r2, #0
 2069 007c 00F05381 		beq	.L199
 676:quantum/quantum.c **** 
 2070              		.loc 1 676 0
 2071 0080 00F0AA00 		and	r0, r0, #170
 2072              	.LVL196:
 709:quantum/quantum.c ****                 add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 2073              		.loc 1 709 0
 2074 0084 0028     		cmp	r0, #0
 2075 0086 15BF     		itete	ne
 2076 0088 0122     		movne	r2, #1
 2077 008a 0022     		moveq	r2, #0
 710:quantum/quantum.c ****             } else {
 2078              		.loc 1 710 0
 2079 008c 3520     		movne	r0, #53
 2080 008e 2920     		moveq	r0, #41
 709:quantum/quantum.c ****                 add_key(shifted ? KC_GRAVE : KC_ESCAPE);
 2081              		.loc 1 709 0
 2082 0090 1A70     		strb	r2, [r3]
 710:quantum/quantum.c ****             } else {
 2083              		.loc 1 710 0
 2084 0092 FFF7FEFF 		bl	add_key
 2085              	.LVL197:
 2086              	.L201:
 715:quantum/quantum.c ****             return false;
 2087              		.loc 1 715 0
 2088 0096 FFF7FEFF 		bl	send_keyboard_report
 2089              	.LVL198:
 2090 009a BAE7     		b	.L233
 2091              	.L158:
 2092              	.LBE20:
 295:quantum/quantum.c ****         case RESET:
 2093              		.loc 1 295 0
 2094 009c A5F5B943 		sub	r3, r5, #23680
 2095 00a0 7A3B     		subs	r3, r3, #122
 2096 00a2 062B     		cmp	r3, #6
 2097 00a4 D8D8     		bhi	.L152
 2098              	.L154:
 548:quantum/quantum.c ****                 // MAGIC actions (BOOTMAGIC without the boot)
 2099              		.loc 1 548 0
 2100 00a6 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2101 00a8 002B     		cmp	r3, #0
 2102 00aa D5D0     		beq	.L152
 550:quantum/quantum.c ****                     eeconfig_init();
 2103              		.loc 1 550 0
 2104 00ac FFF7FEFF 		bl	eeconfig_is_enabled
 2105              	.LVL199:
 2106 00b0 08B9     		cbnz	r0, .L161
 551:quantum/quantum.c ****                 }
 2107              		.loc 1 551 0
 2108 00b2 FFF7FEFF 		bl	eeconfig_init
 2109              	.LVL200:
 2110              	.L161:
 554:quantum/quantum.c ****                 switch (keycode) {
 2111              		.loc 1 554 0
 2112 00b6 FFF7FEFF 		bl	eeconfig_read_keymap
 2113              	.LVL201:
 2114 00ba A04C     		ldr	r4, .L236+4
 2115              	.LVL202:
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2116              		.loc 1 555 0
 2117 00bc 45F60F43 		movw	r3, #23567
 2118 00c0 9D42     		cmp	r5, r3
 554:quantum/quantum.c ****                 switch (keycode) {
 2119              		.loc 1 554 0
 2120 00c2 2080     		strh	r0, [r4]	@ movhi
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2121              		.loc 1 555 0
 2122 00c4 00F00781 		beq	.L163
 2123 00c8 6BD8     		bhi	.L164
 2124 00ca 45F60843 		movw	r3, #23560
 2125 00ce 9D42     		cmp	r5, r3
 2126 00d0 00F0E180 		beq	.L165
 2127 00d4 41D8     		bhi	.L166
 2128 00d6 45F60443 		movw	r3, #23556
 2129 00da 9D42     		cmp	r5, r3
 2130 00dc 00F0C680 		beq	.L167
 2131 00e0 30D8     		bhi	.L168
 2132 00e2 45F60243 		movw	r3, #23554
 2133 00e6 9D42     		cmp	r5, r3
 2134 00e8 00F0B780 		beq	.L169
 2135 00ec 45F60343 		movw	r3, #23555
 2136 00f0 9D42     		cmp	r5, r3
 2137 00f2 00F0B780 		beq	.L170
 2138              	.L162:
 668:quantum/quantum.c ****                 clear_keyboard();  // clear to prevent stuck keys
 2139              		.loc 1 668 0
 2140 00f6 2088     		ldrh	r0, [r4]
 2141 00f8 FFF7FEFF 		bl	eeconfig_update_keymap
 2142              	.LVL203:
 669:quantum/quantum.c **** 
 2143              		.loc 1 669 0
 2144 00fc FFF7FEFF 		bl	clear_keyboard
 2145              	.LVL204:
 2146 0100 87E7     		b	.L233
 2147              	.LVL205:
 2148              	.L155:
 297:quantum/quantum.c ****                 reset_keyboard();
 2149              		.loc 1 297 0
 2150 0102 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2151 0104 002B     		cmp	r3, #0
 2152 0106 84D0     		beq	.L233
 298:quantum/quantum.c ****             }
 2153              		.loc 1 298 0
 2154 0108 FFF7FEFF 		bl	reset_keyboard
 2155              	.LVL206:
 2156 010c 81E7     		b	.L233
 2157              	.L156:
 302:quantum/quantum.c ****                 debug_enable ^= 1;
 2158              		.loc 1 302 0
 2159 010e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2160 0110 002B     		cmp	r3, #0
 2161 0112 3FF47EAF 		beq	.L233
 303:quantum/quantum.c ****                 if (debug_enable) {
 2162              		.loc 1 303 0
 2163 0116 8A49     		ldr	r1, .L236+8
 2164 0118 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 2165 011a C3F30002 		ubfx	r2, r3, #0, #1
 2166 011e 82F00102 		eor	r2, r2, #1
 2167 0122 62F30003 		bfi	r3, r2, #0, #1
 304:quantum/quantum.c ****                     print("DEBUG: enabled.\n");
 2168              		.loc 1 304 0
 2169 0126 D807     		lsls	r0, r3, #31
 305:quantum/quantum.c ****                 } else {
 2170              		.loc 1 305 0
 2171 0128 4CBF     		ite	mi
 2172 012a 8648     		ldrmi	r0, .L236+12
 307:quantum/quantum.c ****                 }
 2173              		.loc 1 307 0
 2174 012c 8648     		ldrpl	r0, .L236+16
 303:quantum/quantum.c ****                 if (debug_enable) {
 2175              		.loc 1 303 0
 2176 012e 0B70     		strb	r3, [r1]
 307:quantum/quantum.c ****                 }
 2177              		.loc 1 307 0
 2178 0130 FFF7FEFF 		bl	tfp_printf
 2179              	.LVL207:
 2180 0134 6DE7     		b	.L233
 2181              	.L157:
 312:quantum/quantum.c ****                 eeconfig_init();
 2182              		.loc 1 312 0
 2183 0136 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2184 0138 002B     		cmp	r3, #0
 2185 013a 3FF46AAF 		beq	.L233
 313:quantum/quantum.c ****             }
 2186              		.loc 1 313 0
 2187 013e FFF7FEFF 		bl	eeconfig_init
 2188              	.LVL208:
 2189 0142 66E7     		b	.L233
 2190              	.LVL209:
 2191              	.L168:
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2192              		.loc 1 555 0
 2193 0144 45F60643 		movw	r3, #23558
 2194 0148 9D42     		cmp	r5, r3
 2195 014a 00F0A080 		beq	.L171
 2196 014e 40F29180 		bls	.L226
 578:quantum/quantum.c ****                         break;
 2197              		.loc 1 578 0
 2198 0152 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2199 0154 43F02003 		orr	r3, r3, #32
 2200 0158 82E0     		b	.L228
 2201              	.L166:
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2202              		.loc 1 555 0
 2203 015a 45F60B43 		movw	r3, #23563
 2204 015e 9D42     		cmp	r5, r3
 2205 0160 00F0A980 		beq	.L174
 2206 0164 12D8     		bhi	.L175
 2207 0166 45F60943 		movw	r3, #23561
 2208 016a 9D42     		cmp	r5, r3
 2209 016c 00F09780 		beq	.L176
 2210 0170 45F60A43 		movw	r3, #23562
 2211 0174 9D42     		cmp	r5, r3
 2212 0176 BED1     		bne	.L162
 587:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2213              		.loc 1 587 0
 2214 0178 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2215 017a 43F00C03 		orr	r3, r3, #12
 2216 017e 2370     		strb	r3, [r4]
 589:quantum/quantum.c **** #endif
 2217              		.loc 1 589 0
 2218 0180 0022     		movs	r2, #0
 2219              	.L234:
 645:quantum/quantum.c ****                         } else {
 2220              		.loc 1 645 0
 2221 0182 7248     		ldr	r0, .L236+20
 2222 0184 0421     		movs	r1, #4
 2223              	.L230:
 658:quantum/quantum.c ****                         }
 2224              		.loc 1 658 0
 2225 0186 FFF7FEFF 		bl	play_notes
 2226              	.LVL210:
 2227 018a B4E7     		b	.L162
 2228              	.L175:
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2229              		.loc 1 555 0
 2230 018c 45F60D43 		movw	r3, #23565
 2231 0190 9D42     		cmp	r5, r3
 2232 0192 00F09880 		beq	.L178
 2233 0196 40F29280 		bls	.L227
 608:quantum/quantum.c ****                         break;
 2234              		.loc 1 608 0
 2235 019a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2236 019c 6FF3C303 		bfc	r3, #3, #1
 2237 01a0 5EE0     		b	.L228
 2238              	.L164:
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2239              		.loc 1 555 0
 2240 01a2 45F6FA43 		movw	r3, #23802
 2241 01a6 9D42     		cmp	r5, r3
 2242 01a8 68D0     		beq	.L181
 2243 01aa 2CD8     		bhi	.L182
 2244 01ac 45F61243 		movw	r3, #23570
 2245 01b0 9D42     		cmp	r5, r3
 2246 01b2 00F09880 		beq	.L183
 2247 01b6 0CD8     		bhi	.L184
 2248 01b8 45F61043 		movw	r3, #23568
 2249 01bc 9D42     		cmp	r5, r3
 2250 01be 00F08E80 		beq	.L185
 2251 01c2 45F61143 		movw	r3, #23569
 2252 01c6 9D42     		cmp	r5, r3
 2253 01c8 95D1     		bne	.L162
 623:quantum/quantum.c ****                         break;
 2254              		.loc 1 623 0
 2255 01ca 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2256 01cc 6FF38613 		bfc	r3, #6, #1
 2257 01d0 46E0     		b	.L228
 2258              	.L184:
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2259              		.loc 1 555 0
 2260 01d2 45F61443 		movw	r3, #23572
 2261 01d6 9D42     		cmp	r5, r3
 2262 01d8 00F09D80 		beq	.L187
 2263 01dc C0F08780 		bcc	.L188
 2264 01e0 45F61543 		movw	r3, #23573
 2265 01e4 9D42     		cmp	r5, r3
 2266 01e6 86D1     		bne	.L162
 641:quantum/quantum.c ****                         keymap_config.swap_ralt_rgui = keymap_config.swap_lalt_lgui;
 2267              		.loc 1 641 0
 2268 01e8 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2269 01ea C3F38002 		ubfx	r2, r3, #2, #1
 2270 01ee 82F00102 		eor	r2, r2, #1
 2271 01f2 62F38203 		bfi	r3, r2, #2, #1
 642:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2272              		.loc 1 642 0
 2273 01f6 62F3C303 		bfi	r3, r2, #3, #1
 644:quantum/quantum.c ****                             PLAY_SONG(ag_swap_song);
 2274              		.loc 1 644 0
 2275 01fa 1907     		lsls	r1, r3, #28
 642:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2276              		.loc 1 642 0
 2277 01fc 2370     		strb	r3, [r4]
 645:quantum/quantum.c ****                         } else {
 2278              		.loc 1 645 0
 2279 01fe 4FF00002 		mov	r2, #0
 644:quantum/quantum.c ****                             PLAY_SONG(ag_swap_song);
 2280              		.loc 1 644 0
 2281 0202 7BD5     		bpl	.L197
 2282 0204 BDE7     		b	.L234
 2283              	.L182:
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2284              		.loc 1 555 0
 2285 0206 45F6FD43 		movw	r3, #23805
 2286 020a 9D42     		cmp	r5, r3
 2287 020c 5FD0     		beq	.L190
 2288 020e 0CD8     		bhi	.L191
 2289 0210 45F6FB43 		movw	r3, #23803
 2290 0214 9D42     		cmp	r5, r3
 2291 0216 36D0     		beq	.L192
 2292 0218 45F6FC43 		movw	r3, #23804
 2293 021c 9D42     		cmp	r5, r3
 2294 021e 7FF46AAF 		bne	.L162
 611:quantum/quantum.c ****                         break;
 2295              		.loc 1 611 0
 2296 0222 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2297 0224 6FF30003 		bfc	r3, #0, #1
 2298 0228 2BE0     		b	.L229
 2299              	.L191:
 555:quantum/quantum.c ****                     case MAGIC_SWAP_CONTROL_CAPSLOCK:
 2300              		.loc 1 555 0
 2301 022a 45F6FF43 		movw	r3, #23807
 2302 022e 9D42     		cmp	r5, r3
 2303 0230 67D0     		beq	.L194
 2304 0232 38D3     		bcc	.L195
 2305 0234 B5F5BA4F 		cmp	r5, #23808
 2306 0238 7FF45DAF 		bne	.L162
 652:quantum/quantum.c ****                         keymap_config.swap_rctl_rgui = keymap_config.swap_lctl_lgui;
 2307              		.loc 1 652 0
 2308 023c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2309 023e C3F30002 		ubfx	r2, r3, #0, #1
 2310 0242 82F00102 		eor	r2, r2, #1
 2311 0246 62F30003 		bfi	r3, r2, #0, #1
 653:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2312              		.loc 1 653 0
 2313 024a 62F34103 		bfi	r3, r2, #1, #1
 2314 024e 6370     		strb	r3, [r4, #1]
 655:quantum/quantum.c ****                             PLAY_SONG(cg_swap_song);
 2315              		.loc 1 655 0
 2316 0250 9B07     		lsls	r3, r3, #30
 656:quantum/quantum.c ****                         } else {
 2317              		.loc 1 656 0
 2318 0252 4FF00002 		mov	r2, #0
 655:quantum/quantum.c ****                             PLAY_SONG(cg_swap_song);
 2319              		.loc 1 655 0
 2320 0256 5BD5     		bpl	.L198
 2321 0258 2AE0     		b	.L235
 2322              	.L169:
 557:quantum/quantum.c ****                         break;
 2323              		.loc 1 557 0
 2324 025a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2325 025c 43F00103 		orr	r3, r3, #1
 2326              	.L228:
 663:quantum/quantum.c ****                         break;
 2327              		.loc 1 663 0
 2328 0260 2370     		strb	r3, [r4]
 664:quantum/quantum.c ****                     default:
 2329              		.loc 1 664 0
 2330 0262 48E7     		b	.L162
 2331              	.L170:
 560:quantum/quantum.c ****                         break;
 2332              		.loc 1 560 0
 2333 0264 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2334 0266 43F00203 		orr	r3, r3, #2
 2335 026a F9E7     		b	.L228
 2336              	.L167:
 563:quantum/quantum.c ****                         break;
 2337              		.loc 1 563 0
 2338 026c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2339 026e 43F00403 		orr	r3, r3, #4
 2340 0272 F5E7     		b	.L228
 2341              	.L226:
 566:quantum/quantum.c ****                         break;
 2342              		.loc 1 566 0
 2343 0274 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2344 0276 43F00803 		orr	r3, r3, #8
 2345 027a F1E7     		b	.L228
 2346              	.L181:
 569:quantum/quantum.c ****                         break;
 2347              		.loc 1 569 0
 2348 027c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2349 027e 43F00103 		orr	r3, r3, #1
 2350              	.L229:
 572:quantum/quantum.c ****                         break;
 2351              		.loc 1 572 0
 2352 0282 6370     		strb	r3, [r4, #1]
 573:quantum/quantum.c ****                     case MAGIC_NO_GUI:
 2353              		.loc 1 573 0
 2354 0284 37E7     		b	.L162
 2355              	.L192:
 572:quantum/quantum.c ****                         break;
 2356              		.loc 1 572 0
 2357 0286 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2358 0288 43F00203 		orr	r3, r3, #2
 2359 028c F9E7     		b	.L229
 2360              	.L171:
 575:quantum/quantum.c ****                         break;
 2361              		.loc 1 575 0
 2362 028e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2363 0290 43F01003 		orr	r3, r3, #16
 2364 0294 E4E7     		b	.L228
 2365              	.L165:
 581:quantum/quantum.c ****                         break;
 2366              		.loc 1 581 0
 2367 0296 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2368 0298 43F04003 		orr	r3, r3, #64
 2369 029c E0E7     		b	.L228
 2370              	.L176:
 584:quantum/quantum.c ****                         break;
 2371              		.loc 1 584 0
 2372 029e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2373 02a0 43F08003 		orr	r3, r3, #128
 2374 02a4 DCE7     		b	.L228
 2375              	.L195:
 593:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2376              		.loc 1 593 0
 2377 02a6 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2378 02a8 43F00303 		orr	r3, r3, #3
 2379 02ac 6370     		strb	r3, [r4, #1]
 595:quantum/quantum.c **** #endif
 2380              		.loc 1 595 0
 2381 02ae 0022     		movs	r2, #0
 2382              	.L235:
 656:quantum/quantum.c ****                         } else {
 2383              		.loc 1 656 0
 2384 02b0 0421     		movs	r1, #4
 2385 02b2 2748     		ldr	r0, .L236+24
 2386 02b4 67E7     		b	.L230
 2387              	.L174:
 599:quantum/quantum.c ****                         break;
 2388              		.loc 1 599 0
 2389 02b6 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2390 02b8 6FF30003 		bfc	r3, #0, #1
 2391 02bc D0E7     		b	.L228
 2392              	.L227:
 602:quantum/quantum.c ****                         break;
 2393              		.loc 1 602 0
 2394 02be 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2395 02c0 6FF34103 		bfc	r3, #1, #1
 2396 02c4 CCE7     		b	.L228
 2397              	.L178:
 605:quantum/quantum.c ****                         break;
 2398              		.loc 1 605 0
 2399 02c6 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2400 02c8 6FF38203 		bfc	r3, #2, #1
 2401 02cc C8E7     		b	.L228
 2402              	.L190:
 614:quantum/quantum.c ****                         break;
 2403              		.loc 1 614 0
 2404 02ce 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2405 02d0 6FF34103 		bfc	r3, #1, #1
 2406 02d4 D5E7     		b	.L229
 2407              	.L163:
 617:quantum/quantum.c ****                         break;
 2408              		.loc 1 617 0
 2409 02d6 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2410 02d8 6FF30413 		bfc	r3, #4, #1
 2411 02dc C0E7     		b	.L228
 2412              	.L185:
 620:quantum/quantum.c ****                         break;
 2413              		.loc 1 620 0
 2414 02de 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2415 02e0 6FF34513 		bfc	r3, #5, #1
 2416 02e4 BCE7     		b	.L228
 2417              	.L183:
 626:quantum/quantum.c ****                         break;
 2418              		.loc 1 626 0
 2419 02e6 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2420 02e8 6FF3C713 		bfc	r3, #7, #1
 2421 02ec B8E7     		b	.L228
 2422              	.L188:
 629:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2423              		.loc 1 629 0
 2424 02ee 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2425 02f0 03F0F703 		and	r3, r3, #247
 2426 02f4 6FF38203 		bfc	r3, #2, #1
 2427 02f8 2370     		strb	r3, [r4]
 631:quantum/quantum.c **** #endif
 2428              		.loc 1 631 0
 2429 02fa 0022     		movs	r2, #0
 2430              	.L197:
 647:quantum/quantum.c ****                         }
 2431              		.loc 1 647 0
 2432 02fc 0221     		movs	r1, #2
 2433 02fe 1548     		ldr	r0, .L236+28
 2434 0300 41E7     		b	.L230
 2435              	.L194:
 635:quantum/quantum.c **** #ifdef AUDIO_ENABLE
 2436              		.loc 1 635 0
 2437 0302 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2438 0304 03F0FD03 		and	r3, r3, #253
 2439 0308 6FF30003 		bfc	r3, #0, #1
 2440 030c 6370     		strb	r3, [r4, #1]
 637:quantum/quantum.c **** #endif
 2441              		.loc 1 637 0
 2442 030e 0022     		movs	r2, #0
 2443              	.L198:
 658:quantum/quantum.c ****                         }
 2444              		.loc 1 658 0
 2445 0310 0221     		movs	r1, #2
 2446 0312 1148     		ldr	r0, .L236+32
 2447 0314 37E7     		b	.L230
 2448              	.L187:
 663:quantum/quantum.c ****                         break;
 2449              		.loc 1 663 0
 2450 0316 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2451 0318 C3F3C012 		ubfx	r2, r3, #7, #1
 2452 031c 82F00102 		eor	r2, r2, #1
 2453 0320 62F3C713 		bfi	r3, r2, #7, #1
 2454 0324 9CE7     		b	.L228
 2455              	.LVL211:
 2456              	.L199:
 2457              	.LBB21:
 712:quantum/quantum.c ****             }
 2458              		.loc 1 712 0
 2459 0326 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2460 0328 002B     		cmp	r3, #0
 2461 032a 14BF     		ite	ne
 2462 032c 3520     		movne	r0, #53
 2463              	.LVL212:
 2464 032e 2920     		moveq	r0, #41
 2465 0330 FFF7FEFF 		bl	del_key
 2466              	.LVL213:
 2467 0334 AFE6     		b	.L201
 2468              	.L237:
 2469 0336 00BF     		.align	2
 2470              	.L236:
 2471 0338 00000000 		.word	.LANCHOR6
 2472 033c 00000000 		.word	keymap_config
 2473 0340 00000000 		.word	debug_config
 2474 0344 00000000 		.word	.LC0
 2475 0348 11000000 		.word	.LC1
 2476 034c 00000000 		.word	.LANCHOR2
 2477 0350 00000000 		.word	.LANCHOR3
 2478 0354 00000000 		.word	.LANCHOR4
 2479 0358 00000000 		.word	.LANCHOR5
 2480              	.LBE21:
 2481              		.cfi_endproc
 2482              	.LFE312:
 2484              		.weak	ascii_to_keycode_lut
 2485              		.weak	ascii_to_altgr_lut
 2486              		.weak	ascii_to_shift_lut
 2487              		.global	default_layer_songs
 2488              		.global	cg_swap_song
 2489              		.global	cg_norm_song
 2490              		.global	ag_swap_song
 2491              		.global	ag_norm_song
 2492              		.global	goodbye_song
 2493              		.section	.bss.grave_esc_was_shifted,"aw",%nobits
 2494              		.set	.LANCHOR6,. + 0
 2497              	grave_esc_was_shifted:
 2498 0000 00       		.space	1
 2499              		.section	.data.ag_norm_song,"aw",%progbits
 2500              		.align	2
 2501              		.set	.LANCHOR4,. + 0
 2504              	ag_norm_song:
 2505 0000 00005C44 		.word	1146880000
 2506 0004 00000041 		.word	1090519040
 2507 0008 00005C44 		.word	1146880000
 2508 000c 00000041 		.word	1090519040
 2509              		.section	.data.ag_swap_song,"aw",%progbits
 2510              		.align	2
 2511              		.set	.LANCHOR2,. + 0
 2514              	ag_swap_song:
 2515 0000 48F17644 		.word	1148645704
 2516 0004 0000C040 		.word	1086324736
 2517 0008 00005C44 		.word	1146880000
 2518 000c 0000C040 		.word	1086324736
 2519 0010 48F17644 		.word	1148645704
 2520 0014 0000C040 		.word	1086324736
 2521 0018 00005C44 		.word	1146880000
 2522 001c 0000C040 		.word	1086324736
 2523              		.section	.data.cg_norm_song,"aw",%progbits
 2524              		.align	2
 2525              		.set	.LANCHOR5,. + 0
 2528              	cg_norm_song:
 2529 0000 00005C44 		.word	1146880000
 2530 0004 00000041 		.word	1090519040
 2531 0008 00005C44 		.word	1146880000
 2532 000c 00000041 		.word	1090519040
 2533              		.section	.data.cg_swap_song,"aw",%progbits
 2534              		.align	2
 2535              		.set	.LANCHOR3,. + 0
 2538              	cg_swap_song:
 2539 0000 48F17644 		.word	1148645704
 2540 0004 0000C040 		.word	1086324736
 2541 0008 00005C44 		.word	1146880000
 2542 000c 0000C040 		.word	1086324736
 2543 0010 48F17644 		.word	1148645704
 2544 0014 0000C040 		.word	1086324736
 2545 0018 00005C44 		.word	1146880000
 2546 001c 0000C040 		.word	1086324736
 2547              		.section	.data.default_layer_songs,"aw",%progbits
 2548              		.align	2
 2549              		.set	.LANCHOR0,. + 0
 2552              	default_layer_songs:
 2553 0000 0AA7CF44 		.word	1154459402
 2554 0004 00000041 		.word	1090519040
 2555 0008 0000DC44 		.word	1155268608
 2556 000c 00000041 		.word	1090519040
 2557 0010 0000803F 		.word	1065353216
 2558 0014 00008040 		.word	1082130432
 2559 0018 52D02445 		.word	1160040530
 2560 001c 00008041 		.word	1098907648
 2561 0020 00000000 		.space	96
 2561      00000000 
 2561      00000000 
 2561      00000000 
 2561      00000000 
 2562 0080 0AA7CF44 		.word	1154459402
 2563 0084 00000041 		.word	1090519040
 2564 0088 0000DC44 		.word	1155268608
 2565 008c 00000041 		.word	1090519040
 2566 0090 0000803F 		.word	1065353216
 2567 0094 00008040 		.word	1082130432
 2568 0098 52D02445 		.word	1160040530
 2569 009c 00004041 		.word	1094713344
 2570 00a0 0000803F 		.word	1065353216
 2571 00a4 00008040 		.word	1082130432
 2572 00a8 0AA74F45 		.word	1162848010
 2573 00ac 00004041 		.word	1094713344
 2574 00b0 00000000 		.space	80
 2574      00000000 
 2574      00000000 
 2574      00000000 
 2574      00000000 
 2575 0100 0AA7CF44 		.word	1154459402
 2576 0104 00000041 		.word	1090519040
 2577 0108 0000DC44 		.word	1155268608
 2578 010c 00000041 		.word	1090519040
 2579 0110 0000803F 		.word	1065353216
 2580 0114 00008040 		.word	1082130432
 2581 0118 52D02445 		.word	1160040530
 2582 011c 00000041 		.word	1090519040
 2583 0120 0000803F 		.word	1065353216
 2584 0124 00008040 		.word	1082130432
 2585 0128 5CFF3845 		.word	1161363292
 2586 012c 00000041 		.word	1090519040
 2587 0130 0000803F 		.word	1065353216
 2588 0134 00008040 		.word	1082130432
 2589 0138 52D02445 		.word	1160040530
 2590 013c 00000041 		.word	1090519040
 2591 0140 00000000 		.space	64
 2591      00000000 
 2591      00000000 
 2591      00000000 
 2591      00000000 
 2592              		.section	.data.goodbye_song,"aw",%progbits
 2593              		.align	2
 2594              		.set	.LANCHOR1,. + 0
 2597              	goodbye_song:
 2598 0000 52D02445 		.word	1160040530
 2599 0004 00000041 		.word	1090519040
 2600 0008 0000DC44 		.word	1155268608
 2601 000c 00000041 		.word	1090519040
 2602 0010 52D0A444 		.word	1151651922
 2603 0014 00004041 		.word	1094713344
 2604              		.section	.rodata.ascii_to_altgr_lut,"a",%progbits
 2607              	ascii_to_altgr_lut:
 2608 0000 00000000 		.space	128
 2608      00000000 
 2608      00000000 
 2608      00000000 
 2608      00000000 
 2609              		.section	.rodata.ascii_to_keycode_lut,"a",%progbits
 2612              	ascii_to_keycode_lut:
 2613 0000 00       		.byte	0
 2614 0001 00       		.byte	0
 2615 0002 00       		.byte	0
 2616 0003 00       		.byte	0
 2617 0004 00       		.byte	0
 2618 0005 00       		.byte	0
 2619 0006 00       		.byte	0
 2620 0007 00       		.byte	0
 2621 0008 2A       		.byte	42
 2622 0009 2B       		.byte	43
 2623 000a 28       		.byte	40
 2624 000b 00       		.byte	0
 2625 000c 00       		.byte	0
 2626 000d 00       		.byte	0
 2627 000e 00       		.byte	0
 2628 000f 00       		.byte	0
 2629 0010 00       		.byte	0
 2630 0011 00       		.byte	0
 2631 0012 00       		.byte	0
 2632 0013 00       		.byte	0
 2633 0014 00       		.byte	0
 2634 0015 00       		.byte	0
 2635 0016 00       		.byte	0
 2636 0017 00       		.byte	0
 2637 0018 00       		.byte	0
 2638 0019 00       		.byte	0
 2639 001a 00       		.byte	0
 2640 001b 29       		.byte	41
 2641 001c 00       		.byte	0
 2642 001d 00       		.byte	0
 2643 001e 00       		.byte	0
 2644 001f 00       		.byte	0
 2645 0020 2C       		.byte	44
 2646 0021 1E       		.byte	30
 2647 0022 34       		.byte	52
 2648 0023 20       		.byte	32
 2649 0024 21       		.byte	33
 2650 0025 22       		.byte	34
 2651 0026 24       		.byte	36
 2652 0027 34       		.byte	52
 2653 0028 26       		.byte	38
 2654 0029 27       		.byte	39
 2655 002a 25       		.byte	37
 2656 002b 2E       		.byte	46
 2657 002c 36       		.byte	54
 2658 002d 2D       		.byte	45
 2659 002e 37       		.byte	55
 2660 002f 38       		.byte	56
 2661 0030 27       		.byte	39
 2662 0031 1E       		.byte	30
 2663 0032 1F       		.byte	31
 2664 0033 20       		.byte	32
 2665 0034 21       		.byte	33
 2666 0035 22       		.byte	34
 2667 0036 23       		.byte	35
 2668 0037 24       		.byte	36
 2669 0038 25       		.byte	37
 2670 0039 26       		.byte	38
 2671 003a 33       		.byte	51
 2672 003b 33       		.byte	51
 2673 003c 36       		.byte	54
 2674 003d 2E       		.byte	46
 2675 003e 37       		.byte	55
 2676 003f 38       		.byte	56
 2677 0040 1F       		.byte	31
 2678 0041 04       		.byte	4
 2679 0042 05       		.byte	5
 2680 0043 06       		.byte	6
 2681 0044 07       		.byte	7
 2682 0045 08       		.byte	8
 2683 0046 09       		.byte	9
 2684 0047 0A       		.byte	10
 2685 0048 0B       		.byte	11
 2686 0049 0C       		.byte	12
 2687 004a 0D       		.byte	13
 2688 004b 0E       		.byte	14
 2689 004c 0F       		.byte	15
 2690 004d 10       		.byte	16
 2691 004e 11       		.byte	17
 2692 004f 12       		.byte	18
 2693 0050 13       		.byte	19
 2694 0051 14       		.byte	20
 2695 0052 15       		.byte	21
 2696 0053 16       		.byte	22
 2697 0054 17       		.byte	23
 2698 0055 18       		.byte	24
 2699 0056 19       		.byte	25
 2700 0057 1A       		.byte	26
 2701 0058 1B       		.byte	27
 2702 0059 1C       		.byte	28
 2703 005a 1D       		.byte	29
 2704 005b 2F       		.byte	47
 2705 005c 31       		.byte	49
 2706 005d 30       		.byte	48
 2707 005e 23       		.byte	35
 2708 005f 2D       		.byte	45
 2709 0060 35       		.byte	53
 2710 0061 04       		.byte	4
 2711 0062 05       		.byte	5
 2712 0063 06       		.byte	6
 2713 0064 07       		.byte	7
 2714 0065 08       		.byte	8
 2715 0066 09       		.byte	9
 2716 0067 0A       		.byte	10
 2717 0068 0B       		.byte	11
 2718 0069 0C       		.byte	12
 2719 006a 0D       		.byte	13
 2720 006b 0E       		.byte	14
 2721 006c 0F       		.byte	15
 2722 006d 10       		.byte	16
 2723 006e 11       		.byte	17
 2724 006f 12       		.byte	18
 2725 0070 13       		.byte	19
 2726 0071 14       		.byte	20
 2727 0072 15       		.byte	21
 2728 0073 16       		.byte	22
 2729 0074 17       		.byte	23
 2730 0075 18       		.byte	24
 2731 0076 19       		.byte	25
 2732 0077 1A       		.byte	26
 2733 0078 1B       		.byte	27
 2734 0079 1C       		.byte	28
 2735 007a 1D       		.byte	29
 2736 007b 2F       		.byte	47
 2737 007c 31       		.byte	49
 2738 007d 30       		.byte	48
 2739 007e 35       		.byte	53
 2740 007f 4C       		.byte	76
 2741              		.section	.rodata.ascii_to_shift_lut,"a",%progbits
 2744              	ascii_to_shift_lut:
 2745 0000 00       		.byte	0
 2746 0001 00       		.byte	0
 2747 0002 00       		.byte	0
 2748 0003 00       		.byte	0
 2749 0004 00       		.byte	0
 2750 0005 00       		.byte	0
 2751 0006 00       		.byte	0
 2752 0007 00       		.byte	0
 2753 0008 00       		.byte	0
 2754 0009 00       		.byte	0
 2755 000a 00       		.byte	0
 2756 000b 00       		.byte	0
 2757 000c 00       		.byte	0
 2758 000d 00       		.byte	0
 2759 000e 00       		.byte	0
 2760 000f 00       		.byte	0
 2761 0010 00       		.byte	0
 2762 0011 00       		.byte	0
 2763 0012 00       		.byte	0
 2764 0013 00       		.byte	0
 2765 0014 00       		.byte	0
 2766 0015 00       		.byte	0
 2767 0016 00       		.byte	0
 2768 0017 00       		.byte	0
 2769 0018 00       		.byte	0
 2770 0019 00       		.byte	0
 2771 001a 00       		.byte	0
 2772 001b 00       		.byte	0
 2773 001c 00       		.byte	0
 2774 001d 00       		.byte	0
 2775 001e 00       		.byte	0
 2776 001f 00       		.byte	0
 2777 0020 00       		.byte	0
 2778 0021 01       		.byte	1
 2779 0022 01       		.byte	1
 2780 0023 01       		.byte	1
 2781 0024 01       		.byte	1
 2782 0025 01       		.byte	1
 2783 0026 01       		.byte	1
 2784 0027 00       		.byte	0
 2785 0028 01       		.byte	1
 2786 0029 01       		.byte	1
 2787 002a 01       		.byte	1
 2788 002b 01       		.byte	1
 2789 002c 00       		.byte	0
 2790 002d 00       		.byte	0
 2791 002e 00       		.byte	0
 2792 002f 00       		.byte	0
 2793 0030 00       		.byte	0
 2794 0031 00       		.byte	0
 2795 0032 00       		.byte	0
 2796 0033 00       		.byte	0
 2797 0034 00       		.byte	0
 2798 0035 00       		.byte	0
 2799 0036 00       		.byte	0
 2800 0037 00       		.byte	0
 2801 0038 00       		.byte	0
 2802 0039 00       		.byte	0
 2803 003a 01       		.byte	1
 2804 003b 00       		.byte	0
 2805 003c 01       		.byte	1
 2806 003d 00       		.byte	0
 2807 003e 01       		.byte	1
 2808 003f 01       		.byte	1
 2809 0040 01       		.byte	1
 2810 0041 01       		.byte	1
 2811 0042 01       		.byte	1
 2812 0043 01       		.byte	1
 2813 0044 01       		.byte	1
 2814 0045 01       		.byte	1
 2815 0046 01       		.byte	1
 2816 0047 01       		.byte	1
 2817 0048 01       		.byte	1
 2818 0049 01       		.byte	1
 2819 004a 01       		.byte	1
 2820 004b 01       		.byte	1
 2821 004c 01       		.byte	1
 2822 004d 01       		.byte	1
 2823 004e 01       		.byte	1
 2824 004f 01       		.byte	1
 2825 0050 01       		.byte	1
 2826 0051 01       		.byte	1
 2827 0052 01       		.byte	1
 2828 0053 01       		.byte	1
 2829 0054 01       		.byte	1
 2830 0055 01       		.byte	1
 2831 0056 01       		.byte	1
 2832 0057 01       		.byte	1
 2833 0058 01       		.byte	1
 2834 0059 01       		.byte	1
 2835 005a 01       		.byte	1
 2836 005b 00       		.byte	0
 2837 005c 00       		.byte	0
 2838 005d 00       		.byte	0
 2839 005e 01       		.byte	1
 2840 005f 01       		.byte	1
 2841 0060 00       		.byte	0
 2842 0061 00       		.byte	0
 2843 0062 00       		.byte	0
 2844 0063 00       		.byte	0
 2845 0064 00       		.byte	0
 2846 0065 00       		.byte	0
 2847 0066 00       		.byte	0
 2848 0067 00       		.byte	0
 2849 0068 00       		.byte	0
 2850 0069 00       		.byte	0
 2851 006a 00       		.byte	0
 2852 006b 00       		.byte	0
 2853 006c 00       		.byte	0
 2854 006d 00       		.byte	0
 2855 006e 00       		.byte	0
 2856 006f 00       		.byte	0
 2857 0070 00       		.byte	0
 2858 0071 00       		.byte	0
 2859 0072 00       		.byte	0
 2860 0073 00       		.byte	0
 2861 0074 00       		.byte	0
 2862 0075 00       		.byte	0
 2863 0076 00       		.byte	0
 2864 0077 00       		.byte	0
 2865 0078 00       		.byte	0
 2866 0079 00       		.byte	0
 2867 007a 00       		.byte	0
 2868 007b 01       		.byte	1
 2869 007c 01       		.byte	1
 2870 007d 01       		.byte	1
 2871 007e 01       		.byte	1
 2872 007f 00       		.byte	0
 2873              		.section	.rodata.process_record_quantum.str1.1,"aMS",%progbits,1
 2874              	.LC0:
 2875 0000 44454255 		.ascii	"DEBUG: enabled.\012\000"
 2875      473A2065 
 2875      6E61626C 
 2875      65642E0A 
 2875      00
 2876              	.LC1:
 2877 0011 44454255 		.ascii	"DEBUG: disabled.\012\000"
 2877      473A2064 
 2877      69736162 
 2877      6C65642E 
 2877      0A00
 2878              		.text
 2879              	.Letext0:
 2880              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 2881              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 2882              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 2883              		.file 5 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 2884              		.file 6 "./lib/chibios/os/rt/include/chsystypes.h"
 2885              		.file 7 "./lib/chibios/os/rt/include/chschd.h"
 2886              		.file 8 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 2887              		.file 9 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 2888              		.file 10 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/stm32f303xc.h"
 2889              		.file 11 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 2890              		.file 12 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 2891              		.file 13 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 2892              		.file 14 "./lib/chibios/os/rt/include/chtm.h"
 2893              		.file 15 "./lib/chibios/os/rt/include/chsem.h"
 2894              		.file 16 "./lib/chibios/os/rt/include/chmtx.h"
 2895              		.file 17 "./lib/chibios/os/rt/include/chsys.h"
 2896              		.file 18 "./lib/chibios/os/rt/include/chregistry.h"
 2897              		.file 19 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 2898              		.file 20 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 2899              		.file 21 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 2900              		.file 22 "./lib/chibios/os/hal/include/hal_dac.h"
 2901              		.file 23 "./lib/chibios/os/hal/ports/STM32/LLD/DACv1/hal_dac_lld.h"
 2902              		.file 24 "./lib/chibios/os/hal/include/hal_gpt.h"
 2903              		.file 25 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_gpt_lld.h"
 2904              		.file 26 "./lib/chibios/os/hal/include/hal_i2c.h"
 2905              		.file 27 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 2906              		.file 28 "./lib/chibios/os/hal/include/hal_pwm.h"
 2907              		.file 29 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 2908              		.file 30 "./lib/chibios/os/hal/include/hal_usb.h"
 2909              		.file 31 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 2910              		.file 32 "tmk_core/common/keyboard.h"
 2911              		.file 33 "tmk_core/common/action.h"
 2912              		.file 34 "tmk_core/common/report.h"
 2913              		.file 35 "tmk_core/common/host.h"
 2914              		.file 36 "tmk_core/common/debug.h"
 2915              		.file 37 "quantum/keycode_config.h"
 2916              		.file 38 "tmk_core/common/keycode.h"
 2917              		.file 39 "quantum/quantum_keycodes.h"
 2918              		.file 40 "quantum/keymap.h"
 2919              		.file 41 "tmk_core/common/action_layer.h"
 2920              		.file 42 "tmk_core/common/timer.h"
 2921              		.file 43 "tmk_core/common/action_util.h"
 2922              		.file 44 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 2923              		.file 45 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 2924              		.file 46 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 2925              		.file 47 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 2926              		.file 48 "quantum/audio/luts.h"
 2927              		.file 49 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/math.h"
 2928              		.file 50 "quantum/process_keycode/process_music.h"
 2929              		.file 51 "quantum/quantum.h"
 2930              		.file 52 "tmk_core/common/backlight.h"
 2931              		.file 53 "quantum/rgb.h"
 2932              		.file 54 "quantum/encoder.h"
 2933              		.file 55 "quantum/dip_switch.h"
 2934              		.file 56 "tmk_core/common/eeconfig.h"
 2935              		.file 57 "quantum/audio/audio.h"
 2936              		.file 58 "tmk_core/common/matrix.h"
 2937              		.file 59 "./lib/chibios/os/rt/include/chthreads.h"
 2938              		.file 60 "tmk_core/common/bootloader.h"
 2939              		.file 61 "quantum/process_keycode/process_audio.h"
 2940              		.file 62 "quantum/process_keycode/process_space_cadet.h"
 2941              		.file 63 "tmk_core/common/chibios/printf.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 quantum.c
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:16     .text.qk_register_weak_mods:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:22     .text.qk_register_weak_mods:0000000000000000 qk_register_weak_mods
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:54     .text.qk_register_mods:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:60     .text.qk_register_mods:0000000000000000 qk_register_mods
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:71     .text.qk_unregister_weak_mods:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:77     .text.qk_unregister_weak_mods:0000000000000000 qk_unregister_weak_mods
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:109    .text.qk_unregister_mods:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:115    .text.qk_unregister_mods:0000000000000000 qk_unregister_mods
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:126    .text.do_code16:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:132    .text.do_code16:0000000000000000 do_code16
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:233    .text.rgblight_toggle:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:240    .text.rgblight_toggle:0000000000000000 rgblight_toggle
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:251    .text.rgblight_step:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:258    .text.rgblight_step:0000000000000000 rgblight_step
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:269    .text.rgblight_step_reverse:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:276    .text.rgblight_step_reverse:0000000000000000 rgblight_step_reverse
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:287    .text.rgblight_increase_hue:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:294    .text.rgblight_increase_hue:0000000000000000 rgblight_increase_hue
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:305    .text.rgblight_decrease_hue:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:312    .text.rgblight_decrease_hue:0000000000000000 rgblight_decrease_hue
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:323    .text.rgblight_increase_sat:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:330    .text.rgblight_increase_sat:0000000000000000 rgblight_increase_sat
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:341    .text.rgblight_decrease_sat:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:348    .text.rgblight_decrease_sat:0000000000000000 rgblight_decrease_sat
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:359    .text.rgblight_increase_val:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:366    .text.rgblight_increase_val:0000000000000000 rgblight_increase_val
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:377    .text.rgblight_decrease_val:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:384    .text.rgblight_decrease_val:0000000000000000 rgblight_decrease_val
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:395    .text.rgblight_increase_speed:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:402    .text.rgblight_increase_speed:0000000000000000 rgblight_increase_speed
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:413    .text.rgblight_decrease_speed:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:420    .text.rgblight_decrease_speed:0000000000000000 rgblight_decrease_speed
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:431    .text.register_code16:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:438    .text.register_code16:0000000000000000 register_code16
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:487    .text.register_code16:0000000000000024 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:493    .text.unregister_code16:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:500    .text.unregister_code16:0000000000000000 unregister_code16
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:546    .text.unregister_code16:0000000000000024 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:552    .text.tap_code16:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:559    .text.tap_code16:0000000000000000 tap_code16
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:589    .text.process_action_kb:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:596    .text.process_action_kb:0000000000000000 process_action_kb
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:612    .text.process_record_user:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:619    .text.process_record_user:0000000000000000 process_record_user
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:635    .text.process_record_kb:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:642    .text.process_record_kb:0000000000000000 process_record_kb
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:661    .text.get_event_keycode:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:668    .text.get_event_keycode:0000000000000000 get_event_keycode
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:743    .text.get_event_keycode:0000000000000044 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:748    .text.get_record_keycode:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:755    .text.get_record_keycode:0000000000000000 get_record_keycode
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:774    .text.send_char:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:781    .text.send_char:0000000000000000 send_char
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:856    .text.send_char:000000000000003c $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2612   .rodata.ascii_to_keycode_lut:0000000000000000 ascii_to_keycode_lut
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2744   .rodata.ascii_to_shift_lut:0000000000000000 ascii_to_shift_lut
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2607   .rodata.ascii_to_altgr_lut:0000000000000000 ascii_to_altgr_lut
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:863    .text.send_string_with_delay:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:870    .text.send_string_with_delay:0000000000000000 send_string_with_delay
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:981    .text.send_string:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:988    .text.send_string:0000000000000000 send_string
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1004   .text.send_string_P:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1011   .text.send_string_P:0000000000000000 send_string_P
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1022   .text.send_string_with_delay_P:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1029   .text.send_string_with_delay_P:0000000000000000 send_string_with_delay_P
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1040   .text.set_single_persistent_default_layer:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1047   .text.set_single_persistent_default_layer:0000000000000000 set_single_persistent_default_layer
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1096   .text.set_single_persistent_default_layer:0000000000000028 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1101   .text.update_tri_layer_state:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1108   .text.update_tri_layer_state:0000000000000000 update_tri_layer_state
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1142   .text.update_tri_layer:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1149   .text.update_tri_layer:0000000000000000 update_tri_layer
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1180   .text.update_tri_layer:0000000000000018 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1185   .text.tap_random_base64:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1192   .text.tap_random_base64:0000000000000000 tap_random_base64
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1317   .text.bootmagic_lite:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1324   .text.bootmagic_lite:0000000000000000 bootmagic_lite
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1370   .text.matrix_init_quantum:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1377   .text.matrix_init_quantum:0000000000000000 matrix_init_quantum
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1416   .text.matrix_scan_quantum:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1423   .text.matrix_scan_quantum:0000000000000000 matrix_scan_quantum
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1455   .text.backlight_init_ports:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1462   .text.backlight_init_ports:0000000000000000 backlight_init_ports
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1473   .text.backlight_set:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1480   .text.backlight_set:0000000000000000 backlight_set
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1491   .text.send_nibble:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1498   .text.send_nibble:0000000000000000 send_nibble
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1515   .text.send_nibble:000000000000000a $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1531   .text.send_nibble:000000000000001a $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1582   .text.send_byte:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1589   .text.send_byte:0000000000000000 send_byte
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1621   .text.send_word:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1628   .text.send_word:0000000000000000 send_word
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1660   .text.send_dword:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1667   .text.send_dword:0000000000000000 send_dword
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1700   .text.hex_to_keycode:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1707   .text.hex_to_keycode:0000000000000000 hex_to_keycode
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1740   .text.api_send_unicode:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1747   .text.api_send_unicode:0000000000000000 api_send_unicode
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1761   .text.led_set_user:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1768   .text.led_set_user:0000000000000000 led_set_user
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1782   .text.led_set_kb:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1789   .text.led_set_kb:0000000000000000 led_set_kb
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1808   .text.led_init_ports:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1815   .text.led_init_ports:0000000000000000 led_init_ports
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1828   .text.led_set:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1835   .text.led_set:0000000000000000 led_set
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1855   .text.startup_user:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1862   .text.startup_user:0000000000000000 startup_user
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1873   .text.shutdown_user:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1880   .text.shutdown_user:0000000000000000 shutdown_user
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1891   .text.reset_keyboard:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1898   .text.reset_keyboard:0000000000000000 reset_keyboard
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1961   .text.reset_keyboard:000000000000003c $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1966   .text.process_record_quantum:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:1973   .text.process_record_quantum:0000000000000000 process_record_quantum
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2471   .text.process_record_quantum:0000000000000338 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2552   .data.default_layer_songs:0000000000000000 default_layer_songs
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2538   .data.cg_swap_song:0000000000000000 cg_swap_song
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2528   .data.cg_norm_song:0000000000000000 cg_norm_song
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2514   .data.ag_swap_song:0000000000000000 ag_swap_song
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2504   .data.ag_norm_song:0000000000000000 ag_norm_song
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2597   .data.goodbye_song:0000000000000000 goodbye_song
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2497   .bss.grave_esc_was_shifted:0000000000000000 grave_esc_was_shifted
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2498   .bss.grave_esc_was_shifted:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2500   .data.ag_norm_song:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2510   .data.ag_swap_song:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2524   .data.cg_norm_song:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2534   .data.cg_swap_song:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2548   .data.default_layer_songs:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2593   .data.goodbye_song:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cckLLDxU.s:2608   .rodata.ascii_to_altgr_lut:0000000000000000 $d

UNDEFINED SYMBOLS
add_weak_mods
send_keyboard_report
del_weak_mods
register_code
unregister_code
layer_switch_get_layer
update_source_layers_cache
keymap_key_to_keycode
read_source_layers_cache
disable_action_cache
tap_code
chThdSleep
play_notes
eeconfig_update_default_layer
default_layer_set
layer_state_set
layer_state
rand
matrix_scan
matrix_get_row
eeconfig_disable
bootloader_jump
eeconfig_is_enabled
eeconfig_init
audio_init
encoder_init
dip_switch_init
matrix_init_kb
matrix_scan_music
encoder_read
dip_switch_read
matrix_scan_kb
clear_keyboard
music_all_notes_off
timer_read
timer_elapsed
stop_all_notes
process_audio
process_music
process_space_cadet
get_mods
add_key
eeconfig_read_keymap
eeconfig_update_keymap
tfp_printf
del_key
keymap_config
debug_config
