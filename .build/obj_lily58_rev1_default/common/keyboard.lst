   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.disable_jtag,"ax",@progbits
  11               	.global	disable_jtag
  13               	disable_jtag:
  14               	.LFB6:
  15               		.file 1 "tmk_core/common/keyboard.c"
   1:tmk_core/common/keyboard.c **** /*
   2:tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/keyboard.c **** 
   4:tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/keyboard.c **** (at your option) any later version.
   8:tmk_core/common/keyboard.c **** 
   9:tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:tmk_core/common/keyboard.c **** 
  14:tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/keyboard.c **** */
  17:tmk_core/common/keyboard.c **** 
  18:tmk_core/common/keyboard.c **** #include <stdint.h>
  19:tmk_core/common/keyboard.c **** #include "keyboard.h"
  20:tmk_core/common/keyboard.c **** #include "matrix.h"
  21:tmk_core/common/keyboard.c **** #include "keymap.h"
  22:tmk_core/common/keyboard.c **** #include "host.h"
  23:tmk_core/common/keyboard.c **** #include "led.h"
  24:tmk_core/common/keyboard.c **** #include "keycode.h"
  25:tmk_core/common/keyboard.c **** #include "timer.h"
  26:tmk_core/common/keyboard.c **** #include "print.h"
  27:tmk_core/common/keyboard.c **** #include "debug.h"
  28:tmk_core/common/keyboard.c **** #include "command.h"
  29:tmk_core/common/keyboard.c **** #include "util.h"
  30:tmk_core/common/keyboard.c **** #include "sendchar.h"
  31:tmk_core/common/keyboard.c **** #include "eeconfig.h"
  32:tmk_core/common/keyboard.c **** #include "backlight.h"
  33:tmk_core/common/keyboard.c **** #include "action_layer.h"
  34:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  35:tmk_core/common/keyboard.c **** #    include "bootmagic.h"
  36:tmk_core/common/keyboard.c **** #else
  37:tmk_core/common/keyboard.c **** #    include "magic.h"
  38:tmk_core/common/keyboard.c **** #endif
  39:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  40:tmk_core/common/keyboard.c **** #    include "mousekey.h"
  41:tmk_core/common/keyboard.c **** #endif
  42:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  43:tmk_core/common/keyboard.c **** #    include "ps2_mouse.h"
  44:tmk_core/common/keyboard.c **** #endif
  45:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  46:tmk_core/common/keyboard.c **** #    include "serial_mouse.h"
  47:tmk_core/common/keyboard.c **** #endif
  48:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  49:tmk_core/common/keyboard.c **** #    include "adb.h"
  50:tmk_core/common/keyboard.c **** #endif
  51:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  52:tmk_core/common/keyboard.c **** #    include "rgblight.h"
  53:tmk_core/common/keyboard.c **** #endif
  54:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
  55:tmk_core/common/keyboard.c **** #    include "process_steno.h"
  56:tmk_core/common/keyboard.c **** #endif
  57:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
  58:tmk_core/common/keyboard.c **** #    include "fauxclicky.h"
  59:tmk_core/common/keyboard.c **** #endif
  60:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  61:tmk_core/common/keyboard.c **** #    include "serial_link/system/serial_link.h"
  62:tmk_core/common/keyboard.c **** #endif
  63:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  64:tmk_core/common/keyboard.c **** #    include "visualizer/visualizer.h"
  65:tmk_core/common/keyboard.c **** #endif
  66:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
  67:tmk_core/common/keyboard.c **** #    include "pointing_device.h"
  68:tmk_core/common/keyboard.c **** #endif
  69:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
  70:tmk_core/common/keyboard.c **** #    include "process_midi.h"
  71:tmk_core/common/keyboard.c **** #endif
  72:tmk_core/common/keyboard.c **** #ifdef HD44780_ENABLE
  73:tmk_core/common/keyboard.c **** #    include "hd44780.h"
  74:tmk_core/common/keyboard.c **** #endif
  75:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
  76:tmk_core/common/keyboard.c **** #    include "qwiic.h"
  77:tmk_core/common/keyboard.c **** #endif
  78:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
  79:tmk_core/common/keyboard.c **** #    include "oled_driver.h"
  80:tmk_core/common/keyboard.c **** #endif
  81:tmk_core/common/keyboard.c **** #ifdef VELOCIKEY_ENABLE
  82:tmk_core/common/keyboard.c **** #    include "velocikey.h"
  83:tmk_core/common/keyboard.c **** #endif
  84:tmk_core/common/keyboard.c **** 
  85:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  86:tmk_core/common/keyboard.c **** extern const uint16_t keymaps[][MATRIX_ROWS][MATRIX_COLS];
  87:tmk_core/common/keyboard.c **** static matrix_row_t   get_real_keys(uint8_t row, matrix_row_t rowdata) {
  88:tmk_core/common/keyboard.c ****     matrix_row_t out = 0;
  89:tmk_core/common/keyboard.c ****     for (uint8_t col = 0; col < MATRIX_COLS; col++) {
  90:tmk_core/common/keyboard.c ****         // read each key in the row data and check if the keymap defines it as a real key
  91:tmk_core/common/keyboard.c ****         if (pgm_read_byte(&keymaps[0][row][col]) && (rowdata & (1 << col))) {
  92:tmk_core/common/keyboard.c ****             // this creates new row data, if a key is defined in the keymap, it will be set here
  93:tmk_core/common/keyboard.c ****             out |= 1 << col;
  94:tmk_core/common/keyboard.c ****         }
  95:tmk_core/common/keyboard.c ****     }
  96:tmk_core/common/keyboard.c ****     return out;
  97:tmk_core/common/keyboard.c **** }
  98:tmk_core/common/keyboard.c **** 
  99:tmk_core/common/keyboard.c **** static inline bool popcount_more_than_one(matrix_row_t rowdata) {
 100:tmk_core/common/keyboard.c ****     rowdata &= rowdata - 1;  // if there are less than two bits (keys) set, rowdata will become zer
 101:tmk_core/common/keyboard.c ****     return rowdata;
 102:tmk_core/common/keyboard.c **** }
 103:tmk_core/common/keyboard.c **** 
 104:tmk_core/common/keyboard.c **** static inline bool has_ghost_in_row(uint8_t row, matrix_row_t rowdata) {
 105:tmk_core/common/keyboard.c ****     /* No ghost exists when less than 2 keys are down on the row.
 106:tmk_core/common/keyboard.c ****     If there are "active" blanks in the matrix, the key can't be pressed by the user,
 107:tmk_core/common/keyboard.c ****     there is no doubt as to which keys are really being pressed.
 108:tmk_core/common/keyboard.c ****     The ghosts will be ignored, they are KC_NO.   */
 109:tmk_core/common/keyboard.c ****     rowdata = get_real_keys(row, rowdata);
 110:tmk_core/common/keyboard.c ****     if ((popcount_more_than_one(rowdata)) == 0) {
 111:tmk_core/common/keyboard.c ****         return false;
 112:tmk_core/common/keyboard.c ****     }
 113:tmk_core/common/keyboard.c ****     /* Ghost occurs when the row shares a column line with other row,
 114:tmk_core/common/keyboard.c ****     and two columns are read on each row. Blanks in the matrix don't matter,
 115:tmk_core/common/keyboard.c ****     so they are filtered out.
 116:tmk_core/common/keyboard.c ****     If there are two or more real keys pressed and they match columns with
 117:tmk_core/common/keyboard.c ****     at least two of another row's real keys, the row will be ignored. Keep in mind,
 118:tmk_core/common/keyboard.c ****     we are checking one row at a time, not all of them at once.
 119:tmk_core/common/keyboard.c ****     */
 120:tmk_core/common/keyboard.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 121:tmk_core/common/keyboard.c ****         if (i != row && popcount_more_than_one(get_real_keys(i, matrix_get_row(i)) & rowdata)) {
 122:tmk_core/common/keyboard.c ****             return true;
 123:tmk_core/common/keyboard.c ****         }
 124:tmk_core/common/keyboard.c ****     }
 125:tmk_core/common/keyboard.c ****     return false;
 126:tmk_core/common/keyboard.c **** }
 127:tmk_core/common/keyboard.c **** 
 128:tmk_core/common/keyboard.c **** #endif
 129:tmk_core/common/keyboard.c **** 
 130:tmk_core/common/keyboard.c **** void disable_jtag(void) {
  16               		.loc 1 130 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
 131:tmk_core/common/keyboard.c **** // To use PF4-7 (PC2-5 on ATmega32A), disable JTAG by writing JTD bit twice within four cycles.
 132:tmk_core/common/keyboard.c **** #if (defined(__AVR_AT90USB646__) || defined(__AVR_AT90USB647__) || defined(__AVR_AT90USB1286__) || 
 133:tmk_core/common/keyboard.c ****     MCUCR |= _BV(JTD);
  22               		.loc 1 133 0
  23 0000 85B7      		in r24,0x35
  24 0002 8068      		ori r24,lo8(-128)
  25 0004 85BF      		out 0x35,r24
 134:tmk_core/common/keyboard.c ****     MCUCR |= _BV(JTD);
  26               		.loc 1 134 0
  27 0006 85B7      		in r24,0x35
  28 0008 8068      		ori r24,lo8(-128)
  29 000a 85BF      		out 0x35,r24
  30               	/* epilogue start */
 135:tmk_core/common/keyboard.c **** #elif defined(__AVR_ATmega32A__)
 136:tmk_core/common/keyboard.c ****     MCUCSR |= _BV(JTD);
 137:tmk_core/common/keyboard.c ****     MCUCSR |= _BV(JTD);
 138:tmk_core/common/keyboard.c **** #endif
 139:tmk_core/common/keyboard.c **** }
  31               		.loc 1 139 0
  32 000c 0895      		ret
  33               		.cfi_endproc
  34               	.LFE6:
  36               		.section	.text.keyboard_pre_init_user,"ax",@progbits
  37               		.weak	keyboard_pre_init_user
  39               	keyboard_pre_init_user:
  40               	.LFB8:
 140:tmk_core/common/keyboard.c **** 
 141:tmk_core/common/keyboard.c **** /** \brief matrix_setup
 142:tmk_core/common/keyboard.c ****  *
 143:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 144:tmk_core/common/keyboard.c ****  */
 145:tmk_core/common/keyboard.c **** __attribute__((weak)) void matrix_setup(void) {}
 146:tmk_core/common/keyboard.c **** 
 147:tmk_core/common/keyboard.c **** /** \brief keyboard_pre_init_user
 148:tmk_core/common/keyboard.c ****  *
 149:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 150:tmk_core/common/keyboard.c ****  */
 151:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_pre_init_user(void) {}
  41               		.loc 1 151 0
  42               		.cfi_startproc
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 0 */
  46               	.L__stack_usage = 0
  47               	/* epilogue start */
  48               		.loc 1 151 0
  49 0000 0895      		ret
  50               		.cfi_endproc
  51               	.LFE8:
  53               		.set	keyboard_pre_init_user.localalias.0,keyboard_pre_init_user
  54               		.section	.text.matrix_setup,"ax",@progbits
  55               		.weak	matrix_setup
  57               	matrix_setup:
  58               	.LFB20:
  59               		.cfi_startproc
  60               	/* prologue: function */
  61               	/* frame size = 0 */
  62               	/* stack size = 0 */
  63               	.L__stack_usage = 0
  64               	/* epilogue start */
  65 0000 0895      		ret
  66               		.cfi_endproc
  67               	.LFE20:
  69               		.section	.text.keyboard_pre_init_kb,"ax",@progbits
  70               		.weak	keyboard_pre_init_kb
  72               	keyboard_pre_init_kb:
  73               	.LFB9:
 152:tmk_core/common/keyboard.c **** 
 153:tmk_core/common/keyboard.c **** /** \brief keyboard_pre_init_kb
 154:tmk_core/common/keyboard.c ****  *
 155:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 156:tmk_core/common/keyboard.c ****  */
 157:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_pre_init_kb(void) { keyboard_pre_init_user(); }
  74               		.loc 1 157 0
  75               		.cfi_startproc
  76               	/* prologue: function */
  77               	/* frame size = 0 */
  78               	/* stack size = 0 */
  79               	.L__stack_usage = 0
  80               		.loc 1 157 0
  81 0000 0C94 0000 		jmp keyboard_pre_init_user
  82               	.LVL0:
  83               		.cfi_endproc
  84               	.LFE9:
  86               		.section	.text.keyboard_post_init_user,"ax",@progbits
  87               		.weak	keyboard_post_init_user
  89               	keyboard_post_init_user:
  90               	.LFB18:
  91               		.cfi_startproc
  92               	/* prologue: function */
  93               	/* frame size = 0 */
  94               	/* stack size = 0 */
  95               	.L__stack_usage = 0
  96               	/* epilogue start */
  97 0000 0895      		ret
  98               		.cfi_endproc
  99               	.LFE18:
 101               		.section	.text.keyboard_post_init_kb,"ax",@progbits
 102               		.weak	keyboard_post_init_kb
 104               	keyboard_post_init_kb:
 105               	.LFB11:
 158:tmk_core/common/keyboard.c **** 
 159:tmk_core/common/keyboard.c **** /** \brief keyboard_post_init_user
 160:tmk_core/common/keyboard.c ****  *
 161:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 162:tmk_core/common/keyboard.c ****  */
 163:tmk_core/common/keyboard.c **** 
 164:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_post_init_user() {}
 165:tmk_core/common/keyboard.c **** 
 166:tmk_core/common/keyboard.c **** /** \brief keyboard_post_init_kb
 167:tmk_core/common/keyboard.c ****  *
 168:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 169:tmk_core/common/keyboard.c ****  */
 170:tmk_core/common/keyboard.c **** 
 171:tmk_core/common/keyboard.c **** __attribute__((weak)) void keyboard_post_init_kb(void) { keyboard_post_init_user(); }
 106               		.loc 1 171 0
 107               		.cfi_startproc
 108               	/* prologue: function */
 109               	/* frame size = 0 */
 110               	/* stack size = 0 */
 111               	.L__stack_usage = 0
 112               		.loc 1 171 0
 113 0000 0C94 0000 		jmp keyboard_post_init_user
 114               	.LVL1:
 115               		.cfi_endproc
 116               	.LFE11:
 118               		.section	.text.keyboard_setup,"ax",@progbits
 119               	.global	keyboard_setup
 121               	keyboard_setup:
 122               	.LFB12:
 172:tmk_core/common/keyboard.c **** 
 173:tmk_core/common/keyboard.c **** /** \brief keyboard_setup
 174:tmk_core/common/keyboard.c ****  *
 175:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 176:tmk_core/common/keyboard.c ****  */
 177:tmk_core/common/keyboard.c **** void keyboard_setup(void) {
 123               		.loc 1 177 0
 124               		.cfi_startproc
 125               	/* prologue: function */
 126               	/* frame size = 0 */
 127               	/* stack size = 0 */
 128               	.L__stack_usage = 0
 178:tmk_core/common/keyboard.c **** #ifndef NO_JTAG_DISABLE
 179:tmk_core/common/keyboard.c ****     disable_jtag();
 129               		.loc 1 179 0
 130 0000 0E94 0000 		call disable_jtag
 131               	.LVL2:
 180:tmk_core/common/keyboard.c **** #endif
 181:tmk_core/common/keyboard.c ****     matrix_setup();
 132               		.loc 1 181 0
 133 0004 0E94 0000 		call matrix_setup
 134               	.LVL3:
 182:tmk_core/common/keyboard.c ****     keyboard_pre_init_kb();
 135               		.loc 1 182 0
 136 0008 0C94 0000 		jmp keyboard_pre_init_kb
 137               	.LVL4:
 138               		.cfi_endproc
 139               	.LFE12:
 141               		.section	.text.is_keyboard_master,"ax",@progbits
 142               		.weak	is_keyboard_master
 144               	is_keyboard_master:
 145               	.LFB13:
 183:tmk_core/common/keyboard.c **** }
 184:tmk_core/common/keyboard.c **** 
 185:tmk_core/common/keyboard.c **** /** \brief is_keyboard_master
 186:tmk_core/common/keyboard.c ****  *
 187:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 188:tmk_core/common/keyboard.c ****  */
 189:tmk_core/common/keyboard.c **** __attribute__((weak)) bool is_keyboard_master(void) { return true; }
 146               		.loc 1 189 0
 147               		.cfi_startproc
 148               	/* prologue: function */
 149               	/* frame size = 0 */
 150               	/* stack size = 0 */
 151               	.L__stack_usage = 0
 152               		.loc 1 189 0
 153 0000 81E0      		ldi r24,lo8(1)
 154               	/* epilogue start */
 155 0002 0895      		ret
 156               		.cfi_endproc
 157               	.LFE13:
 159               		.section	.text.keyboard_init,"ax",@progbits
 160               	.global	keyboard_init
 162               	keyboard_init:
 163               	.LFB14:
 190:tmk_core/common/keyboard.c **** 
 191:tmk_core/common/keyboard.c **** /** \brief keyboard_init
 192:tmk_core/common/keyboard.c ****  *
 193:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 194:tmk_core/common/keyboard.c ****  */
 195:tmk_core/common/keyboard.c **** void keyboard_init(void) {
 164               		.loc 1 195 0
 165               		.cfi_startproc
 166               	/* prologue: function */
 167               	/* frame size = 0 */
 168               	/* stack size = 0 */
 169               	.L__stack_usage = 0
 196:tmk_core/common/keyboard.c ****     timer_init();
 170               		.loc 1 196 0
 171 0000 0E94 0000 		call timer_init
 172               	.LVL5:
 197:tmk_core/common/keyboard.c ****     matrix_init();
 173               		.loc 1 197 0
 174 0004 0E94 0000 		call matrix_init
 175               	.LVL6:
 198:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
 199:tmk_core/common/keyboard.c ****     qwiic_init();
 200:tmk_core/common/keyboard.c **** #endif
 201:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
 202:tmk_core/common/keyboard.c ****     oled_init(OLED_ROTATION_0);
 203:tmk_core/common/keyboard.c **** #endif
 204:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 205:tmk_core/common/keyboard.c ****     ps2_mouse_init();
 206:tmk_core/common/keyboard.c **** #endif
 207:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 208:tmk_core/common/keyboard.c ****     serial_mouse_init();
 209:tmk_core/common/keyboard.c **** #endif
 210:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 211:tmk_core/common/keyboard.c ****     adb_mouse_init();
 212:tmk_core/common/keyboard.c **** #endif
 213:tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 214:tmk_core/common/keyboard.c ****     bootmagic();
 215:tmk_core/common/keyboard.c **** #else
 216:tmk_core/common/keyboard.c ****     magic();
 176               		.loc 1 216 0
 177 0008 0E94 0000 		call magic
 178               	.LVL7:
 217:tmk_core/common/keyboard.c **** #endif
 218:tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 219:tmk_core/common/keyboard.c ****     backlight_init();
 220:tmk_core/common/keyboard.c **** #endif
 221:tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 222:tmk_core/common/keyboard.c ****     rgblight_init();
 179               		.loc 1 222 0
 180 000c 0E94 0000 		call rgblight_init
 181               	.LVL8:
 223:tmk_core/common/keyboard.c **** #endif
 224:tmk_core/common/keyboard.c **** #ifdef STENO_ENABLE
 225:tmk_core/common/keyboard.c ****     steno_init();
 226:tmk_core/common/keyboard.c **** #endif
 227:tmk_core/common/keyboard.c **** #ifdef FAUXCLICKY_ENABLE
 228:tmk_core/common/keyboard.c ****     fauxclicky_init();
 229:tmk_core/common/keyboard.c **** #endif
 230:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 231:tmk_core/common/keyboard.c ****     pointing_device_init();
 232:tmk_core/common/keyboard.c **** #endif
 233:tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 234:tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 235:tmk_core/common/keyboard.c **** #endif
 236:tmk_core/common/keyboard.c ****     keyboard_post_init_kb(); /* Always keep this last */
 182               		.loc 1 236 0
 183 0010 0C94 0000 		jmp keyboard_post_init_kb
 184               	.LVL9:
 185               		.cfi_endproc
 186               	.LFE14:
 188               		.section	.text.keyboard_task,"ax",@progbits
 189               	.global	keyboard_task
 191               	keyboard_task:
 192               	.LFB15:
 237:tmk_core/common/keyboard.c **** }
 238:tmk_core/common/keyboard.c **** 
 239:tmk_core/common/keyboard.c **** /** \brief Keyboard task: Do keyboard routine jobs
 240:tmk_core/common/keyboard.c ****  *
 241:tmk_core/common/keyboard.c ****  * Do routine keyboard jobs:
 242:tmk_core/common/keyboard.c ****  *
 243:tmk_core/common/keyboard.c ****  * * scan matrix
 244:tmk_core/common/keyboard.c ****  * * handle mouse movements
 245:tmk_core/common/keyboard.c ****  * * run visualizer code
 246:tmk_core/common/keyboard.c ****  * * handle midi commands
 247:tmk_core/common/keyboard.c ****  * * light LEDs
 248:tmk_core/common/keyboard.c ****  *
 249:tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 250:tmk_core/common/keyboard.c ****  */
 251:tmk_core/common/keyboard.c **** void keyboard_task(void) {
 193               		.loc 1 251 0
 194               		.cfi_startproc
 195 0000 BF92      		push r11
 196               	.LCFI0:
 197               		.cfi_def_cfa_offset 3
 198               		.cfi_offset 11, -2
 199 0002 CF92      		push r12
 200               	.LCFI1:
 201               		.cfi_def_cfa_offset 4
 202               		.cfi_offset 12, -3
 203 0004 DF92      		push r13
 204               	.LCFI2:
 205               		.cfi_def_cfa_offset 5
 206               		.cfi_offset 13, -4
 207 0006 EF92      		push r14
 208               	.LCFI3:
 209               		.cfi_def_cfa_offset 6
 210               		.cfi_offset 14, -5
 211 0008 FF92      		push r15
 212               	.LCFI4:
 213               		.cfi_def_cfa_offset 7
 214               		.cfi_offset 15, -6
 215 000a 0F93      		push r16
 216               	.LCFI5:
 217               		.cfi_def_cfa_offset 8
 218               		.cfi_offset 16, -7
 219 000c 1F93      		push r17
 220               	.LCFI6:
 221               		.cfi_def_cfa_offset 9
 222               		.cfi_offset 17, -8
 223 000e CF93      		push r28
 224               	.LCFI7:
 225               		.cfi_def_cfa_offset 10
 226               		.cfi_offset 28, -9
 227 0010 DF93      		push r29
 228               	.LCFI8:
 229               		.cfi_def_cfa_offset 11
 230               		.cfi_offset 29, -10
 231 0012 CDB7      		in r28,__SP_L__
 232 0014 DEB7      		in r29,__SP_H__
 233               	.LCFI9:
 234               		.cfi_def_cfa_register 28
 235 0016 2A97      		sbiw r28,10
 236               	.LCFI10:
 237               		.cfi_def_cfa_offset 21
 238 0018 0FB6      		in __tmp_reg__,__SREG__
 239 001a F894      		cli
 240 001c DEBF      		out __SP_H__,r29
 241 001e 0FBE      		out __SREG__,__tmp_reg__
 242 0020 CDBF      		out __SP_L__,r28
 243               	/* prologue: function */
 244               	/* frame size = 10 */
 245               	/* stack size = 19 */
 246               	.L__stack_usage = 19
 247               	.LVL10:
 252:tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 253:tmk_core/common/keyboard.c ****     static uint8_t      led_status    = 0;
 254:tmk_core/common/keyboard.c ****     matrix_row_t        matrix_row    = 0;
 255:tmk_core/common/keyboard.c ****     matrix_row_t        matrix_change = 0;
 256:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 257:tmk_core/common/keyboard.c ****     uint8_t keys_processed = 0;
 258:tmk_core/common/keyboard.c **** #endif
 259:tmk_core/common/keyboard.c **** 
 260:tmk_core/common/keyboard.c **** #if defined(OLED_DRIVER_ENABLE) && !defined(OLED_DISABLE_TIMEOUT)
 261:tmk_core/common/keyboard.c ****     uint8_t ret = matrix_scan();
 262:tmk_core/common/keyboard.c **** #else
 263:tmk_core/common/keyboard.c ****     matrix_scan();
 248               		.loc 1 263 0
 249 0022 0E94 0000 		call matrix_scan
 250               	.LVL11:
 264:tmk_core/common/keyboard.c **** #endif
 265:tmk_core/common/keyboard.c **** 
 266:tmk_core/common/keyboard.c ****     if (is_keyboard_master()) {
 251               		.loc 1 266 0
 252 0026 0E94 0000 		call is_keyboard_master
 253               	.LVL12:
 254 002a 8823      		tst r24
 255 002c 01F4      		brne .+2
 256 002e 00C0      		rjmp .L11
 257 0030 80E0      		ldi r24,lo8(matrix_prev.3139)
 258 0032 C82E      		mov r12,r24
 259 0034 80E0      		ldi r24,hi8(matrix_prev.3139)
 260 0036 D82E      		mov r13,r24
 261 0038 10E0      		ldi r17,0
 262 003a 00E0      		ldi r16,0
 263               	.LVL13:
 264               	.L18:
 265 003c B02E      		mov r11,r16
 266               	.LVL14:
 267               	.LBB6:
 267:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 268:tmk_core/common/keyboard.c ****             matrix_row    = matrix_get_row(r);
 268               		.loc 1 268 0
 269 003e 802F      		mov r24,r16
 270 0040 0E94 0000 		call matrix_get_row
 271               	.LVL15:
 272 0044 E82E      		mov r14,r24
 273               	.LVL16:
 269:tmk_core/common/keyboard.c ****             matrix_change = matrix_row ^ matrix_prev[r];
 274               		.loc 1 269 0
 275 0046 F601      		movw r30,r12
 276 0048 F190      		ld r15,Z+
 277 004a 6F01      		movw r12,r30
 278               	.LVL17:
 270:tmk_core/common/keyboard.c ****             if (matrix_change) {
 279               		.loc 1 270 0
 280 004c F816      		cp r15,r24
 281 004e 01F4      		brne .+2
 282 0050 00C0      		rjmp .L12
 271:tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 272:tmk_core/common/keyboard.c ****                 if (has_ghost_in_row(r, matrix_row)) {
 273:tmk_core/common/keyboard.c ****                     continue;
 274:tmk_core/common/keyboard.c ****                 }
 275:tmk_core/common/keyboard.c **** #endif
 276:tmk_core/common/keyboard.c ****                 if (debug_matrix) matrix_print();
 283               		.loc 1 276 0
 284 0052 8091 0000 		lds r24,debug_config
 285 0056 81FD      		sbrc r24,1
 286               		.loc 1 276 0 is_stmt 0 discriminator 1
 287 0058 0E94 0000 		call matrix_print
 288               	.LVL18:
 289               	.L13:
 290               	.LBE6:
 266:tmk_core/common/keyboard.c ****         for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 291               		.loc 1 266 0 is_stmt 1
 292 005c 90E0      		ldi r25,0
 293 005e 80E0      		ldi r24,0
 294               	.LBB9:
 269:tmk_core/common/keyboard.c ****             if (matrix_change) {
 295               		.loc 1 269 0
 296 0060 FE24      		eor r15,r14
 297               	.LVL19:
 298               	.LBB7:
 277:tmk_core/common/keyboard.c ****                 for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 278:tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1 << c)) {
 299               		.loc 1 278 0
 300 0062 2F2D      		mov r18,r15
 301 0064 30E0      		ldi r19,0
 302               	.LVL20:
 303               	.L17:
 304 0066 482F      		mov r20,r24
 305               	.LVL21:
 306 0068 B901      		movw r22,r18
 307 006a 082E      		mov r0,r24
 308 006c 00C0      		rjmp 2f
 309               		1:
 310 006e 7595      		asr r23
 311 0070 6795      		ror r22
 312               		2:
 313 0072 0A94      		dec r0
 314 0074 02F4      		brpl 1b
 315 0076 60FF      		sbrs r22,0
 316 0078 00C0      		rjmp .L14
 279:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 317               		.loc 1 279 0
 318 007a 8E83      		std Y+6,r24
 319 007c BF82      		std Y+7,r11
 280:tmk_core/common/keyboard.c ****                             .key = (keypos_t){.row = r, .col = c}, .pressed = (matrix_row & ((matri
 320               		.loc 1 280 0
 321 007e 81E0      		ldi r24,lo8(1)
 322 0080 90E0      		ldi r25,0
 323               	.LVL22:
 324 0082 6C01      		movw r12,r24
 325 0084 00C0      		rjmp 2f
 326               		1:
 327 0086 CC0C      		lsl r12
 328 0088 DD1C      		rol r13
 329               		2:
 330 008a 4A95      		dec r20
 331 008c 02F4      		brpl 1b
 332 008e 2E2D      		mov r18,r14
 333 0090 30E0      		ldi r19,0
 334 0092 2C21      		and r18,r12
 335 0094 3D21      		and r19,r13
 336 0096 232B      		or r18,r19
 337 0098 01F4      		brne .L15
 338 009a 80E0      		ldi r24,0
 339               	.L15:
 279:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 340               		.loc 1 279 0
 341 009c 8887      		std Y+8,r24
 342               		.loc 1 280 0
 343 009e 0E94 0000 		call timer_read
 344               	.LVL23:
 345 00a2 8160      		ori r24,1
 279:tmk_core/common/keyboard.c ****                         action_exec((keyevent_t){
 346               		.loc 1 279 0
 347 00a4 782F      		mov r23,r24
 348 00a6 9A87      		std Y+10,r25
 349 00a8 8987      		std Y+9,r24
 350 00aa 4E81      		ldd r20,Y+6
 351 00ac 5F81      		ldd r21,Y+7
 352 00ae 6885      		ldd r22,Y+8
 353 00b0 8A85      		ldd r24,Y+10
 354 00b2 0E94 0000 		call action_exec
 355               	.LVL24:
 281:tmk_core/common/keyboard.c ****                         });
 282:tmk_core/common/keyboard.c ****                         // record a processed key
 283:tmk_core/common/keyboard.c ****                         matrix_prev[r] ^= ((matrix_row_t)1 << c);
 356               		.loc 1 283 0
 357 00b6 F801      		movw r30,r16
 358 00b8 E050      		subi r30,lo8(-(matrix_prev.3139))
 359 00ba F040      		sbci r31,hi8(-(matrix_prev.3139))
 360 00bc 8081      		ld r24,Z
 361 00be 8C25      		eor r24,r12
 362 00c0 8083      		st Z,r24
 363               	.LVL25:
 364               	.L16:
 365               	.LBE7:
 366               	.LBE9:
 284:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 285:tmk_core/common/keyboard.c ****                         // only jump out if we have processed "enough" keys.
 286:tmk_core/common/keyboard.c ****                         if (++keys_processed >= QMK_KEYS_PER_SCAN)
 287:tmk_core/common/keyboard.c **** #endif
 288:tmk_core/common/keyboard.c ****                             // process a key per task call
 289:tmk_core/common/keyboard.c ****                             goto MATRIX_LOOP_END;
 290:tmk_core/common/keyboard.c ****                     }
 291:tmk_core/common/keyboard.c ****                 }
 292:tmk_core/common/keyboard.c ****             }
 293:tmk_core/common/keyboard.c ****         }
 294:tmk_core/common/keyboard.c ****     }
 295:tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 296:tmk_core/common/keyboard.c **** #ifdef QMK_KEYS_PER_SCAN
 297:tmk_core/common/keyboard.c ****     // we can get here with some keys processed now.
 298:tmk_core/common/keyboard.c ****     if (!keys_processed)
 299:tmk_core/common/keyboard.c **** #endif
 300:tmk_core/common/keyboard.c ****         action_exec(TICK);
 301:tmk_core/common/keyboard.c **** 
 302:tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 303:tmk_core/common/keyboard.c **** 
 304:tmk_core/common/keyboard.c **** #ifdef QWIIC_ENABLE
 305:tmk_core/common/keyboard.c ****     qwiic_task();
 306:tmk_core/common/keyboard.c **** #endif
 307:tmk_core/common/keyboard.c **** 
 308:tmk_core/common/keyboard.c **** #ifdef OLED_DRIVER_ENABLE
 309:tmk_core/common/keyboard.c ****     oled_task();
 310:tmk_core/common/keyboard.c **** #    ifndef OLED_DISABLE_TIMEOUT
 311:tmk_core/common/keyboard.c ****     // Wake up oled if user is using those fabulous keys!
 312:tmk_core/common/keyboard.c ****     if (ret) oled_on();
 313:tmk_core/common/keyboard.c **** #    endif
 314:tmk_core/common/keyboard.c **** #endif
 315:tmk_core/common/keyboard.c **** 
 316:tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 317:tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 318:tmk_core/common/keyboard.c ****     mousekey_task();
 319:tmk_core/common/keyboard.c **** #endif
 320:tmk_core/common/keyboard.c **** 
 321:tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 322:tmk_core/common/keyboard.c ****     ps2_mouse_task();
 323:tmk_core/common/keyboard.c **** #endif
 324:tmk_core/common/keyboard.c **** 
 325:tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 326:tmk_core/common/keyboard.c ****     serial_mouse_task();
 327:tmk_core/common/keyboard.c **** #endif
 328:tmk_core/common/keyboard.c **** 
 329:tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 330:tmk_core/common/keyboard.c ****     adb_mouse_task();
 331:tmk_core/common/keyboard.c **** #endif
 332:tmk_core/common/keyboard.c **** 
 333:tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 334:tmk_core/common/keyboard.c ****     serial_link_update();
 335:tmk_core/common/keyboard.c **** #endif
 336:tmk_core/common/keyboard.c **** 
 337:tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 338:tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, visualizer_get_mods(), host_keyboard_leds()
 339:tmk_core/common/keyboard.c **** #endif
 340:tmk_core/common/keyboard.c **** 
 341:tmk_core/common/keyboard.c **** #ifdef POINTING_DEVICE_ENABLE
 342:tmk_core/common/keyboard.c ****     pointing_device_task();
 343:tmk_core/common/keyboard.c **** #endif
 344:tmk_core/common/keyboard.c **** 
 345:tmk_core/common/keyboard.c **** #ifdef MIDI_ENABLE
 346:tmk_core/common/keyboard.c ****     midi_task();
 347:tmk_core/common/keyboard.c **** #endif
 348:tmk_core/common/keyboard.c **** 
 349:tmk_core/common/keyboard.c **** #ifdef VELOCIKEY_ENABLE
 350:tmk_core/common/keyboard.c ****     if (velocikey_enabled()) {
 351:tmk_core/common/keyboard.c ****         velocikey_decelerate();
 352:tmk_core/common/keyboard.c ****     }
 353:tmk_core/common/keyboard.c **** #endif
 354:tmk_core/common/keyboard.c **** 
 355:tmk_core/common/keyboard.c ****     // update LED
 356:tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 367               		.loc 1 356 0
 368 00c2 0E94 0000 		call host_keyboard_leds
 369               	.LVL26:
 370 00c6 9091 0000 		lds r25,led_status.3140
 371 00ca 8917      		cp r24,r25
 372 00cc 01F0      		breq .L10
 357:tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 373               		.loc 1 357 0
 374 00ce 0E94 0000 		call host_keyboard_leds
 375               	.LVL27:
 376 00d2 8093 0000 		sts led_status.3140,r24
 377               	.LVL28:
 378               	/* epilogue start */
 358:tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 359:tmk_core/common/keyboard.c ****     }
 360:tmk_core/common/keyboard.c **** }
 379               		.loc 1 360 0
 380 00d6 2A96      		adiw r28,10
 381 00d8 0FB6      		in __tmp_reg__,__SREG__
 382 00da F894      		cli
 383 00dc DEBF      		out __SP_H__,r29
 384 00de 0FBE      		out __SREG__,__tmp_reg__
 385 00e0 CDBF      		out __SP_L__,r28
 386 00e2 DF91      		pop r29
 387 00e4 CF91      		pop r28
 388 00e6 1F91      		pop r17
 389 00e8 0F91      		pop r16
 390 00ea FF90      		pop r15
 391 00ec EF90      		pop r14
 392 00ee DF90      		pop r13
 393 00f0 CF90      		pop r12
 394 00f2 BF90      		pop r11
 395               	.LBB10:
 396               	.LBB11:
 361:tmk_core/common/keyboard.c **** 
 362:tmk_core/common/keyboard.c **** /** \brief keyboard set leds
 363:tmk_core/common/keyboard.c ****  *
 364:tmk_core/common/keyboard.c ****  * FIXME: needs doc
 365:tmk_core/common/keyboard.c ****  */
 366:tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds) {
 367:tmk_core/common/keyboard.c ****     if (debug_keyboard) {
 368:tmk_core/common/keyboard.c ****         debug("keyboard_set_led: ");
 369:tmk_core/common/keyboard.c ****         debug_hex8(leds);
 370:tmk_core/common/keyboard.c ****         debug("\n");
 371:tmk_core/common/keyboard.c ****     }
 372:tmk_core/common/keyboard.c ****     led_set(leds);
 397               		.loc 1 372 0
 398 00f4 0C94 0000 		jmp led_set
 399               	.LVL29:
 400               	.L14:
 401 00f8 0196      		adiw r24,1
 402               	.LVL30:
 403               	.LBE11:
 404               	.LBE10:
 405               	.LBB12:
 406               	.LBB8:
 277:tmk_core/common/keyboard.c ****                     if (matrix_change & ((matrix_row_t)1 << c)) {
 407               		.loc 1 277 0 discriminator 2
 408 00fa 8630      		cpi r24,6
 409 00fc 9105      		cpc r25,__zero_reg__
 410 00fe 01F0      		breq .+2
 411 0100 00C0      		rjmp .L17
 412               	.LVL31:
 413               	.L12:
 414 0102 0F5F      		subi r16,-1
 415 0104 1F4F      		sbci r17,-1
 416               	.LVL32:
 417               	.LBE8:
 267:tmk_core/common/keyboard.c ****             matrix_row    = matrix_get_row(r);
 418               		.loc 1 267 0
 419 0106 0A30      		cpi r16,10
 420 0108 1105      		cpc r17,__zero_reg__
 421 010a 01F0      		breq .+2
 422 010c 00C0      		rjmp .L18
 423               	.LVL33:
 424               	.L11:
 425               	.LBE12:
 300:tmk_core/common/keyboard.c **** 
 426               		.loc 1 300 0
 427 010e 8FEF      		ldi r24,lo8(-1)
 428 0110 8983      		std Y+1,r24
 429 0112 8A83      		std Y+2,r24
 430 0114 1B82      		std Y+3,__zero_reg__
 431 0116 0E94 0000 		call timer_read
 432               	.LVL34:
 433 011a 8160      		ori r24,1
 434 011c 782F      		mov r23,r24
 435 011e 9D83      		std Y+5,r25
 436 0120 8C83      		std Y+4,r24
 437 0122 4981      		ldd r20,Y+1
 438 0124 5A81      		ldd r21,Y+2
 439 0126 6B81      		ldd r22,Y+3
 440 0128 8D81      		ldd r24,Y+5
 441 012a 0E94 0000 		call action_exec
 442               	.LVL35:
 443 012e 00C0      		rjmp .L16
 444               	.L10:
 445               	/* epilogue start */
 360:tmk_core/common/keyboard.c **** 
 446               		.loc 1 360 0
 447 0130 2A96      		adiw r28,10
 448 0132 0FB6      		in __tmp_reg__,__SREG__
 449 0134 F894      		cli
 450 0136 DEBF      		out __SP_H__,r29
 451 0138 0FBE      		out __SREG__,__tmp_reg__
 452 013a CDBF      		out __SP_L__,r28
 453 013c DF91      		pop r29
 454 013e CF91      		pop r28
 455 0140 1F91      		pop r17
 456 0142 0F91      		pop r16
 457 0144 FF90      		pop r15
 458 0146 EF90      		pop r14
 459 0148 DF90      		pop r13
 460 014a CF90      		pop r12
 461 014c BF90      		pop r11
 462 014e 0895      		ret
 463               		.cfi_endproc
 464               	.LFE15:
 466               		.section	.text.keyboard_set_leds,"ax",@progbits
 467               	.global	keyboard_set_leds
 469               	keyboard_set_leds:
 470               	.LFB16:
 366:tmk_core/common/keyboard.c ****     if (debug_keyboard) {
 471               		.loc 1 366 0
 472               		.cfi_startproc
 473               	.LVL36:
 474               	/* prologue: function */
 475               	/* frame size = 0 */
 476               	/* stack size = 0 */
 477               	.L__stack_usage = 0
 478               		.loc 1 372 0
 479 0000 0C94 0000 		jmp led_set
 480               	.LVL37:
 481               		.cfi_endproc
 482               	.LFE16:
 484               		.section	.bss.led_status.3140,"aw",@nobits
 487               	led_status.3140:
 488 0000 00        		.zero	1
 489               		.section	.bss.matrix_prev.3139,"aw",@nobits
 492               	matrix_prev.3139:
 493 0000 0000 0000 		.zero	10
 493      0000 0000 
 493      0000 
 494               		.text
 495               	.Letext0:
 496               		.file 2 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/stdint.h"
 497               		.file 3 "tmk_core/common/keyboard.h"
 498               		.file 4 "tmk_core/common/matrix.h"
 499               		.file 5 "tmk_core/common/action.h"
 500               		.file 6 "tmk_core/common/host.h"
 501               		.file 7 "tmk_core/common/debug.h"
 502               		.file 8 "quantum/keycode_config.h"
 503               		.file 9 "quantum/keymap.h"
 504               		.file 10 "tmk_core/common/timer.h"
 505               		.file 11 "tmk_core/common/command.h"
 506               		.file 12 "tmk_core/common/action_layer.h"
 507               		.file 13 "./quantum/color.h"
 508               		.file 14 "quantum/rgblight.h"
 509               		.file 15 "tmk_core/common/led.h"
 510               		.file 16 "tmk_core/common/magic.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 keyboard.c
/var/tmp//cckkrx5B.s:2      *ABS*:000000000000003e __SP_H__
/var/tmp//cckkrx5B.s:3      *ABS*:000000000000003d __SP_L__
/var/tmp//cckkrx5B.s:4      *ABS*:000000000000003f __SREG__
/var/tmp//cckkrx5B.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/tmp//cckkrx5B.s:6      *ABS*:0000000000000001 __zero_reg__
/var/tmp//cckkrx5B.s:13     .text.disable_jtag:0000000000000000 disable_jtag
/var/tmp//cckkrx5B.s:39     .text.keyboard_pre_init_user:0000000000000000 keyboard_pre_init_user
/var/tmp//cckkrx5B.s:39     .text.keyboard_pre_init_user:0000000000000000 keyboard_pre_init_user.localalias.0
/var/tmp//cckkrx5B.s:57     .text.matrix_setup:0000000000000000 matrix_setup
/var/tmp//cckkrx5B.s:72     .text.keyboard_pre_init_kb:0000000000000000 keyboard_pre_init_kb
/var/tmp//cckkrx5B.s:89     .text.keyboard_post_init_user:0000000000000000 keyboard_post_init_user
/var/tmp//cckkrx5B.s:104    .text.keyboard_post_init_kb:0000000000000000 keyboard_post_init_kb
/var/tmp//cckkrx5B.s:121    .text.keyboard_setup:0000000000000000 keyboard_setup
/var/tmp//cckkrx5B.s:144    .text.is_keyboard_master:0000000000000000 is_keyboard_master
/var/tmp//cckkrx5B.s:162    .text.keyboard_init:0000000000000000 keyboard_init
/var/tmp//cckkrx5B.s:191    .text.keyboard_task:0000000000000000 keyboard_task
/var/tmp//cckkrx5B.s:492    .bss.matrix_prev.3139:0000000000000000 matrix_prev.3139
/var/tmp//cckkrx5B.s:487    .bss.led_status.3140:0000000000000000 led_status.3140
/var/tmp//cckkrx5B.s:469    .text.keyboard_set_leds:0000000000000000 keyboard_set_leds

UNDEFINED SYMBOLS
timer_init
matrix_init
magic
rgblight_init
matrix_scan
matrix_get_row
debug_config
matrix_print
timer_read
action_exec
host_keyboard_leds
led_set
__do_clear_bss
