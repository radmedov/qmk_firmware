   1               		.file	"action_layer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.default_layer_state_set_user,"ax",@progbits
  11               		.weak	default_layer_state_set_user
  13               	default_layer_state_set_user:
  14               	.LFB4:
  15               		.file 1 "tmk_core/common/action_layer.c"
   1:tmk_core/common/action_layer.c **** #include <stdint.h>
   2:tmk_core/common/action_layer.c **** #include "keyboard.h"
   3:tmk_core/common/action_layer.c **** #include "action.h"
   4:tmk_core/common/action_layer.c **** #include "util.h"
   5:tmk_core/common/action_layer.c **** #include "action_layer.h"
   6:tmk_core/common/action_layer.c **** 
   7:tmk_core/common/action_layer.c **** #ifdef DEBUG_ACTION
   8:tmk_core/common/action_layer.c **** #    include "debug.h"
   9:tmk_core/common/action_layer.c **** #else
  10:tmk_core/common/action_layer.c **** #    include "nodebug.h"
  11:tmk_core/common/action_layer.c **** #endif
  12:tmk_core/common/action_layer.c **** 
  13:tmk_core/common/action_layer.c **** /** \brief Default Layer State
  14:tmk_core/common/action_layer.c ****  */
  15:tmk_core/common/action_layer.c **** layer_state_t default_layer_state = 0;
  16:tmk_core/common/action_layer.c **** 
  17:tmk_core/common/action_layer.c **** /** \brief Default Layer State Set At user Level
  18:tmk_core/common/action_layer.c ****  *
  19:tmk_core/common/action_layer.c ****  * Run user code on default layer state change
  20:tmk_core/common/action_layer.c ****  */
  21:tmk_core/common/action_layer.c **** __attribute__((weak)) layer_state_t default_layer_state_set_user(layer_state_t state) { return stat
  16               		.loc 1 21 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               	/* epilogue start */
  24               		.loc 1 21 0
  25 0000 0895      		ret
  26               		.cfi_endproc
  27               	.LFE4:
  29               		.set	default_layer_state_set_user.localalias.0,default_layer_state_set_user
  30               		.section	.text.default_layer_state_set_kb,"ax",@progbits
  31               		.weak	default_layer_state_set_kb
  33               	default_layer_state_set_kb:
  34               	.LFB5:
  22:tmk_core/common/action_layer.c **** 
  23:tmk_core/common/action_layer.c **** /** \brief Default Layer State Set At Keyboard Level
  24:tmk_core/common/action_layer.c ****  *
  25:tmk_core/common/action_layer.c ****  *  Run keyboard code on default layer state change
  26:tmk_core/common/action_layer.c ****  */
  27:tmk_core/common/action_layer.c **** __attribute__((weak)) layer_state_t default_layer_state_set_kb(layer_state_t state) { return defaul
  35               		.loc 1 27 0
  36               		.cfi_startproc
  37               	.LVL1:
  38               	/* prologue: function */
  39               	/* frame size = 0 */
  40               	/* stack size = 0 */
  41               	.L__stack_usage = 0
  42               		.loc 1 27 0
  43 0000 0C94 0000 		jmp default_layer_state_set_user
  44               	.LVL2:
  45               		.cfi_endproc
  46               	.LFE5:
  48               		.section	.text.default_layer_state_set,"ax",@progbits
  50               	default_layer_state_set:
  51               	.LFB6:
  28:tmk_core/common/action_layer.c **** 
  29:tmk_core/common/action_layer.c **** /** \brief Default Layer State Set
  30:tmk_core/common/action_layer.c ****  *
  31:tmk_core/common/action_layer.c ****  * Static function to set the default layer state, prints debug info and clears keys
  32:tmk_core/common/action_layer.c ****  */
  33:tmk_core/common/action_layer.c **** static void default_layer_state_set(layer_state_t state) {
  52               		.loc 1 33 0
  53               		.cfi_startproc
  54               	.LVL3:
  55               	/* prologue: function */
  56               	/* frame size = 0 */
  57               	/* stack size = 0 */
  58               	.L__stack_usage = 0
  34:tmk_core/common/action_layer.c ****     state = default_layer_state_set_kb(state);
  59               		.loc 1 34 0
  60 0000 0E94 0000 		call default_layer_state_set_kb
  61               	.LVL4:
  35:tmk_core/common/action_layer.c ****     debug("default_layer_state: ");
  36:tmk_core/common/action_layer.c ****     default_layer_debug();
  37:tmk_core/common/action_layer.c ****     debug(" to ");
  38:tmk_core/common/action_layer.c ****     default_layer_state = state;
  62               		.loc 1 38 0
  63 0004 6093 0000 		sts default_layer_state,r22
  64 0008 7093 0000 		sts default_layer_state+1,r23
  65 000c 8093 0000 		sts default_layer_state+2,r24
  66 0010 9093 0000 		sts default_layer_state+3,r25
  39:tmk_core/common/action_layer.c ****     default_layer_debug();
  40:tmk_core/common/action_layer.c ****     debug("\n");
  41:tmk_core/common/action_layer.c **** #ifdef STRICT_LAYER_RELEASE
  42:tmk_core/common/action_layer.c ****     clear_keyboard_but_mods();  // To avoid stuck keys
  43:tmk_core/common/action_layer.c **** #else
  44:tmk_core/common/action_layer.c ****     clear_keyboard_but_mods_and_keys();  // Don't reset held keys
  67               		.loc 1 44 0
  68 0014 0C94 0000 		jmp clear_keyboard_but_mods_and_keys
  69               	.LVL5:
  70               		.cfi_endproc
  71               	.LFE6:
  73               		.section	.text.default_layer_debug,"ax",@progbits
  74               	.global	default_layer_debug
  76               	default_layer_debug:
  77               	.LFB7:
  45:tmk_core/common/action_layer.c **** #endif
  46:tmk_core/common/action_layer.c **** }
  47:tmk_core/common/action_layer.c **** 
  48:tmk_core/common/action_layer.c **** /** \brief Default Layer Print
  49:tmk_core/common/action_layer.c ****  *
  50:tmk_core/common/action_layer.c ****  * Print out the hex value of the 32-bit default layer state, as well as the value of the highest b
  51:tmk_core/common/action_layer.c ****  */
  52:tmk_core/common/action_layer.c **** void default_layer_debug(void) { dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_st
  78               		.loc 1 52 0
  79               		.cfi_startproc
  80               	/* prologue: function */
  81               	/* frame size = 0 */
  82               	/* stack size = 0 */
  83               	.L__stack_usage = 0
  84               	/* epilogue start */
  85               		.loc 1 52 0
  86 0000 0895      		ret
  87               		.cfi_endproc
  88               	.LFE7:
  90               		.section	.text.default_layer_set,"ax",@progbits
  91               	.global	default_layer_set
  93               	default_layer_set:
  94               	.LFB8:
  53:tmk_core/common/action_layer.c **** 
  54:tmk_core/common/action_layer.c **** /** \brief Default Layer Set
  55:tmk_core/common/action_layer.c ****  *
  56:tmk_core/common/action_layer.c ****  * Sets the default layer state.
  57:tmk_core/common/action_layer.c ****  */
  58:tmk_core/common/action_layer.c **** void default_layer_set(layer_state_t state) { default_layer_state_set(state); }
  95               		.loc 1 58 0
  96               		.cfi_startproc
  97               	.LVL6:
  98               	/* prologue: function */
  99               	/* frame size = 0 */
 100               	/* stack size = 0 */
 101               	.L__stack_usage = 0
 102               		.loc 1 58 0
 103 0000 0C94 0000 		jmp default_layer_state_set
 104               	.LVL7:
 105               		.cfi_endproc
 106               	.LFE8:
 108               		.section	.text.default_layer_or,"ax",@progbits
 109               	.global	default_layer_or
 111               	default_layer_or:
 112               	.LFB9:
  59:tmk_core/common/action_layer.c **** 
  60:tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
  61:tmk_core/common/action_layer.c **** /** \brief Default Layer Or
  62:tmk_core/common/action_layer.c ****  *
  63:tmk_core/common/action_layer.c ****  * Turns on the default layer based on matching bits between specifed layer and existing layer stat
  64:tmk_core/common/action_layer.c ****  */
  65:tmk_core/common/action_layer.c **** void default_layer_or(layer_state_t state) { default_layer_state_set(default_layer_state | state); 
 113               		.loc 1 65 0
 114               		.cfi_startproc
 115               	.LVL8:
 116 0000 0F93      		push r16
 117               	.LCFI0:
 118               		.cfi_def_cfa_offset 3
 119               		.cfi_offset 16, -2
 120 0002 1F93      		push r17
 121               	.LCFI1:
 122               		.cfi_def_cfa_offset 4
 123               		.cfi_offset 17, -3
 124               	/* prologue: function */
 125               	/* frame size = 0 */
 126               	/* stack size = 2 */
 127               	.L__stack_usage = 2
 128               		.loc 1 65 0
 129 0004 0091 0000 		lds r16,default_layer_state
 130 0008 1091 0000 		lds r17,default_layer_state+1
 131 000c 2091 0000 		lds r18,default_layer_state+2
 132 0010 3091 0000 		lds r19,default_layer_state+3
 133 0014 602B      		or r22,r16
 134               	.LVL9:
 135 0016 712B      		or r23,r17
 136 0018 822B      		or r24,r18
 137 001a 932B      		or r25,r19
 138               	/* epilogue start */
 139 001c 1F91      		pop r17
 140 001e 0F91      		pop r16
 141 0020 0C94 0000 		jmp default_layer_state_set
 142               	.LVL10:
 143               		.cfi_endproc
 144               	.LFE9:
 146               		.section	.text.default_layer_and,"ax",@progbits
 147               	.global	default_layer_and
 149               	default_layer_and:
 150               	.LFB10:
  66:tmk_core/common/action_layer.c **** /** \brief Default Layer And
  67:tmk_core/common/action_layer.c ****  *
  68:tmk_core/common/action_layer.c ****  * Turns on default layer based on matching enabled bits between specifed layer and existing layer 
  69:tmk_core/common/action_layer.c ****  */
  70:tmk_core/common/action_layer.c **** void default_layer_and(layer_state_t state) { default_layer_state_set(default_layer_state & state);
 151               		.loc 1 70 0
 152               		.cfi_startproc
 153               	.LVL11:
 154 0000 0F93      		push r16
 155               	.LCFI2:
 156               		.cfi_def_cfa_offset 3
 157               		.cfi_offset 16, -2
 158 0002 1F93      		push r17
 159               	.LCFI3:
 160               		.cfi_def_cfa_offset 4
 161               		.cfi_offset 17, -3
 162               	/* prologue: function */
 163               	/* frame size = 0 */
 164               	/* stack size = 2 */
 165               	.L__stack_usage = 2
 166               		.loc 1 70 0
 167 0004 0091 0000 		lds r16,default_layer_state
 168 0008 1091 0000 		lds r17,default_layer_state+1
 169 000c 2091 0000 		lds r18,default_layer_state+2
 170 0010 3091 0000 		lds r19,default_layer_state+3
 171 0014 6023      		and r22,r16
 172               	.LVL12:
 173 0016 7123      		and r23,r17
 174 0018 8223      		and r24,r18
 175 001a 9323      		and r25,r19
 176               	/* epilogue start */
 177 001c 1F91      		pop r17
 178 001e 0F91      		pop r16
 179 0020 0C94 0000 		jmp default_layer_state_set
 180               	.LVL13:
 181               		.cfi_endproc
 182               	.LFE10:
 184               		.section	.text.default_layer_xor,"ax",@progbits
 185               	.global	default_layer_xor
 187               	default_layer_xor:
 188               	.LFB11:
  71:tmk_core/common/action_layer.c **** /** \brief Default Layer Xor
  72:tmk_core/common/action_layer.c ****  *
  73:tmk_core/common/action_layer.c ****  * Turns on default layer based on non-matching bits between specifed layer and existing layer stat
  74:tmk_core/common/action_layer.c ****  */
  75:tmk_core/common/action_layer.c **** void default_layer_xor(layer_state_t state) { default_layer_state_set(default_layer_state ^ state);
 189               		.loc 1 75 0
 190               		.cfi_startproc
 191               	.LVL14:
 192 0000 0F93      		push r16
 193               	.LCFI4:
 194               		.cfi_def_cfa_offset 3
 195               		.cfi_offset 16, -2
 196 0002 1F93      		push r17
 197               	.LCFI5:
 198               		.cfi_def_cfa_offset 4
 199               		.cfi_offset 17, -3
 200               	/* prologue: function */
 201               	/* frame size = 0 */
 202               	/* stack size = 2 */
 203               	.L__stack_usage = 2
 204               		.loc 1 75 0
 205 0004 0091 0000 		lds r16,default_layer_state
 206 0008 1091 0000 		lds r17,default_layer_state+1
 207 000c 2091 0000 		lds r18,default_layer_state+2
 208 0010 3091 0000 		lds r19,default_layer_state+3
 209 0014 6027      		eor r22,r16
 210               	.LVL15:
 211 0016 7127      		eor r23,r17
 212 0018 8227      		eor r24,r18
 213 001a 9327      		eor r25,r19
 214               	/* epilogue start */
 215 001c 1F91      		pop r17
 216 001e 0F91      		pop r16
 217 0020 0C94 0000 		jmp default_layer_state_set
 218               	.LVL16:
 219               		.cfi_endproc
 220               	.LFE11:
 222               		.section	.text.layer_state_set_user,"ax",@progbits
 223               		.weak	layer_state_set_user
 225               	layer_state_set_user:
 226               	.LFB34:
 227               		.cfi_startproc
 228               	/* prologue: function */
 229               	/* frame size = 0 */
 230               	/* stack size = 0 */
 231               	.L__stack_usage = 0
 232 0000 0C94 0000 		jmp default_layer_state_set_user.localalias.0
 233               		.cfi_endproc
 234               	.LFE34:
 236               		.section	.text.layer_state_set_kb,"ax",@progbits
 237               		.weak	layer_state_set_kb
 239               	layer_state_set_kb:
 240               	.LFB13:
  76:tmk_core/common/action_layer.c **** #endif
  77:tmk_core/common/action_layer.c **** 
  78:tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
  79:tmk_core/common/action_layer.c **** /** \brief Keymap Layer State
  80:tmk_core/common/action_layer.c ****  */
  81:tmk_core/common/action_layer.c **** layer_state_t layer_state = 0;
  82:tmk_core/common/action_layer.c **** 
  83:tmk_core/common/action_layer.c **** /** \brief Layer state set user
  84:tmk_core/common/action_layer.c ****  *
  85:tmk_core/common/action_layer.c ****  * Runs user code on layer state change
  86:tmk_core/common/action_layer.c ****  */
  87:tmk_core/common/action_layer.c **** __attribute__((weak)) layer_state_t layer_state_set_user(layer_state_t state) { return state; }
  88:tmk_core/common/action_layer.c **** 
  89:tmk_core/common/action_layer.c **** /** \brief Layer state set keyboard
  90:tmk_core/common/action_layer.c ****  *
  91:tmk_core/common/action_layer.c ****  * Runs keyboard code on layer state change
  92:tmk_core/common/action_layer.c ****  */
  93:tmk_core/common/action_layer.c **** __attribute__((weak)) layer_state_t layer_state_set_kb(layer_state_t state) { return layer_state_se
 241               		.loc 1 93 0
 242               		.cfi_startproc
 243               	.LVL17:
 244               	/* prologue: function */
 245               	/* frame size = 0 */
 246               	/* stack size = 0 */
 247               	.L__stack_usage = 0
 248               		.loc 1 93 0
 249 0000 0C94 0000 		jmp layer_state_set_user
 250               	.LVL18:
 251               		.cfi_endproc
 252               	.LFE13:
 254               		.section	.text.layer_state_set,"ax",@progbits
 255               	.global	layer_state_set
 257               	layer_state_set:
 258               	.LFB14:
  94:tmk_core/common/action_layer.c **** 
  95:tmk_core/common/action_layer.c **** /** \brief Layer state set
  96:tmk_core/common/action_layer.c ****  *
  97:tmk_core/common/action_layer.c ****  * Sets the layer to match the specifed state (a bitmask)
  98:tmk_core/common/action_layer.c ****  */
  99:tmk_core/common/action_layer.c **** void layer_state_set(layer_state_t state) {
 259               		.loc 1 99 0
 260               		.cfi_startproc
 261               	.LVL19:
 262               	/* prologue: function */
 263               	/* frame size = 0 */
 264               	/* stack size = 0 */
 265               	.L__stack_usage = 0
 100:tmk_core/common/action_layer.c ****     state = layer_state_set_kb(state);
 266               		.loc 1 100 0
 267 0000 0E94 0000 		call layer_state_set_kb
 268               	.LVL20:
 101:tmk_core/common/action_layer.c ****     dprint("layer_state: ");
 102:tmk_core/common/action_layer.c ****     layer_debug();
 103:tmk_core/common/action_layer.c ****     dprint(" to ");
 104:tmk_core/common/action_layer.c ****     layer_state = state;
 269               		.loc 1 104 0
 270 0004 6093 0000 		sts layer_state,r22
 271 0008 7093 0000 		sts layer_state+1,r23
 272 000c 8093 0000 		sts layer_state+2,r24
 273 0010 9093 0000 		sts layer_state+3,r25
 105:tmk_core/common/action_layer.c ****     layer_debug();
 106:tmk_core/common/action_layer.c ****     dprintln();
 107:tmk_core/common/action_layer.c **** #    ifdef STRICT_LAYER_RELEASE
 108:tmk_core/common/action_layer.c ****     clear_keyboard_but_mods();  // To avoid stuck keys
 109:tmk_core/common/action_layer.c **** #    else
 110:tmk_core/common/action_layer.c ****     clear_keyboard_but_mods_and_keys();  // Don't reset held keys
 274               		.loc 1 110 0
 275 0014 0C94 0000 		jmp clear_keyboard_but_mods_and_keys
 276               	.LVL21:
 277               		.cfi_endproc
 278               	.LFE14:
 280               		.section	.text.layer_clear,"ax",@progbits
 281               	.global	layer_clear
 283               	layer_clear:
 284               	.LFB15:
 111:tmk_core/common/action_layer.c **** #    endif
 112:tmk_core/common/action_layer.c **** }
 113:tmk_core/common/action_layer.c **** 
 114:tmk_core/common/action_layer.c **** /** \brief Layer clear
 115:tmk_core/common/action_layer.c ****  *
 116:tmk_core/common/action_layer.c ****  * Turn off all layers
 117:tmk_core/common/action_layer.c ****  */
 118:tmk_core/common/action_layer.c **** void layer_clear(void) { layer_state_set(0); }
 285               		.loc 1 118 0
 286               		.cfi_startproc
 287               	/* prologue: function */
 288               	/* frame size = 0 */
 289               	/* stack size = 0 */
 290               	.L__stack_usage = 0
 291               		.loc 1 118 0
 292 0000 60E0      		ldi r22,0
 293 0002 70E0      		ldi r23,0
 294 0004 CB01      		movw r24,r22
 295 0006 0C94 0000 		jmp layer_state_set
 296               	.LVL22:
 297               		.cfi_endproc
 298               	.LFE15:
 300               		.section	.text.layer_state_cmp,"ax",@progbits
 301               	.global	layer_state_cmp
 303               	layer_state_cmp:
 304               	.LFB17:
 119:tmk_core/common/action_layer.c **** 
 120:tmk_core/common/action_layer.c **** /** \brief Layer state is
 121:tmk_core/common/action_layer.c ****  *
 122:tmk_core/common/action_layer.c ****  * Return whether the given state is on (it might still be shadowed by a higher state, though)
 123:tmk_core/common/action_layer.c ****  */
 124:tmk_core/common/action_layer.c **** bool layer_state_is(uint8_t layer) { return layer_state_cmp(layer_state, layer); }
 125:tmk_core/common/action_layer.c **** 
 126:tmk_core/common/action_layer.c **** /** \brief Layer state compare
 127:tmk_core/common/action_layer.c ****  *
 128:tmk_core/common/action_layer.c ****  * Used for comparing layers {mostly used for unit testing}
 129:tmk_core/common/action_layer.c ****  */
 130:tmk_core/common/action_layer.c **** bool layer_state_cmp(layer_state_t cmp_layer_state, uint8_t layer) {
 305               		.loc 1 130 0
 306               		.cfi_startproc
 307               	.LVL23:
 308               	/* prologue: function */
 309               	/* frame size = 0 */
 310               	/* stack size = 0 */
 311               	.L__stack_usage = 0
 131:tmk_core/common/action_layer.c ****     if (!cmp_layer_state) {
 312               		.loc 1 131 0
 313 0000 6115      		cp r22,__zero_reg__
 314 0002 7105      		cpc r23,__zero_reg__
 315 0004 8105      		cpc r24,__zero_reg__
 316 0006 9105      		cpc r25,__zero_reg__
 317 0008 01F4      		brne .L14
 132:tmk_core/common/action_layer.c ****         return layer == 0;
 318               		.loc 1 132 0
 319 000a 81E0      		ldi r24,lo8(1)
 320 000c 4423      		tst r20
 321 000e 01F0      		breq .L13
 322 0010 80E0      		ldi r24,0
 323 0012 0895      		ret
 324               	.L14:
 133:tmk_core/common/action_layer.c ****     }
 134:tmk_core/common/action_layer.c ****     return (cmp_layer_state & (1UL << layer)) != 0;
 325               		.loc 1 134 0
 326 0014 DC01      		movw r26,r24
 327 0016 CB01      		movw r24,r22
 328 0018 00C0      		rjmp 2f
 329               		1:
 330 001a B695      		lsr r27
 331 001c A795      		ror r26
 332 001e 9795      		ror r25
 333 0020 8795      		ror r24
 334               		2:
 335 0022 4A95      		dec r20
 336 0024 02F4      		brpl 1b
 337 0026 8170      		andi r24,lo8(1)
 338               	.L13:
 339               	/* epilogue start */
 135:tmk_core/common/action_layer.c **** }
 340               		.loc 1 135 0
 341 0028 0895      		ret
 342               		.cfi_endproc
 343               	.LFE17:
 345               		.section	.text.layer_state_is,"ax",@progbits
 346               	.global	layer_state_is
 348               	layer_state_is:
 349               	.LFB16:
 124:tmk_core/common/action_layer.c **** 
 350               		.loc 1 124 0
 351               		.cfi_startproc
 352               	.LVL24:
 353               	/* prologue: function */
 354               	/* frame size = 0 */
 355               	/* stack size = 0 */
 356               	.L__stack_usage = 0
 357 0000 482F      		mov r20,r24
 124:tmk_core/common/action_layer.c **** 
 358               		.loc 1 124 0
 359 0002 6091 0000 		lds r22,layer_state
 360 0006 7091 0000 		lds r23,layer_state+1
 361 000a 8091 0000 		lds r24,layer_state+2
 362 000e 9091 0000 		lds r25,layer_state+3
 363 0012 0C94 0000 		jmp layer_state_cmp
 364               	.LVL25:
 365               		.cfi_endproc
 366               	.LFE16:
 368               		.section	.text.layer_move,"ax",@progbits
 369               	.global	layer_move
 371               	layer_move:
 372               	.LFB18:
 136:tmk_core/common/action_layer.c **** 
 137:tmk_core/common/action_layer.c **** /** \brief Layer move
 138:tmk_core/common/action_layer.c ****  *
 139:tmk_core/common/action_layer.c ****  * Turns on the given layer and turn off all other layers
 140:tmk_core/common/action_layer.c ****  */
 141:tmk_core/common/action_layer.c **** void layer_move(uint8_t layer) { layer_state_set(1UL << layer); }
 373               		.loc 1 141 0
 374               		.cfi_startproc
 375               	.LVL26:
 376 0000 0F93      		push r16
 377               	.LCFI6:
 378               		.cfi_def_cfa_offset 3
 379               		.cfi_offset 16, -2
 380 0002 1F93      		push r17
 381               	.LCFI7:
 382               		.cfi_def_cfa_offset 4
 383               		.cfi_offset 17, -3
 384               	/* prologue: function */
 385               	/* frame size = 0 */
 386               	/* stack size = 2 */
 387               	.L__stack_usage = 2
 388               		.loc 1 141 0
 389 0004 41E0      		ldi r20,lo8(1)
 390 0006 50E0      		ldi r21,0
 391 0008 60E0      		ldi r22,0
 392 000a 70E0      		ldi r23,0
 393 000c 8A01      		movw r16,r20
 394 000e 9B01      		movw r18,r22
 395 0010 00C0      		rjmp 2f
 396               		1:
 397 0012 000F      		lsl r16
 398 0014 111F      		rol r17
 399 0016 221F      		rol r18
 400 0018 331F      		rol r19
 401               		2:
 402 001a 8A95      		dec r24
 403 001c 02F4      		brpl 1b
 404 001e C901      		movw r24,r18
 405               	.LVL27:
 406 0020 B801      		movw r22,r16
 407               	/* epilogue start */
 408 0022 1F91      		pop r17
 409 0024 0F91      		pop r16
 410 0026 0C94 0000 		jmp layer_state_set
 411               	.LVL28:
 412               		.cfi_endproc
 413               	.LFE18:
 415               		.section	.text.layer_on,"ax",@progbits
 416               	.global	layer_on
 418               	layer_on:
 419               	.LFB19:
 142:tmk_core/common/action_layer.c **** 
 143:tmk_core/common/action_layer.c **** /** \brief Layer on
 144:tmk_core/common/action_layer.c ****  *
 145:tmk_core/common/action_layer.c ****  * Turns on given layer
 146:tmk_core/common/action_layer.c ****  */
 147:tmk_core/common/action_layer.c **** void layer_on(uint8_t layer) { layer_state_set(layer_state | (1UL << layer)); }
 420               		.loc 1 147 0
 421               		.cfi_startproc
 422               	.LVL29:
 423 0000 0F93      		push r16
 424               	.LCFI8:
 425               		.cfi_def_cfa_offset 3
 426               		.cfi_offset 16, -2
 427 0002 1F93      		push r17
 428               	.LCFI9:
 429               		.cfi_def_cfa_offset 4
 430               		.cfi_offset 17, -3
 431               	/* prologue: function */
 432               	/* frame size = 0 */
 433               	/* stack size = 2 */
 434               	.L__stack_usage = 2
 435               		.loc 1 147 0
 436 0004 41E0      		ldi r20,lo8(1)
 437 0006 50E0      		ldi r21,0
 438 0008 60E0      		ldi r22,0
 439 000a 70E0      		ldi r23,0
 440 000c 00C0      		rjmp 2f
 441               		1:
 442 000e 440F      		lsl r20
 443 0010 551F      		rol r21
 444 0012 661F      		rol r22
 445 0014 771F      		rol r23
 446               		2:
 447 0016 8A95      		dec r24
 448 0018 02F4      		brpl 1b
 449 001a 8091 0000 		lds r24,layer_state
 450 001e 9091 0000 		lds r25,layer_state+1
 451 0022 A091 0000 		lds r26,layer_state+2
 452 0026 B091 0000 		lds r27,layer_state+3
 453               	.LVL30:
 454 002a 8A01      		movw r16,r20
 455 002c 9B01      		movw r18,r22
 456 002e 082B      		or r16,r24
 457 0030 192B      		or r17,r25
 458 0032 2A2B      		or r18,r26
 459 0034 3B2B      		or r19,r27
 460 0036 C901      		movw r24,r18
 461 0038 B801      		movw r22,r16
 462               	/* epilogue start */
 463 003a 1F91      		pop r17
 464 003c 0F91      		pop r16
 465 003e 0C94 0000 		jmp layer_state_set
 466               	.LVL31:
 467               		.cfi_endproc
 468               	.LFE19:
 470               		.section	.text.layer_off,"ax",@progbits
 471               	.global	layer_off
 473               	layer_off:
 474               	.LFB20:
 148:tmk_core/common/action_layer.c **** 
 149:tmk_core/common/action_layer.c **** /** \brief Layer off
 150:tmk_core/common/action_layer.c ****  *
 151:tmk_core/common/action_layer.c ****  * Turns off given layer
 152:tmk_core/common/action_layer.c ****  */
 153:tmk_core/common/action_layer.c **** void layer_off(uint8_t layer) { layer_state_set(layer_state & ~(1UL << layer)); }
 475               		.loc 1 153 0
 476               		.cfi_startproc
 477               	.LVL32:
 478 0000 0F93      		push r16
 479               	.LCFI10:
 480               		.cfi_def_cfa_offset 3
 481               		.cfi_offset 16, -2
 482 0002 1F93      		push r17
 483               	.LCFI11:
 484               		.cfi_def_cfa_offset 4
 485               		.cfi_offset 17, -3
 486               	/* prologue: function */
 487               	/* frame size = 0 */
 488               	/* stack size = 2 */
 489               	.L__stack_usage = 2
 490               		.loc 1 153 0
 491 0004 41E0      		ldi r20,lo8(1)
 492 0006 50E0      		ldi r21,0
 493 0008 60E0      		ldi r22,0
 494 000a 70E0      		ldi r23,0
 495 000c 00C0      		rjmp 2f
 496               		1:
 497 000e 440F      		lsl r20
 498 0010 551F      		rol r21
 499 0012 661F      		rol r22
 500 0014 771F      		rol r23
 501               		2:
 502 0016 8A95      		dec r24
 503 0018 02F4      		brpl 1b
 504 001a CB01      		movw r24,r22
 505               	.LVL33:
 506 001c BA01      		movw r22,r20
 507 001e 6095      		com r22
 508 0020 7095      		com r23
 509 0022 8095      		com r24
 510 0024 9095      		com r25
 511 0026 0091 0000 		lds r16,layer_state
 512 002a 1091 0000 		lds r17,layer_state+1
 513 002e 2091 0000 		lds r18,layer_state+2
 514 0032 3091 0000 		lds r19,layer_state+3
 515 0036 6023      		and r22,r16
 516 0038 7123      		and r23,r17
 517 003a 8223      		and r24,r18
 518 003c 9323      		and r25,r19
 519               	/* epilogue start */
 520 003e 1F91      		pop r17
 521 0040 0F91      		pop r16
 522 0042 0C94 0000 		jmp layer_state_set
 523               	.LVL34:
 524               		.cfi_endproc
 525               	.LFE20:
 527               		.section	.text.layer_invert,"ax",@progbits
 528               	.global	layer_invert
 530               	layer_invert:
 531               	.LFB21:
 154:tmk_core/common/action_layer.c **** 
 155:tmk_core/common/action_layer.c **** /** \brief Layer invert
 156:tmk_core/common/action_layer.c ****  *
 157:tmk_core/common/action_layer.c ****  * Toggle the given layer (set it if it's unset, or unset it if it's set)
 158:tmk_core/common/action_layer.c ****  */
 159:tmk_core/common/action_layer.c **** void layer_invert(uint8_t layer) { layer_state_set(layer_state ^ (1UL << layer)); }
 532               		.loc 1 159 0
 533               		.cfi_startproc
 534               	.LVL35:
 535 0000 0F93      		push r16
 536               	.LCFI12:
 537               		.cfi_def_cfa_offset 3
 538               		.cfi_offset 16, -2
 539 0002 1F93      		push r17
 540               	.LCFI13:
 541               		.cfi_def_cfa_offset 4
 542               		.cfi_offset 17, -3
 543               	/* prologue: function */
 544               	/* frame size = 0 */
 545               	/* stack size = 2 */
 546               	.L__stack_usage = 2
 547               		.loc 1 159 0
 548 0004 41E0      		ldi r20,lo8(1)
 549 0006 50E0      		ldi r21,0
 550 0008 60E0      		ldi r22,0
 551 000a 70E0      		ldi r23,0
 552 000c 00C0      		rjmp 2f
 553               		1:
 554 000e 440F      		lsl r20
 555 0010 551F      		rol r21
 556 0012 661F      		rol r22
 557 0014 771F      		rol r23
 558               		2:
 559 0016 8A95      		dec r24
 560 0018 02F4      		brpl 1b
 561 001a 8091 0000 		lds r24,layer_state
 562 001e 9091 0000 		lds r25,layer_state+1
 563 0022 A091 0000 		lds r26,layer_state+2
 564 0026 B091 0000 		lds r27,layer_state+3
 565               	.LVL36:
 566 002a 8A01      		movw r16,r20
 567 002c 9B01      		movw r18,r22
 568 002e 0827      		eor r16,r24
 569 0030 1927      		eor r17,r25
 570 0032 2A27      		eor r18,r26
 571 0034 3B27      		eor r19,r27
 572 0036 C901      		movw r24,r18
 573 0038 B801      		movw r22,r16
 574               	/* epilogue start */
 575 003a 1F91      		pop r17
 576 003c 0F91      		pop r16
 577 003e 0C94 0000 		jmp layer_state_set
 578               	.LVL37:
 579               		.cfi_endproc
 580               	.LFE21:
 582               		.section	.text.layer_or,"ax",@progbits
 583               	.global	layer_or
 585               	layer_or:
 586               	.LFB22:
 160:tmk_core/common/action_layer.c **** 
 161:tmk_core/common/action_layer.c **** /** \brief Layer or
 162:tmk_core/common/action_layer.c ****  *
 163:tmk_core/common/action_layer.c ****  * Turns on layers based on matching bits between specifed layer and existing layer state
 164:tmk_core/common/action_layer.c ****  */
 165:tmk_core/common/action_layer.c **** void layer_or(layer_state_t state) { layer_state_set(layer_state | state); }
 587               		.loc 1 165 0
 588               		.cfi_startproc
 589               	.LVL38:
 590 0000 0F93      		push r16
 591               	.LCFI14:
 592               		.cfi_def_cfa_offset 3
 593               		.cfi_offset 16, -2
 594 0002 1F93      		push r17
 595               	.LCFI15:
 596               		.cfi_def_cfa_offset 4
 597               		.cfi_offset 17, -3
 598               	/* prologue: function */
 599               	/* frame size = 0 */
 600               	/* stack size = 2 */
 601               	.L__stack_usage = 2
 602               		.loc 1 165 0
 603 0004 0091 0000 		lds r16,layer_state
 604 0008 1091 0000 		lds r17,layer_state+1
 605 000c 2091 0000 		lds r18,layer_state+2
 606 0010 3091 0000 		lds r19,layer_state+3
 607 0014 602B      		or r22,r16
 608               	.LVL39:
 609 0016 712B      		or r23,r17
 610 0018 822B      		or r24,r18
 611 001a 932B      		or r25,r19
 612               	/* epilogue start */
 613 001c 1F91      		pop r17
 614 001e 0F91      		pop r16
 615 0020 0C94 0000 		jmp layer_state_set
 616               	.LVL40:
 617               		.cfi_endproc
 618               	.LFE22:
 620               		.section	.text.layer_and,"ax",@progbits
 621               	.global	layer_and
 623               	layer_and:
 624               	.LFB23:
 166:tmk_core/common/action_layer.c **** /** \brief Layer and
 167:tmk_core/common/action_layer.c ****  *
 168:tmk_core/common/action_layer.c ****  * Turns on layers based on matching enabled bits between specifed layer and existing layer state
 169:tmk_core/common/action_layer.c ****  */
 170:tmk_core/common/action_layer.c **** void layer_and(layer_state_t state) { layer_state_set(layer_state & state); }
 625               		.loc 1 170 0
 626               		.cfi_startproc
 627               	.LVL41:
 628 0000 0F93      		push r16
 629               	.LCFI16:
 630               		.cfi_def_cfa_offset 3
 631               		.cfi_offset 16, -2
 632 0002 1F93      		push r17
 633               	.LCFI17:
 634               		.cfi_def_cfa_offset 4
 635               		.cfi_offset 17, -3
 636               	/* prologue: function */
 637               	/* frame size = 0 */
 638               	/* stack size = 2 */
 639               	.L__stack_usage = 2
 640               		.loc 1 170 0
 641 0004 0091 0000 		lds r16,layer_state
 642 0008 1091 0000 		lds r17,layer_state+1
 643 000c 2091 0000 		lds r18,layer_state+2
 644 0010 3091 0000 		lds r19,layer_state+3
 645 0014 6023      		and r22,r16
 646               	.LVL42:
 647 0016 7123      		and r23,r17
 648 0018 8223      		and r24,r18
 649 001a 9323      		and r25,r19
 650               	/* epilogue start */
 651 001c 1F91      		pop r17
 652 001e 0F91      		pop r16
 653 0020 0C94 0000 		jmp layer_state_set
 654               	.LVL43:
 655               		.cfi_endproc
 656               	.LFE23:
 658               		.section	.text.layer_xor,"ax",@progbits
 659               	.global	layer_xor
 661               	layer_xor:
 662               	.LFB24:
 171:tmk_core/common/action_layer.c **** /** \brief Layer xor
 172:tmk_core/common/action_layer.c ****  *
 173:tmk_core/common/action_layer.c ****  * Turns on layers based on non-matching bits between specifed layer and existing layer state
 174:tmk_core/common/action_layer.c ****  */
 175:tmk_core/common/action_layer.c **** void layer_xor(layer_state_t state) { layer_state_set(layer_state ^ state); }
 663               		.loc 1 175 0
 664               		.cfi_startproc
 665               	.LVL44:
 666 0000 0F93      		push r16
 667               	.LCFI18:
 668               		.cfi_def_cfa_offset 3
 669               		.cfi_offset 16, -2
 670 0002 1F93      		push r17
 671               	.LCFI19:
 672               		.cfi_def_cfa_offset 4
 673               		.cfi_offset 17, -3
 674               	/* prologue: function */
 675               	/* frame size = 0 */
 676               	/* stack size = 2 */
 677               	.L__stack_usage = 2
 678               		.loc 1 175 0
 679 0004 0091 0000 		lds r16,layer_state
 680 0008 1091 0000 		lds r17,layer_state+1
 681 000c 2091 0000 		lds r18,layer_state+2
 682 0010 3091 0000 		lds r19,layer_state+3
 683 0014 6027      		eor r22,r16
 684               	.LVL45:
 685 0016 7127      		eor r23,r17
 686 0018 8227      		eor r24,r18
 687 001a 9327      		eor r25,r19
 688               	/* epilogue start */
 689 001c 1F91      		pop r17
 690 001e 0F91      		pop r16
 691 0020 0C94 0000 		jmp layer_state_set
 692               	.LVL46:
 693               		.cfi_endproc
 694               	.LFE24:
 696               		.section	.text.layer_debug,"ax",@progbits
 697               	.global	layer_debug
 699               	layer_debug:
 700               	.LFB32:
 701               		.cfi_startproc
 702               	/* prologue: function */
 703               	/* frame size = 0 */
 704               	/* stack size = 0 */
 705               	.L__stack_usage = 0
 706               	/* epilogue start */
 707 0000 0895      		ret
 708               		.cfi_endproc
 709               	.LFE32:
 711               		.section	.text.update_source_layers_cache,"ax",@progbits
 712               	.global	update_source_layers_cache
 714               	update_source_layers_cache:
 715               	.LFB26:
 176:tmk_core/common/action_layer.c **** 
 177:tmk_core/common/action_layer.c **** /** \brief Layer debug printing
 178:tmk_core/common/action_layer.c ****  *
 179:tmk_core/common/action_layer.c ****  * Print out the hex value of the 32-bit layer state, as well as the value of the highest bit.
 180:tmk_core/common/action_layer.c ****  */
 181:tmk_core/common/action_layer.c **** void layer_debug(void) { dprintf("%08lX(%u)", layer_state, biton32(layer_state)); }
 182:tmk_core/common/action_layer.c **** #endif
 183:tmk_core/common/action_layer.c **** 
 184:tmk_core/common/action_layer.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 185:tmk_core/common/action_layer.c **** /** \brief source layer cache
 186:tmk_core/common/action_layer.c ****  */
 187:tmk_core/common/action_layer.c **** 
 188:tmk_core/common/action_layer.c **** uint8_t source_layers_cache[(MATRIX_ROWS * MATRIX_COLS + 7) / 8][MAX_LAYER_BITS] = {{0}};
 189:tmk_core/common/action_layer.c **** 
 190:tmk_core/common/action_layer.c **** /** \brief update source layers cache
 191:tmk_core/common/action_layer.c ****  *
 192:tmk_core/common/action_layer.c ****  * Updates the cached keys when changing layers
 193:tmk_core/common/action_layer.c ****  */
 194:tmk_core/common/action_layer.c **** void update_source_layers_cache(keypos_t key, uint8_t layer) {
 716               		.loc 1 194 0
 717               		.cfi_startproc
 718               	.LVL47:
 719               	/* prologue: function */
 720               	/* frame size = 0 */
 721               	/* stack size = 0 */
 722               	.L__stack_usage = 0
 195:tmk_core/common/action_layer.c ****     const uint8_t key_number  = key.col + (key.row * MATRIX_COLS);
 723               		.loc 1 195 0
 724 0000 292F      		mov r18,r25
 725 0002 220F      		lsl r18
 726 0004 920F      		add r25,r18
 727 0006 990F      		lsl r25
 728 0008 890F      		add r24,r25
 729               	.LVL48:
 196:tmk_core/common/action_layer.c ****     const uint8_t storage_row = key_number / 8;
 197:tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 730               		.loc 1 197 0
 731 000a 982F      		mov r25,r24
 732 000c 9770      		andi r25,lo8(7)
 733               	.LVL49:
 734               	.LBB2:
 198:tmk_core/common/action_layer.c **** 
 199:tmk_core/common/action_layer.c ****     for (uint8_t bit_number = 0; bit_number < MAX_LAYER_BITS; bit_number++) {
 200:tmk_core/common/action_layer.c ****         source_layers_cache[storage_row][bit_number] ^= (-((layer & (1U << bit_number)) != 0) ^ sou
 735               		.loc 1 200 0
 736 000e 71E0      		ldi r23,lo8(1)
 737 0010 00C0      		rjmp 2f
 738               		1:
 739 0012 770F      		lsl r23
 740               		2:
 741 0014 9A95      		dec r25
 742 0016 02F4      		brpl 1b
 743               	.LBE2:
 196:tmk_core/common/action_layer.c ****     const uint8_t storage_row = key_number / 8;
 744               		.loc 1 196 0
 745 0018 8695      		lsr r24
 746 001a 8695      		lsr r24
 747 001c 8695      		lsr r24
 748               	.LVL50:
 749 001e 25E0      		ldi r18,lo8(5)
 750 0020 829F      		mul r24,r18
 751 0022 C001      		movw r24,r0
 752 0024 1124      		clr __zero_reg__
 753               	.LVL51:
 754               	.LBB3:
 755               		.loc 1 200 0
 756 0026 50E0      		ldi r21,0
 757 0028 40E0      		ldi r20,0
 758 002a A62F      		mov r26,r22
 759 002c B0E0      		ldi r27,0
 760               	.LVL52:
 761               	.L30:
 762 002e FC01      		movw r30,r24
 763 0030 E40F      		add r30,r20
 764 0032 F51F      		adc r31,r21
 765 0034 E050      		subi r30,lo8(-(source_layers_cache))
 766 0036 F040      		sbci r31,hi8(-(source_layers_cache))
 767               		.loc 1 200 0 is_stmt 0 discriminator 3
 768 0038 6081      		ld r22,Z
 769 003a 9D01      		movw r18,r26
 770 003c 042E      		mov r0,r20
 771 003e 00C0      		rjmp 2f
 772               		1:
 773 0040 3695      		lsr r19
 774 0042 2795      		ror r18
 775               		2:
 776 0044 0A94      		dec r0
 777 0046 02F4      		brpl 1b
 778 0048 2170      		andi r18,lo8(1)
 779 004a 2195      		neg r18
 780 004c 2627      		eor r18,r22
 781 004e 2723      		and r18,r23
 782 0050 2627      		eor r18,r22
 783 0052 2083      		st Z,r18
 784               	.LVL53:
 785 0054 4F5F      		subi r20,-1
 786 0056 5F4F      		sbci r21,-1
 787               	.LVL54:
 199:tmk_core/common/action_layer.c ****         source_layers_cache[storage_row][bit_number] ^= (-((layer & (1U << bit_number)) != 0) ^ sou
 788               		.loc 1 199 0 is_stmt 1 discriminator 3
 789 0058 4530      		cpi r20,5
 790 005a 5105      		cpc r21,__zero_reg__
 791 005c 01F4      		brne .L30
 792               	/* epilogue start */
 793               	.LBE3:
 201:tmk_core/common/action_layer.c ****     }
 202:tmk_core/common/action_layer.c **** }
 794               		.loc 1 202 0
 795 005e 0895      		ret
 796               		.cfi_endproc
 797               	.LFE26:
 799               		.section	.text.read_source_layers_cache,"ax",@progbits
 800               	.global	read_source_layers_cache
 802               	read_source_layers_cache:
 803               	.LFB27:
 203:tmk_core/common/action_layer.c **** 
 204:tmk_core/common/action_layer.c **** /** \brief read source layers cache
 205:tmk_core/common/action_layer.c ****  *
 206:tmk_core/common/action_layer.c ****  * reads the cached keys stored when the layer was changed
 207:tmk_core/common/action_layer.c ****  */
 208:tmk_core/common/action_layer.c **** uint8_t read_source_layers_cache(keypos_t key) {
 804               		.loc 1 208 0
 805               		.cfi_startproc
 806               	.LVL55:
 807               	/* prologue: function */
 808               	/* frame size = 0 */
 809               	/* stack size = 0 */
 810               	.L__stack_usage = 0
 209:tmk_core/common/action_layer.c ****     const uint8_t key_number  = key.col + (key.row * MATRIX_COLS);
 811               		.loc 1 209 0
 812 0000 292F      		mov r18,r25
 813 0002 220F      		lsl r18
 814 0004 290F      		add r18,r25
 815 0006 220F      		lsl r18
 816 0008 820F      		add r24,r18
 817               	.LVL56:
 210:tmk_core/common/action_layer.c ****     const uint8_t storage_row = key_number / 8;
 211:tmk_core/common/action_layer.c ****     const uint8_t storage_bit = key_number % 8;
 818               		.loc 1 211 0
 819 000a 982F      		mov r25,r24
 820 000c 9770      		andi r25,lo8(7)
 821               	.LVL57:
 210:tmk_core/common/action_layer.c ****     const uint8_t storage_row = key_number / 8;
 822               		.loc 1 210 0
 823 000e 8695      		lsr r24
 824 0010 8695      		lsr r24
 825 0012 8695      		lsr r24
 826               	.LVL58:
 827 0014 45E0      		ldi r20,lo8(5)
 828 0016 849F      		mul r24,r20
 829 0018 9001      		movw r18,r0
 830 001a 1124      		clr __zero_reg__
 831               		.loc 1 211 0
 832 001c 70E0      		ldi r23,0
 833 001e 60E0      		ldi r22,0
 212:tmk_core/common/action_layer.c ****     uint8_t       layer       = 0;
 834               		.loc 1 212 0
 835 0020 80E0      		ldi r24,0
 836               	.LVL59:
 837               	.L33:
 838               	.LBB4:
 213:tmk_core/common/action_layer.c **** 
 214:tmk_core/common/action_layer.c ****     for (uint8_t bit_number = 0; bit_number < MAX_LAYER_BITS; bit_number++) {
 215:tmk_core/common/action_layer.c ****         layer |= ((source_layers_cache[storage_row][bit_number] & (1U << storage_bit)) != 0) << bit
 839               		.loc 1 215 0 discriminator 3
 840 0022 F901      		movw r30,r18
 841 0024 E60F      		add r30,r22
 842 0026 F71F      		adc r31,r23
 843 0028 E050      		subi r30,lo8(-(source_layers_cache))
 844 002a F040      		sbci r31,hi8(-(source_layers_cache))
 845 002c 4081      		ld r20,Z
 846 002e 50E0      		ldi r21,0
 847 0030 092E      		mov r0,r25
 848 0032 00C0      		rjmp 2f
 849               		1:
 850 0034 5695      		lsr r21
 851 0036 4795      		ror r20
 852               		2:
 853 0038 0A94      		dec r0
 854 003a 02F4      		brpl 1b
 855 003c 4170      		andi r20,1
 856 003e 5527      		clr r21
 857 0040 062E      		mov r0,r22
 858 0042 00C0      		rjmp 2f
 859               		1:
 860 0044 440F      		lsl r20
 861               		2:
 862 0046 0A94      		dec r0
 863 0048 02F4      		brpl 1b
 864 004a 842B      		or r24,r20
 865               	.LVL60:
 866 004c 6F5F      		subi r22,-1
 867 004e 7F4F      		sbci r23,-1
 868               	.LVL61:
 214:tmk_core/common/action_layer.c ****         layer |= ((source_layers_cache[storage_row][bit_number] & (1U << storage_bit)) != 0) << bit
 869               		.loc 1 214 0 discriminator 3
 870 0050 6530      		cpi r22,5
 871 0052 7105      		cpc r23,__zero_reg__
 872 0054 01F4      		brne .L33
 873               	/* epilogue start */
 874               	.LBE4:
 216:tmk_core/common/action_layer.c ****     }
 217:tmk_core/common/action_layer.c **** 
 218:tmk_core/common/action_layer.c ****     return layer;
 219:tmk_core/common/action_layer.c **** }
 875               		.loc 1 219 0
 876 0056 0895      		ret
 877               		.cfi_endproc
 878               	.LFE27:
 880               		.section	.text.layer_switch_get_layer,"ax",@progbits
 881               	.global	layer_switch_get_layer
 883               	layer_switch_get_layer:
 884               	.LFB29:
 220:tmk_core/common/action_layer.c **** #endif
 221:tmk_core/common/action_layer.c **** 
 222:tmk_core/common/action_layer.c **** /** \brief Store or get action (FIXME: Needs better summary)
 223:tmk_core/common/action_layer.c ****  *
 224:tmk_core/common/action_layer.c ****  * Make sure the action triggered when the key is released is the same
 225:tmk_core/common/action_layer.c ****  * one as the one triggered on press. It's important for the mod keys
 226:tmk_core/common/action_layer.c ****  * when the layer is switched after the down event but before the up
 227:tmk_core/common/action_layer.c ****  * event as they may get stuck otherwise.
 228:tmk_core/common/action_layer.c ****  */
 229:tmk_core/common/action_layer.c **** action_t store_or_get_action(bool pressed, keypos_t key) {
 230:tmk_core/common/action_layer.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 231:tmk_core/common/action_layer.c ****     if (disable_action_cache) {
 232:tmk_core/common/action_layer.c ****         return layer_switch_get_action(key);
 233:tmk_core/common/action_layer.c ****     }
 234:tmk_core/common/action_layer.c **** 
 235:tmk_core/common/action_layer.c ****     uint8_t layer;
 236:tmk_core/common/action_layer.c **** 
 237:tmk_core/common/action_layer.c ****     if (pressed) {
 238:tmk_core/common/action_layer.c ****         layer = layer_switch_get_layer(key);
 239:tmk_core/common/action_layer.c ****         update_source_layers_cache(key, layer);
 240:tmk_core/common/action_layer.c ****     } else {
 241:tmk_core/common/action_layer.c ****         layer = read_source_layers_cache(key);
 242:tmk_core/common/action_layer.c ****     }
 243:tmk_core/common/action_layer.c ****     return action_for_key(layer, key);
 244:tmk_core/common/action_layer.c **** #else
 245:tmk_core/common/action_layer.c ****     return layer_switch_get_action(key);
 246:tmk_core/common/action_layer.c **** #endif
 247:tmk_core/common/action_layer.c **** }
 248:tmk_core/common/action_layer.c **** 
 249:tmk_core/common/action_layer.c **** /** \brief Layer switch get layer
 250:tmk_core/common/action_layer.c ****  *
 251:tmk_core/common/action_layer.c ****  * Gets the layer based on key info
 252:tmk_core/common/action_layer.c ****  */
 253:tmk_core/common/action_layer.c **** uint8_t layer_switch_get_layer(keypos_t key) {
 885               		.loc 1 253 0
 886               		.cfi_startproc
 887               	.LVL62:
 888 0000 BF92      		push r11
 889               	.LCFI20:
 890               		.cfi_def_cfa_offset 3
 891               		.cfi_offset 11, -2
 892 0002 CF92      		push r12
 893               	.LCFI21:
 894               		.cfi_def_cfa_offset 4
 895               		.cfi_offset 12, -3
 896 0004 DF92      		push r13
 897               	.LCFI22:
 898               		.cfi_def_cfa_offset 5
 899               		.cfi_offset 13, -4
 900 0006 EF92      		push r14
 901               	.LCFI23:
 902               		.cfi_def_cfa_offset 6
 903               		.cfi_offset 14, -5
 904 0008 FF92      		push r15
 905               	.LCFI24:
 906               		.cfi_def_cfa_offset 7
 907               		.cfi_offset 15, -6
 908 000a 0F93      		push r16
 909               	.LCFI25:
 910               		.cfi_def_cfa_offset 8
 911               		.cfi_offset 16, -7
 912 000c 1F93      		push r17
 913               	.LCFI26:
 914               		.cfi_def_cfa_offset 9
 915               		.cfi_offset 17, -8
 916 000e CF93      		push r28
 917               	.LCFI27:
 918               		.cfi_def_cfa_offset 10
 919               		.cfi_offset 28, -9
 920 0010 DF93      		push r29
 921               	.LCFI28:
 922               		.cfi_def_cfa_offset 11
 923               		.cfi_offset 29, -10
 924               	/* prologue: function */
 925               	/* frame size = 0 */
 926               	/* stack size = 9 */
 927               	.L__stack_usage = 9
 928 0012 8C01      		movw r16,r24
 929               	.LVL63:
 254:tmk_core/common/action_layer.c **** #ifndef NO_ACTION_LAYER
 255:tmk_core/common/action_layer.c ****     action_t action;
 256:tmk_core/common/action_layer.c ****     action.code = ACTION_TRANSPARENT;
 257:tmk_core/common/action_layer.c **** 
 258:tmk_core/common/action_layer.c ****     layer_state_t layers = layer_state | default_layer_state;
 930               		.loc 1 258 0
 931 0014 C090 0000 		lds r12,layer_state
 932 0018 D090 0000 		lds r13,layer_state+1
 933 001c E090 0000 		lds r14,layer_state+2
 934 0020 F090 0000 		lds r15,layer_state+3
 935 0024 8091 0000 		lds r24,default_layer_state
 936 0028 9091 0000 		lds r25,default_layer_state+1
 937 002c A091 0000 		lds r26,default_layer_state+2
 938 0030 B091 0000 		lds r27,default_layer_state+3
 939               	.LVL64:
 940 0034 C82A      		or r12,r24
 941 0036 D92A      		or r13,r25
 942 0038 EA2A      		or r14,r26
 943 003a FB2A      		or r15,r27
 944               	.LVL65:
 945 003c CFE1      		ldi r28,lo8(31)
 946 003e D0E0      		ldi r29,0
 947               	.LVL66:
 948               	.L37:
 949 0040 BC2E      		mov r11,r28
 950               	.LBB5:
 259:tmk_core/common/action_layer.c ****     /* check top layer first */
 260:tmk_core/common/action_layer.c ****     for (int8_t i = sizeof(layer_state_t) * 8 - 1; i >= 0; i--) {
 261:tmk_core/common/action_layer.c ****         if (layers & (1UL << i)) {
 951               		.loc 1 261 0
 952 0042 D701      		movw r26,r14
 953 0044 C601      		movw r24,r12
 954 0046 0C2E      		mov r0,r28
 955 0048 00C0      		rjmp 2f
 956               		1:
 957 004a B695      		lsr r27
 958 004c A795      		ror r26
 959 004e 9795      		ror r25
 960 0050 8795      		ror r24
 961               		2:
 962 0052 0A94      		dec r0
 963 0054 02F4      		brpl 1b
 964 0056 80FD      		sbrc r24,0
 965 0058 00C0      		rjmp .L36
 966               	.L39:
 967               	.LVL67:
 968               	.LVL68:
 969 005a 2197      		sbiw r28,1
 970 005c 00F4      		brcc .L37
 971               	.LBE5:
 262:tmk_core/common/action_layer.c ****             action = action_for_key(i, key);
 263:tmk_core/common/action_layer.c ****             if (action.code != ACTION_TRANSPARENT) {
 264:tmk_core/common/action_layer.c ****                 return i;
 265:tmk_core/common/action_layer.c ****             }
 266:tmk_core/common/action_layer.c ****         }
 267:tmk_core/common/action_layer.c ****     }
 268:tmk_core/common/action_layer.c ****     /* fall back to layer 0 */
 269:tmk_core/common/action_layer.c ****     return 0;
 972               		.loc 1 269 0
 973 005e B12C      		mov r11,__zero_reg__
 974               	.LVL69:
 975               	.L35:
 270:tmk_core/common/action_layer.c **** #else
 271:tmk_core/common/action_layer.c ****     return biton32(default_layer_state);
 272:tmk_core/common/action_layer.c **** #endif
 273:tmk_core/common/action_layer.c **** }
 976               		.loc 1 273 0
 977 0060 8B2D      		mov r24,r11
 978               	/* epilogue start */
 979 0062 DF91      		pop r29
 980 0064 CF91      		pop r28
 981 0066 1F91      		pop r17
 982 0068 0F91      		pop r16
 983               	.LVL70:
 984 006a FF90      		pop r15
 985 006c EF90      		pop r14
 986 006e DF90      		pop r13
 987 0070 CF90      		pop r12
 988               	.LVL71:
 989 0072 BF90      		pop r11
 990 0074 0895      		ret
 991               	.LVL72:
 992               	.L36:
 993               	.LBB6:
 262:tmk_core/common/action_layer.c ****             action = action_for_key(i, key);
 994               		.loc 1 262 0
 995 0076 B801      		movw r22,r16
 996 0078 8C2F      		mov r24,r28
 997 007a 0E94 0000 		call action_for_key
 998               	.LVL73:
 263:tmk_core/common/action_layer.c ****                 return i;
 999               		.loc 1 263 0
 1000 007e 0197      		sbiw r24,1
 1001 0080 01F0      		breq .L39
 1002 0082 00C0      		rjmp .L35
 1003               	.LBE6:
 1004               		.cfi_endproc
 1005               	.LFE29:
 1007               		.section	.text.layer_switch_get_action,"ax",@progbits
 1008               	.global	layer_switch_get_action
 1010               	layer_switch_get_action:
 1011               	.LFB30:
 274:tmk_core/common/action_layer.c **** 
 275:tmk_core/common/action_layer.c **** /** \brief Layer switch get layer
 276:tmk_core/common/action_layer.c ****  *
 277:tmk_core/common/action_layer.c ****  * Gets action code based on key position
 278:tmk_core/common/action_layer.c ****  */
 279:tmk_core/common/action_layer.c **** action_t layer_switch_get_action(keypos_t key) { return action_for_key(layer_switch_get_layer(key),
 1012               		.loc 1 279 0
 1013               		.cfi_startproc
 1014               	.LVL74:
 1015 0000 CF93      		push r28
 1016               	.LCFI29:
 1017               		.cfi_def_cfa_offset 3
 1018               		.cfi_offset 28, -2
 1019 0002 DF93      		push r29
 1020               	.LCFI30:
 1021               		.cfi_def_cfa_offset 4
 1022               		.cfi_offset 29, -3
 1023               	/* prologue: function */
 1024               	/* frame size = 0 */
 1025               	/* stack size = 2 */
 1026               	.L__stack_usage = 2
 1027 0004 EC01      		movw r28,r24
 1028               		.loc 1 279 0
 1029 0006 0E94 0000 		call layer_switch_get_layer
 1030               	.LVL75:
 1031 000a BE01      		movw r22,r28
 1032               	/* epilogue start */
 1033 000c DF91      		pop r29
 1034 000e CF91      		pop r28
 1035               	.LVL76:
 1036 0010 0C94 0000 		jmp action_for_key
 1037               	.LVL77:
 1038               		.cfi_endproc
 1039               	.LFE30:
 1041               		.section	.text.store_or_get_action,"ax",@progbits
 1042               	.global	store_or_get_action
 1044               	store_or_get_action:
 1045               	.LFB28:
 229:tmk_core/common/action_layer.c **** #if !defined(NO_ACTION_LAYER) && !defined(STRICT_LAYER_RELEASE)
 1046               		.loc 1 229 0
 1047               		.cfi_startproc
 1048               	.LVL78:
 1049 0000 1F93      		push r17
 1050               	.LCFI31:
 1051               		.cfi_def_cfa_offset 3
 1052               		.cfi_offset 17, -2
 1053 0002 CF93      		push r28
 1054               	.LCFI32:
 1055               		.cfi_def_cfa_offset 4
 1056               		.cfi_offset 28, -3
 1057 0004 DF93      		push r29
 1058               	.LCFI33:
 1059               		.cfi_def_cfa_offset 5
 1060               		.cfi_offset 29, -4
 1061               	/* prologue: function */
 1062               	/* frame size = 0 */
 1063               	/* stack size = 3 */
 1064               	.L__stack_usage = 3
 1065 0006 EB01      		movw r28,r22
 231:tmk_core/common/action_layer.c ****         return layer_switch_get_action(key);
 1066               		.loc 1 231 0
 1067 0008 9091 0000 		lds r25,disable_action_cache
 1068 000c 9923      		tst r25
 1069 000e 01F0      		breq .L46
 232:tmk_core/common/action_layer.c ****     }
 1070               		.loc 1 232 0
 1071 0010 CB01      		movw r24,r22
 1072               	.LVL79:
 1073               	/* epilogue start */
 247:tmk_core/common/action_layer.c **** 
 1074               		.loc 1 247 0
 1075 0012 DF91      		pop r29
 1076 0014 CF91      		pop r28
 1077 0016 1F91      		pop r17
 232:tmk_core/common/action_layer.c ****     }
 1078               		.loc 1 232 0
 1079 0018 0C94 0000 		jmp layer_switch_get_action
 1080               	.LVL80:
 1081               	.L46:
 237:tmk_core/common/action_layer.c ****         layer = layer_switch_get_layer(key);
 1082               		.loc 1 237 0
 1083 001c 8823      		tst r24
 1084 001e 01F0      		breq .L47
 238:tmk_core/common/action_layer.c ****         update_source_layers_cache(key, layer);
 1085               		.loc 1 238 0
 1086 0020 CB01      		movw r24,r22
 1087               	.LVL81:
 1088 0022 0E94 0000 		call layer_switch_get_layer
 1089               	.LVL82:
 1090 0026 182F      		mov r17,r24
 1091               	.LVL83:
 239:tmk_core/common/action_layer.c ****     } else {
 1092               		.loc 1 239 0
 1093 0028 682F      		mov r22,r24
 1094 002a CE01      		movw r24,r28
 1095 002c 0E94 0000 		call update_source_layers_cache
 1096               	.LVL84:
 1097               	.L48:
 243:tmk_core/common/action_layer.c **** #else
 1098               		.loc 1 243 0
 1099 0030 BE01      		movw r22,r28
 1100 0032 812F      		mov r24,r17
 1101               	/* epilogue start */
 247:tmk_core/common/action_layer.c **** 
 1102               		.loc 1 247 0
 1103 0034 DF91      		pop r29
 1104 0036 CF91      		pop r28
 1105               	.LVL85:
 1106 0038 1F91      		pop r17
 1107               	.LVL86:
 243:tmk_core/common/action_layer.c **** #else
 1108               		.loc 1 243 0
 1109 003a 0C94 0000 		jmp action_for_key
 1110               	.LVL87:
 1111               	.L47:
 241:tmk_core/common/action_layer.c ****     }
 1112               		.loc 1 241 0
 1113 003e CB01      		movw r24,r22
 1114               	.LVL88:
 1115 0040 0E94 0000 		call read_source_layers_cache
 1116               	.LVL89:
 1117 0044 182F      		mov r17,r24
 1118               	.LVL90:
 1119 0046 00C0      		rjmp .L48
 1120               		.cfi_endproc
 1121               	.LFE28:
 1123               	.global	source_layers_cache
 1124               		.section	.bss.source_layers_cache,"aw",@nobits
 1127               	source_layers_cache:
 1128 0000 0000 0000 		.zero	40
 1128      0000 0000 
 1128      0000 0000 
 1128      0000 0000 
 1128      0000 0000 
 1129               	.global	layer_state
 1130               		.section	.bss.layer_state,"aw",@nobits
 1133               	layer_state:
 1134 0000 0000 0000 		.zero	4
 1135               	.global	default_layer_state
 1136               		.section	.bss.default_layer_state,"aw",@nobits
 1139               	default_layer_state:
 1140 0000 0000 0000 		.zero	4
 1141               		.text
 1142               	.Letext0:
 1143               		.file 2 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/stdint.h"
 1144               		.file 3 "tmk_core/common/keyboard.h"
 1145               		.file 4 "tmk_core/common/action_code.h"
 1146               		.file 5 "tmk_core/common/action_layer.h"
 1147               		.file 6 "tmk_core/common/action.h"
 1148               		.file 7 "tmk_core/common/debug.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_layer.c
/var/tmp//cc4alg5x.s:2      *ABS*:000000000000003e __SP_H__
/var/tmp//cc4alg5x.s:3      *ABS*:000000000000003d __SP_L__
/var/tmp//cc4alg5x.s:4      *ABS*:000000000000003f __SREG__
/var/tmp//cc4alg5x.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/tmp//cc4alg5x.s:6      *ABS*:0000000000000001 __zero_reg__
/var/tmp//cc4alg5x.s:13     .text.default_layer_state_set_user:0000000000000000 default_layer_state_set_user
/var/tmp//cc4alg5x.s:13     .text.default_layer_state_set_user:0000000000000000 default_layer_state_set_user.localalias.0
/var/tmp//cc4alg5x.s:33     .text.default_layer_state_set_kb:0000000000000000 default_layer_state_set_kb
/var/tmp//cc4alg5x.s:50     .text.default_layer_state_set:0000000000000000 default_layer_state_set
/var/tmp//cc4alg5x.s:1139   .bss.default_layer_state:0000000000000000 default_layer_state
/var/tmp//cc4alg5x.s:76     .text.default_layer_debug:0000000000000000 default_layer_debug
/var/tmp//cc4alg5x.s:93     .text.default_layer_set:0000000000000000 default_layer_set
/var/tmp//cc4alg5x.s:111    .text.default_layer_or:0000000000000000 default_layer_or
/var/tmp//cc4alg5x.s:149    .text.default_layer_and:0000000000000000 default_layer_and
/var/tmp//cc4alg5x.s:187    .text.default_layer_xor:0000000000000000 default_layer_xor
/var/tmp//cc4alg5x.s:225    .text.layer_state_set_user:0000000000000000 layer_state_set_user
/var/tmp//cc4alg5x.s:239    .text.layer_state_set_kb:0000000000000000 layer_state_set_kb
/var/tmp//cc4alg5x.s:257    .text.layer_state_set:0000000000000000 layer_state_set
/var/tmp//cc4alg5x.s:1133   .bss.layer_state:0000000000000000 layer_state
/var/tmp//cc4alg5x.s:283    .text.layer_clear:0000000000000000 layer_clear
/var/tmp//cc4alg5x.s:303    .text.layer_state_cmp:0000000000000000 layer_state_cmp
/var/tmp//cc4alg5x.s:348    .text.layer_state_is:0000000000000000 layer_state_is
/var/tmp//cc4alg5x.s:371    .text.layer_move:0000000000000000 layer_move
/var/tmp//cc4alg5x.s:418    .text.layer_on:0000000000000000 layer_on
/var/tmp//cc4alg5x.s:473    .text.layer_off:0000000000000000 layer_off
/var/tmp//cc4alg5x.s:530    .text.layer_invert:0000000000000000 layer_invert
/var/tmp//cc4alg5x.s:585    .text.layer_or:0000000000000000 layer_or
/var/tmp//cc4alg5x.s:623    .text.layer_and:0000000000000000 layer_and
/var/tmp//cc4alg5x.s:661    .text.layer_xor:0000000000000000 layer_xor
/var/tmp//cc4alg5x.s:699    .text.layer_debug:0000000000000000 layer_debug
/var/tmp//cc4alg5x.s:714    .text.update_source_layers_cache:0000000000000000 update_source_layers_cache
/var/tmp//cc4alg5x.s:1127   .bss.source_layers_cache:0000000000000000 source_layers_cache
/var/tmp//cc4alg5x.s:802    .text.read_source_layers_cache:0000000000000000 read_source_layers_cache
/var/tmp//cc4alg5x.s:883    .text.layer_switch_get_layer:0000000000000000 layer_switch_get_layer
/var/tmp//cc4alg5x.s:1010   .text.layer_switch_get_action:0000000000000000 layer_switch_get_action
/var/tmp//cc4alg5x.s:1044   .text.store_or_get_action:0000000000000000 store_or_get_action

UNDEFINED SYMBOLS
clear_keyboard_but_mods_and_keys
action_for_key
disable_action_cache
__do_clear_bss
