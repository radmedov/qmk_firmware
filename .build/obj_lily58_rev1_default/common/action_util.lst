   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.add_key,"ax",@progbits
  11               	.global	add_key
  13               	add_key:
  14               	.LFB0:
  15               		.file 1 "tmk_core/common/action_util.h"
   1:tmk_core/common/action_util.h **** /*
   2:tmk_core/common/action_util.h **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action_util.h **** 
   4:tmk_core/common/action_util.h **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action_util.h **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action_util.h **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action_util.h **** (at your option) any later version.
   8:tmk_core/common/action_util.h **** 
   9:tmk_core/common/action_util.h **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action_util.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action_util.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action_util.h **** GNU General Public License for more details.
  13:tmk_core/common/action_util.h **** 
  14:tmk_core/common/action_util.h **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action_util.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action_util.h **** */
  17:tmk_core/common/action_util.h **** #ifndef ACTION_UTIL_H
  18:tmk_core/common/action_util.h **** #define ACTION_UTIL_H
  19:tmk_core/common/action_util.h **** 
  20:tmk_core/common/action_util.h **** #include <stdint.h>
  21:tmk_core/common/action_util.h **** #include "report.h"
  22:tmk_core/common/action_util.h **** 
  23:tmk_core/common/action_util.h **** #ifdef __cplusplus
  24:tmk_core/common/action_util.h **** extern "C" {
  25:tmk_core/common/action_util.h **** #endif
  26:tmk_core/common/action_util.h **** 
  27:tmk_core/common/action_util.h **** extern report_keyboard_t *keyboard_report;
  28:tmk_core/common/action_util.h **** 
  29:tmk_core/common/action_util.h **** void send_keyboard_report(void);
  30:tmk_core/common/action_util.h **** 
  31:tmk_core/common/action_util.h **** /* key */
  32:tmk_core/common/action_util.h **** inline void add_key(uint8_t key) { add_key_to_report(keyboard_report, key); }
  16               		.loc 1 32 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               		.loc 1 32 0
  24 0000 682F      		mov r22,r24
  25 0002 8091 0000 		lds r24,keyboard_report
  26 0006 9091 0000 		lds r25,keyboard_report+1
  27               	.LVL1:
  28 000a 0C94 0000 		jmp add_key_to_report
  29               	.LVL2:
  30               		.cfi_endproc
  31               	.LFE0:
  33               		.section	.text.del_key,"ax",@progbits
  34               	.global	del_key
  36               	del_key:
  37               	.LFB1:
  33:tmk_core/common/action_util.h **** 
  34:tmk_core/common/action_util.h **** inline void del_key(uint8_t key) { del_key_from_report(keyboard_report, key); }
  38               		.loc 1 34 0
  39               		.cfi_startproc
  40               	.LVL3:
  41               	/* prologue: function */
  42               	/* frame size = 0 */
  43               	/* stack size = 0 */
  44               	.L__stack_usage = 0
  45               		.loc 1 34 0
  46 0000 682F      		mov r22,r24
  47 0002 8091 0000 		lds r24,keyboard_report
  48 0006 9091 0000 		lds r25,keyboard_report+1
  49               	.LVL4:
  50 000a 0C94 0000 		jmp del_key_from_report
  51               	.LVL5:
  52               		.cfi_endproc
  53               	.LFE1:
  55               		.section	.text.clear_keys,"ax",@progbits
  56               	.global	clear_keys
  58               	clear_keys:
  59               	.LFB2:
  35:tmk_core/common/action_util.h **** 
  36:tmk_core/common/action_util.h **** inline void clear_keys(void) { clear_keys_from_report(keyboard_report); }
  60               		.loc 1 36 0
  61               		.cfi_startproc
  62               	/* prologue: function */
  63               	/* frame size = 0 */
  64               	/* stack size = 0 */
  65               	.L__stack_usage = 0
  66               		.loc 1 36 0
  67 0000 8091 0000 		lds r24,keyboard_report
  68 0004 9091 0000 		lds r25,keyboard_report+1
  69 0008 0C94 0000 		jmp clear_keys_from_report
  70               	.LVL6:
  71               		.cfi_endproc
  72               	.LFE2:
  74               		.section	.text.get_oneshot_locked_mods,"ax",@progbits
  75               	.global	get_oneshot_locked_mods
  77               	get_oneshot_locked_mods:
  78               	.LFB9:
  79               		.file 2 "tmk_core/common/action_util.c"
   1:tmk_core/common/action_util.c **** /*
   2:tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/action_util.c **** 
   4:tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/action_util.c **** (at your option) any later version.
   8:tmk_core/common/action_util.c **** 
   9:tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:tmk_core/common/action_util.c **** 
  14:tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/action_util.c **** */
  17:tmk_core/common/action_util.c **** #include "host.h"
  18:tmk_core/common/action_util.c **** #include "report.h"
  19:tmk_core/common/action_util.c **** #include "debug.h"
  20:tmk_core/common/action_util.c **** #include "action_util.h"
  21:tmk_core/common/action_util.c **** #include "action_layer.h"
  22:tmk_core/common/action_util.c **** #include "timer.h"
  23:tmk_core/common/action_util.c **** #include "keycode_config.h"
  24:tmk_core/common/action_util.c **** 
  25:tmk_core/common/action_util.c **** extern keymap_config_t keymap_config;
  26:tmk_core/common/action_util.c **** 
  27:tmk_core/common/action_util.c **** static uint8_t real_mods  = 0;
  28:tmk_core/common/action_util.c **** static uint8_t weak_mods  = 0;
  29:tmk_core/common/action_util.c **** static uint8_t macro_mods = 0;
  30:tmk_core/common/action_util.c **** 
  31:tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  32:tmk_core/common/action_util.c **** #    define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  33:tmk_core/common/action_util.c **** #    define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  34:tmk_core/common/action_util.c **** #    define RO_INC(a) RO_ADD(a, 1)
  35:tmk_core/common/action_util.c **** #    define RO_DEC(a) RO_SUB(a, 1)
  36:tmk_core/common/action_util.c **** static int8_t cb_head  = 0;
  37:tmk_core/common/action_util.c **** static int8_t cb_tail  = 0;
  38:tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  39:tmk_core/common/action_util.c **** #endif
  40:tmk_core/common/action_util.c **** 
  41:tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  42:tmk_core/common/action_util.c **** // report_keyboard_t keyboard_report = {};
  43:tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  44:tmk_core/common/action_util.c **** 
  45:tmk_core/common/action_util.c **** extern inline void add_key(uint8_t key);
  46:tmk_core/common/action_util.c **** extern inline void del_key(uint8_t key);
  47:tmk_core/common/action_util.c **** extern inline void clear_keys(void);
  48:tmk_core/common/action_util.c **** 
  49:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  50:tmk_core/common/action_util.c **** static uint8_t oneshot_mods        = 0;
  51:tmk_core/common/action_util.c **** static uint8_t oneshot_locked_mods = 0;
  52:tmk_core/common/action_util.c **** uint8_t        get_oneshot_locked_mods(void) { return oneshot_locked_mods; }
  80               		.loc 2 52 0
  81               		.cfi_startproc
  82               	/* prologue: function */
  83               	/* frame size = 0 */
  84               	/* stack size = 0 */
  85               	.L__stack_usage = 0
  86               		.loc 2 52 0
  87 0000 8091 0000 		lds r24,oneshot_locked_mods
  88               	/* epilogue start */
  89 0004 0895      		ret
  90               		.cfi_endproc
  91               	.LFE9:
  93               		.section	.text.has_oneshot_mods_timed_out,"ax",@progbits
  94               	.global	has_oneshot_mods_timed_out
  96               	has_oneshot_mods_timed_out:
  97               	.LFB12:
  53:tmk_core/common/action_util.c **** void           set_oneshot_locked_mods(uint8_t mods) {
  54:tmk_core/common/action_util.c ****     if (mods != oneshot_locked_mods) {
  55:tmk_core/common/action_util.c ****         oneshot_locked_mods = mods;
  56:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
  57:tmk_core/common/action_util.c ****     }
  58:tmk_core/common/action_util.c **** }
  59:tmk_core/common/action_util.c **** void clear_oneshot_locked_mods(void) {
  60:tmk_core/common/action_util.c ****     if (oneshot_locked_mods) {
  61:tmk_core/common/action_util.c ****         oneshot_locked_mods = 0;
  62:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
  63:tmk_core/common/action_util.c ****     }
  64:tmk_core/common/action_util.c **** }
  65:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  66:tmk_core/common/action_util.c **** static uint16_t oneshot_time = 0;
  67:tmk_core/common/action_util.c **** bool            has_oneshot_mods_timed_out(void) { return TIMER_DIFF_16(timer_read(), oneshot_time)
  68:tmk_core/common/action_util.c **** #    else
  69:tmk_core/common/action_util.c **** bool has_oneshot_mods_timed_out(void) { return false; }
  98               		.loc 2 69 0
  99               		.cfi_startproc
 100               	/* prologue: function */
 101               	/* frame size = 0 */
 102               	/* stack size = 0 */
 103               	.L__stack_usage = 0
 104               		.loc 2 69 0
 105 0000 80E0      		ldi r24,0
 106               	/* epilogue start */
 107 0002 0895      		ret
 108               		.cfi_endproc
 109               	.LFE12:
 111               		.section	.text.get_oneshot_layer,"ax",@progbits
 112               	.global	get_oneshot_layer
 114               	get_oneshot_layer:
 115               	.LFB13:
  70:tmk_core/common/action_util.c **** #    endif
  71:tmk_core/common/action_util.c **** #endif
  72:tmk_core/common/action_util.c **** 
  73:tmk_core/common/action_util.c **** /* oneshot layer */
  74:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  75:tmk_core/common/action_util.c **** /** \brief oneshot_layer_data bits
  76:tmk_core/common/action_util.c ****  * LLLL LSSS
  77:tmk_core/common/action_util.c ****  * where:
  78:tmk_core/common/action_util.c ****  *   L => are layer bits
  79:tmk_core/common/action_util.c ****  *   S => oneshot state bits
  80:tmk_core/common/action_util.c ****  */
  81:tmk_core/common/action_util.c **** static int8_t oneshot_layer_data = 0;
  82:tmk_core/common/action_util.c **** 
  83:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
 116               		.loc 2 83 0
 117               		.cfi_startproc
 118               	/* prologue: function */
 119               	/* frame size = 0 */
 120               	/* stack size = 0 */
 121               	.L__stack_usage = 0
 122               		.loc 2 83 0
 123 0000 8091 0000 		lds r24,oneshot_layer_data
 124 0004 8595      		asr r24
 125 0006 8595      		asr r24
 126 0008 8595      		asr r24
 127               	/* epilogue start */
 128 000a 0895      		ret
 129               		.cfi_endproc
 130               	.LFE13:
 132               		.section	.text.get_oneshot_layer_state,"ax",@progbits
 133               	.global	get_oneshot_layer_state
 135               	get_oneshot_layer_state:
 136               	.LFB14:
  84:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 137               		.loc 2 84 0
 138               		.cfi_startproc
 139               	/* prologue: function */
 140               	/* frame size = 0 */
 141               	/* stack size = 0 */
 142               	.L__stack_usage = 0
 143               		.loc 2 84 0
 144 0000 8091 0000 		lds r24,oneshot_layer_data
 145 0004 8770      		andi r24,lo8(7)
 146               	/* epilogue start */
 147 0006 0895      		ret
 148               		.cfi_endproc
 149               	.LFE14:
 151               		.section	.text.is_oneshot_layer_active,"ax",@progbits
 152               	.global	is_oneshot_layer_active
 154               	is_oneshot_layer_active:
 155               	.LFB18:
  85:tmk_core/common/action_util.c **** 
  86:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  87:tmk_core/common/action_util.c **** static uint16_t oneshot_layer_time = 0;
  88:tmk_core/common/action_util.c **** inline bool     has_oneshot_layer_timed_out() { return TIMER_DIFF_16(timer_read(), oneshot_layer_ti
  89:tmk_core/common/action_util.c **** #    endif
  90:tmk_core/common/action_util.c **** 
  91:tmk_core/common/action_util.c **** /** \brief Set oneshot layer
  92:tmk_core/common/action_util.c ****  *
  93:tmk_core/common/action_util.c ****  * FIXME: needs doc
  94:tmk_core/common/action_util.c ****  */
  95:tmk_core/common/action_util.c **** void set_oneshot_layer(uint8_t layer, uint8_t state) {
  96:tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
  97:tmk_core/common/action_util.c ****     layer_on(layer);
  98:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  99:tmk_core/common/action_util.c ****     oneshot_layer_time = timer_read();
 100:tmk_core/common/action_util.c **** #    endif
 101:tmk_core/common/action_util.c ****     oneshot_layer_changed_kb(get_oneshot_layer());
 102:tmk_core/common/action_util.c **** }
 103:tmk_core/common/action_util.c **** /** \brief Reset oneshot layer
 104:tmk_core/common/action_util.c ****  *
 105:tmk_core/common/action_util.c ****  * FIXME: needs doc
 106:tmk_core/common/action_util.c ****  */
 107:tmk_core/common/action_util.c **** void reset_oneshot_layer(void) {
 108:tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 109:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 110:tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 111:tmk_core/common/action_util.c **** #    endif
 112:tmk_core/common/action_util.c ****     oneshot_layer_changed_kb(get_oneshot_layer());
 113:tmk_core/common/action_util.c **** }
 114:tmk_core/common/action_util.c **** /** \brief Clear oneshot layer
 115:tmk_core/common/action_util.c ****  *
 116:tmk_core/common/action_util.c ****  * FIXME: needs doc
 117:tmk_core/common/action_util.c ****  */
 118:tmk_core/common/action_util.c **** void clear_oneshot_layer_state(oneshot_fullfillment_t state) {
 119:tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 120:tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 121:tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 122:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 123:tmk_core/common/action_util.c ****         reset_oneshot_layer();
 124:tmk_core/common/action_util.c ****     }
 125:tmk_core/common/action_util.c **** }
 126:tmk_core/common/action_util.c **** /** \brief Is oneshot layer active
 127:tmk_core/common/action_util.c ****  *
 128:tmk_core/common/action_util.c ****  * FIXME: needs doc
 129:tmk_core/common/action_util.c ****  */
 130:tmk_core/common/action_util.c **** bool is_oneshot_layer_active(void) { return get_oneshot_layer_state(); }
 156               		.loc 2 130 0
 157               		.cfi_startproc
 158               	/* prologue: function */
 159               	/* frame size = 0 */
 160               	/* stack size = 0 */
 161               	.L__stack_usage = 0
 162               	.LBB12:
 163               	.LBB13:
  84:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 164               		.loc 2 84 0
 165 0000 9091 0000 		lds r25,oneshot_layer_data
 166 0004 9770      		andi r25,lo8(7)
 167               	.LBE13:
 168               	.LBE12:
 169               		.loc 2 130 0
 170 0006 81E0      		ldi r24,lo8(1)
 171 0008 01F4      		brne .L9
 172 000a 80E0      		ldi r24,0
 173               	.L9:
 174               	/* epilogue start */
 175 000c 0895      		ret
 176               		.cfi_endproc
 177               	.LFE18:
 179               		.section	.text.get_mods,"ax",@progbits
 180               	.global	get_mods
 182               	get_mods:
 183               	.LFB20:
 131:tmk_core/common/action_util.c **** #endif
 132:tmk_core/common/action_util.c **** 
 133:tmk_core/common/action_util.c **** /** \brief Send keyboard report
 134:tmk_core/common/action_util.c ****  *
 135:tmk_core/common/action_util.c ****  * FIXME: needs doc
 136:tmk_core/common/action_util.c ****  */
 137:tmk_core/common/action_util.c **** void send_keyboard_report(void) {
 138:tmk_core/common/action_util.c ****     keyboard_report->mods = real_mods;
 139:tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 140:tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 141:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 142:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 143:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 144:tmk_core/common/action_util.c ****         if (has_oneshot_mods_timed_out()) {
 145:tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 146:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 147:tmk_core/common/action_util.c ****         }
 148:tmk_core/common/action_util.c **** #    endif
 149:tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
 150:tmk_core/common/action_util.c ****         if (has_anykey(keyboard_report)) {
 151:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 152:tmk_core/common/action_util.c ****         }
 153:tmk_core/common/action_util.c ****     }
 154:tmk_core/common/action_util.c **** 
 155:tmk_core/common/action_util.c **** #endif
 156:tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
 157:tmk_core/common/action_util.c **** }
 158:tmk_core/common/action_util.c **** 
 159:tmk_core/common/action_util.c **** /** \brief Get mods
 160:tmk_core/common/action_util.c ****  *
 161:tmk_core/common/action_util.c ****  * FIXME: needs doc
 162:tmk_core/common/action_util.c ****  */
 163:tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 184               		.loc 2 163 0
 185               		.cfi_startproc
 186               	/* prologue: function */
 187               	/* frame size = 0 */
 188               	/* stack size = 0 */
 189               	.L__stack_usage = 0
 190               		.loc 2 163 0
 191 0000 8091 0000 		lds r24,real_mods
 192               	/* epilogue start */
 193 0004 0895      		ret
 194               		.cfi_endproc
 195               	.LFE20:
 197               		.section	.text.add_mods,"ax",@progbits
 198               	.global	add_mods
 200               	add_mods:
 201               	.LFB21:
 164:tmk_core/common/action_util.c **** /** \brief add mods
 165:tmk_core/common/action_util.c ****  *
 166:tmk_core/common/action_util.c ****  * FIXME: needs doc
 167:tmk_core/common/action_util.c ****  */
 168:tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 202               		.loc 2 168 0
 203               		.cfi_startproc
 204               	.LVL7:
 205               	/* prologue: function */
 206               	/* frame size = 0 */
 207               	/* stack size = 0 */
 208               	.L__stack_usage = 0
 209               		.loc 2 168 0
 210 0000 9091 0000 		lds r25,real_mods
 211 0004 892B      		or r24,r25
 212               	.LVL8:
 213 0006 8093 0000 		sts real_mods,r24
 214               	/* epilogue start */
 215 000a 0895      		ret
 216               		.cfi_endproc
 217               	.LFE21:
 219               		.section	.text.del_mods,"ax",@progbits
 220               	.global	del_mods
 222               	del_mods:
 223               	.LFB22:
 169:tmk_core/common/action_util.c **** /** \brief del mods
 170:tmk_core/common/action_util.c ****  *
 171:tmk_core/common/action_util.c ****  * FIXME: needs doc
 172:tmk_core/common/action_util.c ****  */
 173:tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 224               		.loc 2 173 0
 225               		.cfi_startproc
 226               	.LVL9:
 227               	/* prologue: function */
 228               	/* frame size = 0 */
 229               	/* stack size = 0 */
 230               	.L__stack_usage = 0
 231               		.loc 2 173 0
 232 0000 982F      		mov r25,r24
 233 0002 9095      		com r25
 234 0004 8091 0000 		lds r24,real_mods
 235               	.LVL10:
 236 0008 8923      		and r24,r25
 237 000a 8093 0000 		sts real_mods,r24
 238               	/* epilogue start */
 239 000e 0895      		ret
 240               		.cfi_endproc
 241               	.LFE22:
 243               		.section	.text.set_mods,"ax",@progbits
 244               	.global	set_mods
 246               	set_mods:
 247               	.LFB23:
 174:tmk_core/common/action_util.c **** /** \brief set mods
 175:tmk_core/common/action_util.c ****  *
 176:tmk_core/common/action_util.c ****  * FIXME: needs doc
 177:tmk_core/common/action_util.c ****  */
 178:tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 248               		.loc 2 178 0
 249               		.cfi_startproc
 250               	.LVL11:
 251               	/* prologue: function */
 252               	/* frame size = 0 */
 253               	/* stack size = 0 */
 254               	.L__stack_usage = 0
 255               		.loc 2 178 0
 256 0000 8093 0000 		sts real_mods,r24
 257               	/* epilogue start */
 258 0004 0895      		ret
 259               		.cfi_endproc
 260               	.LFE23:
 262               		.section	.text.clear_mods,"ax",@progbits
 263               	.global	clear_mods
 265               	clear_mods:
 266               	.LFB24:
 179:tmk_core/common/action_util.c **** /** \brief clear mods
 180:tmk_core/common/action_util.c ****  *
 181:tmk_core/common/action_util.c ****  * FIXME: needs doc
 182:tmk_core/common/action_util.c ****  */
 183:tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 267               		.loc 2 183 0
 268               		.cfi_startproc
 269               	/* prologue: function */
 270               	/* frame size = 0 */
 271               	/* stack size = 0 */
 272               	.L__stack_usage = 0
 273               		.loc 2 183 0
 274 0000 1092 0000 		sts real_mods,__zero_reg__
 275               	/* epilogue start */
 276 0004 0895      		ret
 277               		.cfi_endproc
 278               	.LFE24:
 280               		.section	.text.get_weak_mods,"ax",@progbits
 281               	.global	get_weak_mods
 283               	get_weak_mods:
 284               	.LFB25:
 184:tmk_core/common/action_util.c **** 
 185:tmk_core/common/action_util.c **** /** \brief get weak mods
 186:tmk_core/common/action_util.c ****  *
 187:tmk_core/common/action_util.c ****  * FIXME: needs doc
 188:tmk_core/common/action_util.c ****  */
 189:tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 285               		.loc 2 189 0
 286               		.cfi_startproc
 287               	/* prologue: function */
 288               	/* frame size = 0 */
 289               	/* stack size = 0 */
 290               	.L__stack_usage = 0
 291               		.loc 2 189 0
 292 0000 8091 0000 		lds r24,weak_mods
 293               	/* epilogue start */
 294 0004 0895      		ret
 295               		.cfi_endproc
 296               	.LFE25:
 298               		.section	.text.add_weak_mods,"ax",@progbits
 299               	.global	add_weak_mods
 301               	add_weak_mods:
 302               	.LFB26:
 190:tmk_core/common/action_util.c **** /** \brief add weak mods
 191:tmk_core/common/action_util.c ****  *
 192:tmk_core/common/action_util.c ****  * FIXME: needs doc
 193:tmk_core/common/action_util.c ****  */
 194:tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 303               		.loc 2 194 0
 304               		.cfi_startproc
 305               	.LVL12:
 306               	/* prologue: function */
 307               	/* frame size = 0 */
 308               	/* stack size = 0 */
 309               	.L__stack_usage = 0
 310               		.loc 2 194 0
 311 0000 9091 0000 		lds r25,weak_mods
 312 0004 892B      		or r24,r25
 313               	.LVL13:
 314 0006 8093 0000 		sts weak_mods,r24
 315               	/* epilogue start */
 316 000a 0895      		ret
 317               		.cfi_endproc
 318               	.LFE26:
 320               		.section	.text.del_weak_mods,"ax",@progbits
 321               	.global	del_weak_mods
 323               	del_weak_mods:
 324               	.LFB27:
 195:tmk_core/common/action_util.c **** /** \brief del weak mods
 196:tmk_core/common/action_util.c ****  *
 197:tmk_core/common/action_util.c ****  * FIXME: needs doc
 198:tmk_core/common/action_util.c ****  */
 199:tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 325               		.loc 2 199 0
 326               		.cfi_startproc
 327               	.LVL14:
 328               	/* prologue: function */
 329               	/* frame size = 0 */
 330               	/* stack size = 0 */
 331               	.L__stack_usage = 0
 332               		.loc 2 199 0
 333 0000 982F      		mov r25,r24
 334 0002 9095      		com r25
 335 0004 8091 0000 		lds r24,weak_mods
 336               	.LVL15:
 337 0008 8923      		and r24,r25
 338 000a 8093 0000 		sts weak_mods,r24
 339               	/* epilogue start */
 340 000e 0895      		ret
 341               		.cfi_endproc
 342               	.LFE27:
 344               		.section	.text.set_weak_mods,"ax",@progbits
 345               	.global	set_weak_mods
 347               	set_weak_mods:
 348               	.LFB28:
 200:tmk_core/common/action_util.c **** /** \brief set weak mods
 201:tmk_core/common/action_util.c ****  *
 202:tmk_core/common/action_util.c ****  * FIXME: needs doc
 203:tmk_core/common/action_util.c ****  */
 204:tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 349               		.loc 2 204 0
 350               		.cfi_startproc
 351               	.LVL16:
 352               	/* prologue: function */
 353               	/* frame size = 0 */
 354               	/* stack size = 0 */
 355               	.L__stack_usage = 0
 356               		.loc 2 204 0
 357 0000 8093 0000 		sts weak_mods,r24
 358               	/* epilogue start */
 359 0004 0895      		ret
 360               		.cfi_endproc
 361               	.LFE28:
 363               		.section	.text.clear_weak_mods,"ax",@progbits
 364               	.global	clear_weak_mods
 366               	clear_weak_mods:
 367               	.LFB29:
 205:tmk_core/common/action_util.c **** /** \brief clear weak mods
 206:tmk_core/common/action_util.c ****  *
 207:tmk_core/common/action_util.c ****  * FIXME: needs doc
 208:tmk_core/common/action_util.c ****  */
 209:tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 368               		.loc 2 209 0
 369               		.cfi_startproc
 370               	/* prologue: function */
 371               	/* frame size = 0 */
 372               	/* stack size = 0 */
 373               	.L__stack_usage = 0
 374               		.loc 2 209 0
 375 0000 1092 0000 		sts weak_mods,__zero_reg__
 376               	/* epilogue start */
 377 0004 0895      		ret
 378               		.cfi_endproc
 379               	.LFE29:
 381               		.section	.text.get_macro_mods,"ax",@progbits
 382               	.global	get_macro_mods
 384               	get_macro_mods:
 385               	.LFB30:
 210:tmk_core/common/action_util.c **** 
 211:tmk_core/common/action_util.c **** /* macro modifier */
 212:tmk_core/common/action_util.c **** /** \brief get macro mods
 213:tmk_core/common/action_util.c ****  *
 214:tmk_core/common/action_util.c ****  * FIXME: needs doc
 215:tmk_core/common/action_util.c ****  */
 216:tmk_core/common/action_util.c **** uint8_t get_macro_mods(void) { return macro_mods; }
 386               		.loc 2 216 0
 387               		.cfi_startproc
 388               	/* prologue: function */
 389               	/* frame size = 0 */
 390               	/* stack size = 0 */
 391               	.L__stack_usage = 0
 392               		.loc 2 216 0
 393 0000 8091 0000 		lds r24,macro_mods
 394               	/* epilogue start */
 395 0004 0895      		ret
 396               		.cfi_endproc
 397               	.LFE30:
 399               		.section	.text.add_macro_mods,"ax",@progbits
 400               	.global	add_macro_mods
 402               	add_macro_mods:
 403               	.LFB31:
 217:tmk_core/common/action_util.c **** /** \brief add macro mods
 218:tmk_core/common/action_util.c ****  *
 219:tmk_core/common/action_util.c ****  * FIXME: needs doc
 220:tmk_core/common/action_util.c ****  */
 221:tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 404               		.loc 2 221 0
 405               		.cfi_startproc
 406               	.LVL17:
 407               	/* prologue: function */
 408               	/* frame size = 0 */
 409               	/* stack size = 0 */
 410               	.L__stack_usage = 0
 411               		.loc 2 221 0
 412 0000 9091 0000 		lds r25,macro_mods
 413 0004 892B      		or r24,r25
 414               	.LVL18:
 415 0006 8093 0000 		sts macro_mods,r24
 416               	/* epilogue start */
 417 000a 0895      		ret
 418               		.cfi_endproc
 419               	.LFE31:
 421               		.section	.text.del_macro_mods,"ax",@progbits
 422               	.global	del_macro_mods
 424               	del_macro_mods:
 425               	.LFB32:
 222:tmk_core/common/action_util.c **** /** \brief del macro mods
 223:tmk_core/common/action_util.c ****  *
 224:tmk_core/common/action_util.c ****  * FIXME: needs doc
 225:tmk_core/common/action_util.c ****  */
 226:tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 426               		.loc 2 226 0
 427               		.cfi_startproc
 428               	.LVL19:
 429               	/* prologue: function */
 430               	/* frame size = 0 */
 431               	/* stack size = 0 */
 432               	.L__stack_usage = 0
 433               		.loc 2 226 0
 434 0000 982F      		mov r25,r24
 435 0002 9095      		com r25
 436 0004 8091 0000 		lds r24,macro_mods
 437               	.LVL20:
 438 0008 8923      		and r24,r25
 439 000a 8093 0000 		sts macro_mods,r24
 440               	/* epilogue start */
 441 000e 0895      		ret
 442               		.cfi_endproc
 443               	.LFE32:
 445               		.section	.text.set_macro_mods,"ax",@progbits
 446               	.global	set_macro_mods
 448               	set_macro_mods:
 449               	.LFB33:
 227:tmk_core/common/action_util.c **** /** \brief set macro mods
 228:tmk_core/common/action_util.c ****  *
 229:tmk_core/common/action_util.c ****  * FIXME: needs doc
 230:tmk_core/common/action_util.c ****  */
 231:tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 450               		.loc 2 231 0
 451               		.cfi_startproc
 452               	.LVL21:
 453               	/* prologue: function */
 454               	/* frame size = 0 */
 455               	/* stack size = 0 */
 456               	.L__stack_usage = 0
 457               		.loc 2 231 0
 458 0000 8093 0000 		sts macro_mods,r24
 459               	/* epilogue start */
 460 0004 0895      		ret
 461               		.cfi_endproc
 462               	.LFE33:
 464               		.section	.text.clear_macro_mods,"ax",@progbits
 465               	.global	clear_macro_mods
 467               	clear_macro_mods:
 468               	.LFB34:
 232:tmk_core/common/action_util.c **** /** \brief clear macro mods
 233:tmk_core/common/action_util.c ****  *
 234:tmk_core/common/action_util.c ****  * FIXME: needs doc
 235:tmk_core/common/action_util.c ****  */
 236:tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 469               		.loc 2 236 0
 470               		.cfi_startproc
 471               	/* prologue: function */
 472               	/* frame size = 0 */
 473               	/* stack size = 0 */
 474               	.L__stack_usage = 0
 475               		.loc 2 236 0
 476 0000 1092 0000 		sts macro_mods,__zero_reg__
 477               	/* epilogue start */
 478 0004 0895      		ret
 479               		.cfi_endproc
 480               	.LFE34:
 482               		.section	.text.get_oneshot_mods,"ax",@progbits
 483               	.global	get_oneshot_mods
 485               	get_oneshot_mods:
 486               	.LFB37:
 237:tmk_core/common/action_util.c **** 
 238:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 239:tmk_core/common/action_util.c **** /** \brief set oneshot mods
 240:tmk_core/common/action_util.c ****  *
 241:tmk_core/common/action_util.c ****  * FIXME: needs doc
 242:tmk_core/common/action_util.c ****  */
 243:tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods) {
 244:tmk_core/common/action_util.c ****     if (oneshot_mods != mods) {
 245:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 246:tmk_core/common/action_util.c ****         oneshot_time = timer_read();
 247:tmk_core/common/action_util.c **** #    endif
 248:tmk_core/common/action_util.c ****         oneshot_mods = mods;
 249:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(mods);
 250:tmk_core/common/action_util.c ****     }
 251:tmk_core/common/action_util.c **** }
 252:tmk_core/common/action_util.c **** /** \brief clear oneshot mods
 253:tmk_core/common/action_util.c ****  *
 254:tmk_core/common/action_util.c ****  * FIXME: needs doc
 255:tmk_core/common/action_util.c ****  */
 256:tmk_core/common/action_util.c **** void clear_oneshot_mods(void) {
 257:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 258:tmk_core/common/action_util.c ****         oneshot_mods = 0;
 259:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 260:tmk_core/common/action_util.c ****         oneshot_time = 0;
 261:tmk_core/common/action_util.c **** #    endif
 262:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(oneshot_mods);
 263:tmk_core/common/action_util.c ****     }
 264:tmk_core/common/action_util.c **** }
 265:tmk_core/common/action_util.c **** /** \brief get oneshot mods
 266:tmk_core/common/action_util.c ****  *
 267:tmk_core/common/action_util.c ****  * FIXME: needs doc
 268:tmk_core/common/action_util.c ****  */
 269:tmk_core/common/action_util.c **** uint8_t get_oneshot_mods(void) { return oneshot_mods; }
 487               		.loc 2 269 0
 488               		.cfi_startproc
 489               	/* prologue: function */
 490               	/* frame size = 0 */
 491               	/* stack size = 0 */
 492               	.L__stack_usage = 0
 493               		.loc 2 269 0
 494 0000 8091 0000 		lds r24,oneshot_mods
 495               	/* epilogue start */
 496 0004 0895      		ret
 497               		.cfi_endproc
 498               	.LFE37:
 500               		.section	.text.oneshot_locked_mods_changed_user,"ax",@progbits
 501               		.weak	oneshot_locked_mods_changed_user
 503               	oneshot_locked_mods_changed_user:
 504               	.LFB38:
 270:tmk_core/common/action_util.c **** #endif
 271:tmk_core/common/action_util.c **** 
 272:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 273:tmk_core/common/action_util.c ****  *
 274:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 275:tmk_core/common/action_util.c ****  */
 276:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_locked_mods_changed_user(uint8_t mods) {}
 505               		.loc 2 276 0
 506               		.cfi_startproc
 507               	.LVL22:
 508               	/* prologue: function */
 509               	/* frame size = 0 */
 510               	/* stack size = 0 */
 511               	.L__stack_usage = 0
 512               	/* epilogue start */
 513               		.loc 2 276 0
 514 0000 0895      		ret
 515               		.cfi_endproc
 516               	.LFE38:
 518               		.set	oneshot_locked_mods_changed_user.localalias.0,oneshot_locked_mods_changed_user
 519               		.section	.text.oneshot_locked_mods_changed_kb,"ax",@progbits
 520               		.weak	oneshot_locked_mods_changed_kb
 522               	oneshot_locked_mods_changed_kb:
 523               	.LFB39:
 277:tmk_core/common/action_util.c **** 
 278:tmk_core/common/action_util.c **** /** \brief Called when the locked one shot modifiers have been changed.
 279:tmk_core/common/action_util.c ****  *
 280:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 281:tmk_core/common/action_util.c ****  */
 282:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_locked_mods_changed_kb(uint8_t mods) { oneshot_locked_mods_chang
 524               		.loc 2 282 0
 525               		.cfi_startproc
 526               	.LVL23:
 527               	/* prologue: function */
 528               	/* frame size = 0 */
 529               	/* stack size = 0 */
 530               	.L__stack_usage = 0
 531               		.loc 2 282 0
 532 0000 0C94 0000 		jmp oneshot_locked_mods_changed_user
 533               	.LVL24:
 534               		.cfi_endproc
 535               	.LFE39:
 537               		.section	.text.set_oneshot_locked_mods,"ax",@progbits
 538               	.global	set_oneshot_locked_mods
 540               	set_oneshot_locked_mods:
 541               	.LFB10:
  53:tmk_core/common/action_util.c ****     if (mods != oneshot_locked_mods) {
 542               		.loc 2 53 0
 543               		.cfi_startproc
 544               	.LVL25:
 545               	/* prologue: function */
 546               	/* frame size = 0 */
 547               	/* stack size = 0 */
 548               	.L__stack_usage = 0
  54:tmk_core/common/action_util.c ****         oneshot_locked_mods = mods;
 549               		.loc 2 54 0
 550 0000 9091 0000 		lds r25,oneshot_locked_mods
 551 0004 9817      		cp r25,r24
 552 0006 01F0      		breq .L28
  55:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
 553               		.loc 2 55 0
 554 0008 8093 0000 		sts oneshot_locked_mods,r24
  56:tmk_core/common/action_util.c ****     }
 555               		.loc 2 56 0
 556 000c 0C94 0000 		jmp oneshot_locked_mods_changed_kb
 557               	.LVL26:
 558               	.L28:
 559               	/* epilogue start */
  58:tmk_core/common/action_util.c **** void clear_oneshot_locked_mods(void) {
 560               		.loc 2 58 0
 561 0010 0895      		ret
 562               		.cfi_endproc
 563               	.LFE10:
 565               		.section	.text.clear_oneshot_locked_mods,"ax",@progbits
 566               	.global	clear_oneshot_locked_mods
 568               	clear_oneshot_locked_mods:
 569               	.LFB11:
  59:tmk_core/common/action_util.c ****     if (oneshot_locked_mods) {
 570               		.loc 2 59 0
 571               		.cfi_startproc
 572               	/* prologue: function */
 573               	/* frame size = 0 */
 574               	/* stack size = 0 */
 575               	.L__stack_usage = 0
  60:tmk_core/common/action_util.c ****         oneshot_locked_mods = 0;
 576               		.loc 2 60 0
 577 0000 8091 0000 		lds r24,oneshot_locked_mods
 578 0004 8823      		tst r24
 579 0006 01F0      		breq .L30
  61:tmk_core/common/action_util.c ****         oneshot_locked_mods_changed_kb(oneshot_locked_mods);
 580               		.loc 2 61 0
 581 0008 1092 0000 		sts oneshot_locked_mods,__zero_reg__
  62:tmk_core/common/action_util.c ****     }
 582               		.loc 2 62 0
 583 000c 80E0      		ldi r24,0
 584 000e 0C94 0000 		jmp oneshot_locked_mods_changed_kb
 585               	.LVL27:
 586               	.L30:
 587               	/* epilogue start */
  64:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 588               		.loc 2 64 0
 589 0012 0895      		ret
 590               		.cfi_endproc
 591               	.LFE11:
 593               		.section	.text.oneshot_mods_changed_user,"ax",@progbits
 594               		.weak	oneshot_mods_changed_user
 596               	oneshot_mods_changed_user:
 597               	.LFB46:
 598               		.cfi_startproc
 599               	/* prologue: function */
 600               	/* frame size = 0 */
 601               	/* stack size = 0 */
 602               	.L__stack_usage = 0
 603               	/* epilogue start */
 604 0000 0895      		ret
 605               		.cfi_endproc
 606               	.LFE46:
 608               		.section	.text.oneshot_mods_changed_kb,"ax",@progbits
 609               		.weak	oneshot_mods_changed_kb
 611               	oneshot_mods_changed_kb:
 612               	.LFB41:
 283:tmk_core/common/action_util.c **** 
 284:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 285:tmk_core/common/action_util.c ****  *
 286:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 287:tmk_core/common/action_util.c ****  */
 288:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_mods_changed_user(uint8_t mods) {}
 289:tmk_core/common/action_util.c **** 
 290:tmk_core/common/action_util.c **** /** \brief Called when the one shot modifiers have been changed.
 291:tmk_core/common/action_util.c ****  *
 292:tmk_core/common/action_util.c ****  * \param mods Contains the active modifiers active after the change.
 293:tmk_core/common/action_util.c ****  */
 294:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_mods_changed_kb(uint8_t mods) { oneshot_mods_changed_user(mods);
 613               		.loc 2 294 0
 614               		.cfi_startproc
 615               	.LVL28:
 616               	/* prologue: function */
 617               	/* frame size = 0 */
 618               	/* stack size = 0 */
 619               	.L__stack_usage = 0
 620               		.loc 2 294 0
 621 0000 0C94 0000 		jmp oneshot_mods_changed_user
 622               	.LVL29:
 623               		.cfi_endproc
 624               	.LFE41:
 626               		.section	.text.set_oneshot_mods,"ax",@progbits
 627               	.global	set_oneshot_mods
 629               	set_oneshot_mods:
 630               	.LFB35:
 243:tmk_core/common/action_util.c ****     if (oneshot_mods != mods) {
 631               		.loc 2 243 0
 632               		.cfi_startproc
 633               	.LVL30:
 634               	/* prologue: function */
 635               	/* frame size = 0 */
 636               	/* stack size = 0 */
 637               	.L__stack_usage = 0
 244:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 638               		.loc 2 244 0
 639 0000 9091 0000 		lds r25,oneshot_mods
 640 0004 9817      		cp r25,r24
 641 0006 01F0      		breq .L34
 248:tmk_core/common/action_util.c ****         oneshot_mods_changed_kb(mods);
 642               		.loc 2 248 0
 643 0008 8093 0000 		sts oneshot_mods,r24
 249:tmk_core/common/action_util.c ****     }
 644               		.loc 2 249 0
 645 000c 0C94 0000 		jmp oneshot_mods_changed_kb
 646               	.LVL31:
 647               	.L34:
 648               	/* epilogue start */
 251:tmk_core/common/action_util.c **** /** \brief clear oneshot mods
 649               		.loc 2 251 0
 650 0010 0895      		ret
 651               		.cfi_endproc
 652               	.LFE35:
 654               		.section	.text.clear_oneshot_mods,"ax",@progbits
 655               	.global	clear_oneshot_mods
 657               	clear_oneshot_mods:
 658               	.LFB36:
 256:tmk_core/common/action_util.c ****     if (oneshot_mods) {
 659               		.loc 2 256 0
 660               		.cfi_startproc
 661               	/* prologue: function */
 662               	/* frame size = 0 */
 663               	/* stack size = 0 */
 664               	.L__stack_usage = 0
 257:tmk_core/common/action_util.c ****         oneshot_mods = 0;
 665               		.loc 2 257 0
 666 0000 8091 0000 		lds r24,oneshot_mods
 667 0004 8823      		tst r24
 668 0006 01F0      		breq .L36
 258:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 669               		.loc 2 258 0
 670 0008 1092 0000 		sts oneshot_mods,__zero_reg__
 262:tmk_core/common/action_util.c ****     }
 671               		.loc 2 262 0
 672 000c 80E0      		ldi r24,0
 673 000e 0C94 0000 		jmp oneshot_mods_changed_kb
 674               	.LVL32:
 675               	.L36:
 676               	/* epilogue start */
 264:tmk_core/common/action_util.c **** /** \brief get oneshot mods
 677               		.loc 2 264 0
 678 0012 0895      		ret
 679               		.cfi_endproc
 680               	.LFE36:
 682               		.section	.text.send_keyboard_report,"ax",@progbits
 683               	.global	send_keyboard_report
 685               	send_keyboard_report:
 686               	.LFB19:
 137:tmk_core/common/action_util.c ****     keyboard_report->mods = real_mods;
 687               		.loc 2 137 0
 688               		.cfi_startproc
 689               	/* prologue: function */
 690               	/* frame size = 0 */
 691               	/* stack size = 0 */
 692               	.L__stack_usage = 0
 138:tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 693               		.loc 2 138 0
 694 0000 E091 0000 		lds r30,keyboard_report
 695 0004 F091 0000 		lds r31,keyboard_report+1
 696 0008 8091 0000 		lds r24,real_mods
 697 000c 8083      		st Z,r24
 139:tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 698               		.loc 2 139 0
 699 000e E091 0000 		lds r30,keyboard_report
 700 0012 F091 0000 		lds r31,keyboard_report+1
 701 0016 8081      		ld r24,Z
 702 0018 9091 0000 		lds r25,weak_mods
 703 001c 892B      		or r24,r25
 704 001e 8083      		st Z,r24
 140:tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 705               		.loc 2 140 0
 706 0020 E091 0000 		lds r30,keyboard_report
 707 0024 F091 0000 		lds r31,keyboard_report+1
 708 0028 8081      		ld r24,Z
 709 002a 9091 0000 		lds r25,macro_mods
 710 002e 892B      		or r24,r25
 711 0030 8083      		st Z,r24
 142:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 712               		.loc 2 142 0
 713 0032 9091 0000 		lds r25,oneshot_mods
 714 0036 9923      		tst r25
 715 0038 01F0      		breq .L40
 149:tmk_core/common/action_util.c ****         if (has_anykey(keyboard_report)) {
 716               		.loc 2 149 0
 717 003a E091 0000 		lds r30,keyboard_report
 718 003e F091 0000 		lds r31,keyboard_report+1
 719 0042 8081      		ld r24,Z
 720 0044 892B      		or r24,r25
 721 0046 8083      		st Z,r24
 150:tmk_core/common/action_util.c ****             clear_oneshot_mods();
 722               		.loc 2 150 0
 723 0048 8091 0000 		lds r24,keyboard_report
 724 004c 9091 0000 		lds r25,keyboard_report+1
 725 0050 0E94 0000 		call has_anykey
 726               	.LVL33:
 727 0054 8111      		cpse r24,__zero_reg__
 151:tmk_core/common/action_util.c ****         }
 728               		.loc 2 151 0
 729 0056 0E94 0000 		call clear_oneshot_mods
 730               	.LVL34:
 731               	.L40:
 156:tmk_core/common/action_util.c **** }
 732               		.loc 2 156 0
 733 005a 8091 0000 		lds r24,keyboard_report
 734 005e 9091 0000 		lds r25,keyboard_report+1
 735 0062 0C94 0000 		jmp host_keyboard_send
 736               	.LVL35:
 737               		.cfi_endproc
 738               	.LFE19:
 740               		.section	.text.oneshot_layer_changed_user,"ax",@progbits
 741               		.weak	oneshot_layer_changed_user
 743               	oneshot_layer_changed_user:
 744               	.LFB48:
 745               		.cfi_startproc
 746               	/* prologue: function */
 747               	/* frame size = 0 */
 748               	/* stack size = 0 */
 749               	.L__stack_usage = 0
 750               	/* epilogue start */
 751 0000 0895      		ret
 752               		.cfi_endproc
 753               	.LFE48:
 755               		.section	.text.oneshot_layer_changed_kb,"ax",@progbits
 756               		.weak	oneshot_layer_changed_kb
 758               	oneshot_layer_changed_kb:
 759               	.LFB43:
 295:tmk_core/common/action_util.c **** 
 296:tmk_core/common/action_util.c **** /** \brief Called when the one shot layers have been changed.
 297:tmk_core/common/action_util.c ****  *
 298:tmk_core/common/action_util.c ****  * \param layer Contains the layer that is toggled on, or zero when toggled off.
 299:tmk_core/common/action_util.c ****  */
 300:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_layer_changed_user(uint8_t layer) {}
 301:tmk_core/common/action_util.c **** 
 302:tmk_core/common/action_util.c **** /** \brief Called when the one shot layers have been changed.
 303:tmk_core/common/action_util.c ****  *
 304:tmk_core/common/action_util.c ****  * \param layer Contains the layer that is toggled on, or zero when toggled off.
 305:tmk_core/common/action_util.c ****  */
 306:tmk_core/common/action_util.c **** __attribute__((weak)) void oneshot_layer_changed_kb(uint8_t layer) { oneshot_layer_changed_user(lay
 760               		.loc 2 306 0
 761               		.cfi_startproc
 762               	.LVL36:
 763               	/* prologue: function */
 764               	/* frame size = 0 */
 765               	/* stack size = 0 */
 766               	.L__stack_usage = 0
 767               		.loc 2 306 0
 768 0000 0C94 0000 		jmp oneshot_layer_changed_user
 769               	.LVL37:
 770               		.cfi_endproc
 771               	.LFE43:
 773               		.section	.text.set_oneshot_layer,"ax",@progbits
 774               	.global	set_oneshot_layer
 776               	set_oneshot_layer:
 777               	.LFB15:
  95:tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
 778               		.loc 2 95 0
 779               		.cfi_startproc
 780               	.LVL38:
 781               	/* prologue: function */
 782               	/* frame size = 0 */
 783               	/* stack size = 0 */
 784               	.L__stack_usage = 0
  96:tmk_core/common/action_util.c ****     layer_on(layer);
 785               		.loc 2 96 0
 786 0000 98E0      		ldi r25,lo8(8)
 787 0002 899F      		mul r24,r25
 788 0004 9001      		movw r18,r0
 789 0006 1124      		clr __zero_reg__
 790 0008 622B      		or r22,r18
 791               	.LVL39:
 792 000a 6093 0000 		sts oneshot_layer_data,r22
  97:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 793               		.loc 2 97 0
 794 000e 0E94 0000 		call layer_on
 795               	.LVL40:
 796               	.LBB14:
 797               	.LBB15:
  83:tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
 798               		.loc 2 83 0
 799 0012 8091 0000 		lds r24,oneshot_layer_data
 800               	.LBE15:
 801               	.LBE14:
 101:tmk_core/common/action_util.c **** }
 802               		.loc 2 101 0
 803 0016 8595      		asr r24
 804 0018 8595      		asr r24
 805 001a 8595      		asr r24
 806 001c 0C94 0000 		jmp oneshot_layer_changed_kb
 807               	.LVL41:
 808               		.cfi_endproc
 809               	.LFE15:
 811               		.section	.text.reset_oneshot_layer,"ax",@progbits
 812               	.global	reset_oneshot_layer
 814               	reset_oneshot_layer:
 815               	.LFB16:
 107:tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 816               		.loc 2 107 0
 817               		.cfi_startproc
 818               	/* prologue: function */
 819               	/* frame size = 0 */
 820               	/* stack size = 0 */
 821               	.L__stack_usage = 0
 108:tmk_core/common/action_util.c **** #    if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 822               		.loc 2 108 0
 823 0000 1092 0000 		sts oneshot_layer_data,__zero_reg__
 112:tmk_core/common/action_util.c **** }
 824               		.loc 2 112 0
 825 0004 80E0      		ldi r24,0
 826 0006 0C94 0000 		jmp oneshot_layer_changed_kb
 827               	.LVL42:
 828               		.cfi_endproc
 829               	.LFE16:
 831               		.section	.text.clear_oneshot_layer_state,"ax",@progbits
 832               	.global	clear_oneshot_layer_state
 834               	clear_oneshot_layer_state:
 835               	.LFB17:
 118:tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 836               		.loc 2 118 0
 837               		.cfi_startproc
 838               	.LVL43:
 839               	/* prologue: function */
 840               	/* frame size = 0 */
 841               	/* stack size = 0 */
 842               	.L__stack_usage = 0
 119:tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 843               		.loc 2 119 0
 844 0000 9091 0000 		lds r25,oneshot_layer_data
 845               	.LVL44:
 120:tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 846               		.loc 2 120 0
 847 0004 8095      		com r24
 848               	.LVL45:
 849 0006 8923      		and r24,r25
 850               	.LVL46:
 851 0008 8093 0000 		sts oneshot_layer_data,r24
 852               	.LBB16:
 853               	.LBB17:
  84:tmk_core/common/action_util.c **** 
 854               		.loc 2 84 0
 855 000c 282F      		mov r18,r24
 856 000e 2770      		andi r18,lo8(7)
 857               	.LBE17:
 858               	.LBE16:
 121:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 859               		.loc 2 121 0
 860 0010 01F4      		brne .L49
 121:tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 861               		.loc 2 121 0 is_stmt 0 discriminator 1
 862 0012 282F      		mov r18,r24
 863 0014 082E      		mov __tmp_reg__,r24
 864 0016 000C      		lsl r0
 865 0018 330B      		sbc r19,r19
 866 001a 9217      		cp r25,r18
 867 001c 1306      		cpc __zero_reg__,r19
 868 001e 01F0      		breq .L49
 122:tmk_core/common/action_util.c ****         reset_oneshot_layer();
 869               		.loc 2 122 0 is_stmt 1
 870 0020 8595      		asr r24
 871 0022 8595      		asr r24
 872 0024 8595      		asr r24
 873 0026 0E94 0000 		call layer_off
 874               	.LVL47:
 123:tmk_core/common/action_util.c ****     }
 875               		.loc 2 123 0
 876 002a 0C94 0000 		jmp reset_oneshot_layer
 877               	.LVL48:
 878               	.L49:
 879               	/* epilogue start */
 125:tmk_core/common/action_util.c **** /** \brief Is oneshot layer active
 880               		.loc 2 125 0
 881 002e 0895      		ret
 882               		.cfi_endproc
 883               	.LFE17:
 885               		.section	.text.has_anymod,"ax",@progbits
 886               	.global	has_anymod
 888               	has_anymod:
 889               	.LFB44:
 307:tmk_core/common/action_util.c **** 
 308:tmk_core/common/action_util.c **** /** \brief inspect keyboard state
 309:tmk_core/common/action_util.c ****  *
 310:tmk_core/common/action_util.c ****  * FIXME: needs doc
 311:tmk_core/common/action_util.c ****  */
 312:tmk_core/common/action_util.c **** uint8_t has_anymod(void) { return bitpop(real_mods); }
 890               		.loc 2 312 0
 891               		.cfi_startproc
 892               	/* prologue: function */
 893               	/* frame size = 0 */
 894               	/* stack size = 0 */
 895               	.L__stack_usage = 0
 896               		.loc 2 312 0
 897 0000 8091 0000 		lds r24,real_mods
 898 0004 0C94 0000 		jmp bitpop
 899               	.LVL49:
 900               		.cfi_endproc
 901               	.LFE44:
 903               		.section	.bss.oneshot_layer_data,"aw",@nobits
 906               	oneshot_layer_data:
 907 0000 00        		.zero	1
 908               		.section	.bss.oneshot_locked_mods,"aw",@nobits
 911               	oneshot_locked_mods:
 912 0000 00        		.zero	1
 913               		.section	.bss.oneshot_mods,"aw",@nobits
 916               	oneshot_mods:
 917 0000 00        		.zero	1
 918               	.global	keyboard_report
 919               		.section	.data.keyboard_report,"aw",@progbits
 922               	keyboard_report:
 923 0000 0000      		.word	__compound_literal.0
 924               		.section	.bss.__compound_literal.0,"aw",@nobits
 927               	__compound_literal.0:
 928 0000 0000 0000 		.zero	8
 928      0000 0000 
 929               		.section	.bss.macro_mods,"aw",@nobits
 932               	macro_mods:
 933 0000 00        		.zero	1
 934               		.section	.bss.weak_mods,"aw",@nobits
 937               	weak_mods:
 938 0000 00        		.zero	1
 939               		.section	.bss.real_mods,"aw",@nobits
 942               	real_mods:
 943 0000 00        		.zero	1
 944               		.text
 945               	.Letext0:
 946               		.file 3 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/stdint.h"
 947               		.file 4 "tmk_core/common/report.h"
 948               		.file 5 "tmk_core/common/host.h"
 949               		.file 6 "tmk_core/common/debug.h"
 950               		.file 7 "tmk_core/common/action.h"
 951               		.file 8 "tmk_core/common/action_layer.h"
 952               		.file 9 "tmk_core/common/timer.h"
 953               		.file 10 "quantum/keycode_config.h"
 954               		.file 11 "tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_util.c
/var/tmp//ccJckrFx.s:2      *ABS*:000000000000003e __SP_H__
/var/tmp//ccJckrFx.s:3      *ABS*:000000000000003d __SP_L__
/var/tmp//ccJckrFx.s:4      *ABS*:000000000000003f __SREG__
/var/tmp//ccJckrFx.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/tmp//ccJckrFx.s:6      *ABS*:0000000000000001 __zero_reg__
/var/tmp//ccJckrFx.s:13     .text.add_key:0000000000000000 add_key
/var/tmp//ccJckrFx.s:922    .data.keyboard_report:0000000000000000 keyboard_report
/var/tmp//ccJckrFx.s:36     .text.del_key:0000000000000000 del_key
/var/tmp//ccJckrFx.s:58     .text.clear_keys:0000000000000000 clear_keys
/var/tmp//ccJckrFx.s:77     .text.get_oneshot_locked_mods:0000000000000000 get_oneshot_locked_mods
/var/tmp//ccJckrFx.s:911    .bss.oneshot_locked_mods:0000000000000000 oneshot_locked_mods
/var/tmp//ccJckrFx.s:96     .text.has_oneshot_mods_timed_out:0000000000000000 has_oneshot_mods_timed_out
/var/tmp//ccJckrFx.s:114    .text.get_oneshot_layer:0000000000000000 get_oneshot_layer
/var/tmp//ccJckrFx.s:906    .bss.oneshot_layer_data:0000000000000000 oneshot_layer_data
/var/tmp//ccJckrFx.s:135    .text.get_oneshot_layer_state:0000000000000000 get_oneshot_layer_state
/var/tmp//ccJckrFx.s:154    .text.is_oneshot_layer_active:0000000000000000 is_oneshot_layer_active
/var/tmp//ccJckrFx.s:182    .text.get_mods:0000000000000000 get_mods
/var/tmp//ccJckrFx.s:942    .bss.real_mods:0000000000000000 real_mods
/var/tmp//ccJckrFx.s:200    .text.add_mods:0000000000000000 add_mods
/var/tmp//ccJckrFx.s:222    .text.del_mods:0000000000000000 del_mods
/var/tmp//ccJckrFx.s:246    .text.set_mods:0000000000000000 set_mods
/var/tmp//ccJckrFx.s:265    .text.clear_mods:0000000000000000 clear_mods
/var/tmp//ccJckrFx.s:283    .text.get_weak_mods:0000000000000000 get_weak_mods
/var/tmp//ccJckrFx.s:937    .bss.weak_mods:0000000000000000 weak_mods
/var/tmp//ccJckrFx.s:301    .text.add_weak_mods:0000000000000000 add_weak_mods
/var/tmp//ccJckrFx.s:323    .text.del_weak_mods:0000000000000000 del_weak_mods
/var/tmp//ccJckrFx.s:347    .text.set_weak_mods:0000000000000000 set_weak_mods
/var/tmp//ccJckrFx.s:366    .text.clear_weak_mods:0000000000000000 clear_weak_mods
/var/tmp//ccJckrFx.s:384    .text.get_macro_mods:0000000000000000 get_macro_mods
/var/tmp//ccJckrFx.s:932    .bss.macro_mods:0000000000000000 macro_mods
/var/tmp//ccJckrFx.s:402    .text.add_macro_mods:0000000000000000 add_macro_mods
/var/tmp//ccJckrFx.s:424    .text.del_macro_mods:0000000000000000 del_macro_mods
/var/tmp//ccJckrFx.s:448    .text.set_macro_mods:0000000000000000 set_macro_mods
/var/tmp//ccJckrFx.s:467    .text.clear_macro_mods:0000000000000000 clear_macro_mods
/var/tmp//ccJckrFx.s:485    .text.get_oneshot_mods:0000000000000000 get_oneshot_mods
/var/tmp//ccJckrFx.s:916    .bss.oneshot_mods:0000000000000000 oneshot_mods
/var/tmp//ccJckrFx.s:503    .text.oneshot_locked_mods_changed_user:0000000000000000 oneshot_locked_mods_changed_user
/var/tmp//ccJckrFx.s:503    .text.oneshot_locked_mods_changed_user:0000000000000000 oneshot_locked_mods_changed_user.localalias.0
/var/tmp//ccJckrFx.s:522    .text.oneshot_locked_mods_changed_kb:0000000000000000 oneshot_locked_mods_changed_kb
/var/tmp//ccJckrFx.s:540    .text.set_oneshot_locked_mods:0000000000000000 set_oneshot_locked_mods
/var/tmp//ccJckrFx.s:568    .text.clear_oneshot_locked_mods:0000000000000000 clear_oneshot_locked_mods
/var/tmp//ccJckrFx.s:596    .text.oneshot_mods_changed_user:0000000000000000 oneshot_mods_changed_user
/var/tmp//ccJckrFx.s:611    .text.oneshot_mods_changed_kb:0000000000000000 oneshot_mods_changed_kb
/var/tmp//ccJckrFx.s:629    .text.set_oneshot_mods:0000000000000000 set_oneshot_mods
/var/tmp//ccJckrFx.s:657    .text.clear_oneshot_mods:0000000000000000 clear_oneshot_mods
/var/tmp//ccJckrFx.s:685    .text.send_keyboard_report:0000000000000000 send_keyboard_report
/var/tmp//ccJckrFx.s:743    .text.oneshot_layer_changed_user:0000000000000000 oneshot_layer_changed_user
/var/tmp//ccJckrFx.s:758    .text.oneshot_layer_changed_kb:0000000000000000 oneshot_layer_changed_kb
/var/tmp//ccJckrFx.s:776    .text.set_oneshot_layer:0000000000000000 set_oneshot_layer
/var/tmp//ccJckrFx.s:814    .text.reset_oneshot_layer:0000000000000000 reset_oneshot_layer
/var/tmp//ccJckrFx.s:834    .text.clear_oneshot_layer_state:0000000000000000 clear_oneshot_layer_state
/var/tmp//ccJckrFx.s:888    .text.has_anymod:0000000000000000 has_anymod
/var/tmp//ccJckrFx.s:927    .bss.__compound_literal.0:0000000000000000 __compound_literal.0

UNDEFINED SYMBOLS
add_key_to_report
del_key_from_report
clear_keys_from_report
has_anykey
host_keyboard_send
layer_on
layer_off
bitpop
__do_copy_data
__do_clear_bss
