   1               		.file	"usb_descriptor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.get_usb_descriptor,"ax",@progbits
  11               	.global	get_usb_descriptor
  13               	get_usb_descriptor:
  14               	.LFB100:
  15               		.file 1 "tmk_core/protocol/usb_descriptor.c"
   1:tmk_core/protocol/usb_descriptor.c **** /*
   2:tmk_core/protocol/usb_descriptor.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/usb_descriptor.c ****  * This file is based on:
   4:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/usb_descriptor.c ****  */
   7:tmk_core/protocol/usb_descriptor.c **** 
   8:tmk_core/protocol/usb_descriptor.c **** /*
   9:tmk_core/protocol/usb_descriptor.c ****                          LUFA Library
  10:tmk_core/protocol/usb_descriptor.c ****          Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/usb_descriptor.c **** 
  12:tmk_core/protocol/usb_descriptor.c ****     dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/usb_descriptor.c ****                      www.lufa-lib.org
  14:tmk_core/protocol/usb_descriptor.c **** */
  15:tmk_core/protocol/usb_descriptor.c **** 
  16:tmk_core/protocol/usb_descriptor.c **** /*
  17:tmk_core/protocol/usb_descriptor.c ****     Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/usb_descriptor.c ****     Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/usb_descriptor.c **** 
  20:tmk_core/protocol/usb_descriptor.c ****     Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/usb_descriptor.c ****     software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/usb_descriptor.c ****     without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/usb_descriptor.c ****     all copies and that both that the copyright notice and this
  24:tmk_core/protocol/usb_descriptor.c ****     permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/usb_descriptor.c ****     documentation, and that the name of the author not be used in
  26:tmk_core/protocol/usb_descriptor.c ****     advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/usb_descriptor.c ****     software without specific, written prior permission.
  28:tmk_core/protocol/usb_descriptor.c **** 
  29:tmk_core/protocol/usb_descriptor.c ****     The author disclaim all warranties with regard to this
  30:tmk_core/protocol/usb_descriptor.c ****     software, including all implied warranties of merchantability
  31:tmk_core/protocol/usb_descriptor.c ****     and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/usb_descriptor.c ****     special, indirect or consequential damages or any damages
  33:tmk_core/protocol/usb_descriptor.c ****     whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/usb_descriptor.c ****     in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/usb_descriptor.c ****     arising out of or in connection with the use or performance of
  36:tmk_core/protocol/usb_descriptor.c ****     this software.
  37:tmk_core/protocol/usb_descriptor.c **** */
  38:tmk_core/protocol/usb_descriptor.c **** 
  39:tmk_core/protocol/usb_descriptor.c **** #include "util.h"
  40:tmk_core/protocol/usb_descriptor.c **** #include "report.h"
  41:tmk_core/protocol/usb_descriptor.c **** #include "usb_descriptor.h"
  42:tmk_core/protocol/usb_descriptor.c **** 
  43:tmk_core/protocol/usb_descriptor.c **** /*
  44:tmk_core/protocol/usb_descriptor.c ****  * HID report descriptors
  45:tmk_core/protocol/usb_descriptor.c ****  */
  46:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  47:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
  48:tmk_core/protocol/usb_descriptor.c **** #    define SHARED_REPORT_STARTED
  49:tmk_core/protocol/usb_descriptor.c **** #else
  50:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] = {
  51:tmk_core/protocol/usb_descriptor.c **** #endif
  52:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),  // Generic Desktop
  53:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),       // Keyboard
  54:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),  // Application
  55:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  56:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_ID(8, REPORT_ID_KEYBOARD),
  57:tmk_core/protocol/usb_descriptor.c **** #endif
  58:tmk_core/protocol/usb_descriptor.c ****     // Modifiers (8 bits)
  59:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x07),     // Keyboard/Keypad
  60:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0xE0),  // Keyboard Left Control
  61:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0xE7),  // Keyboard Right GUI
  62:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
  63:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 0x01),
  64:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x08),
  65:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
  66:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
  67:tmk_core/protocol/usb_descriptor.c ****     // Reserved (1 byte)
  68:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
  69:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
  70:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_CONSTANT),
  71:tmk_core/protocol/usb_descriptor.c ****     // Keycodes (6 bytes)
  72:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x07),  // Keyboard/Keypad
  73:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0x00),
  74:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0xFF),
  75:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
  76:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
  77:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x06),
  78:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
  79:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
  80:tmk_core/protocol/usb_descriptor.c **** 
  81:tmk_core/protocol/usb_descriptor.c ****     // Status LEDs (5 bits)
  82:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x08),     // LED
  83:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0x01),  // Num Lock
  84:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0x05),  // Kana
  85:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x05),
  86:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
  87:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE),
  88:tmk_core/protocol/usb_descriptor.c ****     // LED padding (3 bits)
  89:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
  90:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x03),
  91:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
  92:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
  93:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
  94:tmk_core/protocol/usb_descriptor.c **** };
  95:tmk_core/protocol/usb_descriptor.c **** #endif
  96:tmk_core/protocol/usb_descriptor.c **** 
  97:tmk_core/protocol/usb_descriptor.c **** #ifdef MOUSE_ENABLE
  98:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
  99:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] = {
 100:tmk_core/protocol/usb_descriptor.c **** #    elif !defined(SHARED_REPORT_STARTED)
 101:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 102:tmk_core/protocol/usb_descriptor.c **** #        define SHARED_REPORT_STARTED
 103:tmk_core/protocol/usb_descriptor.c **** #    endif
 104:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),  // Generic Desktop
 105:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x02),       // Mouse
 106:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),  // Application
 107:tmk_core/protocol/usb_descriptor.c **** #    ifdef MOUSE_SHARED_EP
 108:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_ID(8, REPORT_ID_MOUSE),
 109:tmk_core/protocol/usb_descriptor.c **** #    endif
 110:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x01),       // Pointer
 111:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x00),  // Physical
 112:tmk_core/protocol/usb_descriptor.c ****                                  // Buttons (5 bits)
 113:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x09),     // Button
 114:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0x01),  // Button 1
 115:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0x05),  // Button 5
 116:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 117:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 118:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x05),
 119:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
 120:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 121:tmk_core/protocol/usb_descriptor.c ****     // Button padding (3 bits)
 122:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
 123:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x03),
 124:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_CONSTANT),
 125:tmk_core/protocol/usb_descriptor.c **** 
 126:tmk_core/protocol/usb_descriptor.c ****     // X/Y position (2 bytes)
 127:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),  // Generic Desktop
 128:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x30),       // X
 129:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x31),       // Y
 130:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, -127),
 131:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 127),
 132:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x02),
 133:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 134:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 135:tmk_core/protocol/usb_descriptor.c **** 
 136:tmk_core/protocol/usb_descriptor.c ****     // Vertical wheel (1 byte)
 137:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x38),  // Wheel
 138:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, -127),
 139:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 127),
 140:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
 141:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 142:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 143:tmk_core/protocol/usb_descriptor.c ****     // Horizontal wheel (1 byte)
 144:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C),  // Consumer
 145:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(16, 0x0238),    // AC Pan
 146:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, -127),
 147:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 127),
 148:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
 149:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 150:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 151:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 152:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 153:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
 154:tmk_core/protocol/usb_descriptor.c **** };
 155:tmk_core/protocol/usb_descriptor.c **** #    endif
 156:tmk_core/protocol/usb_descriptor.c **** #endif
 157:tmk_core/protocol/usb_descriptor.c **** 
 158:tmk_core/protocol/usb_descriptor.c **** #if defined(SHARED_EP_ENABLE) && !defined(SHARED_REPORT_STARTED)
 159:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 160:tmk_core/protocol/usb_descriptor.c **** #endif
 161:tmk_core/protocol/usb_descriptor.c **** 
 162:tmk_core/protocol/usb_descriptor.c **** #ifdef EXTRAKEY_ENABLE
 163:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),  // Generic Desktop
 164:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x80),       // System Control
 165:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),  // Application
 166:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_ID(8, REPORT_ID_SYSTEM),
 167:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(16, 0x0081),  // System Power Down
 168:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(16, 0x0083),  // System Wake Up
 169:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 170:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x0003),
 171:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 1),
 172:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 16),
 173:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 174:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 175:tmk_core/protocol/usb_descriptor.c **** 
 176:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C),  // Consumer
 177:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x01),       // Consumer Control
 178:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),  // Application
 179:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_ID(8, REPORT_ID_CONSUMER),
 180:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(16, 0x0001),  // Consumer Control
 181:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(16, 0x029C),  // AC Distribute Vertically
 182:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 183:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x029C),
 184:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 1),
 185:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 16),
 186:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 187:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 188:tmk_core/protocol/usb_descriptor.c **** #endif
 189:tmk_core/protocol/usb_descriptor.c **** 
 190:tmk_core/protocol/usb_descriptor.c **** #ifdef NKRO_ENABLE
 191:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),  // Generic Desktop
 192:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),       // Keyboard
 193:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),  // Application
 194:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_ID(8, REPORT_ID_NKRO),
 195:tmk_core/protocol/usb_descriptor.c ****     // Modifiers (8 bits)
 196:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x07),     // Keyboard/Keypad
 197:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0xE0),  // Keyboard Left Control
 198:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0xE7),  // Keyboard Right GUI
 199:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 200:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 201:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x08),
 202:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
 203:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 204:tmk_core/protocol/usb_descriptor.c ****     // Keycodes
 205:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x07),  // Keyboard/Keypad
 206:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0x00),
 207:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, KEYBOARD_REPORT_BITS * 8 - 1),
 208:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 209:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 210:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, KEYBOARD_REPORT_BITS * 8),
 211:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
 212:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 213:tmk_core/protocol/usb_descriptor.c **** 
 214:tmk_core/protocol/usb_descriptor.c ****     // Status LEDs (5 bits)
 215:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x08),     // LED
 216:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0x01),  // Num Lock
 217:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0x05),  // Kana
 218:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x05),
 219:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
 220:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE),
 221:tmk_core/protocol/usb_descriptor.c ****     // LED padding (3 bits)
 222:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
 223:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x03),
 224:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
 225:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 226:tmk_core/protocol/usb_descriptor.c **** #endif
 227:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 228:tmk_core/protocol/usb_descriptor.c **** };
 229:tmk_core/protocol/usb_descriptor.c **** #endif
 230:tmk_core/protocol/usb_descriptor.c **** 
 231:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 232:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM RawReport[] = {
 233:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF60),  // Vendor Defined
 234:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x61),          // Vendor Defined
 235:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),     // Application
 236:tmk_core/protocol/usb_descriptor.c ****                                  // Data to host
 237:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x62),  // Vendor Defined
 238:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 239:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 240:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 241:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 242:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 243:tmk_core/protocol/usb_descriptor.c ****     // Data from host
 244:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x63),  // Vendor Defined
 245:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 246:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 247:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 248:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 249:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE),
 250:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 251:tmk_core/protocol/usb_descriptor.c **** };
 252:tmk_core/protocol/usb_descriptor.c **** #endif
 253:tmk_core/protocol/usb_descriptor.c **** 
 254:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 255:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ConsoleReport[] = {
 256:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF31),  // Vendor Defined (PJRC Teensy compatible)
 257:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x74),          // Vendor Defined (PJRC Teensy compatible)
 258:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),     // Application
 259:tmk_core/protocol/usb_descriptor.c ****                                  // Data to host
 260:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x75),  // Vendor Defined
 261:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 262:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 263:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 264:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 265:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 266:tmk_core/protocol/usb_descriptor.c ****     // Data from host
 267:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x76),  // Vendor Defined
 268:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 269:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 270:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 271:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 272:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE),
 273:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 274:tmk_core/protocol/usb_descriptor.c **** };
 275:tmk_core/protocol/usb_descriptor.c **** #endif
 276:tmk_core/protocol/usb_descriptor.c **** 
 277:tmk_core/protocol/usb_descriptor.c **** /*
 278:tmk_core/protocol/usb_descriptor.c ****  * Device descriptor
 279:tmk_core/protocol/usb_descriptor.c ****  */
 280:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor = {.Header           = {.Size = sizeof(USB_D
 281:tmk_core/protocol/usb_descriptor.c ****                                                           .USBSpecification = VERSION_BCD(1, 1, 0),
 282:tmk_core/protocol/usb_descriptor.c **** #if VIRTSER_ENABLE
 283:tmk_core/protocol/usb_descriptor.c ****                                                           .Class    = USB_CSCP_IADDeviceClass,
 284:tmk_core/protocol/usb_descriptor.c ****                                                           .SubClass = USB_CSCP_IADDeviceSubclass,
 285:tmk_core/protocol/usb_descriptor.c ****                                                           .Protocol = USB_CSCP_IADDeviceProtocol,
 286:tmk_core/protocol/usb_descriptor.c **** #else
 287:tmk_core/protocol/usb_descriptor.c ****                                                               .Class    = USB_CSCP_NoDeviceClass,
 288:tmk_core/protocol/usb_descriptor.c ****                                                               .SubClass = USB_CSCP_NoDeviceSubclass
 289:tmk_core/protocol/usb_descriptor.c ****                                                               .Protocol = USB_CSCP_NoDeviceProtocol
 290:tmk_core/protocol/usb_descriptor.c **** #endif
 291:tmk_core/protocol/usb_descriptor.c ****                                                           .Endpoint0Size = FIXED_CONTROL_ENDPOINT_S
 292:tmk_core/protocol/usb_descriptor.c ****                                                           // Specified in config.h
 293:tmk_core/protocol/usb_descriptor.c ****                                                           .VendorID               = VENDOR_ID,
 294:tmk_core/protocol/usb_descriptor.c ****                                                           .ProductID              = PRODUCT_ID,
 295:tmk_core/protocol/usb_descriptor.c ****                                                           .ReleaseNumber          = DEVICE_VER,
 296:tmk_core/protocol/usb_descriptor.c ****                                                           .ManufacturerStrIndex   = 0x01,
 297:tmk_core/protocol/usb_descriptor.c ****                                                           .ProductStrIndex        = 0x02,
 298:tmk_core/protocol/usb_descriptor.c ****                                                           .SerialNumStrIndex      = 0x03,
 299:tmk_core/protocol/usb_descriptor.c ****                                                           .NumberOfConfigurations = FIXED_NUM_CONFI
 300:tmk_core/protocol/usb_descriptor.c **** 
 301:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_MAX_POWER_CONSUMPTION
 302:tmk_core/protocol/usb_descriptor.c **** #    define USB_MAX_POWER_CONSUMPTION 500
 303:tmk_core/protocol/usb_descriptor.c **** #endif
 304:tmk_core/protocol/usb_descriptor.c **** 
 305:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_POLLING_INTERVAL_MS
 306:tmk_core/protocol/usb_descriptor.c **** #    define USB_POLLING_INTERVAL_MS 10
 307:tmk_core/protocol/usb_descriptor.c **** #endif
 308:tmk_core/protocol/usb_descriptor.c **** 
 309:tmk_core/protocol/usb_descriptor.c **** /*
 310:tmk_core/protocol/usb_descriptor.c ****  * Configuration descriptors
 311:tmk_core/protocol/usb_descriptor.c ****  */
 312:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Configuration_t PROGMEM
 313:tmk_core/protocol/usb_descriptor.c ****                                      ConfigurationDescriptor =
 314:tmk_core/protocol/usb_descriptor.c ****         {
 315:tmk_core/protocol/usb_descriptor.c ****             .Config = {.Header = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DT
 316:tmk_core/protocol/usb_descriptor.c **** 
 317:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 318:tmk_core/protocol/usb_descriptor.c ****             /*
 319:tmk_core/protocol/usb_descriptor.c ****              * Keyboard
 320:tmk_core/protocol/usb_descriptor.c ****              */
 321:tmk_core/protocol/usb_descriptor.c ****             .Keyboard_Interface  = {.Header           = {.Size = sizeof(USB_Descriptor_Interface_t)
 322:tmk_core/protocol/usb_descriptor.c ****                                    .InterfaceNumber  = KEYBOARD_INTERFACE,
 323:tmk_core/protocol/usb_descriptor.c ****                                    .AlternateSetting = 0x00,
 324:tmk_core/protocol/usb_descriptor.c ****                                    .TotalEndpoints   = 1,
 325:tmk_core/protocol/usb_descriptor.c ****                                    .Class            = HID_CSCP_HIDClass,
 326:tmk_core/protocol/usb_descriptor.c ****                                    .SubClass         = HID_CSCP_BootSubclass,
 327:tmk_core/protocol/usb_descriptor.c ****                                    .Protocol         = HID_CSCP_KeyboardBootProtocol,
 328:tmk_core/protocol/usb_descriptor.c **** 
 329:tmk_core/protocol/usb_descriptor.c ****                                    .InterfaceStrIndex = NO_DESCRIPTOR},
 330:tmk_core/protocol/usb_descriptor.c ****             .Keyboard_HID        = {.Header = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HI
 331:tmk_core/protocol/usb_descriptor.c ****             .Keyboard_INEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 332:tmk_core/protocol/usb_descriptor.c **** #endif
 333:tmk_core/protocol/usb_descriptor.c **** 
 334:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 335:tmk_core/protocol/usb_descriptor.c ****             /*
 336:tmk_core/protocol/usb_descriptor.c ****              * Mouse
 337:tmk_core/protocol/usb_descriptor.c ****              */
 338:tmk_core/protocol/usb_descriptor.c ****             .Mouse_Interface  = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTY
 339:tmk_core/protocol/usb_descriptor.c ****             .Mouse_HID        = {.Header = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_D
 340:tmk_core/protocol/usb_descriptor.c ****             .Mouse_INEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYP
 341:tmk_core/protocol/usb_descriptor.c **** #endif
 342:tmk_core/protocol/usb_descriptor.c **** 
 343:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 344:tmk_core/protocol/usb_descriptor.c ****             /*
 345:tmk_core/protocol/usb_descriptor.c ****              * Shared
 346:tmk_core/protocol/usb_descriptor.c ****              */
 347:tmk_core/protocol/usb_descriptor.c ****             .Shared_Interface  = {.Header           = {.Size = sizeof(USB_Descriptor_Interface_t), 
 348:tmk_core/protocol/usb_descriptor.c ****                                  .InterfaceNumber  = SHARED_INTERFACE,
 349:tmk_core/protocol/usb_descriptor.c ****                                  .AlternateSetting = 0x00,
 350:tmk_core/protocol/usb_descriptor.c ****                                  .TotalEndpoints   = 1,
 351:tmk_core/protocol/usb_descriptor.c ****                                  .Class            = HID_CSCP_HIDClass,
 352:tmk_core/protocol/usb_descriptor.c **** #    ifdef KEYBOARD_SHARED_EP
 353:tmk_core/protocol/usb_descriptor.c ****                                  .SubClass = HID_CSCP_BootSubclass,
 354:tmk_core/protocol/usb_descriptor.c ****                                  .Protocol = HID_CSCP_KeyboardBootProtocol,
 355:tmk_core/protocol/usb_descriptor.c **** #    else
 356:tmk_core/protocol/usb_descriptor.c ****                                  .SubClass = HID_CSCP_NonBootSubclass,
 357:tmk_core/protocol/usb_descriptor.c ****                                  .Protocol = HID_CSCP_NonBootProtocol,
 358:tmk_core/protocol/usb_descriptor.c **** #    endif
 359:tmk_core/protocol/usb_descriptor.c ****                                  .InterfaceStrIndex = NO_DESCRIPTOR},
 360:tmk_core/protocol/usb_descriptor.c ****             .Shared_HID        = {.Header = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_
 361:tmk_core/protocol/usb_descriptor.c ****             .Shared_INEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTY
 362:tmk_core/protocol/usb_descriptor.c **** #endif
 363:tmk_core/protocol/usb_descriptor.c **** 
 364:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 365:tmk_core/protocol/usb_descriptor.c ****             /*
 366:tmk_core/protocol/usb_descriptor.c ****              * Raw HID
 367:tmk_core/protocol/usb_descriptor.c ****              */
 368:tmk_core/protocol/usb_descriptor.c ****             .Raw_Interface   = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYP
 369:tmk_core/protocol/usb_descriptor.c ****             .Raw_HID         = {.Header = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DT
 370:tmk_core/protocol/usb_descriptor.c ****             .Raw_INEndpoint  = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE
 371:tmk_core/protocol/usb_descriptor.c ****             .Raw_OUTEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE
 372:tmk_core/protocol/usb_descriptor.c **** #endif
 373:tmk_core/protocol/usb_descriptor.c **** 
 374:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 375:tmk_core/protocol/usb_descriptor.c ****             /*
 376:tmk_core/protocol/usb_descriptor.c ****              * Console
 377:tmk_core/protocol/usb_descriptor.c ****              */
 378:tmk_core/protocol/usb_descriptor.c ****             .Console_Interface   = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = 
 379:tmk_core/protocol/usb_descriptor.c ****             .Console_HID         = {.Header = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HI
 380:tmk_core/protocol/usb_descriptor.c ****             .Console_INEndpoint  = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 381:tmk_core/protocol/usb_descriptor.c ****             .Console_OUTEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 382:tmk_core/protocol/usb_descriptor.c **** #endif
 383:tmk_core/protocol/usb_descriptor.c **** 
 384:tmk_core/protocol/usb_descriptor.c **** #ifdef MIDI_ENABLE
 385:tmk_core/protocol/usb_descriptor.c ****             /*
 386:tmk_core/protocol/usb_descriptor.c ****              * MIDI
 387:tmk_core/protocol/usb_descriptor.c ****              */
 388:tmk_core/protocol/usb_descriptor.c ****             .Audio_Interface_Association =
 389:tmk_core/protocol/usb_descriptor.c ****                 {
 390:tmk_core/protocol/usb_descriptor.c ****                     .Header              = {.Size = sizeof(USB_Descriptor_Interface_Association_t),
 391:tmk_core/protocol/usb_descriptor.c ****                     .FirstInterfaceIndex = AC_INTERFACE,
 392:tmk_core/protocol/usb_descriptor.c ****                     .TotalInterfaces     = 2,
 393:tmk_core/protocol/usb_descriptor.c ****                     .Class               = AUDIO_CSCP_AudioClass,
 394:tmk_core/protocol/usb_descriptor.c ****                     .SubClass            = AUDIO_CSCP_ControlSubclass,
 395:tmk_core/protocol/usb_descriptor.c ****                     .Protocol            = AUDIO_CSCP_ControlProtocol,
 396:tmk_core/protocol/usb_descriptor.c ****                     .IADStrIndex         = NO_DESCRIPTOR,
 397:tmk_core/protocol/usb_descriptor.c ****                 },
 398:tmk_core/protocol/usb_descriptor.c ****             .Audio_ControlInterface = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Type
 399:tmk_core/protocol/usb_descriptor.c **** 
 400:tmk_core/protocol/usb_descriptor.c ****                                        .InterfaceNumber   = AC_INTERFACE,
 401:tmk_core/protocol/usb_descriptor.c ****                                        .AlternateSetting  = 0,
 402:tmk_core/protocol/usb_descriptor.c ****                                        .TotalEndpoints    = 0,
 403:tmk_core/protocol/usb_descriptor.c ****                                        .Class             = AUDIO_CSCP_AudioClass,
 404:tmk_core/protocol/usb_descriptor.c ****                                        .SubClass          = AUDIO_CSCP_ControlSubclass,
 405:tmk_core/protocol/usb_descriptor.c ****                                        .Protocol          = AUDIO_CSCP_ControlProtocol,
 406:tmk_core/protocol/usb_descriptor.c ****                                        .InterfaceStrIndex = NO_DESCRIPTOR},
 407:tmk_core/protocol/usb_descriptor.c ****             .Audio_ControlInterface_SPC =
 408:tmk_core/protocol/usb_descriptor.c ****                 {
 409:tmk_core/protocol/usb_descriptor.c ****                     .Header          = {.Size = sizeof(USB_Audio_Descriptor_Interface_AC_t), .Type 
 410:tmk_core/protocol/usb_descriptor.c ****                     .Subtype         = AUDIO_DSUBTYPE_CSInterface_Header,
 411:tmk_core/protocol/usb_descriptor.c ****                     .ACSpecification = VERSION_BCD(1, 0, 0),
 412:tmk_core/protocol/usb_descriptor.c ****                     .TotalLength     = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 413:tmk_core/protocol/usb_descriptor.c ****                     .InCollection    = 1,
 414:tmk_core/protocol/usb_descriptor.c ****                     .InterfaceNumber = AS_INTERFACE,
 415:tmk_core/protocol/usb_descriptor.c ****                 },
 416:tmk_core/protocol/usb_descriptor.c ****             .Audio_StreamInterface      = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .
 417:tmk_core/protocol/usb_descriptor.c **** 
 418:tmk_core/protocol/usb_descriptor.c ****                                       .InterfaceNumber   = AS_INTERFACE,
 419:tmk_core/protocol/usb_descriptor.c ****                                       .AlternateSetting  = 0,
 420:tmk_core/protocol/usb_descriptor.c ****                                       .TotalEndpoints    = 2,
 421:tmk_core/protocol/usb_descriptor.c ****                                       .Class             = AUDIO_CSCP_AudioClass,
 422:tmk_core/protocol/usb_descriptor.c ****                                       .SubClass          = AUDIO_CSCP_MIDIStreamingSubclass,
 423:tmk_core/protocol/usb_descriptor.c ****                                       .Protocol          = AUDIO_CSCP_StreamingProtocol,
 424:tmk_core/protocol/usb_descriptor.c ****                                       .InterfaceStrIndex = NO_DESCRIPTOR},
 425:tmk_core/protocol/usb_descriptor.c ****             .Audio_StreamInterface_SPC  = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_AudioInter
 426:tmk_core/protocol/usb_descriptor.c ****             .MIDI_In_Jack_Emb           = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_InputJack_
 427:tmk_core/protocol/usb_descriptor.c ****             .MIDI_In_Jack_Ext           = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_InputJack_
 428:tmk_core/protocol/usb_descriptor.c ****             .MIDI_Out_Jack_Emb          = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_OutputJack
 429:tmk_core/protocol/usb_descriptor.c ****             .MIDI_Out_Jack_Ext          = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_OutputJack
 430:tmk_core/protocol/usb_descriptor.c ****             .MIDI_In_Jack_Endpoint      = {.Endpoint = {.Header = {.Size = sizeof(USB_Audio_Descrip
 431:tmk_core/protocol/usb_descriptor.c **** 
 432:tmk_core/protocol/usb_descriptor.c ****                                       .Refresh            = 0,
 433:tmk_core/protocol/usb_descriptor.c ****                                       .SyncEndpointNumber = 0},
 434:tmk_core/protocol/usb_descriptor.c ****             .MIDI_In_Jack_Endpoint_SPC  = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_Jack_Endpo
 435:tmk_core/protocol/usb_descriptor.c ****             .MIDI_Out_Jack_Endpoint     = {.Endpoint = {.Header = {.Size = sizeof(USB_Audio_Descrip
 436:tmk_core/protocol/usb_descriptor.c **** 
 437:tmk_core/protocol/usb_descriptor.c ****                                        .Refresh            = 0,
 438:tmk_core/protocol/usb_descriptor.c ****                                        .SyncEndpointNumber = 0},
 439:tmk_core/protocol/usb_descriptor.c ****             .MIDI_Out_Jack_Endpoint_SPC = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_Jack_Endpo
 440:tmk_core/protocol/usb_descriptor.c **** #endif
 441:tmk_core/protocol/usb_descriptor.c **** 
 442:tmk_core/protocol/usb_descriptor.c **** #ifdef VIRTSER_ENABLE
 443:tmk_core/protocol/usb_descriptor.c ****             /*
 444:tmk_core/protocol/usb_descriptor.c ****              * Virtual Serial
 445:tmk_core/protocol/usb_descriptor.c ****              */
 446:tmk_core/protocol/usb_descriptor.c ****             .CDC_Interface_Association =
 447:tmk_core/protocol/usb_descriptor.c ****                 {
 448:tmk_core/protocol/usb_descriptor.c ****                     .Header              = {.Size = sizeof(USB_Descriptor_Interface_Association_t),
 449:tmk_core/protocol/usb_descriptor.c ****                     .FirstInterfaceIndex = CCI_INTERFACE,
 450:tmk_core/protocol/usb_descriptor.c ****                     .TotalInterfaces     = 2,
 451:tmk_core/protocol/usb_descriptor.c ****                     .Class               = CDC_CSCP_CDCClass,
 452:tmk_core/protocol/usb_descriptor.c ****                     .SubClass            = CDC_CSCP_ACMSubclass,
 453:tmk_core/protocol/usb_descriptor.c ****                     .Protocol            = CDC_CSCP_ATCommandProtocol,
 454:tmk_core/protocol/usb_descriptor.c ****                     .IADStrIndex         = NO_DESCRIPTOR,
 455:tmk_core/protocol/usb_descriptor.c ****                 },
 456:tmk_core/protocol/usb_descriptor.c ****             .CDC_CCI_Interface = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DT
 457:tmk_core/protocol/usb_descriptor.c ****             .CDC_Functional_Header =
 458:tmk_core/protocol/usb_descriptor.c ****                 {
 459:tmk_core/protocol/usb_descriptor.c ****                     .Header           = {.Size = sizeof(USB_CDC_Descriptor_FunctionalHeader_t), .Ty
 460:tmk_core/protocol/usb_descriptor.c ****                     .Subtype          = 0x00,
 461:tmk_core/protocol/usb_descriptor.c ****                     .CDCSpecification = VERSION_BCD(1, 1, 0),
 462:tmk_core/protocol/usb_descriptor.c ****                 },
 463:tmk_core/protocol/usb_descriptor.c ****             .CDC_Functional_ACM =
 464:tmk_core/protocol/usb_descriptor.c ****                 {
 465:tmk_core/protocol/usb_descriptor.c ****                     .Header       = {.Size = sizeof(USB_CDC_Descriptor_FunctionalACM_t), .Type = CD
 466:tmk_core/protocol/usb_descriptor.c ****                     .Subtype      = 0x02,
 467:tmk_core/protocol/usb_descriptor.c ****                     .Capabilities = 0x02,
 468:tmk_core/protocol/usb_descriptor.c ****                 },
 469:tmk_core/protocol/usb_descriptor.c ****             .CDC_Functional_Union =
 470:tmk_core/protocol/usb_descriptor.c ****                 {
 471:tmk_core/protocol/usb_descriptor.c ****                     .Header                = {.Size = sizeof(USB_CDC_Descriptor_FunctionalUnion_t),
 472:tmk_core/protocol/usb_descriptor.c ****                     .Subtype               = 0x06,
 473:tmk_core/protocol/usb_descriptor.c ****                     .MasterInterfaceNumber = CCI_INTERFACE,
 474:tmk_core/protocol/usb_descriptor.c ****                     .SlaveInterfaceNumber  = CDI_INTERFACE,
 475:tmk_core/protocol/usb_descriptor.c ****                 },
 476:tmk_core/protocol/usb_descriptor.c ****             .CDC_NotificationEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Typ
 477:tmk_core/protocol/usb_descriptor.c ****             .CDC_DCI_Interface        = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Ty
 478:tmk_core/protocol/usb_descriptor.c ****             .CDC_DataOutEndpoint      = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Typ
 479:tmk_core/protocol/usb_descriptor.c ****             .CDC_DataInEndpoint       = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Typ
 480:tmk_core/protocol/usb_descriptor.c **** #endif
 481:tmk_core/protocol/usb_descriptor.c **** };
 482:tmk_core/protocol/usb_descriptor.c **** 
 483:tmk_core/protocol/usb_descriptor.c **** /*
 484:tmk_core/protocol/usb_descriptor.c ****  * String descriptors
 485:tmk_core/protocol/usb_descriptor.c ****  */
 486:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM LanguageString = {.Header = {.Size = USB_STRING_LEN(1), .Type
 487:tmk_core/protocol/usb_descriptor.c **** 
 488:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString = {.Header        = {.Size = USB_STRING_LE
 489:tmk_core/protocol/usb_descriptor.c ****                                                                        .Type = DTYPE_String},
 490:tmk_core/protocol/usb_descriptor.c ****                                                             .UnicodeString = LSTR(MANUFACTURER)};
 491:tmk_core/protocol/usb_descriptor.c **** 
 492:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ProductString = {.Header        = {.Size = USB_STRING_LEN(siz
 493:tmk_core/protocol/usb_descriptor.c ****                                                                   .Type = DTYPE_String},
 494:tmk_core/protocol/usb_descriptor.c ****                                                        .UnicodeString = LSTR(PRODUCT)};
 495:tmk_core/protocol/usb_descriptor.c **** 
 496:tmk_core/protocol/usb_descriptor.c **** #ifndef SERIAL_NUMBER
 497:tmk_core/protocol/usb_descriptor.c **** #    define SERIAL_NUMBER 0
 498:tmk_core/protocol/usb_descriptor.c **** #endif
 499:tmk_core/protocol/usb_descriptor.c **** 
 500:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM SerialNumberString = {.Header        = {.Size = USB_STRING_LE
 501:tmk_core/protocol/usb_descriptor.c ****                                                                        .Type = DTYPE_String},
 502:tmk_core/protocol/usb_descriptor.c ****                                                             .UnicodeString = LSTR(SERIAL_NUMBER)};
 503:tmk_core/protocol/usb_descriptor.c **** 
 504:tmk_core/protocol/usb_descriptor.c **** /**
 505:tmk_core/protocol/usb_descriptor.c ****  * This function is called by the library when in device mode, and must be overridden (see library 
 506:tmk_core/protocol/usb_descriptor.c ****  * documentation) by the application code so that the address and size of a requested descriptor ca
 507:tmk_core/protocol/usb_descriptor.c ****  * to the USB library. When the device receives a Get Descriptor request on the control endpoint, t
 508:tmk_core/protocol/usb_descriptor.c ****  * is called so that the descriptor details can be passed back and the appropriate descriptor sent 
 509:tmk_core/protocol/usb_descriptor.c ****  * USB host.
 510:tmk_core/protocol/usb_descriptor.c ****  */
 511:tmk_core/protocol/usb_descriptor.c **** uint16_t get_usb_descriptor(const uint16_t wValue, const uint16_t wIndex, const void** const Descri
  16               		.loc 1 511 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 512:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorType  = (wValue >> 8);
  23               		.loc 1 512 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
 513:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorIndex = (wValue & 0xFF);
 514:tmk_core/protocol/usb_descriptor.c ****     const void*   Address         = NULL;
 515:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
 516:tmk_core/protocol/usb_descriptor.c **** 
 517:tmk_core/protocol/usb_descriptor.c ****     switch (DescriptorType) {
  26               		.loc 1 517 0
  27 0004 2330      		cpi r18,3
  28 0006 3105      		cpc r19,__zero_reg__
  29 0008 01F0      		breq .L3
  30 000a 00F4      		brsh .L4
  31 000c 2130      		cpi r18,1
  32 000e 3105      		cpc r19,__zero_reg__
  33 0010 01F0      		breq .L5
  34 0012 2230      		cpi r18,2
  35 0014 3105      		cpc r19,__zero_reg__
  36 0016 01F0      		breq .L6
  37               	.LVL1:
  38               	.L21:
 515:tmk_core/protocol/usb_descriptor.c **** 
  39               		.loc 1 515 0
  40 0018 90E0      		ldi r25,0
  41 001a 80E0      		ldi r24,0
 514:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
  42               		.loc 1 514 0
  43 001c 30E0      		ldi r19,0
  44 001e 20E0      		ldi r18,0
  45 0020 00C0      		rjmp .L2
  46               	.LVL2:
  47               	.L4:
  48               		.loc 1 517 0
  49 0022 2132      		cpi r18,33
  50 0024 3105      		cpc r19,__zero_reg__
  51 0026 01F0      		breq .L7
  52 0028 2232      		cpi r18,34
  53 002a 3105      		cpc r19,__zero_reg__
  54 002c 01F4      		brne .L21
 518:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
 519:tmk_core/protocol/usb_descriptor.c ****             Address = &DeviceDescriptor;
 520:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 521:tmk_core/protocol/usb_descriptor.c **** 
 522:tmk_core/protocol/usb_descriptor.c ****             break;
 523:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Configuration:
 524:tmk_core/protocol/usb_descriptor.c ****             Address = &ConfigurationDescriptor;
 525:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 526:tmk_core/protocol/usb_descriptor.c **** 
 527:tmk_core/protocol/usb_descriptor.c ****             break;
 528:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_String:
 529:tmk_core/protocol/usb_descriptor.c ****             switch (DescriptorIndex) {
 530:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
 531:tmk_core/protocol/usb_descriptor.c ****                     Address = &LanguageString;
 532:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
 533:tmk_core/protocol/usb_descriptor.c **** 
 534:tmk_core/protocol/usb_descriptor.c ****                     break;
 535:tmk_core/protocol/usb_descriptor.c ****                 case 0x01:
 536:tmk_core/protocol/usb_descriptor.c ****                     Address = &ManufacturerString;
 537:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 538:tmk_core/protocol/usb_descriptor.c **** 
 539:tmk_core/protocol/usb_descriptor.c ****                     break;
 540:tmk_core/protocol/usb_descriptor.c ****                 case 0x02:
 541:tmk_core/protocol/usb_descriptor.c ****                     Address = &ProductString;
 542:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 543:tmk_core/protocol/usb_descriptor.c **** 
 544:tmk_core/protocol/usb_descriptor.c ****                     break;
 545:tmk_core/protocol/usb_descriptor.c ****                 case 0x03:
 546:tmk_core/protocol/usb_descriptor.c ****                     Address = &SerialNumberString;
 547:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
 548:tmk_core/protocol/usb_descriptor.c **** 
 549:tmk_core/protocol/usb_descriptor.c ****                     break;
 550:tmk_core/protocol/usb_descriptor.c ****             }
 551:tmk_core/protocol/usb_descriptor.c **** 
 552:tmk_core/protocol/usb_descriptor.c ****             break;
 553:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_HID:
 554:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
 555:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 556:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
 557:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Keyboard_HID;
 558:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 559:tmk_core/protocol/usb_descriptor.c ****                     break;
 560:tmk_core/protocol/usb_descriptor.c **** #endif
 561:tmk_core/protocol/usb_descriptor.c **** 
 562:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 563:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
 564:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Mouse_HID;
 565:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 566:tmk_core/protocol/usb_descriptor.c **** 
 567:tmk_core/protocol/usb_descriptor.c ****                     break;
 568:tmk_core/protocol/usb_descriptor.c **** #endif
 569:tmk_core/protocol/usb_descriptor.c **** 
 570:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 571:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
 572:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Shared_HID;
 573:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 574:tmk_core/protocol/usb_descriptor.c **** 
 575:tmk_core/protocol/usb_descriptor.c ****                     break;
 576:tmk_core/protocol/usb_descriptor.c **** #endif
 577:tmk_core/protocol/usb_descriptor.c **** 
 578:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 579:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
 580:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Raw_HID;
 581:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 582:tmk_core/protocol/usb_descriptor.c **** 
 583:tmk_core/protocol/usb_descriptor.c ****                     break;
 584:tmk_core/protocol/usb_descriptor.c **** #endif
 585:tmk_core/protocol/usb_descriptor.c **** 
 586:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 587:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
 588:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Console_HID;
 589:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 590:tmk_core/protocol/usb_descriptor.c **** 
 591:tmk_core/protocol/usb_descriptor.c ****                     break;
 592:tmk_core/protocol/usb_descriptor.c **** #endif
 593:tmk_core/protocol/usb_descriptor.c ****             }
 594:tmk_core/protocol/usb_descriptor.c **** 
 595:tmk_core/protocol/usb_descriptor.c ****             break;
 596:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_Report:
 597:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
 598:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 599:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
 600:tmk_core/protocol/usb_descriptor.c ****                     Address = &KeyboardReport;
 601:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
  55               		.loc 1 601 0
  56 002e 80E4      		ldi r24,lo8(64)
  57 0030 90E0      		ldi r25,0
  58               	.LVL3:
 600:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
  59               		.loc 1 600 0
  60 0032 20E0      		ldi r18,lo8(KeyboardReport)
  61 0034 30E0      		ldi r19,hi8(KeyboardReport)
 597:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
  62               		.loc 1 597 0
  63 0036 672B      		or r22,r23
  64 0038 01F4      		brne .L21
  65 003a 00C0      		rjmp .L2
  66               	.LVL4:
  67               	.L5:
 520:tmk_core/protocol/usb_descriptor.c **** 
  68               		.loc 1 520 0
  69 003c 82E1      		ldi r24,lo8(18)
  70 003e 90E0      		ldi r25,0
  71               	.LVL5:
 519:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
  72               		.loc 1 519 0
  73 0040 20E0      		ldi r18,lo8(DeviceDescriptor)
  74 0042 30E0      		ldi r19,hi8(DeviceDescriptor)
  75               	.LVL6:
  76               	.L2:
 602:tmk_core/protocol/usb_descriptor.c **** 
 603:tmk_core/protocol/usb_descriptor.c ****                     break;
 604:tmk_core/protocol/usb_descriptor.c **** #endif
 605:tmk_core/protocol/usb_descriptor.c **** 
 606:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 607:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
 608:tmk_core/protocol/usb_descriptor.c ****                     Address = &MouseReport;
 609:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(MouseReport);
 610:tmk_core/protocol/usb_descriptor.c **** 
 611:tmk_core/protocol/usb_descriptor.c ****                     break;
 612:tmk_core/protocol/usb_descriptor.c **** #endif
 613:tmk_core/protocol/usb_descriptor.c **** 
 614:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 615:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
 616:tmk_core/protocol/usb_descriptor.c ****                     Address = &SharedReport;
 617:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(SharedReport);
 618:tmk_core/protocol/usb_descriptor.c **** 
 619:tmk_core/protocol/usb_descriptor.c ****                     break;
 620:tmk_core/protocol/usb_descriptor.c **** #endif
 621:tmk_core/protocol/usb_descriptor.c **** 
 622:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 623:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
 624:tmk_core/protocol/usb_descriptor.c ****                     Address = &RawReport;
 625:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(RawReport);
 626:tmk_core/protocol/usb_descriptor.c **** 
 627:tmk_core/protocol/usb_descriptor.c ****                     break;
 628:tmk_core/protocol/usb_descriptor.c **** #endif
 629:tmk_core/protocol/usb_descriptor.c **** 
 630:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 631:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
 632:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConsoleReport;
 633:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(ConsoleReport);
 634:tmk_core/protocol/usb_descriptor.c **** 
 635:tmk_core/protocol/usb_descriptor.c ****                     break;
 636:tmk_core/protocol/usb_descriptor.c **** #endif
 637:tmk_core/protocol/usb_descriptor.c ****             }
 638:tmk_core/protocol/usb_descriptor.c **** 
 639:tmk_core/protocol/usb_descriptor.c ****             break;
 640:tmk_core/protocol/usb_descriptor.c ****     }
 641:tmk_core/protocol/usb_descriptor.c **** 
 642:tmk_core/protocol/usb_descriptor.c ****     *DescriptorAddress = Address;
  77               		.loc 1 642 0
  78 0044 FA01      		movw r30,r20
  79 0046 3183      		std Z+1,r19
  80 0048 2083      		st Z,r18
  81               	/* epilogue start */
 643:tmk_core/protocol/usb_descriptor.c **** 
 644:tmk_core/protocol/usb_descriptor.c ****     return Size;
 645:tmk_core/protocol/usb_descriptor.c **** }
  82               		.loc 1 645 0
  83 004a 0895      		ret
  84               	.LVL7:
  85               	.L6:
 525:tmk_core/protocol/usb_descriptor.c **** 
  86               		.loc 1 525 0
  87 004c 82E2      		ldi r24,lo8(34)
  88 004e 90E0      		ldi r25,0
  89               	.LVL8:
 524:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
  90               		.loc 1 524 0
  91 0050 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  92 0052 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 527:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_String:
  93               		.loc 1 527 0
  94 0054 00C0      		rjmp .L2
  95               	.LVL9:
  96               	.L3:
 529:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
  97               		.loc 1 529 0
  98 0056 9927      		clr r25
  99               	.LVL10:
 100 0058 8130      		cpi r24,1
 101 005a 9105      		cpc r25,__zero_reg__
 102 005c 01F0      		breq .L9
 103 005e 00F0      		brlo .L10
 104 0060 8230      		cpi r24,2
 105 0062 9105      		cpc r25,__zero_reg__
 106 0064 01F0      		breq .L11
 107 0066 0397      		sbiw r24,3
 108 0068 01F4      		brne .L21
 109               	.LVL11:
 110               	.LBB2:
 547:tmk_core/protocol/usb_descriptor.c **** 
 111               		.loc 1 547 0
 112 006a E0E0      		ldi r30,lo8(SerialNumberString)
 113 006c F0E0      		ldi r31,hi8(SerialNumberString)
 114 006e 00C0      		rjmp .L22
 115               	.LVL12:
 116               	.L10:
 117               	.LBE2:
 118               	.LBB3:
 532:tmk_core/protocol/usb_descriptor.c **** 
 119               		.loc 1 532 0
 120 0070 E0E0      		ldi r30,lo8(LanguageString)
 121 0072 F0E0      		ldi r31,hi8(LanguageString)
 122               	.LVL13:
 123               	.L22:
 124               	.LBE3:
 125               	.LBB4:
 547:tmk_core/protocol/usb_descriptor.c **** 
 126               		.loc 1 547 0
 127               	/* #APP */
 128               	 ;  547 "tmk_core/protocol/usb_descriptor.c" 1
 129 0074 8491      		lpm r24, Z
 130               		
 131               	 ;  0 "" 2
 132               	.LVL14:
 133               	/* #NOAPP */
 134               	.LBE4:
 135 0076 90E0      		ldi r25,0
 136               	.LVL15:
 546:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
 137               		.loc 1 546 0
 138 0078 9F01      		movw r18,r30
 549:tmk_core/protocol/usb_descriptor.c ****             }
 139               		.loc 1 549 0
 140 007a 00C0      		rjmp .L2
 141               	.LVL16:
 142               	.L9:
 143               	.LBB5:
 537:tmk_core/protocol/usb_descriptor.c **** 
 144               		.loc 1 537 0
 145 007c E0E0      		ldi r30,lo8(ManufacturerString)
 146 007e F0E0      		ldi r31,hi8(ManufacturerString)
 147 0080 00C0      		rjmp .L22
 148               	.LVL17:
 149               	.L11:
 150               	.LBE5:
 151               	.LBB6:
 542:tmk_core/protocol/usb_descriptor.c **** 
 152               		.loc 1 542 0
 153 0082 E0E0      		ldi r30,lo8(ProductString)
 154 0084 F0E0      		ldi r31,hi8(ProductString)
 155 0086 00C0      		rjmp .L22
 156               	.LVL18:
 157               	.L7:
 158               	.LBE6:
 558:tmk_core/protocol/usb_descriptor.c ****                     break;
 159               		.loc 1 558 0
 160 0088 89E0      		ldi r24,lo8(9)
 161 008a 90E0      		ldi r25,0
 162               	.LVL19:
 557:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 163               		.loc 1 557 0
 164 008c 20E0      		ldi r18,lo8(ConfigurationDescriptor+18)
 165 008e 30E0      		ldi r19,hi8(ConfigurationDescriptor+18)
 554:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 166               		.loc 1 554 0
 167 0090 672B      		or r22,r23
 168 0092 01F0      		breq .+2
 169 0094 00C0      		rjmp .L21
 170 0096 00C0      		rjmp .L2
 171               		.cfi_endproc
 172               	.LFE100:
 174               	.global	SerialNumberString
 175               		.section	.progmem.data.SerialNumberString,"a",@progbits
 178               	SerialNumberString:
 179 0000 04        		.byte	4
 180 0001 03        		.byte	3
 181 0002 3000      		.string	"0"
 182 0004 00        		.string	""
 183 0005 00        		.string	""
 184               	.global	ProductString
 185               		.section	.progmem.data.ProductString,"a",@progbits
 188               	ProductString:
 189 0000 0E        		.byte	14
 190 0001 03        		.byte	3
 191 0002 4C00      		.string	"L"
 192 0004 6900      		.string	"i"
 193 0006 6C00      		.string	"l"
 194 0008 7900      		.string	"y"
 195 000a 3500      		.string	"5"
 196 000c 3800      		.string	"8"
 197 000e 00        		.string	""
 198 000f 00        		.string	""
 199               	.global	ManufacturerString
 200               		.section	.progmem.data.ManufacturerString,"a",@progbits
 203               	ManufacturerString:
 204 0000 12        		.byte	18
 205 0001 03        		.byte	3
 206 0002 4600      		.string	"F"
 207 0004 5F00      		.string	"_"
 208 0006 5900      		.string	"Y"
 209 0008 5500      		.string	"U"
 210 000a 5500      		.string	"U"
 211 000c 4300      		.string	"C"
 212 000e 4800      		.string	"H"
 213 0010 4900      		.string	"I"
 214 0012 00        		.string	""
 215 0013 00        		.string	""
 216               	.global	LanguageString
 217               		.section	.progmem.data.LanguageString,"a",@progbits
 220               	LanguageString:
 221 0000 04        		.byte	4
 222 0001 03        		.byte	3
 223 0002 0904      		.word	1033
 224               	.global	ConfigurationDescriptor
 225               		.section	.progmem.data.ConfigurationDescriptor,"a",@progbits
 228               	ConfigurationDescriptor:
 229 0000 09        		.byte	9
 230 0001 02        		.byte	2
 231 0002 2200      		.word	34
 232 0004 01        		.byte	1
 233 0005 01        		.byte	1
 234 0006 00        		.byte	0
 235 0007 A0        		.byte	-96
 236 0008 FA        		.byte	-6
 237 0009 09        		.byte	9
 238 000a 04        		.byte	4
 239 000b 00        		.byte	0
 240 000c 00        		.byte	0
 241 000d 01        		.byte	1
 242 000e 03        		.byte	3
 243 000f 01        		.byte	1
 244 0010 01        		.byte	1
 245 0011 00        		.byte	0
 246 0012 09        		.byte	9
 247 0013 21        		.byte	33
 248 0014 1101      		.word	273
 249 0016 00        		.byte	0
 250 0017 01        		.byte	1
 251 0018 22        		.byte	34
 252 0019 4000      		.word	64
 253 001b 07        		.byte	7
 254 001c 05        		.byte	5
 255 001d 81        		.byte	-127
 256 001e 03        		.byte	3
 257 001f 0800      		.word	8
 258 0021 0A        		.byte	10
 259               	.global	DeviceDescriptor
 260               		.section	.progmem.data.DeviceDescriptor,"a",@progbits
 263               	DeviceDescriptor:
 264 0000 12        		.byte	18
 265 0001 01        		.byte	1
 266 0002 1001      		.word	272
 267 0004 00        		.byte	0
 268 0005 00        		.byte	0
 269 0006 00        		.byte	0
 270 0007 08        		.byte	8
 271 0008 51FC      		.word	-943
 272 000a 5800      		.word	88
 273 000c 0001      		.word	256
 274 000e 01        		.byte	1
 275 000f 02        		.byte	2
 276 0010 03        		.byte	3
 277 0011 01        		.byte	1
 278               	.global	KeyboardReport
 279               		.section	.progmem.data.KeyboardReport,"a",@progbits
 282               	KeyboardReport:
 283 0000 05        		.byte	5
 284 0001 01        		.byte	1
 285 0002 09        		.byte	9
 286 0003 06        		.byte	6
 287 0004 A1        		.byte	-95
 288 0005 01        		.byte	1
 289 0006 05        		.byte	5
 290 0007 07        		.byte	7
 291 0008 19        		.byte	25
 292 0009 E0        		.byte	-32
 293 000a 29        		.byte	41
 294 000b E7        		.byte	-25
 295 000c 15        		.byte	21
 296 000d 00        		.byte	0
 297 000e 25        		.byte	37
 298 000f 01        		.byte	1
 299 0010 95        		.byte	-107
 300 0011 08        		.byte	8
 301 0012 75        		.byte	117
 302 0013 01        		.byte	1
 303 0014 81        		.byte	-127
 304 0015 02        		.byte	2
 305 0016 95        		.byte	-107
 306 0017 01        		.byte	1
 307 0018 75        		.byte	117
 308 0019 08        		.byte	8
 309 001a 81        		.byte	-127
 310 001b 01        		.byte	1
 311 001c 05        		.byte	5
 312 001d 07        		.byte	7
 313 001e 19        		.byte	25
 314 001f 00        		.byte	0
 315 0020 29        		.byte	41
 316 0021 FF        		.byte	-1
 317 0022 15        		.byte	21
 318 0023 00        		.byte	0
 319 0024 26        		.byte	38
 320 0025 FF        		.byte	-1
 321 0026 00        		.byte	0
 322 0027 95        		.byte	-107
 323 0028 06        		.byte	6
 324 0029 75        		.byte	117
 325 002a 08        		.byte	8
 326 002b 81        		.byte	-127
 327 002c 00        		.byte	0
 328 002d 05        		.byte	5
 329 002e 08        		.byte	8
 330 002f 19        		.byte	25
 331 0030 01        		.byte	1
 332 0031 29        		.byte	41
 333 0032 05        		.byte	5
 334 0033 95        		.byte	-107
 335 0034 05        		.byte	5
 336 0035 75        		.byte	117
 337 0036 01        		.byte	1
 338 0037 91        		.byte	-111
 339 0038 02        		.byte	2
 340 0039 95        		.byte	-107
 341 003a 01        		.byte	1
 342 003b 75        		.byte	117
 343 003c 03        		.byte	3
 344 003d 91        		.byte	-111
 345 003e 01        		.byte	1
 346 003f C0        		.byte	-64
 347               		.text
 348               	.Letext0:
 349               		.file 2 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/stdint.h"
 350               		.file 3 "/usr/local/Cellar/avr-gcc@7/7.4.0/lib/avr-gcc/7/gcc/avr/7.4.0/include/stddef.h"
 351               		.file 4 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
 352               		.file 5 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 353               		.file 6 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 354               		.file 7 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 355               		.file 8 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 356               		.file 9 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/stdio.h"
 357               		.file 10 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 358               		.file 11 "tmk_core/protocol/usb_descriptor.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_descriptor.c
/var/tmp//ccACn9SR.s:2      *ABS*:000000000000003e __SP_H__
/var/tmp//ccACn9SR.s:3      *ABS*:000000000000003d __SP_L__
/var/tmp//ccACn9SR.s:4      *ABS*:000000000000003f __SREG__
/var/tmp//ccACn9SR.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/tmp//ccACn9SR.s:6      *ABS*:0000000000000001 __zero_reg__
/var/tmp//ccACn9SR.s:13     .text.get_usb_descriptor:0000000000000000 get_usb_descriptor
/var/tmp//ccACn9SR.s:282    .progmem.data.KeyboardReport:0000000000000000 KeyboardReport
/var/tmp//ccACn9SR.s:263    .progmem.data.DeviceDescriptor:0000000000000000 DeviceDescriptor
/var/tmp//ccACn9SR.s:228    .progmem.data.ConfigurationDescriptor:0000000000000000 ConfigurationDescriptor
/var/tmp//ccACn9SR.s:178    .progmem.data.SerialNumberString:0000000000000000 SerialNumberString
/var/tmp//ccACn9SR.s:220    .progmem.data.LanguageString:0000000000000000 LanguageString
/var/tmp//ccACn9SR.s:203    .progmem.data.ManufacturerString:0000000000000000 ManufacturerString
/var/tmp//ccACn9SR.s:188    .progmem.data.ProductString:0000000000000000 ProductString

NO UNDEFINED SYMBOLS
