   1               		.file	"lufa.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.keyboard_leds,"ax",@progbits
  12               	keyboard_leds:
  13               	.LFB129:
  14               		.file 1 "tmk_core/protocol/lufa/lufa.c"
   1:tmk_core/protocol/lufa/lufa.c **** /*
   2:tmk_core/protocol/lufa/lufa.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/lufa/lufa.c ****  * This file is based on:
   4:tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/lufa/lufa.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/lufa/lufa.c ****  */
   7:tmk_core/protocol/lufa/lufa.c **** 
   8:tmk_core/protocol/lufa/lufa.c **** /*
   9:tmk_core/protocol/lufa/lufa.c ****              LUFA Library
  10:tmk_core/protocol/lufa/lufa.c ****      Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/lufa/lufa.c **** 
  12:tmk_core/protocol/lufa/lufa.c ****   dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/lufa/lufa.c ****            www.lufa-lib.org
  14:tmk_core/protocol/lufa/lufa.c **** */
  15:tmk_core/protocol/lufa/lufa.c **** 
  16:tmk_core/protocol/lufa/lufa.c **** /*
  17:tmk_core/protocol/lufa/lufa.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/lufa/lufa.c ****   Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/lufa/lufa.c **** 
  20:tmk_core/protocol/lufa/lufa.c ****   Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/lufa/lufa.c ****   software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/lufa/lufa.c ****   without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/lufa/lufa.c ****   all copies and that both that the copyright notice and this
  24:tmk_core/protocol/lufa/lufa.c ****   permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/lufa/lufa.c ****   documentation, and that the name of the author not be used in
  26:tmk_core/protocol/lufa/lufa.c ****   advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/lufa/lufa.c ****   software without specific, written prior permission.
  28:tmk_core/protocol/lufa/lufa.c **** 
  29:tmk_core/protocol/lufa/lufa.c ****   The author disclaim all warranties with regard to this
  30:tmk_core/protocol/lufa/lufa.c ****   software, including all implied warranties of merchantability
  31:tmk_core/protocol/lufa/lufa.c ****   and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/lufa/lufa.c ****   special, indirect or consequential damages or any damages
  33:tmk_core/protocol/lufa/lufa.c ****   whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/lufa/lufa.c ****   in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/lufa/lufa.c ****   arising out of or in connection with the use or performance of
  36:tmk_core/protocol/lufa/lufa.c ****   this software.
  37:tmk_core/protocol/lufa/lufa.c **** */
  38:tmk_core/protocol/lufa/lufa.c **** 
  39:tmk_core/protocol/lufa/lufa.c **** #include "report.h"
  40:tmk_core/protocol/lufa/lufa.c **** #include "host.h"
  41:tmk_core/protocol/lufa/lufa.c **** #include "host_driver.h"
  42:tmk_core/protocol/lufa/lufa.c **** #include "keyboard.h"
  43:tmk_core/protocol/lufa/lufa.c **** #include "action.h"
  44:tmk_core/protocol/lufa/lufa.c **** #include "led.h"
  45:tmk_core/protocol/lufa/lufa.c **** #include "sendchar.h"
  46:tmk_core/protocol/lufa/lufa.c **** #include "debug.h"
  47:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
  48:tmk_core/protocol/lufa/lufa.c **** #    include "sleep_led.h"
  49:tmk_core/protocol/lufa/lufa.c **** #endif
  50:tmk_core/protocol/lufa/lufa.c **** #include "suspend.h"
  51:tmk_core/protocol/lufa/lufa.c **** 
  52:tmk_core/protocol/lufa/lufa.c **** #include "usb_descriptor.h"
  53:tmk_core/protocol/lufa/lufa.c **** #include "lufa.h"
  54:tmk_core/protocol/lufa/lufa.c **** #include "quantum.h"
  55:tmk_core/protocol/lufa/lufa.c **** #include <util/atomic.h>
  56:tmk_core/protocol/lufa/lufa.c **** #include "outputselect.h"
  57:tmk_core/protocol/lufa/lufa.c **** #include "rgblight_reconfig.h"
  58:tmk_core/protocol/lufa/lufa.c **** 
  59:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
  60:tmk_core/protocol/lufa/lufa.c **** #    include "keycode_config.h"
  61:tmk_core/protocol/lufa/lufa.c **** 
  62:tmk_core/protocol/lufa/lufa.c **** extern keymap_config_t keymap_config;
  63:tmk_core/protocol/lufa/lufa.c **** #endif
  64:tmk_core/protocol/lufa/lufa.c **** 
  65:tmk_core/protocol/lufa/lufa.c **** #ifdef AUDIO_ENABLE
  66:tmk_core/protocol/lufa/lufa.c **** #    include <audio.h>
  67:tmk_core/protocol/lufa/lufa.c **** #endif
  68:tmk_core/protocol/lufa/lufa.c **** 
  69:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
  70:tmk_core/protocol/lufa/lufa.c **** #    ifdef MODULE_ADAFRUIT_BLE
  71:tmk_core/protocol/lufa/lufa.c **** #        include "adafruit_ble.h"
  72:tmk_core/protocol/lufa/lufa.c **** #    else
  73:tmk_core/protocol/lufa/lufa.c **** #        include "bluetooth.h"
  74:tmk_core/protocol/lufa/lufa.c **** #    endif
  75:tmk_core/protocol/lufa/lufa.c **** #endif
  76:tmk_core/protocol/lufa/lufa.c **** 
  77:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
  78:tmk_core/protocol/lufa/lufa.c **** #    include "virtser.h"
  79:tmk_core/protocol/lufa/lufa.c **** #endif
  80:tmk_core/protocol/lufa/lufa.c **** 
  81:tmk_core/protocol/lufa/lufa.c **** #if (defined(RGB_MIDI) | defined(RGBLIGHT_ANIMATIONS)) & defined(RGBLIGHT_ENABLE)
  82:tmk_core/protocol/lufa/lufa.c **** #    include "rgblight.h"
  83:tmk_core/protocol/lufa/lufa.c **** #endif
  84:tmk_core/protocol/lufa/lufa.c **** 
  85:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
  86:tmk_core/protocol/lufa/lufa.c **** #    include "qmk_midi.h"
  87:tmk_core/protocol/lufa/lufa.c **** #endif
  88:tmk_core/protocol/lufa/lufa.c **** 
  89:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
  90:tmk_core/protocol/lufa/lufa.c **** #    include "raw_hid.h"
  91:tmk_core/protocol/lufa/lufa.c **** #endif
  92:tmk_core/protocol/lufa/lufa.c **** 
  93:tmk_core/protocol/lufa/lufa.c **** uint8_t keyboard_idle = 0;
  94:tmk_core/protocol/lufa/lufa.c **** /* 0: Boot Protocol, 1: Report Protocol(default) */
  95:tmk_core/protocol/lufa/lufa.c **** uint8_t        keyboard_protocol  = 1;
  96:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_led_stats = 0;
  97:tmk_core/protocol/lufa/lufa.c **** 
  98:tmk_core/protocol/lufa/lufa.c **** static report_keyboard_t keyboard_report_sent;
  99:tmk_core/protocol/lufa/lufa.c **** 
 100:tmk_core/protocol/lufa/lufa.c **** /* Host driver */
 101:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void);
 102:tmk_core/protocol/lufa/lufa.c **** static void    send_keyboard(report_keyboard_t *report);
 103:tmk_core/protocol/lufa/lufa.c **** static void    send_mouse(report_mouse_t *report);
 104:tmk_core/protocol/lufa/lufa.c **** static void    send_system(uint16_t data);
 105:tmk_core/protocol/lufa/lufa.c **** static void    send_consumer(uint16_t data);
 106:tmk_core/protocol/lufa/lufa.c **** host_driver_t  lufa_driver = {
 107:tmk_core/protocol/lufa/lufa.c ****     keyboard_leds, send_keyboard, send_mouse, send_system, send_consumer,
 108:tmk_core/protocol/lufa/lufa.c **** };
 109:tmk_core/protocol/lufa/lufa.c **** 
 110:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 111:tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_CDC_Device_t cdc_device = {
 112:tmk_core/protocol/lufa/lufa.c ****     .Config =
 113:tmk_core/protocol/lufa/lufa.c ****         {
 114:tmk_core/protocol/lufa/lufa.c ****             .ControlInterfaceNumber = CCI_INTERFACE,
 115:tmk_core/protocol/lufa/lufa.c ****             .DataINEndpoint =
 116:tmk_core/protocol/lufa/lufa.c ****                 {
 117:tmk_core/protocol/lufa/lufa.c ****                     .Address = CDC_IN_EPADDR,
 118:tmk_core/protocol/lufa/lufa.c ****                     .Size    = CDC_EPSIZE,
 119:tmk_core/protocol/lufa/lufa.c ****                     .Banks   = 1,
 120:tmk_core/protocol/lufa/lufa.c ****                 },
 121:tmk_core/protocol/lufa/lufa.c ****             .DataOUTEndpoint =
 122:tmk_core/protocol/lufa/lufa.c ****                 {
 123:tmk_core/protocol/lufa/lufa.c ****                     .Address = CDC_OUT_EPADDR,
 124:tmk_core/protocol/lufa/lufa.c ****                     .Size    = CDC_EPSIZE,
 125:tmk_core/protocol/lufa/lufa.c ****                     .Banks   = 1,
 126:tmk_core/protocol/lufa/lufa.c ****                 },
 127:tmk_core/protocol/lufa/lufa.c ****             .NotificationEndpoint =
 128:tmk_core/protocol/lufa/lufa.c ****                 {
 129:tmk_core/protocol/lufa/lufa.c ****                     .Address = CDC_NOTIFICATION_EPADDR,
 130:tmk_core/protocol/lufa/lufa.c ****                     .Size    = CDC_NOTIFICATION_EPSIZE,
 131:tmk_core/protocol/lufa/lufa.c ****                     .Banks   = 1,
 132:tmk_core/protocol/lufa/lufa.c ****                 },
 133:tmk_core/protocol/lufa/lufa.c ****         },
 134:tmk_core/protocol/lufa/lufa.c **** };
 135:tmk_core/protocol/lufa/lufa.c **** #endif
 136:tmk_core/protocol/lufa/lufa.c **** 
 137:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 138:tmk_core/protocol/lufa/lufa.c **** 
 139:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Send
 140:tmk_core/protocol/lufa/lufa.c ****  *
 141:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 142:tmk_core/protocol/lufa/lufa.c ****  */
 143:tmk_core/protocol/lufa/lufa.c **** void raw_hid_send(uint8_t *data, uint8_t length) {
 144:tmk_core/protocol/lufa/lufa.c ****     // TODO: implement variable size packet
 145:tmk_core/protocol/lufa/lufa.c ****     if (length != RAW_EPSIZE) {
 146:tmk_core/protocol/lufa/lufa.c ****         return;
 147:tmk_core/protocol/lufa/lufa.c ****     }
 148:tmk_core/protocol/lufa/lufa.c **** 
 149:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured) {
 150:tmk_core/protocol/lufa/lufa.c ****         return;
 151:tmk_core/protocol/lufa/lufa.c ****     }
 152:tmk_core/protocol/lufa/lufa.c **** 
 153:tmk_core/protocol/lufa/lufa.c ****     // TODO: decide if we allow calls to raw_hid_send() in the middle
 154:tmk_core/protocol/lufa/lufa.c ****     // of other endpoint usage.
 155:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 156:tmk_core/protocol/lufa/lufa.c **** 
 157:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(RAW_IN_EPNUM);
 158:tmk_core/protocol/lufa/lufa.c **** 
 159:tmk_core/protocol/lufa/lufa.c ****     // Check to see if the host is ready to accept another packet
 160:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 161:tmk_core/protocol/lufa/lufa.c ****         // Write data
 162:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(data, RAW_EPSIZE, NULL);
 163:tmk_core/protocol/lufa/lufa.c ****         // Finalize the stream transfer to send the last packet
 164:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 165:tmk_core/protocol/lufa/lufa.c ****     }
 166:tmk_core/protocol/lufa/lufa.c **** 
 167:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 168:tmk_core/protocol/lufa/lufa.c **** }
 169:tmk_core/protocol/lufa/lufa.c **** 
 170:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Receive
 171:tmk_core/protocol/lufa/lufa.c ****  *
 172:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 173:tmk_core/protocol/lufa/lufa.c ****  */
 174:tmk_core/protocol/lufa/lufa.c **** __attribute__((weak)) void raw_hid_receive(uint8_t *data, uint8_t length) {
 175:tmk_core/protocol/lufa/lufa.c ****     // Users should #include "raw_hid.h" in their own code
 176:tmk_core/protocol/lufa/lufa.c ****     // and implement this function there. Leave this as weak linkage
 177:tmk_core/protocol/lufa/lufa.c ****     // so users can opt to not handle data coming in.
 178:tmk_core/protocol/lufa/lufa.c **** }
 179:tmk_core/protocol/lufa/lufa.c **** 
 180:tmk_core/protocol/lufa/lufa.c **** /** \brief Raw HID Task
 181:tmk_core/protocol/lufa/lufa.c ****  *
 182:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 183:tmk_core/protocol/lufa/lufa.c ****  */
 184:tmk_core/protocol/lufa/lufa.c **** static void raw_hid_task(void) {
 185:tmk_core/protocol/lufa/lufa.c ****     // Create a temporary buffer to hold the read in data from the host
 186:tmk_core/protocol/lufa/lufa.c ****     uint8_t data[RAW_EPSIZE];
 187:tmk_core/protocol/lufa/lufa.c ****     bool    data_read = false;
 188:tmk_core/protocol/lufa/lufa.c **** 
 189:tmk_core/protocol/lufa/lufa.c ****     // Device must be connected and configured for the task to run
 190:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured) return;
 191:tmk_core/protocol/lufa/lufa.c **** 
 192:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(RAW_OUT_EPNUM);
 193:tmk_core/protocol/lufa/lufa.c **** 
 194:tmk_core/protocol/lufa/lufa.c ****     // Check to see if a packet has been sent from the host
 195:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived()) {
 196:tmk_core/protocol/lufa/lufa.c ****         // Check to see if the packet contains data
 197:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed()) {
 198:tmk_core/protocol/lufa/lufa.c ****             /* Read data */
 199:tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(data, sizeof(data), NULL);
 200:tmk_core/protocol/lufa/lufa.c ****             data_read = true;
 201:tmk_core/protocol/lufa/lufa.c ****         }
 202:tmk_core/protocol/lufa/lufa.c **** 
 203:tmk_core/protocol/lufa/lufa.c ****         // Finalize the stream transfer to receive the last packet
 204:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 205:tmk_core/protocol/lufa/lufa.c **** 
 206:tmk_core/protocol/lufa/lufa.c ****         if (data_read) {
 207:tmk_core/protocol/lufa/lufa.c ****             raw_hid_receive(data, sizeof(data));
 208:tmk_core/protocol/lufa/lufa.c ****         }
 209:tmk_core/protocol/lufa/lufa.c ****     }
 210:tmk_core/protocol/lufa/lufa.c **** }
 211:tmk_core/protocol/lufa/lufa.c **** #endif
 212:tmk_core/protocol/lufa/lufa.c **** 
 213:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 214:tmk_core/protocol/lufa/lufa.c ****  * Console
 215:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 216:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 217:tmk_core/protocol/lufa/lufa.c **** /** \brief Console Task
 218:tmk_core/protocol/lufa/lufa.c ****  *
 219:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 220:tmk_core/protocol/lufa/lufa.c ****  */
 221:tmk_core/protocol/lufa/lufa.c **** static void Console_Task(void) {
 222:tmk_core/protocol/lufa/lufa.c ****     /* Device must be connected and configured for the task to run */
 223:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured) return;
 224:tmk_core/protocol/lufa/lufa.c **** 
 225:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 226:tmk_core/protocol/lufa/lufa.c **** 
 227:tmk_core/protocol/lufa/lufa.c **** #    if 0
 228:tmk_core/protocol/lufa/lufa.c ****     // TODO: impl receivechar()/recvchar()
 229:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_OUT_EPNUM);
 230:tmk_core/protocol/lufa/lufa.c **** 
 231:tmk_core/protocol/lufa/lufa.c ****     /* Check to see if a packet has been sent from the host */
 232:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsOUTReceived())
 233:tmk_core/protocol/lufa/lufa.c ****     {
 234:tmk_core/protocol/lufa/lufa.c ****         /* Check to see if the packet contains data */
 235:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsReadWriteAllowed())
 236:tmk_core/protocol/lufa/lufa.c ****         {
 237:tmk_core/protocol/lufa/lufa.c ****             /* Create a temporary buffer to hold the read in report from the host */
 238:tmk_core/protocol/lufa/lufa.c ****             uint8_t ConsoleData[CONSOLE_EPSIZE];
 239:tmk_core/protocol/lufa/lufa.c **** 
 240:tmk_core/protocol/lufa/lufa.c ****             /* Read Console Report Data */
 241:tmk_core/protocol/lufa/lufa.c ****             Endpoint_Read_Stream_LE(&ConsoleData, sizeof(ConsoleData), NULL);
 242:tmk_core/protocol/lufa/lufa.c **** 
 243:tmk_core/protocol/lufa/lufa.c ****             /* Process Console Report Data */
 244:tmk_core/protocol/lufa/lufa.c ****             //ProcessConsoleHIDReport(ConsoleData);
 245:tmk_core/protocol/lufa/lufa.c ****         }
 246:tmk_core/protocol/lufa/lufa.c **** 
 247:tmk_core/protocol/lufa/lufa.c ****         /* Finalize the stream transfer to send the last packet */
 248:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearOUT();
 249:tmk_core/protocol/lufa/lufa.c ****     }
 250:tmk_core/protocol/lufa/lufa.c **** #    endif
 251:tmk_core/protocol/lufa/lufa.c **** 
 252:tmk_core/protocol/lufa/lufa.c ****     /* IN packet */
 253:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 254:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 255:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 256:tmk_core/protocol/lufa/lufa.c ****         return;
 257:tmk_core/protocol/lufa/lufa.c ****     }
 258:tmk_core/protocol/lufa/lufa.c **** 
 259:tmk_core/protocol/lufa/lufa.c ****     // fill empty bank
 260:tmk_core/protocol/lufa/lufa.c ****     while (Endpoint_IsReadWriteAllowed()) Endpoint_Write_8(0);
 261:tmk_core/protocol/lufa/lufa.c **** 
 262:tmk_core/protocol/lufa/lufa.c ****     // flash senchar packet
 263:tmk_core/protocol/lufa/lufa.c ****     if (Endpoint_IsINReady()) {
 264:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 265:tmk_core/protocol/lufa/lufa.c ****     }
 266:tmk_core/protocol/lufa/lufa.c **** 
 267:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 268:tmk_core/protocol/lufa/lufa.c **** }
 269:tmk_core/protocol/lufa/lufa.c **** #endif
 270:tmk_core/protocol/lufa/lufa.c **** 
 271:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 272:tmk_core/protocol/lufa/lufa.c ****  * USB Events
 273:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 274:tmk_core/protocol/lufa/lufa.c **** /*
 275:tmk_core/protocol/lufa/lufa.c ****  * Event Order of Plug in:
 276:tmk_core/protocol/lufa/lufa.c ****  * 0) EVENT_USB_Device_Connect
 277:tmk_core/protocol/lufa/lufa.c ****  * 1) EVENT_USB_Device_Suspend
 278:tmk_core/protocol/lufa/lufa.c ****  * 2) EVENT_USB_Device_Reset
 279:tmk_core/protocol/lufa/lufa.c ****  * 3) EVENT_USB_Device_Wake
 280:tmk_core/protocol/lufa/lufa.c ****  */
 281:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 282:tmk_core/protocol/lufa/lufa.c ****  *
 283:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 284:tmk_core/protocol/lufa/lufa.c ****  */
 285:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Connect(void) {
 286:tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 287:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 288:tmk_core/protocol/lufa/lufa.c ****     if (!USB_IsInitialized) {
 289:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 290:tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 291:tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 292:tmk_core/protocol/lufa/lufa.c ****     }
 293:tmk_core/protocol/lufa/lufa.c **** }
 294:tmk_core/protocol/lufa/lufa.c **** 
 295:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 296:tmk_core/protocol/lufa/lufa.c ****  *
 297:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 298:tmk_core/protocol/lufa/lufa.c ****  */
 299:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Disconnect(void) {
 300:tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 301:tmk_core/protocol/lufa/lufa.c ****     /* For battery powered device */
 302:tmk_core/protocol/lufa/lufa.c ****     USB_IsInitialized = false;
 303:tmk_core/protocol/lufa/lufa.c ****     /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 304:tmk_core/protocol/lufa/lufa.c ****         if (USB_IsInitialized) {
 305:tmk_core/protocol/lufa/lufa.c ****             USB_Disable();  // Disable all interrupts
 306:tmk_core/protocol/lufa/lufa.c ****         USB_Controller_Enable();
 307:tmk_core/protocol/lufa/lufa.c ****             USB_INT_Enable(USB_INT_VBUSTI);
 308:tmk_core/protocol/lufa/lufa.c ****         }
 309:tmk_core/protocol/lufa/lufa.c ****     */
 310:tmk_core/protocol/lufa/lufa.c **** }
 311:tmk_core/protocol/lufa/lufa.c **** 
 312:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 313:tmk_core/protocol/lufa/lufa.c ****  *
 314:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 315:tmk_core/protocol/lufa/lufa.c ****  */
 316:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Reset(void) { print("[R]"); }
 317:tmk_core/protocol/lufa/lufa.c **** 
 318:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 319:tmk_core/protocol/lufa/lufa.c ****  *
 320:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 321:tmk_core/protocol/lufa/lufa.c ****  */
 322:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_Suspend() {
 323:tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 324:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 325:tmk_core/protocol/lufa/lufa.c ****     sleep_led_enable();
 326:tmk_core/protocol/lufa/lufa.c **** #endif
 327:tmk_core/protocol/lufa/lufa.c **** }
 328:tmk_core/protocol/lufa/lufa.c **** 
 329:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Connect
 330:tmk_core/protocol/lufa/lufa.c ****  *
 331:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 332:tmk_core/protocol/lufa/lufa.c ****  */
 333:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_WakeUp() {
 334:tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 335:tmk_core/protocol/lufa/lufa.c ****     suspend_wakeup_init();
 336:tmk_core/protocol/lufa/lufa.c **** 
 337:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 338:tmk_core/protocol/lufa/lufa.c ****     sleep_led_disable();
 339:tmk_core/protocol/lufa/lufa.c ****     // NOTE: converters may not accept this
 340:tmk_core/protocol/lufa/lufa.c ****     led_set(host_keyboard_leds());
 341:tmk_core/protocol/lufa/lufa.c **** #endif
 342:tmk_core/protocol/lufa/lufa.c **** }
 343:tmk_core/protocol/lufa/lufa.c **** 
 344:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 345:tmk_core/protocol/lufa/lufa.c **** static bool console_flush = false;
 346:tmk_core/protocol/lufa/lufa.c **** #    define CONSOLE_FLUSH_SET(b)                                     \
 347:tmk_core/protocol/lufa/lufa.c ****         do {                                                         \
 348:tmk_core/protocol/lufa/lufa.c ****             ATOMIC_BLOCK(ATOMIC_RESTORESTATE) { console_flush = b; } \
 349:tmk_core/protocol/lufa/lufa.c ****         } while (0)
 350:tmk_core/protocol/lufa/lufa.c **** 
 351:tmk_core/protocol/lufa/lufa.c **** /** \brief Event USB Device Start Of Frame
 352:tmk_core/protocol/lufa/lufa.c ****  *
 353:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 354:tmk_core/protocol/lufa/lufa.c ****  * called every 1ms
 355:tmk_core/protocol/lufa/lufa.c ****  */
 356:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_StartOfFrame(void) {
 357:tmk_core/protocol/lufa/lufa.c ****     static uint8_t count;
 358:tmk_core/protocol/lufa/lufa.c ****     if (++count % 50) return;
 359:tmk_core/protocol/lufa/lufa.c ****     count = 0;
 360:tmk_core/protocol/lufa/lufa.c **** 
 361:tmk_core/protocol/lufa/lufa.c ****     if (!console_flush) return;
 362:tmk_core/protocol/lufa/lufa.c ****     Console_Task();
 363:tmk_core/protocol/lufa/lufa.c ****     console_flush = false;
 364:tmk_core/protocol/lufa/lufa.c **** }
 365:tmk_core/protocol/lufa/lufa.c **** 
 366:tmk_core/protocol/lufa/lufa.c **** #endif
 367:tmk_core/protocol/lufa/lufa.c **** 
 368:tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ConfigurationChanged event.
 369:tmk_core/protocol/lufa/lufa.c ****  *
 370:tmk_core/protocol/lufa/lufa.c ****  * This is fired when the host sets the current configuration of the USB device after enumeration.
 371:tmk_core/protocol/lufa/lufa.c ****  *
 372:tmk_core/protocol/lufa/lufa.c ****  * ATMega32u2 supports dual bank(ping-pong mode) only on endpoint 3 and 4,
 373:tmk_core/protocol/lufa/lufa.c ****  * it is safe to use single bank for all endpoints.
 374:tmk_core/protocol/lufa/lufa.c ****  */
 375:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ConfigurationChanged(void) {
 376:tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 377:tmk_core/protocol/lufa/lufa.c **** 
 378:tmk_core/protocol/lufa/lufa.c ****     /* Setup Keyboard HID Report Endpoints */
 379:tmk_core/protocol/lufa/lufa.c **** #ifndef KEYBOARD_SHARED_EP
 380:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(KEYBOARD_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN, KEYBOAR
 381:tmk_core/protocol/lufa/lufa.c **** #endif
 382:tmk_core/protocol/lufa/lufa.c **** 
 383:tmk_core/protocol/lufa/lufa.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 384:tmk_core/protocol/lufa/lufa.c ****     /* Setup Mouse HID Report Endpoint */
 385:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN, MOUSE_EPSI
 386:tmk_core/protocol/lufa/lufa.c **** #endif
 387:tmk_core/protocol/lufa/lufa.c **** 
 388:tmk_core/protocol/lufa/lufa.c **** #ifdef SHARED_EP_ENABLE
 389:tmk_core/protocol/lufa/lufa.c ****     /* Setup Shared HID Report Endpoint */
 390:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(SHARED_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN, SHARED_EP
 391:tmk_core/protocol/lufa/lufa.c **** #endif
 392:tmk_core/protocol/lufa/lufa.c **** 
 393:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
 394:tmk_core/protocol/lufa/lufa.c ****     /* Setup Raw HID Report Endpoints */
 395:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN, RAW_EPSIZE, 
 396:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(RAW_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT, RAW_EPSIZE
 397:tmk_core/protocol/lufa/lufa.c **** #endif
 398:tmk_core/protocol/lufa/lufa.c **** 
 399:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 400:tmk_core/protocol/lufa/lufa.c ****     /* Setup Console HID Report Endpoints */
 401:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN, CONSOLE_
 402:tmk_core/protocol/lufa/lufa.c **** #    if 0
 403:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= ENDPOINT_CONFIG(CONSOLE_OUT_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_OUT,
 404:tmk_core/protocol/lufa/lufa.c ****                                      CONSOLE_EPSIZE, ENDPOINT_BANK_SINGLE);
 405:tmk_core/protocol/lufa/lufa.c **** #    endif
 406:tmk_core/protocol/lufa/lufa.c **** #endif
 407:tmk_core/protocol/lufa/lufa.c **** 
 408:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 409:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_IN_EPADDR, EP_TYPE_BULK, MIDI_STREAM_EP
 410:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(MIDI_STREAM_OUT_EPADDR, EP_TYPE_BULK, MIDI_STREAM_E
 411:tmk_core/protocol/lufa/lufa.c **** #endif
 412:tmk_core/protocol/lufa/lufa.c **** 
 413:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 414:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_NOTIFICATION_EPADDR, EP_TYPE_INTERRUPT, CDC_NOT
 415:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_OUT_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_
 416:tmk_core/protocol/lufa/lufa.c ****     ConfigSuccess &= Endpoint_ConfigureEndpoint(CDC_IN_EPADDR, EP_TYPE_BULK, CDC_EPSIZE, ENDPOINT_B
 417:tmk_core/protocol/lufa/lufa.c **** #endif
 418:tmk_core/protocol/lufa/lufa.c **** }
 419:tmk_core/protocol/lufa/lufa.c **** 
 420:tmk_core/protocol/lufa/lufa.c **** /* FIXME: Expose this table in the docs somehow
 421:tmk_core/protocol/lufa/lufa.c **** Appendix G: HID Request Support Requirements
 422:tmk_core/protocol/lufa/lufa.c **** 
 423:tmk_core/protocol/lufa/lufa.c **** The following table enumerates the requests that need to be supported by various types of HID class
 424:tmk_core/protocol/lufa/lufa.c **** 
 425:tmk_core/protocol/lufa/lufa.c **** Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 426:tmk_core/protocol/lufa/lufa.c **** ------------------------------------------------------------------------------------------
 427:tmk_core/protocol/lufa/lufa.c **** Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 428:tmk_core/protocol/lufa/lufa.c **** Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 429:tmk_core/protocol/lufa/lufa.c **** Boot Keyboard   Required    Optional    Required    Required    Required    Required
 430:tmk_core/protocol/lufa/lufa.c **** Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 431:tmk_core/protocol/lufa/lufa.c **** Other Device    Required    Optional    Optional    Optional    Optional    Optional
 432:tmk_core/protocol/lufa/lufa.c **** */
 433:tmk_core/protocol/lufa/lufa.c **** /** \brief Event handler for the USB_ControlRequest event.
 434:tmk_core/protocol/lufa/lufa.c ****  *
 435:tmk_core/protocol/lufa/lufa.c ****  *  This is fired before passing along unhandled control requests to the library for processing int
 436:tmk_core/protocol/lufa/lufa.c ****  */
 437:tmk_core/protocol/lufa/lufa.c **** void EVENT_USB_Device_ControlRequest(void) {
 438:tmk_core/protocol/lufa/lufa.c ****     uint8_t *ReportData = NULL;
 439:tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 440:tmk_core/protocol/lufa/lufa.c **** 
 441:tmk_core/protocol/lufa/lufa.c ****     /* Handle HID Class specific requests */
 442:tmk_core/protocol/lufa/lufa.c ****     switch (USB_ControlRequest.bRequest) {
 443:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 444:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 445:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 446:tmk_core/protocol/lufa/lufa.c **** 
 447:tmk_core/protocol/lufa/lufa.c ****                 // Interface
 448:tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 449:tmk_core/protocol/lufa/lufa.c ****                     case KEYBOARD_INTERFACE:
 450:tmk_core/protocol/lufa/lufa.c ****                         // TODO: test/check
 451:tmk_core/protocol/lufa/lufa.c ****                         ReportData = (uint8_t *)&keyboard_report_sent;
 452:tmk_core/protocol/lufa/lufa.c ****                         ReportSize = sizeof(keyboard_report_sent);
 453:tmk_core/protocol/lufa/lufa.c ****                         break;
 454:tmk_core/protocol/lufa/lufa.c ****                 }
 455:tmk_core/protocol/lufa/lufa.c **** 
 456:tmk_core/protocol/lufa/lufa.c ****                 /* Write the report data to the control endpoint */
 457:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 458:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 459:tmk_core/protocol/lufa/lufa.c ****             }
 460:tmk_core/protocol/lufa/lufa.c **** 
 461:tmk_core/protocol/lufa/lufa.c ****             break;
 462:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetReport:
 463:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 464:tmk_core/protocol/lufa/lufa.c ****                 // Interface
 465:tmk_core/protocol/lufa/lufa.c ****                 switch (USB_ControlRequest.wIndex) {
 466:tmk_core/protocol/lufa/lufa.c ****                     case KEYBOARD_INTERFACE:
 467:tmk_core/protocol/lufa/lufa.c **** #if defined(SHARED_EP_ENABLE) && !defined(KEYBOARD_SHARED_EP)
 468:tmk_core/protocol/lufa/lufa.c ****                     case SHARED_INTERFACE:
 469:tmk_core/protocol/lufa/lufa.c **** #endif
 470:tmk_core/protocol/lufa/lufa.c ****                         Endpoint_ClearSETUP();
 471:tmk_core/protocol/lufa/lufa.c **** 
 472:tmk_core/protocol/lufa/lufa.c ****                         while (!(Endpoint_IsOUTReceived())) {
 473:tmk_core/protocol/lufa/lufa.c ****                             if (USB_DeviceState == DEVICE_STATE_Unattached) return;
 474:tmk_core/protocol/lufa/lufa.c ****                         }
 475:tmk_core/protocol/lufa/lufa.c **** 
 476:tmk_core/protocol/lufa/lufa.c ****                         if (Endpoint_BytesInEndpoint() == 2) {
 477:tmk_core/protocol/lufa/lufa.c ****                             uint8_t report_id = Endpoint_Read_8();
 478:tmk_core/protocol/lufa/lufa.c **** 
 479:tmk_core/protocol/lufa/lufa.c ****                             if (report_id == REPORT_ID_KEYBOARD || report_id == REPORT_ID_NKRO) {
 480:tmk_core/protocol/lufa/lufa.c ****                                 keyboard_led_stats = Endpoint_Read_8();
 481:tmk_core/protocol/lufa/lufa.c ****                             }
 482:tmk_core/protocol/lufa/lufa.c ****                         } else {
 483:tmk_core/protocol/lufa/lufa.c ****                             keyboard_led_stats = Endpoint_Read_8();
 484:tmk_core/protocol/lufa/lufa.c ****                         }
 485:tmk_core/protocol/lufa/lufa.c **** 
 486:tmk_core/protocol/lufa/lufa.c ****                         Endpoint_ClearOUT();
 487:tmk_core/protocol/lufa/lufa.c ****                         Endpoint_ClearStatusStage();
 488:tmk_core/protocol/lufa/lufa.c ****                         break;
 489:tmk_core/protocol/lufa/lufa.c ****                 }
 490:tmk_core/protocol/lufa/lufa.c ****             }
 491:tmk_core/protocol/lufa/lufa.c **** 
 492:tmk_core/protocol/lufa/lufa.c ****             break;
 493:tmk_core/protocol/lufa/lufa.c **** 
 494:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetProtocol:
 495:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 496:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 497:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 498:tmk_core/protocol/lufa/lufa.c ****                     while (!(Endpoint_IsINReady()))
 499:tmk_core/protocol/lufa/lufa.c ****                         ;
 500:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_Write_8(keyboard_protocol);
 501:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 502:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 503:tmk_core/protocol/lufa/lufa.c ****                 }
 504:tmk_core/protocol/lufa/lufa.c ****             }
 505:tmk_core/protocol/lufa/lufa.c **** 
 506:tmk_core/protocol/lufa/lufa.c ****             break;
 507:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetProtocol:
 508:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 509:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 510:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 511:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearStatusStage();
 512:tmk_core/protocol/lufa/lufa.c **** 
 513:tmk_core/protocol/lufa/lufa.c ****                     keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
 514:tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 515:tmk_core/protocol/lufa/lufa.c ****                 }
 516:tmk_core/protocol/lufa/lufa.c ****             }
 517:tmk_core/protocol/lufa/lufa.c **** 
 518:tmk_core/protocol/lufa/lufa.c ****             break;
 519:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_SetIdle:
 520:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_I
 521:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 522:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 523:tmk_core/protocol/lufa/lufa.c **** 
 524:tmk_core/protocol/lufa/lufa.c ****                 keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
 525:tmk_core/protocol/lufa/lufa.c ****             }
 526:tmk_core/protocol/lufa/lufa.c **** 
 527:tmk_core/protocol/lufa/lufa.c ****             break;
 528:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetIdle:
 529:tmk_core/protocol/lufa/lufa.c ****             if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_I
 530:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 531:tmk_core/protocol/lufa/lufa.c ****                 while (!(Endpoint_IsINReady()))
 532:tmk_core/protocol/lufa/lufa.c ****                     ;
 533:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_Write_8(keyboard_idle);
 534:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 535:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearStatusStage();
 536:tmk_core/protocol/lufa/lufa.c ****             }
 537:tmk_core/protocol/lufa/lufa.c **** 
 538:tmk_core/protocol/lufa/lufa.c ****             break;
 539:tmk_core/protocol/lufa/lufa.c ****     }
 540:tmk_core/protocol/lufa/lufa.c **** 
 541:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 542:tmk_core/protocol/lufa/lufa.c ****     CDC_Device_ProcessControlRequest(&cdc_device);
 543:tmk_core/protocol/lufa/lufa.c **** #endif
 544:tmk_core/protocol/lufa/lufa.c **** }
 545:tmk_core/protocol/lufa/lufa.c **** 
 546:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 547:tmk_core/protocol/lufa/lufa.c ****  * Host driver
 548:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 549:tmk_core/protocol/lufa/lufa.c **** /** \brief Keyboard LEDs
 550:tmk_core/protocol/lufa/lufa.c ****  *
 551:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 552:tmk_core/protocol/lufa/lufa.c ****  */
 553:tmk_core/protocol/lufa/lufa.c **** static uint8_t keyboard_leds(void) { return keyboard_led_stats; }
  15               		.loc 1 553 0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               		.loc 1 553 0
  22 0000 8091 0000 		lds r24,keyboard_led_stats
  23               	/* epilogue start */
  24 0004 0895      		ret
  25               		.cfi_endproc
  26               	.LFE129:
  28               		.section	.text.send_mouse,"ax",@progbits
  30               	send_mouse:
  31               	.LFB131:
 554:tmk_core/protocol/lufa/lufa.c **** 
 555:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Keyboard
 556:tmk_core/protocol/lufa/lufa.c ****  *
 557:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 558:tmk_core/protocol/lufa/lufa.c ****  */
 559:tmk_core/protocol/lufa/lufa.c **** static void send_keyboard(report_keyboard_t *report) {
 560:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 561:tmk_core/protocol/lufa/lufa.c ****     uint8_t where   = where_to_send();
 562:tmk_core/protocol/lufa/lufa.c **** 
 563:tmk_core/protocol/lufa/lufa.c **** #ifdef BLUETOOTH_ENABLE
 564:tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 565:tmk_core/protocol/lufa/lufa.c **** #    ifdef MODULE_ADAFRUIT_BLE
 566:tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_send_keys(report->mods, report->keys, sizeof(report->keys));
 567:tmk_core/protocol/lufa/lufa.c **** #    elif MODULE_RN42
 568:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 569:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x09);
 570:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x01);
 571:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->mods);
 572:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->reserved);
 573:tmk_core/protocol/lufa/lufa.c ****         for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 574:tmk_core/protocol/lufa/lufa.c ****             bluefruit_serial_send(report->keys[i]);
 575:tmk_core/protocol/lufa/lufa.c ****         }
 576:tmk_core/protocol/lufa/lufa.c **** #    else
 577:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 578:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->mods);
 579:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->reserved);
 580:tmk_core/protocol/lufa/lufa.c ****         for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 581:tmk_core/protocol/lufa/lufa.c ****             bluefruit_serial_send(report->keys[i]);
 582:tmk_core/protocol/lufa/lufa.c ****         }
 583:tmk_core/protocol/lufa/lufa.c **** #    endif
 584:tmk_core/protocol/lufa/lufa.c ****     }
 585:tmk_core/protocol/lufa/lufa.c **** #endif
 586:tmk_core/protocol/lufa/lufa.c **** 
 587:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 588:tmk_core/protocol/lufa/lufa.c ****         return;
 589:tmk_core/protocol/lufa/lufa.c ****     }
 590:tmk_core/protocol/lufa/lufa.c **** 
 591:tmk_core/protocol/lufa/lufa.c ****     /* Select the Keyboard Report Endpoint */
 592:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep   = KEYBOARD_IN_EPNUM;
 593:tmk_core/protocol/lufa/lufa.c ****     uint8_t size = KEYBOARD_REPORT_SIZE;
 594:tmk_core/protocol/lufa/lufa.c **** #ifdef NKRO_ENABLE
 595:tmk_core/protocol/lufa/lufa.c ****     if (keyboard_protocol && keymap_config.nkro) {
 596:tmk_core/protocol/lufa/lufa.c ****         ep   = SHARED_IN_EPNUM;
 597:tmk_core/protocol/lufa/lufa.c ****         size = sizeof(struct nkro_report);
 598:tmk_core/protocol/lufa/lufa.c ****     }
 599:tmk_core/protocol/lufa/lufa.c **** #endif
 600:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 601:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 602:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 603:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 604:tmk_core/protocol/lufa/lufa.c **** 
 605:tmk_core/protocol/lufa/lufa.c ****     /* If we're in Boot Protocol, don't send any report ID or other funky fields */
 606:tmk_core/protocol/lufa/lufa.c ****     if (!keyboard_protocol) {
 607:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(&report->mods, 8, NULL);
 608:tmk_core/protocol/lufa/lufa.c ****     } else {
 609:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_Stream_LE(report, size, NULL);
 610:tmk_core/protocol/lufa/lufa.c ****     }
 611:tmk_core/protocol/lufa/lufa.c **** 
 612:tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 613:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 614:tmk_core/protocol/lufa/lufa.c **** 
 615:tmk_core/protocol/lufa/lufa.c ****     keyboard_report_sent = *report;
 616:tmk_core/protocol/lufa/lufa.c **** }
 617:tmk_core/protocol/lufa/lufa.c **** 
 618:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Mouse
 619:tmk_core/protocol/lufa/lufa.c ****  *
 620:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 621:tmk_core/protocol/lufa/lufa.c ****  */
 622:tmk_core/protocol/lufa/lufa.c **** static void send_mouse(report_mouse_t *report) {
  32               		.loc 1 622 0
  33               		.cfi_startproc
  34               	.LVL0:
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 0 */
  38               	.L__stack_usage = 0
  39               	/* epilogue start */
 623:tmk_core/protocol/lufa/lufa.c **** #ifdef MOUSE_ENABLE
 624:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 625:tmk_core/protocol/lufa/lufa.c ****     uint8_t where   = where_to_send();
 626:tmk_core/protocol/lufa/lufa.c **** 
 627:tmk_core/protocol/lufa/lufa.c **** #    ifdef BLUETOOTH_ENABLE
 628:tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 629:tmk_core/protocol/lufa/lufa.c **** #        ifdef MODULE_ADAFRUIT_BLE
 630:tmk_core/protocol/lufa/lufa.c ****         // FIXME: mouse buttons
 631:tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_send_mouse_move(report->x, report->y, report->v, report->h, report->buttons);
 632:tmk_core/protocol/lufa/lufa.c **** #        else
 633:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 634:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 635:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 636:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->buttons);
 637:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->x);
 638:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->y);
 639:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->v);  // should try sending the wheel v here
 640:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(report->h);  // should try sending the wheel h here
 641:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 642:tmk_core/protocol/lufa/lufa.c **** #        endif
 643:tmk_core/protocol/lufa/lufa.c ****     }
 644:tmk_core/protocol/lufa/lufa.c **** #    endif
 645:tmk_core/protocol/lufa/lufa.c **** 
 646:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 647:tmk_core/protocol/lufa/lufa.c ****         return;
 648:tmk_core/protocol/lufa/lufa.c ****     }
 649:tmk_core/protocol/lufa/lufa.c **** 
 650:tmk_core/protocol/lufa/lufa.c ****     /* Select the Mouse Report Endpoint */
 651:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);
 652:tmk_core/protocol/lufa/lufa.c **** 
 653:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 654:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 655:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 656:tmk_core/protocol/lufa/lufa.c **** 
 657:tmk_core/protocol/lufa/lufa.c ****     /* Write Mouse Report Data */
 658:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
 659:tmk_core/protocol/lufa/lufa.c **** 
 660:tmk_core/protocol/lufa/lufa.c ****     /* Finalize the stream transfer to send the last packet */
 661:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 662:tmk_core/protocol/lufa/lufa.c **** #endif
 663:tmk_core/protocol/lufa/lufa.c **** }
  40               		.loc 1 663 0
  41 0000 0895      		ret
  42               		.cfi_endproc
  43               	.LFE131:
  45               		.section	.text.send_system,"ax",@progbits
  47               	send_system:
  48               	.LFB132:
 664:tmk_core/protocol/lufa/lufa.c **** 
 665:tmk_core/protocol/lufa/lufa.c **** /** \brief Send System
 666:tmk_core/protocol/lufa/lufa.c ****  *
 667:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 668:tmk_core/protocol/lufa/lufa.c ****  */
 669:tmk_core/protocol/lufa/lufa.c **** static void send_system(uint16_t data) {
  49               		.loc 1 669 0
  50               		.cfi_startproc
  51               	.LVL1:
  52               	/* prologue: function */
  53               	/* frame size = 0 */
  54               	/* stack size = 0 */
  55               	.L__stack_usage = 0
  56               	/* epilogue start */
 670:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 671:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 672:tmk_core/protocol/lufa/lufa.c **** 
 673:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured) return;
 674:tmk_core/protocol/lufa/lufa.c **** 
 675:tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {.report_id = REPORT_ID_SYSTEM, .usage = data - SYSTEM_POWER_DOWN + 1};
 676:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(SHARED_IN_EPNUM);
 677:tmk_core/protocol/lufa/lufa.c **** 
 678:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 679:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 680:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 681:tmk_core/protocol/lufa/lufa.c **** 
 682:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 683:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 684:tmk_core/protocol/lufa/lufa.c **** #endif
 685:tmk_core/protocol/lufa/lufa.c **** }
  57               		.loc 1 685 0
  58 0000 0895      		ret
  59               		.cfi_endproc
  60               	.LFE132:
  62               		.section	.text.send_keyboard,"ax",@progbits
  64               	send_keyboard:
  65               	.LFB130:
 559:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
  66               		.loc 1 559 0
  67               		.cfi_startproc
  68               	.LVL2:
  69 0000 CF93      		push r28
  70               	.LCFI0:
  71               		.cfi_def_cfa_offset 3
  72               		.cfi_offset 28, -2
  73 0002 DF93      		push r29
  74               	.LCFI1:
  75               		.cfi_def_cfa_offset 4
  76               		.cfi_offset 29, -3
  77               	/* prologue: function */
  78               	/* frame size = 0 */
  79               	/* stack size = 2 */
  80               	.L__stack_usage = 2
  81 0004 EC01      		movw r28,r24
  82               	.LVL3:
 561:tmk_core/protocol/lufa/lufa.c **** 
  83               		.loc 1 561 0
  84 0006 0E94 0000 		call where_to_send
  85               	.LVL4:
 587:tmk_core/protocol/lufa/lufa.c ****         return;
  86               		.loc 1 587 0
  87 000a 8230      		cpi r24,lo8(2)
  88 000c 01F0      		breq .L5
 587:tmk_core/protocol/lufa/lufa.c ****         return;
  89               		.loc 1 587 0 is_stmt 0 discriminator 1
  90 000e 8430      		cpi r24,lo8(4)
  91 0010 01F4      		brne .L4
  92               	.L5:
  93               	.LVL5:
  94               	.LBB70:
  95               	.LBB71:
  96               		.file 2 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2019.
   4:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2019  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaims all warranties with regard to this
  22:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
  93:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
  94:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
  95:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
  96:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
  97:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  98:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  99:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 100:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 101:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 104:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 105:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 107:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 108:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 109:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 110:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 111:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 112:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 114:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 115:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 116:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 117:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 118:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 119:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 120:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 121:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 122:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 123:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 124:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 125:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 126:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 127:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || defi
 128:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					/** Total number of endpoints (including the default control endpoint at address 0) which may
 129:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 130:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 131:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					 */
 132:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        7
 133:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 134:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					#define ENDPOINT_TOTAL_ENDPOINTS        5
 135:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 136:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 137:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 138:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 139:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 140:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 141:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 142:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 143:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 144:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 145:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 146:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 147:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 148:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 149:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 150:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 151:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 152:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 153:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 154:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 155:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 156:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 157:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 158:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 159:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 160:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 161:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 162:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 163:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 164:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 165:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint address with the given endpoint type, bank size and number
 166:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  banks. Once configured, the endpoint may be read from or written to, depending on its direct
 167:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 168:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address    Endpoint address to configure.
 169:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 170:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 171:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 172:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 173:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 174:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 175:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 176:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 177:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 178:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured.
 179:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 180:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \attention When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> 
 181:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *             ascending order, or bank corruption will occur.
 182:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 184:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        refer to the chosen microcontroller model's datasheet to determine the maximum bank si
 185:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 186:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 187:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 188:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 189:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 190:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 191:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 192:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 193:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 194:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 195:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 196:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 197:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 198:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 199:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 200:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
 201:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 202:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 203:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 204:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 205:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
 206:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 207:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
 208:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				  return false;
 209:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number,
 211:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 212:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | ((Banks > 1) ? (1 << EPBK0) : 0) | Endpoi
 213:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 214:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 215:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 216:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 217:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 218:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 219:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 220:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 221:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 222:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 223:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 224:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
 225:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 226:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 227:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 228:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 229:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 230:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 231:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 232:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 233:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines the currently selected endpoint's direction.
 234:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
 236:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 237:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_IN
 238:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointDirection(void)
 239:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 240:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 241:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 242:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 243:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 244:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint so that it can be restored after another endpoint has been
 245:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  manipulated.
 246:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 247:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 248:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 249:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 250:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 251:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 252:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 253:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 254:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 255:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 256:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 257:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 258:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 259:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint address.
 260:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 261:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint address to be indicated will opera
 262:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 263:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 264:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address Endpoint address to select.
 265:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 266:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 267:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
 268:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 269:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 270:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = (Address & ENDPOINT_EPNUM_MASK);
  97               		.loc 2 270 0 is_stmt 1
  98 0012 81E0      		ldi r24,lo8(1)
  99               	.LVL6:
 100 0014 8093 E900 		sts 233,r24
 101               	.LVL7:
 102 0018 8FEF      		ldi r24,lo8(-1)
 103               	.LVL8:
 104               	.L7:
 105               	.LBE71:
 106               	.LBE70:
 107               	.LBB72:
 108               	.LBB73:
 271:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 272:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 273:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 274:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 275:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 276:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 277:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
 278:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 279:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
 280:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
 281:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 282:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 283:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 284:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 285:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 286:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 287:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 288:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 289:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 290:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 291:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 292:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 293:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 294:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 295:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 296:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 297:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 298:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 299:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 300:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 301:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 302:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 303:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 304:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 305:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 306:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 307:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 308:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 309:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 310:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 311:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 312:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 313:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 314:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 315:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 316:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 317:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgment via the
 318:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 319:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 320:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 321:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 322:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 323:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 324:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 325:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 326:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 327:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 328:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 329:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 330:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 331:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 332:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 333:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 334:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 335:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 336:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 337:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 338:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 339:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 340:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 341:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 342:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 343:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 344:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 347:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 348:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 349:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 350:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 351:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 352:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 353:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 354:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 355:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 356:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 357:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 358:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 359:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 360:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 109               		.loc 2 360 0
 110 001a 9091 E800 		lds r25,232
 111 001e 8150      		subi r24,lo8(-(-1))
 112               	.LVL9:
 113               	.LBE73:
 114               	.LBE72:
 602:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 115               		.loc 1 602 0
 116 0020 95FD      		sbrc r25,5
 117 0022 00C0      		rjmp .L8
 118               	.LVL10:
 119               	.LBB74:
 120               	.LBB75:
 121               		.file 3 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 189:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #else
 190:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	{
 196:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		{
 200:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		}
 204:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		return;
 205:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	}
 206:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	else
 207:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #endif
 210:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** }
 211:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 212:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /**
 213:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 215:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 217:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 220:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 222:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 226:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 231:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 236:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    respectively.
 240:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 241:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \note
 242:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 243:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 253:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****  */
 254:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** void
 255:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** {
 257:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 265:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 268:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 271:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#else
 272:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		//round up by default
 273:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#endif
 275:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 276:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 122               		.loc 3 276 0
 123 0024 95ED      		ldi r25,lo8(-43)
 124 0026 9A95      	1:	dec r25
 125 0028 01F4      		brne 1b
 126 002a 0000      		nop
 127               	.LVL11:
 128               	.LBE75:
 129               	.LBE74:
 602:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 130               		.loc 1 602 0
 131 002c 8111      		cpse r24,__zero_reg__
 132 002e 00C0      		rjmp .L7
 133               	.LVL12:
 134               	.L8:
 135               	.LBB76:
 136               	.LBB77:
 137               		.loc 2 360 0
 138 0030 8091 E800 		lds r24,232
 139               	.LBE77:
 140               	.LBE76:
 603:tmk_core/protocol/lufa/lufa.c **** 
 141               		.loc 1 603 0
 142 0034 85FF      		sbrs r24,5
 143 0036 00C0      		rjmp .L4
 607:tmk_core/protocol/lufa/lufa.c ****     } else {
 144               		.loc 1 607 0
 145 0038 50E0      		ldi r21,0
 146 003a 40E0      		ldi r20,0
 147 003c 68E0      		ldi r22,lo8(8)
 148 003e 70E0      		ldi r23,0
 609:tmk_core/protocol/lufa/lufa.c ****     }
 149               		.loc 1 609 0
 150 0040 CE01      		movw r24,r28
 151 0042 0E94 0000 		call Endpoint_Write_Stream_LE
 152               	.LVL13:
 153               	.LBB78:
 154               	.LBB79:
 361:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 362:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 363:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 364:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 365:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 366:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 367:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 368:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 369:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 370:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 371:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 372:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 373:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 374:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 375:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 376:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 377:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 378:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 379:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 380:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 381:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 382:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 383:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 384:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 385:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 386:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 387:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 388:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Address  Address of the endpoint whose interrupt flag should be tested.
 389:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 390:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 391:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 392:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address) ATTR_WARN_UNUSED_RESUL
 393:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t Address)
 394:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 395:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << (Address & ENDPOINT_EPNUM_MASK))) ? true : fa
 396:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 397:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 398:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 399:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 400:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 401:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 402:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 403:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 404:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 405:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 406:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 408:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 409:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 410:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 411:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 415:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 416:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 417:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 418:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 419:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 420:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 421:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 422:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 423:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 424:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 425:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 426:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 427:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 428:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 429:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 430:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 431:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 432:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 433:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 434:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 435:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 436:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 438:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 439:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 440:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 441:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 442:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 443:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 445:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 446:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 447:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 448:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 449:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 451:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 453:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 454:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 155               		.loc 2 456 0
 156 0046 8091 E800 		lds r24,232
 157 004a 8E77      		andi r24,lo8(126)
 158 004c 8093 E800 		sts 232,r24
 159               	.LBE79:
 160               	.LBE78:
 615:tmk_core/protocol/lufa/lufa.c **** }
 161               		.loc 1 615 0
 162 0050 88E0      		ldi r24,lo8(8)
 163 0052 FE01      		movw r30,r28
 164 0054 A0E0      		ldi r26,lo8(keyboard_report_sent)
 165 0056 B0E0      		ldi r27,hi8(keyboard_report_sent)
 166               		0:
 167 0058 0190      		ld r0,Z+
 168 005a 0D92      		st X+,r0
 169 005c 8A95      		dec r24
 170 005e 01F4      		brne 0b
 171               	.LVL14:
 172               	.L4:
 173               	/* epilogue start */
 616:tmk_core/protocol/lufa/lufa.c **** 
 174               		.loc 1 616 0
 175 0060 DF91      		pop r29
 176 0062 CF91      		pop r28
 177               	.LVL15:
 178 0064 0895      		ret
 179               		.cfi_endproc
 180               	.LFE130:
 182               		.section	.text.send_consumer,"ax",@progbits
 184               	send_consumer:
 185               	.LFB142:
 186               		.cfi_startproc
 187               	/* prologue: function */
 188               	/* frame size = 0 */
 189               	/* stack size = 0 */
 190               	.L__stack_usage = 0
 191               	/* epilogue start */
 192 0000 0895      		ret
 193               		.cfi_endproc
 194               	.LFE142:
 196               		.section	.text.EVENT_USB_Device_Connect,"ax",@progbits
 197               	.global	EVENT_USB_Device_Connect
 199               	EVENT_USB_Device_Connect:
 200               	.LFB122:
 285:tmk_core/protocol/lufa/lufa.c ****     print("[C]");
 201               		.loc 1 285 0
 202               		.cfi_startproc
 203               	/* prologue: function */
 204               	/* frame size = 0 */
 205               	/* stack size = 0 */
 206               	.L__stack_usage = 0
 288:tmk_core/protocol/lufa/lufa.c ****         USB_Disable();
 207               		.loc 1 288 0
 208 0000 8091 0000 		lds r24,USB_IsInitialized
 209 0004 8111      		cpse r24,__zero_reg__
 210 0006 00C0      		rjmp .L26
 289:tmk_core/protocol/lufa/lufa.c ****         USB_Init();
 211               		.loc 1 289 0
 212 0008 0E94 0000 		call USB_Disable
 213               	.LVL16:
 290:tmk_core/protocol/lufa/lufa.c ****         USB_Device_EnableSOFEvents();
 214               		.loc 1 290 0
 215 000c 0E94 0000 		call USB_Init
 216               	.LVL17:
 217               	.LBB80:
 218               	.LBB81:
 219               	.LBB82:
 220               		.file 4 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h"
   1:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
   2:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****              LUFA Library
   3:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****      Copyright (C) Dean Camera, 2019.
   4:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   5:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****            www.lufa-lib.org
   7:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
   8:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
   9:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /*
  10:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Copyright 2019  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  12:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   all copies and that both that the copyright notice and this
  16:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   documentation, and that the name of the author not be used in
  18:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software without specific, written prior permission.
  20:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  21:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   The author disclaims all warranties with regard to this
  22:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   software, including all implied warranties of merchantability
  23:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   special, indirect or consequential damages or any damages
  25:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   arising out of or in connection with the use or performance of
  28:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****   this software.
  29:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** */
  30:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  31:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** /** \file
  32:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \brief USB Controller Interrupt definitions for the AVR8 microcontrollers.
  33:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  34:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  This file contains definitions required for the correct handling of low level USB service routi
  35:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  from the USB controller.
  36:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *
  37:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  38:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  39:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h ****  */
  40:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  41:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #ifndef __USBINTERRUPT_AVR8_H__
  42:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** #define __USBINTERRUPT_AVR8_H__
  43:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  44:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Includes: */
  45:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#include "../../../../Common/Common.h"
  46:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  47:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  48:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if defined(__cplusplus)
  49:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			extern "C" {
  50:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  51:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  52:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Preprocessor Checks: */
  53:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  54:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  55:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		#endif
  56:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  57:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	/* Private Interface - For use in library only: */
  58:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 	#if !defined(__DOXYGEN__)
  59:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Enums: */
  60:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			enum USB_Interrupts_t
  61:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  62:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR) || def
  63:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBUSTI  = 0,
  64:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  65:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_BOTH) || defined(__DOXYGEN__))
  66:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_IDTI    = 1,
  67:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  68:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_DEVICE) || defined(__DOXYGEN__))
  69:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_WAKEUPI = 2,
  70:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SUSPI   = 3,
  71:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_EORSTI  = 4,
  72:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SOFI    = 5,
  73:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RXSTPI  = 6,
  74:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  75:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#if (defined(USB_CAN_BE_HOST) || defined(__DOXYGEN__))
  76:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_HSOFI   = 7,
  77:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DCONNI  = 8,
  78:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_DDISCI  = 9,
  79:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_RSTI    = 10,
  80:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_BCERRI  = 11,
  81:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_VBERRI  = 12,
  82:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				USB_INT_SRPI    = 13,
  83:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				#endif
  84:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			};
  85:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 
  86:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 		/* Inline Functions: */
  87:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt) ATTR_ALWAYS_INLINE;
  88:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			static inline void USB_INT_Enable(const uint8_t Interrupt)
  89:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 			{
  90:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				switch (Interrupt)
  91:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 				{
  92:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
  93:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_VBUSTI:
  94:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << VBUSTE);
  95:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
  96:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
  97:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_BOTH)
  98:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_IDTI:
  99:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						USBCON |= (1 << IDTE);
 100:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 101:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#endif
 102:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					#if defined(USB_CAN_BE_DEVICE)
 103:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_WAKEUPI:
 104:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << WAKEUPE);
 105:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 106:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SUSPI:
 107:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SUSPE);
 108:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 109:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_EORSTI:
 110:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << EORSTE);
 111:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						break;
 112:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 					case USB_INT_SOFI:
 113:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/USBInterrupt_AVR8.h **** 						UDIEN  |= (1 << SOFE);
 221               		.loc 4 113 0
 222 0010 8091 E200 		lds r24,226
 223 0014 8460      		ori r24,lo8(4)
 224 0016 8093 E200 		sts 226,r24
 225               	.LVL18:
 226               	.L26:
 227               	/* epilogue start */
 228               	.LBE82:
 229               	.LBE81:
 230               	.LBE80:
 293:tmk_core/protocol/lufa/lufa.c **** 
 231               		.loc 1 293 0
 232 001a 0895      		ret
 233               		.cfi_endproc
 234               	.LFE122:
 236               		.section	.text.EVENT_USB_Device_Disconnect,"ax",@progbits
 237               	.global	EVENT_USB_Device_Disconnect
 239               	EVENT_USB_Device_Disconnect:
 240               	.LFB123:
 299:tmk_core/protocol/lufa/lufa.c ****     print("[D]");
 241               		.loc 1 299 0
 242               		.cfi_startproc
 243               	/* prologue: function */
 244               	/* frame size = 0 */
 245               	/* stack size = 0 */
 246               	.L__stack_usage = 0
 302:tmk_core/protocol/lufa/lufa.c ****     /* TODO: This doesn't work. After several plug in/outs can not be enumerated.
 247               		.loc 1 302 0
 248 0000 1092 0000 		sts USB_IsInitialized,__zero_reg__
 249               	/* epilogue start */
 310:tmk_core/protocol/lufa/lufa.c **** 
 250               		.loc 1 310 0
 251 0004 0895      		ret
 252               		.cfi_endproc
 253               	.LFE123:
 255               		.section	.text.EVENT_USB_Device_Reset,"ax",@progbits
 256               	.global	EVENT_USB_Device_Reset
 258               	EVENT_USB_Device_Reset:
 259               	.LFB140:
 260               		.cfi_startproc
 261               	/* prologue: function */
 262               	/* frame size = 0 */
 263               	/* stack size = 0 */
 264               	.L__stack_usage = 0
 265               	/* epilogue start */
 266 0000 0895      		ret
 267               		.cfi_endproc
 268               	.LFE140:
 270               		.section	.text.EVENT_USB_Device_Suspend,"ax",@progbits
 271               	.global	EVENT_USB_Device_Suspend
 273               	EVENT_USB_Device_Suspend:
 274               	.LFB125:
 322:tmk_core/protocol/lufa/lufa.c ****     print("[S]");
 275               		.loc 1 322 0
 276               		.cfi_startproc
 277               	/* prologue: function */
 278               	/* frame size = 0 */
 279               	/* stack size = 0 */
 280               	.L__stack_usage = 0
 281               	/* epilogue start */
 327:tmk_core/protocol/lufa/lufa.c **** 
 282               		.loc 1 327 0
 283 0000 0895      		ret
 284               		.cfi_endproc
 285               	.LFE125:
 287               		.section	.text.EVENT_USB_Device_WakeUp,"ax",@progbits
 288               	.global	EVENT_USB_Device_WakeUp
 290               	EVENT_USB_Device_WakeUp:
 291               	.LFB126:
 333:tmk_core/protocol/lufa/lufa.c ****     print("[W]");
 292               		.loc 1 333 0
 293               		.cfi_startproc
 294               	/* prologue: function */
 295               	/* frame size = 0 */
 296               	/* stack size = 0 */
 297               	.L__stack_usage = 0
 335:tmk_core/protocol/lufa/lufa.c **** 
 298               		.loc 1 335 0
 299 0000 0C94 0000 		jmp suspend_wakeup_init
 300               	.LVL19:
 301               		.cfi_endproc
 302               	.LFE126:
 304               		.section	.text.EVENT_USB_Device_ConfigurationChanged,"ax",@progbits
 305               	.global	EVENT_USB_Device_ConfigurationChanged
 307               	EVENT_USB_Device_ConfigurationChanged:
 308               	.LFB127:
 375:tmk_core/protocol/lufa/lufa.c ****     bool ConfigSuccess = true;
 309               		.loc 1 375 0
 310               		.cfi_startproc
 311               	/* prologue: function */
 312               	/* frame size = 0 */
 313               	/* stack size = 0 */
 314               	.L__stack_usage = 0
 315               	.LVL20:
 316               	.LBB83:
 317               	.LBB84:
 210:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 <<
 318               		.loc 2 210 0
 319 0000 42E0      		ldi r20,lo8(2)
 320 0002 61EC      		ldi r22,lo8(-63)
 321 0004 81E0      		ldi r24,lo8(1)
 322 0006 0C94 0000 		jmp Endpoint_ConfigureEndpoint_Prv
 323               	.LVL21:
 324               	.LBE84:
 325               	.LBE83:
 326               		.cfi_endproc
 327               	.LFE127:
 329               		.section	.text.EVENT_USB_Device_ControlRequest,"ax",@progbits
 330               	.global	EVENT_USB_Device_ControlRequest
 332               	EVENT_USB_Device_ControlRequest:
 333               	.LFB128:
 437:tmk_core/protocol/lufa/lufa.c ****     uint8_t *ReportData = NULL;
 334               		.loc 1 437 0
 335               		.cfi_startproc
 336               	/* prologue: function */
 337               	/* frame size = 0 */
 338               	/* stack size = 0 */
 339               	.L__stack_usage = 0
 340               	.LVL22:
 442:tmk_core/protocol/lufa/lufa.c ****         case HID_REQ_GetReport:
 341               		.loc 1 442 0
 342 0000 8091 0000 		lds r24,USB_ControlRequest+1
 343 0004 8330      		cpi r24,lo8(3)
 344 0006 01F4      		brne .+2
 345 0008 00C0      		rjmp .L35
 346 000a 00F4      		brsh .L36
 347 000c 8130      		cpi r24,lo8(1)
 348 000e 01F0      		breq .L37
 349 0010 8230      		cpi r24,lo8(2)
 350 0012 01F4      		brne .+2
 351 0014 00C0      		rjmp .L38
 352 0016 0895      		ret
 353               	.L36:
 354 0018 8A30      		cpi r24,lo8(10)
 355 001a 01F4      		brne .+2
 356 001c 00C0      		rjmp .L39
 357 001e 8B30      		cpi r24,lo8(11)
 358 0020 01F4      		brne .+2
 359 0022 00C0      		rjmp .L40
 360 0024 8930      		cpi r24,lo8(9)
 361 0026 01F0      		breq .+2
 362 0028 00C0      		rjmp .L33
 463:tmk_core/protocol/lufa/lufa.c ****                 // Interface
 363               		.loc 1 463 0
 364 002a 8091 0000 		lds r24,USB_ControlRequest
 365 002e 8132      		cpi r24,lo8(33)
 366 0030 01F0      		breq .+2
 367 0032 00C0      		rjmp .L33
 465:tmk_core/protocol/lufa/lufa.c ****                     case KEYBOARD_INTERFACE:
 368               		.loc 1 465 0
 369 0034 8091 0000 		lds r24,USB_ControlRequest+4
 370 0038 9091 0000 		lds r25,USB_ControlRequest+4+1
 371 003c 892B      		or r24,r25
 372 003e 01F0      		breq .+2
 373 0040 00C0      		rjmp .L33
 374               	.LBB85:
 375               	.LBB86:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 376               		.loc 2 444 0
 377 0042 8091 E800 		lds r24,232
 378 0046 877F      		andi r24,lo8(-9)
 379 0048 8093 E800 		sts 232,r24
 380               	.L47:
 381               	.LBE86:
 382               	.LBE85:
 383               	.LBB87:
 384               	.LBB88:
 419:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 385               		.loc 2 419 0
 386 004c 8091 E800 		lds r24,232
 387               	.LBE88:
 388               	.LBE87:
 472:tmk_core/protocol/lufa/lufa.c ****                             if (USB_DeviceState == DEVICE_STATE_Unattached) return;
 389               		.loc 1 472 0
 390 0050 82FF      		sbrs r24,2
 391 0052 00C0      		rjmp .L48
 392               	.LBB89:
 393               	.LBB90:
 227:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 394               		.loc 2 227 0
 395 0054 8091 F300 		lds r24,243
 396 0058 9091 F200 		lds r25,242
 397 005c 8927      		eor r24,r25
 398 005e 9827      		eor r25,r24
 399 0060 8927      		eor r24,r25
 400               	.LBE90:
 401               	.LBE89:
 476:tmk_core/protocol/lufa/lufa.c ****                             uint8_t report_id = Endpoint_Read_8();
 402               		.loc 1 476 0
 403 0062 0297      		sbiw r24,2
 404 0064 01F4      		brne .L49
 405               	.LBB91:
 406               	.LBB92:
 407               	.LBB93:
 457:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 458:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 459:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 460:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 461:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 462:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 463:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 464:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 465:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 466:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 467:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 468:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 469:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 470:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 472:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 473:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 474:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 475:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 476:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 477:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 478:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 479:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 480:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 481:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 482:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 483:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 484:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 485:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 487:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 489:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 490:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 492:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears the STALL condition on the currently selected endpoint.
 495:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 496:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 497:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 498:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
 499:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearStall(void)
 500:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 501:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQC);
 502:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 503:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 504:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is stalled, \c false otherwise.
 505:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 506:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 507:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 508:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
 509:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 510:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 511:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsStalled(void)
 512:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 513:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << STALLRQ)) ? true : false);
 514:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 515:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 516:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the data toggle of the currently selected endpoint. */
 517:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
 518:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetDataToggle(void)
 519:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 520:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << RSTDT);
 521:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 522:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 523:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sets the direction of the currently selected endpoint.
 524:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] DirectionMask  New endpoint direction, as a \c ENDPOINT_DIR_* mask.
 526:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask) ATTR_ALWAYS_INLINE
 528:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SetEndpointDirection(const uint8_t DirectionMask)
 529:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECFG0X = ((UECFG0X & ~(1 << EPDIR)) | (DirectionMask ? (1 << EPDIR) : 0));
 531:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 532:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 533:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Reads one byte from the currently selected endpoint's bank, for OUT direction endpoints.
 534:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 535:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 536:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 537:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
 538:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 539:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 540:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_Read_8(void)
 541:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 542:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEDATX;
 408               		.loc 2 542 0
 409 0066 8091 F100 		lds r24,241
 410               	.LBE93:
 411               	.LBE92:
 479:tmk_core/protocol/lufa/lufa.c ****                                 keyboard_led_stats = Endpoint_Read_8();
 412               		.loc 1 479 0
 413 006a 8B7F      		andi r24,lo8(-5)
 414 006c 8130      		cpi r24,lo8(1)
 415 006e 01F4      		brne .L50
 416               	.L49:
 417               	.LBE91:
 418               	.LBB94:
 419               	.LBB95:
 420               		.loc 2 542 0
 421 0070 8091 F100 		lds r24,241
 422               	.LBE95:
 423               	.LBE94:
 483:tmk_core/protocol/lufa/lufa.c ****                         }
 424               		.loc 1 483 0
 425 0074 8093 0000 		sts keyboard_led_stats,r24
 426               	.L50:
 427               	.LBB96:
 428               	.LBB97:
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 429               		.loc 2 471 0
 430 0078 8091 E800 		lds r24,232
 431 007c 8B77      		andi r24,lo8(123)
 432               	.L62:
 433               	.LBE97:
 434               	.LBE96:
 435               	.LBB98:
 436               	.LBB99:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 437               		.loc 2 456 0
 438 007e 8093 E800 		sts 232,r24
 439               	.LBE99:
 440               	.LBE98:
 535:tmk_core/protocol/lufa/lufa.c ****             }
 441               		.loc 1 535 0
 442 0082 0C94 0000 		jmp Endpoint_ClearStatusStage
 443               	.LVL23:
 444               	.L37:
 444:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 445               		.loc 1 444 0
 446 0086 8091 0000 		lds r24,USB_ControlRequest
 447 008a 813A      		cpi r24,lo8(-95)
 448 008c 01F4      		brne .L33
 449               	.LBB101:
 450               	.LBB102:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 451               		.loc 2 444 0
 452 008e 8091 E800 		lds r24,232
 453 0092 877F      		andi r24,lo8(-9)
 454 0094 8093 E800 		sts 232,r24
 455               	.LBE102:
 456               	.LBE101:
 448:tmk_core/protocol/lufa/lufa.c ****                     case KEYBOARD_INTERFACE:
 457               		.loc 1 448 0
 458 0098 8091 0000 		lds r24,USB_ControlRequest+4
 459 009c 9091 0000 		lds r25,USB_ControlRequest+4+1
 460 00a0 892B      		or r24,r25
 461 00a2 01F4      		brne .L61
 452:tmk_core/protocol/lufa/lufa.c ****                         break;
 462               		.loc 1 452 0
 463 00a4 68E0      		ldi r22,lo8(8)
 451:tmk_core/protocol/lufa/lufa.c ****                         ReportSize = sizeof(keyboard_report_sent);
 464               		.loc 1 451 0
 465 00a6 80E0      		ldi r24,lo8(keyboard_report_sent)
 466 00a8 90E0      		ldi r25,hi8(keyboard_report_sent)
 467               	.L43:
 468               	.LVL24:
 457:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearOUT();
 469               		.loc 1 457 0
 470 00aa 70E0      		ldi r23,0
 471 00ac 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 472               	.LVL25:
 473               	.LBB103:
 474               	.LBB104:
 471:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 475               		.loc 2 471 0
 476 00b0 8091 E800 		lds r24,232
 477 00b4 8B77      		andi r24,lo8(123)
 478 00b6 8093 E800 		sts 232,r24
 479 00ba 0895      		ret
 480               	.LVL26:
 481               	.L61:
 482               	.LBE104:
 483               	.LBE103:
 439:tmk_core/protocol/lufa/lufa.c **** 
 484               		.loc 1 439 0
 485 00bc 60E0      		ldi r22,0
 438:tmk_core/protocol/lufa/lufa.c ****     uint8_t  ReportSize = 0;
 486               		.loc 1 438 0
 487 00be 90E0      		ldi r25,0
 488 00c0 80E0      		ldi r24,0
 489 00c2 00C0      		rjmp .L43
 490               	.L48:
 473:tmk_core/protocol/lufa/lufa.c ****                         }
 491               		.loc 1 473 0
 492 00c4 8091 0000 		lds r24,USB_DeviceState
 493 00c8 8111      		cpse r24,__zero_reg__
 494 00ca 00C0      		rjmp .L47
 495               	.L33:
 496               	/* epilogue start */
 544:tmk_core/protocol/lufa/lufa.c **** 
 497               		.loc 1 544 0
 498 00cc 0895      		ret
 499               	.L35:
 495:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 500               		.loc 1 495 0
 501 00ce 8091 0000 		lds r24,USB_ControlRequest
 502 00d2 813A      		cpi r24,lo8(-95)
 503 00d4 01F4      		brne .L33
 496:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 504               		.loc 1 496 0
 505 00d6 8091 0000 		lds r24,USB_ControlRequest+4
 506 00da 9091 0000 		lds r25,USB_ControlRequest+4+1
 507 00de 892B      		or r24,r25
 508 00e0 01F4      		brne .L33
 509               	.LBB105:
 510               	.LBB106:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 511               		.loc 2 444 0
 512 00e2 8091 E800 		lds r24,232
 513 00e6 877F      		andi r24,lo8(-9)
 514 00e8 8093 E800 		sts 232,r24
 515               	.L51:
 516               	.LBE106:
 517               	.LBE105:
 518               	.LBB107:
 519               	.LBB108:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 520               		.loc 2 407 0 discriminator 1
 521 00ec 8091 E800 		lds r24,232
 522               	.LBE108:
 523               	.LBE107:
 498:tmk_core/protocol/lufa/lufa.c ****                         ;
 524               		.loc 1 498 0 discriminator 1
 525 00f0 80FF      		sbrs r24,0
 526 00f2 00C0      		rjmp .L51
 500:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearIN();
 527               		.loc 1 500 0
 528 00f4 8091 0000 		lds r24,keyboard_protocol
 529               	.LVL27:
 530               	.L63:
 531               	.LBB109:
 532               	.LBB110:
 543:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 544:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 545:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Writes one byte to the currently selected endpoint's bank, for IN direction endpoints.
 546:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 547:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPrimitiveRW_AVR8
 548:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 549:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
 550:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 551:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
 552:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_Write_8(const uint8_t Data)
 553:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 554:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEDATX = Data;
 533               		.loc 2 554 0
 534 00f8 8093 F100 		sts 241,r24
 535               	.LVL28:
 536               	.LBE110:
 537               	.LBE109:
 538               	.LBB111:
 539               	.LBB100:
 456:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 540               		.loc 2 456 0
 541 00fc 8091 E800 		lds r24,232
 542 0100 8E77      		andi r24,lo8(126)
 543 0102 00C0      		rjmp .L62
 544               	.L40:
 545               	.LBE100:
 546               	.LBE111:
 508:tmk_core/protocol/lufa/lufa.c ****                 if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
 547               		.loc 1 508 0
 548 0104 8091 0000 		lds r24,USB_ControlRequest
 549 0108 8132      		cpi r24,lo8(33)
 550 010a 01F4      		brne .L33
 509:tmk_core/protocol/lufa/lufa.c ****                     Endpoint_ClearSETUP();
 551               		.loc 1 509 0
 552 010c 8091 0000 		lds r24,USB_ControlRequest+4
 553 0110 9091 0000 		lds r25,USB_ControlRequest+4+1
 554 0114 892B      		or r24,r25
 555 0116 01F4      		brne .L33
 556               	.LBB112:
 557               	.LBB113:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 558               		.loc 2 444 0
 559 0118 8091 E800 		lds r24,232
 560 011c 877F      		andi r24,lo8(-9)
 561 011e 8093 E800 		sts 232,r24
 562               	.LBE113:
 563               	.LBE112:
 511:tmk_core/protocol/lufa/lufa.c **** 
 564               		.loc 1 511 0
 565 0122 0E94 0000 		call Endpoint_ClearStatusStage
 566               	.LVL29:
 513:tmk_core/protocol/lufa/lufa.c ****                     clear_keyboard();
 567               		.loc 1 513 0
 568 0126 8091 0000 		lds r24,USB_ControlRequest+2
 569 012a 8093 0000 		sts keyboard_protocol,r24
 514:tmk_core/protocol/lufa/lufa.c ****                 }
 570               		.loc 1 514 0
 571 012e 0C94 0000 		jmp clear_keyboard
 572               	.LVL30:
 573               	.L39:
 520:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 574               		.loc 1 520 0
 575 0132 8091 0000 		lds r24,USB_ControlRequest
 576 0136 8132      		cpi r24,lo8(33)
 577 0138 01F4      		brne .L33
 578               	.LBB114:
 579               	.LBB115:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 580               		.loc 2 444 0
 581 013a 8091 E800 		lds r24,232
 582 013e 877F      		andi r24,lo8(-9)
 583 0140 8093 E800 		sts 232,r24
 584               	.LBE115:
 585               	.LBE114:
 522:tmk_core/protocol/lufa/lufa.c **** 
 586               		.loc 1 522 0
 587 0144 0E94 0000 		call Endpoint_ClearStatusStage
 588               	.LVL31:
 524:tmk_core/protocol/lufa/lufa.c ****             }
 589               		.loc 1 524 0
 590 0148 8091 0000 		lds r24,USB_ControlRequest+3
 591 014c 8093 0000 		sts keyboard_idle,r24
 592 0150 0895      		ret
 593               	.L38:
 529:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearSETUP();
 594               		.loc 1 529 0
 595 0152 8091 0000 		lds r24,USB_ControlRequest
 596 0156 813A      		cpi r24,lo8(-95)
 597 0158 01F0      		breq .+2
 598 015a 00C0      		rjmp .L33
 599               	.LBB116:
 600               	.LBB117:
 444:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 601               		.loc 2 444 0
 602 015c 8091 E800 		lds r24,232
 603 0160 877F      		andi r24,lo8(-9)
 604 0162 8093 E800 		sts 232,r24
 605               	.L52:
 606               	.LBE117:
 607               	.LBE116:
 608               	.LBB118:
 609               	.LBB119:
 407:lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 610               		.loc 2 407 0 discriminator 1
 611 0166 8091 E800 		lds r24,232
 612               	.LBE119:
 613               	.LBE118:
 531:tmk_core/protocol/lufa/lufa.c ****                     ;
 614               		.loc 1 531 0 discriminator 1
 615 016a 80FF      		sbrs r24,0
 616 016c 00C0      		rjmp .L52
 533:tmk_core/protocol/lufa/lufa.c ****                 Endpoint_ClearIN();
 617               		.loc 1 533 0
 618 016e 8091 0000 		lds r24,keyboard_idle
 619 0172 00C0      		rjmp .L63
 620               		.cfi_endproc
 621               	.LFE128:
 623               		.section	.text.sendchar,"ax",@progbits
 624               	.global	sendchar
 626               	sendchar:
 627               	.LFB134:
 686:tmk_core/protocol/lufa/lufa.c **** 
 687:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Consumer
 688:tmk_core/protocol/lufa/lufa.c ****  *
 689:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 690:tmk_core/protocol/lufa/lufa.c ****  */
 691:tmk_core/protocol/lufa/lufa.c **** static void send_consumer(uint16_t data) {
 692:tmk_core/protocol/lufa/lufa.c **** #ifdef EXTRAKEY_ENABLE
 693:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 694:tmk_core/protocol/lufa/lufa.c ****     uint8_t where   = where_to_send();
 695:tmk_core/protocol/lufa/lufa.c **** 
 696:tmk_core/protocol/lufa/lufa.c **** #    ifdef BLUETOOTH_ENABLE
 697:tmk_core/protocol/lufa/lufa.c ****     if (where == OUTPUT_BLUETOOTH || where == OUTPUT_USB_AND_BT) {
 698:tmk_core/protocol/lufa/lufa.c **** #        ifdef MODULE_ADAFRUIT_BLE
 699:tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_send_consumer_key(data, 0);
 700:tmk_core/protocol/lufa/lufa.c **** #        elif MODULE_RN42
 701:tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 702:tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 703:tmk_core/protocol/lufa/lufa.c ****         last_data       = data;
 704:tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2RN42(data);
 705:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 706:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 707:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x03);
 708:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap & 0xFF);
 709:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap >> 8) & 0xFF);
 710:tmk_core/protocol/lufa/lufa.c **** #        else
 711:tmk_core/protocol/lufa/lufa.c ****         static uint16_t last_data = 0;
 712:tmk_core/protocol/lufa/lufa.c ****         if (data == last_data) return;
 713:tmk_core/protocol/lufa/lufa.c ****         last_data       = data;
 714:tmk_core/protocol/lufa/lufa.c ****         uint16_t bitmap = CONSUMER2BLUEFRUIT(data);
 715:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0xFD);
 716:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 717:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x02);
 718:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send((bitmap >> 8) & 0xFF);
 719:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(bitmap & 0xFF);
 720:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 721:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 722:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 723:tmk_core/protocol/lufa/lufa.c ****         bluefruit_serial_send(0x00);
 724:tmk_core/protocol/lufa/lufa.c **** #        endif
 725:tmk_core/protocol/lufa/lufa.c ****     }
 726:tmk_core/protocol/lufa/lufa.c **** #    endif
 727:tmk_core/protocol/lufa/lufa.c **** 
 728:tmk_core/protocol/lufa/lufa.c ****     if (where != OUTPUT_USB && where != OUTPUT_USB_AND_BT) {
 729:tmk_core/protocol/lufa/lufa.c ****         return;
 730:tmk_core/protocol/lufa/lufa.c ****     }
 731:tmk_core/protocol/lufa/lufa.c **** 
 732:tmk_core/protocol/lufa/lufa.c ****     report_extra_t r = {.report_id = REPORT_ID_CONSUMER, .usage = data};
 733:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(SHARED_IN_EPNUM);
 734:tmk_core/protocol/lufa/lufa.c **** 
 735:tmk_core/protocol/lufa/lufa.c ****     /* Check if write ready for a polling interval around 10ms */
 736:tmk_core/protocol/lufa/lufa.c ****     while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 737:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) return;
 738:tmk_core/protocol/lufa/lufa.c **** 
 739:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
 740:tmk_core/protocol/lufa/lufa.c ****     Endpoint_ClearIN();
 741:tmk_core/protocol/lufa/lufa.c **** #endif
 742:tmk_core/protocol/lufa/lufa.c **** }
 743:tmk_core/protocol/lufa/lufa.c **** 
 744:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 745:tmk_core/protocol/lufa/lufa.c ****  * sendchar
 746:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 747:tmk_core/protocol/lufa/lufa.c **** #ifdef CONSOLE_ENABLE
 748:tmk_core/protocol/lufa/lufa.c **** #    define SEND_TIMEOUT 5
 749:tmk_core/protocol/lufa/lufa.c **** /** \brief Send Char
 750:tmk_core/protocol/lufa/lufa.c ****  *
 751:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 752:tmk_core/protocol/lufa/lufa.c ****  */
 753:tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c) {
 754:tmk_core/protocol/lufa/lufa.c ****     // Not wait once timeouted.
 755:tmk_core/protocol/lufa/lufa.c ****     // Because sendchar() is called so many times, waiting each call causes big lag.
 756:tmk_core/protocol/lufa/lufa.c ****     static bool timeouted = false;
 757:tmk_core/protocol/lufa/lufa.c **** 
 758:tmk_core/protocol/lufa/lufa.c ****     // prevents Console_Task() from running during sendchar() runs.
 759:tmk_core/protocol/lufa/lufa.c ****     // or char will be lost. These two function is mutually exclusive.
 760:tmk_core/protocol/lufa/lufa.c ****     CONSOLE_FLUSH_SET(false);
 761:tmk_core/protocol/lufa/lufa.c **** 
 762:tmk_core/protocol/lufa/lufa.c ****     if (USB_DeviceState != DEVICE_STATE_Configured) return -1;
 763:tmk_core/protocol/lufa/lufa.c **** 
 764:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep = Endpoint_GetCurrentEndpoint();
 765:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
 766:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 767:tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 768:tmk_core/protocol/lufa/lufa.c ****     }
 769:tmk_core/protocol/lufa/lufa.c **** 
 770:tmk_core/protocol/lufa/lufa.c ****     if (timeouted && !Endpoint_IsReadWriteAllowed()) {
 771:tmk_core/protocol/lufa/lufa.c ****         goto ERROR_EXIT;
 772:tmk_core/protocol/lufa/lufa.c ****     }
 773:tmk_core/protocol/lufa/lufa.c **** 
 774:tmk_core/protocol/lufa/lufa.c ****     timeouted = false;
 775:tmk_core/protocol/lufa/lufa.c **** 
 776:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = SEND_TIMEOUT;
 777:tmk_core/protocol/lufa/lufa.c ****     while (!Endpoint_IsReadWriteAllowed()) {
 778:tmk_core/protocol/lufa/lufa.c ****         if (USB_DeviceState != DEVICE_STATE_Configured) {
 779:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 780:tmk_core/protocol/lufa/lufa.c ****         }
 781:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsStalled()) {
 782:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 783:tmk_core/protocol/lufa/lufa.c ****         }
 784:tmk_core/protocol/lufa/lufa.c ****         if (!(timeout--)) {
 785:tmk_core/protocol/lufa/lufa.c ****             timeouted = true;
 786:tmk_core/protocol/lufa/lufa.c ****             goto ERROR_EXIT;
 787:tmk_core/protocol/lufa/lufa.c ****         }
 788:tmk_core/protocol/lufa/lufa.c ****         _delay_ms(1);
 789:tmk_core/protocol/lufa/lufa.c ****     }
 790:tmk_core/protocol/lufa/lufa.c **** 
 791:tmk_core/protocol/lufa/lufa.c ****     Endpoint_Write_8(c);
 792:tmk_core/protocol/lufa/lufa.c **** 
 793:tmk_core/protocol/lufa/lufa.c ****     // send when bank is full
 794:tmk_core/protocol/lufa/lufa.c ****     if (!Endpoint_IsReadWriteAllowed()) {
 795:tmk_core/protocol/lufa/lufa.c ****         while (!(Endpoint_IsINReady()))
 796:tmk_core/protocol/lufa/lufa.c ****             ;
 797:tmk_core/protocol/lufa/lufa.c ****         Endpoint_ClearIN();
 798:tmk_core/protocol/lufa/lufa.c ****     } else {
 799:tmk_core/protocol/lufa/lufa.c ****         CONSOLE_FLUSH_SET(true);
 800:tmk_core/protocol/lufa/lufa.c ****     }
 801:tmk_core/protocol/lufa/lufa.c **** 
 802:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 803:tmk_core/protocol/lufa/lufa.c ****     return 0;
 804:tmk_core/protocol/lufa/lufa.c **** ERROR_EXIT:
 805:tmk_core/protocol/lufa/lufa.c ****     Endpoint_SelectEndpoint(ep);
 806:tmk_core/protocol/lufa/lufa.c ****     return -1;
 807:tmk_core/protocol/lufa/lufa.c **** }
 808:tmk_core/protocol/lufa/lufa.c **** #else
 809:tmk_core/protocol/lufa/lufa.c **** int8_t sendchar(uint8_t c) { return 0; }
 628               		.loc 1 809 0
 629               		.cfi_startproc
 630               	.LVL32:
 631               	/* prologue: function */
 632               	/* frame size = 0 */
 633               	/* stack size = 0 */
 634               	.L__stack_usage = 0
 635               		.loc 1 809 0
 636 0000 80E0      		ldi r24,0
 637               	.LVL33:
 638               	/* epilogue start */
 639 0002 0895      		ret
 640               		.cfi_endproc
 641               	.LFE134:
 643               		.section	.text.startup.main,"ax",@progbits
 644               		.weak	main
 646               	main:
 647               	.LFB137:
 810:tmk_core/protocol/lufa/lufa.c **** #endif
 811:tmk_core/protocol/lufa/lufa.c **** 
 812:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 813:tmk_core/protocol/lufa/lufa.c ****  * MIDI
 814:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 815:tmk_core/protocol/lufa/lufa.c **** 
 816:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 817:tmk_core/protocol/lufa/lufa.c **** USB_ClassInfo_MIDI_Device_t USB_MIDI_Interface = {
 818:tmk_core/protocol/lufa/lufa.c ****     .Config =
 819:tmk_core/protocol/lufa/lufa.c ****         {
 820:tmk_core/protocol/lufa/lufa.c ****             .StreamingInterfaceNumber = AS_INTERFACE,
 821:tmk_core/protocol/lufa/lufa.c ****             .DataINEndpoint =
 822:tmk_core/protocol/lufa/lufa.c ****                 {
 823:tmk_core/protocol/lufa/lufa.c ****                     .Address = MIDI_STREAM_IN_EPADDR,
 824:tmk_core/protocol/lufa/lufa.c ****                     .Size    = MIDI_STREAM_EPSIZE,
 825:tmk_core/protocol/lufa/lufa.c ****                     .Banks   = 1,
 826:tmk_core/protocol/lufa/lufa.c ****                 },
 827:tmk_core/protocol/lufa/lufa.c ****             .DataOUTEndpoint =
 828:tmk_core/protocol/lufa/lufa.c ****                 {
 829:tmk_core/protocol/lufa/lufa.c ****                     .Address = MIDI_STREAM_OUT_EPADDR,
 830:tmk_core/protocol/lufa/lufa.c ****                     .Size    = MIDI_STREAM_EPSIZE,
 831:tmk_core/protocol/lufa/lufa.c ****                     .Banks   = 1,
 832:tmk_core/protocol/lufa/lufa.c ****                 },
 833:tmk_core/protocol/lufa/lufa.c ****         },
 834:tmk_core/protocol/lufa/lufa.c **** };
 835:tmk_core/protocol/lufa/lufa.c **** 
 836:tmk_core/protocol/lufa/lufa.c **** void send_midi_packet(MIDI_EventPacket_t *event) { MIDI_Device_SendEventPacket(&USB_MIDI_Interface,
 837:tmk_core/protocol/lufa/lufa.c **** 
 838:tmk_core/protocol/lufa/lufa.c **** bool recv_midi_packet(MIDI_EventPacket_t *const event) { return MIDI_Device_ReceiveEventPacket(&USB
 839:tmk_core/protocol/lufa/lufa.c **** 
 840:tmk_core/protocol/lufa/lufa.c **** #endif
 841:tmk_core/protocol/lufa/lufa.c **** 
 842:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 843:tmk_core/protocol/lufa/lufa.c ****  * VIRTUAL SERIAL
 844:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 845:tmk_core/protocol/lufa/lufa.c **** 
 846:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 847:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Init
 848:tmk_core/protocol/lufa/lufa.c ****  *
 849:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 850:tmk_core/protocol/lufa/lufa.c ****  */
 851:tmk_core/protocol/lufa/lufa.c **** void virtser_init(void) {
 852:tmk_core/protocol/lufa/lufa.c ****     cdc_device.State.ControlLineStates.DeviceToHost = CDC_CONTROL_LINE_IN_DSR;
 853:tmk_core/protocol/lufa/lufa.c ****     CDC_Device_SendControlLineStateChange(&cdc_device);
 854:tmk_core/protocol/lufa/lufa.c **** }
 855:tmk_core/protocol/lufa/lufa.c **** 
 856:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Receive
 857:tmk_core/protocol/lufa/lufa.c ****  *
 858:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 859:tmk_core/protocol/lufa/lufa.c ****  */
 860:tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c) __attribute__((weak));
 861:tmk_core/protocol/lufa/lufa.c **** void virtser_recv(uint8_t c) {
 862:tmk_core/protocol/lufa/lufa.c ****     // Ignore by default
 863:tmk_core/protocol/lufa/lufa.c **** }
 864:tmk_core/protocol/lufa/lufa.c **** 
 865:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Task
 866:tmk_core/protocol/lufa/lufa.c ****  *
 867:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 868:tmk_core/protocol/lufa/lufa.c ****  */
 869:tmk_core/protocol/lufa/lufa.c **** void virtser_task(void) {
 870:tmk_core/protocol/lufa/lufa.c ****     uint16_t count = CDC_Device_BytesReceived(&cdc_device);
 871:tmk_core/protocol/lufa/lufa.c ****     uint8_t  ch;
 872:tmk_core/protocol/lufa/lufa.c ****     if (count) {
 873:tmk_core/protocol/lufa/lufa.c ****         ch = CDC_Device_ReceiveByte(&cdc_device);
 874:tmk_core/protocol/lufa/lufa.c ****         virtser_recv(ch);
 875:tmk_core/protocol/lufa/lufa.c ****     }
 876:tmk_core/protocol/lufa/lufa.c **** }
 877:tmk_core/protocol/lufa/lufa.c **** /** \brief Virtual Serial Send
 878:tmk_core/protocol/lufa/lufa.c ****  *
 879:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 880:tmk_core/protocol/lufa/lufa.c ****  */
 881:tmk_core/protocol/lufa/lufa.c **** void virtser_send(const uint8_t byte) {
 882:tmk_core/protocol/lufa/lufa.c ****     uint8_t timeout = 255;
 883:tmk_core/protocol/lufa/lufa.c ****     uint8_t ep      = Endpoint_GetCurrentEndpoint();
 884:tmk_core/protocol/lufa/lufa.c **** 
 885:tmk_core/protocol/lufa/lufa.c ****     if (cdc_device.State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR) {
 886:tmk_core/protocol/lufa/lufa.c ****         /* IN packet */
 887:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(cdc_device.Config.DataINEndpoint.Address);
 888:tmk_core/protocol/lufa/lufa.c **** 
 889:tmk_core/protocol/lufa/lufa.c ****         if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
 890:tmk_core/protocol/lufa/lufa.c ****             Endpoint_SelectEndpoint(ep);
 891:tmk_core/protocol/lufa/lufa.c ****             return;
 892:tmk_core/protocol/lufa/lufa.c ****         }
 893:tmk_core/protocol/lufa/lufa.c **** 
 894:tmk_core/protocol/lufa/lufa.c ****         while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
 895:tmk_core/protocol/lufa/lufa.c **** 
 896:tmk_core/protocol/lufa/lufa.c ****         Endpoint_Write_8(byte);
 897:tmk_core/protocol/lufa/lufa.c ****         CDC_Device_Flush(&cdc_device);
 898:tmk_core/protocol/lufa/lufa.c **** 
 899:tmk_core/protocol/lufa/lufa.c ****         if (Endpoint_IsINReady()) {
 900:tmk_core/protocol/lufa/lufa.c ****             Endpoint_ClearIN();
 901:tmk_core/protocol/lufa/lufa.c ****         }
 902:tmk_core/protocol/lufa/lufa.c **** 
 903:tmk_core/protocol/lufa/lufa.c ****         Endpoint_SelectEndpoint(ep);
 904:tmk_core/protocol/lufa/lufa.c ****     }
 905:tmk_core/protocol/lufa/lufa.c **** }
 906:tmk_core/protocol/lufa/lufa.c **** #endif
 907:tmk_core/protocol/lufa/lufa.c **** 
 908:tmk_core/protocol/lufa/lufa.c **** /*******************************************************************************
 909:tmk_core/protocol/lufa/lufa.c ****  * main
 910:tmk_core/protocol/lufa/lufa.c ****  ******************************************************************************/
 911:tmk_core/protocol/lufa/lufa.c **** /** \brief Setup MCU
 912:tmk_core/protocol/lufa/lufa.c ****  *
 913:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 914:tmk_core/protocol/lufa/lufa.c ****  */
 915:tmk_core/protocol/lufa/lufa.c **** static void setup_mcu(void) {
 916:tmk_core/protocol/lufa/lufa.c ****     /* Disable watchdog if enabled by bootloader/fuses */
 917:tmk_core/protocol/lufa/lufa.c ****     MCUSR &= ~(1 << WDRF);
 918:tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 919:tmk_core/protocol/lufa/lufa.c **** 
 920:tmk_core/protocol/lufa/lufa.c ****     /* Disable clock division */
 921:tmk_core/protocol/lufa/lufa.c ****     // clock_prescale_set(clock_div_1);
 922:tmk_core/protocol/lufa/lufa.c **** 
 923:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (1 << CLKPCE);
 924:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 925:tmk_core/protocol/lufa/lufa.c **** }
 926:tmk_core/protocol/lufa/lufa.c **** 
 927:tmk_core/protocol/lufa/lufa.c **** /** \brief Setup USB
 928:tmk_core/protocol/lufa/lufa.c ****  *
 929:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 930:tmk_core/protocol/lufa/lufa.c ****  */
 931:tmk_core/protocol/lufa/lufa.c **** static void setup_usb(void) {
 932:tmk_core/protocol/lufa/lufa.c ****     // Leonardo needs. Without this USB device is not recognized.
 933:tmk_core/protocol/lufa/lufa.c ****     USB_Disable();
 934:tmk_core/protocol/lufa/lufa.c **** 
 935:tmk_core/protocol/lufa/lufa.c ****     USB_Init();
 936:tmk_core/protocol/lufa/lufa.c **** 
 937:tmk_core/protocol/lufa/lufa.c ****     // for Console_Task
 938:tmk_core/protocol/lufa/lufa.c ****     USB_Device_EnableSOFEvents();
 939:tmk_core/protocol/lufa/lufa.c ****     print_set_sendchar(sendchar);
 940:tmk_core/protocol/lufa/lufa.c **** }
 941:tmk_core/protocol/lufa/lufa.c **** 
 942:tmk_core/protocol/lufa/lufa.c **** /** \brief Main
 943:tmk_core/protocol/lufa/lufa.c ****  *
 944:tmk_core/protocol/lufa/lufa.c ****  * FIXME: Needs doc
 945:tmk_core/protocol/lufa/lufa.c ****  */
 946:tmk_core/protocol/lufa/lufa.c **** int main(void) __attribute__((weak));
 947:tmk_core/protocol/lufa/lufa.c **** int main(void) {
 648               		.loc 1 947 0
 649               		.cfi_startproc
 650               	/* prologue: function */
 651               	/* frame size = 0 */
 652               	/* stack size = 0 */
 653               	.L__stack_usage = 0
 654               	.LBB129:
 655               	.LBB130:
 917:tmk_core/protocol/lufa/lufa.c ****     wdt_disable();
 656               		.loc 1 917 0
 657 0000 84B7      		in r24,0x34
 658 0002 877F      		andi r24,lo8(-9)
 659 0004 84BF      		out 0x34,r24
 660               	.LBB131:
 661               	.LBB132:
 662               		.file 5 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h"
   1:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
   5:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
   8:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
  11:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****      distribution.
  15:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
  16:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
  20:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
  32:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** /* $Id: wdt.h 2503 2016-02-07 22:59:47Z joerg_wunsch $ */
  33:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
  34:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** /*
  35:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****  */
  37:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
  38:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
  41:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
  44:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** /** \file */
  45:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
  48:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
  57:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
  61:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     the following:
  68:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
  69:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     \code
  70:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
  73:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
  75:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     {
  80:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     }
  84:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     \endcode
  85:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
  86:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** */
  91:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
  92:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** /**
  93:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** */
  98:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
  99:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 101:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 103:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #else
 106:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #endif
 108:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 109:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #else
 114:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #endif
 116:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 117:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #else
 120:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #endif
 122:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 123:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 125:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 126:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** /**
 127:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 134:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** */
 136:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 137:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 138:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 140:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** /*
 141:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 142:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    registers to the CCP register
 144:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** ** At the same time,
 145:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 148:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****    sync is finished).
 151:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** */
 152:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 153:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** do { \
 154:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** uint8_t temp; \
 155:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 156:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 165:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     : "r0" \
 173:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** ); \
 174:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** } while(0)
 175:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 176:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #define wdt_disable() \
 177:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 178:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     : \
 184:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     : "r0" \
 190:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** );
 191:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 192:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 193:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 194:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 195:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 196:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 198:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 199:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     : /* no outputs */  \
 203:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     : "r16" \
 209:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** )
 210:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 211:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #define wdt_disable() \
 212:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** do { \
 213:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 214:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 215:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 217:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 218:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     : /*no output */ \
 224:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****     : "r16" \
 230:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** ); \
 231:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** }while(0)
 232:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 233:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #elif defined(CCP)
 234:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 235:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** static __inline__
 236:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 237:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 238:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** {
 239:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	{
 241:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 242:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 244:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 245:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			: /* no outputs */
 249:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			: "r0"
 255:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			);
 256:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	}
 257:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	{
 259:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 260:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 262:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 263:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			: /* no outputs */
 267:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			: "r0"
 273:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			);
 274:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	}
 275:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	{
 277:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 278:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 280:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 281:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			: /* no outputs */
 285:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			: "r0"
 291:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			);
 292:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	}
 293:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	else
 294:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****  	{
 295:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 296:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 298:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 299:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			: /* no outputs */
 303:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			: "r0"
 309:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 			);
 310:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	}
 311:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** }
 312:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 313:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** static __inline__
 314:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 315:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** void wdt_disable (void)
 316:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** {
 317:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	{
 319:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 320:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 321:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 323:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 324:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: /*no output */
 330:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: "r0"
 336:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				);
 337:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	}
 338:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	{
 340:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 341:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 342:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 344:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 345:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: /*no output */
 351:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: "r0"
 357:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				);
 358:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	}
 359:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	{
 361:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 362:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 363:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 365:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 366:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: /*no output */
 372:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: "r0"
 378:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				);
 379:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	}
 380:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	else
 381:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	{
 382:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 383:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 384:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 386:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 387:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: /*no output */
 393:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: "r0"
 399:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				);
 400:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	}
 401:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** }
 402:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 403:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** #else
 404:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 405:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** static __inline__
 406:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 407:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 408:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** {
 409:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 410:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	{
 411:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 412:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 414:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 415:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 416:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 418:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: /* no outputs */
 419:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: "r0"
 424:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 		);
 425:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	}
 426:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	else
 427:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	{
 428:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 429:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 433:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 435:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: /* no outputs */
 436:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: "r0"
 441:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 		);
 442:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	}
 443:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** }
 444:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 
 445:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** static __inline__
 446:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 447:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** void wdt_disable (void)
 448:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** {
 449:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 450:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	{
 451:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 452:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 453:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 455:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 456:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 				: "r0"
 465:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 		);
 466:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	}
 467:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	else
 468:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 	{
 469:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 470:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 663               		.loc 5 470 0
 664               	/* #APP */
 665               	 ;  470 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/avr/wdt.h" 1
 666 0006 0FB6      		in __tmp_reg__,__SREG__
 667 0008 F894      		cli
 668 000a A895      		wdr
 669 000c 8091 6000 		lds r24,96
 670 0010 8861      		ori r24,24
 671 0012 8093 6000 		sts 96,r24
 672 0016 1092 6000 		sts 96,__zero_reg__
 673 001a 0FBE      		out __SREG__,__tmp_reg__
 674               		
 675               	 ;  0 "" 2
 676               	/* #NOAPP */
 677               	.LBE132:
 678               	.LBE131:
 923:tmk_core/protocol/lufa/lufa.c ****     CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
 679               		.loc 1 923 0
 680 001c 80E8      		ldi r24,lo8(-128)
 681 001e 8093 6100 		sts 97,r24
 924:tmk_core/protocol/lufa/lufa.c **** }
 682               		.loc 1 924 0
 683 0022 1092 6100 		sts 97,__zero_reg__
 684               	.LBE130:
 685               	.LBE129:
 948:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
 949:tmk_core/protocol/lufa/lufa.c ****     setup_midi();
 950:tmk_core/protocol/lufa/lufa.c **** #endif
 951:tmk_core/protocol/lufa/lufa.c **** 
 952:tmk_core/protocol/lufa/lufa.c ****     setup_mcu();
 953:tmk_core/protocol/lufa/lufa.c ****     keyboard_setup();
 686               		.loc 1 953 0
 687 0026 0E94 0000 		call keyboard_setup
 688               	.LVL34:
 689               	.LBB133:
 690               	.LBB134:
 933:tmk_core/protocol/lufa/lufa.c **** 
 691               		.loc 1 933 0
 692 002a 0E94 0000 		call USB_Disable
 693               	.LVL35:
 935:tmk_core/protocol/lufa/lufa.c **** 
 694               		.loc 1 935 0
 695 002e 0E94 0000 		call USB_Init
 696               	.LVL36:
 697               	.LBB135:
 698               	.LBB136:
 699               	.LBB137:
 700               		.loc 4 113 0
 701 0032 8091 E200 		lds r24,226
 702 0036 8460      		ori r24,lo8(4)
 703 0038 8093 E200 		sts 226,r24
 704               	.LVL37:
 705               	.LBE137:
 706               	.LBE136:
 707               	.LBE135:
 708               	.LBE134:
 709               	.LBE133:
 954:tmk_core/protocol/lufa/lufa.c ****     setup_usb();
 955:tmk_core/protocol/lufa/lufa.c ****     sei();
 710               		.loc 1 955 0
 711               	/* #APP */
 712               	 ;  955 "tmk_core/protocol/lufa/lufa.c" 1
 713 003c 7894      		sei
 714               	 ;  0 "" 2
 956:tmk_core/protocol/lufa/lufa.c **** 
 957:tmk_core/protocol/lufa/lufa.c **** #if defined(MODULE_ADAFRUIT_EZKEY) || defined(MODULE_RN42)
 958:tmk_core/protocol/lufa/lufa.c ****     serial_init();
 959:tmk_core/protocol/lufa/lufa.c **** #endif
 960:tmk_core/protocol/lufa/lufa.c **** 
 961:tmk_core/protocol/lufa/lufa.c ****     /* wait for USB startup & debug output */
 962:tmk_core/protocol/lufa/lufa.c **** 
 963:tmk_core/protocol/lufa/lufa.c **** #ifdef WAIT_FOR_USB
 964:tmk_core/protocol/lufa/lufa.c ****     while (USB_DeviceState != DEVICE_STATE_Configured) {
 965:tmk_core/protocol/lufa/lufa.c **** #    if defined(INTERRUPT_CONTROL_ENDPOINT)
 966:tmk_core/protocol/lufa/lufa.c ****         ;
 967:tmk_core/protocol/lufa/lufa.c **** #    else
 968:tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
 969:tmk_core/protocol/lufa/lufa.c **** #    endif
 970:tmk_core/protocol/lufa/lufa.c ****     }
 971:tmk_core/protocol/lufa/lufa.c ****     print("USB configured.\n");
 972:tmk_core/protocol/lufa/lufa.c **** #else
 973:tmk_core/protocol/lufa/lufa.c ****     USB_USBTask();
 715               		.loc 1 973 0
 716               	/* #NOAPP */
 717 003e 0E94 0000 		call USB_USBTask
 718               	.LVL38:
 974:tmk_core/protocol/lufa/lufa.c **** #endif
 975:tmk_core/protocol/lufa/lufa.c ****     /* init modules */
 976:tmk_core/protocol/lufa/lufa.c ****     keyboard_init();
 719               		.loc 1 976 0
 720 0042 0E94 0000 		call keyboard_init
 721               	.LVL39:
 977:tmk_core/protocol/lufa/lufa.c ****     host_set_driver(&lufa_driver);
 722               		.loc 1 977 0
 723 0046 80E0      		ldi r24,lo8(lufa_driver)
 724 0048 90E0      		ldi r25,hi8(lufa_driver)
 725 004a 0E94 0000 		call host_set_driver
 726               	.LVL40:
 727               	.L66:
 978:tmk_core/protocol/lufa/lufa.c **** #ifdef SLEEP_LED_ENABLE
 979:tmk_core/protocol/lufa/lufa.c ****     sleep_led_init();
 980:tmk_core/protocol/lufa/lufa.c **** #endif
 981:tmk_core/protocol/lufa/lufa.c **** 
 982:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
 983:tmk_core/protocol/lufa/lufa.c ****     virtser_init();
 984:tmk_core/protocol/lufa/lufa.c **** #endif
 985:tmk_core/protocol/lufa/lufa.c **** 
 986:tmk_core/protocol/lufa/lufa.c ****     print("Keyboard start.\n");
 987:tmk_core/protocol/lufa/lufa.c ****     while (1) {
 988:tmk_core/protocol/lufa/lufa.c **** #if !defined(NO_USB_STARTUP_CHECK)
 989:tmk_core/protocol/lufa/lufa.c ****         while (USB_DeviceState == DEVICE_STATE_Suspended) {
 728               		.loc 1 989 0
 729 004e 8091 0000 		lds r24,USB_DeviceState
 730 0052 8530      		cpi r24,lo8(5)
 731 0054 01F0      		breq .L70
 990:tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 991:tmk_core/protocol/lufa/lufa.c ****             suspend_power_down();
 992:tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 993:tmk_core/protocol/lufa/lufa.c ****                 USB_Device_SendRemoteWakeup();
 994:tmk_core/protocol/lufa/lufa.c ****             }
 995:tmk_core/protocol/lufa/lufa.c ****         }
 996:tmk_core/protocol/lufa/lufa.c **** #endif
 997:tmk_core/protocol/lufa/lufa.c **** 
 998:tmk_core/protocol/lufa/lufa.c ****         keyboard_task();
 732               		.loc 1 998 0
 733 0056 0E94 0000 		call keyboard_task
 734               	.LVL41:
 999:tmk_core/protocol/lufa/lufa.c **** 
1000:tmk_core/protocol/lufa/lufa.c **** #ifdef MIDI_ENABLE
1001:tmk_core/protocol/lufa/lufa.c ****         MIDI_Device_USBTask(&USB_MIDI_Interface);
1002:tmk_core/protocol/lufa/lufa.c **** #endif
1003:tmk_core/protocol/lufa/lufa.c **** 
1004:tmk_core/protocol/lufa/lufa.c **** #if defined(RGBLIGHT_ANIMATIONS) & defined(RGBLIGHT_ENABLE)
1005:tmk_core/protocol/lufa/lufa.c ****         rgblight_task();
 735               		.loc 1 1005 0
 736 005a 0E94 0000 		call rgblight_task
 737               	.LVL42:
 989:tmk_core/protocol/lufa/lufa.c ****             print("[s]");
 738               		.loc 1 989 0
 739 005e 00C0      		rjmp .L66
 740               	.L70:
 991:tmk_core/protocol/lufa/lufa.c ****             if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
 741               		.loc 1 991 0
 742 0060 0E94 0000 		call suspend_power_down
 743               	.LVL43:
 992:tmk_core/protocol/lufa/lufa.c ****                 USB_Device_SendRemoteWakeup();
 744               		.loc 1 992 0
 745 0064 8091 0000 		lds r24,USB_Device_RemoteWakeupEnabled
 746 0068 8823      		tst r24
 747 006a 01F0      		breq .L66
 992:tmk_core/protocol/lufa/lufa.c ****                 USB_Device_SendRemoteWakeup();
 748               		.loc 1 992 0 is_stmt 0 discriminator 1
 749 006c 0E94 0000 		call suspend_wakeup_condition
 750               	.LVL44:
 751 0070 8823      		tst r24
 752 0072 01F0      		breq .L66
 993:tmk_core/protocol/lufa/lufa.c ****             }
 753               		.loc 1 993 0 is_stmt 1
 754 0074 0E94 0000 		call USB_Device_SendRemoteWakeup
 755               	.LVL45:
 756 0078 00C0      		rjmp .L66
 757               		.cfi_endproc
 758               	.LFE137:
 760               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
 761               	.global	CALLBACK_USB_GetDescriptor
 763               	CALLBACK_USB_GetDescriptor:
 764               	.LFB138:
1006:tmk_core/protocol/lufa/lufa.c **** #endif
1007:tmk_core/protocol/lufa/lufa.c **** 
1008:tmk_core/protocol/lufa/lufa.c **** #ifdef MODULE_ADAFRUIT_BLE
1009:tmk_core/protocol/lufa/lufa.c ****         adafruit_ble_task();
1010:tmk_core/protocol/lufa/lufa.c **** #endif
1011:tmk_core/protocol/lufa/lufa.c **** 
1012:tmk_core/protocol/lufa/lufa.c **** #ifdef VIRTSER_ENABLE
1013:tmk_core/protocol/lufa/lufa.c ****         virtser_task();
1014:tmk_core/protocol/lufa/lufa.c ****         CDC_Device_USBTask(&cdc_device);
1015:tmk_core/protocol/lufa/lufa.c **** #endif
1016:tmk_core/protocol/lufa/lufa.c **** 
1017:tmk_core/protocol/lufa/lufa.c **** #ifdef RAW_ENABLE
1018:tmk_core/protocol/lufa/lufa.c ****         raw_hid_task();
1019:tmk_core/protocol/lufa/lufa.c **** #endif
1020:tmk_core/protocol/lufa/lufa.c **** 
1021:tmk_core/protocol/lufa/lufa.c **** #if !defined(INTERRUPT_CONTROL_ENDPOINT)
1022:tmk_core/protocol/lufa/lufa.c ****         USB_USBTask();
1023:tmk_core/protocol/lufa/lufa.c **** #endif
1024:tmk_core/protocol/lufa/lufa.c ****     }
1025:tmk_core/protocol/lufa/lufa.c **** }
1026:tmk_core/protocol/lufa/lufa.c **** 
1027:tmk_core/protocol/lufa/lufa.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue, const uint16_t wIndex, const void **cons
 765               		.loc 1 1027 0
 766               		.cfi_startproc
 767               	.LVL46:
 768               	/* prologue: function */
 769               	/* frame size = 0 */
 770               	/* stack size = 0 */
 771               	.L__stack_usage = 0
 772               		.loc 1 1027 0
 773 0000 0C94 0000 		jmp get_usb_descriptor
 774               	.LVL47:
 775               		.cfi_endproc
 776               	.LFE138:
 778               	.global	lufa_driver
 779               		.section	.data.lufa_driver,"aw",@progbits
 782               	lufa_driver:
 783 0000 0000      		.word	gs(keyboard_leds)
 784 0002 0000      		.word	gs(send_keyboard)
 785 0004 0000      		.word	gs(send_mouse)
 786 0006 0000      		.word	gs(send_system)
 787 0008 0000      		.word	gs(send_consumer)
 788               		.section	.bss.keyboard_report_sent,"aw",@nobits
 791               	keyboard_report_sent:
 792 0000 0000 0000 		.zero	8
 792      0000 0000 
 793               		.section	.bss.keyboard_led_stats,"aw",@nobits
 796               	keyboard_led_stats:
 797 0000 00        		.zero	1
 798               	.global	keyboard_protocol
 799               		.section	.data.keyboard_protocol,"aw",@progbits
 802               	keyboard_protocol:
 803 0000 01        		.byte	1
 804               	.global	keyboard_idle
 805               		.section	.bss.keyboard_idle,"aw",@nobits
 808               	keyboard_idle:
 809 0000 00        		.zero	1
 810               		.text
 811               	.Letext0:
 812               		.file 6 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/stdint.h"
 813               		.file 7 "tmk_core/common/report.h"
 814               		.file 8 "tmk_core/common/host_driver.h"
 815               		.file 9 "tmk_core/common/host.h"
 816               		.file 10 "/usr/local/Cellar/avr-gcc@7/7.4.0/lib/avr-gcc/7/gcc/avr/7.4.0/include/stddef.h"
 817               		.file 11 "tmk_core/common/action.h"
 818               		.file 12 "tmk_core/common/debug.h"
 819               		.file 13 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../Device.h"
 820               		.file 14 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../StdRequestType.h"
 821               		.file 15 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../DeviceStandardReq.h"
 822               		.file 16 "lib/lufa/LUFA/Drivers/USB/Core/USBTask.h"
 823               		.file 17 "lib/lufa/LUFA/Drivers/USB/Core/HostStandardReq.h"
 824               		.file 18 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/stdio.h"
 825               		.file 19 "lib/lufa/LUFA/Drivers/USB/Class/Device/../Common/HIDClassCommon.h"
 826               		.file 20 "tmk_core/protocol/usb_descriptor.h"
 827               		.file 21 "tmk_core/protocol/lufa/lufa.h"
 828               		.file 22 "quantum/keycode_config.h"
 829               		.file 23 "quantum/keymap.h"
 830               		.file 24 "./quantum/color.h"
 831               		.file 25 "quantum/rgblight.h"
 832               		.file 26 "tmk_core/common/action_layer.h"
 833               		.file 27 "tmk_core/common/timer.h"
 834               		.file 28 "tmk_core/common/action_util.h"
 835               		.file 29 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/stdlib.h"
 836               		.file 30 "quantum/quantum.h"
 837               		.file 31 "tmk_core/protocol/lufa/outputselect.h"
 838               		.file 32 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/Device_AVR8.h"
 839               		.file 33 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/USBController_AVR8.h"
 840               		.file 34 "tmk_core/common/keyboard.h"
 841               		.file 35 "tmk_core/common/suspend.h"
 842               		.file 36 "lib/lufa/LUFA/Drivers/USB/Core/AVR8/../AVR8/EndpointStream_AVR8.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lufa.c
/var/tmp//ccimlXzI.s:2      *ABS*:000000000000003e __SP_H__
/var/tmp//ccimlXzI.s:3      *ABS*:000000000000003d __SP_L__
/var/tmp//ccimlXzI.s:4      *ABS*:000000000000003f __SREG__
/var/tmp//ccimlXzI.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/tmp//ccimlXzI.s:6      *ABS*:0000000000000001 __zero_reg__
/var/tmp//ccimlXzI.s:12     .text.keyboard_leds:0000000000000000 keyboard_leds
/var/tmp//ccimlXzI.s:796    .bss.keyboard_led_stats:0000000000000000 keyboard_led_stats
/var/tmp//ccimlXzI.s:30     .text.send_mouse:0000000000000000 send_mouse
/var/tmp//ccimlXzI.s:47     .text.send_system:0000000000000000 send_system
/var/tmp//ccimlXzI.s:64     .text.send_keyboard:0000000000000000 send_keyboard
/var/tmp//ccimlXzI.s:791    .bss.keyboard_report_sent:0000000000000000 keyboard_report_sent
/var/tmp//ccimlXzI.s:184    .text.send_consumer:0000000000000000 send_consumer
/var/tmp//ccimlXzI.s:199    .text.EVENT_USB_Device_Connect:0000000000000000 EVENT_USB_Device_Connect
/var/tmp//ccimlXzI.s:239    .text.EVENT_USB_Device_Disconnect:0000000000000000 EVENT_USB_Device_Disconnect
/var/tmp//ccimlXzI.s:258    .text.EVENT_USB_Device_Reset:0000000000000000 EVENT_USB_Device_Reset
/var/tmp//ccimlXzI.s:273    .text.EVENT_USB_Device_Suspend:0000000000000000 EVENT_USB_Device_Suspend
/var/tmp//ccimlXzI.s:290    .text.EVENT_USB_Device_WakeUp:0000000000000000 EVENT_USB_Device_WakeUp
/var/tmp//ccimlXzI.s:307    .text.EVENT_USB_Device_ConfigurationChanged:0000000000000000 EVENT_USB_Device_ConfigurationChanged
/var/tmp//ccimlXzI.s:332    .text.EVENT_USB_Device_ControlRequest:0000000000000000 EVENT_USB_Device_ControlRequest
/var/tmp//ccimlXzI.s:802    .data.keyboard_protocol:0000000000000000 keyboard_protocol
/var/tmp//ccimlXzI.s:808    .bss.keyboard_idle:0000000000000000 keyboard_idle
/var/tmp//ccimlXzI.s:626    .text.sendchar:0000000000000000 sendchar
/var/tmp//ccimlXzI.s:646    .text.startup.main:0000000000000000 main
/var/tmp//ccimlXzI.s:782    .data.lufa_driver:0000000000000000 lufa_driver
/var/tmp//ccimlXzI.s:763    .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor

UNDEFINED SYMBOLS
where_to_send
Endpoint_Write_Stream_LE
USB_IsInitialized
USB_Disable
USB_Init
suspend_wakeup_init
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_ClearStatusStage
Endpoint_Write_Control_Stream_LE
USB_DeviceState
clear_keyboard
keyboard_setup
USB_USBTask
keyboard_init
host_set_driver
keyboard_task
rgblight_task
suspend_power_down
USB_Device_RemoteWakeupEnabled
suspend_wakeup_condition
USB_Device_SendRemoteWakeup
get_usb_descriptor
__do_copy_data
__do_clear_bss
