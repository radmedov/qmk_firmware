   1               		.file	"color.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.hsv_to_rgb,"ax",@progbits
  11               	.global	hsv_to_rgb
  13               	hsv_to_rgb:
  14               	.LFB1:
  15               		.file 1 "quantum/color.c"
   1:quantum/color.c **** /* Copyright 2017 Jason Williams
   2:quantum/color.c ****  *
   3:quantum/color.c ****  * This program is free software: you can redistribute it and/or modify
   4:quantum/color.c ****  * it under the terms of the GNU General Public License as published by
   5:quantum/color.c ****  * the Free Software Foundation, either version 2 of the License, or
   6:quantum/color.c ****  * (at your option) any later version.
   7:quantum/color.c ****  *
   8:quantum/color.c ****  * This program is distributed in the hope that it will be useful,
   9:quantum/color.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:quantum/color.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:quantum/color.c ****  * GNU General Public License for more details.
  12:quantum/color.c ****  *
  13:quantum/color.c ****  * You should have received a copy of the GNU General Public License
  14:quantum/color.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  15:quantum/color.c ****  */
  16:quantum/color.c **** 
  17:quantum/color.c **** #include "color.h"
  18:quantum/color.c **** #include "led_tables.h"
  19:quantum/color.c **** #include "progmem.h"
  20:quantum/color.c **** 
  21:quantum/color.c **** RGB hsv_to_rgb(HSV hsv) {
  16               		.loc 1 21 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 AF92      		push r10
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 10, -2
  23 0002 BF92      		push r11
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 11, -3
  27 0004 CF92      		push r12
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 12, -4
  31 0006 DF92      		push r13
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 13, -5
  35 0008 EF92      		push r14
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 14, -6
  39 000a FF92      		push r15
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 15, -7
  43 000c 0F93      		push r16
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 16, -8
  47 000e 1F93      		push r17
  48               	.LCFI7:
  49               		.cfi_def_cfa_offset 10
  50               		.cfi_offset 17, -9
  51 0010 CF93      		push r28
  52               	.LCFI8:
  53               		.cfi_def_cfa_offset 11
  54               		.cfi_offset 28, -10
  55 0012 DF93      		push r29
  56               	.LCFI9:
  57               		.cfi_def_cfa_offset 12
  58               		.cfi_offset 29, -11
  59               	/* prologue: function */
  60               	/* frame size = 0 */
  61               	/* stack size = 10 */
  62               	.L__stack_usage = 10
  63 0014 9B01      		movw r18,r22
  64 0016 E82F      		mov r30,r24
  65 0018 F0E0      		ldi r31,0
  66               	.LVL1:
  67 001a E050      		subi r30,lo8(-(CIE1931_CURVE))
  68 001c F040      		sbci r31,hi8(-(CIE1931_CURVE))
  22:quantum/color.c ****     RGB      rgb;
  23:quantum/color.c ****     uint8_t  region, remainder, p, q, t;
  24:quantum/color.c ****     uint16_t h, s, v;
  25:quantum/color.c **** 
  26:quantum/color.c ****     if (hsv.s == 0) {
  69               		.loc 1 26 0
  70 001e 3111      		cpse r19,__zero_reg__
  71 0020 00C0      		rjmp .L2
  72               	.LVL2:
  73               	.LBB2:
  27:quantum/color.c **** #ifdef USE_CIE1931_CURVE
  28:quantum/color.c ****         rgb.r = rgb.g = rgb.b = pgm_read_byte(&CIE1931_CURVE[hsv.v]);
  74               		.loc 1 28 0
  75               	/* #APP */
  76               	 ;  28 "quantum/color.c" 1
  77 0022 6491      		lpm r22, Z
  78               		
  79               	 ;  0 "" 2
  80               	.LVL3:
  81               	/* #NOAPP */
  82               	.LBE2:
  29:quantum/color.c **** #else
  30:quantum/color.c ****         rgb.r = hsv.v;
  31:quantum/color.c ****         rgb.g = hsv.v;
  32:quantum/color.c ****         rgb.b = hsv.v;
  33:quantum/color.c **** #endif
  34:quantum/color.c ****         return rgb;
  83               		.loc 1 34 0
  84 0024 762F      		mov r23,r22
  85 0026 862F      		mov r24,r22
  86               	.LVL4:
  87               	.L3:
  88               	/* epilogue start */
  35:quantum/color.c ****     }
  36:quantum/color.c **** 
  37:quantum/color.c ****     h = hsv.h;
  38:quantum/color.c ****     s = hsv.s;
  39:quantum/color.c **** #ifdef USE_CIE1931_CURVE
  40:quantum/color.c ****     v = pgm_read_byte(&CIE1931_CURVE[hsv.v]);
  41:quantum/color.c **** #else
  42:quantum/color.c ****     v = hsv.v;
  43:quantum/color.c **** #endif
  44:quantum/color.c **** 
  45:quantum/color.c ****     region    = h * 6 / 255;
  46:quantum/color.c ****     remainder = (h * 2 - region * 85) * 3;
  47:quantum/color.c **** 
  48:quantum/color.c ****     p = (v * (255 - s)) >> 8;
  49:quantum/color.c ****     q = (v * (255 - ((s * remainder) >> 8))) >> 8;
  50:quantum/color.c ****     t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
  51:quantum/color.c **** 
  52:quantum/color.c ****     switch (region) {
  53:quantum/color.c ****         case 6:
  54:quantum/color.c ****         case 0:
  55:quantum/color.c ****             rgb.r = v;
  56:quantum/color.c ****             rgb.g = t;
  57:quantum/color.c ****             rgb.b = p;
  58:quantum/color.c ****             break;
  59:quantum/color.c ****         case 1:
  60:quantum/color.c ****             rgb.r = q;
  61:quantum/color.c ****             rgb.g = v;
  62:quantum/color.c ****             rgb.b = p;
  63:quantum/color.c ****             break;
  64:quantum/color.c ****         case 2:
  65:quantum/color.c ****             rgb.r = p;
  66:quantum/color.c ****             rgb.g = v;
  67:quantum/color.c ****             rgb.b = t;
  68:quantum/color.c ****             break;
  69:quantum/color.c ****         case 3:
  70:quantum/color.c ****             rgb.r = p;
  71:quantum/color.c ****             rgb.g = q;
  72:quantum/color.c ****             rgb.b = v;
  73:quantum/color.c ****             break;
  74:quantum/color.c ****         case 4:
  75:quantum/color.c ****             rgb.r = t;
  76:quantum/color.c ****             rgb.g = p;
  77:quantum/color.c ****             rgb.b = v;
  78:quantum/color.c ****             break;
  79:quantum/color.c ****         default:
  80:quantum/color.c ****             rgb.r = v;
  81:quantum/color.c ****             rgb.g = p;
  82:quantum/color.c ****             rgb.b = q;
  83:quantum/color.c ****             break;
  84:quantum/color.c ****     }
  85:quantum/color.c **** 
  86:quantum/color.c ****     return rgb;
  87:quantum/color.c **** }
  89               		.loc 1 87 0
  90 0028 DF91      		pop r29
  91 002a CF91      		pop r28
  92 002c 1F91      		pop r17
  93 002e 0F91      		pop r16
  94 0030 FF90      		pop r15
  95 0032 EF90      		pop r14
  96 0034 DF90      		pop r13
  97 0036 CF90      		pop r12
  98 0038 BF90      		pop r11
  99 003a AF90      		pop r10
 100 003c 0895      		ret
 101               	.LVL5:
 102               	.L2:
  38:quantum/color.c **** #ifdef USE_CIE1931_CURVE
 103               		.loc 1 38 0
 104 003e C32F      		mov r28,r19
 105 0040 D0E0      		ldi r29,0
 106               	.LVL6:
 107               	.LBB3:
  40:quantum/color.c **** #else
 108               		.loc 1 40 0
 109               	/* #APP */
 110               	 ;  40 "quantum/color.c" 1
 111 0042 E491      		lpm r30, Z
 112               		
 113               	 ;  0 "" 2
 114               	/* #NOAPP */
 115 0044 FE2F      		mov r31,r30
 116               	.LVL7:
 117               	.LBE3:
 118 0046 EE2E      		mov r14,r30
 119 0048 F12C      		mov r15,__zero_reg__
 120               	.LVL8:
  45:quantum/color.c ****     remainder = (h * 2 - region * 85) * 3;
 121               		.loc 1 45 0
 122 004a 46E0      		ldi r20,lo8(6)
 123 004c 649F      		mul r22,r20
 124 004e C001      		movw r24,r0
 125 0050 1124      		clr __zero_reg__
 126               	.LVL9:
 127 0052 0FEF      		ldi r16,lo8(-1)
 128 0054 10E0      		ldi r17,0
 129 0056 B801      		movw r22,r16
 130               	.LVL10:
 131 0058 0E94 0000 		call __udivmodhi4
 132 005c AB01      		movw r20,r22
 133               	.LVL11:
  46:quantum/color.c **** 
 134               		.loc 1 46 0
 135 005e 822F      		mov r24,r18
 136 0060 90E0      		ldi r25,0
 137 0062 880F      		lsl r24
 138 0064 991F      		rol r25
 139 0066 25E5      		ldi r18,lo8(85)
 140 0068 249F      		mul r18,r20
 141 006a B001      		movw r22,r0
 142 006c 259F      		mul r18,r21
 143 006e 700D      		add r23,r0
 144 0070 1124      		clr __zero_reg__
 145 0072 861B      		sub r24,r22
 146 0074 970B      		sbc r25,r23
 147 0076 982F      		mov r25,r24
 148 0078 990F      		lsl r25
 149 007a 980F      		add r25,r24
 150               	.LVL12:
  48:quantum/color.c ****     q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 151               		.loc 1 48 0
 152 007c B801      		movw r22,r16
 153 007e 6C1B      		sub r22,r28
 154 0080 7D0B      		sbc r23,r29
 155 0082 6E9D      		mul r22,r14
 156 0084 D001      		movw r26,r0
 157 0086 6F9D      		mul r22,r15
 158 0088 B00D      		add r27,r0
 159 008a 7E9D      		mul r23,r14
 160 008c B00D      		add r27,r0
 161 008e 1124      		clr r1
 162 0090 8B2F      		mov r24,r27
 163               	.LVL13:
  49:quantum/color.c ****     t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 164               		.loc 1 49 0
 165 0092 939F      		mul r25,r19
 166 0094 9001      		movw r18,r0
 167 0096 1124      		clr __zero_reg__
 168 0098 232F      		mov r18,r19
 169 009a 3327      		clr r19
 170 009c B801      		movw r22,r16
 171 009e 621B      		sub r22,r18
 172 00a0 730B      		sbc r23,r19
 173 00a2 6E9D      		mul r22,r14
 174 00a4 9001      		movw r18,r0
 175 00a6 6F9D      		mul r22,r15
 176 00a8 300D      		add r19,r0
 177 00aa 7E9D      		mul r23,r14
 178 00ac 300D      		add r19,r0
 179 00ae 1124      		clr r1
 180 00b0 732F      		mov r23,r19
 181               	.LVL14:
  50:quantum/color.c **** 
 182               		.loc 1 50 0
 183 00b2 5801      		movw r10,r16
 184 00b4 A91A      		sub r10,r25
 185 00b6 B108      		sbc r11,__zero_reg__
 186 00b8 AC9E      		mul r10,r28
 187 00ba 6001      		movw r12,r0
 188 00bc AD9E      		mul r10,r29
 189 00be D00C      		add r13,r0
 190 00c0 BC9E      		mul r11,r28
 191 00c2 D00C      		add r13,r0
 192 00c4 1124      		clr r1
 193 00c6 CD2C      		mov r12,r13
 194 00c8 DD24      		clr r13
 195               	.LVL15:
 196 00ca 0C19      		sub r16,r12
 197 00cc 1D09      		sbc r17,r13
 198               	.LVL16:
 199 00ce 0E9D      		mul r16,r14
 200 00d0 E001      		movw r28,r0
 201 00d2 0F9D      		mul r16,r15
 202 00d4 D00D      		add r29,r0
 203 00d6 1E9D      		mul r17,r14
 204 00d8 D00D      		add r29,r0
 205 00da 1124      		clr r1
 206               	.LVL17:
  52:quantum/color.c ****         case 6:
 207               		.loc 1 52 0
 208 00dc 4230      		cpi r20,2
 209 00de 5105      		cpc r21,__zero_reg__
 210 00e0 01F0      		breq .L5
 211 00e2 00F4      		brsh .L6
 212 00e4 4115      		cp r20,__zero_reg__
 213 00e6 5105      		cpc r21,__zero_reg__
 214 00e8 01F0      		breq .L7
 215 00ea 4130      		cpi r20,1
 216 00ec 5105      		cpc r21,__zero_reg__
 217 00ee 01F0      		breq .L8
 218               	.L4:
 219               	.LVL18:
  83:quantum/color.c ****     }
 220               		.loc 1 83 0
 221 00f0 7E2F      		mov r23,r30
 222               	.LVL19:
  81:quantum/color.c ****             rgb.b = q;
 223               		.loc 1 81 0
 224 00f2 EB2F      		mov r30,r27
  82:quantum/color.c ****             break;
 225               		.loc 1 82 0
 226 00f4 832F      		mov r24,r19
  83:quantum/color.c ****     }
 227               		.loc 1 83 0
 228 00f6 00C0      		rjmp .L8
 229               	.LVL20:
 230               	.L6:
  52:quantum/color.c ****         case 6:
 231               		.loc 1 52 0
 232 00f8 4430      		cpi r20,4
 233 00fa 5105      		cpc r21,__zero_reg__
 234 00fc 01F0      		breq .L9
 235 00fe 00F0      		brlo .L10
 236 0100 4630      		cpi r20,6
 237 0102 5105      		cpc r21,__zero_reg__
 238 0104 01F4      		brne .L4
 239               	.L7:
  55:quantum/color.c ****             rgb.g = t;
 240               		.loc 1 55 0
 241 0106 7E2F      		mov r23,r30
 242               	.LVL21:
  56:quantum/color.c ****             rgb.b = p;
 243               		.loc 1 56 0
 244 0108 ED2F      		mov r30,r29
 245               	.LVL22:
 246               	.L8:
  86:quantum/color.c **** }
 247               		.loc 1 86 0
 248 010a 6E2F      		mov r22,r30
 249 010c 00C0      		rjmp .L3
 250               	.LVL23:
 251               	.L5:
  65:quantum/color.c ****             rgb.g = v;
 252               		.loc 1 65 0
 253 010e 7B2F      		mov r23,r27
  67:quantum/color.c ****             break;
 254               		.loc 1 67 0
 255 0110 8D2F      		mov r24,r29
  68:quantum/color.c ****         case 3:
 256               		.loc 1 68 0
 257 0112 00C0      		rjmp .L8
 258               	.L10:
 259               	.LVL24:
  71:quantum/color.c ****             rgb.b = v;
 260               		.loc 1 71 0
 261 0114 E32F      		mov r30,r19
  70:quantum/color.c ****             rgb.g = q;
 262               		.loc 1 70 0
 263 0116 7B2F      		mov r23,r27
 264               	.LVL25:
 265               	.L20:
  77:quantum/color.c ****             break;
 266               		.loc 1 77 0
 267 0118 8F2F      		mov r24,r31
  78:quantum/color.c ****         default:
 268               		.loc 1 78 0
 269 011a 00C0      		rjmp .L8
 270               	.L9:
  75:quantum/color.c ****             rgb.g = p;
 271               		.loc 1 75 0
 272 011c 7D2F      		mov r23,r29
 273               	.LVL26:
  76:quantum/color.c ****             rgb.b = v;
 274               		.loc 1 76 0
 275 011e EB2F      		mov r30,r27
 276 0120 00C0      		rjmp .L20
 277               		.cfi_endproc
 278               	.LFE1:
 280               		.text
 281               	.Letext0:
 282               		.file 2 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/stdint.h"
 283               		.file 3 "quantum/color.h"
 284               		.file 4 "quantum/led_tables.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 color.c
/var/tmp//ccvi8w0d.s:2      *ABS*:000000000000003e __SP_H__
/var/tmp//ccvi8w0d.s:3      *ABS*:000000000000003d __SP_L__
/var/tmp//ccvi8w0d.s:4      *ABS*:000000000000003f __SREG__
/var/tmp//ccvi8w0d.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/tmp//ccvi8w0d.s:6      *ABS*:0000000000000001 __zero_reg__
/var/tmp//ccvi8w0d.s:13     .text.hsv_to_rgb:0000000000000000 hsv_to_rgb

UNDEFINED SYMBOLS
CIE1931_CURVE
__udivmodhi4
