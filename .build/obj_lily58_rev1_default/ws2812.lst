   1               		.file	"ws2812.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.ws2812_sendarray_mask,"ax",@progbits
  11               	.global	ws2812_sendarray_mask
  13               	ws2812_sendarray_mask:
  14               	.LFB10:
  15               		.file 1 "drivers/avr/ws2812.c"
   1:drivers/avr/ws2812.c **** /*
   2:drivers/avr/ws2812.c ****  * light weight WS2812 lib V2.0b
   3:drivers/avr/ws2812.c ****  *
   4:drivers/avr/ws2812.c ****  * Controls WS2811/WS2812/WS2812B RGB-LEDs
   5:drivers/avr/ws2812.c ****  * Author: Tim (cpldcpu@gmail.com)
   6:drivers/avr/ws2812.c ****  *
   7:drivers/avr/ws2812.c ****  * Jan 18th, 2014  v2.0b Initial Version
   8:drivers/avr/ws2812.c ****  * Nov 29th, 2015  v2.3  Added SK6812RGBW support
   9:drivers/avr/ws2812.c ****  *
  10:drivers/avr/ws2812.c ****  * This program is free software: you can redistribute it and/or modify
  11:drivers/avr/ws2812.c ****  * it under the terms of the GNU General Public License as published by
  12:drivers/avr/ws2812.c ****  * the Free Software Foundation, either version 2 of the License, or
  13:drivers/avr/ws2812.c ****  * (at your option) any later version.
  14:drivers/avr/ws2812.c ****  *
  15:drivers/avr/ws2812.c ****  * This program is distributed in the hope that it will be useful,
  16:drivers/avr/ws2812.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  17:drivers/avr/ws2812.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  18:drivers/avr/ws2812.c ****  * GNU General Public License for more details.
  19:drivers/avr/ws2812.c ****  *
  20:drivers/avr/ws2812.c ****  * You should have received a copy of the GNU General Public License
  21:drivers/avr/ws2812.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  22:drivers/avr/ws2812.c ****  */
  23:drivers/avr/ws2812.c **** 
  24:drivers/avr/ws2812.c **** #include "ws2812.h"
  25:drivers/avr/ws2812.c **** #include <avr/interrupt.h>
  26:drivers/avr/ws2812.c **** #include <avr/io.h>
  27:drivers/avr/ws2812.c **** #include <util/delay.h>
  28:drivers/avr/ws2812.c **** #include "debug.h"
  29:drivers/avr/ws2812.c **** 
  30:drivers/avr/ws2812.c **** #if !defined(LED_ARRAY) && defined(RGB_MATRIX_ENABLE)
  31:drivers/avr/ws2812.c **** // LED color buffer
  32:drivers/avr/ws2812.c **** LED_TYPE led[DRIVER_LED_TOTAL];
  33:drivers/avr/ws2812.c **** #    define LED_ARRAY led
  34:drivers/avr/ws2812.c **** #endif
  35:drivers/avr/ws2812.c **** 
  36:drivers/avr/ws2812.c **** #ifdef RGBW_BB_TWI
  37:drivers/avr/ws2812.c **** 
  38:drivers/avr/ws2812.c **** // Port for the I2C
  39:drivers/avr/ws2812.c **** #    define I2C_DDR DDRD
  40:drivers/avr/ws2812.c **** #    define I2C_PIN PIND
  41:drivers/avr/ws2812.c **** #    define I2C_PORT PORTD
  42:drivers/avr/ws2812.c **** 
  43:drivers/avr/ws2812.c **** // Pins to be used in the bit banging
  44:drivers/avr/ws2812.c **** #    define I2C_CLK 0
  45:drivers/avr/ws2812.c **** #    define I2C_DAT 1
  46:drivers/avr/ws2812.c **** 
  47:drivers/avr/ws2812.c **** #    define I2C_DATA_HI()           \
  48:drivers/avr/ws2812.c ****         I2C_DDR &= ~(1 << I2C_DAT); \
  49:drivers/avr/ws2812.c ****         I2C_PORT |= (1 << I2C_DAT);
  50:drivers/avr/ws2812.c **** #    define I2C_DATA_LO()          \
  51:drivers/avr/ws2812.c ****         I2C_DDR |= (1 << I2C_DAT); \
  52:drivers/avr/ws2812.c ****         I2C_PORT &= ~(1 << I2C_DAT);
  53:drivers/avr/ws2812.c **** 
  54:drivers/avr/ws2812.c **** #    define I2C_CLOCK_HI()          \
  55:drivers/avr/ws2812.c ****         I2C_DDR &= ~(1 << I2C_CLK); \
  56:drivers/avr/ws2812.c ****         I2C_PORT |= (1 << I2C_CLK);
  57:drivers/avr/ws2812.c **** #    define I2C_CLOCK_LO()         \
  58:drivers/avr/ws2812.c ****         I2C_DDR |= (1 << I2C_CLK); \
  59:drivers/avr/ws2812.c ****         I2C_PORT &= ~(1 << I2C_CLK);
  60:drivers/avr/ws2812.c **** 
  61:drivers/avr/ws2812.c **** #    define I2C_DELAY 1
  62:drivers/avr/ws2812.c **** 
  63:drivers/avr/ws2812.c **** void I2C_WriteBit(unsigned char c) {
  64:drivers/avr/ws2812.c ****     if (c > 0) {
  65:drivers/avr/ws2812.c ****         I2C_DATA_HI();
  66:drivers/avr/ws2812.c ****     } else {
  67:drivers/avr/ws2812.c ****         I2C_DATA_LO();
  68:drivers/avr/ws2812.c ****     }
  69:drivers/avr/ws2812.c **** 
  70:drivers/avr/ws2812.c ****     I2C_CLOCK_HI();
  71:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
  72:drivers/avr/ws2812.c **** 
  73:drivers/avr/ws2812.c ****     I2C_CLOCK_LO();
  74:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
  75:drivers/avr/ws2812.c **** 
  76:drivers/avr/ws2812.c ****     if (c > 0) {
  77:drivers/avr/ws2812.c ****         I2C_DATA_LO();
  78:drivers/avr/ws2812.c ****     }
  79:drivers/avr/ws2812.c **** 
  80:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
  81:drivers/avr/ws2812.c **** }
  82:drivers/avr/ws2812.c **** 
  83:drivers/avr/ws2812.c **** // Inits bitbanging port, must be called before using the functions below
  84:drivers/avr/ws2812.c **** //
  85:drivers/avr/ws2812.c **** void I2C_Init(void) {
  86:drivers/avr/ws2812.c ****     I2C_PORT &= ~((1 << I2C_DAT) | (1 << I2C_CLK));
  87:drivers/avr/ws2812.c **** 
  88:drivers/avr/ws2812.c ****     I2C_CLOCK_HI();
  89:drivers/avr/ws2812.c ****     I2C_DATA_HI();
  90:drivers/avr/ws2812.c **** 
  91:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
  92:drivers/avr/ws2812.c **** }
  93:drivers/avr/ws2812.c **** 
  94:drivers/avr/ws2812.c **** // Send a START Condition
  95:drivers/avr/ws2812.c **** //
  96:drivers/avr/ws2812.c **** void I2C_Start(void) {
  97:drivers/avr/ws2812.c ****     // set both to high at the same time
  98:drivers/avr/ws2812.c ****     I2C_DDR &= ~((1 << I2C_DAT) | (1 << I2C_CLK));
  99:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
 100:drivers/avr/ws2812.c **** 
 101:drivers/avr/ws2812.c ****     I2C_DATA_LO();
 102:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
 103:drivers/avr/ws2812.c **** 
 104:drivers/avr/ws2812.c ****     I2C_CLOCK_LO();
 105:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
 106:drivers/avr/ws2812.c **** }
 107:drivers/avr/ws2812.c **** 
 108:drivers/avr/ws2812.c **** // Send a STOP Condition
 109:drivers/avr/ws2812.c **** //
 110:drivers/avr/ws2812.c **** void I2C_Stop(void) {
 111:drivers/avr/ws2812.c ****     I2C_CLOCK_HI();
 112:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
 113:drivers/avr/ws2812.c **** 
 114:drivers/avr/ws2812.c ****     I2C_DATA_HI();
 115:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
 116:drivers/avr/ws2812.c **** }
 117:drivers/avr/ws2812.c **** 
 118:drivers/avr/ws2812.c **** // write a byte to the I2C slave device
 119:drivers/avr/ws2812.c **** //
 120:drivers/avr/ws2812.c **** unsigned char I2C_Write(unsigned char c) {
 121:drivers/avr/ws2812.c ****     for (char i = 0; i < 8; i++) {
 122:drivers/avr/ws2812.c ****         I2C_WriteBit(c & 128);
 123:drivers/avr/ws2812.c **** 
 124:drivers/avr/ws2812.c ****         c <<= 1;
 125:drivers/avr/ws2812.c ****     }
 126:drivers/avr/ws2812.c **** 
 127:drivers/avr/ws2812.c ****     I2C_WriteBit(0);
 128:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
 129:drivers/avr/ws2812.c ****     _delay_us(I2C_DELAY);
 130:drivers/avr/ws2812.c **** 
 131:drivers/avr/ws2812.c ****     // _delay_us(I2C_DELAY);
 132:drivers/avr/ws2812.c ****     // return I2C_ReadBit();
 133:drivers/avr/ws2812.c ****     return 0;
 134:drivers/avr/ws2812.c **** }
 135:drivers/avr/ws2812.c **** 
 136:drivers/avr/ws2812.c **** #endif
 137:drivers/avr/ws2812.c **** 
 138:drivers/avr/ws2812.c **** #ifdef RGB_MATRIX_ENABLE
 139:drivers/avr/ws2812.c **** // Set an led in the buffer to a color
 140:drivers/avr/ws2812.c **** void inline ws2812_setled(int i, uint8_t r, uint8_t g, uint8_t b) {
 141:drivers/avr/ws2812.c ****     led[i].r = r;
 142:drivers/avr/ws2812.c ****     led[i].g = g;
 143:drivers/avr/ws2812.c ****     led[i].b = b;
 144:drivers/avr/ws2812.c **** }
 145:drivers/avr/ws2812.c **** 
 146:drivers/avr/ws2812.c **** void ws2812_setled_all(uint8_t r, uint8_t g, uint8_t b) {
 147:drivers/avr/ws2812.c ****     for (int i = 0; i < sizeof(led) / sizeof(led[0]); i++) {
 148:drivers/avr/ws2812.c ****         led[i].r = r;
 149:drivers/avr/ws2812.c ****         led[i].g = g;
 150:drivers/avr/ws2812.c ****         led[i].b = b;
 151:drivers/avr/ws2812.c ****     }
 152:drivers/avr/ws2812.c **** }
 153:drivers/avr/ws2812.c **** #endif
 154:drivers/avr/ws2812.c **** 
 155:drivers/avr/ws2812.c **** // Setleds for standard RGB
 156:drivers/avr/ws2812.c **** void inline ws2812_setleds(LED_TYPE *ledarray, uint16_t leds) {
 157:drivers/avr/ws2812.c ****     // ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
 158:drivers/avr/ws2812.c ****     ws2812_setleds_pin(ledarray, leds, _BV(RGB_DI_PIN & 0xF));
 159:drivers/avr/ws2812.c **** }
 160:drivers/avr/ws2812.c **** 
 161:drivers/avr/ws2812.c **** void inline ws2812_setleds_pin(LED_TYPE *ledarray, uint16_t leds, uint8_t pinmask) {
 162:drivers/avr/ws2812.c ****     // ws2812_DDRREG |= pinmask; // Enable DDR
 163:drivers/avr/ws2812.c ****     // new universal format (DDR)
 164:drivers/avr/ws2812.c ****     _SFR_IO8((RGB_DI_PIN >> 4) + 1) |= pinmask;
 165:drivers/avr/ws2812.c **** 
 166:drivers/avr/ws2812.c ****     ws2812_sendarray_mask((uint8_t *)ledarray, leds + leds + leds, pinmask);
 167:drivers/avr/ws2812.c ****     _delay_us(50);
 168:drivers/avr/ws2812.c **** }
 169:drivers/avr/ws2812.c **** 
 170:drivers/avr/ws2812.c **** // Setleds for SK6812RGBW
 171:drivers/avr/ws2812.c **** void inline ws2812_setleds_rgbw(LED_TYPE *ledarray, uint16_t leds) {
 172:drivers/avr/ws2812.c **** #ifdef RGBW_BB_TWI
 173:drivers/avr/ws2812.c ****     uint8_t sreg_prev, twcr_prev;
 174:drivers/avr/ws2812.c ****     sreg_prev = SREG;
 175:drivers/avr/ws2812.c ****     twcr_prev = TWCR;
 176:drivers/avr/ws2812.c ****     cli();
 177:drivers/avr/ws2812.c ****     TWCR &= ~(1 << TWEN);
 178:drivers/avr/ws2812.c ****     I2C_Init();
 179:drivers/avr/ws2812.c ****     I2C_Start();
 180:drivers/avr/ws2812.c ****     I2C_Write(0x84);
 181:drivers/avr/ws2812.c ****     uint16_t datlen = leds << 2;
 182:drivers/avr/ws2812.c ****     uint8_t  curbyte;
 183:drivers/avr/ws2812.c ****     uint8_t *data = (uint8_t *)ledarray;
 184:drivers/avr/ws2812.c ****     while (datlen--) {
 185:drivers/avr/ws2812.c ****         curbyte = *data++;
 186:drivers/avr/ws2812.c ****         I2C_Write(curbyte);
 187:drivers/avr/ws2812.c ****     }
 188:drivers/avr/ws2812.c ****     I2C_Stop();
 189:drivers/avr/ws2812.c ****     SREG = sreg_prev;
 190:drivers/avr/ws2812.c ****     TWCR = twcr_prev;
 191:drivers/avr/ws2812.c **** #endif
 192:drivers/avr/ws2812.c **** 
 193:drivers/avr/ws2812.c ****     // ws2812_DDRREG |= _BV(ws2812_pin); // Enable DDR
 194:drivers/avr/ws2812.c ****     // new universal format (DDR)
 195:drivers/avr/ws2812.c ****     _SFR_IO8((RGB_DI_PIN >> 4) + 1) |= _BV(RGB_DI_PIN & 0xF);
 196:drivers/avr/ws2812.c **** 
 197:drivers/avr/ws2812.c ****     ws2812_sendarray_mask((uint8_t *)ledarray, leds << 2, _BV(RGB_DI_PIN & 0xF));
 198:drivers/avr/ws2812.c **** 
 199:drivers/avr/ws2812.c **** #ifndef RGBW_BB_TWI
 200:drivers/avr/ws2812.c ****     _delay_us(80);
 201:drivers/avr/ws2812.c **** #endif
 202:drivers/avr/ws2812.c **** }
 203:drivers/avr/ws2812.c **** 
 204:drivers/avr/ws2812.c **** void ws2812_sendarray(uint8_t *data, uint16_t datlen) { ws2812_sendarray_mask(data, datlen, _BV(RGB
 205:drivers/avr/ws2812.c **** 
 206:drivers/avr/ws2812.c **** /*
 207:drivers/avr/ws2812.c ****   This routine writes an array of bytes with RGB values to the Dataout pin
 208:drivers/avr/ws2812.c ****   using the fast 800kHz clockless WS2811/2812 protocol.
 209:drivers/avr/ws2812.c **** */
 210:drivers/avr/ws2812.c **** 
 211:drivers/avr/ws2812.c **** // Timing in ns
 212:drivers/avr/ws2812.c **** #define w_zeropulse 350
 213:drivers/avr/ws2812.c **** #define w_onepulse 900
 214:drivers/avr/ws2812.c **** #define w_totalperiod 1250
 215:drivers/avr/ws2812.c **** 
 216:drivers/avr/ws2812.c **** // Fixed cycles used by the inner loop
 217:drivers/avr/ws2812.c **** #define w_fixedlow 2
 218:drivers/avr/ws2812.c **** #define w_fixedhigh 4
 219:drivers/avr/ws2812.c **** #define w_fixedtotal 8
 220:drivers/avr/ws2812.c **** 
 221:drivers/avr/ws2812.c **** // Insert NOPs to match the timing, if possible
 222:drivers/avr/ws2812.c **** #define w_zerocycles (((F_CPU / 1000) * w_zeropulse) / 1000000)
 223:drivers/avr/ws2812.c **** #define w_onecycles (((F_CPU / 1000) * w_onepulse + 500000) / 1000000)
 224:drivers/avr/ws2812.c **** #define w_totalcycles (((F_CPU / 1000) * w_totalperiod + 500000) / 1000000)
 225:drivers/avr/ws2812.c **** 
 226:drivers/avr/ws2812.c **** // w1 - nops between rising edge and falling edge - low
 227:drivers/avr/ws2812.c **** #define w1 (w_zerocycles - w_fixedlow)
 228:drivers/avr/ws2812.c **** // w2   nops between fe low and fe high
 229:drivers/avr/ws2812.c **** #define w2 (w_onecycles - w_fixedhigh - w1)
 230:drivers/avr/ws2812.c **** // w3   nops to complete loop
 231:drivers/avr/ws2812.c **** #define w3 (w_totalcycles - w_fixedtotal - w1 - w2)
 232:drivers/avr/ws2812.c **** 
 233:drivers/avr/ws2812.c **** #if w1 > 0
 234:drivers/avr/ws2812.c **** #    define w1_nops w1
 235:drivers/avr/ws2812.c **** #else
 236:drivers/avr/ws2812.c **** #    define w1_nops 0
 237:drivers/avr/ws2812.c **** #endif
 238:drivers/avr/ws2812.c **** 
 239:drivers/avr/ws2812.c **** // The only critical timing parameter is the minimum pulse length of the "0"
 240:drivers/avr/ws2812.c **** // Warn or throw error if this timing can not be met with current F_CPU settings.
 241:drivers/avr/ws2812.c **** #define w_lowtime ((w1_nops + w_fixedlow) * 1000000) / (F_CPU / 1000)
 242:drivers/avr/ws2812.c **** #if w_lowtime > 550
 243:drivers/avr/ws2812.c **** #    error "Light_ws2812: Sorry, the clock speed is too low. Did you set F_CPU correctly?"
 244:drivers/avr/ws2812.c **** #elif w_lowtime > 450
 245:drivers/avr/ws2812.c **** #    warning "Light_ws2812: The timing is critical and may only work on WS2812B, not on WS2812(S)."
 246:drivers/avr/ws2812.c **** #    warning "Please consider a higher clockspeed, if possible"
 247:drivers/avr/ws2812.c **** #endif
 248:drivers/avr/ws2812.c **** 
 249:drivers/avr/ws2812.c **** #if w2 > 0
 250:drivers/avr/ws2812.c **** #    define w2_nops w2
 251:drivers/avr/ws2812.c **** #else
 252:drivers/avr/ws2812.c **** #    define w2_nops 0
 253:drivers/avr/ws2812.c **** #endif
 254:drivers/avr/ws2812.c **** 
 255:drivers/avr/ws2812.c **** #if w3 > 0
 256:drivers/avr/ws2812.c **** #    define w3_nops w3
 257:drivers/avr/ws2812.c **** #else
 258:drivers/avr/ws2812.c **** #    define w3_nops 0
 259:drivers/avr/ws2812.c **** #endif
 260:drivers/avr/ws2812.c **** 
 261:drivers/avr/ws2812.c **** #define w_nop1 "nop      \n\t"
 262:drivers/avr/ws2812.c **** #define w_nop2 "rjmp .+0 \n\t"
 263:drivers/avr/ws2812.c **** #define w_nop4 w_nop2 w_nop2
 264:drivers/avr/ws2812.c **** #define w_nop8 w_nop4 w_nop4
 265:drivers/avr/ws2812.c **** #define w_nop16 w_nop8 w_nop8
 266:drivers/avr/ws2812.c **** 
 267:drivers/avr/ws2812.c **** void inline ws2812_sendarray_mask(uint8_t *data, uint16_t datlen, uint8_t maskhi) {
  16               		.loc 1 267 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 268:drivers/avr/ws2812.c ****     uint8_t curbyte, ctr, masklo;
 269:drivers/avr/ws2812.c ****     uint8_t sreg_prev;
 270:drivers/avr/ws2812.c **** 
 271:drivers/avr/ws2812.c ****     // masklo  =~maskhi&ws2812_PORTREG;
 272:drivers/avr/ws2812.c ****     // maskhi |=        ws2812_PORTREG;
 273:drivers/avr/ws2812.c ****     masklo = ~maskhi & _SFR_IO8((RGB_DI_PIN >> 4) + 2);
  23               		.loc 1 273 0
  24 0000 3BB1      		in r19,0xb
  25 0002 242F      		mov r18,r20
  26 0004 2095      		com r18
  27 0006 2323      		and r18,r19
  28               	.LVL1:
 274:drivers/avr/ws2812.c ****     maskhi |= _SFR_IO8((RGB_DI_PIN >> 4) + 2);
  29               		.loc 1 274 0
  30 0008 3BB1      		in r19,0xb
  31 000a 432B      		or r20,r19
  32               	.LVL2:
 275:drivers/avr/ws2812.c ****     sreg_prev = SREG;
  33               		.loc 1 275 0
  34 000c 3FB7      		in r19,__SREG__
  35               	.LVL3:
 276:drivers/avr/ws2812.c ****     cli();
  36               		.loc 1 276 0
  37               	/* #APP */
  38               	 ;  276 "drivers/avr/ws2812.c" 1
  39 000e F894      		cli
  40               	 ;  0 "" 2
  41               	/* #NOAPP */
  42 0010 FC01      		movw r30,r24
  43 0012 680F      		add r22,r24
  44 0014 791F      		adc r23,r25
  45               	.LVL4:
  46               	.L2:
 277:drivers/avr/ws2812.c **** 
 278:drivers/avr/ws2812.c ****     while (datlen--) {
  47               		.loc 1 278 0
  48 0016 E617      		cp r30,r22
  49 0018 F707      		cpc r31,r23
  50 001a 01F4      		brne .L3
 279:drivers/avr/ws2812.c ****         curbyte = (*data++);
 280:drivers/avr/ws2812.c **** 
 281:drivers/avr/ws2812.c ****         asm volatile("       ldi   %0,8  \n\t"
 282:drivers/avr/ws2812.c ****                      "loop%=:            \n\t"
 283:drivers/avr/ws2812.c ****                      "       out   %2,%3 \n\t"  //  '1' [01] '0' [01] - re
 284:drivers/avr/ws2812.c **** #if (w1_nops & 1)
 285:drivers/avr/ws2812.c ****                      w_nop1
 286:drivers/avr/ws2812.c **** #endif
 287:drivers/avr/ws2812.c **** #if (w1_nops & 2)
 288:drivers/avr/ws2812.c ****                          w_nop2
 289:drivers/avr/ws2812.c **** #endif
 290:drivers/avr/ws2812.c **** #if (w1_nops & 4)
 291:drivers/avr/ws2812.c ****                              w_nop4
 292:drivers/avr/ws2812.c **** #endif
 293:drivers/avr/ws2812.c **** #if (w1_nops & 8)
 294:drivers/avr/ws2812.c ****                                  w_nop8
 295:drivers/avr/ws2812.c **** #endif
 296:drivers/avr/ws2812.c **** #if (w1_nops & 16)
 297:drivers/avr/ws2812.c ****                                      w_nop16
 298:drivers/avr/ws2812.c **** #endif
 299:drivers/avr/ws2812.c ****                      "       sbrs  %1,7  \n\t"  //  '1' [03] '0' [02]
 300:drivers/avr/ws2812.c ****                      "       out   %2,%4 \n\t"  //  '1' [--] '0' [03] - fe-low
 301:drivers/avr/ws2812.c ****                      "       lsl   %1    \n\t"  //  '1' [04] '0' [04]
 302:drivers/avr/ws2812.c **** #if (w2_nops & 1)
 303:drivers/avr/ws2812.c ****                      w_nop1
 304:drivers/avr/ws2812.c **** #endif
 305:drivers/avr/ws2812.c **** #if (w2_nops & 2)
 306:drivers/avr/ws2812.c ****                          w_nop2
 307:drivers/avr/ws2812.c **** #endif
 308:drivers/avr/ws2812.c **** #if (w2_nops & 4)
 309:drivers/avr/ws2812.c ****                              w_nop4
 310:drivers/avr/ws2812.c **** #endif
 311:drivers/avr/ws2812.c **** #if (w2_nops & 8)
 312:drivers/avr/ws2812.c ****                                  w_nop8
 313:drivers/avr/ws2812.c **** #endif
 314:drivers/avr/ws2812.c **** #if (w2_nops & 16)
 315:drivers/avr/ws2812.c ****                                      w_nop16
 316:drivers/avr/ws2812.c **** #endif
 317:drivers/avr/ws2812.c ****                      "       out   %2,%4 \n\t"  //  '1' [+1] '0' [+1] - fe-high
 318:drivers/avr/ws2812.c **** #if (w3_nops & 1)
 319:drivers/avr/ws2812.c ****                      w_nop1
 320:drivers/avr/ws2812.c **** #endif
 321:drivers/avr/ws2812.c **** #if (w3_nops & 2)
 322:drivers/avr/ws2812.c ****                          w_nop2
 323:drivers/avr/ws2812.c **** #endif
 324:drivers/avr/ws2812.c **** #if (w3_nops & 4)
 325:drivers/avr/ws2812.c ****                              w_nop4
 326:drivers/avr/ws2812.c **** #endif
 327:drivers/avr/ws2812.c **** #if (w3_nops & 8)
 328:drivers/avr/ws2812.c ****                                  w_nop8
 329:drivers/avr/ws2812.c **** #endif
 330:drivers/avr/ws2812.c **** #if (w3_nops & 16)
 331:drivers/avr/ws2812.c ****                                      w_nop16
 332:drivers/avr/ws2812.c **** #endif
 333:drivers/avr/ws2812.c **** 
 334:drivers/avr/ws2812.c ****                      "       dec   %0    \n\t"  //  '1' [+2] '0' [+2]
 335:drivers/avr/ws2812.c ****                      "       brne  loop%=\n\t"  //  '1' [+3] '0' [+4]
 336:drivers/avr/ws2812.c ****                      : "=&d"(ctr)
 337:drivers/avr/ws2812.c ****                      : "r"(curbyte), "I"(_SFR_IO_ADDR(_SFR_IO8((RGB_DI_PIN >> 4) + 2))), "r"(maskhi
 338:drivers/avr/ws2812.c ****     }
 339:drivers/avr/ws2812.c **** 
 340:drivers/avr/ws2812.c ****     SREG = sreg_prev;
  51               		.loc 1 340 0
  52 001c 3FBF      		out __SREG__,r19
  53               	/* epilogue start */
 341:drivers/avr/ws2812.c **** }
  54               		.loc 1 341 0
  55 001e 0895      		ret
  56               	.L3:
  57               	.LVL5:
 279:drivers/avr/ws2812.c ****         curbyte = (*data++);
  58               		.loc 1 279 0
  59 0020 8191      		ld r24,Z+
  60               	.LVL6:
 281:drivers/avr/ws2812.c ****                      "loop%=:            \n\t"
  61               		.loc 1 281 0
  62               	/* #APP */
  63               	 ;  281 "drivers/avr/ws2812.c" 1
  64 0022 98E0      		       ldi   r25,8  
  65               		loop46:            
  66 0024 4BB9      		       out   11,r20 
  67 0026 0000      		nop      
  68 0028 00C0      		rjmp .+0 
  69 002a 87FF      		       sbrs  r24,7  
  70 002c 2BB9      		       out   11,r18 
  71 002e 880F      		       lsl   r24    
  72 0030 0000      		nop      
  73 0032 00C0      		rjmp .+0 
  74 0034 00C0      		rjmp .+0 
  75 0036 00C0      		rjmp .+0 
  76 0038 2BB9      		       out   11,r18 
  77 003a 00C0      		rjmp .+0 
  78 003c 9A95      		       dec   r25    
  79 003e 01F4      		       brne  loop46
  80               		
  81               	 ;  0 "" 2
  82               	.LVL7:
  83               	/* #NOAPP */
  84 0040 00C0      		rjmp .L2
  85               		.cfi_endproc
  86               	.LFE10:
  88               		.section	.text.ws2812_setleds_pin,"ax",@progbits
  89               	.global	ws2812_setleds_pin
  91               	ws2812_setleds_pin:
  92               	.LFB7:
 161:drivers/avr/ws2812.c ****     // ws2812_DDRREG |= pinmask; // Enable DDR
  93               		.loc 1 161 0
  94               		.cfi_startproc
  95               	.LVL8:
  96               	/* prologue: function */
  97               	/* frame size = 0 */
  98               	/* stack size = 0 */
  99               	.L__stack_usage = 0
 164:drivers/avr/ws2812.c **** 
 100               		.loc 1 164 0
 101 0000 2AB1      		in r18,0xa
 102 0002 242B      		or r18,r20
 103 0004 2AB9      		out 0xa,r18
 166:drivers/avr/ws2812.c ****     _delay_us(50);
 104               		.loc 1 166 0
 105 0006 9B01      		movw r18,r22
 106 0008 220F      		lsl r18
 107 000a 331F      		rol r19
 108 000c 620F      		add r22,r18
 109 000e 731F      		adc r23,r19
 110               	.LVL9:
 111 0010 0E94 0000 		call ws2812_sendarray_mask
 112               	.LVL10:
 113               	.LBB6:
 114               	.LBB7:
 115               		.file 2 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h"
   1:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 189:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #else
 190:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	{
 196:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		{
 200:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		}
 204:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		return;
 205:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	}
 206:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	else
 207:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #endif
 210:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** }
 211:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 212:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** /**
 213:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 215:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 217:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 220:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 222:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 226:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 231:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 236:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    respectively.
 240:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 241:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \note
 242:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 243:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 253:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****  */
 254:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** void
 255:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** _delay_us(double __us)
 256:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** {
 257:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	double __tmp ;
 258:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 262:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 263:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 264:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 265:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 268:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 271:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#else
 272:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		//round up by default
 273:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 274:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	#endif
 275:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 
 276:/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 116               		.loc 2 276 0
 117 0014 87EC      		ldi r24,lo8(199)
 118 0016 90E0      		ldi r25,hi8(199)
 119 0018 0197      	1:	sbiw r24,1
 120 001a 01F4      		brne 1b
 121 001c 00C0      		rjmp .
 122 001e 0000      		nop
 123               	.LVL11:
 124               	/* epilogue start */
 125               	.LBE7:
 126               	.LBE6:
 168:drivers/avr/ws2812.c **** 
 127               		.loc 1 168 0
 128 0020 0895      		ret
 129               		.cfi_endproc
 130               	.LFE7:
 132               		.section	.text.ws2812_setleds,"ax",@progbits
 133               	.global	ws2812_setleds
 135               	ws2812_setleds:
 136               	.LFB6:
 156:drivers/avr/ws2812.c ****     // ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
 137               		.loc 1 156 0
 138               		.cfi_startproc
 139               	.LVL12:
 140               	/* prologue: function */
 141               	/* frame size = 0 */
 142               	/* stack size = 0 */
 143               	.L__stack_usage = 0
 158:drivers/avr/ws2812.c **** }
 144               		.loc 1 158 0
 145 0000 48E0      		ldi r20,lo8(8)
 146 0002 0C94 0000 		jmp ws2812_setleds_pin
 147               	.LVL13:
 148               		.cfi_endproc
 149               	.LFE6:
 151               		.section	.text.ws2812_setleds_rgbw,"ax",@progbits
 152               	.global	ws2812_setleds_rgbw
 154               	ws2812_setleds_rgbw:
 155               	.LFB8:
 171:drivers/avr/ws2812.c **** #ifdef RGBW_BB_TWI
 156               		.loc 1 171 0
 157               		.cfi_startproc
 158               	.LVL14:
 159               	/* prologue: function */
 160               	/* frame size = 0 */
 161               	/* stack size = 0 */
 162               	.L__stack_usage = 0
 195:drivers/avr/ws2812.c **** 
 163               		.loc 1 195 0
 164 0000 539A      		sbi 0xa,3
 197:drivers/avr/ws2812.c **** 
 165               		.loc 1 197 0
 166 0002 660F      		lsl r22
 167 0004 771F      		rol r23
 168 0006 660F      		lsl r22
 169 0008 771F      		rol r23
 170               	.LVL15:
 171 000a 48E0      		ldi r20,lo8(8)
 172 000c 0E94 0000 		call ws2812_sendarray_mask
 173               	.LVL16:
 174               	.LBB8:
 175               	.LBB9:
 176               		.loc 2 276 0
 177 0010 8FE3      		ldi r24,lo8(319)
 178 0012 91E0      		ldi r25,hi8(319)
 179 0014 0197      	1:	sbiw r24,1
 180 0016 01F4      		brne 1b
 181 0018 00C0      		rjmp .
 182 001a 0000      		nop
 183               	.LVL17:
 184               	/* epilogue start */
 185               	.LBE9:
 186               	.LBE8:
 202:drivers/avr/ws2812.c **** 
 187               		.loc 1 202 0
 188 001c 0895      		ret
 189               		.cfi_endproc
 190               	.LFE8:
 192               		.section	.text.ws2812_sendarray,"ax",@progbits
 193               	.global	ws2812_sendarray
 195               	ws2812_sendarray:
 196               	.LFB9:
 204:drivers/avr/ws2812.c **** 
 197               		.loc 1 204 0
 198               		.cfi_startproc
 199               	.LVL18:
 200               	/* prologue: function */
 201               	/* frame size = 0 */
 202               	/* stack size = 0 */
 203               	.L__stack_usage = 0
 204:drivers/avr/ws2812.c **** 
 204               		.loc 1 204 0
 205 0000 48E0      		ldi r20,lo8(8)
 206 0002 0C94 0000 		jmp ws2812_sendarray_mask
 207               	.LVL19:
 208               		.cfi_endproc
 209               	.LFE9:
 211               		.text
 212               	.Letext0:
 213               		.file 3 "/usr/local/Cellar/avr-gcc@7/7.4.0/avr/include/stdint.h"
 214               		.file 4 "./quantum/color.h"
 215               		.file 5 "tmk_core/common/debug.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ws2812.c
/var/tmp//cc5uvQan.s:2      *ABS*:000000000000003e __SP_H__
/var/tmp//cc5uvQan.s:3      *ABS*:000000000000003d __SP_L__
/var/tmp//cc5uvQan.s:4      *ABS*:000000000000003f __SREG__
/var/tmp//cc5uvQan.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/tmp//cc5uvQan.s:6      *ABS*:0000000000000001 __zero_reg__
/var/tmp//cc5uvQan.s:13     .text.ws2812_sendarray_mask:0000000000000000 ws2812_sendarray_mask
/var/tmp//cc5uvQan.s:65     .text.ws2812_sendarray_mask:0000000000000024 loop46
/var/tmp//cc5uvQan.s:91     .text.ws2812_setleds_pin:0000000000000000 ws2812_setleds_pin
/var/tmp//cc5uvQan.s:135    .text.ws2812_setleds:0000000000000000 ws2812_setleds
/var/tmp//cc5uvQan.s:154    .text.ws2812_setleds_rgbw:0000000000000000 ws2812_setleds_rgbw
/var/tmp//cc5uvQan.s:195    .text.ws2812_sendarray:0000000000000000 ws2812_sendarray

NO UNDEFINED SYMBOLS
