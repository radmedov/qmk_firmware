   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"dip_switch.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.dip_switch_update_user,"ax",%progbits
  16              		.align	1
  17              		.weak	dip_switch_update_user
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	dip_switch_update_user:
  24              	.LFB287:
  25              		.file 1 "quantum/dip_switch.c"
   1:quantum/dip_switch.c **** /*
   2:quantum/dip_switch.c ****  * Copyright 2018 Jack Humbert <jack.humb@gmail.com>
   3:quantum/dip_switch.c ****  * Copyright 2019 Drashna Jaelre (Christopher Courtney) <drashna@live.com>
   4:quantum/dip_switch.c ****  *
   5:quantum/dip_switch.c ****  * This program is free software: you can redistribute it and/or modify
   6:quantum/dip_switch.c ****  * it under the terms of the GNU General Public License as published by
   7:quantum/dip_switch.c ****  * the Free Software Foundation, either version 2 of the License, or
   8:quantum/dip_switch.c ****  * (at your option) any later version.
   9:quantum/dip_switch.c ****  *
  10:quantum/dip_switch.c ****  * This program is distributed in the hope that it will be useful,
  11:quantum/dip_switch.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:quantum/dip_switch.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:quantum/dip_switch.c ****  * GNU General Public License for more details.
  14:quantum/dip_switch.c ****  *
  15:quantum/dip_switch.c ****  * You should have received a copy of the GNU General Public License
  16:quantum/dip_switch.c ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:quantum/dip_switch.c ****  */
  18:quantum/dip_switch.c **** 
  19:quantum/dip_switch.c **** #include "dip_switch.h"
  20:quantum/dip_switch.c **** 
  21:quantum/dip_switch.c **** // for memcpy
  22:quantum/dip_switch.c **** #include <string.h>
  23:quantum/dip_switch.c **** 
  24:quantum/dip_switch.c **** 
  25:quantum/dip_switch.c **** #if !defined(DIP_SWITCH_PINS)
  26:quantum/dip_switch.c **** #   error "No DIP switch pads defined by DIP_SWITCH_PINS"
  27:quantum/dip_switch.c **** #endif
  28:quantum/dip_switch.c **** 
  29:quantum/dip_switch.c **** #define NUMBER_OF_DIP_SWITCHES (sizeof(dip_switch_pad)/sizeof(pin_t))
  30:quantum/dip_switch.c **** static pin_t dip_switch_pad[] = DIP_SWITCH_PINS;
  31:quantum/dip_switch.c **** static bool dip_switch_state[NUMBER_OF_DIP_SWITCHES] = { 0 };
  32:quantum/dip_switch.c **** static bool last_dip_switch_state[NUMBER_OF_DIP_SWITCHES] = { 0 };
  33:quantum/dip_switch.c **** 
  34:quantum/dip_switch.c **** 
  35:quantum/dip_switch.c **** __attribute__((weak))
  36:quantum/dip_switch.c **** void dip_switch_update_user(uint8_t index, bool active) {}
  26              		.loc 1 36 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32              		.loc 1 36 0
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE287:
  37              		.section	.text.dip_switch_update_kb,"ax",%progbits
  38              		.align	1
  39              		.weak	dip_switch_update_kb
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu softvfp
  45              	dip_switch_update_kb:
  46              	.LFB288:
  37:quantum/dip_switch.c **** 
  38:quantum/dip_switch.c **** __attribute__((weak))
  39:quantum/dip_switch.c **** void dip_switch_update_kb(uint8_t index, bool active) { dip_switch_update_user(index, active); }
  47              		.loc 1 39 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              	.LVL1:
  52 0000 08B5     		push	{r3, lr}
  53              		.cfi_def_cfa_offset 8
  54              		.cfi_offset 3, -8
  55              		.cfi_offset 14, -4
  56              		.loc 1 39 0
  57 0002 FFF7FEFF 		bl	dip_switch_update_user
  58              	.LVL2:
  59 0006 08BD     		pop	{r3, pc}
  60              		.cfi_endproc
  61              	.LFE288:
  63              		.section	.text.dip_switch_update_mask_user,"ax",%progbits
  64              		.align	1
  65              		.weak	dip_switch_update_mask_user
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu softvfp
  71              	dip_switch_update_mask_user:
  72              	.LFB289:
  40:quantum/dip_switch.c **** 
  41:quantum/dip_switch.c **** __attribute__((weak))
  42:quantum/dip_switch.c **** void dip_switch_update_mask_user(uint32_t state) {}
  73              		.loc 1 42 0
  74              		.cfi_startproc
  75              		@ args = 0, pretend = 0, frame = 0
  76              		@ frame_needed = 0, uses_anonymous_args = 0
  77              		@ link register save eliminated.
  78              	.LVL3:
  79              		.loc 1 42 0
  80 0000 7047     		bx	lr
  81              		.cfi_endproc
  82              	.LFE289:
  84              		.section	.text.dip_switch_update_mask_kb,"ax",%progbits
  85              		.align	1
  86              		.weak	dip_switch_update_mask_kb
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  90              		.fpu softvfp
  92              	dip_switch_update_mask_kb:
  93              	.LFB290:
  43:quantum/dip_switch.c **** 
  44:quantum/dip_switch.c **** __attribute__((weak))
  45:quantum/dip_switch.c **** void dip_switch_update_mask_kb(uint32_t state) { dip_switch_update_mask_user(state); }
  94              		.loc 1 45 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              	.LVL4:
  99 0000 08B5     		push	{r3, lr}
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 3, -8
 102              		.cfi_offset 14, -4
 103              		.loc 1 45 0
 104 0002 FFF7FEFF 		bl	dip_switch_update_mask_user
 105              	.LVL5:
 106 0006 08BD     		pop	{r3, pc}
 107              		.cfi_endproc
 108              	.LFE290:
 110              		.section	.text.dip_switch_read,"ax",%progbits
 111              		.align	1
 112              		.global	dip_switch_read
 113              		.syntax unified
 114              		.thumb
 115              		.thumb_func
 116              		.fpu softvfp
 118              	dip_switch_read:
 119              	.LFB292:
  46:quantum/dip_switch.c **** 
  47:quantum/dip_switch.c **** void dip_switch_init(void) {
  48:quantum/dip_switch.c ****   for (uint8_t i = 0; i < NUMBER_OF_DIP_SWITCHES; i++) {
  49:quantum/dip_switch.c ****     setPinInputHigh(dip_switch_pad[i]);
  50:quantum/dip_switch.c ****   }
  51:quantum/dip_switch.c ****   dip_switch_read(true);
  52:quantum/dip_switch.c **** }
  53:quantum/dip_switch.c **** 
  54:quantum/dip_switch.c **** 
  55:quantum/dip_switch.c **** void dip_switch_read(bool forced) {
 120              		.loc 1 55 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              	.LVL6:
 125 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 126              		.cfi_def_cfa_offset 32
 127              		.cfi_offset 4, -32
 128              		.cfi_offset 5, -28
 129              		.cfi_offset 6, -24
 130              		.cfi_offset 7, -20
 131              		.cfi_offset 8, -16
 132              		.cfi_offset 9, -12
 133              		.cfi_offset 10, -8
 134              		.cfi_offset 14, -4
 135              	.LBB2:
  56:quantum/dip_switch.c ****     bool has_dip_state_changed = false;
  57:quantum/dip_switch.c ****     uint32_t dip_switch_mask = 0;
  58:quantum/dip_switch.c **** 
  59:quantum/dip_switch.c ****     for (uint8_t i = 0; i < NUMBER_OF_DIP_SWITCHES; i++) {
  60:quantum/dip_switch.c ****         dip_switch_state[i] = !readPin(dip_switch_pad[i]);
 136              		.loc 1 60 0
 137 0004 174E     		ldr	r6, .L17
 138 0006 DFF86490 		ldr	r9, .L17+8
 139              	.LBE2:
  55:quantum/dip_switch.c ****     bool has_dip_state_changed = false;
 140              		.loc 1 55 0
 141 000a 0024     		movs	r4, #0
 142 000c 8046     		mov	r8, r0
  57:quantum/dip_switch.c **** 
 143              		.loc 1 57 0
 144 000e 2546     		mov	r5, r4
  56:quantum/dip_switch.c ****     bool has_dip_state_changed = false;
 145              		.loc 1 56 0
 146 0010 2246     		mov	r2, r4
 147 0012 3746     		mov	r7, r6
 148              	.LVL7:
 149              	.L8:
 150              	.LBB3:
 151              		.loc 1 60 0
 152 0014 59F82410 		ldr	r1, [r9, r4, lsl #2]
 153 0018 21F00F03 		bic	r3, r1, #15
 154 001c 01F00F01 		and	r1, r1, #15
 155 0020 1B69     		ldr	r3, [r3, #16]
 156 0022 CB40     		lsrs	r3, r3, r1
 157 0024 DB43     		mvns	r3, r3
 158 0026 03F00103 		and	r3, r3, #1
 159 002a D9B2     		uxtb	r1, r3
  61:quantum/dip_switch.c ****         dip_switch_mask |= dip_switch_state[i] << i;
 160              		.loc 1 61 0
 161 002c A340     		lsls	r3, r3, r4
 162 002e 1D43     		orrs	r5, r5, r3
  62:quantum/dip_switch.c ****         if (last_dip_switch_state[i] ^ dip_switch_state[i] || forced) {
 163              		.loc 1 62 0
 164 0030 0D4B     		ldr	r3, .L17+4
  60:quantum/dip_switch.c ****         dip_switch_mask |= dip_switch_state[i] << i;
 165              		.loc 1 60 0
 166 0032 A155     		strb	r1, [r4, r6]
 167              		.loc 1 62 0
 168 0034 14F803C0 		ldrb	ip, [r4, r3]	@ zero_extendqisi2
 169 0038 8C45     		cmp	ip, r1
 170 003a E0B2     		uxtb	r0, r4
 171              	.LVL8:
 172 003c 9A46     		mov	r10, r3
 173 003e 02D1     		bne	.L6
 174              		.loc 1 62 0 is_stmt 0 discriminator 1
 175 0040 B8F1000F 		cmp	r8, #0
 176 0044 02D0     		beq	.L7
 177              	.L6:
 178              	.LVL9:
  63:quantum/dip_switch.c ****             has_dip_state_changed = true;
  64:quantum/dip_switch.c ****             dip_switch_update_kb(i, dip_switch_state[i]);
 179              		.loc 1 64 0 is_stmt 1
 180 0046 FFF7FEFF 		bl	dip_switch_update_kb
 181              	.LVL10:
  63:quantum/dip_switch.c ****             has_dip_state_changed = true;
 182              		.loc 1 63 0
 183 004a 0122     		movs	r2, #1
 184              	.LVL11:
 185              	.L7:
 186 004c 0134     		adds	r4, r4, #1
 187              	.LVL12:
  59:quantum/dip_switch.c ****         dip_switch_state[i] = !readPin(dip_switch_pad[i]);
 188              		.loc 1 59 0 discriminator 2
 189 004e 042C     		cmp	r4, #4
 190 0050 E0D1     		bne	.L8
 191              	.LBE3:
  65:quantum/dip_switch.c ****         }
  66:quantum/dip_switch.c ****     }
  67:quantum/dip_switch.c ****     if (has_dip_state_changed) {
 192              		.loc 1 67 0
 193 0052 12B1     		cbz	r2, .L9
  68:quantum/dip_switch.c ****         dip_switch_update_mask_kb(dip_switch_mask);
 194              		.loc 1 68 0
 195 0054 2846     		mov	r0, r5
 196 0056 FFF7FEFF 		bl	dip_switch_update_mask_kb
 197              	.LVL13:
 198              	.L9:
  69:quantum/dip_switch.c ****     }
  70:quantum/dip_switch.c ****     memcpy(last_dip_switch_state, dip_switch_state, sizeof(&dip_switch_state));
 199              		.loc 1 70 0
 200 005a 3B68     		ldr	r3, [r7]	@ unaligned
 201 005c CAF80030 		str	r3, [r10]	@ unaligned
  71:quantum/dip_switch.c **** }
 202              		.loc 1 71 0
 203 0060 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 204              	.LVL14:
 205              	.L18:
 206              		.align	2
 207              	.L17:
 208 0064 00000000 		.word	.LANCHOR1
 209 0068 00000000 		.word	.LANCHOR2
 210 006c 00000000 		.word	.LANCHOR0
 211              		.cfi_endproc
 212              	.LFE292:
 214              		.section	.text.dip_switch_init,"ax",%progbits
 215              		.align	1
 216              		.global	dip_switch_init
 217              		.syntax unified
 218              		.thumb
 219              		.thumb_func
 220              		.fpu softvfp
 222              	dip_switch_init:
 223              	.LFB291:
  47:quantum/dip_switch.c ****   for (uint8_t i = 0; i < NUMBER_OF_DIP_SWITCHES; i++) {
 224              		.loc 1 47 0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 0
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228              	.LVL15:
 229 0000 70B5     		push	{r4, r5, r6, lr}
 230              		.cfi_def_cfa_offset 16
 231              		.cfi_offset 4, -16
 232              		.cfi_offset 5, -12
 233              		.cfi_offset 6, -8
 234              		.cfi_offset 14, -4
 235              	.LBB4:
  49:quantum/dip_switch.c ****   }
 236              		.loc 1 49 0
 237 0002 0B4E     		ldr	r6, .L22
 238              	.LBE4:
  47:quantum/dip_switch.c ****   for (uint8_t i = 0; i < NUMBER_OF_DIP_SWITCHES; i++) {
 239              		.loc 1 47 0
 240 0004 0024     		movs	r4, #0
 241              	.LBB5:
  49:quantum/dip_switch.c ****   }
 242              		.loc 1 49 0
 243 0006 0125     		movs	r5, #1
 244              	.LVL16:
 245              	.L20:
  49:quantum/dip_switch.c ****   }
 246              		.loc 1 49 0 is_stmt 0 discriminator 3
 247 0008 56F82400 		ldr	r0, [r6, r4, lsl #2]
 248 000c 00F00F01 		and	r1, r0, #15
 249 0010 2022     		movs	r2, #32
 250 0012 05FA01F1 		lsl	r1, r5, r1
 251 0016 20F00F00 		bic	r0, r0, #15
 252 001a 0134     		adds	r4, r4, #1
 253              	.LVL17:
 254 001c FFF7FEFF 		bl	_pal_lld_setgroupmode
 255              	.LVL18:
  48:quantum/dip_switch.c ****     setPinInputHigh(dip_switch_pad[i]);
 256              		.loc 1 48 0 is_stmt 1 discriminator 3
 257 0020 042C     		cmp	r4, #4
 258 0022 F1D1     		bne	.L20
 259              	.LBE5:
  51:quantum/dip_switch.c **** }
 260              		.loc 1 51 0
 261 0024 0120     		movs	r0, #1
  52:quantum/dip_switch.c **** 
 262              		.loc 1 52 0
 263 0026 BDE87040 		pop	{r4, r5, r6, lr}
 264              		.cfi_restore 14
 265              		.cfi_restore 6
 266              		.cfi_restore 5
 267              		.cfi_restore 4
 268              		.cfi_def_cfa_offset 0
  51:quantum/dip_switch.c **** }
 269              		.loc 1 51 0
 270 002a FFF7FEBF 		b	dip_switch_read
 271              	.LVL19:
 272              	.L23:
 273 002e 00BF     		.align	2
 274              	.L22:
 275 0030 00000000 		.word	.LANCHOR0
 276              		.cfi_endproc
 277              	.LFE291:
 279              		.section	.bss.dip_switch_state,"aw",%nobits
 280              		.set	.LANCHOR1,. + 0
 283              	dip_switch_state:
 284 0000 00000000 		.space	4
 285              		.section	.bss.last_dip_switch_state,"aw",%nobits
 286              		.set	.LANCHOR2,. + 0
 289              	last_dip_switch_state:
 290 0000 00000000 		.space	4
 291              		.section	.rodata.dip_switch_pad,"a",%progbits
 292              		.align	2
 293              		.set	.LANCHOR0,. + 0
 296              	dip_switch_pad:
 297 0000 0E040048 		.word	1207960590
 298 0004 0F000048 		.word	1207959567
 299 0008 00000048 		.word	1207959552
 300 000c 09040048 		.word	1207960585
 301              		.text
 302              	.Letext0:
 303              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 304              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 305              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 306              		.file 5 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 307              		.file 6 "./lib/chibios/os/rt/include/chsystypes.h"
 308              		.file 7 "./lib/chibios/os/rt/include/chschd.h"
 309              		.file 8 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 310              		.file 9 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 311              		.file 10 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/stm32f303xc.h"
 312              		.file 11 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 313              		.file 12 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 314              		.file 13 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 315              		.file 14 "./lib/chibios/os/rt/include/chtm.h"
 316              		.file 15 "./lib/chibios/os/rt/include/chsem.h"
 317              		.file 16 "./lib/chibios/os/rt/include/chmtx.h"
 318              		.file 17 "./lib/chibios/os/rt/include/chsys.h"
 319              		.file 18 "./lib/chibios/os/rt/include/chregistry.h"
 320              		.file 19 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 321              		.file 20 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 322              		.file 21 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 323              		.file 22 "./lib/chibios/os/hal/include/hal_dac.h"
 324              		.file 23 "./lib/chibios/os/hal/ports/STM32/LLD/DACv1/hal_dac_lld.h"
 325              		.file 24 "./lib/chibios/os/hal/include/hal_gpt.h"
 326              		.file 25 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_gpt_lld.h"
 327              		.file 26 "./lib/chibios/os/hal/include/hal_i2c.h"
 328              		.file 27 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 329              		.file 28 "./lib/chibios/os/hal/include/hal_pwm.h"
 330              		.file 29 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 331              		.file 30 "./lib/chibios/os/hal/include/hal_usb.h"
 332              		.file 31 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 333              		.file 32 "tmk_core/common/action.h"
 334              		.file 33 "tmk_core/common/report.h"
 335              		.file 34 "tmk_core/common/host.h"
 336              		.file 35 "tmk_core/common/debug.h"
 337              		.file 36 "quantum/keycode_config.h"
 338              		.file 37 "quantum/keymap.h"
 339              		.file 38 "tmk_core/common/action_layer.h"
 340              		.file 39 "tmk_core/common/timer.h"
 341              		.file 40 "tmk_core/common/action_util.h"
 342              		.file 41 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/lock.h"
 343              		.file 42 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_types.h"
 344              		.file 43 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/reent.h"
 345              		.file 44 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/stdlib.h"
 346              		.file 45 "quantum/audio/luts.h"
 347              		.file 46 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/math.h"
 348              		.file 47 "quantum/process_keycode/process_music.h"
 349              		.file 48 "quantum/quantum.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 dip_switch.c
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:16     .text.dip_switch_update_user:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:23     .text.dip_switch_update_user:0000000000000000 dip_switch_update_user
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:38     .text.dip_switch_update_kb:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:45     .text.dip_switch_update_kb:0000000000000000 dip_switch_update_kb
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:64     .text.dip_switch_update_mask_user:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:71     .text.dip_switch_update_mask_user:0000000000000000 dip_switch_update_mask_user
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:85     .text.dip_switch_update_mask_kb:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:92     .text.dip_switch_update_mask_kb:0000000000000000 dip_switch_update_mask_kb
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:111    .text.dip_switch_read:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:118    .text.dip_switch_read:0000000000000000 dip_switch_read
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:208    .text.dip_switch_read:0000000000000064 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:215    .text.dip_switch_init:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:222    .text.dip_switch_init:0000000000000000 dip_switch_init
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:275    .text.dip_switch_init:0000000000000030 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:283    .bss.dip_switch_state:0000000000000000 dip_switch_state
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:284    .bss.dip_switch_state:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:289    .bss.last_dip_switch_state:0000000000000000 last_dip_switch_state
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:290    .bss.last_dip_switch_state:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:292    .rodata.dip_switch_pad:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cce6fAni.s:296    .rodata.dip_switch_pad:0000000000000000 dip_switch_pad

UNDEFINED SYMBOLS
_pal_lld_setgroupmode
