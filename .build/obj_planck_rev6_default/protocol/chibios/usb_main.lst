   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"usb_main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.set_led_transfer_cb,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	set_led_transfer_cb:
  23              	.LFB282:
  24              		.file 1 "tmk_core/protocol/chibios/usb_main.c"
   1:tmk_core/protocol/chibios/usb_main.c **** /*
   2:tmk_core/protocol/chibios/usb_main.c ****  * (c) 2015 flabberast <s3+flabbergast@sdfeu.org>
   3:tmk_core/protocol/chibios/usb_main.c ****  *
   4:tmk_core/protocol/chibios/usb_main.c ****  * Based on the following work:
   5:tmk_core/protocol/chibios/usb_main.c ****  *  - Guillaume Duc's raw hid example (MIT License)
   6:tmk_core/protocol/chibios/usb_main.c ****  *    https://github.com/guiduc/usb-hid-chibios-example
   7:tmk_core/protocol/chibios/usb_main.c ****  *  - PJRC Teensy examples (MIT License)
   8:tmk_core/protocol/chibios/usb_main.c ****  *    https://www.pjrc.com/teensy/usb_keyboard.html
   9:tmk_core/protocol/chibios/usb_main.c ****  *  - hasu's TMK keyboard code (GPL v2 and some code Modified BSD)
  10:tmk_core/protocol/chibios/usb_main.c ****  *    https://github.com/tmk/tmk_keyboard/
  11:tmk_core/protocol/chibios/usb_main.c ****  *  - ChibiOS demo code (Apache 2.0 License)
  12:tmk_core/protocol/chibios/usb_main.c ****  *    http://www.chibios.org
  13:tmk_core/protocol/chibios/usb_main.c ****  *
  14:tmk_core/protocol/chibios/usb_main.c ****  * Since some GPL'd code is used, this work is licensed under
  15:tmk_core/protocol/chibios/usb_main.c ****  * GPL v2 or later.
  16:tmk_core/protocol/chibios/usb_main.c ****  */
  17:tmk_core/protocol/chibios/usb_main.c **** 
  18:tmk_core/protocol/chibios/usb_main.c **** #include "ch.h"
  19:tmk_core/protocol/chibios/usb_main.c **** #include "hal.h"
  20:tmk_core/protocol/chibios/usb_main.c **** 
  21:tmk_core/protocol/chibios/usb_main.c **** #include "usb_main.h"
  22:tmk_core/protocol/chibios/usb_main.c **** 
  23:tmk_core/protocol/chibios/usb_main.c **** #include "host.h"
  24:tmk_core/protocol/chibios/usb_main.c **** #include "debug.h"
  25:tmk_core/protocol/chibios/usb_main.c **** #include "suspend.h"
  26:tmk_core/protocol/chibios/usb_main.c **** #ifdef SLEEP_LED_ENABLE
  27:tmk_core/protocol/chibios/usb_main.c **** #    include "sleep_led.h"
  28:tmk_core/protocol/chibios/usb_main.c **** #    include "led.h"
  29:tmk_core/protocol/chibios/usb_main.c **** #endif
  30:tmk_core/protocol/chibios/usb_main.c **** #include "wait.h"
  31:tmk_core/protocol/chibios/usb_main.c **** #include "usb_descriptor.h"
  32:tmk_core/protocol/chibios/usb_main.c **** #include "usb_driver.h"
  33:tmk_core/protocol/chibios/usb_main.c **** 
  34:tmk_core/protocol/chibios/usb_main.c **** #ifdef NKRO_ENABLE
  35:tmk_core/protocol/chibios/usb_main.c **** #    include "keycode_config.h"
  36:tmk_core/protocol/chibios/usb_main.c **** 
  37:tmk_core/protocol/chibios/usb_main.c **** extern keymap_config_t keymap_config;
  38:tmk_core/protocol/chibios/usb_main.c **** #endif
  39:tmk_core/protocol/chibios/usb_main.c **** 
  40:tmk_core/protocol/chibios/usb_main.c **** /* ---------------------------------------------------------
  41:tmk_core/protocol/chibios/usb_main.c ****  *       Global interface variables and declarations
  42:tmk_core/protocol/chibios/usb_main.c ****  * ---------------------------------------------------------
  43:tmk_core/protocol/chibios/usb_main.c ****  */
  44:tmk_core/protocol/chibios/usb_main.c **** 
  45:tmk_core/protocol/chibios/usb_main.c **** #ifndef usb_lld_connect_bus
  46:tmk_core/protocol/chibios/usb_main.c **** #    define usb_lld_connect_bus(usbp)
  47:tmk_core/protocol/chibios/usb_main.c **** #endif
  48:tmk_core/protocol/chibios/usb_main.c **** 
  49:tmk_core/protocol/chibios/usb_main.c **** #ifndef usb_lld_disconnect_bus
  50:tmk_core/protocol/chibios/usb_main.c **** #    define usb_lld_disconnect_bus(usbp)
  51:tmk_core/protocol/chibios/usb_main.c **** #endif
  52:tmk_core/protocol/chibios/usb_main.c **** 
  53:tmk_core/protocol/chibios/usb_main.c **** uint8_t                keyboard_idle __attribute__((aligned(2)))      = 0;
  54:tmk_core/protocol/chibios/usb_main.c **** uint8_t                keyboard_protocol __attribute__((aligned(2)))  = 1;
  55:tmk_core/protocol/chibios/usb_main.c **** uint16_t               keyboard_led_stats __attribute__((aligned(2))) = 0;
  56:tmk_core/protocol/chibios/usb_main.c **** volatile uint16_t      keyboard_idle_count                            = 0;
  57:tmk_core/protocol/chibios/usb_main.c **** static virtual_timer_t keyboard_idle_timer;
  58:tmk_core/protocol/chibios/usb_main.c **** static void            keyboard_idle_timer_cb(void *arg);
  59:tmk_core/protocol/chibios/usb_main.c **** 
  60:tmk_core/protocol/chibios/usb_main.c **** report_keyboard_t keyboard_report_sent = {{0}};
  61:tmk_core/protocol/chibios/usb_main.c **** #ifdef MOUSE_ENABLE
  62:tmk_core/protocol/chibios/usb_main.c **** report_mouse_t mouse_report_blank = {0};
  63:tmk_core/protocol/chibios/usb_main.c **** #endif /* MOUSE_ENABLE */
  64:tmk_core/protocol/chibios/usb_main.c **** #ifdef EXTRAKEY_ENABLE
  65:tmk_core/protocol/chibios/usb_main.c **** uint8_t extra_report_blank[3] = {0};
  66:tmk_core/protocol/chibios/usb_main.c **** #endif /* EXTRAKEY_ENABLE */
  67:tmk_core/protocol/chibios/usb_main.c **** 
  68:tmk_core/protocol/chibios/usb_main.c **** /* ---------------------------------------------------------
  69:tmk_core/protocol/chibios/usb_main.c ****  *            Descriptors and USB driver objects
  70:tmk_core/protocol/chibios/usb_main.c ****  * ---------------------------------------------------------
  71:tmk_core/protocol/chibios/usb_main.c ****  */
  72:tmk_core/protocol/chibios/usb_main.c **** 
  73:tmk_core/protocol/chibios/usb_main.c **** /* HID specific constants */
  74:tmk_core/protocol/chibios/usb_main.c **** #define HID_GET_REPORT 0x01
  75:tmk_core/protocol/chibios/usb_main.c **** #define HID_GET_IDLE 0x02
  76:tmk_core/protocol/chibios/usb_main.c **** #define HID_GET_PROTOCOL 0x03
  77:tmk_core/protocol/chibios/usb_main.c **** #define HID_SET_REPORT 0x09
  78:tmk_core/protocol/chibios/usb_main.c **** #define HID_SET_IDLE 0x0A
  79:tmk_core/protocol/chibios/usb_main.c **** #define HID_SET_PROTOCOL 0x0B
  80:tmk_core/protocol/chibios/usb_main.c **** 
  81:tmk_core/protocol/chibios/usb_main.c **** /*
  82:tmk_core/protocol/chibios/usb_main.c ****  * Handles the GET_DESCRIPTOR callback
  83:tmk_core/protocol/chibios/usb_main.c ****  *
  84:tmk_core/protocol/chibios/usb_main.c ****  * Returns the proper descriptor
  85:tmk_core/protocol/chibios/usb_main.c ****  */
  86:tmk_core/protocol/chibios/usb_main.c **** static const USBDescriptor *usb_get_descriptor_cb(USBDriver *usbp, uint8_t dtype, uint8_t dindex, u
  87:tmk_core/protocol/chibios/usb_main.c ****     (void)usbp;
  88:tmk_core/protocol/chibios/usb_main.c ****     static USBDescriptor desc;
  89:tmk_core/protocol/chibios/usb_main.c ****     uint16_t             wValue = ((uint16_t)dtype << 8) | dindex;
  90:tmk_core/protocol/chibios/usb_main.c ****     desc.ud_string              = NULL;
  91:tmk_core/protocol/chibios/usb_main.c ****     desc.ud_size                = get_usb_descriptor(wValue, wIndex, (const void **const) & desc.ud
  92:tmk_core/protocol/chibios/usb_main.c ****     if (desc.ud_string == NULL)
  93:tmk_core/protocol/chibios/usb_main.c ****         return NULL;
  94:tmk_core/protocol/chibios/usb_main.c ****     else
  95:tmk_core/protocol/chibios/usb_main.c ****         return &desc;
  96:tmk_core/protocol/chibios/usb_main.c **** }
  97:tmk_core/protocol/chibios/usb_main.c **** 
  98:tmk_core/protocol/chibios/usb_main.c **** #ifndef KEYBOARD_SHARED_EP
  99:tmk_core/protocol/chibios/usb_main.c **** /* keyboard endpoint state structure */
 100:tmk_core/protocol/chibios/usb_main.c **** static USBInEndpointState kbd_ep_state;
 101:tmk_core/protocol/chibios/usb_main.c **** /* keyboard endpoint initialization structure (IN) */
 102:tmk_core/protocol/chibios/usb_main.c **** static const USBEndpointConfig kbd_ep_config = {
 103:tmk_core/protocol/chibios/usb_main.c ****     USB_EP_MODE_TYPE_INTR, /* Interrupt EP */
 104:tmk_core/protocol/chibios/usb_main.c ****     NULL,                  /* SETUP packet notification callback */
 105:tmk_core/protocol/chibios/usb_main.c ****     kbd_in_cb,             /* IN notification callback */
 106:tmk_core/protocol/chibios/usb_main.c ****     NULL,                  /* OUT notification callback */
 107:tmk_core/protocol/chibios/usb_main.c ****     KEYBOARD_EPSIZE,       /* IN maximum packet size */
 108:tmk_core/protocol/chibios/usb_main.c ****     0,                     /* OUT maximum packet size */
 109:tmk_core/protocol/chibios/usb_main.c ****     &kbd_ep_state,         /* IN Endpoint state */
 110:tmk_core/protocol/chibios/usb_main.c ****     NULL,                  /* OUT endpoint state */
 111:tmk_core/protocol/chibios/usb_main.c ****     2,                     /* IN multiplier */
 112:tmk_core/protocol/chibios/usb_main.c ****     NULL                   /* SETUP buffer (not a SETUP endpoint) */
 113:tmk_core/protocol/chibios/usb_main.c **** };
 114:tmk_core/protocol/chibios/usb_main.c **** #endif
 115:tmk_core/protocol/chibios/usb_main.c **** 
 116:tmk_core/protocol/chibios/usb_main.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 117:tmk_core/protocol/chibios/usb_main.c **** /* mouse endpoint state structure */
 118:tmk_core/protocol/chibios/usb_main.c **** static USBInEndpointState mouse_ep_state;
 119:tmk_core/protocol/chibios/usb_main.c **** 
 120:tmk_core/protocol/chibios/usb_main.c **** /* mouse endpoint initialization structure (IN) */
 121:tmk_core/protocol/chibios/usb_main.c **** static const USBEndpointConfig mouse_ep_config = {
 122:tmk_core/protocol/chibios/usb_main.c ****     USB_EP_MODE_TYPE_INTR, /* Interrupt EP */
 123:tmk_core/protocol/chibios/usb_main.c ****     NULL,                  /* SETUP packet notification callback */
 124:tmk_core/protocol/chibios/usb_main.c ****     mouse_in_cb,           /* IN notification callback */
 125:tmk_core/protocol/chibios/usb_main.c ****     NULL,                  /* OUT notification callback */
 126:tmk_core/protocol/chibios/usb_main.c ****     MOUSE_EPSIZE,          /* IN maximum packet size */
 127:tmk_core/protocol/chibios/usb_main.c ****     0,                     /* OUT maximum packet size */
 128:tmk_core/protocol/chibios/usb_main.c ****     &mouse_ep_state,       /* IN Endpoint state */
 129:tmk_core/protocol/chibios/usb_main.c ****     NULL,                  /* OUT endpoint state */
 130:tmk_core/protocol/chibios/usb_main.c ****     2,                     /* IN multiplier */
 131:tmk_core/protocol/chibios/usb_main.c ****     NULL                   /* SETUP buffer (not a SETUP endpoint) */
 132:tmk_core/protocol/chibios/usb_main.c **** };
 133:tmk_core/protocol/chibios/usb_main.c **** #endif
 134:tmk_core/protocol/chibios/usb_main.c **** 
 135:tmk_core/protocol/chibios/usb_main.c **** #ifdef SHARED_EP_ENABLE
 136:tmk_core/protocol/chibios/usb_main.c **** /* shared endpoint state structure */
 137:tmk_core/protocol/chibios/usb_main.c **** static USBInEndpointState shared_ep_state;
 138:tmk_core/protocol/chibios/usb_main.c **** 
 139:tmk_core/protocol/chibios/usb_main.c **** /* shared endpoint initialization structure (IN) */
 140:tmk_core/protocol/chibios/usb_main.c **** static const USBEndpointConfig shared_ep_config = {
 141:tmk_core/protocol/chibios/usb_main.c ****     USB_EP_MODE_TYPE_INTR, /* Interrupt EP */
 142:tmk_core/protocol/chibios/usb_main.c ****     NULL,                  /* SETUP packet notification callback */
 143:tmk_core/protocol/chibios/usb_main.c ****     shared_in_cb,          /* IN notification callback */
 144:tmk_core/protocol/chibios/usb_main.c ****     NULL,                  /* OUT notification callback */
 145:tmk_core/protocol/chibios/usb_main.c ****     SHARED_EPSIZE,         /* IN maximum packet size */
 146:tmk_core/protocol/chibios/usb_main.c ****     0,                     /* OUT maximum packet size */
 147:tmk_core/protocol/chibios/usb_main.c ****     &shared_ep_state,      /* IN Endpoint state */
 148:tmk_core/protocol/chibios/usb_main.c ****     NULL,                  /* OUT endpoint state */
 149:tmk_core/protocol/chibios/usb_main.c ****     2,                     /* IN multiplier */
 150:tmk_core/protocol/chibios/usb_main.c ****     NULL                   /* SETUP buffer (not a SETUP endpoint) */
 151:tmk_core/protocol/chibios/usb_main.c **** };
 152:tmk_core/protocol/chibios/usb_main.c **** #endif
 153:tmk_core/protocol/chibios/usb_main.c **** 
 154:tmk_core/protocol/chibios/usb_main.c **** typedef struct {
 155:tmk_core/protocol/chibios/usb_main.c ****     size_t              queue_capacity_in;
 156:tmk_core/protocol/chibios/usb_main.c ****     size_t              queue_capacity_out;
 157:tmk_core/protocol/chibios/usb_main.c ****     USBInEndpointState  in_ep_state;
 158:tmk_core/protocol/chibios/usb_main.c ****     USBOutEndpointState out_ep_state;
 159:tmk_core/protocol/chibios/usb_main.c ****     USBInEndpointState  int_ep_state;
 160:tmk_core/protocol/chibios/usb_main.c ****     USBEndpointConfig   in_ep_config;
 161:tmk_core/protocol/chibios/usb_main.c ****     USBEndpointConfig   out_ep_config;
 162:tmk_core/protocol/chibios/usb_main.c ****     USBEndpointConfig   int_ep_config;
 163:tmk_core/protocol/chibios/usb_main.c ****     const QMKUSBConfig  config;
 164:tmk_core/protocol/chibios/usb_main.c ****     QMKUSBDriver        driver;
 165:tmk_core/protocol/chibios/usb_main.c **** } usb_driver_config_t;
 166:tmk_core/protocol/chibios/usb_main.c **** 
 167:tmk_core/protocol/chibios/usb_main.c **** #define QMK_USB_DRIVER_CONFIG(stream, notification, fixedsize)                                     
 168:tmk_core/protocol/chibios/usb_main.c ****     {                                                                                              
 169:tmk_core/protocol/chibios/usb_main.c ****         .queue_capacity_in = stream##_IN_CAPACITY, .queue_capacity_out = stream##_OUT_CAPACITY,    
 170:tmk_core/protocol/chibios/usb_main.c ****         .in_ep_config = {.ep_mode     = stream##_IN_MODE,                                          
 171:tmk_core/protocol/chibios/usb_main.c ****                          .setup_cb    = NULL,                                                      
 172:tmk_core/protocol/chibios/usb_main.c ****                          .in_cb       = qmkusbDataTransmitted,                                     
 173:tmk_core/protocol/chibios/usb_main.c ****                          .out_cb      = NULL,                                                      
 174:tmk_core/protocol/chibios/usb_main.c ****                          .in_maxsize  = stream##_EPSIZE,                                           
 175:tmk_core/protocol/chibios/usb_main.c ****                          .out_maxsize = 0, /* The pointer to the states will be filled during initi
 176:tmk_core/protocol/chibios/usb_main.c ****                          .in_state    = NULL,                                                      
 177:tmk_core/protocol/chibios/usb_main.c ****                          .out_state   = NULL,                                                      
 178:tmk_core/protocol/chibios/usb_main.c ****                          .ep_buffers  = 2,                                                         
 179:tmk_core/protocol/chibios/usb_main.c ****                          .setup_buf   = NULL},                                                     
 180:tmk_core/protocol/chibios/usb_main.c ****         .out_ep_config =                                                                           
 181:tmk_core/protocol/chibios/usb_main.c ****             {                                                                                      
 182:tmk_core/protocol/chibios/usb_main.c ****                 .ep_mode     = stream##_OUT_MODE,                                                  
 183:tmk_core/protocol/chibios/usb_main.c ****                 .setup_cb    = NULL,                                                               
 184:tmk_core/protocol/chibios/usb_main.c ****                 .in_cb       = NULL,                                                               
 185:tmk_core/protocol/chibios/usb_main.c ****                 .out_cb      = qmkusbDataReceived,                                                 
 186:tmk_core/protocol/chibios/usb_main.c ****                 .in_maxsize  = 0,                                                                  
 187:tmk_core/protocol/chibios/usb_main.c ****                 .out_maxsize = stream##_EPSIZE, /* The pointer to the states will be filled during 
 188:tmk_core/protocol/chibios/usb_main.c ****                 .in_state    = NULL,                                                               
 189:tmk_core/protocol/chibios/usb_main.c ****                 .out_state   = NULL,                                                               
 190:tmk_core/protocol/chibios/usb_main.c ****                 .ep_buffers  = 2,                                                                  
 191:tmk_core/protocol/chibios/usb_main.c ****                 .setup_buf   = NULL,                                                               
 192:tmk_core/protocol/chibios/usb_main.c ****             },                                                                                     
 193:tmk_core/protocol/chibios/usb_main.c ****         .int_ep_config =                                                                           
 194:tmk_core/protocol/chibios/usb_main.c ****             {                                                                                      
 195:tmk_core/protocol/chibios/usb_main.c ****                 .ep_mode     = USB_EP_MODE_TYPE_INTR,                                              
 196:tmk_core/protocol/chibios/usb_main.c ****                 .setup_cb    = NULL,                                                               
 197:tmk_core/protocol/chibios/usb_main.c ****                 .in_cb       = qmkusbInterruptTransmitted,                                         
 198:tmk_core/protocol/chibios/usb_main.c ****                 .out_cb      = NULL,                                                               
 199:tmk_core/protocol/chibios/usb_main.c ****                 .in_maxsize  = CDC_NOTIFICATION_EPSIZE,                                            
 200:tmk_core/protocol/chibios/usb_main.c ****                 .out_maxsize = 0, /* The pointer to the states will be filled during initialization
 201:tmk_core/protocol/chibios/usb_main.c ****                 .in_state    = NULL,                                                               
 202:tmk_core/protocol/chibios/usb_main.c ****                 .out_state   = NULL,                                                               
 203:tmk_core/protocol/chibios/usb_main.c ****                 .ep_buffers  = 2,                                                                  
 204:tmk_core/protocol/chibios/usb_main.c ****                 .setup_buf   = NULL,                                                               
 205:tmk_core/protocol/chibios/usb_main.c ****             },                                                                                     
 206:tmk_core/protocol/chibios/usb_main.c ****         .config = {                                                                                
 207:tmk_core/protocol/chibios/usb_main.c ****             .usbp        = &USB_DRIVER,                                                            
 208:tmk_core/protocol/chibios/usb_main.c ****             .bulk_in     = stream##_IN_EPNUM,                                                      
 209:tmk_core/protocol/chibios/usb_main.c ****             .bulk_out    = stream##_OUT_EPNUM,                                                     
 210:tmk_core/protocol/chibios/usb_main.c ****             .int_in      = notification,                                                           
 211:tmk_core/protocol/chibios/usb_main.c ****             .in_buffers  = stream##_IN_CAPACITY,                                                   
 212:tmk_core/protocol/chibios/usb_main.c ****             .out_buffers = stream##_OUT_CAPACITY,                                                  
 213:tmk_core/protocol/chibios/usb_main.c ****             .in_size     = stream##_EPSIZE,                                                        
 214:tmk_core/protocol/chibios/usb_main.c ****             .out_size    = stream##_EPSIZE,                                                        
 215:tmk_core/protocol/chibios/usb_main.c ****             .fixed_size  = fixedsize,                                                              
 216:tmk_core/protocol/chibios/usb_main.c ****             .ib          = (uint8_t[BQ_BUFFER_SIZE(stream##_IN_CAPACITY, stream##_EPSIZE)]){},     
 217:tmk_core/protocol/chibios/usb_main.c ****             .ob          = (uint8_t[BQ_BUFFER_SIZE(stream##_OUT_CAPACITY, stream##_EPSIZE)]){},    
 218:tmk_core/protocol/chibios/usb_main.c ****         }                                                                                          
 219:tmk_core/protocol/chibios/usb_main.c ****     }
 220:tmk_core/protocol/chibios/usb_main.c **** 
 221:tmk_core/protocol/chibios/usb_main.c **** typedef struct {
 222:tmk_core/protocol/chibios/usb_main.c ****     union {
 223:tmk_core/protocol/chibios/usb_main.c ****         struct {
 224:tmk_core/protocol/chibios/usb_main.c **** #ifdef CONSOLE_ENABLE
 225:tmk_core/protocol/chibios/usb_main.c ****             usb_driver_config_t console_driver;
 226:tmk_core/protocol/chibios/usb_main.c **** #endif
 227:tmk_core/protocol/chibios/usb_main.c **** #ifdef RAW_ENABLE
 228:tmk_core/protocol/chibios/usb_main.c ****             usb_driver_config_t raw_driver;
 229:tmk_core/protocol/chibios/usb_main.c **** #endif
 230:tmk_core/protocol/chibios/usb_main.c **** #ifdef MIDI_ENABLE
 231:tmk_core/protocol/chibios/usb_main.c ****             usb_driver_config_t midi_driver;
 232:tmk_core/protocol/chibios/usb_main.c **** #endif
 233:tmk_core/protocol/chibios/usb_main.c **** #ifdef VIRTSER_ENABLE
 234:tmk_core/protocol/chibios/usb_main.c ****             usb_driver_config_t serial_driver;
 235:tmk_core/protocol/chibios/usb_main.c **** #endif
 236:tmk_core/protocol/chibios/usb_main.c ****         };
 237:tmk_core/protocol/chibios/usb_main.c ****         usb_driver_config_t array[0];
 238:tmk_core/protocol/chibios/usb_main.c ****     };
 239:tmk_core/protocol/chibios/usb_main.c **** } usb_driver_configs_t;
 240:tmk_core/protocol/chibios/usb_main.c **** 
 241:tmk_core/protocol/chibios/usb_main.c **** static usb_driver_configs_t drivers = {
 242:tmk_core/protocol/chibios/usb_main.c **** #ifdef CONSOLE_ENABLE
 243:tmk_core/protocol/chibios/usb_main.c **** #    define CONSOLE_IN_CAPACITY 4
 244:tmk_core/protocol/chibios/usb_main.c **** #    define CONSOLE_OUT_CAPACITY 4
 245:tmk_core/protocol/chibios/usb_main.c **** #    define CONSOLE_IN_MODE USB_EP_MODE_TYPE_INTR
 246:tmk_core/protocol/chibios/usb_main.c **** #    define CONSOLE_OUT_MODE USB_EP_MODE_TYPE_INTR
 247:tmk_core/protocol/chibios/usb_main.c ****     .console_driver = QMK_USB_DRIVER_CONFIG(CONSOLE, 0, true),
 248:tmk_core/protocol/chibios/usb_main.c **** #endif
 249:tmk_core/protocol/chibios/usb_main.c **** #ifdef RAW_ENABLE
 250:tmk_core/protocol/chibios/usb_main.c **** #    define RAW_IN_CAPACITY 4
 251:tmk_core/protocol/chibios/usb_main.c **** #    define RAW_OUT_CAPACITY 4
 252:tmk_core/protocol/chibios/usb_main.c **** #    define RAW_IN_MODE USB_EP_MODE_TYPE_INTR
 253:tmk_core/protocol/chibios/usb_main.c **** #    define RAW_OUT_MODE USB_EP_MODE_TYPE_INTR
 254:tmk_core/protocol/chibios/usb_main.c ****     .raw_driver = QMK_USB_DRIVER_CONFIG(RAW, 0, false),
 255:tmk_core/protocol/chibios/usb_main.c **** #endif
 256:tmk_core/protocol/chibios/usb_main.c **** 
 257:tmk_core/protocol/chibios/usb_main.c **** #ifdef MIDI_ENABLE
 258:tmk_core/protocol/chibios/usb_main.c **** #    define MIDI_STREAM_IN_CAPACITY 4
 259:tmk_core/protocol/chibios/usb_main.c **** #    define MIDI_STREAM_OUT_CAPACITY 4
 260:tmk_core/protocol/chibios/usb_main.c **** #    define MIDI_STREAM_IN_MODE USB_EP_MODE_TYPE_BULK
 261:tmk_core/protocol/chibios/usb_main.c **** #    define MIDI_STREAM_OUT_MODE USB_EP_MODE_TYPE_BULK
 262:tmk_core/protocol/chibios/usb_main.c ****     .midi_driver = QMK_USB_DRIVER_CONFIG(MIDI_STREAM, 0, false),
 263:tmk_core/protocol/chibios/usb_main.c **** #endif
 264:tmk_core/protocol/chibios/usb_main.c **** 
 265:tmk_core/protocol/chibios/usb_main.c **** #ifdef VIRTSER_ENABLE
 266:tmk_core/protocol/chibios/usb_main.c **** #    define CDC_IN_CAPACITY 4
 267:tmk_core/protocol/chibios/usb_main.c **** #    define CDC_OUT_CAPACITY 4
 268:tmk_core/protocol/chibios/usb_main.c **** #    define CDC_IN_MODE USB_EP_MODE_TYPE_BULK
 269:tmk_core/protocol/chibios/usb_main.c **** #    define CDC_OUT_MODE USB_EP_MODE_TYPE_BULK
 270:tmk_core/protocol/chibios/usb_main.c ****     .serial_driver = QMK_USB_DRIVER_CONFIG(CDC, CDC_NOTIFICATION_EPNUM, false),
 271:tmk_core/protocol/chibios/usb_main.c **** #endif
 272:tmk_core/protocol/chibios/usb_main.c **** };
 273:tmk_core/protocol/chibios/usb_main.c **** 
 274:tmk_core/protocol/chibios/usb_main.c **** #define NUM_USB_DRIVERS (sizeof(drivers) / sizeof(usb_driver_config_t))
 275:tmk_core/protocol/chibios/usb_main.c **** 
 276:tmk_core/protocol/chibios/usb_main.c **** /* ---------------------------------------------------------
 277:tmk_core/protocol/chibios/usb_main.c ****  *                  USB driver functions
 278:tmk_core/protocol/chibios/usb_main.c ****  * ---------------------------------------------------------
 279:tmk_core/protocol/chibios/usb_main.c ****  */
 280:tmk_core/protocol/chibios/usb_main.c **** 
 281:tmk_core/protocol/chibios/usb_main.c **** /* Handles the USB driver global events
 282:tmk_core/protocol/chibios/usb_main.c ****  * TODO: maybe disable some things when connection is lost? */
 283:tmk_core/protocol/chibios/usb_main.c **** static void usb_event_cb(USBDriver *usbp, usbevent_t event) {
 284:tmk_core/protocol/chibios/usb_main.c ****     switch (event) {
 285:tmk_core/protocol/chibios/usb_main.c ****         case USB_EVENT_ADDRESS:
 286:tmk_core/protocol/chibios/usb_main.c ****             return;
 287:tmk_core/protocol/chibios/usb_main.c **** 
 288:tmk_core/protocol/chibios/usb_main.c ****         case USB_EVENT_CONFIGURED:
 289:tmk_core/protocol/chibios/usb_main.c ****             osalSysLockFromISR();
 290:tmk_core/protocol/chibios/usb_main.c ****             /* Enable the endpoints specified into the configuration. */
 291:tmk_core/protocol/chibios/usb_main.c **** #ifndef KEYBOARD_SHARED_EP
 292:tmk_core/protocol/chibios/usb_main.c ****             usbInitEndpointI(usbp, KEYBOARD_IN_EPNUM, &kbd_ep_config);
 293:tmk_core/protocol/chibios/usb_main.c **** #endif
 294:tmk_core/protocol/chibios/usb_main.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 295:tmk_core/protocol/chibios/usb_main.c ****             usbInitEndpointI(usbp, MOUSE_IN_EPNUM, &mouse_ep_config);
 296:tmk_core/protocol/chibios/usb_main.c **** #endif
 297:tmk_core/protocol/chibios/usb_main.c **** #ifdef SHARED_EP_ENABLE
 298:tmk_core/protocol/chibios/usb_main.c ****             usbInitEndpointI(usbp, SHARED_IN_EPNUM, &shared_ep_config);
 299:tmk_core/protocol/chibios/usb_main.c **** #endif
 300:tmk_core/protocol/chibios/usb_main.c ****             for (int i = 0; i < NUM_USB_DRIVERS; i++) {
 301:tmk_core/protocol/chibios/usb_main.c ****                 usbInitEndpointI(usbp, drivers.array[i].config.bulk_in, &drivers.array[i].in_ep_con
 302:tmk_core/protocol/chibios/usb_main.c ****                 usbInitEndpointI(usbp, drivers.array[i].config.bulk_out, &drivers.array[i].out_ep_c
 303:tmk_core/protocol/chibios/usb_main.c ****                 if (drivers.array[i].config.int_in) {
 304:tmk_core/protocol/chibios/usb_main.c ****                     usbInitEndpointI(usbp, drivers.array[i].config.int_in, &drivers.array[i].int_ep
 305:tmk_core/protocol/chibios/usb_main.c ****                 }
 306:tmk_core/protocol/chibios/usb_main.c ****                 qmkusbConfigureHookI(&drivers.array[i].driver);
 307:tmk_core/protocol/chibios/usb_main.c ****             }
 308:tmk_core/protocol/chibios/usb_main.c ****             osalSysUnlockFromISR();
 309:tmk_core/protocol/chibios/usb_main.c ****             return;
 310:tmk_core/protocol/chibios/usb_main.c ****         case USB_EVENT_SUSPEND:
 311:tmk_core/protocol/chibios/usb_main.c **** #ifdef SLEEP_LED_ENABLE
 312:tmk_core/protocol/chibios/usb_main.c ****             sleep_led_enable();
 313:tmk_core/protocol/chibios/usb_main.c **** #endif      /* SLEEP_LED_ENABLE */
 314:tmk_core/protocol/chibios/usb_main.c ****             /* Falls into.*/
 315:tmk_core/protocol/chibios/usb_main.c ****         case USB_EVENT_UNCONFIGURED:
 316:tmk_core/protocol/chibios/usb_main.c ****             /* Falls into.*/
 317:tmk_core/protocol/chibios/usb_main.c ****         case USB_EVENT_RESET:
 318:tmk_core/protocol/chibios/usb_main.c ****             for (int i = 0; i < NUM_USB_DRIVERS; i++) {
 319:tmk_core/protocol/chibios/usb_main.c ****                 chSysLockFromISR();
 320:tmk_core/protocol/chibios/usb_main.c ****                 /* Disconnection event on suspend.*/
 321:tmk_core/protocol/chibios/usb_main.c ****                 qmkusbSuspendHookI(&drivers.array[i].driver);
 322:tmk_core/protocol/chibios/usb_main.c ****                 chSysUnlockFromISR();
 323:tmk_core/protocol/chibios/usb_main.c ****             }
 324:tmk_core/protocol/chibios/usb_main.c ****             return;
 325:tmk_core/protocol/chibios/usb_main.c **** 
 326:tmk_core/protocol/chibios/usb_main.c ****         case USB_EVENT_WAKEUP:
 327:tmk_core/protocol/chibios/usb_main.c ****             // TODO: from ISR! print("[W]");
 328:tmk_core/protocol/chibios/usb_main.c ****             for (int i = 0; i < NUM_USB_DRIVERS; i++) {
 329:tmk_core/protocol/chibios/usb_main.c ****                 chSysLockFromISR();
 330:tmk_core/protocol/chibios/usb_main.c ****                 /* Disconnection event on suspend.*/
 331:tmk_core/protocol/chibios/usb_main.c ****                 qmkusbWakeupHookI(&drivers.array[i].driver);
 332:tmk_core/protocol/chibios/usb_main.c ****                 chSysUnlockFromISR();
 333:tmk_core/protocol/chibios/usb_main.c ****             }
 334:tmk_core/protocol/chibios/usb_main.c ****             suspend_wakeup_init();
 335:tmk_core/protocol/chibios/usb_main.c **** #ifdef SLEEP_LED_ENABLE
 336:tmk_core/protocol/chibios/usb_main.c ****             sleep_led_disable();
 337:tmk_core/protocol/chibios/usb_main.c ****             // NOTE: converters may not accept this
 338:tmk_core/protocol/chibios/usb_main.c ****             led_set(host_keyboard_leds());
 339:tmk_core/protocol/chibios/usb_main.c **** #endif /* SLEEP_LED_ENABLE */
 340:tmk_core/protocol/chibios/usb_main.c ****             return;
 341:tmk_core/protocol/chibios/usb_main.c **** 
 342:tmk_core/protocol/chibios/usb_main.c ****         case USB_EVENT_STALLED:
 343:tmk_core/protocol/chibios/usb_main.c ****             return;
 344:tmk_core/protocol/chibios/usb_main.c ****     }
 345:tmk_core/protocol/chibios/usb_main.c **** }
 346:tmk_core/protocol/chibios/usb_main.c **** 
 347:tmk_core/protocol/chibios/usb_main.c **** /* Function used locally in os/hal/src/usb.c for getting descriptors
 348:tmk_core/protocol/chibios/usb_main.c ****  * need it here for HID descriptor */
 349:tmk_core/protocol/chibios/usb_main.c **** static uint16_t get_hword(uint8_t *p) {
 350:tmk_core/protocol/chibios/usb_main.c ****     uint16_t hw;
 351:tmk_core/protocol/chibios/usb_main.c **** 
 352:tmk_core/protocol/chibios/usb_main.c ****     hw = (uint16_t)*p++;
 353:tmk_core/protocol/chibios/usb_main.c ****     hw |= (uint16_t)*p << 8U;
 354:tmk_core/protocol/chibios/usb_main.c ****     return hw;
 355:tmk_core/protocol/chibios/usb_main.c **** }
 356:tmk_core/protocol/chibios/usb_main.c **** 
 357:tmk_core/protocol/chibios/usb_main.c **** /*
 358:tmk_core/protocol/chibios/usb_main.c ****  * Appendix G: HID Request Support Requirements
 359:tmk_core/protocol/chibios/usb_main.c ****  *
 360:tmk_core/protocol/chibios/usb_main.c ****  * The following table enumerates the requests that need to be supported by various types of HID cl
 361:tmk_core/protocol/chibios/usb_main.c ****  * Device type     GetReport   SetReport   GetIdle     SetIdle     GetProtocol SetProtocol
 362:tmk_core/protocol/chibios/usb_main.c ****  * ------------------------------------------------------------------------------------------
 363:tmk_core/protocol/chibios/usb_main.c ****  * Boot Mouse      Required    Optional    Optional    Optional    Required    Required
 364:tmk_core/protocol/chibios/usb_main.c ****  * Non-Boot Mouse  Required    Optional    Optional    Optional    Optional    Optional
 365:tmk_core/protocol/chibios/usb_main.c ****  * Boot Keyboard   Required    Optional    Required    Required    Required    Required
 366:tmk_core/protocol/chibios/usb_main.c ****  * Non-Boot Keybrd Required    Optional    Required    Required    Optional    Optional
 367:tmk_core/protocol/chibios/usb_main.c ****  * Other Device    Required    Optional    Optional    Optional    Optional    Optional
 368:tmk_core/protocol/chibios/usb_main.c ****  */
 369:tmk_core/protocol/chibios/usb_main.c **** 
 370:tmk_core/protocol/chibios/usb_main.c **** #ifdef SHARED_EP_ENABLE
 371:tmk_core/protocol/chibios/usb_main.c **** static uint8_t set_report_buf[2] __attribute__((aligned(2)));
 372:tmk_core/protocol/chibios/usb_main.c **** static void    set_led_transfer_cb(USBDriver *usbp) {
  25              		.loc 1 372 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
 373:tmk_core/protocol/chibios/usb_main.c ****     if ((set_report_buf[0] == REPORT_ID_KEYBOARD) || (set_report_buf[0] == REPORT_ID_NKRO)) {
  31              		.loc 1 373 0
  32 0000 044A     		ldr	r2, .L3
  33 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  34 0004 03F0FB03 		and	r3, r3, #251
  35 0008 012B     		cmp	r3, #1
 374:tmk_core/protocol/chibios/usb_main.c ****         keyboard_led_stats = set_report_buf[1];
  36              		.loc 1 374 0
  37 000a 02BF     		ittt	eq
  38 000c 024B     		ldreq	r3, .L3+4
  39 000e 5278     		ldrbeq	r2, [r2, #1]	@ zero_extendqisi2
  40 0010 1A80     		strheq	r2, [r3]	@ movhi
 375:tmk_core/protocol/chibios/usb_main.c ****     }
 376:tmk_core/protocol/chibios/usb_main.c **** }
  41              		.loc 1 376 0
  42 0012 7047     		bx	lr
  43              	.L4:
  44              		.align	2
  45              	.L3:
  46 0014 00000000 		.word	.LANCHOR0
  47 0018 00000000 		.word	.LANCHOR1
  48              		.cfi_endproc
  49              	.LFE282:
  51              		.section	.text.kbd_in_cb,"ax",%progbits
  52              		.align	1
  53              		.global	kbd_in_cb
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu softvfp
  59              	kbd_in_cb:
  60              	.LFB286:
 377:tmk_core/protocol/chibios/usb_main.c **** #endif
 378:tmk_core/protocol/chibios/usb_main.c **** 
 379:tmk_core/protocol/chibios/usb_main.c **** /* Callback for SETUP request on the endpoint 0 (control) */
 380:tmk_core/protocol/chibios/usb_main.c **** static bool usb_request_hook_cb(USBDriver *usbp) {
 381:tmk_core/protocol/chibios/usb_main.c ****     const USBDescriptor *dp;
 382:tmk_core/protocol/chibios/usb_main.c ****     int                  has_report_id;
 383:tmk_core/protocol/chibios/usb_main.c **** 
 384:tmk_core/protocol/chibios/usb_main.c ****     /* usbp->setup fields:
 385:tmk_core/protocol/chibios/usb_main.c ****      *  0:   bmRequestType (bitmask)
 386:tmk_core/protocol/chibios/usb_main.c ****      *  1:   bRequest
 387:tmk_core/protocol/chibios/usb_main.c ****      *  2,3: (LSB,MSB) wValue
 388:tmk_core/protocol/chibios/usb_main.c ****      *  4,5: (LSB,MSB) wIndex
 389:tmk_core/protocol/chibios/usb_main.c ****      *  6,7: (LSB,MSB) wLength (number of bytes to transfer if there is a data phase) */
 390:tmk_core/protocol/chibios/usb_main.c **** 
 391:tmk_core/protocol/chibios/usb_main.c ****     /* Handle HID class specific requests */
 392:tmk_core/protocol/chibios/usb_main.c ****     if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) && ((usbp->setup[0] & USB_
 393:tmk_core/protocol/chibios/usb_main.c ****         switch (usbp->setup[0] & USB_RTYPE_DIR_MASK) {
 394:tmk_core/protocol/chibios/usb_main.c ****             case USB_RTYPE_DIR_DEV2HOST:
 395:tmk_core/protocol/chibios/usb_main.c ****                 switch (usbp->setup[1]) { /* bRequest */
 396:tmk_core/protocol/chibios/usb_main.c ****                     case HID_GET_REPORT:
 397:tmk_core/protocol/chibios/usb_main.c ****                         switch (usbp->setup[4]) { /* LSB(wIndex) (check MSB==0?) */
 398:tmk_core/protocol/chibios/usb_main.c ****                             case KEYBOARD_INTERFACE:
 399:tmk_core/protocol/chibios/usb_main.c ****                                 usbSetupTransfer(usbp, (uint8_t *)&keyboard_report_sent, sizeof(key
 400:tmk_core/protocol/chibios/usb_main.c ****                                 return TRUE;
 401:tmk_core/protocol/chibios/usb_main.c ****                                 break;
 402:tmk_core/protocol/chibios/usb_main.c **** 
 403:tmk_core/protocol/chibios/usb_main.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 404:tmk_core/protocol/chibios/usb_main.c ****                             case MOUSE_INTERFACE:
 405:tmk_core/protocol/chibios/usb_main.c ****                                 usbSetupTransfer(usbp, (uint8_t *)&mouse_report_blank, sizeof(mouse
 406:tmk_core/protocol/chibios/usb_main.c ****                                 return TRUE;
 407:tmk_core/protocol/chibios/usb_main.c ****                                 break;
 408:tmk_core/protocol/chibios/usb_main.c **** #endif
 409:tmk_core/protocol/chibios/usb_main.c **** 
 410:tmk_core/protocol/chibios/usb_main.c ****                             default:
 411:tmk_core/protocol/chibios/usb_main.c ****                                 usbSetupTransfer(usbp, NULL, 0, NULL);
 412:tmk_core/protocol/chibios/usb_main.c ****                                 return TRUE;
 413:tmk_core/protocol/chibios/usb_main.c ****                                 break;
 414:tmk_core/protocol/chibios/usb_main.c ****                         }
 415:tmk_core/protocol/chibios/usb_main.c ****                         break;
 416:tmk_core/protocol/chibios/usb_main.c **** 
 417:tmk_core/protocol/chibios/usb_main.c ****                     case HID_GET_PROTOCOL:
 418:tmk_core/protocol/chibios/usb_main.c ****                         if ((usbp->setup[4] == KEYBOARD_INTERFACE) && (usbp->setup[5] == 0)) { /* w
 419:tmk_core/protocol/chibios/usb_main.c ****                             usbSetupTransfer(usbp, &keyboard_protocol, 1, NULL);
 420:tmk_core/protocol/chibios/usb_main.c ****                             return TRUE;
 421:tmk_core/protocol/chibios/usb_main.c ****                         }
 422:tmk_core/protocol/chibios/usb_main.c ****                         break;
 423:tmk_core/protocol/chibios/usb_main.c **** 
 424:tmk_core/protocol/chibios/usb_main.c ****                     case HID_GET_IDLE:
 425:tmk_core/protocol/chibios/usb_main.c ****                         usbSetupTransfer(usbp, &keyboard_idle, 1, NULL);
 426:tmk_core/protocol/chibios/usb_main.c ****                         return TRUE;
 427:tmk_core/protocol/chibios/usb_main.c ****                         break;
 428:tmk_core/protocol/chibios/usb_main.c ****                 }
 429:tmk_core/protocol/chibios/usb_main.c ****                 break;
 430:tmk_core/protocol/chibios/usb_main.c **** 
 431:tmk_core/protocol/chibios/usb_main.c ****             case USB_RTYPE_DIR_HOST2DEV:
 432:tmk_core/protocol/chibios/usb_main.c ****                 switch (usbp->setup[1]) { /* bRequest */
 433:tmk_core/protocol/chibios/usb_main.c ****                     case HID_SET_REPORT:
 434:tmk_core/protocol/chibios/usb_main.c ****                         switch (usbp->setup[4]) { /* LSB(wIndex) (check MSB==0 and wLength==1?) */
 435:tmk_core/protocol/chibios/usb_main.c ****                             case KEYBOARD_INTERFACE:
 436:tmk_core/protocol/chibios/usb_main.c **** #if defined(SHARED_EP_ENABLE) && !defined(KEYBOARD_SHARED_EP)
 437:tmk_core/protocol/chibios/usb_main.c ****                             case SHARED_INTERFACE:
 438:tmk_core/protocol/chibios/usb_main.c **** #endif
 439:tmk_core/protocol/chibios/usb_main.c ****                                 /* keyboard_led_stats = <read byte from next OUT report>
 440:tmk_core/protocol/chibios/usb_main.c ****                                  * keyboard_led_stats needs be word (or dword), otherwise we get an
 441:tmk_core/protocol/chibios/usb_main.c ****                                 has_report_id = 0;
 442:tmk_core/protocol/chibios/usb_main.c **** #if defined(SHARED_EP_ENABLE)
 443:tmk_core/protocol/chibios/usb_main.c ****                                 if (usbp->setup[4] == SHARED_INTERFACE) {
 444:tmk_core/protocol/chibios/usb_main.c ****                                     has_report_id = 1;
 445:tmk_core/protocol/chibios/usb_main.c ****                                 }
 446:tmk_core/protocol/chibios/usb_main.c **** #endif
 447:tmk_core/protocol/chibios/usb_main.c ****                                 if (usbp->setup[4] == KEYBOARD_INTERFACE && !keyboard_protocol) {
 448:tmk_core/protocol/chibios/usb_main.c ****                                     has_report_id = 0;
 449:tmk_core/protocol/chibios/usb_main.c ****                                 }
 450:tmk_core/protocol/chibios/usb_main.c ****                                 if (has_report_id) {
 451:tmk_core/protocol/chibios/usb_main.c ****                                     usbSetupTransfer(usbp, set_report_buf, sizeof(set_report_buf), 
 452:tmk_core/protocol/chibios/usb_main.c ****                                 } else {
 453:tmk_core/protocol/chibios/usb_main.c ****                                     usbSetupTransfer(usbp, (uint8_t *)&keyboard_led_stats, 1, NULL)
 454:tmk_core/protocol/chibios/usb_main.c ****                                 }
 455:tmk_core/protocol/chibios/usb_main.c ****                                 return TRUE;
 456:tmk_core/protocol/chibios/usb_main.c ****                                 break;
 457:tmk_core/protocol/chibios/usb_main.c ****                         }
 458:tmk_core/protocol/chibios/usb_main.c ****                         break;
 459:tmk_core/protocol/chibios/usb_main.c **** 
 460:tmk_core/protocol/chibios/usb_main.c ****                     case HID_SET_PROTOCOL:
 461:tmk_core/protocol/chibios/usb_main.c ****                         if ((usbp->setup[4] == KEYBOARD_INTERFACE) && (usbp->setup[5] == 0)) { /* w
 462:tmk_core/protocol/chibios/usb_main.c ****                             keyboard_protocol = ((usbp->setup[2]) != 0x00);                    /* L
 463:tmk_core/protocol/chibios/usb_main.c **** #ifdef NKRO_ENABLE
 464:tmk_core/protocol/chibios/usb_main.c ****                             keymap_config.nkro = !!keyboard_protocol;
 465:tmk_core/protocol/chibios/usb_main.c ****                             if (!keymap_config.nkro && keyboard_idle) {
 466:tmk_core/protocol/chibios/usb_main.c **** #else                           /* NKRO_ENABLE */
 467:tmk_core/protocol/chibios/usb_main.c ****                             if (keyboard_idle) {
 468:tmk_core/protocol/chibios/usb_main.c **** #endif                          /* NKRO_ENABLE */
 469:tmk_core/protocol/chibios/usb_main.c ****                                 /* arm the idle timer if boot protocol & idle */
 470:tmk_core/protocol/chibios/usb_main.c ****                                 osalSysLockFromISR();
 471:tmk_core/protocol/chibios/usb_main.c ****                                 chVTSetI(&keyboard_idle_timer, 4 * MS2ST(keyboard_idle), keyboard_i
 472:tmk_core/protocol/chibios/usb_main.c ****                                 osalSysUnlockFromISR();
 473:tmk_core/protocol/chibios/usb_main.c ****                             }
 474:tmk_core/protocol/chibios/usb_main.c ****                         }
 475:tmk_core/protocol/chibios/usb_main.c ****                         usbSetupTransfer(usbp, NULL, 0, NULL);
 476:tmk_core/protocol/chibios/usb_main.c ****                         return TRUE;
 477:tmk_core/protocol/chibios/usb_main.c ****                         break;
 478:tmk_core/protocol/chibios/usb_main.c **** 
 479:tmk_core/protocol/chibios/usb_main.c ****                     case HID_SET_IDLE:
 480:tmk_core/protocol/chibios/usb_main.c ****                         keyboard_idle = usbp->setup[3]; /* MSB(wValue) */
 481:tmk_core/protocol/chibios/usb_main.c ****                                                         /* arm the timer */
 482:tmk_core/protocol/chibios/usb_main.c **** #ifdef NKRO_ENABLE
 483:tmk_core/protocol/chibios/usb_main.c ****                         if (!keymap_config.nkro && keyboard_idle) {
 484:tmk_core/protocol/chibios/usb_main.c **** #else  /* NKRO_ENABLE */
 485:tmk_core/protocol/chibios/usb_main.c ****                         if (keyboard_idle) {
 486:tmk_core/protocol/chibios/usb_main.c **** #endif /* NKRO_ENABLE */
 487:tmk_core/protocol/chibios/usb_main.c ****                             osalSysLockFromISR();
 488:tmk_core/protocol/chibios/usb_main.c ****                             chVTSetI(&keyboard_idle_timer, 4 * MS2ST(keyboard_idle), keyboard_idle_
 489:tmk_core/protocol/chibios/usb_main.c ****                             osalSysUnlockFromISR();
 490:tmk_core/protocol/chibios/usb_main.c ****                         }
 491:tmk_core/protocol/chibios/usb_main.c ****                         usbSetupTransfer(usbp, NULL, 0, NULL);
 492:tmk_core/protocol/chibios/usb_main.c ****                         return TRUE;
 493:tmk_core/protocol/chibios/usb_main.c ****                         break;
 494:tmk_core/protocol/chibios/usb_main.c ****                 }
 495:tmk_core/protocol/chibios/usb_main.c ****                 break;
 496:tmk_core/protocol/chibios/usb_main.c ****         }
 497:tmk_core/protocol/chibios/usb_main.c ****     }
 498:tmk_core/protocol/chibios/usb_main.c **** 
 499:tmk_core/protocol/chibios/usb_main.c ****     /* Handle the Get_Descriptor Request for HID class (not handled by the default hook) */
 500:tmk_core/protocol/chibios/usb_main.c ****     if ((usbp->setup[0] == 0x81) && (usbp->setup[1] == USB_REQ_GET_DESCRIPTOR)) {
 501:tmk_core/protocol/chibios/usb_main.c ****         dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3], usbp->setup[2], get_hword(&usbp-
 502:tmk_core/protocol/chibios/usb_main.c ****         if (dp == NULL) return FALSE;
 503:tmk_core/protocol/chibios/usb_main.c ****         usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 504:tmk_core/protocol/chibios/usb_main.c ****         return TRUE;
 505:tmk_core/protocol/chibios/usb_main.c ****     }
 506:tmk_core/protocol/chibios/usb_main.c **** 
 507:tmk_core/protocol/chibios/usb_main.c ****     for (int i = 0; i < NUM_USB_DRIVERS; i++) {
 508:tmk_core/protocol/chibios/usb_main.c ****         if (drivers.array[i].config.int_in) {
 509:tmk_core/protocol/chibios/usb_main.c ****             // NOTE: Assumes that we only have one serial driver
 510:tmk_core/protocol/chibios/usb_main.c ****             return qmkusbRequestsHook(usbp);
 511:tmk_core/protocol/chibios/usb_main.c ****         }
 512:tmk_core/protocol/chibios/usb_main.c ****     }
 513:tmk_core/protocol/chibios/usb_main.c **** 
 514:tmk_core/protocol/chibios/usb_main.c ****     return FALSE;
 515:tmk_core/protocol/chibios/usb_main.c **** }
 516:tmk_core/protocol/chibios/usb_main.c **** 
 517:tmk_core/protocol/chibios/usb_main.c **** /* Start-of-frame callback */
 518:tmk_core/protocol/chibios/usb_main.c **** static void usb_sof_cb(USBDriver *usbp) {
 519:tmk_core/protocol/chibios/usb_main.c ****     kbd_sof_cb(usbp);
 520:tmk_core/protocol/chibios/usb_main.c ****     osalSysLockFromISR();
 521:tmk_core/protocol/chibios/usb_main.c ****     for (int i = 0; i < NUM_USB_DRIVERS; i++) {
 522:tmk_core/protocol/chibios/usb_main.c ****         qmkusbSOFHookI(&drivers.array[i].driver);
 523:tmk_core/protocol/chibios/usb_main.c ****     }
 524:tmk_core/protocol/chibios/usb_main.c ****     osalSysUnlockFromISR();
 525:tmk_core/protocol/chibios/usb_main.c **** }
 526:tmk_core/protocol/chibios/usb_main.c **** 
 527:tmk_core/protocol/chibios/usb_main.c **** /* USB driver configuration */
 528:tmk_core/protocol/chibios/usb_main.c **** static const USBConfig usbcfg = {
 529:tmk_core/protocol/chibios/usb_main.c ****     usb_event_cb,          /* USB events callback */
 530:tmk_core/protocol/chibios/usb_main.c ****     usb_get_descriptor_cb, /* Device GET_DESCRIPTOR request callback */
 531:tmk_core/protocol/chibios/usb_main.c ****     usb_request_hook_cb,   /* Requests hook callback */
 532:tmk_core/protocol/chibios/usb_main.c ****     usb_sof_cb             /* Start Of Frame callback */
 533:tmk_core/protocol/chibios/usb_main.c **** };
 534:tmk_core/protocol/chibios/usb_main.c **** 
 535:tmk_core/protocol/chibios/usb_main.c **** /*
 536:tmk_core/protocol/chibios/usb_main.c ****  * Initialize the USB driver
 537:tmk_core/protocol/chibios/usb_main.c ****  */
 538:tmk_core/protocol/chibios/usb_main.c **** void init_usb_driver(USBDriver *usbp) {
 539:tmk_core/protocol/chibios/usb_main.c ****     for (int i = 0; i < NUM_USB_DRIVERS; i++) {
 540:tmk_core/protocol/chibios/usb_main.c ****         QMKUSBDriver *driver                     = &drivers.array[i].driver;
 541:tmk_core/protocol/chibios/usb_main.c ****         drivers.array[i].in_ep_config.in_state   = &drivers.array[i].in_ep_state;
 542:tmk_core/protocol/chibios/usb_main.c ****         drivers.array[i].out_ep_config.out_state = &drivers.array[i].out_ep_state;
 543:tmk_core/protocol/chibios/usb_main.c ****         drivers.array[i].int_ep_config.in_state  = &drivers.array[i].int_ep_state;
 544:tmk_core/protocol/chibios/usb_main.c ****         qmkusbObjectInit(driver, &drivers.array[i].config);
 545:tmk_core/protocol/chibios/usb_main.c ****         qmkusbStart(driver, &drivers.array[i].config);
 546:tmk_core/protocol/chibios/usb_main.c ****     }
 547:tmk_core/protocol/chibios/usb_main.c **** 
 548:tmk_core/protocol/chibios/usb_main.c ****     /*
 549:tmk_core/protocol/chibios/usb_main.c ****      * Activates the USB driver and then the USB bus pull-up on D+.
 550:tmk_core/protocol/chibios/usb_main.c ****      * Note, a delay is inserted in order to not have to disconnect the cable
 551:tmk_core/protocol/chibios/usb_main.c ****      * after a reset.
 552:tmk_core/protocol/chibios/usb_main.c ****      */
 553:tmk_core/protocol/chibios/usb_main.c ****     usbDisconnectBus(usbp);
 554:tmk_core/protocol/chibios/usb_main.c ****     wait_ms(1500);
 555:tmk_core/protocol/chibios/usb_main.c ****     usbStart(usbp, &usbcfg);
 556:tmk_core/protocol/chibios/usb_main.c ****     usbConnectBus(usbp);
 557:tmk_core/protocol/chibios/usb_main.c **** 
 558:tmk_core/protocol/chibios/usb_main.c ****     chVTObjectInit(&keyboard_idle_timer);
 559:tmk_core/protocol/chibios/usb_main.c **** }
 560:tmk_core/protocol/chibios/usb_main.c **** 
 561:tmk_core/protocol/chibios/usb_main.c **** /* ---------------------------------------------------------
 562:tmk_core/protocol/chibios/usb_main.c ****  *                  Keyboard functions
 563:tmk_core/protocol/chibios/usb_main.c ****  * ---------------------------------------------------------
 564:tmk_core/protocol/chibios/usb_main.c ****  */
 565:tmk_core/protocol/chibios/usb_main.c **** /* keyboard IN callback hander (a kbd report has made it IN) */
 566:tmk_core/protocol/chibios/usb_main.c **** #ifndef KEYBOARD_SHARED_EP
 567:tmk_core/protocol/chibios/usb_main.c **** void kbd_in_cb(USBDriver *usbp, usbep_t ep) {
  61              		.loc 1 567 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66              	.LVL1:
 568:tmk_core/protocol/chibios/usb_main.c ****     /* STUB */
 569:tmk_core/protocol/chibios/usb_main.c ****     (void)usbp;
 570:tmk_core/protocol/chibios/usb_main.c ****     (void)ep;
 571:tmk_core/protocol/chibios/usb_main.c **** }
  67              		.loc 1 571 0
  68 0000 7047     		bx	lr
  69              		.cfi_endproc
  70              	.LFE286:
  72              		.section	.text.usb_sof_cb,"ax",%progbits
  73              		.align	1
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu softvfp
  79              	usb_sof_cb:
  80              	.LFB284:
 518:tmk_core/protocol/chibios/usb_main.c ****     kbd_sof_cb(usbp);
  81              		.loc 1 518 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              	.LVL2:
  86 0000 08B5     		push	{r3, lr}
  87              		.cfi_def_cfa_offset 8
  88              		.cfi_offset 3, -8
  89              		.cfi_offset 14, -4
  90              	.LBB339:
  91              	.LBB340:
  92              	.LBB341:
  93              	.LBB342:
  94              	.LBB343:
  95              	.LBB344:
  96              		.file 2 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @version  V4.30
   5:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
   9:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    All rights reserved.
  10:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      specific prior written permission.
  20:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    *
  21:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  35:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  38:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #endif
  45:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  46:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  47:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   @{
  51:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  52:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  53:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  54:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  58:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  60:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  62:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  63:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  64:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  65:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  69:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  71:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  73:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  74:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  75:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  76:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Control Register value
  79:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  80:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  82:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
  83:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  84:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
  86:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  87:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  88:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  89:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  90:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  94:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  96:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  98:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  99:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 100:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 101:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 105:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 107:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 108:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 109:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 111:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 112:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 113:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 114:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 115:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               APSR Register value
 118:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 119:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 121:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 122:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 123:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 125:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 126:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 127:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 128:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 129:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 132:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 134:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 136:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 137:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 138:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 140:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 141:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 142:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 143:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 144:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               PSP Register value
 147:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 148:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 150:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 151:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 154:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 155:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 156:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 157:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 158:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 162:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 164:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 166:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 167:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 168:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 169:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               MSP Register value
 172:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 173:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 175:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 176:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 177:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 179:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 180:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 181:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 182:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 183:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 188:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 190:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 192:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 193:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 194:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 195:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 199:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 201:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 202:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 203:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 205:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 206:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 207:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 208:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 209:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 213:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 215:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 217:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 218:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 219:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 221:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 222:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 226:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 228:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 230:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 231:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 232:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 233:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 237:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 239:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 241:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 243:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 244:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 248:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 250:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 251:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 252:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 254:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 255:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 257:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  97              		.loc 2 264 0
  98 0002 2023     		movs	r3, #32
  99              		.syntax unified
 100              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 101 0004 83F31188 		MSR basepri, r3
 102              	@ 0 "" 2
 103              	.LVL3:
 104              		.thumb
 105              		.syntax unified
 106              	.LBE344:
 107              	.LBE343:
 108              	.LBE342:
 109              	.LBE341:
 110              	.LBE340:
 111              	.LBE339:
 112              	.LBB345:
 522:tmk_core/protocol/chibios/usb_main.c ****     }
 113              		.loc 1 522 0
 114 0008 0348     		ldr	r0, .L7
 115              	.LVL4:
 116 000a FFF7FEFF 		bl	qmkusbSOFHookI
 117              	.LVL5:
 118              	.LBE345:
 119              	.LBB346:
 120              	.LBB347:
 121              	.LBB348:
 122              	.LBB349:
 123              	.LBB350:
 124              	.LBB351:
 125              		.loc 2 264 0
 126 000e 0023     		movs	r3, #0
 127              		.syntax unified
 128              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 129 0010 83F31188 		MSR basepri, r3
 130              	@ 0 "" 2
 131              	.LVL6:
 132              		.thumb
 133              		.syntax unified
 134              	.LBE351:
 135              	.LBE350:
 136              	.LBE349:
 137              	.LBE348:
 138              	.LBE347:
 139              	.LBE346:
 525:tmk_core/protocol/chibios/usb_main.c **** 
 140              		.loc 1 525 0
 141 0014 08BD     		pop	{r3, pc}
 142              	.L8:
 143 0016 00BF     		.align	2
 144              	.L7:
 145 0018 D4000000 		.word	.LANCHOR2+212
 146              		.cfi_endproc
 147              	.LFE284:
 149              		.section	.text.usb_get_descriptor_cb,"ax",%progbits
 150              		.align	1
 151              		.syntax unified
 152              		.thumb
 153              		.thumb_func
 154              		.fpu softvfp
 156              	usb_get_descriptor_cb:
 157              	.LFB279:
  86:tmk_core/protocol/chibios/usb_main.c ****     (void)usbp;
 158              		.loc 1 86 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              	.LVL7:
 163 0000 38B5     		push	{r3, r4, r5, lr}
 164              		.cfi_def_cfa_offset 16
 165              		.cfi_offset 3, -16
 166              		.cfi_offset 4, -12
 167              		.cfi_offset 5, -8
 168              		.cfi_offset 14, -4
  90:tmk_core/protocol/chibios/usb_main.c ****     desc.ud_size                = get_usb_descriptor(wValue, wIndex, (const void **const) & desc.ud
 169              		.loc 1 90 0
 170 0002 094C     		ldr	r4, .L12
  86:tmk_core/protocol/chibios/usb_main.c ****     (void)usbp;
 171              		.loc 1 86 0
 172 0004 1046     		mov	r0, r2
 173              	.LVL8:
  90:tmk_core/protocol/chibios/usb_main.c ****     desc.ud_size                = get_usb_descriptor(wValue, wIndex, (const void **const) & desc.ud
 174              		.loc 1 90 0
 175 0006 2246     		mov	r2, r4
 176              	.LVL9:
 177 0008 0025     		movs	r5, #0
 178 000a 42F8045F 		str	r5, [r2, #4]!
  91:tmk_core/protocol/chibios/usb_main.c ****     if (desc.ud_string == NULL)
 179              		.loc 1 91 0
 180 000e 40EA0120 		orr	r0, r0, r1, lsl #8
 181              	.LVL10:
 182 0012 1946     		mov	r1, r3
 183              	.LVL11:
 184 0014 FFF7FEFF 		bl	get_usb_descriptor
 185              	.LVL12:
  92:tmk_core/protocol/chibios/usb_main.c ****         return NULL;
 186              		.loc 1 92 0
 187 0018 6368     		ldr	r3, [r4, #4]
  91:tmk_core/protocol/chibios/usb_main.c ****     if (desc.ud_string == NULL)
 188              		.loc 1 91 0
 189 001a 2060     		str	r0, [r4]
  92:tmk_core/protocol/chibios/usb_main.c ****         return NULL;
 190              		.loc 1 92 0
 191 001c AB42     		cmp	r3, r5
  96:tmk_core/protocol/chibios/usb_main.c **** 
 192              		.loc 1 96 0
 193 001e 14BF     		ite	ne
 194 0020 2046     		movne	r0, r4
 195 0022 2846     		moveq	r0, r5
 196 0024 38BD     		pop	{r3, r4, r5, pc}
 197              	.L13:
 198 0026 00BF     		.align	2
 199              	.L12:
 200 0028 00000000 		.word	.LANCHOR3
 201              		.cfi_endproc
 202              	.LFE279:
 204              		.section	.text.usb_event_cb,"ax",%progbits
 205              		.align	1
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 209              		.fpu softvfp
 211              	usb_event_cb:
 212              	.LFB280:
 283:tmk_core/protocol/chibios/usb_main.c ****     switch (event) {
 213              		.loc 1 283 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217              	.LVL13:
 218 0000 38B5     		push	{r3, r4, r5, lr}
 219              		.cfi_def_cfa_offset 16
 220              		.cfi_offset 3, -16
 221              		.cfi_offset 4, -12
 222              		.cfi_offset 5, -8
 223              		.cfi_offset 14, -4
 283:tmk_core/protocol/chibios/usb_main.c ****     switch (event) {
 224              		.loc 1 283 0
 225 0002 0546     		mov	r5, r0
 284:tmk_core/protocol/chibios/usb_main.c ****         case USB_EVENT_ADDRESS:
 226              		.loc 1 284 0
 227 0004 0529     		cmp	r1, #5
 228 0006 2DD8     		bhi	.L14
 229 0008 DFE801F0 		tbb	[pc, r1]
 230              	.L17:
 231 000c 2D       		.byte	(.L16-.L17)/2
 232 000d 2C       		.byte	(.L14-.L17)/2
 233 000e 03       		.byte	(.L18-.L17)/2
 234 000f 2D       		.byte	(.L16-.L17)/2
 235 0010 2D       		.byte	(.L16-.L17)/2
 236 0011 34       		.byte	(.L19-.L17)/2
 237              		.p2align 1
 238              	.L18:
 239              	.LVL14:
 240              	.LBB411:
 241              	.LBB412:
 242              	.LBB413:
 243              	.LBB414:
 244              	.LBB415:
 245              	.LBB416:
 246              	.LBB417:
 247              	.LBB418:
 248              		.loc 2 264 0
 249 0012 2023     		movs	r3, #32
 250              		.syntax unified
 251              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 252 0014 83F31188 		MSR basepri, r3
 253              	@ 0 "" 2
 254              	.LVL15:
 255              		.thumb
 256              		.syntax unified
 257              	.LBE418:
 258              	.LBE417:
 259              	.LBE416:
 260              	.LBE415:
 261              	.LBE414:
 262              	.LBE413:
 263              	.LBB419:
 301:tmk_core/protocol/chibios/usb_main.c ****                 usbInitEndpointI(usbp, drivers.array[i].config.bulk_out, &drivers.array[i].out_ep_c
 264              		.loc 1 301 0
 265 0018 1D4C     		ldr	r4, .L25
 266              	.LBE419:
 292:tmk_core/protocol/chibios/usb_main.c **** #endif
 267              		.loc 1 292 0
 268 001a 1E4A     		ldr	r2, .L25+4
 269 001c 0121     		movs	r1, #1
 270              	.LVL16:
 271 001e FFF7FEFF 		bl	usbInitEndpointI
 272              	.LVL17:
 298:tmk_core/protocol/chibios/usb_main.c **** #endif
 273              		.loc 1 298 0
 274 0022 1D4A     		ldr	r2, .L25+8
 275 0024 0221     		movs	r1, #2
 276 0026 2846     		mov	r0, r5
 277 0028 FFF7FEFF 		bl	usbInitEndpointI
 278              	.LVL18:
 279              	.LBB420:
 301:tmk_core/protocol/chibios/usb_main.c ****                 usbInitEndpointI(usbp, drivers.array[i].config.bulk_out, &drivers.array[i].out_ep_c
 280              		.loc 1 301 0
 281 002c 04F14402 		add	r2, r4, #68
 282 0030 94F8B410 		ldrb	r1, [r4, #180]	@ zero_extendqisi2
 283 0034 2846     		mov	r0, r5
 284 0036 FFF7FEFF 		bl	usbInitEndpointI
 285              	.LVL19:
 302:tmk_core/protocol/chibios/usb_main.c ****                 if (drivers.array[i].config.int_in) {
 286              		.loc 1 302 0
 287 003a 94F8B510 		ldrb	r1, [r4, #181]	@ zero_extendqisi2
 288 003e 04F16802 		add	r2, r4, #104
 289 0042 2846     		mov	r0, r5
 290 0044 FFF7FEFF 		bl	usbInitEndpointI
 291              	.LVL20:
 303:tmk_core/protocol/chibios/usb_main.c ****                     usbInitEndpointI(usbp, drivers.array[i].config.int_in, &drivers.array[i].int_ep
 292              		.loc 1 303 0
 293 0048 94F8B610 		ldrb	r1, [r4, #182]	@ zero_extendqisi2
 294 004c 21B1     		cbz	r1, .L20
 304:tmk_core/protocol/chibios/usb_main.c ****                 }
 295              		.loc 1 304 0
 296 004e 04F18C02 		add	r2, r4, #140
 297 0052 2846     		mov	r0, r5
 298 0054 FFF7FEFF 		bl	usbInitEndpointI
 299              	.LVL21:
 300              	.L20:
 306:tmk_core/protocol/chibios/usb_main.c ****             }
 301              		.loc 1 306 0
 302 0058 1048     		ldr	r0, .L25+12
 303 005a FFF7FEFF 		bl	qmkusbConfigureHookI
 304              	.LVL22:
 305              	.L24:
 306              	.LBE420:
 307              	.LBE412:
 308              	.LBE411:
 309              	.LBB421:
 310              	.LBB422:
 311              	.LBB423:
 312              	.LBB424:
 313              	.LBB425:
 314              	.LBB426:
 315              		.loc 2 264 0 discriminator 1
 316 005e 0023     		movs	r3, #0
 317              		.syntax unified
 318              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 319 0060 83F31188 		MSR basepri, r3
 320              	@ 0 "" 2
 321              	.LVL23:
 322              		.thumb
 323              		.syntax unified
 324              	.L14:
 325              	.LBE426:
 326              	.LBE425:
 327              	.LBE424:
 328              	.LBE423:
 329              	.LBE422:
 330              	.LBE421:
 345:tmk_core/protocol/chibios/usb_main.c **** 
 331              		.loc 1 345 0
 332 0064 38BD     		pop	{r3, r4, r5, pc}
 333              	.LVL24:
 334              	.L16:
 335              	.LBB432:
 336              	.LBB427:
 337              	.LBB428:
 338              	.LBB429:
 339              	.LBB430:
 340              	.LBB431:
 341              		.loc 2 264 0 discriminator 1
 342 0066 2023     		movs	r3, #32
 343              		.syntax unified
 344              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 345 0068 83F31188 		MSR basepri, r3
 346              	@ 0 "" 2
 347              	.LVL25:
 348              		.thumb
 349              		.syntax unified
 350              	.LBE431:
 351              	.LBE430:
 352              	.LBE429:
 353              	.LBE428:
 354              	.LBE427:
 321:tmk_core/protocol/chibios/usb_main.c ****                 chSysUnlockFromISR();
 355              		.loc 1 321 0 discriminator 1
 356 006c 0B48     		ldr	r0, .L25+12
 357              	.LVL26:
 358 006e FFF7FEFF 		bl	qmkusbSuspendHookI
 359              	.LVL27:
 360 0072 F4E7     		b	.L24
 361              	.LVL28:
 362              	.L19:
 363              	.LBE432:
 364              	.LBB433:
 365              	.LBB434:
 366              	.LBB435:
 367              	.LBB436:
 368              	.LBB437:
 369              	.LBB438:
 370              		.loc 2 264 0 discriminator 1
 371 0074 2023     		movs	r3, #32
 372              		.syntax unified
 373              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 374 0076 83F31188 		MSR basepri, r3
 375              	@ 0 "" 2
 376              	.LVL29:
 377              		.thumb
 378              		.syntax unified
 379              	.LBE438:
 380              	.LBE437:
 381              	.LBE436:
 382              	.LBE435:
 383              	.LBE434:
 331:tmk_core/protocol/chibios/usb_main.c ****                 chSysUnlockFromISR();
 384              		.loc 1 331 0 discriminator 1
 385 007a 0848     		ldr	r0, .L25+12
 386              	.LVL30:
 387 007c FFF7FEFF 		bl	qmkusbWakeupHookI
 388              	.LVL31:
 389              	.LBB439:
 390              	.LBB440:
 391              	.LBB441:
 392              	.LBB442:
 393              	.LBB443:
 394              		.loc 2 264 0 discriminator 1
 395 0080 0023     		movs	r3, #0
 396              		.syntax unified
 397              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 398 0082 83F31188 		MSR basepri, r3
 399              	@ 0 "" 2
 400              	.LVL32:
 401              		.thumb
 402              		.syntax unified
 403              	.LBE443:
 404              	.LBE442:
 405              	.LBE441:
 406              	.LBE440:
 407              	.LBE439:
 408              	.LBE433:
 345:tmk_core/protocol/chibios/usb_main.c **** 
 409              		.loc 1 345 0 discriminator 1
 410 0086 BDE83840 		pop	{r3, r4, r5, lr}
 411              		.cfi_restore 14
 412              		.cfi_restore 5
 413              		.cfi_restore 4
 414              		.cfi_restore 3
 415              		.cfi_def_cfa_offset 0
 416              	.LVL33:
 334:tmk_core/protocol/chibios/usb_main.c **** #ifdef SLEEP_LED_ENABLE
 417              		.loc 1 334 0 discriminator 1
 418 008a FFF7FEBF 		b	suspend_wakeup_init
 419              	.LVL34:
 420              	.L26:
 421 008e 00BF     		.align	2
 422              	.L25:
 423 0090 00000000 		.word	.LANCHOR2
 424 0094 00000000 		.word	.LANCHOR4
 425 0098 00000000 		.word	.LANCHOR5
 426 009c D4000000 		.word	.LANCHOR2+212
 427              		.cfi_endproc
 428              	.LFE280:
 430              		.section	.text.chVTSetI.constprop.6,"ax",%progbits
 431              		.align	1
 432              		.syntax unified
 433              		.thumb
 434              		.thumb_func
 435              		.fpu softvfp
 437              	chVTSetI.constprop.6:
 438              	.LFB309:
 439              		.file 3 "./lib/chibios/os/rt/include/chvt.h"
   1:./lib/chibios/os/rt/include/chvt.h **** /*
   2:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chvt.h **** 
   4:./lib/chibios/os/rt/include/chvt.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chvt.h **** 
   6:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chvt.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chvt.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chvt.h **** 
  11:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chvt.h **** 
  16:./lib/chibios/os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chvt.h **** */
  19:./lib/chibios/os/rt/include/chvt.h **** 
  20:./lib/chibios/os/rt/include/chvt.h **** /**
  21:./lib/chibios/os/rt/include/chvt.h ****  * @file    chvt.h
  22:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:./lib/chibios/os/rt/include/chvt.h ****  *
  24:./lib/chibios/os/rt/include/chvt.h ****  * @addtogroup time
  25:./lib/chibios/os/rt/include/chvt.h ****  * @{
  26:./lib/chibios/os/rt/include/chvt.h ****  */
  27:./lib/chibios/os/rt/include/chvt.h **** 
  28:./lib/chibios/os/rt/include/chvt.h **** #ifndef CHVT_H
  29:./lib/chibios/os/rt/include/chvt.h **** #define CHVT_H
  30:./lib/chibios/os/rt/include/chvt.h **** 
  31:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chvt.h **** 
  35:./lib/chibios/os/rt/include/chvt.h **** /**
  36:./lib/chibios/os/rt/include/chvt.h ****  * @name    Special time constants
  37:./lib/chibios/os/rt/include/chvt.h ****  * @{
  38:./lib/chibios/os/rt/include/chvt.h ****  */
  39:./lib/chibios/os/rt/include/chvt.h **** /**
  40:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Zero time specification for some functions with a timeout
  41:./lib/chibios/os/rt/include/chvt.h ****  *          specification.
  42:./lib/chibios/os/rt/include/chvt.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  43:./lib/chibios/os/rt/include/chvt.h ****  *          see the specific function documentation.
  44:./lib/chibios/os/rt/include/chvt.h ****  */
  45:./lib/chibios/os/rt/include/chvt.h **** #define TIME_IMMEDIATE  ((systime_t)0)
  46:./lib/chibios/os/rt/include/chvt.h **** 
  47:./lib/chibios/os/rt/include/chvt.h **** /**
  48:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Infinite time specification for all functions with a timeout
  49:./lib/chibios/os/rt/include/chvt.h ****  *          specification.
  50:./lib/chibios/os/rt/include/chvt.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  51:./lib/chibios/os/rt/include/chvt.h ****  *          see the specific function documentation.
  52:./lib/chibios/os/rt/include/chvt.h ****  */
  53:./lib/chibios/os/rt/include/chvt.h **** #define TIME_INFINITE   ((systime_t)-1)
  54:./lib/chibios/os/rt/include/chvt.h **** 
  55:./lib/chibios/os/rt/include/chvt.h **** /**
  56:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Maximum time constant.
  57:./lib/chibios/os/rt/include/chvt.h ****  */
  58:./lib/chibios/os/rt/include/chvt.h **** #define TIME_MAXIMUM    ((systime_t)-2)
  59:./lib/chibios/os/rt/include/chvt.h **** /** @} */
  60:./lib/chibios/os/rt/include/chvt.h **** 
  61:./lib/chibios/os/rt/include/chvt.h **** /**
  62:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Maximum unsigned integer.
  63:./lib/chibios/os/rt/include/chvt.h ****  */
  64:./lib/chibios/os/rt/include/chvt.h **** #define __UINT_MAX      ((unsigned int)-1)
  65:./lib/chibios/os/rt/include/chvt.h **** 
  66:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  67:./lib/chibios/os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  68:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  69:./lib/chibios/os/rt/include/chvt.h **** 
  70:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  71:./lib/chibios/os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  72:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  73:./lib/chibios/os/rt/include/chvt.h **** 
  74:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32)
  75:./lib/chibios/os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16 or 32"
  76:./lib/chibios/os/rt/include/chvt.h **** #endif
  77:./lib/chibios/os/rt/include/chvt.h **** 
  78:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_FREQUENCY <= 0
  79:./lib/chibios/os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be greater than zero"
  80:./lib/chibios/os/rt/include/chvt.h **** #endif
  81:./lib/chibios/os/rt/include/chvt.h **** 
  82:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  83:./lib/chibios/os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  84:./lib/chibios/os/rt/include/chvt.h ****        "be zero or greater than one"
  85:./lib/chibios/os/rt/include/chvt.h **** #endif
  86:./lib/chibios/os/rt/include/chvt.h **** 
  87:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  88:./lib/chibios/os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  89:./lib/chibios/os/rt/include/chvt.h **** #endif
  90:./lib/chibios/os/rt/include/chvt.h **** 
  91:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  92:./lib/chibios/os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  93:./lib/chibios/os/rt/include/chvt.h **** #endif
  94:./lib/chibios/os/rt/include/chvt.h **** 
  95:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  96:./lib/chibios/os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  97:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  98:./lib/chibios/os/rt/include/chvt.h **** 
  99:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 100:./lib/chibios/os/rt/include/chvt.h **** /* Module macros.                                                            */
 101:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 102:./lib/chibios/os/rt/include/chvt.h **** 
 103:./lib/chibios/os/rt/include/chvt.h **** /**
 104:./lib/chibios/os/rt/include/chvt.h ****  * @name    Fast time conversion utilities
 105:./lib/chibios/os/rt/include/chvt.h ****  * @{
 106:./lib/chibios/os/rt/include/chvt.h ****  */
 107:./lib/chibios/os/rt/include/chvt.h **** /**
 108:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Seconds to system ticks.
 109:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from seconds to system ticks number.
 110:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 111:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 112:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 113:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 114:./lib/chibios/os/rt/include/chvt.h ****  *
 115:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] sec       number of seconds
 116:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 117:./lib/chibios/os/rt/include/chvt.h ****  *
 118:./lib/chibios/os/rt/include/chvt.h ****  * @api
 119:./lib/chibios/os/rt/include/chvt.h ****  */
 120:./lib/chibios/os/rt/include/chvt.h **** #define S2ST(sec)                                                           \
 121:./lib/chibios/os/rt/include/chvt.h ****   ((systime_t)((uint32_t)(sec) * (uint32_t)CH_CFG_ST_FREQUENCY))
 122:./lib/chibios/os/rt/include/chvt.h **** 
 123:./lib/chibios/os/rt/include/chvt.h **** /**
 124:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Milliseconds to system ticks.
 125:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from milliseconds to system ticks number.
 126:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 127:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 128:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 129:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 130:./lib/chibios/os/rt/include/chvt.h ****  *
 131:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] msec      number of milliseconds
 132:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 133:./lib/chibios/os/rt/include/chvt.h ****  *
 134:./lib/chibios/os/rt/include/chvt.h ****  * @api
 135:./lib/chibios/os/rt/include/chvt.h ****  */
 136:./lib/chibios/os/rt/include/chvt.h **** #define MS2ST(msec)                                                         \
 137:./lib/chibios/os/rt/include/chvt.h ****   ((systime_t)(((((uint32_t)(msec)) *                                       \
 138:./lib/chibios/os/rt/include/chvt.h ****                  ((uint32_t)CH_CFG_ST_FREQUENCY)) + 999UL) / 1000UL))
 139:./lib/chibios/os/rt/include/chvt.h **** 
 140:./lib/chibios/os/rt/include/chvt.h **** /**
 141:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Microseconds to system ticks.
 142:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from microseconds to system ticks number.
 143:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 144:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 145:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 146:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 147:./lib/chibios/os/rt/include/chvt.h ****  *
 148:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] usec      number of microseconds
 149:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 150:./lib/chibios/os/rt/include/chvt.h ****  *
 151:./lib/chibios/os/rt/include/chvt.h ****  * @api
 152:./lib/chibios/os/rt/include/chvt.h ****  */
 153:./lib/chibios/os/rt/include/chvt.h **** #define US2ST(usec)                                                         \
 154:./lib/chibios/os/rt/include/chvt.h ****   ((systime_t)(((((uint32_t)(usec)) *                                       \
 155:./lib/chibios/os/rt/include/chvt.h ****                  ((uint32_t)CH_CFG_ST_FREQUENCY)) + 999999UL) / 1000000UL))
 156:./lib/chibios/os/rt/include/chvt.h **** 
 157:./lib/chibios/os/rt/include/chvt.h **** /**
 158:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to seconds.
 159:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to seconds.
 160:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next second boundary.
 161:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 162:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 163:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 164:./lib/chibios/os/rt/include/chvt.h ****  *
 165:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 166:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of seconds.
 167:./lib/chibios/os/rt/include/chvt.h ****  *
 168:./lib/chibios/os/rt/include/chvt.h ****  * @api
 169:./lib/chibios/os/rt/include/chvt.h ****  */
 170:./lib/chibios/os/rt/include/chvt.h **** #define ST2S(n) (((n) + CH_CFG_ST_FREQUENCY - 1UL) / CH_CFG_ST_FREQUENCY)
 171:./lib/chibios/os/rt/include/chvt.h **** 
 172:./lib/chibios/os/rt/include/chvt.h **** /**
 173:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to milliseconds.
 174:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to milliseconds.
 175:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next millisecond boundary.
 176:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 177:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 178:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 179:./lib/chibios/os/rt/include/chvt.h ****  *
 180:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 181:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of milliseconds.
 182:./lib/chibios/os/rt/include/chvt.h ****  *
 183:./lib/chibios/os/rt/include/chvt.h ****  * @api
 184:./lib/chibios/os/rt/include/chvt.h ****  */
 185:./lib/chibios/os/rt/include/chvt.h **** #define ST2MS(n) (((n) * 1000UL + CH_CFG_ST_FREQUENCY - 1UL) /              \
 186:./lib/chibios/os/rt/include/chvt.h ****                   CH_CFG_ST_FREQUENCY)
 187:./lib/chibios/os/rt/include/chvt.h **** 
 188:./lib/chibios/os/rt/include/chvt.h **** /**
 189:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to microseconds.
 190:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to microseconds.
 191:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next microsecond boundary.
 192:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 193:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 194:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 195:./lib/chibios/os/rt/include/chvt.h ****  *
 196:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 197:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of microseconds.
 198:./lib/chibios/os/rt/include/chvt.h ****  *
 199:./lib/chibios/os/rt/include/chvt.h ****  * @api
 200:./lib/chibios/os/rt/include/chvt.h ****  */
 201:./lib/chibios/os/rt/include/chvt.h **** #define ST2US(n) (((n) * 1000000UL + CH_CFG_ST_FREQUENCY - 1UL) /           \
 202:./lib/chibios/os/rt/include/chvt.h ****                   CH_CFG_ST_FREQUENCY)
 203:./lib/chibios/os/rt/include/chvt.h **** /** @} */
 204:./lib/chibios/os/rt/include/chvt.h **** 
 205:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 206:./lib/chibios/os/rt/include/chvt.h **** /* External declarations.                                                    */
 207:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 208:./lib/chibios/os/rt/include/chvt.h **** 
 209:./lib/chibios/os/rt/include/chvt.h **** /*
 210:./lib/chibios/os/rt/include/chvt.h ****  * Virtual Timers APIs.
 211:./lib/chibios/os/rt/include/chvt.h ****  */
 212:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
 213:./lib/chibios/os/rt/include/chvt.h **** extern "C" {
 214:./lib/chibios/os/rt/include/chvt.h **** #endif
 215:./lib/chibios/os/rt/include/chvt.h ****   void _vt_init(void);
 216:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
 217:./lib/chibios/os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
 218:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
 219:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
 220:./lib/chibios/os/rt/include/chvt.h **** }
 221:./lib/chibios/os/rt/include/chvt.h **** #endif
 222:./lib/chibios/os/rt/include/chvt.h **** 
 223:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 224:./lib/chibios/os/rt/include/chvt.h **** /* Module inline functions.                                                  */
 225:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 226:./lib/chibios/os/rt/include/chvt.h **** 
 227:./lib/chibios/os/rt/include/chvt.h **** /**
 228:./lib/chibios/os/rt/include/chvt.h ****  * @name    Secure time conversion utilities
 229:./lib/chibios/os/rt/include/chvt.h ****  * @{
 230:./lib/chibios/os/rt/include/chvt.h ****  */
 231:./lib/chibios/os/rt/include/chvt.h **** /**
 232:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Seconds to system ticks.
 233:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from seconds to system ticks number.
 234:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 235:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 236:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 237:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 238:./lib/chibios/os/rt/include/chvt.h ****  *
 239:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] sec       number of seconds
 240:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 241:./lib/chibios/os/rt/include/chvt.h ****  *
 242:./lib/chibios/os/rt/include/chvt.h ****  * @api
 243:./lib/chibios/os/rt/include/chvt.h ****  */
 244:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t LL_S2ST(unsigned int sec) {
 245:./lib/chibios/os/rt/include/chvt.h ****   uint64_t ticks = (uint64_t)sec * (uint64_t)CH_CFG_ST_FREQUENCY;
 246:./lib/chibios/os/rt/include/chvt.h **** 
 247:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(ticks <= (uint64_t)TIME_MAXIMUM, "conversion overflow");
 248:./lib/chibios/os/rt/include/chvt.h **** 
 249:./lib/chibios/os/rt/include/chvt.h ****   return (systime_t)ticks;
 250:./lib/chibios/os/rt/include/chvt.h **** }
 251:./lib/chibios/os/rt/include/chvt.h **** 
 252:./lib/chibios/os/rt/include/chvt.h **** /**
 253:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Milliseconds to system ticks.
 254:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from milliseconds to system ticks number.
 255:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 256:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 257:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 258:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 259:./lib/chibios/os/rt/include/chvt.h ****  *
 260:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] msec      number of milliseconds
 261:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 262:./lib/chibios/os/rt/include/chvt.h ****  *
 263:./lib/chibios/os/rt/include/chvt.h ****  * @api
 264:./lib/chibios/os/rt/include/chvt.h ****  */
 265:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t LL_MS2ST(unsigned int msec) {
 266:./lib/chibios/os/rt/include/chvt.h ****   uint64_t ticks = (((uint64_t)msec * (uint64_t)CH_CFG_ST_FREQUENCY) + 999ULL)
 267:./lib/chibios/os/rt/include/chvt.h ****                    / 1000ULL;
 268:./lib/chibios/os/rt/include/chvt.h **** 
 269:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(ticks <= (uint64_t)TIME_MAXIMUM, "conversion overflow");
 270:./lib/chibios/os/rt/include/chvt.h **** 
 271:./lib/chibios/os/rt/include/chvt.h ****   return (systime_t)ticks;
 272:./lib/chibios/os/rt/include/chvt.h **** }
 273:./lib/chibios/os/rt/include/chvt.h **** 
 274:./lib/chibios/os/rt/include/chvt.h **** /**
 275:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Microseconds to system ticks.
 276:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from microseconds to system ticks number.
 277:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 278:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 279:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 280:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 281:./lib/chibios/os/rt/include/chvt.h ****  *
 282:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] usec      number of microseconds
 283:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 284:./lib/chibios/os/rt/include/chvt.h ****  *
 285:./lib/chibios/os/rt/include/chvt.h ****  * @api
 286:./lib/chibios/os/rt/include/chvt.h ****  */
 287:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t LL_US2ST(unsigned int usec) {
 288:./lib/chibios/os/rt/include/chvt.h ****   uint64_t ticks = (((uint64_t)usec * (uint64_t)CH_CFG_ST_FREQUENCY) + 999999ULL)
 289:./lib/chibios/os/rt/include/chvt.h ****                    / 1000000ULL;
 290:./lib/chibios/os/rt/include/chvt.h **** 
 291:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(ticks <= (uint64_t)TIME_MAXIMUM, "conversion overflow");
 292:./lib/chibios/os/rt/include/chvt.h **** 
 293:./lib/chibios/os/rt/include/chvt.h ****   return (systime_t)ticks;
 294:./lib/chibios/os/rt/include/chvt.h **** }
 295:./lib/chibios/os/rt/include/chvt.h **** 
 296:./lib/chibios/os/rt/include/chvt.h **** /**
 297:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to seconds.
 298:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to seconds.
 299:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next second boundary.
 300:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 301:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 302:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 303:./lib/chibios/os/rt/include/chvt.h ****  *
 304:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 305:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of seconds.
 306:./lib/chibios/os/rt/include/chvt.h ****  *
 307:./lib/chibios/os/rt/include/chvt.h ****  * @api
 308:./lib/chibios/os/rt/include/chvt.h ****  */
 309:./lib/chibios/os/rt/include/chvt.h **** static inline unsigned int LL_ST2S(systime_t n) {
 310:./lib/chibios/os/rt/include/chvt.h ****   uint64_t sec = ((uint64_t)n + (uint64_t)CH_CFG_ST_FREQUENCY - 1ULL)
 311:./lib/chibios/os/rt/include/chvt.h ****                  / (uint64_t)CH_CFG_ST_FREQUENCY;
 312:./lib/chibios/os/rt/include/chvt.h **** 
 313:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(sec < (uint64_t)__UINT_MAX, "conversion overflow");
 314:./lib/chibios/os/rt/include/chvt.h **** 
 315:./lib/chibios/os/rt/include/chvt.h ****   return (unsigned int)sec;
 316:./lib/chibios/os/rt/include/chvt.h **** }
 317:./lib/chibios/os/rt/include/chvt.h **** 
 318:./lib/chibios/os/rt/include/chvt.h **** /**
 319:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to milliseconds.
 320:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to milliseconds.
 321:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next millisecond boundary.
 322:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 323:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 324:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 325:./lib/chibios/os/rt/include/chvt.h ****  *
 326:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 327:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of milliseconds.
 328:./lib/chibios/os/rt/include/chvt.h ****  *
 329:./lib/chibios/os/rt/include/chvt.h ****  * @api
 330:./lib/chibios/os/rt/include/chvt.h ****  */
 331:./lib/chibios/os/rt/include/chvt.h **** static inline unsigned int LL_ST2MS(systime_t n) {
 332:./lib/chibios/os/rt/include/chvt.h ****   uint64_t msec = (((uint64_t)n * 1000ULL) + (uint64_t)CH_CFG_ST_FREQUENCY - 1ULL)
 333:./lib/chibios/os/rt/include/chvt.h ****                    / (uint64_t)CH_CFG_ST_FREQUENCY;
 334:./lib/chibios/os/rt/include/chvt.h **** 
 335:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(msec < (uint64_t)__UINT_MAX, "conversion overflow");
 336:./lib/chibios/os/rt/include/chvt.h **** 
 337:./lib/chibios/os/rt/include/chvt.h ****   return (unsigned int)msec;
 338:./lib/chibios/os/rt/include/chvt.h **** }
 339:./lib/chibios/os/rt/include/chvt.h **** 
 340:./lib/chibios/os/rt/include/chvt.h **** /**
 341:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to microseconds.
 342:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to microseconds.
 343:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next microsecond boundary.
 344:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 345:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 346:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 347:./lib/chibios/os/rt/include/chvt.h ****  *
 348:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 349:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of microseconds.
 350:./lib/chibios/os/rt/include/chvt.h ****  *
 351:./lib/chibios/os/rt/include/chvt.h ****  * @api
 352:./lib/chibios/os/rt/include/chvt.h ****  */
 353:./lib/chibios/os/rt/include/chvt.h **** static inline unsigned int LL_ST2US(systime_t n) {
 354:./lib/chibios/os/rt/include/chvt.h ****   uint64_t usec = (((uint64_t)n * 1000000ULL) + (uint64_t)CH_CFG_ST_FREQUENCY - 1ULL)
 355:./lib/chibios/os/rt/include/chvt.h ****                    / (uint64_t)CH_CFG_ST_FREQUENCY;
 356:./lib/chibios/os/rt/include/chvt.h **** 
 357:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(usec < (uint64_t)__UINT_MAX, "conversion overflow");
 358:./lib/chibios/os/rt/include/chvt.h **** 
 359:./lib/chibios/os/rt/include/chvt.h ****   return (unsigned int)usec;
 360:./lib/chibios/os/rt/include/chvt.h **** }
 361:./lib/chibios/os/rt/include/chvt.h **** /** @} */
 362:./lib/chibios/os/rt/include/chvt.h **** 
 363:./lib/chibios/os/rt/include/chvt.h **** /**
 364:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
 365:./lib/chibios/os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
 366:./lib/chibios/os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
 367:./lib/chibios/os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
 368:./lib/chibios/os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
 369:./lib/chibios/os/rt/include/chvt.h ****  *
 370:./lib/chibios/os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
 371:./lib/chibios/os/rt/include/chvt.h ****  *
 372:./lib/chibios/os/rt/include/chvt.h ****  * @init
 373:./lib/chibios/os/rt/include/chvt.h ****  */
 374:./lib/chibios/os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
 375:./lib/chibios/os/rt/include/chvt.h **** 
 376:./lib/chibios/os/rt/include/chvt.h ****   vtp->func = NULL;
 377:./lib/chibios/os/rt/include/chvt.h **** }
 378:./lib/chibios/os/rt/include/chvt.h **** 
 379:./lib/chibios/os/rt/include/chvt.h **** /**
 380:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Current system time.
 381:./lib/chibios/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 382:./lib/chibios/os/rt/include/chvt.h ****  *          invocation.
 383:./lib/chibios/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 384:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 385:./lib/chibios/os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 386:./lib/chibios/os/rt/include/chvt.h ****  *          @p systime_t size.
 387:./lib/chibios/os/rt/include/chvt.h ****  *
 388:./lib/chibios/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 389:./lib/chibios/os/rt/include/chvt.h ****  *
 390:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 391:./lib/chibios/os/rt/include/chvt.h ****  */
 392:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 393:./lib/chibios/os/rt/include/chvt.h **** 
 394:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 395:./lib/chibios/os/rt/include/chvt.h ****   return ch.vtlist.systime;
 396:./lib/chibios/os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 397:./lib/chibios/os/rt/include/chvt.h ****   return port_timer_get_time();
 398:./lib/chibios/os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 399:./lib/chibios/os/rt/include/chvt.h **** }
 400:./lib/chibios/os/rt/include/chvt.h **** 
 401:./lib/chibios/os/rt/include/chvt.h **** /**
 402:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Current system time.
 403:./lib/chibios/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 404:./lib/chibios/os/rt/include/chvt.h ****  *          invocation.
 405:./lib/chibios/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 406:./lib/chibios/os/rt/include/chvt.h ****  *
 407:./lib/chibios/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 408:./lib/chibios/os/rt/include/chvt.h ****  *
 409:./lib/chibios/os/rt/include/chvt.h ****  * @api
 410:./lib/chibios/os/rt/include/chvt.h ****  */
 411:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 412:./lib/chibios/os/rt/include/chvt.h ****   systime_t systime;
 413:./lib/chibios/os/rt/include/chvt.h **** 
 414:./lib/chibios/os/rt/include/chvt.h ****   chSysLock();
 415:./lib/chibios/os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 416:./lib/chibios/os/rt/include/chvt.h ****   chSysUnlock();
 417:./lib/chibios/os/rt/include/chvt.h **** 
 418:./lib/chibios/os/rt/include/chvt.h ****   return systime;
 419:./lib/chibios/os/rt/include/chvt.h **** }
 420:./lib/chibios/os/rt/include/chvt.h **** 
 421:./lib/chibios/os/rt/include/chvt.h **** /**
 422:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 423:./lib/chibios/os/rt/include/chvt.h ****  *
 424:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     start time
 425:./lib/chibios/os/rt/include/chvt.h ****  * @return              The elapsed time.
 426:./lib/chibios/os/rt/include/chvt.h ****  *
 427:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 428:./lib/chibios/os/rt/include/chvt.h ****  */
 429:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTTimeElapsedSinceX(systime_t start) {
 430:./lib/chibios/os/rt/include/chvt.h **** 
 431:./lib/chibios/os/rt/include/chvt.h ****   return chVTGetSystemTimeX() - start;
 432:./lib/chibios/os/rt/include/chvt.h **** }
 433:./lib/chibios/os/rt/include/chvt.h **** 
 434:./lib/chibios/os/rt/include/chvt.h **** /**
 435:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Checks if the specified time is within the specified time window.
 436:./lib/chibios/os/rt/include/chvt.h ****  * @note    When start==end then the function returns always true because the
 437:./lib/chibios/os/rt/include/chvt.h ****  *          whole time range is specified.
 438:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function can be called from any context.
 439:./lib/chibios/os/rt/include/chvt.h ****  *
 440:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] time      the time to be verified
 441:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 442:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 443:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 444:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 445:./lib/chibios/os/rt/include/chvt.h ****  *
 446:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 447:./lib/chibios/os/rt/include/chvt.h ****  */
 448:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsTimeWithinX(systime_t time,
 449:./lib/chibios/os/rt/include/chvt.h ****                                      systime_t start,
 450:./lib/chibios/os/rt/include/chvt.h ****                                      systime_t end) {
 451:./lib/chibios/os/rt/include/chvt.h **** 
 452:./lib/chibios/os/rt/include/chvt.h ****   return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 453:./lib/chibios/os/rt/include/chvt.h **** }
 454:./lib/chibios/os/rt/include/chvt.h **** 
 455:./lib/chibios/os/rt/include/chvt.h **** /**
 456:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 457:./lib/chibios/os/rt/include/chvt.h ****  *          window.
 458:./lib/chibios/os/rt/include/chvt.h ****  * @note    When start==end then the function returns always true because the
 459:./lib/chibios/os/rt/include/chvt.h ****  *          whole time range is specified.
 460:./lib/chibios/os/rt/include/chvt.h ****  *
 461:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 462:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 463:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 464:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 465:./lib/chibios/os/rt/include/chvt.h ****  *
 466:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 467:./lib/chibios/os/rt/include/chvt.h ****  */
 468:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithinX(systime_t start, systime_t end) {
 469:./lib/chibios/os/rt/include/chvt.h **** 
 470:./lib/chibios/os/rt/include/chvt.h ****   return chVTIsTimeWithinX(chVTGetSystemTimeX(), start, end);
 471:./lib/chibios/os/rt/include/chvt.h **** }
 472:./lib/chibios/os/rt/include/chvt.h **** 
 473:./lib/chibios/os/rt/include/chvt.h **** /**
 474:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Checks if the current system time is within the specified time
 475:./lib/chibios/os/rt/include/chvt.h ****  *          window.
 476:./lib/chibios/os/rt/include/chvt.h ****  * @note    When start==end then the function returns always true because the
 477:./lib/chibios/os/rt/include/chvt.h ****  *          whole time range is specified.
 478:./lib/chibios/os/rt/include/chvt.h ****  *
 479:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 480:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 481:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 482:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 483:./lib/chibios/os/rt/include/chvt.h ****  *
 484:./lib/chibios/os/rt/include/chvt.h ****  * @api
 485:./lib/chibios/os/rt/include/chvt.h ****  */
 486:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsSystemTimeWithin(systime_t start, systime_t end) {
 487:./lib/chibios/os/rt/include/chvt.h **** 
 488:./lib/chibios/os/rt/include/chvt.h ****   return chVTIsTimeWithinX(chVTGetSystemTime(), start, end);
 489:./lib/chibios/os/rt/include/chvt.h **** }
 490:./lib/chibios/os/rt/include/chvt.h **** 
 491:./lib/chibios/os/rt/include/chvt.h **** /**
 492:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns the time interval until the next timer event.
 493:./lib/chibios/os/rt/include/chvt.h ****  * @note    The return value is not perfectly accurate and can report values
 494:./lib/chibios/os/rt/include/chvt.h ****  *          in excess of @p CH_CFG_ST_TIMEDELTA ticks.
 495:./lib/chibios/os/rt/include/chvt.h ****  * @note    The interval returned by this function is only meaningful if
 496:./lib/chibios/os/rt/include/chvt.h ****  *          more timers are not added to the list until the returned time.
 497:./lib/chibios/os/rt/include/chvt.h ****  *
 498:./lib/chibios/os/rt/include/chvt.h ****  * @param[out] timep    pointer to a variable that will contain the time
 499:./lib/chibios/os/rt/include/chvt.h ****  *                      interval until the next timer elapses. This pointer
 500:./lib/chibios/os/rt/include/chvt.h ****  *                      can be @p NULL if the information is not required.
 501:./lib/chibios/os/rt/include/chvt.h ****  * @return              The time, in ticks, until next time event.
 502:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        if the timers list is empty.
 503:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         if the timers list contains at least one timer.
 504:./lib/chibios/os/rt/include/chvt.h ****  *
 505:./lib/chibios/os/rt/include/chvt.h ****  * @iclass
 506:./lib/chibios/os/rt/include/chvt.h ****  */
 507:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTGetTimersStateI(systime_t *timep) {
 508:./lib/chibios/os/rt/include/chvt.h **** 
 509:./lib/chibios/os/rt/include/chvt.h ****   chDbgCheckClassI();
 510:./lib/chibios/os/rt/include/chvt.h **** 
 511:./lib/chibios/os/rt/include/chvt.h ****   if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 512:./lib/chibios/os/rt/include/chvt.h ****     return false;
 513:./lib/chibios/os/rt/include/chvt.h ****   }
 514:./lib/chibios/os/rt/include/chvt.h **** 
 515:./lib/chibios/os/rt/include/chvt.h ****   if (timep != NULL) {
 516:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 517:./lib/chibios/os/rt/include/chvt.h ****     *timep = ch.vtlist.next->delta;
 518:./lib/chibios/os/rt/include/chvt.h **** #else
 519:./lib/chibios/os/rt/include/chvt.h ****     *timep = ch.vtlist.lasttime + ch.vtlist.next->delta +
 520:./lib/chibios/os/rt/include/chvt.h ****              CH_CFG_ST_TIMEDELTA - chVTGetSystemTimeX();
 521:./lib/chibios/os/rt/include/chvt.h **** #endif
 522:./lib/chibios/os/rt/include/chvt.h ****   }
 523:./lib/chibios/os/rt/include/chvt.h **** 
 524:./lib/chibios/os/rt/include/chvt.h ****   return true;
 525:./lib/chibios/os/rt/include/chvt.h **** }
 526:./lib/chibios/os/rt/include/chvt.h **** 
 527:./lib/chibios/os/rt/include/chvt.h **** /**
 528:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 529:./lib/chibios/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 530:./lib/chibios/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 531:./lib/chibios/os/rt/include/chvt.h ****  *
 532:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 533:./lib/chibios/os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 534:./lib/chibios/os/rt/include/chvt.h ****  *
 535:./lib/chibios/os/rt/include/chvt.h ****  * @iclass
 536:./lib/chibios/os/rt/include/chvt.h ****  */
 537:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsArmedI(virtual_timer_t *vtp) {
 538:./lib/chibios/os/rt/include/chvt.h **** 
 539:./lib/chibios/os/rt/include/chvt.h ****   chDbgCheckClassI();
 540:./lib/chibios/os/rt/include/chvt.h **** 
 541:./lib/chibios/os/rt/include/chvt.h ****   return (bool)(vtp->func != NULL);
 542:./lib/chibios/os/rt/include/chvt.h **** }
 543:./lib/chibios/os/rt/include/chvt.h **** 
 544:./lib/chibios/os/rt/include/chvt.h **** /**
 545:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns @p true if the specified timer is armed.
 546:./lib/chibios/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 547:./lib/chibios/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 548:./lib/chibios/os/rt/include/chvt.h ****  *
 549:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 550:./lib/chibios/os/rt/include/chvt.h ****  * @return              true if the timer is armed.
 551:./lib/chibios/os/rt/include/chvt.h ****  *
 552:./lib/chibios/os/rt/include/chvt.h ****  * @api
 553:./lib/chibios/os/rt/include/chvt.h ****  */
 554:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsArmed(virtual_timer_t *vtp) {
 555:./lib/chibios/os/rt/include/chvt.h ****   bool b;
 556:./lib/chibios/os/rt/include/chvt.h **** 
 557:./lib/chibios/os/rt/include/chvt.h ****   chSysLock();
 558:./lib/chibios/os/rt/include/chvt.h ****   b = chVTIsArmedI(vtp);
 559:./lib/chibios/os/rt/include/chvt.h ****   chSysUnlock();
 560:./lib/chibios/os/rt/include/chvt.h **** 
 561:./lib/chibios/os/rt/include/chvt.h ****   return b;
 562:./lib/chibios/os/rt/include/chvt.h **** }
 563:./lib/chibios/os/rt/include/chvt.h **** 
 564:./lib/chibios/os/rt/include/chvt.h **** /**
 565:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 566:./lib/chibios/os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 567:./lib/chibios/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 568:./lib/chibios/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 569:./lib/chibios/os/rt/include/chvt.h ****  *
 570:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 571:./lib/chibios/os/rt/include/chvt.h ****  *
 572:./lib/chibios/os/rt/include/chvt.h ****  * @iclass
 573:./lib/chibios/os/rt/include/chvt.h ****  */
 574:./lib/chibios/os/rt/include/chvt.h **** static inline void chVTResetI(virtual_timer_t *vtp) {
 575:./lib/chibios/os/rt/include/chvt.h **** 
 576:./lib/chibios/os/rt/include/chvt.h ****   if (chVTIsArmedI(vtp)) {
 577:./lib/chibios/os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 578:./lib/chibios/os/rt/include/chvt.h ****   }
 579:./lib/chibios/os/rt/include/chvt.h **** }
 580:./lib/chibios/os/rt/include/chvt.h **** 
 581:./lib/chibios/os/rt/include/chvt.h **** /**
 582:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Disables a Virtual Timer.
 583:./lib/chibios/os/rt/include/chvt.h ****  * @note    The timer is first checked and disabled only if armed.
 584:./lib/chibios/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 585:./lib/chibios/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 586:./lib/chibios/os/rt/include/chvt.h ****  *
 587:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 588:./lib/chibios/os/rt/include/chvt.h ****  *
 589:./lib/chibios/os/rt/include/chvt.h ****  * @api
 590:./lib/chibios/os/rt/include/chvt.h ****  */
 591:./lib/chibios/os/rt/include/chvt.h **** static inline void chVTReset(virtual_timer_t *vtp) {
 592:./lib/chibios/os/rt/include/chvt.h **** 
 593:./lib/chibios/os/rt/include/chvt.h ****   chSysLock();
 594:./lib/chibios/os/rt/include/chvt.h ****   chVTResetI(vtp);
 595:./lib/chibios/os/rt/include/chvt.h ****   chSysUnlock();
 596:./lib/chibios/os/rt/include/chvt.h **** }
 597:./lib/chibios/os/rt/include/chvt.h **** 
 598:./lib/chibios/os/rt/include/chvt.h **** /**
 599:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Enables a virtual timer.
 600:./lib/chibios/os/rt/include/chvt.h ****  * @details If the virtual timer was already enabled then it is re-enabled
 601:./lib/chibios/os/rt/include/chvt.h ****  *          using the new parameters.
 602:./lib/chibios/os/rt/include/chvt.h ****  * @pre     The timer must have been initialized using @p chVTObjectInit()
 603:./lib/chibios/os/rt/include/chvt.h ****  *          or @p chVTDoSetI().
 604:./lib/chibios/os/rt/include/chvt.h ****  *
 605:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] vtp       the @p virtual_timer_t structure pointer
 606:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 607:./lib/chibios/os/rt/include/chvt.h ****  *                      special values are handled as follow:
 608:./lib/chibios/os/rt/include/chvt.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 609:./lib/chibios/os/rt/include/chvt.h ****  *                        normal time specification.
 610:./lib/chibios/os/rt/include/chvt.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 611:./lib/chibios/os/rt/include/chvt.h ****  *                      .
 612:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] vtfunc    the timer callback function. After invoking the
 613:./lib/chibios/os/rt/include/chvt.h ****  *                      callback the timer is disabled and the structure can
 614:./lib/chibios/os/rt/include/chvt.h ****  *                      be disposed or reused.
 615:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] par       a parameter that will be passed to the callback
 616:./lib/chibios/os/rt/include/chvt.h ****  *                      function
 617:./lib/chibios/os/rt/include/chvt.h ****  *
 618:./lib/chibios/os/rt/include/chvt.h ****  * @iclass
 619:./lib/chibios/os/rt/include/chvt.h ****  */
 620:./lib/chibios/os/rt/include/chvt.h **** static inline void chVTSetI(virtual_timer_t *vtp, systime_t delay,
 440              		.loc 3 620 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 0
 443              		@ frame_needed = 0, uses_anonymous_args = 0
 444              	.LVL35:
 445 0000 70B5     		push	{r4, r5, r6, lr}
 446              		.cfi_def_cfa_offset 16
 447              		.cfi_offset 4, -16
 448              		.cfi_offset 5, -12
 449              		.cfi_offset 6, -8
 450              		.cfi_offset 14, -4
 451              		.loc 3 620 0
 452 0002 0446     		mov	r4, r0
 453              	.LBB446:
 454              	.LBB447:
 576:./lib/chibios/os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 455              		.loc 3 576 0
 456 0004 0648     		ldr	r0, .L32
 457              	.LVL36:
 458 0006 C368     		ldr	r3, [r0, #12]
 459              	.LBE447:
 460              	.LBE446:
 461              		.loc 3 620 0
 462 0008 0D46     		mov	r5, r1
 463              	.LBB449:
 464              	.LBB448:
 576:./lib/chibios/os/rt/include/chvt.h ****     chVTDoResetI(vtp);
 465              		.loc 3 576 0
 466 000a 0BB1     		cbz	r3, .L28
 577:./lib/chibios/os/rt/include/chvt.h ****   }
 467              		.loc 3 577 0
 468 000c FFF7FEFF 		bl	chVTDoResetI
 469              	.LVL37:
 470              	.L28:
 471              	.LBE448:
 472              	.LBE449:
 621:./lib/chibios/os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par) {
 622:./lib/chibios/os/rt/include/chvt.h **** 
 623:./lib/chibios/os/rt/include/chvt.h ****   chVTResetI(vtp);
 624:./lib/chibios/os/rt/include/chvt.h ****   chVTDoSetI(vtp, delay, vtfunc, par);
 473              		.loc 3 624 0
 474 0010 2B46     		mov	r3, r5
 475 0012 2146     		mov	r1, r4
 476 0014 034A     		ldr	r2, .L32+4
 477 0016 0248     		ldr	r0, .L32
 625:./lib/chibios/os/rt/include/chvt.h **** }
 478              		.loc 3 625 0
 479 0018 BDE87040 		pop	{r4, r5, r6, lr}
 480              		.cfi_restore 14
 481              		.cfi_restore 6
 482              		.cfi_restore 5
 483              		.cfi_restore 4
 484              		.cfi_def_cfa_offset 0
 485              	.LVL38:
 624:./lib/chibios/os/rt/include/chvt.h **** }
 486              		.loc 3 624 0
 487 001c FFF7FEBF 		b	chVTDoSetI
 488              	.LVL39:
 489              	.L33:
 490              		.align	2
 491              	.L32:
 492 0020 00000000 		.word	.LANCHOR6
 493 0024 00000000 		.word	keyboard_idle_timer_cb
 494              		.cfi_endproc
 495              	.LFE309:
 497              		.section	.text.keyboard_idle_timer_cb,"ax",%progbits
 498              		.align	1
 499              		.syntax unified
 500              		.thumb
 501              		.thumb_func
 502              		.fpu softvfp
 504              	keyboard_idle_timer_cb:
 505              	.LFB288:
 572:tmk_core/protocol/chibios/usb_main.c **** #endif
 573:tmk_core/protocol/chibios/usb_main.c **** 
 574:tmk_core/protocol/chibios/usb_main.c **** /* start-of-frame handler
 575:tmk_core/protocol/chibios/usb_main.c ****  * TODO: i guess it would be better to re-implement using timers,
 576:tmk_core/protocol/chibios/usb_main.c ****  *  so that this is not going to have to be checked every 1ms */
 577:tmk_core/protocol/chibios/usb_main.c **** void kbd_sof_cb(USBDriver *usbp) { (void)usbp; }
 578:tmk_core/protocol/chibios/usb_main.c **** 
 579:tmk_core/protocol/chibios/usb_main.c **** /* Idle requests timer code
 580:tmk_core/protocol/chibios/usb_main.c ****  * callback (called from ISR, unlocked state) */
 581:tmk_core/protocol/chibios/usb_main.c **** static void keyboard_idle_timer_cb(void *arg) {
 506              		.loc 1 581 0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 0
 509              		@ frame_needed = 0, uses_anonymous_args = 0
 510              	.LVL40:
 511 0000 38B5     		push	{r3, r4, r5, lr}
 512              		.cfi_def_cfa_offset 16
 513              		.cfi_offset 3, -16
 514              		.cfi_offset 4, -12
 515              		.cfi_offset 5, -8
 516              		.cfi_offset 14, -4
 517              		.loc 1 581 0
 518 0002 0546     		mov	r5, r0
 519              	.LBB482:
 520              	.LBB483:
 521              	.LBB484:
 522              	.LBB485:
 523              	.LBB486:
 524              	.LBB487:
 525              		.loc 2 264 0
 526 0004 2023     		movs	r3, #32
 527              		.syntax unified
 528              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 529 0006 83F31188 		MSR basepri, r3
 530              	@ 0 "" 2
 531              	.LVL41:
 532              		.thumb
 533              		.syntax unified
 534              	.LBE487:
 535              	.LBE486:
 536              	.LBE485:
 537              	.LBE484:
 538              	.LBE483:
 539              	.LBE482:
 582:tmk_core/protocol/chibios/usb_main.c ****     USBDriver *usbp = (USBDriver *)arg;
 583:tmk_core/protocol/chibios/usb_main.c **** 
 584:tmk_core/protocol/chibios/usb_main.c ****     osalSysLockFromISR();
 585:tmk_core/protocol/chibios/usb_main.c **** 
 586:tmk_core/protocol/chibios/usb_main.c ****     /* check that the states of things are as they're supposed to */
 587:tmk_core/protocol/chibios/usb_main.c ****     if (usbGetDriverStateI(usbp) != USB_ACTIVE) {
 540              		.loc 1 587 0
 541 000a 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 542 000c 042B     		cmp	r3, #4
 543 000e 03D0     		beq	.L35
 544              	.LVL42:
 545              	.L37:
 546              	.LBB488:
 547              	.LBB489:
 548              	.LBB490:
 549              	.LBB491:
 550              	.LBB492:
 551              	.LBB493:
 552              	.LBB494:
 553              	.LBB495:
 554              		.loc 2 264 0
 555 0010 0023     		movs	r3, #0
 556              		.syntax unified
 557              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 558 0012 83F31188 		MSR basepri, r3
 559              	@ 0 "" 2
 560              	.LVL43:
 561              		.thumb
 562              		.syntax unified
 563              	.LBE495:
 564              	.LBE494:
 565              	.LBE493:
 566              	.LBE492:
 567              	.LBE491:
 568              	.LBE490:
 569              	.LBE489:
 570              	.LBE488:
 588:tmk_core/protocol/chibios/usb_main.c ****         /* do not rearm the timer, should be enabled on IDLE request */
 589:tmk_core/protocol/chibios/usb_main.c ****         osalSysUnlockFromISR();
 590:tmk_core/protocol/chibios/usb_main.c ****         return;
 591:tmk_core/protocol/chibios/usb_main.c ****     }
 592:tmk_core/protocol/chibios/usb_main.c **** 
 593:tmk_core/protocol/chibios/usb_main.c **** #ifdef NKRO_ENABLE
 594:tmk_core/protocol/chibios/usb_main.c ****     if (!keymap_config.nkro && keyboard_idle && keyboard_protocol) {
 595:tmk_core/protocol/chibios/usb_main.c **** #else  /* NKRO_ENABLE */
 596:tmk_core/protocol/chibios/usb_main.c ****     if (keyboard_idle && keyboard_protocol) {
 597:tmk_core/protocol/chibios/usb_main.c **** #endif /* NKRO_ENABLE */
 598:tmk_core/protocol/chibios/usb_main.c ****         /* TODO: are we sure we want the KBD_ENDPOINT? */
 599:tmk_core/protocol/chibios/usb_main.c ****         if (!usbGetTransmitStatusI(usbp, KEYBOARD_IN_EPNUM)) {
 600:tmk_core/protocol/chibios/usb_main.c ****             usbStartTransmitI(usbp, KEYBOARD_IN_EPNUM, (uint8_t *)&keyboard_report_sent, KEYBOARD_E
 601:tmk_core/protocol/chibios/usb_main.c ****         }
 602:tmk_core/protocol/chibios/usb_main.c ****         /* rearm the timer */
 603:tmk_core/protocol/chibios/usb_main.c ****         chVTSetI(&keyboard_idle_timer, 4 * MS2ST(keyboard_idle), keyboard_idle_timer_cb, (void *)us
 604:tmk_core/protocol/chibios/usb_main.c ****     }
 605:tmk_core/protocol/chibios/usb_main.c **** 
 606:tmk_core/protocol/chibios/usb_main.c ****     /* do not rearm the timer if the condition above fails
 607:tmk_core/protocol/chibios/usb_main.c ****      * it should be enabled again on either IDLE or SET_PROTOCOL requests */
 608:tmk_core/protocol/chibios/usb_main.c ****     osalSysUnlockFromISR();
 609:tmk_core/protocol/chibios/usb_main.c **** }
 571              		.loc 1 609 0
 572 0016 38BD     		pop	{r3, r4, r5, pc}
 573              	.LVL44:
 574              	.L35:
 575              	.LBB497:
 576              	.LBB496:
 594:tmk_core/protocol/chibios/usb_main.c **** #else  /* NKRO_ENABLE */
 577              		.loc 1 594 0
 578 0018 104B     		ldr	r3, .L45
 579 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 580 001c DB09     		lsrs	r3, r3, #7
 581 001e F7D1     		bne	.L37
 582 0020 0F4C     		ldr	r4, .L45+4
 583 0022 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 584 0024 002A     		cmp	r2, #0
 585 0026 F3D0     		beq	.L37
 586 0028 0E4B     		ldr	r3, .L45+8
 587 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 588 002c 002B     		cmp	r3, #0
 589 002e EFD0     		beq	.L37
 599:tmk_core/protocol/chibios/usb_main.c ****             usbStartTransmitI(usbp, KEYBOARD_IN_EPNUM, (uint8_t *)&keyboard_report_sent, KEYBOARD_E
 590              		.loc 1 599 0
 591 0030 0389     		ldrh	r3, [r0, #8]
 592 0032 9B07     		lsls	r3, r3, #30
 593 0034 04D4     		bmi	.L38
 600:tmk_core/protocol/chibios/usb_main.c ****         }
 594              		.loc 1 600 0
 595 0036 0823     		movs	r3, #8
 596 0038 0B4A     		ldr	r2, .L45+12
 597 003a 0121     		movs	r1, #1
 598 003c FFF7FEFF 		bl	usbStartTransmitI
 599              	.LVL45:
 600              	.L38:
 603:tmk_core/protocol/chibios/usb_main.c ****     }
 601              		.loc 1 603 0
 602 0040 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 603 0042 0A48     		ldr	r0, .L45+16
 604 0044 5843     		muls	r0, r3, r0
 605 0046 00F2E730 		addw	r0, r0, #999
 606 004a 4FF47A73 		mov	r3, #1000
 607 004e 2946     		mov	r1, r5
 608 0050 B0FBF3F0 		udiv	r0, r0, r3
 609 0054 8000     		lsls	r0, r0, #2
 610 0056 FFF7FEFF 		bl	chVTSetI.constprop.6
 611              	.LVL46:
 612 005a D9E7     		b	.L37
 613              	.L46:
 614              		.align	2
 615              	.L45:
 616 005c 00000000 		.word	keymap_config
 617 0060 00000000 		.word	.LANCHOR7
 618 0064 00000000 		.word	.LANCHOR8
 619 0068 00000000 		.word	.LANCHOR9
 620 006c A0860100 		.word	100000
 621              	.LBE496:
 622              	.LBE497:
 623              		.cfi_endproc
 624              	.LFE288:
 626              		.section	.text.usb_request_hook_cb,"ax",%progbits
 627              		.align	1
 628              		.syntax unified
 629              		.thumb
 630              		.thumb_func
 631              		.fpu softvfp
 633              	usb_request_hook_cb:
 634              	.LFB283:
 380:tmk_core/protocol/chibios/usb_main.c ****     const USBDescriptor *dp;
 635              		.loc 1 380 0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 0
 638              		@ frame_needed = 0, uses_anonymous_args = 0
 639              	.LVL47:
 640 0000 38B5     		push	{r3, r4, r5, lr}
 641              		.cfi_def_cfa_offset 16
 642              		.cfi_offset 3, -16
 643              		.cfi_offset 4, -12
 644              		.cfi_offset 5, -8
 645              		.cfi_offset 14, -4
 392:tmk_core/protocol/chibios/usb_main.c ****         switch (usbp->setup[0] & USB_RTYPE_DIR_MASK) {
 646              		.loc 1 392 0
 647 0002 90F87430 		ldrb	r3, [r0, #116]	@ zero_extendqisi2
 648 0006 03F07F02 		and	r2, r3, #127
 649 000a 212A     		cmp	r2, #33
 380:tmk_core/protocol/chibios/usb_main.c ****     const USBDescriptor *dp;
 650              		.loc 1 380 0
 651 000c 0446     		mov	r4, r0
 392:tmk_core/protocol/chibios/usb_main.c ****         switch (usbp->setup[0] & USB_RTYPE_DIR_MASK) {
 652              		.loc 1 392 0
 653 000e 70D1     		bne	.L48
 393:tmk_core/protocol/chibios/usb_main.c ****             case USB_RTYPE_DIR_DEV2HOST:
 654              		.loc 1 393 0
 655 0010 13F08003 		ands	r3, r3, #128
 656 0014 25D0     		beq	.L49
 657 0016 002B     		cmp	r3, #0
 658 0018 6BD0     		beq	.L48
 395:tmk_core/protocol/chibios/usb_main.c ****                     case HID_GET_REPORT:
 659              		.loc 1 395 0
 660 001a 90F87500 		ldrb	r0, [r0, #117]	@ zero_extendqisi2
 661              	.LVL48:
 662 001e 0228     		cmp	r0, #2
 663 0020 19D0     		beq	.L51
 664 0022 0328     		cmp	r0, #3
 665 0024 0ED0     		beq	.L52
 666 0026 0128     		cmp	r0, #1
 667 0028 63D1     		bne	.L48
 397:tmk_core/protocol/chibios/usb_main.c ****                             case KEYBOARD_INTERFACE:
 668              		.loc 1 397 0
 669 002a 94F87830 		ldrb	r3, [r4, #120]	@ zero_extendqisi2
 670 002e 2BB9     		cbnz	r3, .L77
 399:tmk_core/protocol/chibios/usb_main.c ****                                 return TRUE;
 671              		.loc 1 399 0
 672 0030 444A     		ldr	r2, .L85
 673 0032 A266     		str	r2, [r4, #104]
 674 0034 2022     		movs	r2, #32
 675 0036 E266     		str	r2, [r4, #108]
 676              	.L80:
 453:tmk_core/protocol/chibios/usb_main.c ****                                 }
 677              		.loc 1 453 0
 678 0038 2367     		str	r3, [r4, #112]
 679 003a 70E0     		b	.L78
 680              	.L77:
 411:tmk_core/protocol/chibios/usb_main.c ****                                 return TRUE;
 681              		.loc 1 411 0
 682 003c 0023     		movs	r3, #0
 683 003e C4E91A33 		strd	r3, r3, [r4, #104]
 684 0042 F9E7     		b	.L80
 685              	.L52:
 418:tmk_core/protocol/chibios/usb_main.c ****                             usbSetupTransfer(usbp, &keyboard_protocol, 1, NULL);
 686              		.loc 1 418 0
 687 0044 B4F87830 		ldrh	r3, [r4, #120]
 688 0048 002B     		cmp	r3, #0
 689 004a 52D1     		bne	.L48
 419:tmk_core/protocol/chibios/usb_main.c ****                             return TRUE;
 690              		.loc 1 419 0
 691 004c 3E4A     		ldr	r2, .L85+4
 692              	.L82:
 453:tmk_core/protocol/chibios/usb_main.c ****                                 }
 693              		.loc 1 453 0
 694 004e A266     		str	r2, [r4, #104]
 695 0050 0120     		movs	r0, #1
 696 0052 E066     		str	r0, [r4, #108]
 697 0054 F0E7     		b	.L80
 698              	.L51:
 425:tmk_core/protocol/chibios/usb_main.c ****                         return TRUE;
 699              		.loc 1 425 0
 700 0056 3D4B     		ldr	r3, .L85+8
 701 0058 A366     		str	r3, [r4, #104]
 702 005a 0120     		movs	r0, #1
 703 005c E066     		str	r0, [r4, #108]
 704 005e 0023     		movs	r3, #0
 705 0060 EAE7     		b	.L80
 706              	.LVL49:
 707              	.L49:
 432:tmk_core/protocol/chibios/usb_main.c ****                     case HID_SET_REPORT:
 708              		.loc 1 432 0
 709 0062 90F87520 		ldrb	r2, [r0, #117]	@ zero_extendqisi2
 710 0066 0A2A     		cmp	r2, #10
 711 0068 3AD0     		beq	.L57
 712 006a 0B2A     		cmp	r2, #11
 713 006c 0CD0     		beq	.L58
 714 006e 092A     		cmp	r2, #9
 715 0070 3FD1     		bne	.L48
 434:tmk_core/protocol/chibios/usb_main.c ****                             case KEYBOARD_INTERFACE:
 716              		.loc 1 434 0
 717 0072 90F87800 		ldrb	r0, [r0, #120]	@ zero_extendqisi2
 718              	.LVL50:
 719 0076 0128     		cmp	r0, #1
 720 0078 3BD8     		bhi	.L48
 721              	.LVL51:
 443:tmk_core/protocol/chibios/usb_main.c ****                                     has_report_id = 1;
 722              		.loc 1 443 0
 723 007a 61D1     		bne	.L61
 724              	.LVL52:
 451:tmk_core/protocol/chibios/usb_main.c ****                                 } else {
 725              		.loc 1 451 0
 726 007c 344B     		ldr	r3, .L85+12
 727 007e A366     		str	r3, [r4, #104]
 728 0080 0223     		movs	r3, #2
 729 0082 E366     		str	r3, [r4, #108]
 730 0084 334B     		ldr	r3, .L85+16
 731 0086 D7E7     		b	.L80
 732              	.LVL53:
 733              	.L58:
 461:tmk_core/protocol/chibios/usb_main.c ****                             keyboard_protocol = ((usbp->setup[2]) != 0x00);                    /* L
 734              		.loc 1 461 0
 735 0088 B0F87830 		ldrh	r3, [r0, #120]
 736 008c 13BB     		cbnz	r3, .L63
 462:tmk_core/protocol/chibios/usb_main.c **** #ifdef NKRO_ENABLE
 737              		.loc 1 462 0
 738 008e 90F87650 		ldrb	r5, [r0, #118]	@ zero_extendqisi2
 739 0092 2D4B     		ldr	r3, .L85+4
 740 0094 002D     		cmp	r5, #0
 741 0096 14BF     		ite	ne
 742 0098 0121     		movne	r1, #1
 743 009a 0021     		moveq	r1, #0
 744 009c 1970     		strb	r1, [r3]
 464:tmk_core/protocol/chibios/usb_main.c ****                             if (!keymap_config.nkro && keyboard_idle) {
 745              		.loc 1 464 0
 746 009e 2E4B     		ldr	r3, .L85+20
 747 00a0 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 748 00a2 61F3C712 		bfi	r2, r1, #7, #1
 749 00a6 1A70     		strb	r2, [r3]
 465:tmk_core/protocol/chibios/usb_main.c **** #else                           /* NKRO_ENABLE */
 750              		.loc 1 465 0
 751 00a8 14D1     		bne	.L63
 465:tmk_core/protocol/chibios/usb_main.c **** #else                           /* NKRO_ENABLE */
 752              		.loc 1 465 0 is_stmt 0 discriminator 1
 753 00aa 284B     		ldr	r3, .L85+8
 754 00ac 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 755              	.L84:
 756 00ae 8AB1     		cbz	r2, .L63
 757              	.LVL54:
 758              	.LBB498:
 759              	.LBB499:
 760              	.LBB500:
 761              	.LBB501:
 762              	.LBB502:
 763              	.LBB503:
 764              		.loc 2 264 0 is_stmt 1
 765 00b0 2022     		movs	r2, #32
 766              		.syntax unified
 767              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 768 00b2 82F31188 		MSR basepri, r2
 769              	@ 0 "" 2
 770              	.LVL55:
 771              		.thumb
 772              		.syntax unified
 773              	.LBE503:
 774              	.LBE502:
 775              	.LBE501:
 776              	.LBE500:
 777              	.LBE499:
 778              	.LBE498:
 471:tmk_core/protocol/chibios/usb_main.c ****                                 osalSysUnlockFromISR();
 779              		.loc 1 471 0
 780 00b6 2948     		ldr	r0, .L85+24
 781              	.LVL56:
 782 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 783 00ba 5843     		muls	r0, r3, r0
 784 00bc 2146     		mov	r1, r4
 785 00be 4FF47A73 		mov	r3, #1000
 786 00c2 00F2E730 		addw	r0, r0, #999
 787 00c6 B0FBF3F0 		udiv	r0, r0, r3
 788 00ca 8000     		lsls	r0, r0, #2
 789 00cc FFF7FEFF 		bl	chVTSetI.constprop.6
 790              	.LVL57:
 791              	.LBB504:
 792              	.LBB505:
 793              	.LBB506:
 794              	.LBB507:
 795              	.LBB508:
 796              	.LBB509:
 797              		.loc 2 264 0
 798              		.syntax unified
 799              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 800 00d0 85F31188 		MSR basepri, r5
 801              	@ 0 "" 2
 802              	.LVL58:
 803              		.thumb
 804              		.syntax unified
 805              	.L63:
 806              	.LBE509:
 807              	.LBE508:
 808              	.LBE507:
 809              	.LBE506:
 810              	.LBE505:
 811              	.LBE504:
 475:tmk_core/protocol/chibios/usb_main.c ****                         return TRUE;
 812              		.loc 1 475 0
 813 00d4 0023     		movs	r3, #0
 814 00d6 C4E91A33 		strd	r3, r3, [r4, #104]
 815              	.L81:
 503:tmk_core/protocol/chibios/usb_main.c ****         return TRUE;
 816              		.loc 1 503 0
 817 00da 2367     		str	r3, [r4, #112]
 504:tmk_core/protocol/chibios/usb_main.c ****     }
 818              		.loc 1 504 0
 819 00dc 0120     		movs	r0, #1
 820 00de 1EE0     		b	.L78
 821              	.LVL59:
 822              	.L57:
 483:tmk_core/protocol/chibios/usb_main.c **** #else  /* NKRO_ENABLE */
 823              		.loc 1 483 0
 824 00e0 1D49     		ldr	r1, .L85+20
 480:tmk_core/protocol/chibios/usb_main.c ****                                                         /* arm the timer */
 825              		.loc 1 480 0
 826 00e2 1A4B     		ldr	r3, .L85+8
 483:tmk_core/protocol/chibios/usb_main.c **** #else  /* NKRO_ENABLE */
 827              		.loc 1 483 0
 828 00e4 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 480:tmk_core/protocol/chibios/usb_main.c ****                                                         /* arm the timer */
 829              		.loc 1 480 0
 830 00e6 90F87720 		ldrb	r2, [r0, #119]	@ zero_extendqisi2
 831 00ea 1A70     		strb	r2, [r3]
 483:tmk_core/protocol/chibios/usb_main.c **** #else  /* NKRO_ENABLE */
 832              		.loc 1 483 0
 833 00ec CD09     		lsrs	r5, r1, #7
 834 00ee DED0     		beq	.L84
 835 00f0 F0E7     		b	.L63
 836              	.LVL60:
 837              	.L48:
 500:tmk_core/protocol/chibios/usb_main.c ****         dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3], usbp->setup[2], get_hword(&usbp-
 838              		.loc 1 500 0
 839 00f2 B4F87420 		ldrh	r2, [r4, #116]
 840 00f6 40F28163 		movw	r3, #1665
 841 00fa 9A42     		cmp	r2, r3
 842 00fc 16D1     		bne	.L65
 843              	.LBB510:
 844              	.LBB511:
 353:tmk_core/protocol/chibios/usb_main.c ****     return hw;
 845              		.loc 1 353 0
 846 00fe 94F87920 		ldrb	r2, [r4, #121]	@ zero_extendqisi2
 847              	.LBE511:
 848              	.LBE510:
 501:tmk_core/protocol/chibios/usb_main.c ****         if (dp == NULL) return FALSE;
 849              		.loc 1 501 0
 850 0102 6168     		ldr	r1, [r4, #4]
 851              	.LBB513:
 852              	.LBB512:
 353:tmk_core/protocol/chibios/usb_main.c ****     return hw;
 853              		.loc 1 353 0
 854 0104 94F87830 		ldrb	r3, [r4, #120]	@ zero_extendqisi2
 855              	.LBE512:
 856              	.LBE513:
 501:tmk_core/protocol/chibios/usb_main.c ****         if (dp == NULL) return FALSE;
 857              		.loc 1 501 0
 858 0108 4D68     		ldr	r5, [r1, #4]
 859 010a 94F87710 		ldrb	r1, [r4, #119]	@ zero_extendqisi2
 860 010e 43EA0223 		orr	r3, r3, r2, lsl #8
 861 0112 2046     		mov	r0, r4
 862 0114 94F87620 		ldrb	r2, [r4, #118]	@ zero_extendqisi2
 863 0118 A847     		blx	r5
 864              	.LVL61:
 502:tmk_core/protocol/chibios/usb_main.c ****         usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 865              		.loc 1 502 0
 866 011a 08B9     		cbnz	r0, .L66
 867              	.LVL62:
 868              	.L67:
 869 011c 0020     		movs	r0, #0
 870              	.L78:
 515:tmk_core/protocol/chibios/usb_main.c **** 
 871              		.loc 1 515 0
 872 011e 38BD     		pop	{r3, r4, r5, pc}
 873              	.LVL63:
 874              	.L66:
 503:tmk_core/protocol/chibios/usb_main.c ****         return TRUE;
 875              		.loc 1 503 0
 876 0120 4368     		ldr	r3, [r0, #4]
 877 0122 A366     		str	r3, [r4, #104]
 878 0124 0368     		ldr	r3, [r0]
 879 0126 E366     		str	r3, [r4, #108]
 880 0128 0023     		movs	r3, #0
 881 012a D6E7     		b	.L81
 882              	.LVL64:
 883              	.L65:
 884              	.LBB514:
 508:tmk_core/protocol/chibios/usb_main.c ****             // NOTE: Assumes that we only have one serial driver
 885              		.loc 1 508 0
 886 012c 0C4B     		ldr	r3, .L85+28
 887 012e 93F8B630 		ldrb	r3, [r3, #182]	@ zero_extendqisi2
 888 0132 002B     		cmp	r3, #0
 889 0134 F2D0     		beq	.L67
 510:tmk_core/protocol/chibios/usb_main.c ****         }
 890              		.loc 1 510 0
 891 0136 2046     		mov	r0, r4
 892              	.LBE514:
 515:tmk_core/protocol/chibios/usb_main.c **** 
 893              		.loc 1 515 0
 894 0138 BDE83840 		pop	{r3, r4, r5, lr}
 895              		.cfi_remember_state
 896              		.cfi_restore 14
 897              		.cfi_restore 5
 898              		.cfi_restore 4
 899              		.cfi_restore 3
 900              		.cfi_def_cfa_offset 0
 901              	.LVL65:
 902              	.LBB515:
 510:tmk_core/protocol/chibios/usb_main.c ****         }
 903              		.loc 1 510 0
 904 013c FFF7FEBF 		b	qmkusbRequestsHook
 905              	.LVL66:
 906              	.L61:
 907              		.cfi_restore_state
 908              	.LBE515:
 453:tmk_core/protocol/chibios/usb_main.c ****                                 }
 909              		.loc 1 453 0
 910 0140 084A     		ldr	r2, .L85+32
 911 0142 84E7     		b	.L82
 912              	.L86:
 913              		.align	2
 914              	.L85:
 915 0144 00000000 		.word	.LANCHOR9
 916 0148 00000000 		.word	.LANCHOR8
 917 014c 00000000 		.word	.LANCHOR7
 918 0150 00000000 		.word	.LANCHOR0
 919 0154 00000000 		.word	set_led_transfer_cb
 920 0158 00000000 		.word	keymap_config
 921 015c A0860100 		.word	100000
 922 0160 00000000 		.word	.LANCHOR2
 923 0164 00000000 		.word	.LANCHOR1
 924              		.cfi_endproc
 925              	.LFE283:
 927              		.section	.text.shared_in_cb,"ax",%progbits
 928              		.align	1
 929              		.global	shared_in_cb
 930              		.syntax unified
 931              		.thumb
 932              		.thumb_func
 933              		.fpu softvfp
 935              	shared_in_cb:
 936              	.LFB307:
 937              		.cfi_startproc
 938              		@ args = 0, pretend = 0, frame = 0
 939              		@ frame_needed = 0, uses_anonymous_args = 0
 940              		@ link register save eliminated.
 941 0000 7047     		bx	lr
 942              		.cfi_endproc
 943              	.LFE307:
 945              		.section	.text.init_usb_driver,"ax",%progbits
 946              		.align	1
 947              		.global	init_usb_driver
 948              		.syntax unified
 949              		.thumb
 950              		.thumb_func
 951              		.fpu softvfp
 953              	init_usb_driver:
 954              	.LFB285:
 538:tmk_core/protocol/chibios/usb_main.c ****     for (int i = 0; i < NUM_USB_DRIVERS; i++) {
 955              		.loc 1 538 0
 956              		.cfi_startproc
 957              		@ args = 0, pretend = 0, frame = 0
 958              		@ frame_needed = 0, uses_anonymous_args = 0
 959              	.LVL67:
 538:tmk_core/protocol/chibios/usb_main.c ****     for (int i = 0; i < NUM_USB_DRIVERS; i++) {
 960              		.loc 1 538 0
 961 0000 70B5     		push	{r4, r5, r6, lr}
 962              		.cfi_def_cfa_offset 16
 963              		.cfi_offset 4, -16
 964              		.cfi_offset 5, -12
 965              		.cfi_offset 6, -8
 966              		.cfi_offset 14, -4
 967              	.LBB516:
 968              	.LBB517:
 541:tmk_core/protocol/chibios/usb_main.c ****         drivers.array[i].out_ep_config.out_state = &drivers.array[i].out_ep_state;
 969              		.loc 1 541 0
 970 0002 1A4C     		ldr	r4, .L89
 971 0004 04F10803 		add	r3, r4, #8
 972 0008 A365     		str	r3, [r4, #88]
 542:tmk_core/protocol/chibios/usb_main.c ****         drivers.array[i].int_ep_config.in_state  = &drivers.array[i].int_ep_state;
 973              		.loc 1 542 0
 974 000a 04F11C03 		add	r3, r4, #28
 975 000e C4F88030 		str	r3, [r4, #128]
 543:tmk_core/protocol/chibios/usb_main.c ****         qmkusbObjectInit(driver, &drivers.array[i].config);
 976              		.loc 1 543 0
 977 0012 04F13003 		add	r3, r4, #48
 978 0016 C4F8A030 		str	r3, [r4, #160]
 544:tmk_core/protocol/chibios/usb_main.c ****         qmkusbStart(driver, &drivers.array[i].config);
 979              		.loc 1 544 0
 980 001a 04F1B005 		add	r5, r4, #176
 981 001e D434     		adds	r4, r4, #212
 982 0020 2946     		mov	r1, r5
 983              	.LBE517:
 984              	.LBE516:
 538:tmk_core/protocol/chibios/usb_main.c ****     for (int i = 0; i < NUM_USB_DRIVERS; i++) {
 985              		.loc 1 538 0
 986 0022 0646     		mov	r6, r0
 987              	.LBB520:
 988              	.LBB518:
 544:tmk_core/protocol/chibios/usb_main.c ****         qmkusbStart(driver, &drivers.array[i].config);
 989              		.loc 1 544 0
 990 0024 2046     		mov	r0, r4
 991              	.LVL68:
 992 0026 FFF7FEFF 		bl	qmkusbObjectInit
 993              	.LVL69:
 545:tmk_core/protocol/chibios/usb_main.c ****     }
 994              		.loc 1 545 0
 995 002a 2946     		mov	r1, r5
 996 002c 2046     		mov	r0, r4
 997              	.LBE518:
 998              	.LBE520:
 553:tmk_core/protocol/chibios/usb_main.c ****     wait_ms(1500);
 999              		.loc 1 553 0
 1000 002e 4FF09044 		mov	r4, #1207959552
 1001              	.LBB521:
 1002              	.LBB519:
 545:tmk_core/protocol/chibios/usb_main.c ****     }
 1003              		.loc 1 545 0
 1004 0032 FFF7FEFF 		bl	qmkusbStart
 1005              	.LVL70:
 1006              	.LBE519:
 1007              	.LBE521:
 553:tmk_core/protocol/chibios/usb_main.c ****     wait_ms(1500);
 1008              		.loc 1 553 0
 1009 0036 4FF48055 		mov	r5, #4096
 1010 003a 0122     		movs	r2, #1
 1011 003c 4FF48051 		mov	r1, #4096
 1012 0040 4FF09040 		mov	r0, #1207959552
 1013 0044 FFF7FEFF 		bl	_pal_lld_setgroupmode
 1014              	.LVL71:
 554:tmk_core/protocol/chibios/usb_main.c ****     usbStart(usbp, &usbcfg);
 1015              		.loc 1 554 0
 1016 0048 0948     		ldr	r0, .L89+4
 553:tmk_core/protocol/chibios/usb_main.c ****     wait_ms(1500);
 1017              		.loc 1 553 0
 1018 004a 6583     		strh	r5, [r4, #26]	@ movhi
 554:tmk_core/protocol/chibios/usb_main.c ****     usbStart(usbp, &usbcfg);
 1019              		.loc 1 554 0
 1020 004c FFF7FEFF 		bl	chThdSleep
 1021              	.LVL72:
 555:tmk_core/protocol/chibios/usb_main.c ****     usbConnectBus(usbp);
 1022              		.loc 1 555 0
 1023 0050 0849     		ldr	r1, .L89+8
 1024 0052 3046     		mov	r0, r6
 1025 0054 FFF7FEFF 		bl	usbStart
 1026              	.LVL73:
 556:tmk_core/protocol/chibios/usb_main.c **** 
 1027              		.loc 1 556 0
 1028 0058 40F20272 		movw	r2, #1794
 1029 005c 2946     		mov	r1, r5
 1030 005e 2046     		mov	r0, r4
 1031 0060 FFF7FEFF 		bl	_pal_lld_setgroupmode
 1032              	.LVL74:
 1033              	.LBB522:
 1034              	.LBB523:
 376:./lib/chibios/os/rt/include/chvt.h **** }
 1035              		.loc 3 376 0
 1036 0064 044B     		ldr	r3, .L89+12
 1037 0066 0022     		movs	r2, #0
 1038 0068 DA60     		str	r2, [r3, #12]
 1039              	.LBE523:
 1040              	.LBE522:
 559:tmk_core/protocol/chibios/usb_main.c **** 
 1041              		.loc 1 559 0
 1042 006a 70BD     		pop	{r4, r5, r6, pc}
 1043              	.LVL75:
 1044              	.L90:
 1045              		.align	2
 1046              	.L89:
 1047 006c 00000000 		.word	.LANCHOR2
 1048 0070 F0490200 		.word	150000
 1049 0074 00000000 		.word	.LANCHOR10
 1050 0078 00000000 		.word	.LANCHOR6
 1051              		.cfi_endproc
 1052              	.LFE285:
 1054              		.section	.text.kbd_sof_cb,"ax",%progbits
 1055              		.align	1
 1056              		.global	kbd_sof_cb
 1057              		.syntax unified
 1058              		.thumb
 1059              		.thumb_func
 1060              		.fpu softvfp
 1062              	kbd_sof_cb:
 1063              	.LFB287:
 577:tmk_core/protocol/chibios/usb_main.c **** 
 1064              		.loc 1 577 0
 1065              		.cfi_startproc
 1066              		@ args = 0, pretend = 0, frame = 0
 1067              		@ frame_needed = 0, uses_anonymous_args = 0
 1068              		@ link register save eliminated.
 1069              	.LVL76:
 577:tmk_core/protocol/chibios/usb_main.c **** 
 1070              		.loc 1 577 0
 1071 0000 7047     		bx	lr
 1072              		.cfi_endproc
 1073              	.LFE287:
 1075              		.section	.text.keyboard_leds,"ax",%progbits
 1076              		.align	1
 1077              		.global	keyboard_leds
 1078              		.syntax unified
 1079              		.thumb
 1080              		.thumb_func
 1081              		.fpu softvfp
 1083              	keyboard_leds:
 1084              	.LFB289:
 610:tmk_core/protocol/chibios/usb_main.c **** 
 611:tmk_core/protocol/chibios/usb_main.c **** /* LED status */
 612:tmk_core/protocol/chibios/usb_main.c **** uint8_t keyboard_leds(void) { return (uint8_t)(keyboard_led_stats & 0xFF); }
 1085              		.loc 1 612 0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 0
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 1089              		@ link register save eliminated.
 1090              		.loc 1 612 0
 1091 0000 014B     		ldr	r3, .L93
 1092 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1093 0004 7047     		bx	lr
 1094              	.L94:
 1095 0006 00BF     		.align	2
 1096              	.L93:
 1097 0008 00000000 		.word	.LANCHOR1
 1098              		.cfi_endproc
 1099              	.LFE289:
 1101              		.section	.text.send_keyboard,"ax",%progbits
 1102              		.align	1
 1103              		.global	send_keyboard
 1104              		.syntax unified
 1105              		.thumb
 1106              		.thumb_func
 1107              		.fpu softvfp
 1109              	send_keyboard:
 1110              	.LFB290:
 613:tmk_core/protocol/chibios/usb_main.c **** 
 614:tmk_core/protocol/chibios/usb_main.c **** /* prepare and start sending a report IN
 615:tmk_core/protocol/chibios/usb_main.c ****  * not callable from ISR or locked state */
 616:tmk_core/protocol/chibios/usb_main.c **** void send_keyboard(report_keyboard_t *report) {
 1111              		.loc 1 616 0
 1112              		.cfi_startproc
 1113              		@ args = 0, pretend = 0, frame = 0
 1114              		@ frame_needed = 0, uses_anonymous_args = 0
 1115              	.LVL77:
 1116 0000 10B5     		push	{r4, lr}
 1117              		.cfi_def_cfa_offset 8
 1118              		.cfi_offset 4, -8
 1119              		.cfi_offset 14, -4
 1120              	.LBB568:
 1121              	.LBB569:
 1122              	.LBB570:
 1123              	.LBB571:
 1124              	.LBB572:
 1125              		.loc 2 264 0
 1126 0002 2021     		movs	r1, #32
 1127              	.LBE572:
 1128              	.LBE571:
 1129              	.LBE570:
 1130              	.LBE569:
 1131              	.LBE568:
 1132              		.loc 1 616 0
 1133 0004 0446     		mov	r4, r0
 1134              	.LBB577:
 1135              	.LBB576:
 1136              	.LBB575:
 1137              	.LBB574:
 1138              	.LBB573:
 1139              		.loc 2 264 0
 1140              		.syntax unified
 1141              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1142 0006 81F31188 		MSR basepri, r1
 1143              	@ 0 "" 2
 1144              	.LVL78:
 1145              		.thumb
 1146              		.syntax unified
 1147              	.LBE573:
 1148              	.LBE574:
 1149              	.LBE575:
 1150              	.LBE576:
 1151              	.LBE577:
 617:tmk_core/protocol/chibios/usb_main.c ****     osalSysLock();
 618:tmk_core/protocol/chibios/usb_main.c ****     if (usbGetDriverStateI(&USB_DRIVER) != USB_ACTIVE) {
 1152              		.loc 1 618 0
 1153 000a 204B     		ldr	r3, .L116
 1154 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1155 000e 042A     		cmp	r2, #4
 1156 0010 4FF00000 		mov	r0, #0
 1157              	.LVL79:
 1158 0014 1A46     		mov	r2, r3
 1159 0016 02D0     		beq	.L96
 1160              	.LVL80:
 1161              	.LBB578:
 1162              	.LBB579:
 1163              	.LBB580:
 1164              	.LBB581:
 1165              	.LBB582:
 1166              	.LBB583:
 1167              		.loc 2 264 0
 1168              		.syntax unified
 1169              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1170 0018 80F31188 		MSR basepri, r0
 1171              	@ 0 "" 2
 1172              	.LVL81:
 1173              		.thumb
 1174              		.syntax unified
 1175              	.L95:
 1176              	.LBE583:
 1177              	.LBE582:
 1178              	.LBE581:
 1179              	.LBE580:
 1180              	.LBE579:
 1181              	.LBE578:
 619:tmk_core/protocol/chibios/usb_main.c ****         osalSysUnlock();
 620:tmk_core/protocol/chibios/usb_main.c ****         return;
 621:tmk_core/protocol/chibios/usb_main.c ****     }
 622:tmk_core/protocol/chibios/usb_main.c ****     osalSysUnlock();
 623:tmk_core/protocol/chibios/usb_main.c **** 
 624:tmk_core/protocol/chibios/usb_main.c **** #ifdef NKRO_ENABLE
 625:tmk_core/protocol/chibios/usb_main.c ****     if (keymap_config.nkro && keyboard_protocol) { /* NKRO protocol */
 626:tmk_core/protocol/chibios/usb_main.c ****         /* need to wait until the previous packet has made it through */
 627:tmk_core/protocol/chibios/usb_main.c ****         /* can rewrite this using the synchronous API, then would wait
 628:tmk_core/protocol/chibios/usb_main.c ****          * until *after* the packet has been transmitted. I think
 629:tmk_core/protocol/chibios/usb_main.c ****          * this is more efficient */
 630:tmk_core/protocol/chibios/usb_main.c ****         /* busy wait, should be short and not very common */
 631:tmk_core/protocol/chibios/usb_main.c ****         osalSysLock();
 632:tmk_core/protocol/chibios/usb_main.c ****         if (usbGetTransmitStatusI(&USB_DRIVER, SHARED_IN_EPNUM)) {
 633:tmk_core/protocol/chibios/usb_main.c ****             /* Need to either suspend, or loop and call unlock/lock during
 634:tmk_core/protocol/chibios/usb_main.c ****              * every iteration - otherwise the system will remain locked,
 635:tmk_core/protocol/chibios/usb_main.c ****              * no interrupts served, so USB not going through as well.
 636:tmk_core/protocol/chibios/usb_main.c ****              * Note: for suspend, need USB_USE_WAIT == TRUE in halconf.h */
 637:tmk_core/protocol/chibios/usb_main.c ****             osalThreadSuspendS(&(&USB_DRIVER)->epc[SHARED_IN_EPNUM]->in_state->thread);
 638:tmk_core/protocol/chibios/usb_main.c ****         }
 639:tmk_core/protocol/chibios/usb_main.c ****         usbStartTransmitI(&USB_DRIVER, SHARED_IN_EPNUM, (uint8_t *)report, sizeof(struct nkro_repor
 640:tmk_core/protocol/chibios/usb_main.c ****         osalSysUnlock();
 641:tmk_core/protocol/chibios/usb_main.c ****     } else
 642:tmk_core/protocol/chibios/usb_main.c **** #endif /* NKRO_ENABLE */
 643:tmk_core/protocol/chibios/usb_main.c ****     {  /* regular protocol */
 644:tmk_core/protocol/chibios/usb_main.c ****         /* need to wait until the previous packet has made it through */
 645:tmk_core/protocol/chibios/usb_main.c ****         /* busy wait, should be short and not very common */
 646:tmk_core/protocol/chibios/usb_main.c ****         osalSysLock();
 647:tmk_core/protocol/chibios/usb_main.c ****         if (usbGetTransmitStatusI(&USB_DRIVER, KEYBOARD_IN_EPNUM)) {
 648:tmk_core/protocol/chibios/usb_main.c ****             /* Need to either suspend, or loop and call unlock/lock during
 649:tmk_core/protocol/chibios/usb_main.c ****              * every iteration - otherwise the system will remain locked,
 650:tmk_core/protocol/chibios/usb_main.c ****              * no interrupts served, so USB not going through as well.
 651:tmk_core/protocol/chibios/usb_main.c ****              * Note: for suspend, need USB_USE_WAIT == TRUE in halconf.h */
 652:tmk_core/protocol/chibios/usb_main.c ****             osalThreadSuspendS(&(&USB_DRIVER)->epc[KEYBOARD_IN_EPNUM]->in_state->thread);
 653:tmk_core/protocol/chibios/usb_main.c ****         }
 654:tmk_core/protocol/chibios/usb_main.c ****         uint8_t *data, size;
 655:tmk_core/protocol/chibios/usb_main.c ****         if (keyboard_protocol) {
 656:tmk_core/protocol/chibios/usb_main.c ****             data = (uint8_t *)report;
 657:tmk_core/protocol/chibios/usb_main.c ****             size = KEYBOARD_REPORT_SIZE;
 658:tmk_core/protocol/chibios/usb_main.c ****         } else { /* boot protocol */
 659:tmk_core/protocol/chibios/usb_main.c ****             data = &report->mods;
 660:tmk_core/protocol/chibios/usb_main.c ****             size = 8;
 661:tmk_core/protocol/chibios/usb_main.c ****         }
 662:tmk_core/protocol/chibios/usb_main.c ****         usbStartTransmitI(&USB_DRIVER, KEYBOARD_IN_EPNUM, data, size);
 663:tmk_core/protocol/chibios/usb_main.c ****         osalSysUnlock();
 664:tmk_core/protocol/chibios/usb_main.c ****     }
 665:tmk_core/protocol/chibios/usb_main.c ****     keyboard_report_sent = *report;
 666:tmk_core/protocol/chibios/usb_main.c **** }
 1182              		.loc 1 666 0
 1183 001c 10BD     		pop	{r4, pc}
 1184              	.LVL82:
 1185              	.L96:
 1186              	.LBB584:
 1187              	.LBB585:
 1188              	.LBB586:
 1189              	.LBB587:
 1190              	.LBB588:
 1191              	.LBB589:
 1192              		.loc 2 264 0
 1193              		.syntax unified
 1194              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1195 001e 80F31188 		MSR basepri, r0
 1196              	@ 0 "" 2
 1197              	.LVL83:
 1198              		.thumb
 1199              		.syntax unified
 1200              	.LBE589:
 1201              	.LBE588:
 1202              	.LBE587:
 1203              	.LBE586:
 1204              	.LBE585:
 1205              	.LBE584:
 625:tmk_core/protocol/chibios/usb_main.c ****         /* need to wait until the previous packet has made it through */
 1206              		.loc 1 625 0
 1207 0022 1B48     		ldr	r0, .L116+4
 1208 0024 90F90000 		ldrsb	r0, [r0]
 1209 0028 0028     		cmp	r0, #0
 1210 002a 20DA     		bge	.L98
 625:tmk_core/protocol/chibios/usb_main.c ****         /* need to wait until the previous packet has made it through */
 1211              		.loc 1 625 0 is_stmt 0 discriminator 1
 1212 002c 1948     		ldr	r0, .L116+8
 1213 002e 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
 1214 0030 E8B1     		cbz	r0, .L98
 1215              	.LVL84:
 1216              	.LBB590:
 1217              	.LBB591:
 1218              	.LBB592:
 1219              	.LBB593:
 1220              	.LBB594:
 1221              		.loc 2 264 0 is_stmt 1
 1222              		.syntax unified
 1223              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1224 0032 81F31188 		MSR basepri, r1
 1225              	@ 0 "" 2
 1226              	.LVL85:
 1227              		.thumb
 1228              		.syntax unified
 1229              	.LBE594:
 1230              	.LBE593:
 1231              	.LBE592:
 1232              	.LBE591:
 1233              	.LBE590:
 632:tmk_core/protocol/chibios/usb_main.c ****             /* Need to either suspend, or loop and call unlock/lock during
 1234              		.loc 1 632 0
 1235 0036 1A89     		ldrh	r2, [r3, #8]
 1236 0038 5207     		lsls	r2, r2, #29
 1237 003a 04D5     		bpl	.L99
 1238              	.LVL86:
 637:tmk_core/protocol/chibios/usb_main.c ****         }
 1239              		.loc 1 637 0
 1240 003c 5B69     		ldr	r3, [r3, #20]
 1241 003e 5869     		ldr	r0, [r3, #20]
 1242              	.LBB595:
 1243              	.LBB596:
 1244              		.file 4 "./lib/chibios/os/hal/osal/rt/osal.h"
   1:./lib/chibios/os/hal/osal/rt/osal.h **** /*
   2:./lib/chibios/os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:./lib/chibios/os/hal/osal/rt/osal.h **** 
   4:./lib/chibios/os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:./lib/chibios/os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:./lib/chibios/os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:./lib/chibios/os/hal/osal/rt/osal.h **** 
   8:./lib/chibios/os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:./lib/chibios/os/hal/osal/rt/osal.h **** 
  10:./lib/chibios/os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:./lib/chibios/os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:./lib/chibios/os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:./lib/chibios/os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:./lib/chibios/os/hal/osal/rt/osal.h ****     limitations under the License.
  15:./lib/chibios/os/hal/osal/rt/osal.h **** */
  16:./lib/chibios/os/hal/osal/rt/osal.h **** 
  17:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  18:./lib/chibios/os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:./lib/chibios/os/hal/osal/rt/osal.h ****  *
  21:./lib/chibios/os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  23:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  24:./lib/chibios/os/hal/osal/rt/osal.h **** 
  25:./lib/chibios/os/hal/osal/rt/osal.h **** #ifndef _OSAL_H_
  26:./lib/chibios/os/hal/osal/rt/osal.h **** #define _OSAL_H_
  27:./lib/chibios/os/hal/osal/rt/osal.h **** 
  28:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:./lib/chibios/os/hal/osal/rt/osal.h **** 
  32:./lib/chibios/os/hal/osal/rt/osal.h **** #include "ch.h"
  33:./lib/chibios/os/hal/osal/rt/osal.h **** 
  34:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:./lib/chibios/os/hal/osal/rt/osal.h **** 
  38:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  39:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  41:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  42:./lib/chibios/os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:./lib/chibios/os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  45:./lib/chibios/os/hal/osal/rt/osal.h **** 
  46:./lib/chibios/os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:./lib/chibios/os/hal/osal/rt/osal.h **** #define TRUE                                (!FALSE)
  48:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  49:./lib/chibios/os/hal/osal/rt/osal.h **** 
  50:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        FALSE
  51:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         TRUE
  52:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  53:./lib/chibios/os/hal/osal/rt/osal.h **** 
  54:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
  55:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  56:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Messages
  57:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  58:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  59:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_OK                              RDY_OK
  60:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_RESET                           RDY_RESET
  61:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         RDY_TIMEOUT
  62:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  63:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  64:./lib/chibios/os/hal/osal/rt/osal.h **** 
  65:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
  66:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  67:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  69:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  70:./lib/chibios/os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((systime_t)0)
  71:./lib/chibios/os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((systime_t)-1)
  72:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  73:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  74:./lib/chibios/os/hal/osal/rt/osal.h **** 
  75:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  76:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  78:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  79:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  83:./lib/chibios/os/hal/osal/rt/osal.h **** 
  84:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  85:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  87:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  88:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  89:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  91:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:./lib/chibios/os/hal/osal/rt/osal.h **** 
  93:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  94:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  96:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:./lib/chibios/os/hal/osal/rt/osal.h **** 
  98:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  99:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 101:./lib/chibios/os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 104:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 106:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 107:./lib/chibios/os/hal/osal/rt/osal.h **** 
 108:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:./lib/chibios/os/hal/osal/rt/osal.h **** 
 112:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:./lib/chibios/os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:./lib/chibios/os/hal/osal/rt/osal.h **** 
 116:./lib/chibios/os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:./lib/chibios/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:./lib/chibios/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:./lib/chibios/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 121:./lib/chibios/os/hal/osal/rt/osal.h **** 
 122:./lib/chibios/os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:./lib/chibios/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 125:./lib/chibios/os/hal/osal/rt/osal.h **** 
 126:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:./lib/chibios/os/hal/osal/rt/osal.h **** 
 130:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 131:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 132:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 134:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 136:./lib/chibios/os/hal/osal/rt/osal.h **** 
 137:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 138:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 139:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 141:./lib/chibios/os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 143:./lib/chibios/os/hal/osal/rt/osal.h **** 
 144:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 145:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 146:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 148:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 150:./lib/chibios/os/hal/osal/rt/osal.h **** 
 151:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 152:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 153:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 154:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 155:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 156:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 157:./lib/chibios/os/hal/osal/rt/osal.h **** 
 158:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 159:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 160:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 161:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 162:./lib/chibios/os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 163:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 164:./lib/chibios/os/hal/osal/rt/osal.h **** 
 165:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 166:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 167:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 168:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 169:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 170:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 171:./lib/chibios/os/hal/osal/rt/osal.h **** 
 172:./lib/chibios/os/hal/osal/rt/osal.h **** #if !CH_CFG_USE_EVENTS
 173:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 174:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 175:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 176:./lib/chibios/os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 177:./lib/chibios/os/hal/osal/rt/osal.h ****  *          an entirely different way.
 178:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 179:./lib/chibios/os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 180:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 181:./lib/chibios/os/hal/osal/rt/osal.h **** typedef struct {
 182:./lib/chibios/os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Flags stored into the
 183:./lib/chibios/os/hal/osal/rt/osal.h ****                                                 object.                     */
 184:./lib/chibios/os/hal/osal/rt/osal.h **** } event_source_t;
 185:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 186:./lib/chibios/os/hal/osal/rt/osal.h **** 
 187:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 188:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 189:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then them
 190:./lib/chibios/os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 191:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 192:./lib/chibios/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 193:./lib/chibios/os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 194:./lib/chibios/os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 195:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 196:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 197:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 198:./lib/chibios/os/hal/osal/rt/osal.h **** 
 199:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 200:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 201:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 202:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 203:./lib/chibios/os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 204:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 205:./lib/chibios/os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 206:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 207:./lib/chibios/os/hal/osal/rt/osal.h **** typedef struct {
 208:./lib/chibios/os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 209:./lib/chibios/os/hal/osal/rt/osal.h **** } threads_queue_t;
 210:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 211:./lib/chibios/os/hal/osal/rt/osal.h **** 
 212:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 213:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 214:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 215:./lib/chibios/os/hal/osal/rt/osal.h **** 
 216:./lib/chibios/os/hal/osal/rt/osal.h **** /* Temporary names provided for ChibiOS 2.x compatibility.*/
 217:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueInit osalThreadQueueObjectInit
 218:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueWakeupAllI osalThreadDequeueAllI
 219:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueWakeupOneI osalThreadDequeueNextI
 220:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueGoSleepTimeoutS osalThreadEnqueueTimeoutS
 221:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalEventInit osalEventObjectInit
 222:./lib/chibios/os/hal/osal/rt/osal.h **** 
 223:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 224:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 225:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 226:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 227:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 228:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 229:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 230:./lib/chibios/os/hal/osal/rt/osal.h ****  *          message and halts.
 231:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 232:./lib/chibios/os/hal/osal/rt/osal.h ****  *          switch is enabled.
 233:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 234:./lib/chibios/os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 235:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 236:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 237:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 238:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 239:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 240:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 241:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 242:./lib/chibios/os/hal/osal/rt/osal.h **** 
 243:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 244:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 245:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 246:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 247:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is enabled.
 248:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 249:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 250:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 251:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 252:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 253:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 254:./lib/chibios/os/hal/osal/rt/osal.h **** 
 255:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 256:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 257:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 258:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 259:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 260:./lib/chibios/os/hal/osal/rt/osal.h **** 
 261:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 262:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 263:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 264:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 265:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 266:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 267:./lib/chibios/os/hal/osal/rt/osal.h **** 
 268:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 269:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 270:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 271:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 272:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 273:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 274:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 275:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 276:./lib/chibios/os/hal/osal/rt/osal.h **** 
 277:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 278:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 279:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 280:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 281:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 282:./lib/chibios/os/hal/osal/rt/osal.h **** 
 283:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 284:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 285:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 286:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 287:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 288:./lib/chibios/os/hal/osal/rt/osal.h **** 
 289:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 290:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 291:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 292:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 293:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 294:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 295:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 296:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 297:./lib/chibios/os/hal/osal/rt/osal.h **** 
 298:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 299:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 300:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 301:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 302:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 303:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 304:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 305:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 306:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 307:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 308:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 309:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 310:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 311:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 312:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_S2ST(sec) S2ST(sec)
 313:./lib/chibios/os/hal/osal/rt/osal.h **** 
 314:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 315:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 316:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 317:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 318:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 319:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 320:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 321:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 322:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 323:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 324:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_MS2ST(msec) MS2ST(msec)
 325:./lib/chibios/os/hal/osal/rt/osal.h **** 
 326:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 327:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 328:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 329:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 330:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 331:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 332:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 333:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 334:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 335:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 336:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_US2ST(usec) US2ST(usec)
 337:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 338:./lib/chibios/os/hal/osal/rt/osal.h **** 
 339:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 340:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 341:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 342:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 343:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 344:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 345:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 346:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 347:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 348:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 349:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 350:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 351:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 352:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 353:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 354:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 355:./lib/chibios/os/hal/osal/rt/osal.h **** 
 356:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 357:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 358:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 359:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 360:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 361:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 362:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 363:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 364:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 365:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 366:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 367:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 368:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 369:./lib/chibios/os/hal/osal/rt/osal.h **** 
 370:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 371:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 372:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 373:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 374:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 375:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 376:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 377:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 378:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 379:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 380:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 381:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 382:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 383:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 384:./lib/chibios/os/hal/osal/rt/osal.h **** 
 385:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 386:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 387:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 388:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 389:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 390:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 391:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 392:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 393:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 394:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 395:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       time in seconds, must be different from zero
 396:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 397:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 398:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 399:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(sec) osalThreadSleep(OSAL_S2ST(sec))
 400:./lib/chibios/os/hal/osal/rt/osal.h **** 
 401:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 402:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 403:./lib/chibios/os/hal/osal/rt/osal.h ****  *          milliseconds.
 404:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 405:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 406:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 407:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 408:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 409:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 410:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 411:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 412:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msec) osalThreadSleep(OSAL_MS2ST(msec))
 413:./lib/chibios/os/hal/osal/rt/osal.h **** 
 414:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 415:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 416:./lib/chibios/os/hal/osal/rt/osal.h ****  *          microseconds.
 417:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 418:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 419:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 420:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 421:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      time in microseconds, must be different from zero
 422:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 423:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 424:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 425:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usec) osalThreadSleep(OSAL_US2ST(usec))
 426:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 427:./lib/chibios/os/hal/osal/rt/osal.h **** 
 428:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 429:./lib/chibios/os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 430:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 431:./lib/chibios/os/hal/osal/rt/osal.h **** 
 432:./lib/chibios/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 433:./lib/chibios/os/hal/osal/rt/osal.h **** extern "C" {
 434:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 435:./lib/chibios/os/hal/osal/rt/osal.h **** 
 436:./lib/chibios/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 437:./lib/chibios/os/hal/osal/rt/osal.h **** }
 438:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 439:./lib/chibios/os/hal/osal/rt/osal.h **** 
 440:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 441:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 442:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 443:./lib/chibios/os/hal/osal/rt/osal.h **** 
 444:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 445:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 446:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 447:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 448:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 449:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 450:./lib/chibios/os/hal/osal/rt/osal.h **** 
 451:./lib/chibios/os/hal/osal/rt/osal.h **** }
 452:./lib/chibios/os/hal/osal/rt/osal.h **** 
 453:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 454:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 455:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 456:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 457:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 458:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 459:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 460:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 461:./lib/chibios/os/hal/osal/rt/osal.h **** 
 462:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 463:./lib/chibios/os/hal/osal/rt/osal.h **** }
 464:./lib/chibios/os/hal/osal/rt/osal.h **** 
 465:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 466:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 467:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 468:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 469:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 470:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 471:./lib/chibios/os/hal/osal/rt/osal.h **** 
 472:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysDisable();
 473:./lib/chibios/os/hal/osal/rt/osal.h **** }
 474:./lib/chibios/os/hal/osal/rt/osal.h **** 
 475:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 476:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 477:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 478:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 479:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 480:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 481:./lib/chibios/os/hal/osal/rt/osal.h **** 
 482:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysEnable();
 483:./lib/chibios/os/hal/osal/rt/osal.h **** }
 484:./lib/chibios/os/hal/osal/rt/osal.h **** 
 485:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 486:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 487:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 488:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 489:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 490:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 491:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 492:./lib/chibios/os/hal/osal/rt/osal.h **** 
 493:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysLock();
 494:./lib/chibios/os/hal/osal/rt/osal.h **** }
 495:./lib/chibios/os/hal/osal/rt/osal.h **** 
 496:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 497:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 498:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 499:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 500:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 501:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 502:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 503:./lib/chibios/os/hal/osal/rt/osal.h **** 
 504:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysUnlock();
 505:./lib/chibios/os/hal/osal/rt/osal.h **** }
 506:./lib/chibios/os/hal/osal/rt/osal.h **** 
 507:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 508:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 509:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 510:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 511:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 512:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 513:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 514:./lib/chibios/os/hal/osal/rt/osal.h **** 
 515:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 516:./lib/chibios/os/hal/osal/rt/osal.h **** }
 517:./lib/chibios/os/hal/osal/rt/osal.h **** 
 518:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 519:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 520:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 521:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 522:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 523:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 524:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 525:./lib/chibios/os/hal/osal/rt/osal.h **** 
 526:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 527:./lib/chibios/os/hal/osal/rt/osal.h **** }
 528:./lib/chibios/os/hal/osal/rt/osal.h **** 
 529:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 530:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 531:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 532:./lib/chibios/os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 533:./lib/chibios/os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 534:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is known.
 535:./lib/chibios/os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 536:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 537:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 538:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 539:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 540:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 541:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 542:./lib/chibios/os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 543:./lib/chibios/os/hal/osal/rt/osal.h **** 
 544:./lib/chibios/os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 545:./lib/chibios/os/hal/osal/rt/osal.h **** }
 546:./lib/chibios/os/hal/osal/rt/osal.h **** 
 547:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 548:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 549:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 550:./lib/chibios/os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 551:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 552:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 553:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 554:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 555:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 556:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 557:./lib/chibios/os/hal/osal/rt/osal.h **** 
 558:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 559:./lib/chibios/os/hal/osal/rt/osal.h **** }
 560:./lib/chibios/os/hal/osal/rt/osal.h **** 
 561:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 562:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 563:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 564:./lib/chibios/os/hal/osal/rt/osal.h ****  *          value.
 565:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 566:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 567:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 568:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 569:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 570:./lib/chibios/os/hal/osal/rt/osal.h **** #if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
 571:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 572:./lib/chibios/os/hal/osal/rt/osal.h **** 
 573:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 574:./lib/chibios/os/hal/osal/rt/osal.h **** }
 575:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 576:./lib/chibios/os/hal/osal/rt/osal.h **** 
 577:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 578:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 579:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 580:./lib/chibios/os/hal/osal/rt/osal.h ****  *          service from the HAL.
 581:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 582:./lib/chibios/os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 583:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 584:./lib/chibios/os/hal/osal/rt/osal.h **** 
 585:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 586:./lib/chibios/os/hal/osal/rt/osal.h **** }
 587:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 588:./lib/chibios/os/hal/osal/rt/osal.h **** 
 589:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 590:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 591:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 592:./lib/chibios/os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 593:./lib/chibios/os/hal/osal/rt/osal.h ****  *          required in this scenario.
 594:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 595:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 596:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 597:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 598:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 599:./lib/chibios/os/hal/osal/rt/osal.h **** 
 600:./lib/chibios/os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 601:./lib/chibios/os/hal/osal/rt/osal.h **** }
 602:./lib/chibios/os/hal/osal/rt/osal.h **** 
 603:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 604:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 605:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 606:./lib/chibios/os/hal/osal/rt/osal.h ****  *          invocation.
 607:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 608:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 609:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 610:./lib/chibios/os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 611:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 612:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 613:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 614:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 615:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 616:./lib/chibios/os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 617:./lib/chibios/os/hal/osal/rt/osal.h **** 
 618:./lib/chibios/os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 619:./lib/chibios/os/hal/osal/rt/osal.h **** }
 620:./lib/chibios/os/hal/osal/rt/osal.h **** 
 621:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 622:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 623:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 624:./lib/chibios/os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 625:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 626:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 627:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 628:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 629:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 630:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 631:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 632:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 633:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 634:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 635:./lib/chibios/os/hal/osal/rt/osal.h **** static inline bool osalOsIsTimeWithinX(systime_t time,
 636:./lib/chibios/os/hal/osal/rt/osal.h ****                                        systime_t start,
 637:./lib/chibios/os/hal/osal/rt/osal.h ****                                        systime_t end) {
 638:./lib/chibios/os/hal/osal/rt/osal.h **** 
 639:./lib/chibios/os/hal/osal/rt/osal.h ****   return chVTIsTimeWithinX(time, start, end);
 640:./lib/chibios/os/hal/osal/rt/osal.h **** }
 641:./lib/chibios/os/hal/osal/rt/osal.h **** 
 642:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 643:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 644:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 645:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 646:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 647:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 648:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        normal time specification.
 649:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 650:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 651:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 652:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 653:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 654:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(systime_t time) {
 655:./lib/chibios/os/hal/osal/rt/osal.h **** 
 656:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdSleepS(time);
 657:./lib/chibios/os/hal/osal/rt/osal.h **** }
 658:./lib/chibios/os/hal/osal/rt/osal.h **** 
 659:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 660:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 661:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 662:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 663:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 664:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 665:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        normal time specification.
 666:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 667:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 668:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 669:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 670:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 671:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(systime_t time) {
 672:./lib/chibios/os/hal/osal/rt/osal.h **** 
 673:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdSleep(time);
 674:./lib/chibios/os/hal/osal/rt/osal.h **** }
 675:./lib/chibios/os/hal/osal/rt/osal.h **** 
 676:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 677:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 678:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 679:./lib/chibios/os/hal/osal/rt/osal.h ****  *          context.
 680:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 681:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 682:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 683:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 684:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 685:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 686:./lib/chibios/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 687:./lib/chibios/os/hal/osal/rt/osal.h **** 
 688:./lib/chibios/os/hal/osal/rt/osal.h ****   return chThdSuspendS(trp);
 1245              		.loc 4 688 0
 1246 0040 0C30     		adds	r0, r0, #12
 1247 0042 FFF7FEFF 		bl	chThdSuspendS
 1248              	.LVL87:
 1249              	.L99:
 1250              	.LBE596:
 1251              	.LBE595:
 639:tmk_core/protocol/chibios/usb_main.c ****         osalSysUnlock();
 1252              		.loc 1 639 0
 1253 0046 2023     		movs	r3, #32
 1254 0048 2246     		mov	r2, r4
 1255 004a 0221     		movs	r1, #2
 1256              	.LVL88:
 1257              	.L115:
 1258              	.LBB597:
 662:tmk_core/protocol/chibios/usb_main.c ****         osalSysUnlock();
 1259              		.loc 1 662 0
 1260 004c 0F48     		ldr	r0, .L116
 1261 004e FFF7FEFF 		bl	usbStartTransmitI
 1262              	.LVL89:
 1263              	.LBB598:
 1264              	.LBB599:
 1265              	.LBB600:
 1266              	.LBB601:
 1267              	.LBB602:
 1268              	.LBB603:
 1269              		.loc 2 264 0
 1270 0052 0023     		movs	r3, #0
 1271              		.syntax unified
 1272              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1273 0054 83F31188 		MSR basepri, r3
 1274              	@ 0 "" 2
 1275              	.LVL90:
 1276              		.thumb
 1277              		.syntax unified
 1278              	.LBE603:
 1279              	.LBE602:
 1280              	.LBE601:
 1281              	.LBE600:
 1282              	.LBE599:
 1283              	.LBE598:
 1284              	.LBE597:
 665:tmk_core/protocol/chibios/usb_main.c **** }
 1285              		.loc 1 665 0
 1286 0058 0F4B     		ldr	r3, .L116+12
 1287 005a 2246     		mov	r2, r4
 1288 005c 04F12001 		add	r1, r4, #32
 1289              	.L103:
 1290 0060 52F8040B 		ldr	r0, [r2], #4	@ unaligned
 1291 0064 43F8040B 		str	r0, [r3], #4	@ unaligned
 1292 0068 8A42     		cmp	r2, r1
 1293 006a F9D1     		bne	.L103
 1294 006c D6E7     		b	.L95
 1295              	.L98:
 1296              	.LVL91:
 1297              	.LBB611:
 1298              	.LBB604:
 1299              	.LBB605:
 1300              	.LBB606:
 1301              	.LBB607:
 1302              	.LBB608:
 1303              		.loc 2 264 0
 1304 006e 2023     		movs	r3, #32
 1305              		.syntax unified
 1306              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1307 0070 83F31188 		MSR basepri, r3
 1308              	@ 0 "" 2
 1309              	.LVL92:
 1310              		.thumb
 1311              		.syntax unified
 1312              	.LBE608:
 1313              	.LBE607:
 1314              	.LBE606:
 1315              	.LBE605:
 1316              	.LBE604:
 647:tmk_core/protocol/chibios/usb_main.c ****             /* Need to either suspend, or loop and call unlock/lock during
 1317              		.loc 1 647 0
 1318 0074 1389     		ldrh	r3, [r2, #8]
 1319 0076 9B07     		lsls	r3, r3, #30
 1320 0078 04D5     		bpl	.L101
 1321              	.LVL93:
 652:tmk_core/protocol/chibios/usb_main.c ****         }
 1322              		.loc 1 652 0
 1323 007a 1369     		ldr	r3, [r2, #16]
 1324 007c 5869     		ldr	r0, [r3, #20]
 1325              	.LBB609:
 1326              	.LBB610:
 1327              		.loc 4 688 0
 1328 007e 0C30     		adds	r0, r0, #12
 1329 0080 FFF7FEFF 		bl	chThdSuspendS
 1330              	.LVL94:
 1331              	.L101:
 1332              	.LBE610:
 1333              	.LBE609:
 662:tmk_core/protocol/chibios/usb_main.c ****         osalSysUnlock();
 1334              		.loc 1 662 0
 1335 0084 0823     		movs	r3, #8
 1336 0086 2246     		mov	r2, r4
 1337 0088 0121     		movs	r1, #1
 1338 008a DFE7     		b	.L115
 1339              	.L117:
 1340              		.align	2
 1341              	.L116:
 1342 008c 00000000 		.word	USBD1
 1343 0090 00000000 		.word	keymap_config
 1344 0094 00000000 		.word	.LANCHOR8
 1345 0098 00000000 		.word	.LANCHOR9
 1346              	.LBE611:
 1347              		.cfi_endproc
 1348              	.LFE290:
 1350              		.section	.text.send_mouse,"ax",%progbits
 1351              		.align	1
 1352              		.global	send_mouse
 1353              		.syntax unified
 1354              		.thumb
 1355              		.thumb_func
 1356              		.fpu softvfp
 1358              	send_mouse:
 1359              	.LFB291:
 667:tmk_core/protocol/chibios/usb_main.c **** 
 668:tmk_core/protocol/chibios/usb_main.c **** /* ---------------------------------------------------------
 669:tmk_core/protocol/chibios/usb_main.c ****  *                     Mouse functions
 670:tmk_core/protocol/chibios/usb_main.c ****  * ---------------------------------------------------------
 671:tmk_core/protocol/chibios/usb_main.c ****  */
 672:tmk_core/protocol/chibios/usb_main.c **** 
 673:tmk_core/protocol/chibios/usb_main.c **** #ifdef MOUSE_ENABLE
 674:tmk_core/protocol/chibios/usb_main.c **** 
 675:tmk_core/protocol/chibios/usb_main.c **** #    ifndef MOUSE_SHARED_EP
 676:tmk_core/protocol/chibios/usb_main.c **** /* mouse IN callback hander (a mouse report has made it IN) */
 677:tmk_core/protocol/chibios/usb_main.c **** void mouse_in_cb(USBDriver *usbp, usbep_t ep) {
 678:tmk_core/protocol/chibios/usb_main.c ****     (void)usbp;
 679:tmk_core/protocol/chibios/usb_main.c ****     (void)ep;
 680:tmk_core/protocol/chibios/usb_main.c **** }
 681:tmk_core/protocol/chibios/usb_main.c **** #    endif
 682:tmk_core/protocol/chibios/usb_main.c **** 
 683:tmk_core/protocol/chibios/usb_main.c **** void send_mouse(report_mouse_t *report) {
 1360              		.loc 1 683 0
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 0
 1363              		@ frame_needed = 0, uses_anonymous_args = 0
 1364              	.LVL95:
 1365 0000 10B5     		push	{r4, lr}
 1366              		.cfi_def_cfa_offset 8
 1367              		.cfi_offset 4, -8
 1368              		.cfi_offset 14, -4
 1369              	.LBB612:
 1370              	.LBB613:
 1371              	.LBB614:
 1372              	.LBB615:
 1373              	.LBB616:
 1374              		.loc 2 264 0
 1375 0002 2023     		movs	r3, #32
 1376              	.LBE616:
 1377              	.LBE615:
 1378              	.LBE614:
 1379              	.LBE613:
 1380              	.LBE612:
 1381              		.loc 1 683 0
 1382 0004 0446     		mov	r4, r0
 1383              	.LBB621:
 1384              	.LBB620:
 1385              	.LBB619:
 1386              	.LBB618:
 1387              	.LBB617:
 1388              		.loc 2 264 0
 1389              		.syntax unified
 1390              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1391 0006 83F31188 		MSR basepri, r3
 1392              	@ 0 "" 2
 1393              	.LVL96:
 1394              		.thumb
 1395              		.syntax unified
 1396              	.LBE617:
 1397              	.LBE618:
 1398              	.LBE619:
 1399              	.LBE620:
 1400              	.LBE621:
 684:tmk_core/protocol/chibios/usb_main.c ****     osalSysLock();
 685:tmk_core/protocol/chibios/usb_main.c ****     if (usbGetDriverStateI(&USB_DRIVER) != USB_ACTIVE) {
 1401              		.loc 1 685 0
 1402 000a 0D4B     		ldr	r3, .L126
 1403 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1404 000e 042A     		cmp	r2, #4
 1405 0010 03D0     		beq	.L119
 1406              	.LVL97:
 1407              	.L125:
 1408              	.LBB622:
 1409              	.LBB623:
 1410              	.LBB624:
 1411              	.LBB625:
 1412              	.LBB626:
 1413              	.LBB627:
 1414              		.loc 2 264 0
 1415 0012 0023     		movs	r3, #0
 1416              		.syntax unified
 1417              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1418 0014 83F31188 		MSR basepri, r3
 1419              	@ 0 "" 2
 1420              	.LVL98:
 1421              		.thumb
 1422              		.syntax unified
 1423              	.LBE627:
 1424              	.LBE626:
 1425              	.LBE625:
 1426              	.LBE624:
 1427              	.LBE623:
 1428              	.LBE622:
 686:tmk_core/protocol/chibios/usb_main.c ****         osalSysUnlock();
 687:tmk_core/protocol/chibios/usb_main.c ****         return;
 688:tmk_core/protocol/chibios/usb_main.c ****     }
 689:tmk_core/protocol/chibios/usb_main.c **** 
 690:tmk_core/protocol/chibios/usb_main.c ****     if (usbGetTransmitStatusI(&USB_DRIVER, MOUSE_IN_EPNUM)) {
 691:tmk_core/protocol/chibios/usb_main.c ****         /* Need to either suspend, or loop and call unlock/lock during
 692:tmk_core/protocol/chibios/usb_main.c ****          * every iteration - otherwise the system will remain locked,
 693:tmk_core/protocol/chibios/usb_main.c ****          * no interrupts served, so USB not going through as well.
 694:tmk_core/protocol/chibios/usb_main.c ****          * Note: for suspend, need USB_USE_WAIT == TRUE in halconf.h */
 695:tmk_core/protocol/chibios/usb_main.c ****         if (osalThreadSuspendTimeoutS(&(&USB_DRIVER)->epc[MOUSE_IN_EPNUM]->in_state->thread, MS2ST(
 696:tmk_core/protocol/chibios/usb_main.c ****             osalSysUnlock();
 697:tmk_core/protocol/chibios/usb_main.c ****             return;
 698:tmk_core/protocol/chibios/usb_main.c ****         }
 699:tmk_core/protocol/chibios/usb_main.c ****     }
 700:tmk_core/protocol/chibios/usb_main.c ****     usbStartTransmitI(&USB_DRIVER, MOUSE_IN_EPNUM, (uint8_t *)report, sizeof(report_mouse_t));
 701:tmk_core/protocol/chibios/usb_main.c ****     osalSysUnlock();
 702:tmk_core/protocol/chibios/usb_main.c **** }
 1429              		.loc 1 702 0
 1430 0018 10BD     		pop	{r4, pc}
 1431              	.LVL99:
 1432              	.L119:
 690:tmk_core/protocol/chibios/usb_main.c ****         /* Need to either suspend, or loop and call unlock/lock during
 1433              		.loc 1 690 0
 1434 001a 1A89     		ldrh	r2, [r3, #8]
 1435 001c 5207     		lsls	r2, r2, #29
 1436 001e 08D5     		bpl	.L121
 1437              	.LVL100:
 695:tmk_core/protocol/chibios/usb_main.c ****             osalSysUnlock();
 1438              		.loc 1 695 0
 1439 0020 5B69     		ldr	r3, [r3, #20]
 1440 0022 5869     		ldr	r0, [r3, #20]
 1441              	.LVL101:
 1442              	.LBB628:
 1443              	.LBB629:
 689:./lib/chibios/os/hal/osal/rt/osal.h **** }
 690:./lib/chibios/os/hal/osal/rt/osal.h **** 
 691:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 692:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 693:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 694:./lib/chibios/os/hal/osal/rt/osal.h ****  *          context.
 695:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 696:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 697:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 698:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 699:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 700:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        state.
 701:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 702:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 703:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        occurred.
 704:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 705:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 706:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 707:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 708:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 709:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 710:./lib/chibios/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 711:./lib/chibios/os/hal/osal/rt/osal.h ****                                               systime_t timeout) {
 712:./lib/chibios/os/hal/osal/rt/osal.h **** 
 713:./lib/chibios/os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 1444              		.loc 4 713 0
 1445 0024 4FF47A71 		mov	r1, #1000
 1446 0028 0C30     		adds	r0, r0, #12
 1447 002a FFF7FEFF 		bl	chThdSuspendTimeoutS
 1448              	.LVL102:
 1449              	.LBE629:
 1450              	.LBE628:
 695:tmk_core/protocol/chibios/usb_main.c ****             osalSysUnlock();
 1451              		.loc 1 695 0
 1452 002e 0130     		adds	r0, r0, #1
 1453 0030 EFD0     		beq	.L125
 1454              	.L121:
 700:tmk_core/protocol/chibios/usb_main.c ****     osalSysUnlock();
 1455              		.loc 1 700 0
 1456 0032 0623     		movs	r3, #6
 1457 0034 2246     		mov	r2, r4
 1458 0036 0221     		movs	r1, #2
 1459 0038 0148     		ldr	r0, .L126
 1460 003a FFF7FEFF 		bl	usbStartTransmitI
 1461              	.LVL103:
 1462 003e E8E7     		b	.L125
 1463              	.L127:
 1464              		.align	2
 1465              	.L126:
 1466 0040 00000000 		.word	USBD1
 1467              		.cfi_endproc
 1468              	.LFE291:
 1470              		.section	.text.send_system,"ax",%progbits
 1471              		.align	1
 1472              		.global	send_system
 1473              		.syntax unified
 1474              		.thumb
 1475              		.thumb_func
 1476              		.fpu softvfp
 1478              	send_system:
 1479              	.LFB294:
 703:tmk_core/protocol/chibios/usb_main.c **** 
 704:tmk_core/protocol/chibios/usb_main.c **** #else  /* MOUSE_ENABLE */
 705:tmk_core/protocol/chibios/usb_main.c **** void send_mouse(report_mouse_t *report) { (void)report; }
 706:tmk_core/protocol/chibios/usb_main.c **** #endif /* MOUSE_ENABLE */
 707:tmk_core/protocol/chibios/usb_main.c **** 
 708:tmk_core/protocol/chibios/usb_main.c **** /* ---------------------------------------------------------
 709:tmk_core/protocol/chibios/usb_main.c ****  *                   Shared EP functions
 710:tmk_core/protocol/chibios/usb_main.c ****  * ---------------------------------------------------------
 711:tmk_core/protocol/chibios/usb_main.c ****  */
 712:tmk_core/protocol/chibios/usb_main.c **** #ifdef SHARED_EP_ENABLE
 713:tmk_core/protocol/chibios/usb_main.c **** /* shared IN callback hander */
 714:tmk_core/protocol/chibios/usb_main.c **** void shared_in_cb(USBDriver *usbp, usbep_t ep) {
 715:tmk_core/protocol/chibios/usb_main.c ****     /* STUB */
 716:tmk_core/protocol/chibios/usb_main.c ****     (void)usbp;
 717:tmk_core/protocol/chibios/usb_main.c ****     (void)ep;
 718:tmk_core/protocol/chibios/usb_main.c **** }
 719:tmk_core/protocol/chibios/usb_main.c **** #endif
 720:tmk_core/protocol/chibios/usb_main.c **** 
 721:tmk_core/protocol/chibios/usb_main.c **** /* ---------------------------------------------------------
 722:tmk_core/protocol/chibios/usb_main.c ****  *                   Extrakey functions
 723:tmk_core/protocol/chibios/usb_main.c ****  * ---------------------------------------------------------
 724:tmk_core/protocol/chibios/usb_main.c ****  */
 725:tmk_core/protocol/chibios/usb_main.c **** 
 726:tmk_core/protocol/chibios/usb_main.c **** #ifdef EXTRAKEY_ENABLE
 727:tmk_core/protocol/chibios/usb_main.c **** static void send_extra_report(uint8_t report_id, uint16_t data) {
 728:tmk_core/protocol/chibios/usb_main.c ****     osalSysLock();
 729:tmk_core/protocol/chibios/usb_main.c ****     if (usbGetDriverStateI(&USB_DRIVER) != USB_ACTIVE) {
 730:tmk_core/protocol/chibios/usb_main.c ****         osalSysUnlock();
 731:tmk_core/protocol/chibios/usb_main.c ****         return;
 732:tmk_core/protocol/chibios/usb_main.c ****     }
 733:tmk_core/protocol/chibios/usb_main.c **** 
 734:tmk_core/protocol/chibios/usb_main.c ****     report_extra_t report = {.report_id = report_id, .usage = data};
 735:tmk_core/protocol/chibios/usb_main.c **** 
 736:tmk_core/protocol/chibios/usb_main.c ****     usbStartTransmitI(&USB_DRIVER, SHARED_IN_EPNUM, (uint8_t *)&report, sizeof(report_extra_t));
 737:tmk_core/protocol/chibios/usb_main.c ****     osalSysUnlock();
 738:tmk_core/protocol/chibios/usb_main.c **** }
 739:tmk_core/protocol/chibios/usb_main.c **** 
 740:tmk_core/protocol/chibios/usb_main.c **** void send_system(uint16_t data) { send_extra_report(REPORT_ID_SYSTEM, data); }
 1480              		.loc 1 740 0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 8
 1483              		@ frame_needed = 0, uses_anonymous_args = 0
 1484              	.LVL104:
 1485 0000 07B5     		push	{r0, r1, r2, lr}
 1486              		.cfi_def_cfa_offset 16
 1487              		.cfi_offset 14, -4
 1488              	.LBB662:
 1489              	.LBB663:
 1490              	.LBB664:
 1491              	.LBB665:
 1492              	.LBB666:
 1493              	.LBB667:
 1494              	.LBB668:
 1495              		.loc 2 264 0
 1496 0002 2023     		movs	r3, #32
 1497              	.LBE668:
 1498              	.LBE667:
 1499              	.LBE666:
 1500              	.LBE665:
 1501              	.LBE664:
 1502              	.LBE663:
 1503              	.LBE662:
 1504              		.loc 1 740 0
 1505 0004 0246     		mov	r2, r0
 1506              	.LVL105:
 1507              	.LBB686:
 1508              	.LBB684:
 1509              	.LBB673:
 1510              	.LBB672:
 1511              	.LBB671:
 1512              	.LBB670:
 1513              	.LBB669:
 1514              		.loc 2 264 0
 1515              		.syntax unified
 1516              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1517 0006 83F31188 		MSR basepri, r3
 1518              	@ 0 "" 2
 1519              	.LVL106:
 1520              		.thumb
 1521              		.syntax unified
 1522              	.LBE669:
 1523              	.LBE670:
 1524              	.LBE671:
 1525              	.LBE672:
 1526              	.LBE673:
 729:tmk_core/protocol/chibios/usb_main.c ****         osalSysUnlock();
 1527              		.loc 1 729 0
 1528 000a 0A48     		ldr	r0, .L132
 1529              	.LVL107:
 1530 000c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1531 000e 042B     		cmp	r3, #4
 1532 0010 05D0     		beq	.L129
 1533              	.LVL108:
 1534              	.L131:
 1535              	.LBB674:
 1536              	.LBB675:
 1537              	.LBB676:
 1538              	.LBB677:
 1539              	.LBB678:
 1540              	.LBB679:
 1541              	.LBB680:
 1542              	.LBB681:
 1543              		.loc 2 264 0
 1544 0012 0023     		movs	r3, #0
 1545              		.syntax unified
 1546              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1547 0014 83F31188 		MSR basepri, r3
 1548              	@ 0 "" 2
 1549              	.LVL109:
 1550              		.thumb
 1551              		.syntax unified
 1552              	.LBE681:
 1553              	.LBE680:
 1554              	.LBE679:
 1555              	.LBE678:
 1556              	.LBE677:
 1557              	.LBE676:
 1558              	.LBE675:
 1559              	.LBE674:
 1560              	.LBE684:
 1561              	.LBE686:
 1562              		.loc 1 740 0
 1563 0018 03B0     		add	sp, sp, #12
 1564              		.cfi_remember_state
 1565              		.cfi_def_cfa_offset 4
 1566              		@ sp needed
 1567 001a 5DF804FB 		ldr	pc, [sp], #4
 1568              	.LVL110:
 1569              	.L129:
 1570              		.cfi_restore_state
 1571              	.LBB687:
 1572              	.LBB685:
 1573              	.LBB683:
 1574              	.LBB682:
 734:tmk_core/protocol/chibios/usb_main.c **** 
 1575              		.loc 1 734 0
 1576 001e 0323     		movs	r3, #3
 1577 0020 ADF80520 		strh	r2, [sp, #5]	@ unaligned
 736:tmk_core/protocol/chibios/usb_main.c ****     osalSysUnlock();
 1578              		.loc 1 736 0
 1579 0024 0221     		movs	r1, #2
 1580 0026 01AA     		add	r2, sp, #4
 1581              	.LVL111:
 734:tmk_core/protocol/chibios/usb_main.c **** 
 1582              		.loc 1 734 0
 1583 0028 8DF80430 		strb	r3, [sp, #4]
 736:tmk_core/protocol/chibios/usb_main.c ****     osalSysUnlock();
 1584              		.loc 1 736 0
 1585 002c FFF7FEFF 		bl	usbStartTransmitI
 1586              	.LVL112:
 1587 0030 EFE7     		b	.L131
 1588              	.L133:
 1589 0032 00BF     		.align	2
 1590              	.L132:
 1591 0034 00000000 		.word	USBD1
 1592              	.LBE682:
 1593              	.LBE683:
 1594              	.LBE685:
 1595              	.LBE687:
 1596              		.cfi_endproc
 1597              	.LFE294:
 1599              		.section	.text.send_consumer,"ax",%progbits
 1600              		.align	1
 1601              		.global	send_consumer
 1602              		.syntax unified
 1603              		.thumb
 1604              		.thumb_func
 1605              		.fpu softvfp
 1607              	send_consumer:
 1608              	.LFB295:
 741:tmk_core/protocol/chibios/usb_main.c **** 
 742:tmk_core/protocol/chibios/usb_main.c **** void send_consumer(uint16_t data) { send_extra_report(REPORT_ID_CONSUMER, data); }
 1609              		.loc 1 742 0
 1610              		.cfi_startproc
 1611              		@ args = 0, pretend = 0, frame = 8
 1612              		@ frame_needed = 0, uses_anonymous_args = 0
 1613              	.LVL113:
 1614 0000 07B5     		push	{r0, r1, r2, lr}
 1615              		.cfi_def_cfa_offset 16
 1616              		.cfi_offset 14, -4
 1617              	.LBB720:
 1618              	.LBB721:
 1619              	.LBB722:
 1620              	.LBB723:
 1621              	.LBB724:
 1622              	.LBB725:
 1623              	.LBB726:
 1624              		.loc 2 264 0
 1625 0002 2023     		movs	r3, #32
 1626              	.LBE726:
 1627              	.LBE725:
 1628              	.LBE724:
 1629              	.LBE723:
 1630              	.LBE722:
 1631              	.LBE721:
 1632              	.LBE720:
 1633              		.loc 1 742 0
 1634 0004 0246     		mov	r2, r0
 1635              	.LVL114:
 1636              	.LBB744:
 1637              	.LBB742:
 1638              	.LBB731:
 1639              	.LBB730:
 1640              	.LBB729:
 1641              	.LBB728:
 1642              	.LBB727:
 1643              		.loc 2 264 0
 1644              		.syntax unified
 1645              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1646 0006 83F31188 		MSR basepri, r3
 1647              	@ 0 "" 2
 1648              	.LVL115:
 1649              		.thumb
 1650              		.syntax unified
 1651              	.LBE727:
 1652              	.LBE728:
 1653              	.LBE729:
 1654              	.LBE730:
 1655              	.LBE731:
 729:tmk_core/protocol/chibios/usb_main.c ****         osalSysUnlock();
 1656              		.loc 1 729 0
 1657 000a 0A48     		ldr	r0, .L138
 1658              	.LVL116:
 1659 000c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1660 000e 042B     		cmp	r3, #4
 1661 0010 05D0     		beq	.L135
 1662              	.LVL117:
 1663              	.L137:
 1664              	.LBB732:
 1665              	.LBB733:
 1666              	.LBB734:
 1667              	.LBB735:
 1668              	.LBB736:
 1669              	.LBB737:
 1670              	.LBB738:
 1671              	.LBB739:
 1672              		.loc 2 264 0
 1673 0012 0023     		movs	r3, #0
 1674              		.syntax unified
 1675              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1676 0014 83F31188 		MSR basepri, r3
 1677              	@ 0 "" 2
 1678              	.LVL118:
 1679              		.thumb
 1680              		.syntax unified
 1681              	.LBE739:
 1682              	.LBE738:
 1683              	.LBE737:
 1684              	.LBE736:
 1685              	.LBE735:
 1686              	.LBE734:
 1687              	.LBE733:
 1688              	.LBE732:
 1689              	.LBE742:
 1690              	.LBE744:
 1691              		.loc 1 742 0
 1692 0018 03B0     		add	sp, sp, #12
 1693              		.cfi_remember_state
 1694              		.cfi_def_cfa_offset 4
 1695              		@ sp needed
 1696 001a 5DF804FB 		ldr	pc, [sp], #4
 1697              	.LVL119:
 1698              	.L135:
 1699              		.cfi_restore_state
 1700              	.LBB745:
 1701              	.LBB743:
 1702              	.LBB741:
 1703              	.LBB740:
 734:tmk_core/protocol/chibios/usb_main.c **** 
 1704              		.loc 1 734 0
 1705 001e 8DF80430 		strb	r3, [sp, #4]
 1706 0022 ADF80520 		strh	r2, [sp, #5]	@ unaligned
 736:tmk_core/protocol/chibios/usb_main.c ****     osalSysUnlock();
 1707              		.loc 1 736 0
 1708 0026 0323     		movs	r3, #3
 1709 0028 01AA     		add	r2, sp, #4
 1710              	.LVL120:
 1711 002a 0221     		movs	r1, #2
 1712 002c FFF7FEFF 		bl	usbStartTransmitI
 1713              	.LVL121:
 1714 0030 EFE7     		b	.L137
 1715              	.L139:
 1716 0032 00BF     		.align	2
 1717              	.L138:
 1718 0034 00000000 		.word	USBD1
 1719              	.LBE740:
 1720              	.LBE741:
 1721              	.LBE743:
 1722              	.LBE745:
 1723              		.cfi_endproc
 1724              	.LFE295:
 1726              		.section	.text.sendchar,"ax",%progbits
 1727              		.align	1
 1728              		.global	sendchar
 1729              		.syntax unified
 1730              		.thumb
 1731              		.thumb_func
 1732              		.fpu softvfp
 1734              	sendchar:
 1735              	.LFB296:
 743:tmk_core/protocol/chibios/usb_main.c **** 
 744:tmk_core/protocol/chibios/usb_main.c **** #else  /* EXTRAKEY_ENABLE */
 745:tmk_core/protocol/chibios/usb_main.c **** void send_system(uint16_t data) { (void)data; }
 746:tmk_core/protocol/chibios/usb_main.c **** void send_consumer(uint16_t data) { (void)data; }
 747:tmk_core/protocol/chibios/usb_main.c **** #endif /* EXTRAKEY_ENABLE */
 748:tmk_core/protocol/chibios/usb_main.c **** 
 749:tmk_core/protocol/chibios/usb_main.c **** /* ---------------------------------------------------------
 750:tmk_core/protocol/chibios/usb_main.c ****  *                   Console functions
 751:tmk_core/protocol/chibios/usb_main.c ****  * ---------------------------------------------------------
 752:tmk_core/protocol/chibios/usb_main.c ****  */
 753:tmk_core/protocol/chibios/usb_main.c **** 
 754:tmk_core/protocol/chibios/usb_main.c **** #ifdef CONSOLE_ENABLE
 755:tmk_core/protocol/chibios/usb_main.c **** 
 756:tmk_core/protocol/chibios/usb_main.c **** int8_t sendchar(uint8_t c) {
 1736              		.loc 1 756 0
 1737              		.cfi_startproc
 1738              		@ args = 0, pretend = 0, frame = 8
 1739              		@ frame_needed = 0, uses_anonymous_args = 0
 1740              	.LVL122:
 1741 0000 07B5     		push	{r0, r1, r2, lr}
 1742              		.cfi_def_cfa_offset 16
 1743              		.cfi_offset 14, -4
 1744              		.loc 1 756 0
 1745 0002 02A9     		add	r1, sp, #8
 757:tmk_core/protocol/chibios/usb_main.c ****     // The previous implmentation had timeouts, but I think it's better to just slow down
 758:tmk_core/protocol/chibios/usb_main.c ****     // and make sure that everything is transferred, rather than dropping stuff
 759:tmk_core/protocol/chibios/usb_main.c ****     return chnWrite(&drivers.console_driver.driver, &c, 1);
 1746              		.loc 1 759 0
 1747 0004 0122     		movs	r2, #1
 756:tmk_core/protocol/chibios/usb_main.c ****     // The previous implmentation had timeouts, but I think it's better to just slow down
 1748              		.loc 1 756 0
 1749 0006 01F8010D 		strb	r0, [r1, #-1]!
 1750              		.loc 1 759 0
 1751 000a 0548     		ldr	r0, .L141
 1752              	.LVL123:
 1753 000c D0F8D430 		ldr	r3, [r0, #212]
 1754 0010 D430     		adds	r0, r0, #212
 1755 0012 1B68     		ldr	r3, [r3]
 1756 0014 9847     		blx	r3
 1757              	.LVL124:
 760:tmk_core/protocol/chibios/usb_main.c **** }
 1758              		.loc 1 760 0
 1759 0016 40B2     		sxtb	r0, r0
 1760 0018 03B0     		add	sp, sp, #12
 1761              		.cfi_def_cfa_offset 4
 1762              		@ sp needed
 1763 001a 5DF804FB 		ldr	pc, [sp], #4
 1764              	.L142:
 1765 001e 00BF     		.align	2
 1766              	.L141:
 1767 0020 00000000 		.word	.LANCHOR2
 1768              		.cfi_endproc
 1769              	.LFE296:
 1771              		.section	.text.console_task,"ax",%progbits
 1772              		.align	1
 1773              		.global	console_task
 1774              		.syntax unified
 1775              		.thumb
 1776              		.thumb_func
 1777              		.fpu softvfp
 1779              	console_task:
 1780              	.LFB298:
 761:tmk_core/protocol/chibios/usb_main.c **** 
 762:tmk_core/protocol/chibios/usb_main.c **** // Just a dummy function for now, this could be exposed as a weak function
 763:tmk_core/protocol/chibios/usb_main.c **** // Or connected to the actual QMK console
 764:tmk_core/protocol/chibios/usb_main.c **** static void console_receive(uint8_t *data, uint8_t length) {
 765:tmk_core/protocol/chibios/usb_main.c ****     (void)data;
 766:tmk_core/protocol/chibios/usb_main.c ****     (void)length;
 767:tmk_core/protocol/chibios/usb_main.c **** }
 768:tmk_core/protocol/chibios/usb_main.c **** 
 769:tmk_core/protocol/chibios/usb_main.c **** void console_task(void) {
 1781              		.loc 1 769 0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 32
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
 1785              	.LVL125:
 1786 0000 10B5     		push	{r4, lr}
 1787              		.cfi_def_cfa_offset 8
 1788              		.cfi_offset 4, -8
 1789              		.cfi_offset 14, -4
 1790              	.LBB746:
 770:tmk_core/protocol/chibios/usb_main.c ****     uint8_t buffer[CONSOLE_EPSIZE];
 771:tmk_core/protocol/chibios/usb_main.c ****     size_t  size = 0;
 772:tmk_core/protocol/chibios/usb_main.c ****     do {
 773:tmk_core/protocol/chibios/usb_main.c ****         size_t size = chnReadTimeout(&drivers.console_driver.driver, buffer, sizeof(buffer), TIME_I
 1791              		.loc 1 773 0
 1792 0002 0648     		ldr	r0, .L144
 1793 0004 D0F8D430 		ldr	r3, [r0, #212]
 1794              	.LBE746:
 769:tmk_core/protocol/chibios/usb_main.c ****     uint8_t buffer[CONSOLE_EPSIZE];
 1795              		.loc 1 769 0
 1796 0008 88B0     		sub	sp, sp, #32
 1797              		.cfi_def_cfa_offset 40
 1798              	.LBB747:
 1799              		.loc 1 773 0
 1800 000a DC69     		ldr	r4, [r3, #28]
 1801 000c 2022     		movs	r2, #32
 1802 000e 0023     		movs	r3, #0
 1803 0010 6946     		mov	r1, sp
 1804 0012 D430     		adds	r0, r0, #212
 1805 0014 A047     		blx	r4
 1806              	.LVL126:
 1807              	.LBE747:
 774:tmk_core/protocol/chibios/usb_main.c ****         if (size > 0) {
 775:tmk_core/protocol/chibios/usb_main.c ****             console_receive(buffer, size);
 776:tmk_core/protocol/chibios/usb_main.c ****         }
 777:tmk_core/protocol/chibios/usb_main.c ****     } while (size > 0);
 778:tmk_core/protocol/chibios/usb_main.c **** }
 1808              		.loc 1 778 0
 1809 0016 08B0     		add	sp, sp, #32
 1810              		.cfi_def_cfa_offset 8
 1811              		@ sp needed
 1812 0018 10BD     		pop	{r4, pc}
 1813              	.L145:
 1814 001a 00BF     		.align	2
 1815              	.L144:
 1816 001c 00000000 		.word	.LANCHOR2
 1817              		.cfi_endproc
 1818              	.LFE298:
 1820              		.section	.text.sendchar_pf,"ax",%progbits
 1821              		.align	1
 1822              		.global	sendchar_pf
 1823              		.syntax unified
 1824              		.thumb
 1825              		.thumb_func
 1826              		.fpu softvfp
 1828              	sendchar_pf:
 1829              	.LFB299:
 779:tmk_core/protocol/chibios/usb_main.c **** 
 780:tmk_core/protocol/chibios/usb_main.c **** #else  /* CONSOLE_ENABLE */
 781:tmk_core/protocol/chibios/usb_main.c **** int8_t sendchar(uint8_t c) {
 782:tmk_core/protocol/chibios/usb_main.c ****     (void)c;
 783:tmk_core/protocol/chibios/usb_main.c ****     return 0;
 784:tmk_core/protocol/chibios/usb_main.c **** }
 785:tmk_core/protocol/chibios/usb_main.c **** #endif /* CONSOLE_ENABLE */
 786:tmk_core/protocol/chibios/usb_main.c **** 
 787:tmk_core/protocol/chibios/usb_main.c **** void sendchar_pf(void *p, char c) {
 1830              		.loc 1 787 0
 1831              		.cfi_startproc
 1832              		@ args = 0, pretend = 0, frame = 0
 1833              		@ frame_needed = 0, uses_anonymous_args = 0
 1834              		@ link register save eliminated.
 1835              	.LVL127:
 788:tmk_core/protocol/chibios/usb_main.c ****     (void)p;
 789:tmk_core/protocol/chibios/usb_main.c ****     sendchar((uint8_t)c);
 1836              		.loc 1 789 0
 1837 0000 0846     		mov	r0, r1
 1838              	.LVL128:
 1839 0002 FFF7FEBF 		b	sendchar
 1840              	.LVL129:
 1841              		.cfi_endproc
 1842              	.LFE299:
 1844              		.global	extra_report_blank
 1845              		.global	mouse_report_blank
 1846              		.global	keyboard_report_sent
 1847              		.global	keyboard_idle_count
 1848              		.global	keyboard_led_stats
 1849              		.global	keyboard_protocol
 1850              		.global	keyboard_idle
 1851              		.section	.bss.__compound_literal.0,"aw",%nobits
 1854              	__compound_literal.0:
 1855 0000 00000000 		.space	144
 1855      00000000 
 1855      00000000 
 1855      00000000 
 1855      00000000 
 1856              		.section	.bss.__compound_literal.1,"aw",%nobits
 1859              	__compound_literal.1:
 1860 0000 00000000 		.space	144
 1860      00000000 
 1860      00000000 
 1860      00000000 
 1860      00000000 
 1861              		.section	.bss.desc.9042,"aw",%nobits
 1862              		.align	2
 1863              		.set	.LANCHOR3,. + 0
 1866              	desc.9042:
 1867 0000 00000000 		.space	8
 1867      00000000 
 1868              		.section	.bss.extra_report_blank,"aw",%nobits
 1871              	extra_report_blank:
 1872 0000 000000   		.space	3
 1873              		.section	.bss.kbd_ep_state,"aw",%nobits
 1874              		.align	2
 1877              	kbd_ep_state:
 1878 0000 00000000 		.space	20
 1878      00000000 
 1878      00000000 
 1878      00000000 
 1878      00000000 
 1879              		.section	.bss.keyboard_idle,"aw",%nobits
 1880              		.align	1
 1881              		.set	.LANCHOR7,. + 0
 1884              	keyboard_idle:
 1885 0000 00       		.space	1
 1886              		.section	.bss.keyboard_idle_count,"aw",%nobits
 1887              		.align	1
 1890              	keyboard_idle_count:
 1891 0000 0000     		.space	2
 1892              		.section	.bss.keyboard_idle_timer,"aw",%nobits
 1893              		.align	2
 1894              		.set	.LANCHOR6,. + 0
 1897              	keyboard_idle_timer:
 1898 0000 00000000 		.space	20
 1898      00000000 
 1898      00000000 
 1898      00000000 
 1898      00000000 
 1899              		.section	.bss.keyboard_led_stats,"aw",%nobits
 1900              		.align	1
 1901              		.set	.LANCHOR1,. + 0
 1904              	keyboard_led_stats:
 1905 0000 0000     		.space	2
 1906              		.section	.bss.keyboard_report_sent,"aw",%nobits
 1907              		.set	.LANCHOR9,. + 0
 1910              	keyboard_report_sent:
 1911 0000 00000000 		.space	32
 1911      00000000 
 1911      00000000 
 1911      00000000 
 1911      00000000 
 1912              		.section	.bss.mouse_report_blank,"aw",%nobits
 1915              	mouse_report_blank:
 1916 0000 00000000 		.space	6
 1916      0000
 1917              		.section	.bss.set_report_buf,"aw",%nobits
 1918              		.align	1
 1919              		.set	.LANCHOR0,. + 0
 1922              	set_report_buf:
 1923 0000 0000     		.space	2
 1924              		.section	.bss.shared_ep_state,"aw",%nobits
 1925              		.align	2
 1928              	shared_ep_state:
 1929 0000 00000000 		.space	20
 1929      00000000 
 1929      00000000 
 1929      00000000 
 1929      00000000 
 1930              		.section	.data.drivers,"aw",%progbits
 1931              		.align	2
 1932              		.set	.LANCHOR2,. + 0
 1935              	drivers:
 1936 0000 04000000 		.word	4
 1937 0004 04000000 		.word	4
 1938 0008 00000000 		.space	60
 1938      00000000 
 1938      00000000 
 1938      00000000 
 1938      00000000 
 1939 0044 03000000 		.word	3
 1940 0048 00000000 		.word	0
 1941 004c 00000000 		.word	qmkusbDataTransmitted
 1942 0050 00000000 		.word	0
 1943 0054 2000     		.short	32
 1944 0056 0000     		.short	0
 1945 0058 00000000 		.word	0
 1946 005c 00000000 		.word	0
 1947 0060 0200     		.short	2
 1948 0062 0000     		.space	2
 1949 0064 00000000 		.word	0
 1950 0068 03000000 		.word	3
 1951 006c 00000000 		.word	0
 1952 0070 00000000 		.word	0
 1953 0074 00000000 		.word	qmkusbDataReceived
 1954 0078 0000     		.short	0
 1955 007a 2000     		.short	32
 1956 007c 00000000 		.word	0
 1957 0080 00000000 		.word	0
 1958 0084 0200     		.short	2
 1959 0086 0000     		.space	2
 1960 0088 00000000 		.word	0
 1961 008c 03000000 		.word	3
 1962 0090 00000000 		.word	0
 1963 0094 00000000 		.word	qmkusbInterruptTransmitted
 1964 0098 00000000 		.word	0
 1965 009c 0800     		.short	8
 1966 009e 0000     		.short	0
 1967 00a0 00000000 		.word	0
 1968 00a4 00000000 		.word	0
 1969 00a8 0200     		.short	2
 1970 00aa 0000     		.space	2
 1971 00ac 00000000 		.word	0
 1972 00b0 00000000 		.word	USBD1
 1973 00b4 03       		.byte	3
 1974 00b5 04       		.byte	4
 1975 00b6 00       		.byte	0
 1976 00b7 00       		.space	1
 1977 00b8 04000000 		.word	4
 1978 00bc 04000000 		.word	4
 1979 00c0 20000000 		.word	32
 1980 00c4 20000000 		.word	32
 1981 00c8 01       		.byte	1
 1982 00c9 000000   		.space	3
 1983 00cc 00000000 		.word	__compound_literal.0
 1984 00d0 00000000 		.word	__compound_literal.1
 1985 00d4 00000000 		.space	128
 1985      00000000 
 1985      00000000 
 1985      00000000 
 1985      00000000 
 1986              		.section	.data.keyboard_protocol,"aw",%progbits
 1987              		.align	1
 1988              		.set	.LANCHOR8,. + 0
 1991              	keyboard_protocol:
 1992 0000 01       		.byte	1
 1993              		.section	.rodata.kbd_ep_config,"a",%progbits
 1994              		.align	2
 1995              		.set	.LANCHOR4,. + 0
 1998              	kbd_ep_config:
 1999 0000 03000000 		.word	3
 2000 0004 00000000 		.word	0
 2001 0008 00000000 		.word	kbd_in_cb
 2002 000c 00000000 		.word	0
 2003 0010 0800     		.short	8
 2004 0012 0000     		.short	0
 2005 0014 00000000 		.word	kbd_ep_state
 2006 0018 00000000 		.word	0
 2007 001c 0200     		.short	2
 2008 001e 0000     		.space	2
 2009 0020 00000000 		.word	0
 2010              		.section	.rodata.shared_ep_config,"a",%progbits
 2011              		.align	2
 2012              		.set	.LANCHOR5,. + 0
 2015              	shared_ep_config:
 2016 0000 03000000 		.word	3
 2017 0004 00000000 		.word	0
 2018 0008 00000000 		.word	shared_in_cb
 2019 000c 00000000 		.word	0
 2020 0010 2000     		.short	32
 2021 0012 0000     		.short	0
 2022 0014 00000000 		.word	shared_ep_state
 2023 0018 00000000 		.word	0
 2024 001c 0200     		.short	2
 2025 001e 0000     		.space	2
 2026 0020 00000000 		.word	0
 2027              		.section	.rodata.usbcfg,"a",%progbits
 2028              		.align	2
 2029              		.set	.LANCHOR10,. + 0
 2032              	usbcfg:
 2033 0000 00000000 		.word	usb_event_cb
 2034 0004 00000000 		.word	usb_get_descriptor_cb
 2035 0008 00000000 		.word	usb_request_hook_cb
 2036 000c 00000000 		.word	usb_sof_cb
 2037              		.text
 2038              	.Letext0:
 2039              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 2040              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 2041              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 2042              		.file 8 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 2043              		.file 9 "./lib/chibios/os/rt/include/chsystypes.h"
 2044              		.file 10 "./lib/chibios/os/rt/include/chschd.h"
 2045              		.file 11 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 2046              		.file 12 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 2047              		.file 13 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/stm32f303xc.h"
 2048              		.file 14 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 2049              		.file 15 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 2050              		.file 16 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 2051              		.file 17 "./lib/chibios/os/rt/include/chtm.h"
 2052              		.file 18 "./lib/chibios/os/rt/include/chsem.h"
 2053              		.file 19 "./lib/chibios/os/rt/include/chmtx.h"
 2054              		.file 20 "./lib/chibios/os/rt/include/chsys.h"
 2055              		.file 21 "./lib/chibios/os/rt/include/chregistry.h"
 2056              		.file 22 "./lib/chibios/os/rt/include/chevents.h"
 2057              		.file 23 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 2058              		.file 24 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 2059              		.file 25 "./lib/chibios/os/hal/include/hal_buffers.h"
 2060              		.file 26 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 2061              		.file 27 "./lib/chibios/os/hal/include/hal_dac.h"
 2062              		.file 28 "./lib/chibios/os/hal/ports/STM32/LLD/DACv1/hal_dac_lld.h"
 2063              		.file 29 "./lib/chibios/os/hal/include/hal_gpt.h"
 2064              		.file 30 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_gpt_lld.h"
 2065              		.file 31 "./lib/chibios/os/hal/include/hal_i2c.h"
 2066              		.file 32 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 2067              		.file 33 "./lib/chibios/os/hal/include/hal_pwm.h"
 2068              		.file 34 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 2069              		.file 35 "./lib/chibios/os/hal/include/hal_usb.h"
 2070              		.file 36 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 2071              		.file 37 "tmk_core/protocol/chibios/usb_main.h"
 2072              		.file 38 "tmk_core/protocol/usb_descriptor.h"
 2073              		.file 39 "tmk_core/common/report.h"
 2074              		.file 40 "tmk_core/common/host.h"
 2075              		.file 41 "tmk_core/common/debug.h"
 2076              		.file 42 "tmk_core/protocol/chibios/usb_driver.h"
 2077              		.file 43 "quantum/keycode_config.h"
 2078              		.file 44 "./lib/chibios/os/rt/include/chthreads.h"
 2079              		.file 45 "tmk_core/common/suspend.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_main.c
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:16     .text.set_led_transfer_cb:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:22     .text.set_led_transfer_cb:0000000000000000 set_led_transfer_cb
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:46     .text.set_led_transfer_cb:0000000000000014 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:52     .text.kbd_in_cb:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:59     .text.kbd_in_cb:0000000000000000 kbd_in_cb
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:73     .text.usb_sof_cb:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:79     .text.usb_sof_cb:0000000000000000 usb_sof_cb
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:145    .text.usb_sof_cb:0000000000000018 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:150    .text.usb_get_descriptor_cb:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:156    .text.usb_get_descriptor_cb:0000000000000000 usb_get_descriptor_cb
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:200    .text.usb_get_descriptor_cb:0000000000000028 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:205    .text.usb_event_cb:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:211    .text.usb_event_cb:0000000000000000 usb_event_cb
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:231    .text.usb_event_cb:000000000000000c $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:237    .text.usb_event_cb:0000000000000012 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:423    .text.usb_event_cb:0000000000000090 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:431    .text.chVTSetI.constprop.6:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:437    .text.chVTSetI.constprop.6:0000000000000000 chVTSetI.constprop.6
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:492    .text.chVTSetI.constprop.6:0000000000000020 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:504    .text.keyboard_idle_timer_cb:0000000000000000 keyboard_idle_timer_cb
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:498    .text.keyboard_idle_timer_cb:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:616    .text.keyboard_idle_timer_cb:000000000000005c $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:627    .text.usb_request_hook_cb:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:633    .text.usb_request_hook_cb:0000000000000000 usb_request_hook_cb
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:915    .text.usb_request_hook_cb:0000000000000144 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:928    .text.shared_in_cb:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:935    .text.shared_in_cb:0000000000000000 shared_in_cb
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:946    .text.init_usb_driver:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:953    .text.init_usb_driver:0000000000000000 init_usb_driver
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1047   .text.init_usb_driver:000000000000006c $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1055   .text.kbd_sof_cb:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1062   .text.kbd_sof_cb:0000000000000000 kbd_sof_cb
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1076   .text.keyboard_leds:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1083   .text.keyboard_leds:0000000000000000 keyboard_leds
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1097   .text.keyboard_leds:0000000000000008 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1102   .text.send_keyboard:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1109   .text.send_keyboard:0000000000000000 send_keyboard
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1342   .text.send_keyboard:000000000000008c $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1351   .text.send_mouse:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1358   .text.send_mouse:0000000000000000 send_mouse
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1466   .text.send_mouse:0000000000000040 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1471   .text.send_system:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1478   .text.send_system:0000000000000000 send_system
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1591   .text.send_system:0000000000000034 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1600   .text.send_consumer:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1607   .text.send_consumer:0000000000000000 send_consumer
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1718   .text.send_consumer:0000000000000034 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1727   .text.sendchar:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1734   .text.sendchar:0000000000000000 sendchar
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1767   .text.sendchar:0000000000000020 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1772   .text.console_task:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1779   .text.console_task:0000000000000000 console_task
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1816   .text.console_task:000000000000001c $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1821   .text.sendchar_pf:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1828   .text.sendchar_pf:0000000000000000 sendchar_pf
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1871   .bss.extra_report_blank:0000000000000000 extra_report_blank
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1915   .bss.mouse_report_blank:0000000000000000 mouse_report_blank
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1910   .bss.keyboard_report_sent:0000000000000000 keyboard_report_sent
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1890   .bss.keyboard_idle_count:0000000000000000 keyboard_idle_count
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1904   .bss.keyboard_led_stats:0000000000000000 keyboard_led_stats
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1991   .data.keyboard_protocol:0000000000000000 keyboard_protocol
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1884   .bss.keyboard_idle:0000000000000000 keyboard_idle
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1854   .bss.__compound_literal.0:0000000000000000 __compound_literal.0
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1855   .bss.__compound_literal.0:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1859   .bss.__compound_literal.1:0000000000000000 __compound_literal.1
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1860   .bss.__compound_literal.1:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1862   .bss.desc.9042:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1866   .bss.desc.9042:0000000000000000 desc.9042
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1872   .bss.extra_report_blank:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1874   .bss.kbd_ep_state:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1877   .bss.kbd_ep_state:0000000000000000 kbd_ep_state
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1880   .bss.keyboard_idle:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1887   .bss.keyboard_idle_count:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1893   .bss.keyboard_idle_timer:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1897   .bss.keyboard_idle_timer:0000000000000000 keyboard_idle_timer
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1900   .bss.keyboard_led_stats:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1911   .bss.keyboard_report_sent:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1916   .bss.mouse_report_blank:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1918   .bss.set_report_buf:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1922   .bss.set_report_buf:0000000000000000 set_report_buf
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1925   .bss.shared_ep_state:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1928   .bss.shared_ep_state:0000000000000000 shared_ep_state
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1931   .data.drivers:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1935   .data.drivers:0000000000000000 drivers
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1987   .data.keyboard_protocol:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1994   .rodata.kbd_ep_config:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:1998   .rodata.kbd_ep_config:0000000000000000 kbd_ep_config
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:2011   .rodata.shared_ep_config:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:2015   .rodata.shared_ep_config:0000000000000000 shared_ep_config
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:2028   .rodata.usbcfg:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccBR4ezT.s:2032   .rodata.usbcfg:0000000000000000 usbcfg

UNDEFINED SYMBOLS
qmkusbSOFHookI
get_usb_descriptor
usbInitEndpointI
qmkusbConfigureHookI
qmkusbSuspendHookI
qmkusbWakeupHookI
suspend_wakeup_init
chVTDoResetI
chVTDoSetI
usbStartTransmitI
keymap_config
qmkusbRequestsHook
qmkusbObjectInit
qmkusbStart
_pal_lld_setgroupmode
chThdSleep
usbStart
chThdSuspendS
USBD1
chThdSuspendTimeoutS
qmkusbDataTransmitted
qmkusbDataReceived
qmkusbInterruptTransmitted
