   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"usb_descriptor.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.get_usb_descriptor,"ax",%progbits
  16              		.align	1
  17              		.global	get_usb_descriptor
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	get_usb_descriptor:
  24              	.LFB279:
  25              		.file 1 "tmk_core/protocol/usb_descriptor.c"
   1:tmk_core/protocol/usb_descriptor.c **** /*
   2:tmk_core/protocol/usb_descriptor.c ****  * Copyright 2012 Jun Wako <wakojun@gmail.com>
   3:tmk_core/protocol/usb_descriptor.c ****  * This file is based on:
   4:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/KeyboardMouse
   5:tmk_core/protocol/usb_descriptor.c ****  *     LUFA-120219/Demos/Device/Lowlevel/GenericHID
   6:tmk_core/protocol/usb_descriptor.c ****  */
   7:tmk_core/protocol/usb_descriptor.c **** 
   8:tmk_core/protocol/usb_descriptor.c **** /*
   9:tmk_core/protocol/usb_descriptor.c ****                          LUFA Library
  10:tmk_core/protocol/usb_descriptor.c ****          Copyright (C) Dean Camera, 2012.
  11:tmk_core/protocol/usb_descriptor.c **** 
  12:tmk_core/protocol/usb_descriptor.c ****     dean [at] fourwalledcubicle [dot] com
  13:tmk_core/protocol/usb_descriptor.c ****                      www.lufa-lib.org
  14:tmk_core/protocol/usb_descriptor.c **** */
  15:tmk_core/protocol/usb_descriptor.c **** 
  16:tmk_core/protocol/usb_descriptor.c **** /*
  17:tmk_core/protocol/usb_descriptor.c ****     Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  18:tmk_core/protocol/usb_descriptor.c ****     Copyright 2010  Denver Gingerich (denver [at] ossguy [dot] com)
  19:tmk_core/protocol/usb_descriptor.c **** 
  20:tmk_core/protocol/usb_descriptor.c ****     Permission to use, copy, modify, distribute, and sell this
  21:tmk_core/protocol/usb_descriptor.c ****     software and its documentation for any purpose is hereby granted
  22:tmk_core/protocol/usb_descriptor.c ****     without fee, provided that the above copyright notice appear in
  23:tmk_core/protocol/usb_descriptor.c ****     all copies and that both that the copyright notice and this
  24:tmk_core/protocol/usb_descriptor.c ****     permission notice and warranty disclaimer appear in supporting
  25:tmk_core/protocol/usb_descriptor.c ****     documentation, and that the name of the author not be used in
  26:tmk_core/protocol/usb_descriptor.c ****     advertising or publicity pertaining to distribution of the
  27:tmk_core/protocol/usb_descriptor.c ****     software without specific, written prior permission.
  28:tmk_core/protocol/usb_descriptor.c **** 
  29:tmk_core/protocol/usb_descriptor.c ****     The author disclaim all warranties with regard to this
  30:tmk_core/protocol/usb_descriptor.c ****     software, including all implied warranties of merchantability
  31:tmk_core/protocol/usb_descriptor.c ****     and fitness.  In no event shall the author be liable for any
  32:tmk_core/protocol/usb_descriptor.c ****     special, indirect or consequential damages or any damages
  33:tmk_core/protocol/usb_descriptor.c ****     whatsoever resulting from loss of use, data or profits, whether
  34:tmk_core/protocol/usb_descriptor.c ****     in an action of contract, negligence or other tortious action,
  35:tmk_core/protocol/usb_descriptor.c ****     arising out of or in connection with the use or performance of
  36:tmk_core/protocol/usb_descriptor.c ****     this software.
  37:tmk_core/protocol/usb_descriptor.c **** */
  38:tmk_core/protocol/usb_descriptor.c **** 
  39:tmk_core/protocol/usb_descriptor.c **** #include "util.h"
  40:tmk_core/protocol/usb_descriptor.c **** #include "report.h"
  41:tmk_core/protocol/usb_descriptor.c **** #include "usb_descriptor.h"
  42:tmk_core/protocol/usb_descriptor.c **** 
  43:tmk_core/protocol/usb_descriptor.c **** /*
  44:tmk_core/protocol/usb_descriptor.c ****  * HID report descriptors
  45:tmk_core/protocol/usb_descriptor.c ****  */
  46:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  47:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
  48:tmk_core/protocol/usb_descriptor.c **** #    define SHARED_REPORT_STARTED
  49:tmk_core/protocol/usb_descriptor.c **** #else
  50:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM KeyboardReport[] = {
  51:tmk_core/protocol/usb_descriptor.c **** #endif
  52:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),  // Generic Desktop
  53:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),       // Keyboard
  54:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),  // Application
  55:tmk_core/protocol/usb_descriptor.c **** #ifdef KEYBOARD_SHARED_EP
  56:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_ID(8, REPORT_ID_KEYBOARD),
  57:tmk_core/protocol/usb_descriptor.c **** #endif
  58:tmk_core/protocol/usb_descriptor.c ****     // Modifiers (8 bits)
  59:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x07),     // Keyboard/Keypad
  60:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0xE0),  // Keyboard Left Control
  61:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0xE7),  // Keyboard Right GUI
  62:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
  63:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 0x01),
  64:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x08),
  65:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
  66:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
  67:tmk_core/protocol/usb_descriptor.c ****     // Reserved (1 byte)
  68:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
  69:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
  70:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_CONSTANT),
  71:tmk_core/protocol/usb_descriptor.c ****     // Keycodes (6 bytes)
  72:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x07),  // Keyboard/Keypad
  73:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0x00),
  74:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0xFF),
  75:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
  76:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
  77:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x06),
  78:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
  79:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
  80:tmk_core/protocol/usb_descriptor.c **** 
  81:tmk_core/protocol/usb_descriptor.c ****     // Status LEDs (5 bits)
  82:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x08),     // LED
  83:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0x01),  // Num Lock
  84:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0x05),  // Kana
  85:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x05),
  86:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
  87:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE),
  88:tmk_core/protocol/usb_descriptor.c ****     // LED padding (3 bits)
  89:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
  90:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x03),
  91:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
  92:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
  93:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
  94:tmk_core/protocol/usb_descriptor.c **** };
  95:tmk_core/protocol/usb_descriptor.c **** #endif
  96:tmk_core/protocol/usb_descriptor.c **** 
  97:tmk_core/protocol/usb_descriptor.c **** #ifdef MOUSE_ENABLE
  98:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
  99:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] = {
 100:tmk_core/protocol/usb_descriptor.c **** #    elif !defined(SHARED_REPORT_STARTED)
 101:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 102:tmk_core/protocol/usb_descriptor.c **** #        define SHARED_REPORT_STARTED
 103:tmk_core/protocol/usb_descriptor.c **** #    endif
 104:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),  // Generic Desktop
 105:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x02),       // Mouse
 106:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),  // Application
 107:tmk_core/protocol/usb_descriptor.c **** #    ifdef MOUSE_SHARED_EP
 108:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_ID(8, REPORT_ID_MOUSE),
 109:tmk_core/protocol/usb_descriptor.c **** #    endif
 110:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x01),       // Pointer
 111:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x00),  // Physical
 112:tmk_core/protocol/usb_descriptor.c ****                                  // Buttons (5 bits)
 113:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x09),     // Button
 114:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0x01),  // Button 1
 115:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0x05),  // Button 5
 116:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 117:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 118:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x05),
 119:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
 120:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 121:tmk_core/protocol/usb_descriptor.c ****     // Button padding (3 bits)
 122:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
 123:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x03),
 124:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_CONSTANT),
 125:tmk_core/protocol/usb_descriptor.c **** 
 126:tmk_core/protocol/usb_descriptor.c ****     // X/Y position (2 bytes)
 127:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),  // Generic Desktop
 128:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x30),       // X
 129:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x31),       // Y
 130:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, -127),
 131:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 127),
 132:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x02),
 133:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 134:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 135:tmk_core/protocol/usb_descriptor.c **** 
 136:tmk_core/protocol/usb_descriptor.c ****     // Vertical wheel (1 byte)
 137:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x38),  // Wheel
 138:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, -127),
 139:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 127),
 140:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
 141:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 142:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 143:tmk_core/protocol/usb_descriptor.c ****     // Horizontal wheel (1 byte)
 144:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C),  // Consumer
 145:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(16, 0x0238),    // AC Pan
 146:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, -127),
 147:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 127),
 148:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
 149:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 150:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
 151:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 152:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 153:tmk_core/protocol/usb_descriptor.c **** #    ifndef MOUSE_SHARED_EP
 154:tmk_core/protocol/usb_descriptor.c **** };
 155:tmk_core/protocol/usb_descriptor.c **** #    endif
 156:tmk_core/protocol/usb_descriptor.c **** #endif
 157:tmk_core/protocol/usb_descriptor.c **** 
 158:tmk_core/protocol/usb_descriptor.c **** #if defined(SHARED_EP_ENABLE) && !defined(SHARED_REPORT_STARTED)
 159:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 160:tmk_core/protocol/usb_descriptor.c **** #endif
 161:tmk_core/protocol/usb_descriptor.c **** 
 162:tmk_core/protocol/usb_descriptor.c **** #ifdef EXTRAKEY_ENABLE
 163:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),  // Generic Desktop
 164:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x80),       // System Control
 165:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),  // Application
 166:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_ID(8, REPORT_ID_SYSTEM),
 167:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(16, 0x0081),  // System Power Down
 168:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(16, 0x0083),  // System Wake Up
 169:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 170:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x0003),
 171:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 1),
 172:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 16),
 173:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 174:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 175:tmk_core/protocol/usb_descriptor.c **** 
 176:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x0C),  // Consumer
 177:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x01),       // Consumer Control
 178:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),  // Application
 179:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_ID(8, REPORT_ID_CONSUMER),
 180:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(16, 0x0001),  // Consumer Control
 181:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(16, 0x029C),  // AC Distribute Vertically
 182:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(16, 0x0001),
 183:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x029C),
 184:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 1),
 185:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 16),
 186:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_ARRAY | HID_IOF_ABSOLUTE),
 187:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 188:tmk_core/protocol/usb_descriptor.c **** #endif
 189:tmk_core/protocol/usb_descriptor.c **** 
 190:tmk_core/protocol/usb_descriptor.c **** #ifdef NKRO_ENABLE
 191:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x01),  // Generic Desktop
 192:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x06),       // Keyboard
 193:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),  // Application
 194:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_ID(8, REPORT_ID_NKRO),
 195:tmk_core/protocol/usb_descriptor.c ****     // Modifiers (8 bits)
 196:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x07),     // Keyboard/Keypad
 197:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0xE0),  // Keyboard Left Control
 198:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0xE7),  // Keyboard Right GUI
 199:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 200:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 201:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x08),
 202:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
 203:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 204:tmk_core/protocol/usb_descriptor.c ****     // Keycodes
 205:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x07),  // Keyboard/Keypad
 206:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0x00),
 207:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, KEYBOARD_REPORT_BITS * 8 - 1),
 208:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 209:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(8, 0x01),
 210:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, KEYBOARD_REPORT_BITS * 8),
 211:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
 212:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 213:tmk_core/protocol/usb_descriptor.c **** 
 214:tmk_core/protocol/usb_descriptor.c ****     // Status LEDs (5 bits)
 215:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(8, 0x08),     // LED
 216:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MINIMUM(8, 0x01),  // Num Lock
 217:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_MAXIMUM(8, 0x05),  // Kana
 218:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x05),
 219:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x01),
 220:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE),
 221:tmk_core/protocol/usb_descriptor.c ****     // LED padding (3 bits)
 222:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, 0x01),
 223:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x03),
 224:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_CONSTANT),
 225:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 226:tmk_core/protocol/usb_descriptor.c **** #endif
 227:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 228:tmk_core/protocol/usb_descriptor.c **** };
 229:tmk_core/protocol/usb_descriptor.c **** #endif
 230:tmk_core/protocol/usb_descriptor.c **** 
 231:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 232:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM RawReport[] = {
 233:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF60),  // Vendor Defined
 234:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x61),          // Vendor Defined
 235:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),     // Application
 236:tmk_core/protocol/usb_descriptor.c ****                                  // Data to host
 237:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x62),  // Vendor Defined
 238:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 239:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 240:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 241:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 242:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 243:tmk_core/protocol/usb_descriptor.c ****     // Data from host
 244:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x63),  // Vendor Defined
 245:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 246:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 247:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, RAW_EPSIZE),
 248:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 249:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE),
 250:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 251:tmk_core/protocol/usb_descriptor.c **** };
 252:tmk_core/protocol/usb_descriptor.c **** #endif
 253:tmk_core/protocol/usb_descriptor.c **** 
 254:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 255:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM ConsoleReport[] = {
 256:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE_PAGE(16, 0xFF31),  // Vendor Defined (PJRC Teensy compatible)
 257:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x74),          // Vendor Defined (PJRC Teensy compatible)
 258:tmk_core/protocol/usb_descriptor.c ****     HID_RI_COLLECTION(8, 0x01),     // Application
 259:tmk_core/protocol/usb_descriptor.c ****                                  // Data to host
 260:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x75),  // Vendor Defined
 261:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 262:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 263:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 264:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 265:tmk_core/protocol/usb_descriptor.c ****     HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
 266:tmk_core/protocol/usb_descriptor.c ****     // Data from host
 267:tmk_core/protocol/usb_descriptor.c ****     HID_RI_USAGE(8, 0x76),  // Vendor Defined
 268:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MINIMUM(8, 0x00),
 269:tmk_core/protocol/usb_descriptor.c ****     HID_RI_LOGICAL_MAXIMUM(16, 0x00FF),
 270:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_COUNT(8, CONSOLE_EPSIZE),
 271:tmk_core/protocol/usb_descriptor.c ****     HID_RI_REPORT_SIZE(8, 0x08),
 272:tmk_core/protocol/usb_descriptor.c ****     HID_RI_OUTPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE | HID_IOF_NON_VOLATILE),
 273:tmk_core/protocol/usb_descriptor.c ****     HID_RI_END_COLLECTION(0),
 274:tmk_core/protocol/usb_descriptor.c **** };
 275:tmk_core/protocol/usb_descriptor.c **** #endif
 276:tmk_core/protocol/usb_descriptor.c **** 
 277:tmk_core/protocol/usb_descriptor.c **** /*
 278:tmk_core/protocol/usb_descriptor.c ****  * Device descriptor
 279:tmk_core/protocol/usb_descriptor.c ****  */
 280:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor = {.Header           = {.Size = sizeof(USB_D
 281:tmk_core/protocol/usb_descriptor.c ****                                                           .USBSpecification = VERSION_BCD(1, 1, 0),
 282:tmk_core/protocol/usb_descriptor.c **** #if VIRTSER_ENABLE
 283:tmk_core/protocol/usb_descriptor.c ****                                                           .Class    = USB_CSCP_IADDeviceClass,
 284:tmk_core/protocol/usb_descriptor.c ****                                                           .SubClass = USB_CSCP_IADDeviceSubclass,
 285:tmk_core/protocol/usb_descriptor.c ****                                                           .Protocol = USB_CSCP_IADDeviceProtocol,
 286:tmk_core/protocol/usb_descriptor.c **** #else
 287:tmk_core/protocol/usb_descriptor.c ****                                                               .Class    = USB_CSCP_NoDeviceClass,
 288:tmk_core/protocol/usb_descriptor.c ****                                                               .SubClass = USB_CSCP_NoDeviceSubclass
 289:tmk_core/protocol/usb_descriptor.c ****                                                               .Protocol = USB_CSCP_NoDeviceProtocol
 290:tmk_core/protocol/usb_descriptor.c **** #endif
 291:tmk_core/protocol/usb_descriptor.c ****                                                           .Endpoint0Size = FIXED_CONTROL_ENDPOINT_S
 292:tmk_core/protocol/usb_descriptor.c ****                                                           // Specified in config.h
 293:tmk_core/protocol/usb_descriptor.c ****                                                           .VendorID               = VENDOR_ID,
 294:tmk_core/protocol/usb_descriptor.c ****                                                           .ProductID              = PRODUCT_ID,
 295:tmk_core/protocol/usb_descriptor.c ****                                                           .ReleaseNumber          = DEVICE_VER,
 296:tmk_core/protocol/usb_descriptor.c ****                                                           .ManufacturerStrIndex   = 0x01,
 297:tmk_core/protocol/usb_descriptor.c ****                                                           .ProductStrIndex        = 0x02,
 298:tmk_core/protocol/usb_descriptor.c ****                                                           .SerialNumStrIndex      = 0x03,
 299:tmk_core/protocol/usb_descriptor.c ****                                                           .NumberOfConfigurations = FIXED_NUM_CONFI
 300:tmk_core/protocol/usb_descriptor.c **** 
 301:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_MAX_POWER_CONSUMPTION
 302:tmk_core/protocol/usb_descriptor.c **** #    define USB_MAX_POWER_CONSUMPTION 500
 303:tmk_core/protocol/usb_descriptor.c **** #endif
 304:tmk_core/protocol/usb_descriptor.c **** 
 305:tmk_core/protocol/usb_descriptor.c **** #ifndef USB_POLLING_INTERVAL_MS
 306:tmk_core/protocol/usb_descriptor.c **** #    define USB_POLLING_INTERVAL_MS 10
 307:tmk_core/protocol/usb_descriptor.c **** #endif
 308:tmk_core/protocol/usb_descriptor.c **** 
 309:tmk_core/protocol/usb_descriptor.c **** /*
 310:tmk_core/protocol/usb_descriptor.c ****  * Configuration descriptors
 311:tmk_core/protocol/usb_descriptor.c ****  */
 312:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_Configuration_t PROGMEM
 313:tmk_core/protocol/usb_descriptor.c ****                                      ConfigurationDescriptor =
 314:tmk_core/protocol/usb_descriptor.c ****         {
 315:tmk_core/protocol/usb_descriptor.c ****             .Config = {.Header = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DT
 316:tmk_core/protocol/usb_descriptor.c **** 
 317:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 318:tmk_core/protocol/usb_descriptor.c ****             /*
 319:tmk_core/protocol/usb_descriptor.c ****              * Keyboard
 320:tmk_core/protocol/usb_descriptor.c ****              */
 321:tmk_core/protocol/usb_descriptor.c ****             .Keyboard_Interface  = {.Header           = {.Size = sizeof(USB_Descriptor_Interface_t)
 322:tmk_core/protocol/usb_descriptor.c ****                                    .InterfaceNumber  = KEYBOARD_INTERFACE,
 323:tmk_core/protocol/usb_descriptor.c ****                                    .AlternateSetting = 0x00,
 324:tmk_core/protocol/usb_descriptor.c ****                                    .TotalEndpoints   = 1,
 325:tmk_core/protocol/usb_descriptor.c ****                                    .Class            = HID_CSCP_HIDClass,
 326:tmk_core/protocol/usb_descriptor.c ****                                    .SubClass         = HID_CSCP_BootSubclass,
 327:tmk_core/protocol/usb_descriptor.c ****                                    .Protocol         = HID_CSCP_KeyboardBootProtocol,
 328:tmk_core/protocol/usb_descriptor.c **** 
 329:tmk_core/protocol/usb_descriptor.c ****                                    .InterfaceStrIndex = NO_DESCRIPTOR},
 330:tmk_core/protocol/usb_descriptor.c ****             .Keyboard_HID        = {.Header = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HI
 331:tmk_core/protocol/usb_descriptor.c ****             .Keyboard_INEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 332:tmk_core/protocol/usb_descriptor.c **** #endif
 333:tmk_core/protocol/usb_descriptor.c **** 
 334:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 335:tmk_core/protocol/usb_descriptor.c ****             /*
 336:tmk_core/protocol/usb_descriptor.c ****              * Mouse
 337:tmk_core/protocol/usb_descriptor.c ****              */
 338:tmk_core/protocol/usb_descriptor.c ****             .Mouse_Interface  = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTY
 339:tmk_core/protocol/usb_descriptor.c ****             .Mouse_HID        = {.Header = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_D
 340:tmk_core/protocol/usb_descriptor.c ****             .Mouse_INEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYP
 341:tmk_core/protocol/usb_descriptor.c **** #endif
 342:tmk_core/protocol/usb_descriptor.c **** 
 343:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 344:tmk_core/protocol/usb_descriptor.c ****             /*
 345:tmk_core/protocol/usb_descriptor.c ****              * Shared
 346:tmk_core/protocol/usb_descriptor.c ****              */
 347:tmk_core/protocol/usb_descriptor.c ****             .Shared_Interface  = {.Header           = {.Size = sizeof(USB_Descriptor_Interface_t), 
 348:tmk_core/protocol/usb_descriptor.c ****                                  .InterfaceNumber  = SHARED_INTERFACE,
 349:tmk_core/protocol/usb_descriptor.c ****                                  .AlternateSetting = 0x00,
 350:tmk_core/protocol/usb_descriptor.c ****                                  .TotalEndpoints   = 1,
 351:tmk_core/protocol/usb_descriptor.c ****                                  .Class            = HID_CSCP_HIDClass,
 352:tmk_core/protocol/usb_descriptor.c **** #    ifdef KEYBOARD_SHARED_EP
 353:tmk_core/protocol/usb_descriptor.c ****                                  .SubClass = HID_CSCP_BootSubclass,
 354:tmk_core/protocol/usb_descriptor.c ****                                  .Protocol = HID_CSCP_KeyboardBootProtocol,
 355:tmk_core/protocol/usb_descriptor.c **** #    else
 356:tmk_core/protocol/usb_descriptor.c ****                                  .SubClass = HID_CSCP_NonBootSubclass,
 357:tmk_core/protocol/usb_descriptor.c ****                                  .Protocol = HID_CSCP_NonBootProtocol,
 358:tmk_core/protocol/usb_descriptor.c **** #    endif
 359:tmk_core/protocol/usb_descriptor.c ****                                  .InterfaceStrIndex = NO_DESCRIPTOR},
 360:tmk_core/protocol/usb_descriptor.c ****             .Shared_HID        = {.Header = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_
 361:tmk_core/protocol/usb_descriptor.c ****             .Shared_INEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTY
 362:tmk_core/protocol/usb_descriptor.c **** #endif
 363:tmk_core/protocol/usb_descriptor.c **** 
 364:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 365:tmk_core/protocol/usb_descriptor.c ****             /*
 366:tmk_core/protocol/usb_descriptor.c ****              * Raw HID
 367:tmk_core/protocol/usb_descriptor.c ****              */
 368:tmk_core/protocol/usb_descriptor.c ****             .Raw_Interface   = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYP
 369:tmk_core/protocol/usb_descriptor.c ****             .Raw_HID         = {.Header = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HID_DT
 370:tmk_core/protocol/usb_descriptor.c ****             .Raw_INEndpoint  = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE
 371:tmk_core/protocol/usb_descriptor.c ****             .Raw_OUTEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE
 372:tmk_core/protocol/usb_descriptor.c **** #endif
 373:tmk_core/protocol/usb_descriptor.c **** 
 374:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 375:tmk_core/protocol/usb_descriptor.c ****             /*
 376:tmk_core/protocol/usb_descriptor.c ****              * Console
 377:tmk_core/protocol/usb_descriptor.c ****              */
 378:tmk_core/protocol/usb_descriptor.c ****             .Console_Interface   = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = 
 379:tmk_core/protocol/usb_descriptor.c ****             .Console_HID         = {.Header = {.Size = sizeof(USB_HID_Descriptor_HID_t), .Type = HI
 380:tmk_core/protocol/usb_descriptor.c ****             .Console_INEndpoint  = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 381:tmk_core/protocol/usb_descriptor.c ****             .Console_OUTEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = D
 382:tmk_core/protocol/usb_descriptor.c **** #endif
 383:tmk_core/protocol/usb_descriptor.c **** 
 384:tmk_core/protocol/usb_descriptor.c **** #ifdef MIDI_ENABLE
 385:tmk_core/protocol/usb_descriptor.c ****             /*
 386:tmk_core/protocol/usb_descriptor.c ****              * MIDI
 387:tmk_core/protocol/usb_descriptor.c ****              */
 388:tmk_core/protocol/usb_descriptor.c ****             .Audio_Interface_Association =
 389:tmk_core/protocol/usb_descriptor.c ****                 {
 390:tmk_core/protocol/usb_descriptor.c ****                     .Header              = {.Size = sizeof(USB_Descriptor_Interface_Association_t),
 391:tmk_core/protocol/usb_descriptor.c ****                     .FirstInterfaceIndex = AC_INTERFACE,
 392:tmk_core/protocol/usb_descriptor.c ****                     .TotalInterfaces     = 2,
 393:tmk_core/protocol/usb_descriptor.c ****                     .Class               = AUDIO_CSCP_AudioClass,
 394:tmk_core/protocol/usb_descriptor.c ****                     .SubClass            = AUDIO_CSCP_ControlSubclass,
 395:tmk_core/protocol/usb_descriptor.c ****                     .Protocol            = AUDIO_CSCP_ControlProtocol,
 396:tmk_core/protocol/usb_descriptor.c ****                     .IADStrIndex         = NO_DESCRIPTOR,
 397:tmk_core/protocol/usb_descriptor.c ****                 },
 398:tmk_core/protocol/usb_descriptor.c ****             .Audio_ControlInterface = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Type
 399:tmk_core/protocol/usb_descriptor.c **** 
 400:tmk_core/protocol/usb_descriptor.c ****                                        .InterfaceNumber   = AC_INTERFACE,
 401:tmk_core/protocol/usb_descriptor.c ****                                        .AlternateSetting  = 0,
 402:tmk_core/protocol/usb_descriptor.c ****                                        .TotalEndpoints    = 0,
 403:tmk_core/protocol/usb_descriptor.c ****                                        .Class             = AUDIO_CSCP_AudioClass,
 404:tmk_core/protocol/usb_descriptor.c ****                                        .SubClass          = AUDIO_CSCP_ControlSubclass,
 405:tmk_core/protocol/usb_descriptor.c ****                                        .Protocol          = AUDIO_CSCP_ControlProtocol,
 406:tmk_core/protocol/usb_descriptor.c ****                                        .InterfaceStrIndex = NO_DESCRIPTOR},
 407:tmk_core/protocol/usb_descriptor.c ****             .Audio_ControlInterface_SPC =
 408:tmk_core/protocol/usb_descriptor.c ****                 {
 409:tmk_core/protocol/usb_descriptor.c ****                     .Header          = {.Size = sizeof(USB_Audio_Descriptor_Interface_AC_t), .Type 
 410:tmk_core/protocol/usb_descriptor.c ****                     .Subtype         = AUDIO_DSUBTYPE_CSInterface_Header,
 411:tmk_core/protocol/usb_descriptor.c ****                     .ACSpecification = VERSION_BCD(1, 0, 0),
 412:tmk_core/protocol/usb_descriptor.c ****                     .TotalLength     = sizeof(USB_Audio_Descriptor_Interface_AC_t),
 413:tmk_core/protocol/usb_descriptor.c ****                     .InCollection    = 1,
 414:tmk_core/protocol/usb_descriptor.c ****                     .InterfaceNumber = AS_INTERFACE,
 415:tmk_core/protocol/usb_descriptor.c ****                 },
 416:tmk_core/protocol/usb_descriptor.c ****             .Audio_StreamInterface      = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .
 417:tmk_core/protocol/usb_descriptor.c **** 
 418:tmk_core/protocol/usb_descriptor.c ****                                       .InterfaceNumber   = AS_INTERFACE,
 419:tmk_core/protocol/usb_descriptor.c ****                                       .AlternateSetting  = 0,
 420:tmk_core/protocol/usb_descriptor.c ****                                       .TotalEndpoints    = 2,
 421:tmk_core/protocol/usb_descriptor.c ****                                       .Class             = AUDIO_CSCP_AudioClass,
 422:tmk_core/protocol/usb_descriptor.c ****                                       .SubClass          = AUDIO_CSCP_MIDIStreamingSubclass,
 423:tmk_core/protocol/usb_descriptor.c ****                                       .Protocol          = AUDIO_CSCP_StreamingProtocol,
 424:tmk_core/protocol/usb_descriptor.c ****                                       .InterfaceStrIndex = NO_DESCRIPTOR},
 425:tmk_core/protocol/usb_descriptor.c ****             .Audio_StreamInterface_SPC  = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_AudioInter
 426:tmk_core/protocol/usb_descriptor.c ****             .MIDI_In_Jack_Emb           = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_InputJack_
 427:tmk_core/protocol/usb_descriptor.c ****             .MIDI_In_Jack_Ext           = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_InputJack_
 428:tmk_core/protocol/usb_descriptor.c ****             .MIDI_Out_Jack_Emb          = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_OutputJack
 429:tmk_core/protocol/usb_descriptor.c ****             .MIDI_Out_Jack_Ext          = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_OutputJack
 430:tmk_core/protocol/usb_descriptor.c ****             .MIDI_In_Jack_Endpoint      = {.Endpoint = {.Header = {.Size = sizeof(USB_Audio_Descrip
 431:tmk_core/protocol/usb_descriptor.c **** 
 432:tmk_core/protocol/usb_descriptor.c ****                                       .Refresh            = 0,
 433:tmk_core/protocol/usb_descriptor.c ****                                       .SyncEndpointNumber = 0},
 434:tmk_core/protocol/usb_descriptor.c ****             .MIDI_In_Jack_Endpoint_SPC  = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_Jack_Endpo
 435:tmk_core/protocol/usb_descriptor.c ****             .MIDI_Out_Jack_Endpoint     = {.Endpoint = {.Header = {.Size = sizeof(USB_Audio_Descrip
 436:tmk_core/protocol/usb_descriptor.c **** 
 437:tmk_core/protocol/usb_descriptor.c ****                                        .Refresh            = 0,
 438:tmk_core/protocol/usb_descriptor.c ****                                        .SyncEndpointNumber = 0},
 439:tmk_core/protocol/usb_descriptor.c ****             .MIDI_Out_Jack_Endpoint_SPC = {.Header = {.Size = sizeof(USB_MIDI_Descriptor_Jack_Endpo
 440:tmk_core/protocol/usb_descriptor.c **** #endif
 441:tmk_core/protocol/usb_descriptor.c **** 
 442:tmk_core/protocol/usb_descriptor.c **** #ifdef VIRTSER_ENABLE
 443:tmk_core/protocol/usb_descriptor.c ****             /*
 444:tmk_core/protocol/usb_descriptor.c ****              * Virtual Serial
 445:tmk_core/protocol/usb_descriptor.c ****              */
 446:tmk_core/protocol/usb_descriptor.c ****             .CDC_Interface_Association =
 447:tmk_core/protocol/usb_descriptor.c ****                 {
 448:tmk_core/protocol/usb_descriptor.c ****                     .Header              = {.Size = sizeof(USB_Descriptor_Interface_Association_t),
 449:tmk_core/protocol/usb_descriptor.c ****                     .FirstInterfaceIndex = CCI_INTERFACE,
 450:tmk_core/protocol/usb_descriptor.c ****                     .TotalInterfaces     = 2,
 451:tmk_core/protocol/usb_descriptor.c ****                     .Class               = CDC_CSCP_CDCClass,
 452:tmk_core/protocol/usb_descriptor.c ****                     .SubClass            = CDC_CSCP_ACMSubclass,
 453:tmk_core/protocol/usb_descriptor.c ****                     .Protocol            = CDC_CSCP_ATCommandProtocol,
 454:tmk_core/protocol/usb_descriptor.c ****                     .IADStrIndex         = NO_DESCRIPTOR,
 455:tmk_core/protocol/usb_descriptor.c ****                 },
 456:tmk_core/protocol/usb_descriptor.c ****             .CDC_CCI_Interface = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DT
 457:tmk_core/protocol/usb_descriptor.c ****             .CDC_Functional_Header =
 458:tmk_core/protocol/usb_descriptor.c ****                 {
 459:tmk_core/protocol/usb_descriptor.c ****                     .Header           = {.Size = sizeof(USB_CDC_Descriptor_FunctionalHeader_t), .Ty
 460:tmk_core/protocol/usb_descriptor.c ****                     .Subtype          = 0x00,
 461:tmk_core/protocol/usb_descriptor.c ****                     .CDCSpecification = VERSION_BCD(1, 1, 0),
 462:tmk_core/protocol/usb_descriptor.c ****                 },
 463:tmk_core/protocol/usb_descriptor.c ****             .CDC_Functional_ACM =
 464:tmk_core/protocol/usb_descriptor.c ****                 {
 465:tmk_core/protocol/usb_descriptor.c ****                     .Header       = {.Size = sizeof(USB_CDC_Descriptor_FunctionalACM_t), .Type = CD
 466:tmk_core/protocol/usb_descriptor.c ****                     .Subtype      = 0x02,
 467:tmk_core/protocol/usb_descriptor.c ****                     .Capabilities = 0x02,
 468:tmk_core/protocol/usb_descriptor.c ****                 },
 469:tmk_core/protocol/usb_descriptor.c ****             .CDC_Functional_Union =
 470:tmk_core/protocol/usb_descriptor.c ****                 {
 471:tmk_core/protocol/usb_descriptor.c ****                     .Header                = {.Size = sizeof(USB_CDC_Descriptor_FunctionalUnion_t),
 472:tmk_core/protocol/usb_descriptor.c ****                     .Subtype               = 0x06,
 473:tmk_core/protocol/usb_descriptor.c ****                     .MasterInterfaceNumber = CCI_INTERFACE,
 474:tmk_core/protocol/usb_descriptor.c ****                     .SlaveInterfaceNumber  = CDI_INTERFACE,
 475:tmk_core/protocol/usb_descriptor.c ****                 },
 476:tmk_core/protocol/usb_descriptor.c ****             .CDC_NotificationEndpoint = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Typ
 477:tmk_core/protocol/usb_descriptor.c ****             .CDC_DCI_Interface        = {.Header = {.Size = sizeof(USB_Descriptor_Interface_t), .Ty
 478:tmk_core/protocol/usb_descriptor.c ****             .CDC_DataOutEndpoint      = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Typ
 479:tmk_core/protocol/usb_descriptor.c ****             .CDC_DataInEndpoint       = {.Header = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Typ
 480:tmk_core/protocol/usb_descriptor.c **** #endif
 481:tmk_core/protocol/usb_descriptor.c **** };
 482:tmk_core/protocol/usb_descriptor.c **** 
 483:tmk_core/protocol/usb_descriptor.c **** /*
 484:tmk_core/protocol/usb_descriptor.c ****  * String descriptors
 485:tmk_core/protocol/usb_descriptor.c ****  */
 486:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM LanguageString = {.Header = {.Size = USB_STRING_LEN(1), .Type
 487:tmk_core/protocol/usb_descriptor.c **** 
 488:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString = {.Header        = {.Size = USB_STRING_LE
 489:tmk_core/protocol/usb_descriptor.c ****                                                                        .Type = DTYPE_String},
 490:tmk_core/protocol/usb_descriptor.c ****                                                             .UnicodeString = LSTR(MANUFACTURER)};
 491:tmk_core/protocol/usb_descriptor.c **** 
 492:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM ProductString = {.Header        = {.Size = USB_STRING_LEN(siz
 493:tmk_core/protocol/usb_descriptor.c ****                                                                   .Type = DTYPE_String},
 494:tmk_core/protocol/usb_descriptor.c ****                                                        .UnicodeString = LSTR(PRODUCT)};
 495:tmk_core/protocol/usb_descriptor.c **** 
 496:tmk_core/protocol/usb_descriptor.c **** #ifndef SERIAL_NUMBER
 497:tmk_core/protocol/usb_descriptor.c **** #    define SERIAL_NUMBER 0
 498:tmk_core/protocol/usb_descriptor.c **** #endif
 499:tmk_core/protocol/usb_descriptor.c **** 
 500:tmk_core/protocol/usb_descriptor.c **** const USB_Descriptor_String_t PROGMEM SerialNumberString = {.Header        = {.Size = USB_STRING_LE
 501:tmk_core/protocol/usb_descriptor.c ****                                                                        .Type = DTYPE_String},
 502:tmk_core/protocol/usb_descriptor.c ****                                                             .UnicodeString = LSTR(SERIAL_NUMBER)};
 503:tmk_core/protocol/usb_descriptor.c **** 
 504:tmk_core/protocol/usb_descriptor.c **** /**
 505:tmk_core/protocol/usb_descriptor.c ****  * This function is called by the library when in device mode, and must be overridden (see library 
 506:tmk_core/protocol/usb_descriptor.c ****  * documentation) by the application code so that the address and size of a requested descriptor ca
 507:tmk_core/protocol/usb_descriptor.c ****  * to the USB library. When the device receives a Get Descriptor request on the control endpoint, t
 508:tmk_core/protocol/usb_descriptor.c ****  * is called so that the descriptor details can be passed back and the appropriate descriptor sent 
 509:tmk_core/protocol/usb_descriptor.c ****  * USB host.
 510:tmk_core/protocol/usb_descriptor.c ****  */
 511:tmk_core/protocol/usb_descriptor.c **** uint16_t get_usb_descriptor(const uint16_t wValue, const uint16_t wIndex, const void** const Descri
  26              		.loc 1 511 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 512:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorType  = (wValue >> 8);
 513:tmk_core/protocol/usb_descriptor.c ****     const uint8_t DescriptorIndex = (wValue & 0xFF);
 514:tmk_core/protocol/usb_descriptor.c ****     const void*   Address         = NULL;
 515:tmk_core/protocol/usb_descriptor.c ****     uint16_t      Size            = NO_DESCRIPTOR;
 516:tmk_core/protocol/usb_descriptor.c **** 
 517:tmk_core/protocol/usb_descriptor.c ****     switch (DescriptorType) {
  32              		.loc 1 517 0
  33 0000 030A     		lsrs	r3, r0, #8
  34 0002 032B     		cmp	r3, #3
  35 0004 19D0     		beq	.L3
  36 0006 06D8     		bhi	.L4
  37 0008 012B     		cmp	r3, #1
  38 000a 0FD0     		beq	.L5
  39 000c 022B     		cmp	r3, #2
  40 000e 11D0     		beq	.L6
  41              	.LVL1:
  42              	.L12:
 518:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
 519:tmk_core/protocol/usb_descriptor.c ****             Address = &DeviceDescriptor;
 520:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
 521:tmk_core/protocol/usb_descriptor.c **** 
 522:tmk_core/protocol/usb_descriptor.c ****             break;
 523:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Configuration:
 524:tmk_core/protocol/usb_descriptor.c ****             Address = &ConfigurationDescriptor;
 525:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
 526:tmk_core/protocol/usb_descriptor.c **** 
 527:tmk_core/protocol/usb_descriptor.c ****             break;
 528:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_String:
 529:tmk_core/protocol/usb_descriptor.c ****             switch (DescriptorIndex) {
 530:tmk_core/protocol/usb_descriptor.c ****                 case 0x00:
 531:tmk_core/protocol/usb_descriptor.c ****                     Address = &LanguageString;
 532:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&LanguageString.Header.Size);
 533:tmk_core/protocol/usb_descriptor.c **** 
 534:tmk_core/protocol/usb_descriptor.c ****                     break;
 535:tmk_core/protocol/usb_descriptor.c ****                 case 0x01:
 536:tmk_core/protocol/usb_descriptor.c ****                     Address = &ManufacturerString;
 537:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 538:tmk_core/protocol/usb_descriptor.c **** 
 539:tmk_core/protocol/usb_descriptor.c ****                     break;
 540:tmk_core/protocol/usb_descriptor.c ****                 case 0x02:
 541:tmk_core/protocol/usb_descriptor.c ****                     Address = &ProductString;
 542:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&ProductString.Header.Size);
 543:tmk_core/protocol/usb_descriptor.c **** 
 544:tmk_core/protocol/usb_descriptor.c ****                     break;
 545:tmk_core/protocol/usb_descriptor.c ****                 case 0x03:
 546:tmk_core/protocol/usb_descriptor.c ****                     Address = &SerialNumberString;
 547:tmk_core/protocol/usb_descriptor.c ****                     Size    = pgm_read_byte(&SerialNumberString.Header.Size);
 548:tmk_core/protocol/usb_descriptor.c **** 
 549:tmk_core/protocol/usb_descriptor.c ****                     break;
 550:tmk_core/protocol/usb_descriptor.c ****             }
 551:tmk_core/protocol/usb_descriptor.c **** 
 552:tmk_core/protocol/usb_descriptor.c ****             break;
 553:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_HID:
 554:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
 555:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 556:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
 557:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Keyboard_HID;
 558:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 559:tmk_core/protocol/usb_descriptor.c ****                     break;
 560:tmk_core/protocol/usb_descriptor.c **** #endif
 561:tmk_core/protocol/usb_descriptor.c **** 
 562:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 563:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
 564:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Mouse_HID;
 565:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 566:tmk_core/protocol/usb_descriptor.c **** 
 567:tmk_core/protocol/usb_descriptor.c ****                     break;
 568:tmk_core/protocol/usb_descriptor.c **** #endif
 569:tmk_core/protocol/usb_descriptor.c **** 
 570:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 571:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
 572:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Shared_HID;
 573:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 574:tmk_core/protocol/usb_descriptor.c **** 
 575:tmk_core/protocol/usb_descriptor.c ****                     break;
 576:tmk_core/protocol/usb_descriptor.c **** #endif
 577:tmk_core/protocol/usb_descriptor.c **** 
 578:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 579:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
 580:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Raw_HID;
 581:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 582:tmk_core/protocol/usb_descriptor.c **** 
 583:tmk_core/protocol/usb_descriptor.c ****                     break;
 584:tmk_core/protocol/usb_descriptor.c **** #endif
 585:tmk_core/protocol/usb_descriptor.c **** 
 586:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 587:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
 588:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConfigurationDescriptor.Console_HID;
 589:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(USB_HID_Descriptor_HID_t);
 590:tmk_core/protocol/usb_descriptor.c **** 
 591:tmk_core/protocol/usb_descriptor.c ****                     break;
 592:tmk_core/protocol/usb_descriptor.c **** #endif
 593:tmk_core/protocol/usb_descriptor.c ****             }
 594:tmk_core/protocol/usb_descriptor.c **** 
 595:tmk_core/protocol/usb_descriptor.c ****             break;
 596:tmk_core/protocol/usb_descriptor.c ****         case HID_DTYPE_Report:
  43              		.loc 1 596 0
  44 0010 0020     		movs	r0, #0
  45 0012 0346     		mov	r3, r0
  46 0014 0CE0     		b	.L2
  47              	.LVL2:
  48              	.L4:
 517:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_Device:
  49              		.loc 1 517 0
  50 0016 212B     		cmp	r3, #33
  51 0018 18D0     		beq	.L7
  52 001a 222B     		cmp	r3, #34
  53 001c F8D1     		bne	.L12
  54 001e 0229     		cmp	r1, #2
  55 0020 F6D8     		bhi	.L12
  56 0022 0E4B     		ldr	r3, .L14
  57 0024 0E48     		ldr	r0, .L14+4
  58              	.LVL3:
  59 0026 53F82130 		ldr	r3, [r3, r1, lsl #2]
  60 002a 0DE0     		b	.L13
  61              	.LVL4:
  62              	.L5:
 519:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Device_t);
  63              		.loc 1 519 0
  64 002c 0D4B     		ldr	r3, .L14+8
 520:tmk_core/protocol/usb_descriptor.c **** 
  65              		.loc 1 520 0
  66 002e 1220     		movs	r0, #18
  67              	.LVL5:
  68              	.L2:
 597:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
 598:tmk_core/protocol/usb_descriptor.c **** #ifndef KEYBOARD_SHARED_EP
 599:tmk_core/protocol/usb_descriptor.c ****                 case KEYBOARD_INTERFACE:
 600:tmk_core/protocol/usb_descriptor.c ****                     Address = &KeyboardReport;
 601:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(KeyboardReport);
 602:tmk_core/protocol/usb_descriptor.c **** 
 603:tmk_core/protocol/usb_descriptor.c ****                     break;
 604:tmk_core/protocol/usb_descriptor.c **** #endif
 605:tmk_core/protocol/usb_descriptor.c **** 
 606:tmk_core/protocol/usb_descriptor.c **** #if defined(MOUSE_ENABLE) && !defined(MOUSE_SHARED_EP)
 607:tmk_core/protocol/usb_descriptor.c ****                 case MOUSE_INTERFACE:
 608:tmk_core/protocol/usb_descriptor.c ****                     Address = &MouseReport;
 609:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(MouseReport);
 610:tmk_core/protocol/usb_descriptor.c **** 
 611:tmk_core/protocol/usb_descriptor.c ****                     break;
 612:tmk_core/protocol/usb_descriptor.c **** #endif
 613:tmk_core/protocol/usb_descriptor.c **** 
 614:tmk_core/protocol/usb_descriptor.c **** #ifdef SHARED_EP_ENABLE
 615:tmk_core/protocol/usb_descriptor.c ****                 case SHARED_INTERFACE:
 616:tmk_core/protocol/usb_descriptor.c ****                     Address = &SharedReport;
 617:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(SharedReport);
 618:tmk_core/protocol/usb_descriptor.c **** 
 619:tmk_core/protocol/usb_descriptor.c ****                     break;
 620:tmk_core/protocol/usb_descriptor.c **** #endif
 621:tmk_core/protocol/usb_descriptor.c **** 
 622:tmk_core/protocol/usb_descriptor.c **** #ifdef RAW_ENABLE
 623:tmk_core/protocol/usb_descriptor.c ****                 case RAW_INTERFACE:
 624:tmk_core/protocol/usb_descriptor.c ****                     Address = &RawReport;
 625:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(RawReport);
 626:tmk_core/protocol/usb_descriptor.c **** 
 627:tmk_core/protocol/usb_descriptor.c ****                     break;
 628:tmk_core/protocol/usb_descriptor.c **** #endif
 629:tmk_core/protocol/usb_descriptor.c **** 
 630:tmk_core/protocol/usb_descriptor.c **** #ifdef CONSOLE_ENABLE
 631:tmk_core/protocol/usb_descriptor.c ****                 case CONSOLE_INTERFACE:
 632:tmk_core/protocol/usb_descriptor.c ****                     Address = &ConsoleReport;
 633:tmk_core/protocol/usb_descriptor.c ****                     Size    = sizeof(ConsoleReport);
 634:tmk_core/protocol/usb_descriptor.c **** 
 635:tmk_core/protocol/usb_descriptor.c ****                     break;
 636:tmk_core/protocol/usb_descriptor.c **** #endif
 637:tmk_core/protocol/usb_descriptor.c ****             }
 638:tmk_core/protocol/usb_descriptor.c **** 
 639:tmk_core/protocol/usb_descriptor.c ****             break;
 640:tmk_core/protocol/usb_descriptor.c ****     }
 641:tmk_core/protocol/usb_descriptor.c **** 
 642:tmk_core/protocol/usb_descriptor.c ****     *DescriptorAddress = Address;
  69              		.loc 1 642 0
  70 0030 1360     		str	r3, [r2]
 643:tmk_core/protocol/usb_descriptor.c **** 
 644:tmk_core/protocol/usb_descriptor.c ****     return Size;
 645:tmk_core/protocol/usb_descriptor.c **** }
  71              		.loc 1 645 0
  72 0032 7047     		bx	lr
  73              	.LVL6:
  74              	.L6:
 525:tmk_core/protocol/usb_descriptor.c **** 
  75              		.loc 1 525 0
  76 0034 5B20     		movs	r0, #91
  77              	.LVL7:
 524:tmk_core/protocol/usb_descriptor.c ****             Size    = sizeof(USB_Descriptor_Configuration_t);
  78              		.loc 1 524 0
  79 0036 0C4B     		ldr	r3, .L14+12
 527:tmk_core/protocol/usb_descriptor.c ****         case DTYPE_String:
  80              		.loc 1 527 0
  81 0038 FAE7     		b	.L2
  82              	.LVL8:
  83              	.L3:
 513:tmk_core/protocol/usb_descriptor.c ****     const void*   Address         = NULL;
  84              		.loc 1 513 0
  85 003a C0B2     		uxtb	r0, r0
  86              	.LVL9:
  87 003c 0328     		cmp	r0, #3
  88 003e E7D8     		bhi	.L12
  89 0040 0A4B     		ldr	r3, .L14+16
  90 0042 0B49     		ldr	r1, .L14+20
  91              	.LVL10:
  92 0044 53F82030 		ldr	r3, [r3, r0, lsl #2]
  93              	.LVL11:
  94              	.L13:
  95 0048 405C     		ldrb	r0, [r0, r1]	@ zero_extendqisi2
  96 004a F1E7     		b	.L2
  97              	.LVL12:
  98              	.L7:
  99 004c 0229     		cmp	r1, #2
 100 004e DFD8     		bhi	.L12
 101 0050 084B     		ldr	r3, .L14+24
 553:tmk_core/protocol/usb_descriptor.c ****             switch (wIndex) {
 102              		.loc 1 553 0
 103 0052 0920     		movs	r0, #9
 104              	.LVL13:
 105 0054 53F82130 		ldr	r3, [r3, r1, lsl #2]
 106 0058 EAE7     		b	.L2
 107              	.L15:
 108 005a 00BF     		.align	2
 109              	.L14:
 110 005c 00000000 		.word	.LANCHOR5
 111 0060 00000000 		.word	.LANCHOR6
 112 0064 00000000 		.word	.LANCHOR0
 113 0068 00000000 		.word	.LANCHOR1
 114 006c 00000000 		.word	.LANCHOR2
 115 0070 00000000 		.word	.LANCHOR3
 116 0074 00000000 		.word	.LANCHOR4
 117              		.cfi_endproc
 118              	.LFE279:
 120              		.global	SerialNumberString
 121              		.global	ProductString
 122              		.global	ManufacturerString
 123              		.global	LanguageString
 124              		.global	ConfigurationDescriptor
 125              		.global	DeviceDescriptor
 126              		.global	ConsoleReport
 127              		.global	SharedReport
 128              		.global	KeyboardReport
 129              		.section	.rodata.CSWTCH.1,"a",%progbits
 130              		.align	2
 131              		.set	.LANCHOR2,. + 0
 134              	CSWTCH.1:
 135 0000 00000000 		.word	LanguageString
 136 0004 00000000 		.word	ManufacturerString
 137 0008 00000000 		.word	ProductString
 138 000c 00000000 		.word	SerialNumberString
 139              		.section	.rodata.CSWTCH.2,"a",%progbits
 140              		.set	.LANCHOR3,. + 0
 143              	CSWTCH.2:
 144 0000 04       		.byte	4
 145 0001 0A       		.byte	10
 146 0002 0E       		.byte	14
 147 0003 04       		.byte	4
 148              		.section	.rodata.CSWTCH.3,"a",%progbits
 149              		.align	2
 150              		.set	.LANCHOR4,. + 0
 153              	CSWTCH.3:
 154 0000 12000000 		.word	ConfigurationDescriptor+18
 155 0004 2B000000 		.word	ConfigurationDescriptor+43
 156 0008 44000000 		.word	ConfigurationDescriptor+68
 157              		.section	.rodata.CSWTCH.4,"a",%progbits
 158              		.align	2
 159              		.set	.LANCHOR5,. + 0
 162              	CSWTCH.4:
 163 0000 00000000 		.word	KeyboardReport
 164 0004 00000000 		.word	SharedReport
 165 0008 00000000 		.word	ConsoleReport
 166              		.section	.rodata.CSWTCH.5,"a",%progbits
 167              		.set	.LANCHOR6,. + 0
 170              	CSWTCH.5:
 171 0000 40       		.byte	64
 172 0001 C0       		.byte	-64
 173 0002 22       		.byte	34
 174              		.section	.rodata.ConfigurationDescriptor,"a",%progbits
 175              		.set	.LANCHOR1,. + 0
 178              	ConfigurationDescriptor:
 179 0000 09       		.byte	9
 180 0001 02       		.byte	2
 181 0002 5B00     		.2byte	91
 182 0004 03       		.byte	3
 183 0005 01       		.byte	1
 184 0006 00       		.byte	0
 185 0007 A0       		.byte	-96
 186 0008 FA       		.byte	-6
 187 0009 09       		.byte	9
 188 000a 04       		.byte	4
 189 000b 00       		.byte	0
 190 000c 00       		.byte	0
 191 000d 01       		.byte	1
 192 000e 03       		.byte	3
 193 000f 01       		.byte	1
 194 0010 01       		.byte	1
 195 0011 00       		.byte	0
 196 0012 09       		.byte	9
 197 0013 21       		.byte	33
 198 0014 1101     		.2byte	273
 199 0016 00       		.byte	0
 200 0017 01       		.byte	1
 201 0018 22       		.byte	34
 202 0019 4000     		.2byte	64
 203 001b 07       		.byte	7
 204 001c 05       		.byte	5
 205 001d 81       		.byte	-127
 206 001e 03       		.byte	3
 207 001f 0800     		.2byte	8
 208 0021 0A       		.byte	10
 209 0022 09       		.byte	9
 210 0023 04       		.byte	4
 211 0024 01       		.byte	1
 212 0025 00       		.byte	0
 213 0026 01       		.byte	1
 214 0027 03       		.byte	3
 215 0028 00       		.byte	0
 216 0029 00       		.byte	0
 217 002a 00       		.byte	0
 218 002b 09       		.byte	9
 219 002c 21       		.byte	33
 220 002d 1101     		.2byte	273
 221 002f 00       		.byte	0
 222 0030 01       		.byte	1
 223 0031 22       		.byte	34
 224 0032 C000     		.2byte	192
 225 0034 07       		.byte	7
 226 0035 05       		.byte	5
 227 0036 82       		.byte	-126
 228 0037 03       		.byte	3
 229 0038 2000     		.2byte	32
 230 003a 0A       		.byte	10
 231 003b 09       		.byte	9
 232 003c 04       		.byte	4
 233 003d 02       		.byte	2
 234 003e 00       		.byte	0
 235 003f 02       		.byte	2
 236 0040 03       		.byte	3
 237 0041 00       		.byte	0
 238 0042 00       		.byte	0
 239 0043 00       		.byte	0
 240 0044 09       		.byte	9
 241 0045 21       		.byte	33
 242 0046 1101     		.2byte	273
 243 0048 00       		.byte	0
 244 0049 01       		.byte	1
 245 004a 22       		.byte	34
 246 004b 2200     		.2byte	34
 247 004d 07       		.byte	7
 248 004e 05       		.byte	5
 249 004f 83       		.byte	-125
 250 0050 03       		.byte	3
 251 0051 2000     		.2byte	32
 252 0053 01       		.byte	1
 253 0054 07       		.byte	7
 254 0055 05       		.byte	5
 255 0056 04       		.byte	4
 256 0057 03       		.byte	3
 257 0058 2000     		.2byte	32
 258 005a 01       		.byte	1
 259              		.section	.rodata.ConsoleReport,"a",%progbits
 262              	ConsoleReport:
 263 0000 06       		.byte	6
 264 0001 31       		.byte	49
 265 0002 FF       		.byte	-1
 266 0003 09       		.byte	9
 267 0004 74       		.byte	116
 268 0005 A1       		.byte	-95
 269 0006 01       		.byte	1
 270 0007 09       		.byte	9
 271 0008 75       		.byte	117
 272 0009 15       		.byte	21
 273 000a 00       		.byte	0
 274 000b 26       		.byte	38
 275 000c FF       		.byte	-1
 276 000d 00       		.byte	0
 277 000e 95       		.byte	-107
 278 000f 20       		.byte	32
 279 0010 75       		.byte	117
 280 0011 08       		.byte	8
 281 0012 81       		.byte	-127
 282 0013 02       		.byte	2
 283 0014 09       		.byte	9
 284 0015 76       		.byte	118
 285 0016 15       		.byte	21
 286 0017 00       		.byte	0
 287 0018 26       		.byte	38
 288 0019 FF       		.byte	-1
 289 001a 00       		.byte	0
 290 001b 95       		.byte	-107
 291 001c 20       		.byte	32
 292 001d 75       		.byte	117
 293 001e 08       		.byte	8
 294 001f 91       		.byte	-111
 295 0020 02       		.byte	2
 296 0021 C0       		.byte	-64
 297              		.section	.rodata.DeviceDescriptor,"a",%progbits
 298              		.set	.LANCHOR0,. + 0
 301              	DeviceDescriptor:
 302 0000 12       		.byte	18
 303 0001 01       		.byte	1
 304 0002 1001     		.2byte	272
 305 0004 00       		.byte	0
 306 0005 00       		.byte	0
 307 0006 00       		.byte	0
 308 0007 40       		.byte	64
 309 0008 EDFE     		.2byte	-275
 310 000a 6060     		.2byte	24672
 311 000c 0600     		.2byte	6
 312 000e 01       		.byte	1
 313 000f 02       		.byte	2
 314 0010 03       		.byte	3
 315 0011 01       		.byte	1
 316              		.section	.rodata.KeyboardReport,"a",%progbits
 319              	KeyboardReport:
 320 0000 05       		.byte	5
 321 0001 01       		.byte	1
 322 0002 09       		.byte	9
 323 0003 06       		.byte	6
 324 0004 A1       		.byte	-95
 325 0005 01       		.byte	1
 326 0006 05       		.byte	5
 327 0007 07       		.byte	7
 328 0008 19       		.byte	25
 329 0009 E0       		.byte	-32
 330 000a 29       		.byte	41
 331 000b E7       		.byte	-25
 332 000c 15       		.byte	21
 333 000d 00       		.byte	0
 334 000e 25       		.byte	37
 335 000f 01       		.byte	1
 336 0010 95       		.byte	-107
 337 0011 08       		.byte	8
 338 0012 75       		.byte	117
 339 0013 01       		.byte	1
 340 0014 81       		.byte	-127
 341 0015 02       		.byte	2
 342 0016 95       		.byte	-107
 343 0017 01       		.byte	1
 344 0018 75       		.byte	117
 345 0019 08       		.byte	8
 346 001a 81       		.byte	-127
 347 001b 01       		.byte	1
 348 001c 05       		.byte	5
 349 001d 07       		.byte	7
 350 001e 19       		.byte	25
 351 001f 00       		.byte	0
 352 0020 29       		.byte	41
 353 0021 FF       		.byte	-1
 354 0022 15       		.byte	21
 355 0023 00       		.byte	0
 356 0024 26       		.byte	38
 357 0025 FF       		.byte	-1
 358 0026 00       		.byte	0
 359 0027 95       		.byte	-107
 360 0028 06       		.byte	6
 361 0029 75       		.byte	117
 362 002a 08       		.byte	8
 363 002b 81       		.byte	-127
 364 002c 00       		.byte	0
 365 002d 05       		.byte	5
 366 002e 08       		.byte	8
 367 002f 19       		.byte	25
 368 0030 01       		.byte	1
 369 0031 29       		.byte	41
 370 0032 05       		.byte	5
 371 0033 95       		.byte	-107
 372 0034 05       		.byte	5
 373 0035 75       		.byte	117
 374 0036 01       		.byte	1
 375 0037 91       		.byte	-111
 376 0038 02       		.byte	2
 377 0039 95       		.byte	-107
 378 003a 01       		.byte	1
 379 003b 75       		.byte	117
 380 003c 03       		.byte	3
 381 003d 91       		.byte	-111
 382 003e 01       		.byte	1
 383 003f C0       		.byte	-64
 384              		.section	.rodata.LanguageString,"a",%progbits
 387              	LanguageString:
 388 0000 04       		.byte	4
 389 0001 03       		.byte	3
 390 0002 0904     		.2byte	1033
 391              		.section	.rodata.ManufacturerString,"a",%progbits
 394              	ManufacturerString:
 395 0000 0A       		.byte	10
 396 0001 03       		.byte	3
 397 0002 4F004C00 		.ascii	"O\000L\000K\000B\000\000\000"
 397      4B004200 
 397      0000
 398              		.section	.rodata.ProductString,"a",%progbits
 401              	ProductString:
 402 0000 0E       		.byte	14
 403 0001 03       		.byte	3
 404 0002 50006C00 		.ascii	"P\000l\000a\000n\000c\000k\000\000\000"
 404      61006E00 
 404      63006B00 
 404      0000
 405              		.section	.rodata.SerialNumberString,"a",%progbits
 408              	SerialNumberString:
 409 0000 04       		.byte	4
 410 0001 03       		.byte	3
 411 0002 30000000 		.ascii	"0\000\000\000"
 412              		.section	.rodata.SharedReport,"a",%progbits
 415              	SharedReport:
 416 0000 05       		.byte	5
 417 0001 01       		.byte	1
 418 0002 09       		.byte	9
 419 0003 02       		.byte	2
 420 0004 A1       		.byte	-95
 421 0005 01       		.byte	1
 422 0006 85       		.byte	-123
 423 0007 02       		.byte	2
 424 0008 09       		.byte	9
 425 0009 01       		.byte	1
 426 000a A1       		.byte	-95
 427 000b 00       		.byte	0
 428 000c 05       		.byte	5
 429 000d 09       		.byte	9
 430 000e 19       		.byte	25
 431 000f 01       		.byte	1
 432 0010 29       		.byte	41
 433 0011 05       		.byte	5
 434 0012 15       		.byte	21
 435 0013 00       		.byte	0
 436 0014 25       		.byte	37
 437 0015 01       		.byte	1
 438 0016 95       		.byte	-107
 439 0017 05       		.byte	5
 440 0018 75       		.byte	117
 441 0019 01       		.byte	1
 442 001a 81       		.byte	-127
 443 001b 02       		.byte	2
 444 001c 95       		.byte	-107
 445 001d 01       		.byte	1
 446 001e 75       		.byte	117
 447 001f 03       		.byte	3
 448 0020 81       		.byte	-127
 449 0021 01       		.byte	1
 450 0022 05       		.byte	5
 451 0023 01       		.byte	1
 452 0024 09       		.byte	9
 453 0025 30       		.byte	48
 454 0026 09       		.byte	9
 455 0027 31       		.byte	49
 456 0028 15       		.byte	21
 457 0029 81       		.byte	-127
 458 002a 25       		.byte	37
 459 002b 7F       		.byte	127
 460 002c 95       		.byte	-107
 461 002d 02       		.byte	2
 462 002e 75       		.byte	117
 463 002f 08       		.byte	8
 464 0030 81       		.byte	-127
 465 0031 06       		.byte	6
 466 0032 09       		.byte	9
 467 0033 38       		.byte	56
 468 0034 15       		.byte	21
 469 0035 81       		.byte	-127
 470 0036 25       		.byte	37
 471 0037 7F       		.byte	127
 472 0038 95       		.byte	-107
 473 0039 01       		.byte	1
 474 003a 75       		.byte	117
 475 003b 08       		.byte	8
 476 003c 81       		.byte	-127
 477 003d 06       		.byte	6
 478 003e 05       		.byte	5
 479 003f 0C       		.byte	12
 480 0040 0A       		.byte	10
 481 0041 38       		.byte	56
 482 0042 02       		.byte	2
 483 0043 15       		.byte	21
 484 0044 81       		.byte	-127
 485 0045 25       		.byte	37
 486 0046 7F       		.byte	127
 487 0047 95       		.byte	-107
 488 0048 01       		.byte	1
 489 0049 75       		.byte	117
 490 004a 08       		.byte	8
 491 004b 81       		.byte	-127
 492 004c 06       		.byte	6
 493 004d C0       		.byte	-64
 494 004e C0       		.byte	-64
 495 004f 05       		.byte	5
 496 0050 01       		.byte	1
 497 0051 09       		.byte	9
 498 0052 80       		.byte	-128
 499 0053 A1       		.byte	-95
 500 0054 01       		.byte	1
 501 0055 85       		.byte	-123
 502 0056 03       		.byte	3
 503 0057 1A       		.byte	26
 504 0058 81       		.byte	-127
 505 0059 00       		.byte	0
 506 005a 2A       		.byte	42
 507 005b 83       		.byte	-125
 508 005c 00       		.byte	0
 509 005d 16       		.byte	22
 510 005e 01       		.byte	1
 511 005f 00       		.byte	0
 512 0060 26       		.byte	38
 513 0061 03       		.byte	3
 514 0062 00       		.byte	0
 515 0063 95       		.byte	-107
 516 0064 01       		.byte	1
 517 0065 75       		.byte	117
 518 0066 10       		.byte	16
 519 0067 81       		.byte	-127
 520 0068 00       		.byte	0
 521 0069 C0       		.byte	-64
 522 006a 05       		.byte	5
 523 006b 0C       		.byte	12
 524 006c 09       		.byte	9
 525 006d 01       		.byte	1
 526 006e A1       		.byte	-95
 527 006f 01       		.byte	1
 528 0070 85       		.byte	-123
 529 0071 04       		.byte	4
 530 0072 1A       		.byte	26
 531 0073 01       		.byte	1
 532 0074 00       		.byte	0
 533 0075 2A       		.byte	42
 534 0076 9C       		.byte	-100
 535 0077 02       		.byte	2
 536 0078 16       		.byte	22
 537 0079 01       		.byte	1
 538 007a 00       		.byte	0
 539 007b 26       		.byte	38
 540 007c 9C       		.byte	-100
 541 007d 02       		.byte	2
 542 007e 95       		.byte	-107
 543 007f 01       		.byte	1
 544 0080 75       		.byte	117
 545 0081 10       		.byte	16
 546 0082 81       		.byte	-127
 547 0083 00       		.byte	0
 548 0084 C0       		.byte	-64
 549 0085 05       		.byte	5
 550 0086 01       		.byte	1
 551 0087 09       		.byte	9
 552 0088 06       		.byte	6
 553 0089 A1       		.byte	-95
 554 008a 01       		.byte	1
 555 008b 85       		.byte	-123
 556 008c 05       		.byte	5
 557 008d 05       		.byte	5
 558 008e 07       		.byte	7
 559 008f 19       		.byte	25
 560 0090 E0       		.byte	-32
 561 0091 29       		.byte	41
 562 0092 E7       		.byte	-25
 563 0093 15       		.byte	21
 564 0094 00       		.byte	0
 565 0095 25       		.byte	37
 566 0096 01       		.byte	1
 567 0097 95       		.byte	-107
 568 0098 08       		.byte	8
 569 0099 75       		.byte	117
 570 009a 01       		.byte	1
 571 009b 81       		.byte	-127
 572 009c 02       		.byte	2
 573 009d 05       		.byte	5
 574 009e 07       		.byte	7
 575 009f 19       		.byte	25
 576 00a0 00       		.byte	0
 577 00a1 29       		.byte	41
 578 00a2 EF       		.byte	-17
 579 00a3 15       		.byte	21
 580 00a4 00       		.byte	0
 581 00a5 25       		.byte	37
 582 00a6 01       		.byte	1
 583 00a7 95       		.byte	-107
 584 00a8 F0       		.byte	-16
 585 00a9 75       		.byte	117
 586 00aa 01       		.byte	1
 587 00ab 81       		.byte	-127
 588 00ac 02       		.byte	2
 589 00ad 05       		.byte	5
 590 00ae 08       		.byte	8
 591 00af 19       		.byte	25
 592 00b0 01       		.byte	1
 593 00b1 29       		.byte	41
 594 00b2 05       		.byte	5
 595 00b3 95       		.byte	-107
 596 00b4 05       		.byte	5
 597 00b5 75       		.byte	117
 598 00b6 01       		.byte	1
 599 00b7 91       		.byte	-111
 600 00b8 02       		.byte	2
 601 00b9 95       		.byte	-107
 602 00ba 01       		.byte	1
 603 00bb 75       		.byte	117
 604 00bc 03       		.byte	3
 605 00bd 91       		.byte	-111
 606 00be 01       		.byte	1
 607 00bf C0       		.byte	-64
 608              		.text
 609              	.Letext0:
 610              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 611              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 612              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 613              		.file 5 "./lib/lufa/LUFA/Drivers/USB/Class/Common/../../Core/StdDescriptors.h"
 614              		.file 6 "./lib/lufa/LUFA/Drivers/USB/Class/Common/HIDClassCommon.h"
 615              		.file 7 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 616              		.file 8 "./lib/chibios/os/rt/include/chsystypes.h"
 617              		.file 9 "./lib/chibios/os/rt/include/chschd.h"
 618              		.file 10 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 619              		.file 11 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 620              		.file 12 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/stm32f303xc.h"
 621              		.file 13 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 622              		.file 14 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 623              		.file 15 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 624              		.file 16 "./lib/chibios/os/rt/include/chtm.h"
 625              		.file 17 "./lib/chibios/os/rt/include/chsem.h"
 626              		.file 18 "./lib/chibios/os/rt/include/chmtx.h"
 627              		.file 19 "./lib/chibios/os/rt/include/chsys.h"
 628              		.file 20 "./lib/chibios/os/rt/include/chregistry.h"
 629              		.file 21 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 630              		.file 22 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 631              		.file 23 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 632              		.file 24 "./lib/chibios/os/hal/include/hal_dac.h"
 633              		.file 25 "./lib/chibios/os/hal/ports/STM32/LLD/DACv1/hal_dac_lld.h"
 634              		.file 26 "./lib/chibios/os/hal/include/hal_gpt.h"
 635              		.file 27 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_gpt_lld.h"
 636              		.file 28 "./lib/chibios/os/hal/include/hal_i2c.h"
 637              		.file 29 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 638              		.file 30 "./lib/chibios/os/hal/include/hal_pwm.h"
 639              		.file 31 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 640              		.file 32 "./lib/chibios/os/hal/include/hal_usb.h"
 641              		.file 33 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 642              		.file 34 "tmk_core/protocol/usb_descriptor.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_descriptor.c
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:16     .text.get_usb_descriptor:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:23     .text.get_usb_descriptor:0000000000000000 get_usb_descriptor
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:110    .text.get_usb_descriptor:000000000000005c $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:408    .rodata.SerialNumberString:0000000000000000 SerialNumberString
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:401    .rodata.ProductString:0000000000000000 ProductString
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:394    .rodata.ManufacturerString:0000000000000000 ManufacturerString
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:387    .rodata.LanguageString:0000000000000000 LanguageString
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:178    .rodata.ConfigurationDescriptor:0000000000000000 ConfigurationDescriptor
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:301    .rodata.DeviceDescriptor:0000000000000000 DeviceDescriptor
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:262    .rodata.ConsoleReport:0000000000000000 ConsoleReport
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:415    .rodata.SharedReport:0000000000000000 SharedReport
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:319    .rodata.KeyboardReport:0000000000000000 KeyboardReport
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:130    .rodata.CSWTCH.1:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:134    .rodata.CSWTCH.1:0000000000000000 CSWTCH.1
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:143    .rodata.CSWTCH.2:0000000000000000 CSWTCH.2
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:149    .rodata.CSWTCH.3:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:153    .rodata.CSWTCH.3:0000000000000000 CSWTCH.3
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:158    .rodata.CSWTCH.4:0000000000000000 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:162    .rodata.CSWTCH.4:0000000000000000 CSWTCH.4
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccEzq63A.s:170    .rodata.CSWTCH.5:0000000000000000 CSWTCH.5

NO UNDEFINED SYMBOLS
