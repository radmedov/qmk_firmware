   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"util.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.bitpop,"ax",%progbits
  18              		.align	1
  19              		.global	bitpop
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	bitpop:
  26              	.LFB0:
  27              		.file 1 "tmk_core/common/util.c"
   1:tmk_core/common/util.c **** /*
   2:tmk_core/common/util.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:tmk_core/common/util.c **** 
   4:tmk_core/common/util.c **** This program is free software: you can redistribute it and/or modify
   5:tmk_core/common/util.c **** it under the terms of the GNU General Public License as published by
   6:tmk_core/common/util.c **** the Free Software Foundation, either version 2 of the License, or
   7:tmk_core/common/util.c **** (at your option) any later version.
   8:tmk_core/common/util.c **** 
   9:tmk_core/common/util.c **** This program is distributed in the hope that it will be useful,
  10:tmk_core/common/util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:tmk_core/common/util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:tmk_core/common/util.c **** GNU General Public License for more details.
  13:tmk_core/common/util.c **** 
  14:tmk_core/common/util.c **** You should have received a copy of the GNU General Public License
  15:tmk_core/common/util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:tmk_core/common/util.c **** */
  17:tmk_core/common/util.c **** 
  18:tmk_core/common/util.c **** #include "util.h"
  19:tmk_core/common/util.c **** 
  20:tmk_core/common/util.c **** // bit population - return number of on-bit
  21:tmk_core/common/util.c **** uint8_t bitpop(uint8_t bits) {
  28              		.loc 1 21 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34              		.loc 1 21 0
  35 0000 0346     		mov	r3, r0
  22:tmk_core/common/util.c ****     uint8_t c;
  23:tmk_core/common/util.c ****     for (c = 0; bits; c++) bits &= bits - 1;
  36              		.loc 1 23 0
  37 0002 0022     		movs	r2, #0
  38              	.LVL1:
  39              	.L2:
  40 0004 D0B2     		uxtb	r0, r2
  41              	.LVL2:
  42 0006 0132     		adds	r2, r2, #1
  43              		.loc 1 23 0 is_stmt 0 discriminator 1
  44 0008 03B9     		cbnz	r3, .L3
  24:tmk_core/common/util.c ****     return c;
  25:tmk_core/common/util.c ****     /*
  26:tmk_core/common/util.c ****         const uint8_t bit_count[] = { 0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4 };
  27:tmk_core/common/util.c ****         return bit_count[bits>>4] + bit_count[bits&0x0F]
  28:tmk_core/common/util.c ****     */
  29:tmk_core/common/util.c **** }
  45              		.loc 1 29 0 is_stmt 1
  46 000a 7047     		bx	lr
  47              	.L3:
  23:tmk_core/common/util.c ****     return c;
  48              		.loc 1 23 0 discriminator 3
  49 000c 591E     		subs	r1, r3, #1
  50 000e 0B40     		ands	r3, r3, r1
  51              	.LVL3:
  52 0010 F8E7     		b	.L2
  53              		.cfi_endproc
  54              	.LFE0:
  56              		.section	.text.bitpop16,"ax",%progbits
  57              		.align	1
  58              		.global	bitpop16
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  62              		.fpu fpv4-sp-d16
  64              	bitpop16:
  65              	.LFB1:
  30:tmk_core/common/util.c **** 
  31:tmk_core/common/util.c **** uint8_t bitpop16(uint16_t bits) {
  66              		.loc 1 31 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              		@ link register save eliminated.
  71              	.LVL4:
  72              		.loc 1 31 0
  73 0000 0346     		mov	r3, r0
  32:tmk_core/common/util.c ****     uint8_t c;
  33:tmk_core/common/util.c ****     for (c = 0; bits; c++) bits &= bits - 1;
  74              		.loc 1 33 0
  75 0002 0022     		movs	r2, #0
  76              	.LVL5:
  77              	.L5:
  78 0004 D0B2     		uxtb	r0, r2
  79              	.LVL6:
  80 0006 0132     		adds	r2, r2, #1
  81              		.loc 1 33 0 is_stmt 0 discriminator 1
  82 0008 03B9     		cbnz	r3, .L6
  34:tmk_core/common/util.c ****     return c;
  35:tmk_core/common/util.c **** }
  83              		.loc 1 35 0 is_stmt 1
  84 000a 7047     		bx	lr
  85              	.L6:
  33:tmk_core/common/util.c ****     return c;
  86              		.loc 1 33 0 discriminator 3
  87 000c 591E     		subs	r1, r3, #1
  88 000e 0B40     		ands	r3, r3, r1
  89              	.LVL7:
  90 0010 F8E7     		b	.L5
  91              		.cfi_endproc
  92              	.LFE1:
  94              		.section	.text.bitpop32,"ax",%progbits
  95              		.align	1
  96              		.global	bitpop32
  97              		.syntax unified
  98              		.thumb
  99              		.thumb_func
 100              		.fpu fpv4-sp-d16
 102              	bitpop32:
 103              	.LFB2:
  36:tmk_core/common/util.c **** 
  37:tmk_core/common/util.c **** uint8_t bitpop32(uint32_t bits) {
 104              		.loc 1 37 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
 109              	.LVL8:
 110              		.loc 1 37 0
 111 0000 0346     		mov	r3, r0
  38:tmk_core/common/util.c ****     uint8_t c;
  39:tmk_core/common/util.c ****     for (c = 0; bits; c++) bits &= bits - 1;
 112              		.loc 1 39 0
 113 0002 0022     		movs	r2, #0
 114              	.LVL9:
 115              	.L8:
 116 0004 D0B2     		uxtb	r0, r2
 117              	.LVL10:
 118 0006 0132     		adds	r2, r2, #1
 119              		.loc 1 39 0 is_stmt 0 discriminator 1
 120 0008 03B9     		cbnz	r3, .L9
  40:tmk_core/common/util.c ****     return c;
  41:tmk_core/common/util.c **** }
 121              		.loc 1 41 0 is_stmt 1
 122 000a 7047     		bx	lr
 123              	.L9:
  39:tmk_core/common/util.c ****     return c;
 124              		.loc 1 39 0 discriminator 3
 125 000c 591E     		subs	r1, r3, #1
 126 000e 0B40     		ands	r3, r3, r1
 127              	.LVL11:
 128 0010 F8E7     		b	.L8
 129              		.cfi_endproc
 130              	.LFE2:
 132              		.section	.text.biton,"ax",%progbits
 133              		.align	1
 134              		.global	biton
 135              		.syntax unified
 136              		.thumb
 137              		.thumb_func
 138              		.fpu fpv4-sp-d16
 140              	biton:
 141              	.LFB3:
  42:tmk_core/common/util.c **** 
  43:tmk_core/common/util.c **** // most significant on-bit - return highest location of on-bit
  44:tmk_core/common/util.c **** // NOTE: return 0 when bit0 is on or all bits are off
  45:tmk_core/common/util.c **** uint8_t biton(uint8_t bits) {
 142              		.loc 1 45 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              		@ link register save eliminated.
 147              	.LVL12:
  46:tmk_core/common/util.c ****     uint8_t n = 0;
  47:tmk_core/common/util.c ****     if (bits >> 4) {
 148              		.loc 1 47 0
 149 0000 0209     		lsrs	r2, r0, #4
 150 0002 002A     		cmp	r2, #0
  45:tmk_core/common/util.c ****     uint8_t n = 0;
 151              		.loc 1 45 0
 152 0004 0346     		mov	r3, r0
 153              		.loc 1 47 0
 154 0006 0BBF     		itete	eq
 155 0008 0346     		moveq	r3, r0
 156 000a 1346     		movne	r3, r2
 157 000c 0020     		moveq	r0, #0
 158              	.LVL13:
 159 000e 0420     		movne	r0, #4
 160              	.LVL14:
  48:tmk_core/common/util.c ****         bits >>= 4;
  49:tmk_core/common/util.c ****         n += 4;
  50:tmk_core/common/util.c ****     }
  51:tmk_core/common/util.c ****     if (bits >> 2) {
 161              		.loc 1 51 0
 162 0010 9A08     		lsrs	r2, r3, #2
 163              	.LVL15:
  52:tmk_core/common/util.c ****         bits >>= 2;
  53:tmk_core/common/util.c ****         n += 2;
 164              		.loc 1 53 0
 165 0012 18BF     		it	ne
 166 0014 1346     		movne	r3, r2
  54:tmk_core/common/util.c ****     }
  55:tmk_core/common/util.c ****     if (bits >> 1) {
 167              		.loc 1 55 0
 168 0016 C3F34703 		ubfx	r3, r3, #1, #8
  53:tmk_core/common/util.c ****     }
 169              		.loc 1 53 0
 170 001a 18BF     		it	ne
 171 001c 0230     		addne	r0, r0, #2
 172              	.LVL16:
 173              		.loc 1 55 0
 174 001e 0BB1     		cbz	r3, .L13
 175              	.LVL17:
  56:tmk_core/common/util.c ****         bits >>= 1;
  57:tmk_core/common/util.c ****         n += 1;
 176              		.loc 1 57 0
 177 0020 0130     		adds	r0, r0, #1
 178              	.LVL18:
 179 0022 C0B2     		uxtb	r0, r0
 180              	.LVL19:
 181              	.L13:
  58:tmk_core/common/util.c ****     }
  59:tmk_core/common/util.c ****     return n;
  60:tmk_core/common/util.c **** }
 182              		.loc 1 60 0
 183 0024 7047     		bx	lr
 184              		.cfi_endproc
 185              	.LFE3:
 187              		.section	.text.biton16,"ax",%progbits
 188              		.align	1
 189              		.global	biton16
 190              		.syntax unified
 191              		.thumb
 192              		.thumb_func
 193              		.fpu fpv4-sp-d16
 195              	biton16:
 196              	.LFB4:
  61:tmk_core/common/util.c **** 
  62:tmk_core/common/util.c **** uint8_t biton16(uint16_t bits) {
 197              		.loc 1 62 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 0, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 202              	.LVL20:
  63:tmk_core/common/util.c ****     uint8_t n = 0;
  64:tmk_core/common/util.c ****     if (bits >> 8) {
 203              		.loc 1 64 0
 204 0000 030A     		lsrs	r3, r0, #8
 205 0002 002B     		cmp	r3, #0
 206 0004 16BF     		itet	ne
 207 0006 1846     		movne	r0, r3
 208              	.LVL21:
 209 0008 0023     		moveq	r3, #0
 210 000a 0823     		movne	r3, #8
 211              	.LVL22:
  65:tmk_core/common/util.c ****         bits >>= 8;
  66:tmk_core/common/util.c ****         n += 8;
  67:tmk_core/common/util.c ****     }
  68:tmk_core/common/util.c ****     if (bits >> 4) {
 212              		.loc 1 68 0
 213 000c 0209     		lsrs	r2, r0, #4
 214              	.LVL23:
  69:tmk_core/common/util.c ****         bits >>= 4;
  70:tmk_core/common/util.c ****         n += 4;
 215              		.loc 1 70 0
 216 000e 18BF     		it	ne
 217 0010 1046     		movne	r0, r2
  71:tmk_core/common/util.c ****     }
  72:tmk_core/common/util.c ****     if (bits >> 2) {
 218              		.loc 1 72 0
 219 0012 C0F38F02 		ubfx	r2, r0, #2, #16
 220              	.LVL24:
  70:tmk_core/common/util.c ****     }
 221              		.loc 1 70 0
 222 0016 18BF     		it	ne
 223 0018 0433     		addne	r3, r3, #4
 224              	.LVL25:
 225              		.loc 1 72 0
 226 001a 12B1     		cbz	r2, .L24
 227              	.LVL26:
  73:tmk_core/common/util.c ****         bits >>= 2;
  74:tmk_core/common/util.c ****         n += 2;
 228              		.loc 1 74 0
 229 001c 0233     		adds	r3, r3, #2
 230              	.LVL27:
 231 001e DBB2     		uxtb	r3, r3
 232              	.LVL28:
 233 0020 1046     		mov	r0, r2
 234              	.LVL29:
 235              	.L24:
  75:tmk_core/common/util.c ****     }
  76:tmk_core/common/util.c ****     if (bits >> 1) {
 236              		.loc 1 76 0
 237 0022 C0F34F00 		ubfx	r0, r0, #1, #16
 238              	.LVL30:
 239 0026 08B1     		cbz	r0, .L25
 240              	.LVL31:
  77:tmk_core/common/util.c ****         bits >>= 1;
  78:tmk_core/common/util.c ****         n += 1;
 241              		.loc 1 78 0
 242 0028 0133     		adds	r3, r3, #1
 243              	.LVL32:
 244 002a DBB2     		uxtb	r3, r3
 245              	.LVL33:
 246              	.L25:
  79:tmk_core/common/util.c ****     }
  80:tmk_core/common/util.c ****     return n;
  81:tmk_core/common/util.c **** }
 247              		.loc 1 81 0
 248 002c 1846     		mov	r0, r3
 249 002e 7047     		bx	lr
 250              		.cfi_endproc
 251              	.LFE4:
 253              		.section	.text.biton32,"ax",%progbits
 254              		.align	1
 255              		.global	biton32
 256              		.syntax unified
 257              		.thumb
 258              		.thumb_func
 259              		.fpu fpv4-sp-d16
 261              	biton32:
 262              	.LFB5:
  82:tmk_core/common/util.c **** 
  83:tmk_core/common/util.c **** uint8_t biton32(uint32_t bits) {
 263              		.loc 1 83 0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267              		@ link register save eliminated.
 268              	.LVL34:
  84:tmk_core/common/util.c ****     uint8_t n = 0;
  85:tmk_core/common/util.c ****     if (bits >> 16) {
 269              		.loc 1 85 0
 270 0000 030C     		lsrs	r3, r0, #16
 271 0002 002B     		cmp	r3, #0
 272 0004 16BF     		itet	ne
 273 0006 1846     		movne	r0, r3
 274              	.LVL35:
 275 0008 0023     		moveq	r3, #0
 276 000a 1023     		movne	r3, #16
 277              	.LVL36:
  86:tmk_core/common/util.c ****         bits >>= 16;
  87:tmk_core/common/util.c ****         n += 16;
  88:tmk_core/common/util.c ****     }
  89:tmk_core/common/util.c ****     if (bits >> 8) {
 278              		.loc 1 89 0
 279 000c 020A     		lsrs	r2, r0, #8
 280              	.LVL37:
  90:tmk_core/common/util.c ****         bits >>= 8;
  91:tmk_core/common/util.c ****         n += 8;
 281              		.loc 1 91 0
 282 000e 1CBF     		itt	ne
 283 0010 1046     		movne	r0, r2
 284 0012 0833     		addne	r3, r3, #8
 285              	.LVL38:
  92:tmk_core/common/util.c ****     }
  93:tmk_core/common/util.c ****     if (bits >> 4) {
 286              		.loc 1 93 0
 287 0014 0209     		lsrs	r2, r0, #4
 288              	.LVL39:
  94:tmk_core/common/util.c ****         bits >>= 4;
  95:tmk_core/common/util.c ****         n += 4;
 289              		.loc 1 95 0
 290 0016 1EBF     		ittt	ne
 291 0018 0433     		addne	r3, r3, #4
 292              	.LVL40:
 293 001a 1046     		movne	r0, r2
 294 001c DBB2     		uxtbne	r3, r3
 295              	.LVL41:
  96:tmk_core/common/util.c ****     }
  97:tmk_core/common/util.c ****     if (bits >> 2) {
 296              		.loc 1 97 0
 297 001e 8208     		lsrs	r2, r0, #2
 298              	.LVL42:
  98:tmk_core/common/util.c ****         bits >>= 2;
  99:tmk_core/common/util.c ****         n += 2;
 299              		.loc 1 99 0
 300 0020 1EBF     		ittt	ne
 301 0022 0233     		addne	r3, r3, #2
 302              	.LVL43:
 303 0024 1046     		movne	r0, r2
 304 0026 DBB2     		uxtbne	r3, r3
 305              	.LVL44:
 100:tmk_core/common/util.c ****     }
 101:tmk_core/common/util.c ****     if (bits >> 1) {
 306              		.loc 1 101 0
 307 0028 4208     		lsrs	r2, r0, #1
 308              	.LVL45:
 102:tmk_core/common/util.c ****         bits >>= 1;
 103:tmk_core/common/util.c ****         n += 1;
 309              		.loc 1 103 0
 310 002a 1CBF     		itt	ne
 311 002c 0133     		addne	r3, r3, #1
 312              	.LVL46:
 313 002e DBB2     		uxtbne	r3, r3
 314              	.LVL47:
 104:tmk_core/common/util.c ****     }
 105:tmk_core/common/util.c ****     return n;
 106:tmk_core/common/util.c **** }
 315              		.loc 1 106 0
 316 0030 1846     		mov	r0, r3
 317 0032 7047     		bx	lr
 318              		.cfi_endproc
 319              	.LFE5:
 321              		.section	.text.bitrev,"ax",%progbits
 322              		.align	1
 323              		.global	bitrev
 324              		.syntax unified
 325              		.thumb
 326              		.thumb_func
 327              		.fpu fpv4-sp-d16
 329              	bitrev:
 330              	.LFB6:
 107:tmk_core/common/util.c **** 
 108:tmk_core/common/util.c **** uint8_t bitrev(uint8_t bits) {
 331              		.loc 1 108 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              		@ link register save eliminated.
 336              	.LVL48:
 109:tmk_core/common/util.c ****     bits = (bits & 0x0f) << 4 | (bits & 0xf0) >> 4;
 337              		.loc 1 109 0
 338 0000 0309     		lsrs	r3, r0, #4
 339 0002 43EA0010 		orr	r0, r3, r0, lsl #4
 340              	.LVL49:
 110:tmk_core/common/util.c ****     bits = (bits & 0b00110011) << 2 | (bits & 0b11001100) >> 2;
 341              		.loc 1 110 0
 342 0006 C0B2     		uxtb	r0, r0
 343              	.LVL50:
 344 0008 8300     		lsls	r3, r0, #2
 345 000a 8010     		asrs	r0, r0, #2
 346              	.LVL51:
 347 000c 00F03300 		and	r0, r0, #51
 348 0010 03F0CC03 		and	r3, r3, #204
 111:tmk_core/common/util.c ****     bits = (bits & 0b01010101) << 1 | (bits & 0b10101010) >> 1;
 349              		.loc 1 111 0
 350 0014 0343     		orrs	r3, r3, r0
 351              	.LVL52:
 352 0016 5800     		lsls	r0, r3, #1
 353 0018 5B10     		asrs	r3, r3, #1
 354              	.LVL53:
 355 001a 03F05503 		and	r3, r3, #85
 356 001e 00F0AA00 		and	r0, r0, #170
 112:tmk_core/common/util.c ****     return bits;
 113:tmk_core/common/util.c **** }
 357              		.loc 1 113 0
 358 0022 1843     		orrs	r0, r0, r3
 359 0024 7047     		bx	lr
 360              		.cfi_endproc
 361              	.LFE6:
 363              		.section	.text.bitrev16,"ax",%progbits
 364              		.align	1
 365              		.global	bitrev16
 366              		.syntax unified
 367              		.thumb
 368              		.thumb_func
 369              		.fpu fpv4-sp-d16
 371              	bitrev16:
 372              	.LFB7:
 114:tmk_core/common/util.c **** 
 115:tmk_core/common/util.c **** uint16_t bitrev16(uint16_t bits) {
 373              		.loc 1 115 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 377              	.LVL54:
 378 0000 0146     		mov	r1, r0
 379 0002 08B5     		push	{r3, lr}
 380              		.cfi_def_cfa_offset 8
 381              		.cfi_offset 3, -8
 382              		.cfi_offset 14, -4
 116:tmk_core/common/util.c ****     bits = bitrev(bits & 0x00ff) << 8 | bitrev((bits & 0xff00) >> 8);
 383              		.loc 1 116 0
 384 0004 C0B2     		uxtb	r0, r0
 385              	.LVL55:
 386 0006 FFF7FEFF 		bl	bitrev
 387              	.LVL56:
 388 000a 0246     		mov	r2, r0
 389 000c 080A     		lsrs	r0, r1, #8
 390 000e FFF7FEFF 		bl	bitrev
 391              	.LVL57:
 392 0012 40EA0220 		orr	r0, r0, r2, lsl #8
 393              	.LVL58:
 117:tmk_core/common/util.c ****     return bits;
 118:tmk_core/common/util.c **** }
 394              		.loc 1 118 0
 395 0016 80B2     		uxth	r0, r0
 396 0018 08BD     		pop	{r3, pc}
 397              		.cfi_endproc
 398              	.LFE7:
 400              		.section	.text.bitrev32,"ax",%progbits
 401              		.align	1
 402              		.global	bitrev32
 403              		.syntax unified
 404              		.thumb
 405              		.thumb_func
 406              		.fpu fpv4-sp-d16
 408              	bitrev32:
 409              	.LFB8:
 119:tmk_core/common/util.c **** 
 120:tmk_core/common/util.c **** uint32_t bitrev32(uint32_t bits) {
 410              		.loc 1 120 0
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 0
 413              		@ frame_needed = 0, uses_anonymous_args = 0
 414              	.LVL59:
 415 0000 38B5     		push	{r3, r4, r5, lr}
 416              		.cfi_def_cfa_offset 16
 417              		.cfi_offset 3, -16
 418              		.cfi_offset 4, -12
 419              		.cfi_offset 5, -8
 420              		.cfi_offset 14, -4
 421              		.loc 1 120 0
 422 0002 0446     		mov	r4, r0
 121:tmk_core/common/util.c ****     bits = (uint32_t)bitrev16(bits & 0x0000ffff) << 16 | bitrev16((bits & 0xffff0000) >> 16);
 423              		.loc 1 121 0
 424 0004 80B2     		uxth	r0, r0
 425              	.LVL60:
 426 0006 FFF7FEFF 		bl	bitrev16
 427              	.LVL61:
 428 000a 0546     		mov	r5, r0
 429 000c 200C     		lsrs	r0, r4, #16
 430 000e FFF7FEFF 		bl	bitrev16
 431              	.LVL62:
 122:tmk_core/common/util.c ****     return bits;
 123:tmk_core/common/util.c **** }
 432              		.loc 1 123 0
 433 0012 40EA0540 		orr	r0, r0, r5, lsl #16
 434              	.LVL63:
 435 0016 38BD     		pop	{r3, r4, r5, pc}
 436              		.cfi_endproc
 437              	.LFE8:
 439              		.text
 440              	.Letext0:
 441              		.file 2 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 442              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 util.c
/var/tmp//cca5ygI0.s:18     .text.bitpop:0000000000000000 $t
/var/tmp//cca5ygI0.s:25     .text.bitpop:0000000000000000 bitpop
/var/tmp//cca5ygI0.s:57     .text.bitpop16:0000000000000000 $t
/var/tmp//cca5ygI0.s:64     .text.bitpop16:0000000000000000 bitpop16
/var/tmp//cca5ygI0.s:95     .text.bitpop32:0000000000000000 $t
/var/tmp//cca5ygI0.s:102    .text.bitpop32:0000000000000000 bitpop32
/var/tmp//cca5ygI0.s:133    .text.biton:0000000000000000 $t
/var/tmp//cca5ygI0.s:140    .text.biton:0000000000000000 biton
/var/tmp//cca5ygI0.s:188    .text.biton16:0000000000000000 $t
/var/tmp//cca5ygI0.s:195    .text.biton16:0000000000000000 biton16
/var/tmp//cca5ygI0.s:254    .text.biton32:0000000000000000 $t
/var/tmp//cca5ygI0.s:261    .text.biton32:0000000000000000 biton32
/var/tmp//cca5ygI0.s:322    .text.bitrev:0000000000000000 $t
/var/tmp//cca5ygI0.s:329    .text.bitrev:0000000000000000 bitrev
/var/tmp//cca5ygI0.s:364    .text.bitrev16:0000000000000000 $t
/var/tmp//cca5ygI0.s:371    .text.bitrev16:0000000000000000 bitrev16
/var/tmp//cca5ygI0.s:401    .text.bitrev32:0000000000000000 $t
/var/tmp//cca5ygI0.s:408    .text.bitrev32:0000000000000000 bitrev32

NO UNDEFINED SYMBOLS
