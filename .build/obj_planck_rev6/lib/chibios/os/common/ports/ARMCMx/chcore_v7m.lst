   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"chcore_v7m.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.SVC_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	SVC_Handler
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	SVC_Handler:
  24              	.LFB248:
  25              		.file 1 "lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c"
   1:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*
   2:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
   4:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
   6:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     (at your option) any later version.
  10:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  11:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     GNU General Public License for more details.
  15:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  16:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** */
  19:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  20:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /**
  21:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  * @file    chcore_v7m.c
  22:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  * @brief   ARMv7-M architecture port code.
  23:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  *
  24:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  * @addtogroup ARMCMx_V7M_CORE
  25:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  * @{
  26:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  */
  27:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  28:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** #include "ch.h"
  29:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  30:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*===========================================================================*/
  31:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /* Module local definitions.                                                 */
  32:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*===========================================================================*/
  33:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  34:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*===========================================================================*/
  35:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /* Module exported variables.                                                */
  36:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*===========================================================================*/
  37:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  38:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*===========================================================================*/
  39:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /* Module local types.                                                       */
  40:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*===========================================================================*/
  41:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  42:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*===========================================================================*/
  43:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /* Module local variables.                                                   */
  44:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*===========================================================================*/
  45:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  46:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*===========================================================================*/
  47:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /* Module local functions.                                                   */
  48:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*===========================================================================*/
  49:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  50:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*===========================================================================*/
  51:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /* Module interrupt handlers.                                                */
  52:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*===========================================================================*/
  53:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  54:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** #if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) || defined(__DOXYGEN__)
  55:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /**
  56:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  * @brief   SVC vector.
  57:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  * @details The SVC vector is used for exception mode re-entering after a
  58:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  *          context switch.
  59:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  * @note    The PendSV vector is only used in advanced kernel mode.
  60:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  */
  61:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
  62:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** void SVC_Handler(void) {
  26              		.loc 1 62 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 1, uses_anonymous_args = 0
  30 0000 80B5     		push	{r7, lr}
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 7, -8
  33              		.cfi_offset 14, -4
  63:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*lint -restore*/
  64:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   struct port_extctx *ctxp;
  65:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  66:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** #if CORTEX_USE_FPU
  67:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   /* Enforcing unstacking of the FP part of the context.*/
  68:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
  34              		.loc 1 68 0
  35 0002 074A     		ldr	r2, .L2
  36 0004 5368     		ldr	r3, [r2, #4]
  37 0006 23F00103 		bic	r3, r3, #1
  62:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*lint -restore*/
  38              		.loc 1 62 0
  39 000a 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41              		.loc 1 68 0
  42 000c 5360     		str	r3, [r2, #4]
  43              	.LBB51:
  44              	.LBB52:
  45              		.file 2 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @version  V4.30
   5:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
   9:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    All rights reserved.
  10:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      specific prior written permission.
  20:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    *
  21:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  35:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  38:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #endif
  45:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  46:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  47:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   @{
  51:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  52:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  53:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  54:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  58:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  60:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  62:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  63:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  64:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  65:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  69:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  71:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  73:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  74:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  75:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  76:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Control Register value
  79:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  80:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  82:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
  83:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  84:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
  86:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  87:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  88:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  89:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  90:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  94:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  96:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  98:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  99:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 100:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 101:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 105:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 107:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 108:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 109:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 111:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 112:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 113:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 114:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 115:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               APSR Register value
 118:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 119:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 121:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 122:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 123:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 125:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 126:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 127:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 128:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 129:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 132:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 134:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 136:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 137:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 138:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 140:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 141:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 142:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 143:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 144:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               PSP Register value
 147:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 148:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 150:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 151:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
  46              		.loc 2 152 0
  47              		.syntax unified
  48              	@ 152 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
  49 000e EFF30983 		MRS r3, psp
  50              	
  51              	@ 0 "" 2
  52              	.LVL0:
  53              		.thumb
  54              		.syntax unified
  55              	.LBE52:
  56              	.LBE51:
  69:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** #endif
  70:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  71:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   /* The port_extctx structure is pointed by the PSP register.*/
  72:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   ctxp = (struct port_extctx *)__get_PSP();
  73:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  74:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   /* Discarding the current exception context and positioning the stack to
  75:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****      point to the real one.*/
  76:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   ctxp++;
  57              		.loc 1 76 0
  58 0012 6833     		adds	r3, r3, #104
  59              	.LVL1:
  60              	.LBB53:
  61              	.LBB54:
 153:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 154:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 155:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 156:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 157:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 158:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 162:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 164:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
  62              		.loc 2 164 0
  63              		.syntax unified
  64              	@ 164 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
  65 0014 83F30988 		MSR psp, r3
  66              	
  67              	@ 0 "" 2
  68              	.LVL2:
  69              		.thumb
  70              		.syntax unified
  71              	.LBE54:
  72              	.LBE53:
  73              	.LBB55:
  74              	.LBB56:
  75              	.LBB57:
  76              	.LBB58:
 165:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 166:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 167:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 168:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 169:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               MSP Register value
 172:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 173:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 175:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 176:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 177:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 179:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 180:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 181:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 182:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 183:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 188:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 190:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 192:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 193:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 194:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 195:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 199:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 201:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 202:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 203:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 205:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 206:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 207:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 208:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 209:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 213:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 215:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 217:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 218:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 219:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 221:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 222:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 226:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 228:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 230:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 231:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 232:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 233:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 237:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 239:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 241:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 243:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 244:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 248:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 250:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 251:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 252:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 254:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 255:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 257:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  77              		.loc 2 264 0
  78 0018 0023     		movs	r3, #0
  79              	.LVL3:
  80              		.syntax unified
  81              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
  82 001a 83F31188 		MSR basepri, r3
  83              	@ 0 "" 2
  84              	.LVL4:
  85              		.thumb
  86              		.syntax unified
  87              	.LBE58:
  88              	.LBE57:
  89              	.LBE56:
  90              	.LBE55:
  77:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  78:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   /* Restoring real position of the original stack frame.*/
  79:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   __set_PSP((uint32_t)ctxp);
  80:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  81:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   /* Restoring the normal interrupts status.*/
  82:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   port_unlock_from_isr();
  83:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** }
  91              		.loc 1 83 0
  92 001e 80BD     		pop	{r7, pc}
  93              	.L3:
  94              		.align	2
  95              	.L2:
  96 0020 30EF00E0 		.word	-536809680
  97              		.cfi_endproc
  98              	.LFE248:
 100              		.section	.text._port_irq_epilogue,"ax",%progbits
 101              		.align	1
 102              		.global	_port_irq_epilogue
 103              		.syntax unified
 104              		.thumb
 105              		.thumb_func
 106              		.fpu softvfp
 108              	_port_irq_epilogue:
 109              	.LFB249:
  84:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** #endif /* CORTEX_SIMPLIFIED_PRIORITY == FALSE */
  85:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  86:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** #if (CORTEX_SIMPLIFIED_PRIORITY == TRUE) || defined(__DOXYGEN__)
  87:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /**
  88:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  * @brief   PendSV vector.
  89:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  * @details The PendSV vector is used for exception mode re-entering after a
  90:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  *          context switch.
  91:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  * @note    The PendSV vector is only used in compact kernel mode.
  92:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  */
  93:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
  94:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** void PendSV_Handler(void) {
  95:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*lint -restore*/
  96:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   struct port_extctx *ctxp;
  97:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
  98:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** #if CORTEX_USE_FPU
  99:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   /* Enforcing unstacking of the FP part of the context.*/
 100:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 101:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** #endif
 102:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
 103:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   /* The port_extctx structure is pointed by the PSP register.*/
 104:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   ctxp = (struct port_extctx *)__get_PSP();
 105:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
 106:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   /* Discarding the current exception context and positioning the stack to
 107:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****      point to the real one.*/
 108:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   ctxp++;
 109:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
 110:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   /* Writing back the modified PSP value.*/
 111:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   __set_PSP((uint32_t)ctxp);
 112:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** }
 113:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** #endif /* CORTEX_SIMPLIFIED_PRIORITY == TRUE */
 114:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
 115:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*===========================================================================*/
 116:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /* Module exported functions.                                                */
 117:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /*===========================================================================*/
 118:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
 119:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** /**
 120:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  * @brief   Exception exit redirection to _port_switch_from_isr().
 121:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****  */
 122:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** void _port_irq_epilogue(void) {
 110              		.loc 1 122 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 1, uses_anonymous_args = 0
 114              	.LVL5:
 115 0000 98B5     		push	{r3, r4, r7, lr}
 116              		.cfi_def_cfa_offset 16
 117              		.cfi_offset 3, -16
 118              		.cfi_offset 4, -12
 119              		.cfi_offset 7, -8
 120              		.cfi_offset 14, -4
 121              	.LBB59:
 122              	.LBB60:
 123              	.LBB61:
 124              	.LBB62:
 125              		.loc 2 264 0
 126 0002 2023     		movs	r3, #32
 127              	.LBE62:
 128              	.LBE61:
 129              	.LBE60:
 130              	.LBE59:
 131              		.loc 1 122 0
 132 0004 00AF     		add	r7, sp, #0
 133              		.cfi_def_cfa_register 7
 134              	.LBB66:
 135              	.LBB65:
 136              	.LBB64:
 137              	.LBB63:
 138              		.loc 2 264 0
 139              		.syntax unified
 140              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 141 0006 83F31188 		MSR basepri, r3
 142              	@ 0 "" 2
 143              	.LVL6:
 144              		.thumb
 145              		.syntax unified
 146              	.LBE63:
 147              	.LBE64:
 148              	.LBE65:
 149              	.LBE66:
 123:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
 124:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   port_lock_from_isr();
 125:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 150              		.loc 1 125 0
 151 000a 0F4B     		ldr	r3, .L9
 152 000c 5B68     		ldr	r3, [r3, #4]
 153 000e 13F40063 		ands	r3, r3, #2048
 154 0012 16D0     		beq	.L5
 155              	.LBB67:
 156              	.LBB68:
 157              	.LBB69:
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 158              		.loc 2 152 0
 159              		.syntax unified
 160              	@ 152 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 161 0014 EFF30984 		MRS r4, psp
 162              	
 163              	@ 0 "" 2
 164              	.LVL7:
 165              		.thumb
 166              		.syntax unified
 167              	.LBE69:
 168              	.LBE68:
 126:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     struct port_extctx *ctxp;
 127:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
 128:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** #if CORTEX_USE_FPU == TRUE
 129:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****       /* Enforcing a lazy FPU state save by accessing the FPCSR register.*/
 130:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****       (void) __get_FPSCR();
 131:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** #endif
 132:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
 133:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     /* The port_extctx structure is pointed by the PSP register.*/
 134:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     ctxp = (struct port_extctx *)__get_PSP();
 135:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
 136:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     /* Adding an artificial exception return context, there is no need to
 137:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****        populate it fully.*/
 138:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     ctxp--;
 139:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
 140:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     /* Setting up a fake XPSR register value.*/
 141:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     ctxp->xpsr = (regarm_t)0x01000000;
 169              		.loc 1 141 0
 170 0018 4FF08073 		mov	r3, #16777216
 171 001c 44F84C3C 		str	r3, [r4, #-76]
 142:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** #if CORTEX_USE_FPU == TRUE
 143:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 172              		.loc 1 143 0
 173 0020 0A4B     		ldr	r3, .L9+4
 174 0022 DB68     		ldr	r3, [r3, #12]
 175 0024 44F8083C 		str	r3, [r4, #-8]
 176              	.LVL8:
 138:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
 177              		.loc 1 138 0
 178 0028 A4F16803 		sub	r3, r4, #104
 179              	.LVL9:
 180              	.LBB70:
 181              	.LBB71:
 164:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 182              		.loc 2 164 0
 183              		.syntax unified
 184              	@ 164 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 185 002c 83F30988 		MSR psp, r3
 186              	
 187              	@ 0 "" 2
 188              	.LVL10:
 189              		.thumb
 190              		.syntax unified
 191              	.LBE71:
 192              	.LBE70:
 144:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** #endif
 145:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
 146:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     /* Writing back the modified PSP value.*/
 147:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     __set_PSP((uint32_t)ctxp);
 148:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
 149:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     /* The exit sequence is different depending on if a preemption is
 150:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****        required or not.*/
 151:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     if (chSchIsPreemptionRequired()) {
 193              		.loc 1 151 0
 194 0030 FFF7FEFF 		bl	chSchIsPreemptionRequired
 195              	.LVL11:
 196 0034 18B1     		cbz	r0, .L6
 152:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****       /* Preemption is required we need to enforce a context switch.*/
 153:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****       ctxp->pc = (regarm_t)_port_switch_from_isr;
 197              		.loc 1 153 0
 198 0036 064B     		ldr	r3, .L9+8
 199              	.L8:
 154:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     }
 155:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     else {
 156:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****       /* Preemption not required, we just need to exit the exception
 157:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****          atomically.*/
 158:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****       ctxp->pc = (regarm_t)_port_exit_from_isr;
 200              		.loc 1 158 0
 201 0038 44F8503C 		str	r3, [r4, #-80]
 202              	.LVL12:
 203              	.L4:
 204              	.LBE67:
 159:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     }
 160:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** 
 161:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     /* Note, returning without unlocking is intentional, this is done in
 162:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****        order to keep the rest of the context switch atomic.*/
 163:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     return;
 164:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   }
 165:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****   port_unlock_from_isr();
 166:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c **** }
 205              		.loc 1 166 0
 206 003c 98BD     		pop	{r3, r4, r7, pc}
 207              	.LVL13:
 208              	.L6:
 209              	.LBB72:
 158:lib/chibios/os/common/ports/ARMCMx/chcore_v7m.c ****     }
 210              		.loc 1 158 0
 211 003e 054B     		ldr	r3, .L9+12
 212 0040 FAE7     		b	.L8
 213              	.LVL14:
 214              	.L5:
 215              	.LBE72:
 216              	.LBB73:
 217              	.LBB74:
 218              	.LBB75:
 219              	.LBB76:
 220              		.loc 2 264 0
 221              		.syntax unified
 222              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 223 0042 83F31188 		MSR basepri, r3
 224              	@ 0 "" 2
 225              	.LVL15:
 226              		.thumb
 227              		.syntax unified
 228 0046 F9E7     		b	.L4
 229              	.L10:
 230              		.align	2
 231              	.L9:
 232 0048 00ED00E0 		.word	-536810240
 233 004c 30EF00E0 		.word	-536809680
 234 0050 00000000 		.word	_port_switch_from_isr
 235 0054 00000000 		.word	_port_exit_from_isr
 236              	.LBE76:
 237              	.LBE75:
 238              	.LBE74:
 239              	.LBE73:
 240              		.cfi_endproc
 241              	.LFE249:
 243              		.text
 244              	.Letext0:
 245              		.file 3 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 246              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 247              		.file 5 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 248              		.file 6 "./lib/chibios/os/rt/include/chsystypes.h"
 249              		.file 7 "./lib/chibios/os/rt/include/chschd.h"
 250              		.file 8 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 251              		.file 9 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 252              		.file 10 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 253              		.file 11 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 254              		.file 12 "./lib/chibios/os/rt/include/chtm.h"
 255              		.file 13 "./lib/chibios/os/rt/include/chsem.h"
 256              		.file 14 "./lib/chibios/os/rt/include/chmtx.h"
 257              		.file 15 "./lib/chibios/os/rt/include/chsys.h"
 258              		.file 16 "./lib/chibios/os/rt/include/chregistry.h"
 259              		.file 17 "./lib/chibios/os/common/oslib/include/chmemcore.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chcore_v7m.c
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccRY9K44.s:16     .text.SVC_Handler:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccRY9K44.s:23     .text.SVC_Handler:0000000000000000 SVC_Handler
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccRY9K44.s:96     .text.SVC_Handler:0000000000000020 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccRY9K44.s:101    .text._port_irq_epilogue:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccRY9K44.s:108    .text._port_irq_epilogue:0000000000000000 _port_irq_epilogue
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccRY9K44.s:232    .text._port_irq_epilogue:0000000000000048 $d

UNDEFINED SYMBOLS
chSchIsPreemptionRequired
_port_switch_from_isr
_port_exit_from_isr
