   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"chschd.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text._scheduler_init,"ax",%progbits
  16              		.align	1
  17              		.global	_scheduler_init
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	_scheduler_init:
  24              	.LFB248:
  25              		.file 1 "lib/chibios/os/rt/src/chschd.c"
   1:lib/chibios/os/rt/src/chschd.c **** /*
   2:lib/chibios/os/rt/src/chschd.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:lib/chibios/os/rt/src/chschd.c **** 
   4:lib/chibios/os/rt/src/chschd.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/rt/src/chschd.c **** 
   6:lib/chibios/os/rt/src/chschd.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/rt/src/chschd.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/rt/src/chschd.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/rt/src/chschd.c ****     (at your option) any later version.
  10:lib/chibios/os/rt/src/chschd.c **** 
  11:lib/chibios/os/rt/src/chschd.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/rt/src/chschd.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/rt/src/chschd.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/rt/src/chschd.c ****     GNU General Public License for more details.
  15:lib/chibios/os/rt/src/chschd.c **** 
  16:lib/chibios/os/rt/src/chschd.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/rt/src/chschd.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/rt/src/chschd.c **** */
  19:lib/chibios/os/rt/src/chschd.c **** 
  20:lib/chibios/os/rt/src/chschd.c **** /**
  21:lib/chibios/os/rt/src/chschd.c ****  * @file    chschd.c
  22:lib/chibios/os/rt/src/chschd.c ****  * @brief   Scheduler code.
  23:lib/chibios/os/rt/src/chschd.c ****  *
  24:lib/chibios/os/rt/src/chschd.c ****  * @addtogroup scheduler
  25:lib/chibios/os/rt/src/chschd.c ****  * @details This module provides the default portable scheduler code.
  26:lib/chibios/os/rt/src/chschd.c ****  * @{
  27:lib/chibios/os/rt/src/chschd.c ****  */
  28:lib/chibios/os/rt/src/chschd.c **** 
  29:lib/chibios/os/rt/src/chschd.c **** #include "ch.h"
  30:lib/chibios/os/rt/src/chschd.c **** 
  31:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  32:lib/chibios/os/rt/src/chschd.c **** /* Module local definitions.                                                 */
  33:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  34:lib/chibios/os/rt/src/chschd.c **** 
  35:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  36:lib/chibios/os/rt/src/chschd.c **** /* Module exported variables.                                                */
  37:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  38:lib/chibios/os/rt/src/chschd.c **** 
  39:lib/chibios/os/rt/src/chschd.c **** /**
  40:lib/chibios/os/rt/src/chschd.c ****  * @brief   System data structures.
  41:lib/chibios/os/rt/src/chschd.c ****  */
  42:lib/chibios/os/rt/src/chschd.c **** ch_system_t ch;
  43:lib/chibios/os/rt/src/chschd.c **** 
  44:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  45:lib/chibios/os/rt/src/chschd.c **** /* Module local types.                                                       */
  46:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  47:lib/chibios/os/rt/src/chschd.c **** 
  48:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  49:lib/chibios/os/rt/src/chschd.c **** /* Module local variables.                                                   */
  50:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  51:lib/chibios/os/rt/src/chschd.c **** 
  52:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  53:lib/chibios/os/rt/src/chschd.c **** /* Module local functions.                                                   */
  54:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  55:lib/chibios/os/rt/src/chschd.c **** 
  56:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  57:lib/chibios/os/rt/src/chschd.c **** /* Module exported functions.                                                */
  58:lib/chibios/os/rt/src/chschd.c **** /*===========================================================================*/
  59:lib/chibios/os/rt/src/chschd.c **** 
  60:lib/chibios/os/rt/src/chschd.c **** /**
  61:lib/chibios/os/rt/src/chschd.c ****  * @brief   Scheduler initialization.
  62:lib/chibios/os/rt/src/chschd.c ****  *
  63:lib/chibios/os/rt/src/chschd.c ****  * @notapi
  64:lib/chibios/os/rt/src/chschd.c ****  */
  65:lib/chibios/os/rt/src/chschd.c **** void _scheduler_init(void) {
  26              		.loc 1 65 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32              	.LBB84:
  33              	.LBB85:
  34              		.file 2 "./lib/chibios/os/rt/include/chschd.h"
   1:./lib/chibios/os/rt/include/chschd.h **** /*
   2:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chschd.h **** 
   4:./lib/chibios/os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chschd.h **** 
   6:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chschd.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chschd.h **** 
  11:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chschd.h **** 
  16:./lib/chibios/os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chschd.h **** */
  19:./lib/chibios/os/rt/include/chschd.h **** 
  20:./lib/chibios/os/rt/include/chschd.h **** /**
  21:./lib/chibios/os/rt/include/chschd.h ****  * @file    chschd.h
  22:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:./lib/chibios/os/rt/include/chschd.h ****  *
  24:./lib/chibios/os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:./lib/chibios/os/rt/include/chschd.h ****  * @{
  26:./lib/chibios/os/rt/include/chschd.h ****  */
  27:./lib/chibios/os/rt/include/chschd.h **** 
  28:./lib/chibios/os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:./lib/chibios/os/rt/include/chschd.h **** #define CHSCHD_H
  30:./lib/chibios/os/rt/include/chschd.h **** 
  31:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chschd.h **** 
  35:./lib/chibios/os/rt/include/chschd.h **** /**
  36:./lib/chibios/os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:./lib/chibios/os/rt/include/chschd.h ****  * @{
  38:./lib/chibios/os/rt/include/chschd.h ****  */
  39:./lib/chibios/os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:./lib/chibios/os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  42:./lib/chibios/os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  44:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  45:./lib/chibios/os/rt/include/chschd.h **** 
  46:./lib/chibios/os/rt/include/chschd.h **** /**
  47:./lib/chibios/os/rt/include/chschd.h ****  * @name    Priority constants
  48:./lib/chibios/os/rt/include/chschd.h ****  * @{
  49:./lib/chibios/os/rt/include/chschd.h ****  */
  50:./lib/chibios/os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:./lib/chibios/os/rt/include/chschd.h ****                                                  priority.                  */
  52:./lib/chibios/os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:./lib/chibios/os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:./lib/chibios/os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:./lib/chibios/os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  57:./lib/chibios/os/rt/include/chschd.h **** 
  58:./lib/chibios/os/rt/include/chschd.h **** /**
  59:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread states
  60:./lib/chibios/os/rt/include/chschd.h ****  * @{
  61:./lib/chibios/os/rt/include/chschd.h ****  */
  62:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:./lib/chibios/os/rt/include/chschd.h ****                                                   ready list.               */
  64:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:./lib/chibios/os/rt/include/chschd.h ****                                                   in queue.                 */
  77:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:./lib/chibios/os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:./lib/chibios/os/rt/include/chschd.h ****                                                   message.                  */
  81:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:./lib/chibios/os/rt/include/chschd.h **** 
  83:./lib/chibios/os/rt/include/chschd.h **** /**
  84:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:./lib/chibios/os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:./lib/chibios/os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:./lib/chibios/os/rt/include/chschd.h ****  */
  88:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:./lib/chibios/os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:./lib/chibios/os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:./lib/chibios/os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  93:./lib/chibios/os/rt/include/chschd.h **** 
  94:./lib/chibios/os/rt/include/chschd.h **** /**
  95:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:./lib/chibios/os/rt/include/chschd.h ****  * @{
  97:./lib/chibios/os/rt/include/chschd.h ****  */
  98:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:./lib/chibios/os/rt/include/chschd.h ****                                                  mask.                      */
 100:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:./lib/chibios/os/rt/include/chschd.h ****                                                  flag.                      */
 107:./lib/chibios/os/rt/include/chschd.h **** /** @} */
 108:./lib/chibios/os/rt/include/chschd.h **** 
 109:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 110:./lib/chibios/os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 112:./lib/chibios/os/rt/include/chschd.h **** 
 113:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 114:./lib/chibios/os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 116:./lib/chibios/os/rt/include/chschd.h **** 
 117:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_ENTER_HOOK)
 118:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_ENTER_HOOK not defined in chconf.h"
 119:./lib/chibios/os/rt/include/chschd.h **** #endif
 120:./lib/chibios/os/rt/include/chschd.h **** 
 121:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LEAVE_HOOK)
 122:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LEAVE_HOOK not defined in chconf.h"
 123:./lib/chibios/os/rt/include/chschd.h **** #endif
 124:./lib/chibios/os/rt/include/chschd.h **** 
 125:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LOOP_HOOK)
 126:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LOOP_HOOK not defined in chconf.h"
 127:./lib/chibios/os/rt/include/chschd.h **** #endif
 128:./lib/chibios/os/rt/include/chschd.h **** 
 129:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 130:./lib/chibios/os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 131:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 132:./lib/chibios/os/rt/include/chschd.h **** 
 133:./lib/chibios/os/rt/include/chschd.h **** /**
 134:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 135:./lib/chibios/os/rt/include/chschd.h ****  */
 136:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_list {
 137:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 138:./lib/chibios/os/rt/include/chschd.h **** };
 139:./lib/chibios/os/rt/include/chschd.h **** 
 140:./lib/chibios/os/rt/include/chschd.h **** /**
 141:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 142:./lib/chibios/os/rt/include/chschd.h ****  */
 143:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_queue {
 144:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 145:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 146:./lib/chibios/os/rt/include/chschd.h **** };
 147:./lib/chibios/os/rt/include/chschd.h **** 
 148:./lib/chibios/os/rt/include/chschd.h **** /**
 149:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 150:./lib/chibios/os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 151:./lib/chibios/os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 152:./lib/chibios/os/rt/include/chschd.h ****  *          by shrinking this structure.
 153:./lib/chibios/os/rt/include/chschd.h ****  */
 154:./lib/chibios/os/rt/include/chschd.h **** struct ch_thread {
 155:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 156:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 157:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 158:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 159:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 160:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 161:./lib/chibios/os/rt/include/chschd.h **** #endif
 162:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 163:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 164:./lib/chibios/os/rt/include/chschd.h ****   /**
 165:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 166:./lib/chibios/os/rt/include/chschd.h ****    */
 167:./lib/chibios/os/rt/include/chschd.h ****   const char            *name;
 168:./lib/chibios/os/rt/include/chschd.h **** #endif
 169:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 170:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 171:./lib/chibios/os/rt/include/chschd.h ****   /**
 172:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Working area base address.
 173:./lib/chibios/os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 174:./lib/chibios/os/rt/include/chschd.h ****    *          dynamic threading.
 175:./lib/chibios/os/rt/include/chschd.h ****    */
 176:./lib/chibios/os/rt/include/chschd.h ****   stkalign_t            *wabase;
 177:./lib/chibios/os/rt/include/chschd.h **** #endif
 178:./lib/chibios/os/rt/include/chschd.h ****   /**
 179:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Current thread state.
 180:./lib/chibios/os/rt/include/chschd.h ****    */
 181:./lib/chibios/os/rt/include/chschd.h ****   tstate_t              state;
 182:./lib/chibios/os/rt/include/chschd.h ****   /**
 183:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Various thread flags.
 184:./lib/chibios/os/rt/include/chschd.h ****    */
 185:./lib/chibios/os/rt/include/chschd.h ****   tmode_t               flags;
 186:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 187:./lib/chibios/os/rt/include/chschd.h ****   /**
 188:./lib/chibios/os/rt/include/chschd.h ****    * @brief   References to this thread.
 189:./lib/chibios/os/rt/include/chschd.h ****    */
 190:./lib/chibios/os/rt/include/chschd.h ****   trefs_t               refs;
 191:./lib/chibios/os/rt/include/chschd.h **** #endif
 192:./lib/chibios/os/rt/include/chschd.h ****   /**
 193:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 194:./lib/chibios/os/rt/include/chschd.h ****    */
 195:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 196:./lib/chibios/os/rt/include/chschd.h ****   tslices_t             preempt;
 197:./lib/chibios/os/rt/include/chschd.h **** #endif
 198:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 199:./lib/chibios/os/rt/include/chschd.h ****   /**
 200:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 201:./lib/chibios/os/rt/include/chschd.h ****    * @note    This field can overflow.
 202:./lib/chibios/os/rt/include/chschd.h ****    */
 203:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    time;
 204:./lib/chibios/os/rt/include/chschd.h **** #endif
 205:./lib/chibios/os/rt/include/chschd.h ****   /**
 206:./lib/chibios/os/rt/include/chschd.h ****    * @brief   State-specific fields.
 207:./lib/chibios/os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 208:./lib/chibios/os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 209:./lib/chibios/os/rt/include/chschd.h ****    */
 210:./lib/chibios/os/rt/include/chschd.h ****   union {
 211:./lib/chibios/os/rt/include/chschd.h ****     /**
 212:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 213:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 214:./lib/chibios/os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 215:./lib/chibios/os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 216:./lib/chibios/os/rt/include/chschd.h ****      */
 217:./lib/chibios/os/rt/include/chschd.h ****     msg_t               rdymsg;
 218:./lib/chibios/os/rt/include/chschd.h ****     /**
 219:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread exit code.
 220:./lib/chibios/os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 221:./lib/chibios/os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 222:./lib/chibios/os/rt/include/chschd.h ****      *          this thread.
 223:./lib/chibios/os/rt/include/chschd.h ****      */
 224:./lib/chibios/os/rt/include/chschd.h ****     msg_t               exitcode;
 225:./lib/chibios/os/rt/include/chschd.h ****     /**
 226:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 227:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 228:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 229:./lib/chibios/os/rt/include/chschd.h ****      *          states.
 230:./lib/chibios/os/rt/include/chschd.h ****      */
 231:./lib/chibios/os/rt/include/chschd.h ****     void                *wtobjp;
 232:./lib/chibios/os/rt/include/chschd.h ****     /**
 233:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 234:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 235:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 236:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 237:./lib/chibios/os/rt/include/chschd.h ****      */
 238:./lib/chibios/os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 239:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 240:./lib/chibios/os/rt/include/chschd.h ****     /**
 241:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread sent message.
 242:./lib/chibios/os/rt/include/chschd.h ****      */
 243:./lib/chibios/os/rt/include/chschd.h ****     msg_t               sentmsg;
 244:./lib/chibios/os/rt/include/chschd.h **** #endif
 245:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 246:./lib/chibios/os/rt/include/chschd.h ****     /**
 247:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 248:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 249:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 250:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 251:./lib/chibios/os/rt/include/chschd.h ****      */
 252:./lib/chibios/os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 253:./lib/chibios/os/rt/include/chschd.h **** #endif
 254:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 255:./lib/chibios/os/rt/include/chschd.h ****     /**
 256:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 257:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 258:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 259:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 260:./lib/chibios/os/rt/include/chschd.h ****      */
 261:./lib/chibios/os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 262:./lib/chibios/os/rt/include/chschd.h **** #endif
 263:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 264:./lib/chibios/os/rt/include/chschd.h ****     /**
 265:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 266:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 267:./lib/chibios/os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 268:./lib/chibios/os/rt/include/chschd.h ****      */
 269:./lib/chibios/os/rt/include/chschd.h ****     eventmask_t         ewmask;
 270:./lib/chibios/os/rt/include/chschd.h **** #endif
 271:./lib/chibios/os/rt/include/chschd.h ****   }                     u;
 272:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 273:./lib/chibios/os/rt/include/chschd.h ****   /**
 274:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 275:./lib/chibios/os/rt/include/chschd.h ****    */
 276:./lib/chibios/os/rt/include/chschd.h ****   threads_list_t        waiting;
 277:./lib/chibios/os/rt/include/chschd.h **** #endif
 278:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chschd.h ****   /**
 280:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Messages queue.
 281:./lib/chibios/os/rt/include/chschd.h ****    */
 282:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 283:./lib/chibios/os/rt/include/chschd.h **** #endif
 284:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 285:./lib/chibios/os/rt/include/chschd.h ****   /**
 286:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pending events mask.
 287:./lib/chibios/os/rt/include/chschd.h ****    */
 288:./lib/chibios/os/rt/include/chschd.h ****   eventmask_t           epending;
 289:./lib/chibios/os/rt/include/chschd.h **** #endif
 290:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 291:./lib/chibios/os/rt/include/chschd.h ****   /**
 292:./lib/chibios/os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 293:./lib/chibios/os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 294:./lib/chibios/os/rt/include/chschd.h ****    */
 295:./lib/chibios/os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 296:./lib/chibios/os/rt/include/chschd.h ****   /**
 297:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 298:./lib/chibios/os/rt/include/chschd.h ****    */
 299:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               realprio;
 300:./lib/chibios/os/rt/include/chschd.h **** #endif
 301:./lib/chibios/os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 302:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 303:./lib/chibios/os/rt/include/chschd.h ****   /**
 304:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 305:./lib/chibios/os/rt/include/chschd.h ****    */
 306:./lib/chibios/os/rt/include/chschd.h ****   void                  *mpool;
 307:./lib/chibios/os/rt/include/chschd.h **** #endif
 308:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 309:./lib/chibios/os/rt/include/chschd.h ****   /**
 310:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread statistics.
 311:./lib/chibios/os/rt/include/chschd.h ****    */
 312:./lib/chibios/os/rt/include/chschd.h ****   time_measurement_t    stats;
 313:./lib/chibios/os/rt/include/chschd.h **** #endif
 314:./lib/chibios/os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 315:./lib/chibios/os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 316:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 317:./lib/chibios/os/rt/include/chschd.h **** #endif
 318:./lib/chibios/os/rt/include/chschd.h **** };
 319:./lib/chibios/os/rt/include/chschd.h **** 
 320:./lib/chibios/os/rt/include/chschd.h **** /**
 321:./lib/chibios/os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 322:./lib/chibios/os/rt/include/chschd.h ****  *
 323:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 324:./lib/chibios/os/rt/include/chschd.h ****  */
 325:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timer {
 326:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 327:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 328:./lib/chibios/os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Time delta before timeout.  */
 329:./lib/chibios/os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 330:./lib/chibios/os/rt/include/chschd.h ****                                                 pointer.                    */
 331:./lib/chibios/os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 332:./lib/chibios/os/rt/include/chschd.h ****                                                 parameter.                  */
 333:./lib/chibios/os/rt/include/chschd.h **** };
 334:./lib/chibios/os/rt/include/chschd.h **** 
 335:./lib/chibios/os/rt/include/chschd.h **** /**
 336:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 337:./lib/chibios/os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 338:./lib/chibios/os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 339:./lib/chibios/os/rt/include/chschd.h ****  *          timer is often used in the code.
 340:./lib/chibios/os/rt/include/chschd.h ****  */
 341:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 342:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 343:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 344:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 345:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 346:./lib/chibios/os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Must be initialized to -1.  */
 347:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 348:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 349:./lib/chibios/os/rt/include/chschd.h **** #endif
 350:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 351:./lib/chibios/os/rt/include/chschd.h ****   /**
 352:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 353:./lib/chibios/os/rt/include/chschd.h ****    */
 354:./lib/chibios/os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 355:./lib/chibios/os/rt/include/chschd.h ****                                                 tick event.                 */
 356:./lib/chibios/os/rt/include/chschd.h **** #endif
 357:./lib/chibios/os/rt/include/chschd.h **** };
 358:./lib/chibios/os/rt/include/chschd.h **** 
 359:./lib/chibios/os/rt/include/chschd.h **** /**
 360:./lib/chibios/os/rt/include/chschd.h ****  * @extends threads_queue_t
 361:./lib/chibios/os/rt/include/chschd.h ****  */
 362:./lib/chibios/os/rt/include/chschd.h **** struct ch_ready_list {
 363:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 364:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 365:./lib/chibios/os/rt/include/chschd.h ****                                                 initialized to zero.        */
 366:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 367:./lib/chibios/os/rt/include/chschd.h ****                                                 offsets.                    */
 368:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 369:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 370:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 371:./lib/chibios/os/rt/include/chschd.h **** #endif
 372:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 373:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 374:./lib/chibios/os/rt/include/chschd.h ****                                                 thread.                     */
 375:./lib/chibios/os/rt/include/chschd.h **** };
 376:./lib/chibios/os/rt/include/chschd.h **** 
 377:./lib/chibios/os/rt/include/chschd.h **** /**
 378:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System debug data structure.
 379:./lib/chibios/os/rt/include/chschd.h ****  */
 380:./lib/chibios/os/rt/include/chschd.h **** struct ch_system_debug {
 381:./lib/chibios/os/rt/include/chschd.h ****   /**
 382:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 383:./lib/chibios/os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 384:./lib/chibios/os/rt/include/chschd.h ****    *          written once and then the system is halted.
 385:./lib/chibios/os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 386:./lib/chibios/os/rt/include/chschd.h ****    *          field itself is declared volatile.
 387:./lib/chibios/os/rt/include/chschd.h ****    */
 388:./lib/chibios/os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 389:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 390:./lib/chibios/os/rt/include/chschd.h ****   /**
 391:./lib/chibios/os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 392:./lib/chibios/os/rt/include/chschd.h ****    */
 393:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 394:./lib/chibios/os/rt/include/chschd.h ****   /**
 395:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 396:./lib/chibios/os/rt/include/chschd.h ****    */
 397:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 398:./lib/chibios/os/rt/include/chschd.h **** #endif
 399:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 400:./lib/chibios/os/rt/include/chschd.h ****   /**
 401:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 402:./lib/chibios/os/rt/include/chschd.h ****    */
 403:./lib/chibios/os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 404:./lib/chibios/os/rt/include/chschd.h **** #endif
 405:./lib/chibios/os/rt/include/chschd.h **** };
 406:./lib/chibios/os/rt/include/chschd.h **** 
 407:./lib/chibios/os/rt/include/chschd.h **** /**
 408:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System data structure.
 409:./lib/chibios/os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 410:./lib/chibios/os/rt/include/chschd.h ****  *          stacks.
 411:./lib/chibios/os/rt/include/chschd.h ****  */
 412:./lib/chibios/os/rt/include/chschd.h **** struct ch_system {
 413:./lib/chibios/os/rt/include/chschd.h ****   /**
 414:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Ready list header.
 415:./lib/chibios/os/rt/include/chschd.h ****    */
 416:./lib/chibios/os/rt/include/chschd.h ****   ready_list_t          rlist;
 417:./lib/chibios/os/rt/include/chschd.h ****   /**
 418:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 419:./lib/chibios/os/rt/include/chschd.h ****    */
 420:./lib/chibios/os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 421:./lib/chibios/os/rt/include/chschd.h ****   /**
 422:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System debug.
 423:./lib/chibios/os/rt/include/chschd.h ****    */
 424:./lib/chibios/os/rt/include/chschd.h ****   system_debug_t        dbg;
 425:./lib/chibios/os/rt/include/chschd.h ****   /**
 426:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 427:./lib/chibios/os/rt/include/chschd.h ****    */
 428:./lib/chibios/os/rt/include/chschd.h ****   thread_t              mainthread;
 429:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 430:./lib/chibios/os/rt/include/chschd.h ****   /**
 431:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 432:./lib/chibios/os/rt/include/chschd.h ****    */
 433:./lib/chibios/os/rt/include/chschd.h ****   tm_calibration_t      tm;
 434:./lib/chibios/os/rt/include/chschd.h **** #endif
 435:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 436:./lib/chibios/os/rt/include/chschd.h ****   /**
 437:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 438:./lib/chibios/os/rt/include/chschd.h ****    */
 439:./lib/chibios/os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 440:./lib/chibios/os/rt/include/chschd.h **** #endif
 441:./lib/chibios/os/rt/include/chschd.h **** };
 442:./lib/chibios/os/rt/include/chschd.h **** 
 443:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 444:./lib/chibios/os/rt/include/chschd.h **** /* Module macros.                                                            */
 445:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 446:./lib/chibios/os/rt/include/chschd.h **** 
 447:./lib/chibios/os/rt/include/chschd.h **** /**
 448:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 449:./lib/chibios/os/rt/include/chschd.h ****  *
 450:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 451:./lib/chibios/os/rt/include/chschd.h ****  */
 452:./lib/chibios/os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 453:./lib/chibios/os/rt/include/chschd.h **** 
 454:./lib/chibios/os/rt/include/chschd.h **** /**
 455:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 456:./lib/chibios/os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 457:./lib/chibios/os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 458:./lib/chibios/os/rt/include/chschd.h ****  */
 459:./lib/chibios/os/rt/include/chschd.h **** #define currp ch.rlist.current
 460:./lib/chibios/os/rt/include/chschd.h **** 
 461:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 462:./lib/chibios/os/rt/include/chschd.h **** /* External declarations.                                                    */
 463:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 464:./lib/chibios/os/rt/include/chschd.h **** 
 465:./lib/chibios/os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 466:./lib/chibios/os/rt/include/chschd.h **** extern ch_system_t ch;
 467:./lib/chibios/os/rt/include/chschd.h **** #endif
 468:./lib/chibios/os/rt/include/chschd.h **** 
 469:./lib/chibios/os/rt/include/chschd.h **** /*
 470:./lib/chibios/os/rt/include/chschd.h ****  * Scheduler APIs.
 471:./lib/chibios/os/rt/include/chschd.h ****  */
 472:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 473:./lib/chibios/os/rt/include/chschd.h **** extern "C" {
 474:./lib/chibios/os/rt/include/chschd.h **** #endif
 475:./lib/chibios/os/rt/include/chschd.h ****   void _scheduler_init(void);
 476:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 477:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 478:./lib/chibios/os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 479:./lib/chibios/os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time);
 480:./lib/chibios/os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 481:./lib/chibios/os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 482:./lib/chibios/os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 483:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 484:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 485:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 486:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 487:./lib/chibios/os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 488:./lib/chibios/os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 489:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 490:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 491:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 492:./lib/chibios/os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 493:./lib/chibios/os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 494:./lib/chibios/os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 495:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 496:./lib/chibios/os/rt/include/chschd.h **** }
 497:./lib/chibios/os/rt/include/chschd.h **** #endif
 498:./lib/chibios/os/rt/include/chschd.h **** 
 499:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 500:./lib/chibios/os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 501:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 502:./lib/chibios/os/rt/include/chschd.h **** 
 503:./lib/chibios/os/rt/include/chschd.h **** /**
 504:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 505:./lib/chibios/os/rt/include/chschd.h ****  *
 506:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 507:./lib/chibios/os/rt/include/chschd.h ****  *
 508:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 509:./lib/chibios/os/rt/include/chschd.h ****  */
 510:./lib/chibios/os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 511:./lib/chibios/os/rt/include/chschd.h **** 
 512:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 513:./lib/chibios/os/rt/include/chschd.h **** }
 514:./lib/chibios/os/rt/include/chschd.h **** 
 515:./lib/chibios/os/rt/include/chschd.h **** /**
 516:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 517:./lib/chibios/os/rt/include/chschd.h ****  *
 518:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 519:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 520:./lib/chibios/os/rt/include/chschd.h ****  *
 521:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 522:./lib/chibios/os/rt/include/chschd.h ****  */
 523:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 524:./lib/chibios/os/rt/include/chschd.h **** 
 525:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 526:./lib/chibios/os/rt/include/chschd.h **** }
 527:./lib/chibios/os/rt/include/chschd.h **** 
 528:./lib/chibios/os/rt/include/chschd.h **** /**
 529:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 530:./lib/chibios/os/rt/include/chschd.h ****  *
 531:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 532:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 533:./lib/chibios/os/rt/include/chschd.h ****  *
 534:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 535:./lib/chibios/os/rt/include/chschd.h ****  */
 536:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 537:./lib/chibios/os/rt/include/chschd.h **** 
 538:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 539:./lib/chibios/os/rt/include/chschd.h **** }
 540:./lib/chibios/os/rt/include/chschd.h **** 
 541:./lib/chibios/os/rt/include/chschd.h **** /**
 542:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 543:./lib/chibios/os/rt/include/chschd.h ****  *
 544:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 545:./lib/chibios/os/rt/include/chschd.h ****  *
 546:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 547:./lib/chibios/os/rt/include/chschd.h ****  */
 548:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 549:./lib/chibios/os/rt/include/chschd.h **** 
 550:./lib/chibios/os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
  35              		.loc 2 550 0
  36 0000 034B     		ldr	r3, .L2
  37              	.LBE85:
  38              	.LBE84:
  66:lib/chibios/os/rt/src/chschd.c **** 
  67:lib/chibios/os/rt/src/chschd.c ****   queue_init(&ch.rlist.queue);
  68:lib/chibios/os/rt/src/chschd.c ****   ch.rlist.prio = NOPRIO;
  39              		.loc 1 68 0
  40 0002 0022     		movs	r2, #0
  41              	.LBB87:
  42              	.LBB86:
 551:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  43              		.loc 2 551 0
  44 0004 C3E90033 		strd	r3, r3, [r3]
  45              	.LVL1:
  46              	.LBE86:
  47              	.LBE87:
  48              		.loc 1 68 0
  49 0008 9A60     		str	r2, [r3, #8]
  69:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_USE_REGISTRY == TRUE
  70:lib/chibios/os/rt/src/chschd.c ****   ch.rlist.newer = (thread_t *)&ch.rlist;
  71:lib/chibios/os/rt/src/chschd.c ****   ch.rlist.older = (thread_t *)&ch.rlist;
  50              		.loc 1 71 0
  51 000a C3E90433 		strd	r3, r3, [r3, #16]
  72:lib/chibios/os/rt/src/chschd.c **** #endif
  73:lib/chibios/os/rt/src/chschd.c **** }
  52              		.loc 1 73 0
  53 000e 7047     		bx	lr
  54              	.L3:
  55              		.align	2
  56              	.L2:
  57 0010 00000000 		.word	.LANCHOR0
  58              		.cfi_endproc
  59              	.LFE248:
  61              		.section	.text.chSchReadyI,"ax",%progbits
  62              		.align	1
  63              		.global	chSchReadyI
  64              		.syntax unified
  65              		.thumb
  66              		.thumb_func
  67              		.fpu softvfp
  69              	chSchReadyI:
  70              	.LFB249:
  74:lib/chibios/os/rt/src/chschd.c **** 
  75:lib/chibios/os/rt/src/chschd.c **** #if (CH_CFG_OPTIMIZE_SPEED == FALSE) || defined(__DOXYGEN__)
  76:lib/chibios/os/rt/src/chschd.c **** /**
  77:lib/chibios/os/rt/src/chschd.c ****  * @brief   Inserts a thread into a priority ordered queue.
  78:lib/chibios/os/rt/src/chschd.c ****  * @note    The insertion is done by scanning the list from the highest
  79:lib/chibios/os/rt/src/chschd.c ****  *          priority toward the lowest.
  80:lib/chibios/os/rt/src/chschd.c ****  *
  81:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the pointer to the thread to be inserted in the list
  82:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tqp       the pointer to the threads list header
  83:lib/chibios/os/rt/src/chschd.c ****  *
  84:lib/chibios/os/rt/src/chschd.c ****  * @notapi
  85:lib/chibios/os/rt/src/chschd.c ****  */
  86:lib/chibios/os/rt/src/chschd.c **** void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
  87:lib/chibios/os/rt/src/chschd.c **** 
  88:lib/chibios/os/rt/src/chschd.c ****   thread_t *cp = (thread_t *)tqp;
  89:lib/chibios/os/rt/src/chschd.c ****   do {
  90:lib/chibios/os/rt/src/chschd.c ****     cp = cp->queue.next;
  91:lib/chibios/os/rt/src/chschd.c ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  92:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next             = cp;
  93:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
  94:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
  95:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
  96:lib/chibios/os/rt/src/chschd.c **** }
  97:lib/chibios/os/rt/src/chschd.c **** 
  98:lib/chibios/os/rt/src/chschd.c **** /**
  99:lib/chibios/os/rt/src/chschd.c ****  * @brief   Inserts a thread into a queue.
 100:lib/chibios/os/rt/src/chschd.c ****  *
 101:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the pointer to the thread to be inserted in the list
 102:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tqp       the pointer to the threads list header
 103:lib/chibios/os/rt/src/chschd.c ****  *
 104:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 105:lib/chibios/os/rt/src/chschd.c ****  */
 106:lib/chibios/os/rt/src/chschd.c **** void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 107:lib/chibios/os/rt/src/chschd.c **** 
 108:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next             = (thread_t *)tqp;
 109:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = tqp->prev;
 110:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 111:lib/chibios/os/rt/src/chschd.c ****   tqp->prev                  = tp;
 112:lib/chibios/os/rt/src/chschd.c **** }
 113:lib/chibios/os/rt/src/chschd.c **** 
 114:lib/chibios/os/rt/src/chschd.c **** /**
 115:lib/chibios/os/rt/src/chschd.c ****  * @brief   Removes the first-out thread from a queue and returns it.
 116:lib/chibios/os/rt/src/chschd.c ****  * @note    If the queue is priority ordered then this function returns the
 117:lib/chibios/os/rt/src/chschd.c ****  *          thread with the highest priority.
 118:lib/chibios/os/rt/src/chschd.c ****  *
 119:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tqp       the pointer to the threads list header
 120:lib/chibios/os/rt/src/chschd.c ****  * @return              The removed thread pointer.
 121:lib/chibios/os/rt/src/chschd.c ****  *
 122:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 123:lib/chibios/os/rt/src/chschd.c ****  */
 124:lib/chibios/os/rt/src/chschd.c **** thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 125:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = tqp->next;
 126:lib/chibios/os/rt/src/chschd.c **** 
 127:lib/chibios/os/rt/src/chschd.c ****   tqp->next             = tp->queue.next;
 128:lib/chibios/os/rt/src/chschd.c ****   tqp->next->queue.prev = (thread_t *)tqp;
 129:lib/chibios/os/rt/src/chschd.c **** 
 130:lib/chibios/os/rt/src/chschd.c ****   return tp;
 131:lib/chibios/os/rt/src/chschd.c **** }
 132:lib/chibios/os/rt/src/chschd.c **** 
 133:lib/chibios/os/rt/src/chschd.c **** /**
 134:lib/chibios/os/rt/src/chschd.c ****  * @brief   Removes the last-out thread from a queue and returns it.
 135:lib/chibios/os/rt/src/chschd.c ****  * @note    If the queue is priority ordered then this function returns the
 136:lib/chibios/os/rt/src/chschd.c ****  *          thread with the lowest priority.
 137:lib/chibios/os/rt/src/chschd.c ****  *
 138:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tqp   the pointer to the threads list header
 139:lib/chibios/os/rt/src/chschd.c ****  * @return          The removed thread pointer.
 140:lib/chibios/os/rt/src/chschd.c ****  *
 141:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 142:lib/chibios/os/rt/src/chschd.c ****  */
 143:lib/chibios/os/rt/src/chschd.c **** thread_t *queue_lifo_remove(threads_queue_t *tqp) {
 144:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = tqp->prev;
 145:lib/chibios/os/rt/src/chschd.c **** 
 146:lib/chibios/os/rt/src/chschd.c ****   tqp->prev             = tp->queue.prev;
 147:lib/chibios/os/rt/src/chschd.c ****   tqp->prev->queue.next = (thread_t *)tqp;
 148:lib/chibios/os/rt/src/chschd.c **** 
 149:lib/chibios/os/rt/src/chschd.c ****   return tp;
 150:lib/chibios/os/rt/src/chschd.c **** }
 151:lib/chibios/os/rt/src/chschd.c **** 
 152:lib/chibios/os/rt/src/chschd.c **** /**
 153:lib/chibios/os/rt/src/chschd.c ****  * @brief   Removes a thread from a queue and returns it.
 154:lib/chibios/os/rt/src/chschd.c ****  * @details The thread is removed from the queue regardless of its relative
 155:lib/chibios/os/rt/src/chschd.c ****  *          position and regardless the used insertion method.
 156:lib/chibios/os/rt/src/chschd.c ****  *
 157:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the pointer to the thread to be removed from the queue
 158:lib/chibios/os/rt/src/chschd.c ****  * @return              The removed thread pointer.
 159:lib/chibios/os/rt/src/chschd.c ****  *
 160:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 161:lib/chibios/os/rt/src/chschd.c ****  */
 162:lib/chibios/os/rt/src/chschd.c **** thread_t *queue_dequeue(thread_t *tp) {
 163:lib/chibios/os/rt/src/chschd.c **** 
 164:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp->queue.next;
 165:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next->queue.prev = tp->queue.prev;
 166:lib/chibios/os/rt/src/chschd.c **** 
 167:lib/chibios/os/rt/src/chschd.c ****   return tp;
 168:lib/chibios/os/rt/src/chschd.c **** }
 169:lib/chibios/os/rt/src/chschd.c **** 
 170:lib/chibios/os/rt/src/chschd.c **** /**
 171:lib/chibios/os/rt/src/chschd.c ****  * @brief   Pushes a thread_t on top of a stack list.
 172:lib/chibios/os/rt/src/chschd.c ****  *
 173:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp    the pointer to the thread to be inserted in the list
 174:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tlp   the pointer to the threads list header
 175:lib/chibios/os/rt/src/chschd.c ****  *
 176:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 177:lib/chibios/os/rt/src/chschd.c ****  */
 178:lib/chibios/os/rt/src/chschd.c **** void list_insert(thread_t *tp, threads_list_t *tlp) {
 179:lib/chibios/os/rt/src/chschd.c **** 
 180:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next = tlp->next;
 181:lib/chibios/os/rt/src/chschd.c ****   tlp->next      = tp;
 182:lib/chibios/os/rt/src/chschd.c **** }
 183:lib/chibios/os/rt/src/chschd.c **** 
 184:lib/chibios/os/rt/src/chschd.c **** /**
 185:lib/chibios/os/rt/src/chschd.c ****  * @brief   Pops a thread from the top of a stack list and returns it.
 186:lib/chibios/os/rt/src/chschd.c ****  * @pre     The list must be non-empty before calling this function.
 187:lib/chibios/os/rt/src/chschd.c ****  *
 188:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tlp       the pointer to the threads list header
 189:lib/chibios/os/rt/src/chschd.c ****  * @return              The removed thread pointer.
 190:lib/chibios/os/rt/src/chschd.c ****  *
 191:lib/chibios/os/rt/src/chschd.c ****  * @notapi
 192:lib/chibios/os/rt/src/chschd.c ****  */
 193:lib/chibios/os/rt/src/chschd.c **** thread_t *list_remove(threads_list_t *tlp) {
 194:lib/chibios/os/rt/src/chschd.c **** 
 195:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = tlp->next;
 196:lib/chibios/os/rt/src/chschd.c ****   tlp->next = tp->queue.next;
 197:lib/chibios/os/rt/src/chschd.c **** 
 198:lib/chibios/os/rt/src/chschd.c ****   return tp;
 199:lib/chibios/os/rt/src/chschd.c **** }
 200:lib/chibios/os/rt/src/chschd.c **** #endif /* CH_CFG_OPTIMIZE_SPEED */
 201:lib/chibios/os/rt/src/chschd.c **** 
 202:lib/chibios/os/rt/src/chschd.c **** /**
 203:lib/chibios/os/rt/src/chschd.c ****  * @brief   Inserts a thread in the Ready List placing it behind its peers.
 204:lib/chibios/os/rt/src/chschd.c ****  * @details The thread is positioned behind all threads with higher or equal
 205:lib/chibios/os/rt/src/chschd.c ****  *          priority.
 206:lib/chibios/os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
 207:lib/chibios/os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
 208:lib/chibios/os/rt/src/chschd.c ****  * @post    This function does not reschedule so a call to a rescheduling
 209:lib/chibios/os/rt/src/chschd.c ****  *          function must be performed before unlocking the kernel. Note that
 210:lib/chibios/os/rt/src/chschd.c ****  *          interrupt handlers always reschedule on exit so an explicit
 211:lib/chibios/os/rt/src/chschd.c ****  *          reschedule must not be performed in ISRs.
 212:lib/chibios/os/rt/src/chschd.c ****  *
 213:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the thread to be made ready
 214:lib/chibios/os/rt/src/chschd.c ****  * @return              The thread pointer.
 215:lib/chibios/os/rt/src/chschd.c ****  *
 216:lib/chibios/os/rt/src/chschd.c ****  * @iclass
 217:lib/chibios/os/rt/src/chschd.c ****  */
 218:lib/chibios/os/rt/src/chschd.c **** thread_t *chSchReadyI(thread_t *tp) {
  71              		.loc 1 218 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              		@ link register save eliminated.
  76              	.LVL2:
 219:lib/chibios/os/rt/src/chschd.c ****   thread_t *cp;
 220:lib/chibios/os/rt/src/chschd.c **** 
 221:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassI();
 222:lib/chibios/os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
 223:lib/chibios/os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 224:lib/chibios/os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 225:lib/chibios/os/rt/src/chschd.c ****               "invalid state");
 226:lib/chibios/os/rt/src/chschd.c **** 
 227:lib/chibios/os/rt/src/chschd.c ****   tp->state = CH_STATE_READY;
  77              		.loc 1 227 0
  78 0000 0023     		movs	r3, #0
  79 0002 80F82030 		strb	r3, [r0, #32]
  80              	.LVL3:
 228:lib/chibios/os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 229:lib/chibios/os/rt/src/chschd.c ****   do {
 230:lib/chibios/os/rt/src/chschd.c ****     cp = cp->queue.next;
 231:lib/chibios/os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
  81              		.loc 1 231 0
  82 0006 8268     		ldr	r2, [r0, #8]
 228:lib/chibios/os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
  83              		.loc 1 228 0
  84 0008 054B     		ldr	r3, .L7
  85              	.LVL4:
  86              	.L5:
 230:lib/chibios/os/rt/src/chschd.c ****   } while (cp->prio >= tp->prio);
  87              		.loc 1 230 0 discriminator 1
  88 000a 1B68     		ldr	r3, [r3]
  89              	.LVL5:
  90              		.loc 1 231 0 discriminator 1
  91 000c 9968     		ldr	r1, [r3, #8]
  92 000e 9142     		cmp	r1, r2
  93 0010 FBD2     		bcs	.L5
 232:lib/chibios/os/rt/src/chschd.c ****   /* Insertion on prev.*/
 233:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next             = cp;
 234:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
  94              		.loc 1 234 0
  95 0012 5A68     		ldr	r2, [r3, #4]
 233:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
  96              		.loc 1 233 0
  97 0014 0360     		str	r3, [r0]
  98              		.loc 1 234 0
  99 0016 4260     		str	r2, [r0, #4]
 235:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 100              		.loc 1 235 0
 101 0018 1060     		str	r0, [r2]
 236:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 102              		.loc 1 236 0
 103 001a 5860     		str	r0, [r3, #4]
 237:lib/chibios/os/rt/src/chschd.c **** 
 238:lib/chibios/os/rt/src/chschd.c ****   return tp;
 239:lib/chibios/os/rt/src/chschd.c **** }
 104              		.loc 1 239 0
 105 001c 7047     		bx	lr
 106              	.L8:
 107 001e 00BF     		.align	2
 108              	.L7:
 109 0020 00000000 		.word	.LANCHOR0
 110              		.cfi_endproc
 111              	.LFE249:
 113              		.section	.text.wakeup,"ax",%progbits
 114              		.align	1
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 118              		.fpu softvfp
 120              	wakeup:
 121              	.LFB252:
 240:lib/chibios/os/rt/src/chschd.c **** 
 241:lib/chibios/os/rt/src/chschd.c **** /**
 242:lib/chibios/os/rt/src/chschd.c ****  * @brief   Inserts a thread in the Ready List placing it ahead its peers.
 243:lib/chibios/os/rt/src/chschd.c ****  * @details The thread is positioned ahead all threads with higher or equal
 244:lib/chibios/os/rt/src/chschd.c ****  *          priority.
 245:lib/chibios/os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
 246:lib/chibios/os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
 247:lib/chibios/os/rt/src/chschd.c ****  * @post    This function does not reschedule so a call to a rescheduling
 248:lib/chibios/os/rt/src/chschd.c ****  *          function must be performed before unlocking the kernel. Note that
 249:lib/chibios/os/rt/src/chschd.c ****  *          interrupt handlers always reschedule on exit so an explicit
 250:lib/chibios/os/rt/src/chschd.c ****  *          reschedule must not be performed in ISRs.
 251:lib/chibios/os/rt/src/chschd.c ****  *
 252:lib/chibios/os/rt/src/chschd.c ****  * @param[in] tp        the thread to be made ready
 253:lib/chibios/os/rt/src/chschd.c ****  * @return              The thread pointer.
 254:lib/chibios/os/rt/src/chschd.c ****  *
 255:lib/chibios/os/rt/src/chschd.c ****  * @iclass
 256:lib/chibios/os/rt/src/chschd.c ****  */
 257:lib/chibios/os/rt/src/chschd.c **** thread_t *chSchReadyAheadI(thread_t *tp) {
 258:lib/chibios/os/rt/src/chschd.c ****   thread_t *cp;
 259:lib/chibios/os/rt/src/chschd.c **** 
 260:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassI();
 261:lib/chibios/os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
 262:lib/chibios/os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 263:lib/chibios/os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 264:lib/chibios/os/rt/src/chschd.c ****               "invalid state");
 265:lib/chibios/os/rt/src/chschd.c **** 
 266:lib/chibios/os/rt/src/chschd.c ****   tp->state = CH_STATE_READY;
 267:lib/chibios/os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 268:lib/chibios/os/rt/src/chschd.c ****   do {
 269:lib/chibios/os/rt/src/chschd.c ****     cp = cp->queue.next;
 270:lib/chibios/os/rt/src/chschd.c ****   } while (cp->prio > tp->prio);
 271:lib/chibios/os/rt/src/chschd.c ****   /* Insertion on prev.*/
 272:lib/chibios/os/rt/src/chschd.c ****   tp->queue.next             = cp;
 273:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 274:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 275:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 276:lib/chibios/os/rt/src/chschd.c **** 
 277:lib/chibios/os/rt/src/chschd.c ****   return tp;
 278:lib/chibios/os/rt/src/chschd.c **** }
 279:lib/chibios/os/rt/src/chschd.c **** 
 280:lib/chibios/os/rt/src/chschd.c **** /**
 281:lib/chibios/os/rt/src/chschd.c ****  * @brief   Puts the current thread to sleep into the specified state.
 282:lib/chibios/os/rt/src/chschd.c ****  * @details The thread goes into a sleeping state. The possible
 283:lib/chibios/os/rt/src/chschd.c ****  *          @ref thread_states are defined into @p threads.h.
 284:lib/chibios/os/rt/src/chschd.c ****  *
 285:lib/chibios/os/rt/src/chschd.c ****  * @param[in] newstate  the new thread state
 286:lib/chibios/os/rt/src/chschd.c ****  *
 287:lib/chibios/os/rt/src/chschd.c ****  * @sclass
 288:lib/chibios/os/rt/src/chschd.c ****  */
 289:lib/chibios/os/rt/src/chschd.c **** void chSchGoSleepS(tstate_t newstate) {
 290:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 291:lib/chibios/os/rt/src/chschd.c **** 
 292:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassS();
 293:lib/chibios/os/rt/src/chschd.c **** 
 294:lib/chibios/os/rt/src/chschd.c ****   /* New state.*/
 295:lib/chibios/os/rt/src/chschd.c ****   otp->state = newstate;
 296:lib/chibios/os/rt/src/chschd.c **** 
 297:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 298:lib/chibios/os/rt/src/chschd.c ****   /* The thread is renouncing its remaining time slices so it will have a new
 299:lib/chibios/os/rt/src/chschd.c ****      time quantum when it will wakeup.*/
 300:lib/chibios/os/rt/src/chschd.c ****   otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 301:lib/chibios/os/rt/src/chschd.c **** #endif
 302:lib/chibios/os/rt/src/chschd.c **** 
 303:lib/chibios/os/rt/src/chschd.c ****   /* Next thread in ready list becomes current.*/
 304:lib/chibios/os/rt/src/chschd.c ****   currp = queue_fifo_remove(&ch.rlist.queue);
 305:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 306:lib/chibios/os/rt/src/chschd.c **** 
 307:lib/chibios/os/rt/src/chschd.c ****   /* Handling idle-enter hook.*/
 308:lib/chibios/os/rt/src/chschd.c ****   if (currp->prio == IDLEPRIO) {
 309:lib/chibios/os/rt/src/chschd.c ****     CH_CFG_IDLE_ENTER_HOOK();
 310:lib/chibios/os/rt/src/chschd.c ****   }
 311:lib/chibios/os/rt/src/chschd.c **** 
 312:lib/chibios/os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 313:lib/chibios/os/rt/src/chschd.c ****   chSysSwitch(currp, otp);
 314:lib/chibios/os/rt/src/chschd.c **** }
 315:lib/chibios/os/rt/src/chschd.c **** 
 316:lib/chibios/os/rt/src/chschd.c **** /*
 317:lib/chibios/os/rt/src/chschd.c ****  * Timeout wakeup callback.
 318:lib/chibios/os/rt/src/chschd.c ****  */
 319:lib/chibios/os/rt/src/chschd.c **** static void wakeup(void *p) {
 122              		.loc 1 319 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              	.LVL6:
 127 0000 08B5     		push	{r3, lr}
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 3, -8
 130              		.cfi_offset 14, -4
 131              	.LBB107:
 132              	.LBB108:
 133              	.LBB109:
 134              	.LBB110:
 135              	.LBB111:
 136              		.file 3 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @version  V4.30
   5:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
   9:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    All rights reserved.
  10:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      specific prior written permission.
  20:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    *
  21:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  35:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  38:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #endif
  45:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  46:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  47:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   @{
  51:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  52:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  53:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  54:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  58:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  60:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  62:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  63:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  64:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  65:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  69:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  71:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  73:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  74:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  75:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  76:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Control Register value
  79:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  80:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  82:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
  83:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  84:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
  86:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  87:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  88:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  89:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  90:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  94:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  96:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  98:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  99:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 100:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 101:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 105:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 107:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 108:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 109:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 111:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 112:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 113:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 114:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 115:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               APSR Register value
 118:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 119:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 121:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 122:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 123:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 125:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 126:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 127:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 128:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 129:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 132:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 134:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 136:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 137:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 138:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 140:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 141:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 142:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 143:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 144:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               PSP Register value
 147:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 148:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 150:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 151:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 154:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 155:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 156:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 157:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 158:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 162:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 164:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 166:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 167:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 168:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 169:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               MSP Register value
 172:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 173:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 175:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 176:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 177:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 179:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 180:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 181:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 182:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 183:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 188:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 190:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 192:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 193:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 194:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 195:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 199:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 201:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 202:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 203:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 205:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 206:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 207:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 208:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 209:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 213:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 215:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 217:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 218:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 219:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 221:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 222:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 226:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 228:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 230:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 231:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 232:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 233:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 237:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 239:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 241:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 243:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 244:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 248:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 250:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 251:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 252:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 254:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 255:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 257:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 137              		.loc 3 264 0
 138 0002 2023     		movs	r3, #32
 139              		.syntax unified
 140              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 141 0004 83F31188 		MSR basepri, r3
 142              	@ 0 "" 2
 143              	.LVL7:
 144              		.thumb
 145              		.syntax unified
 146              	.LBE111:
 147              	.LBE110:
 148              	.LBE109:
 149              	.LBE108:
 150              	.LBE107:
 320:lib/chibios/os/rt/src/chschd.c ****   thread_t *tp = (thread_t *)p;
 321:lib/chibios/os/rt/src/chschd.c **** 
 322:lib/chibios/os/rt/src/chschd.c ****   chSysLockFromISR();
 323:lib/chibios/os/rt/src/chschd.c ****   switch (tp->state) {
 151              		.loc 1 323 0
 152 0008 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 153 000c 0023     		movs	r3, #0
 154 000e 072A     		cmp	r2, #7
 155 0010 07D8     		bhi	.L10
 156 0012 DFE802F0 		tbb	[pc, r2]
 157              	.L12:
 158 0016 0C       		.byte	(.L17-.L12)/2
 159 0017 06       		.byte	(.L10-.L12)/2
 160 0018 06       		.byte	(.L10-.L12)/2
 161 0019 04       		.byte	(.L13-.L12)/2
 162 001a 13       		.byte	(.L14-.L12)/2
 163 001b 0F       		.byte	(.L15-.L12)/2
 164 001c 06       		.byte	(.L10-.L12)/2
 165 001d 13       		.byte	(.L14-.L12)/2
 166              		.p2align 1
 167              	.L13:
 324:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_READY:
 325:lib/chibios/os/rt/src/chschd.c ****     /* Handling the special case where the thread has been made ready by
 326:lib/chibios/os/rt/src/chschd.c ****        another thread with higher priority.*/
 327:lib/chibios/os/rt/src/chschd.c ****     chSysUnlockFromISR();
 328:lib/chibios/os/rt/src/chschd.c ****     return;
 329:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_SUSPENDED:
 330:lib/chibios/os/rt/src/chschd.c ****     *tp->u.wttrp = NULL;
 168              		.loc 1 330 0
 169 001e 426A     		ldr	r2, [r0, #36]
 170 0020 1360     		str	r3, [r2]
 171              	.L10:
 331:lib/chibios/os/rt/src/chschd.c ****     break;
 332:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_USE_SEMAPHORES == TRUE
 333:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_WTSEM:
 334:lib/chibios/os/rt/src/chschd.c ****     chSemFastSignalI(tp->u.wtsemp);
 335:lib/chibios/os/rt/src/chschd.c ****     /* Falls into, intentional. */
 336:lib/chibios/os/rt/src/chschd.c **** #endif
 337:lib/chibios/os/rt/src/chschd.c **** #if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
 338:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_WTCOND:
 339:lib/chibios/os/rt/src/chschd.c **** #endif
 340:lib/chibios/os/rt/src/chschd.c ****   case CH_STATE_QUEUED:
 341:lib/chibios/os/rt/src/chschd.c ****     /* States requiring dequeuing.*/
 342:lib/chibios/os/rt/src/chschd.c ****     (void) queue_dequeue(tp);
 343:lib/chibios/os/rt/src/chschd.c ****     break;
 344:lib/chibios/os/rt/src/chschd.c ****   default:
 345:lib/chibios/os/rt/src/chschd.c ****     /* Any other state, nothing to do.*/
 346:lib/chibios/os/rt/src/chschd.c ****     break;
 347:lib/chibios/os/rt/src/chschd.c ****   }
 348:lib/chibios/os/rt/src/chschd.c ****   tp->u.rdymsg = MSG_TIMEOUT;
 172              		.loc 1 348 0
 173 0022 4FF0FF33 		mov	r3, #-1
 174 0026 4362     		str	r3, [r0, #36]
 349:lib/chibios/os/rt/src/chschd.c ****   (void) chSchReadyI(tp);
 175              		.loc 1 349 0
 176 0028 FFF7FEFF 		bl	chSchReadyI
 177              	.LVL8:
 178              	.LBB112:
 179              	.LBB113:
 180              	.LBB114:
 181              	.LBB115:
 182              	.LBB116:
 183              		.loc 3 264 0
 184 002c 0023     		movs	r3, #0
 185              	.LVL9:
 186              	.L17:
 187              		.syntax unified
 188              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 189 002e 83F31188 		MSR basepri, r3
 190              	@ 0 "" 2
 191              		.thumb
 192              		.syntax unified
 193              	.LBE116:
 194              	.LBE115:
 195              	.LBE114:
 196              	.LBE113:
 197              	.LBE112:
 350:lib/chibios/os/rt/src/chschd.c ****   chSysUnlockFromISR();
 351:lib/chibios/os/rt/src/chschd.c **** }
 198              		.loc 1 351 0
 199 0032 08BD     		pop	{r3, pc}
 200              	.LVL10:
 201              	.L15:
 334:lib/chibios/os/rt/src/chschd.c ****     /* Falls into, intentional. */
 202              		.loc 1 334 0
 203 0034 426A     		ldr	r2, [r0, #36]
 204              	.LVL11:
 205              	.LBB117:
 206              	.LBB118:
 207              		.file 4 "./lib/chibios/os/rt/include/chsem.h"
   1:./lib/chibios/os/rt/include/chsem.h **** /*
   2:./lib/chibios/os/rt/include/chsem.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chsem.h **** 
   4:./lib/chibios/os/rt/include/chsem.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chsem.h **** 
   6:./lib/chibios/os/rt/include/chsem.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chsem.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chsem.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chsem.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chsem.h **** 
  11:./lib/chibios/os/rt/include/chsem.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chsem.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chsem.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chsem.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chsem.h **** 
  16:./lib/chibios/os/rt/include/chsem.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chsem.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chsem.h **** */
  19:./lib/chibios/os/rt/include/chsem.h **** 
  20:./lib/chibios/os/rt/include/chsem.h **** /**
  21:./lib/chibios/os/rt/include/chsem.h ****  * @file    chsem.h
  22:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Semaphores macros and structures.
  23:./lib/chibios/os/rt/include/chsem.h ****  *
  24:./lib/chibios/os/rt/include/chsem.h ****  * @addtogroup semaphores
  25:./lib/chibios/os/rt/include/chsem.h ****  * @{
  26:./lib/chibios/os/rt/include/chsem.h ****  */
  27:./lib/chibios/os/rt/include/chsem.h **** 
  28:./lib/chibios/os/rt/include/chsem.h **** #ifndef CHSEM_H
  29:./lib/chibios/os/rt/include/chsem.h **** #define CHSEM_H
  30:./lib/chibios/os/rt/include/chsem.h **** 
  31:./lib/chibios/os/rt/include/chsem.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
  32:./lib/chibios/os/rt/include/chsem.h **** 
  33:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chsem.h **** /* Module constants.                                                         */
  35:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  36:./lib/chibios/os/rt/include/chsem.h **** 
  37:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  38:./lib/chibios/os/rt/include/chsem.h **** /* Module pre-compile time settings.                                         */
  39:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  40:./lib/chibios/os/rt/include/chsem.h **** 
  41:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  42:./lib/chibios/os/rt/include/chsem.h **** /* Derived constants and error checks.                                       */
  43:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  44:./lib/chibios/os/rt/include/chsem.h **** 
  45:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  46:./lib/chibios/os/rt/include/chsem.h **** /* Module data structures and types.                                         */
  47:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  48:./lib/chibios/os/rt/include/chsem.h **** 
  49:./lib/chibios/os/rt/include/chsem.h **** /**
  50:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Semaphore structure.
  51:./lib/chibios/os/rt/include/chsem.h ****  */
  52:./lib/chibios/os/rt/include/chsem.h **** typedef struct ch_semaphore {
  53:./lib/chibios/os/rt/include/chsem.h ****   threads_queue_t       queue;      /**< @brief Queue of the threads sleeping
  54:./lib/chibios/os/rt/include/chsem.h ****                                                 on this semaphore.          */
  55:./lib/chibios/os/rt/include/chsem.h ****   cnt_t                 cnt;        /**< @brief The semaphore counter.      */
  56:./lib/chibios/os/rt/include/chsem.h **** } semaphore_t;
  57:./lib/chibios/os/rt/include/chsem.h **** 
  58:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  59:./lib/chibios/os/rt/include/chsem.h **** /* Module macros.                                                            */
  60:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  61:./lib/chibios/os/rt/include/chsem.h **** 
  62:./lib/chibios/os/rt/include/chsem.h **** /**
  63:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Data part of a static semaphore initializer.
  64:./lib/chibios/os/rt/include/chsem.h ****  * @details This macro should be used when statically initializing a semaphore
  65:./lib/chibios/os/rt/include/chsem.h ****  *          that is part of a bigger structure.
  66:./lib/chibios/os/rt/include/chsem.h ****  *
  67:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] name      the name of the semaphore variable
  68:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] n         the counter initial value, this value must be
  69:./lib/chibios/os/rt/include/chsem.h ****  *                      non-negative
  70:./lib/chibios/os/rt/include/chsem.h ****  */
  71:./lib/chibios/os/rt/include/chsem.h **** #define _SEMAPHORE_DATA(name, n) {_THREADS_QUEUE_DATA(name.queue), n}
  72:./lib/chibios/os/rt/include/chsem.h **** 
  73:./lib/chibios/os/rt/include/chsem.h **** /**
  74:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Static semaphore initializer.
  75:./lib/chibios/os/rt/include/chsem.h ****  * @details Statically initialized semaphores require no explicit
  76:./lib/chibios/os/rt/include/chsem.h ****  *          initialization using @p chSemInit().
  77:./lib/chibios/os/rt/include/chsem.h ****  *
  78:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] name      the name of the semaphore variable
  79:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] n         the counter initial value, this value must be
  80:./lib/chibios/os/rt/include/chsem.h ****  *                      non-negative
  81:./lib/chibios/os/rt/include/chsem.h ****  */
  82:./lib/chibios/os/rt/include/chsem.h **** #define SEMAPHORE_DECL(name, n) semaphore_t name = _SEMAPHORE_DATA(name, n)
  83:./lib/chibios/os/rt/include/chsem.h **** 
  84:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  85:./lib/chibios/os/rt/include/chsem.h **** /* External declarations.                                                    */
  86:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
  87:./lib/chibios/os/rt/include/chsem.h **** 
  88:./lib/chibios/os/rt/include/chsem.h **** #ifdef __cplusplus
  89:./lib/chibios/os/rt/include/chsem.h **** extern "C" {
  90:./lib/chibios/os/rt/include/chsem.h **** #endif
  91:./lib/chibios/os/rt/include/chsem.h ****   void chSemObjectInit(semaphore_t *sp, cnt_t n);
  92:./lib/chibios/os/rt/include/chsem.h ****   void chSemReset(semaphore_t *sp, cnt_t n);
  93:./lib/chibios/os/rt/include/chsem.h ****   void chSemResetI(semaphore_t *sp, cnt_t n);
  94:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemWait(semaphore_t *sp);
  95:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemWaitS(semaphore_t *sp);
  96:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time);
  97:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time);
  98:./lib/chibios/os/rt/include/chsem.h ****   void chSemSignal(semaphore_t *sp);
  99:./lib/chibios/os/rt/include/chsem.h ****   void chSemSignalI(semaphore_t *sp);
 100:./lib/chibios/os/rt/include/chsem.h ****   void chSemAddCounterI(semaphore_t *sp, cnt_t n);
 101:./lib/chibios/os/rt/include/chsem.h ****   msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw);
 102:./lib/chibios/os/rt/include/chsem.h **** #ifdef __cplusplus
 103:./lib/chibios/os/rt/include/chsem.h **** }
 104:./lib/chibios/os/rt/include/chsem.h **** #endif
 105:./lib/chibios/os/rt/include/chsem.h **** 
 106:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
 107:./lib/chibios/os/rt/include/chsem.h **** /* Module inline functions.                                                  */
 108:./lib/chibios/os/rt/include/chsem.h **** /*===========================================================================*/
 109:./lib/chibios/os/rt/include/chsem.h **** 
 110:./lib/chibios/os/rt/include/chsem.h **** /**
 111:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Decreases the semaphore counter.
 112:./lib/chibios/os/rt/include/chsem.h ****  * @details This macro can be used when the counter is known to be positive.
 113:./lib/chibios/os/rt/include/chsem.h ****  *
 114:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t structure
 115:./lib/chibios/os/rt/include/chsem.h ****  *
 116:./lib/chibios/os/rt/include/chsem.h ****  * @iclass
 117:./lib/chibios/os/rt/include/chsem.h ****  */
 118:./lib/chibios/os/rt/include/chsem.h **** static inline void chSemFastWaitI(semaphore_t *sp) {
 119:./lib/chibios/os/rt/include/chsem.h **** 
 120:./lib/chibios/os/rt/include/chsem.h ****   chDbgCheckClassI();
 121:./lib/chibios/os/rt/include/chsem.h **** 
 122:./lib/chibios/os/rt/include/chsem.h ****   sp->cnt--;
 123:./lib/chibios/os/rt/include/chsem.h **** }
 124:./lib/chibios/os/rt/include/chsem.h **** 
 125:./lib/chibios/os/rt/include/chsem.h **** /**
 126:./lib/chibios/os/rt/include/chsem.h ****  * @brief   Increases the semaphore counter.
 127:./lib/chibios/os/rt/include/chsem.h ****  * @details This macro can be used when the counter is known to be not
 128:./lib/chibios/os/rt/include/chsem.h ****  *          negative.
 129:./lib/chibios/os/rt/include/chsem.h ****  *
 130:./lib/chibios/os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t structure
 131:./lib/chibios/os/rt/include/chsem.h ****  *
 132:./lib/chibios/os/rt/include/chsem.h ****  * @iclass
 133:./lib/chibios/os/rt/include/chsem.h ****  */
 134:./lib/chibios/os/rt/include/chsem.h **** static inline void chSemFastSignalI(semaphore_t *sp) {
 135:./lib/chibios/os/rt/include/chsem.h **** 
 136:./lib/chibios/os/rt/include/chsem.h ****   chDbgCheckClassI();
 137:./lib/chibios/os/rt/include/chsem.h **** 
 138:./lib/chibios/os/rt/include/chsem.h ****   sp->cnt++;
 208              		.loc 4 138 0
 209 0036 9368     		ldr	r3, [r2, #8]
 210 0038 0133     		adds	r3, r3, #1
 211 003a 9360     		str	r3, [r2, #8]
 212              	.LVL12:
 213              	.L14:
 214              	.LBE118:
 215              	.LBE117:
 216              	.LBB119:
 217              	.LBB120:
 552:./lib/chibios/os/rt/include/chschd.h **** }
 553:./lib/chibios/os/rt/include/chschd.h **** 
 554:./lib/chibios/os/rt/include/chschd.h **** /**
 555:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is empty.
 556:./lib/chibios/os/rt/include/chschd.h ****  *
 557:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 558:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the queue.
 559:./lib/chibios/os/rt/include/chschd.h ****  *
 560:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 561:./lib/chibios/os/rt/include/chschd.h ****  */
 562:./lib/chibios/os/rt/include/chschd.h **** static inline bool queue_isempty(const threads_queue_t *tqp) {
 563:./lib/chibios/os/rt/include/chschd.h **** 
 564:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tqp->next == (const thread_t *)tqp);
 565:./lib/chibios/os/rt/include/chschd.h **** }
 566:./lib/chibios/os/rt/include/chschd.h **** 
 567:./lib/chibios/os/rt/include/chschd.h **** /**
 568:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is not empty.
 569:./lib/chibios/os/rt/include/chschd.h ****  *
 570:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 571:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the queue.
 572:./lib/chibios/os/rt/include/chschd.h ****  *
 573:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 574:./lib/chibios/os/rt/include/chschd.h ****  */
 575:./lib/chibios/os/rt/include/chschd.h **** static inline bool queue_notempty(const threads_queue_t *tqp) {
 576:./lib/chibios/os/rt/include/chschd.h **** 
 577:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tqp->next != (const thread_t *)tqp);
 578:./lib/chibios/os/rt/include/chschd.h **** }
 579:./lib/chibios/os/rt/include/chschd.h **** 
 580:./lib/chibios/os/rt/include/chschd.h **** /* If the performance code path has been chosen then all the following
 581:./lib/chibios/os/rt/include/chschd.h ****    functions are inlined into the various kernel modules.*/
 582:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == TRUE
 583:./lib/chibios/os/rt/include/chschd.h **** static inline void list_insert(thread_t *tp, threads_list_t *tlp) {
 584:./lib/chibios/os/rt/include/chschd.h **** 
 585:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next = tlp->next;
 586:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = tp;
 587:./lib/chibios/os/rt/include/chschd.h **** }
 588:./lib/chibios/os/rt/include/chschd.h **** 
 589:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *list_remove(threads_list_t *tlp) {
 590:./lib/chibios/os/rt/include/chschd.h **** 
 591:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tlp->next;
 592:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = tp->queue.next;
 593:./lib/chibios/os/rt/include/chschd.h **** 
 594:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 595:./lib/chibios/os/rt/include/chschd.h **** }
 596:./lib/chibios/os/rt/include/chschd.h **** 
 597:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
 598:./lib/chibios/os/rt/include/chschd.h **** 
 599:./lib/chibios/os/rt/include/chschd.h ****   thread_t *cp = (thread_t *)tqp;
 600:./lib/chibios/os/rt/include/chschd.h ****   do {
 601:./lib/chibios/os/rt/include/chschd.h ****     cp = cp->queue.next;
 602:./lib/chibios/os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 603:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next             = cp;
 604:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
 605:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 606:./lib/chibios/os/rt/include/chschd.h ****   cp->queue.prev             = tp;
 607:./lib/chibios/os/rt/include/chschd.h **** }
 608:./lib/chibios/os/rt/include/chschd.h **** 
 609:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 610:./lib/chibios/os/rt/include/chschd.h **** 
 611:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next             = (thread_t *)tqp;
 612:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 613:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 614:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev                  = tp;
 615:./lib/chibios/os/rt/include/chschd.h **** }
 616:./lib/chibios/os/rt/include/chschd.h **** 
 617:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 618:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 619:./lib/chibios/os/rt/include/chschd.h **** 
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next             = tp->queue.next;
 621:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 622:./lib/chibios/os/rt/include/chschd.h **** 
 623:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 624:./lib/chibios/os/rt/include/chschd.h **** }
 625:./lib/chibios/os/rt/include/chschd.h **** 
 626:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
 627:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->prev;
 628:./lib/chibios/os/rt/include/chschd.h **** 
 629:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev             = tp->queue.prev;
 630:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev->queue.next = (thread_t *)tqp;
 631:./lib/chibios/os/rt/include/chschd.h **** 
 632:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 633:./lib/chibios/os/rt/include/chschd.h **** }
 634:./lib/chibios/os/rt/include/chschd.h **** 
 635:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_dequeue(thread_t *tp) {
 636:./lib/chibios/os/rt/include/chschd.h **** 
 637:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp->queue.next;
 218              		.loc 2 637 0
 219 003c D0E90023 		ldrd	r2, r3, [r0]
 220 0040 1A60     		str	r2, [r3]
 638:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next->queue.prev = tp->queue.prev;
 221              		.loc 2 638 0
 222 0042 0268     		ldr	r2, [r0]
 223 0044 5360     		str	r3, [r2, #4]
 224 0046 ECE7     		b	.L10
 225              	.LBE120:
 226              	.LBE119:
 227              		.cfi_endproc
 228              	.LFE252:
 230              		.section	.text.chSchReadyAheadI,"ax",%progbits
 231              		.align	1
 232              		.global	chSchReadyAheadI
 233              		.syntax unified
 234              		.thumb
 235              		.thumb_func
 236              		.fpu softvfp
 238              	chSchReadyAheadI:
 239              	.LFB250:
 257:lib/chibios/os/rt/src/chschd.c ****   thread_t *cp;
 240              		.loc 1 257 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              		@ link register save eliminated.
 245              	.LVL13:
 266:lib/chibios/os/rt/src/chschd.c ****   cp = (thread_t *)&ch.rlist.queue;
 246              		.loc 1 266 0
 247 0000 0023     		movs	r3, #0
 248 0002 80F82030 		strb	r3, [r0, #32]
 249              	.LVL14:
 270:lib/chibios/os/rt/src/chschd.c ****   /* Insertion on prev.*/
 250              		.loc 1 270 0
 251 0006 8268     		ldr	r2, [r0, #8]
 267:lib/chibios/os/rt/src/chschd.c ****   do {
 252              		.loc 1 267 0
 253 0008 054B     		ldr	r3, .L21
 254              	.LVL15:
 255              	.L19:
 269:lib/chibios/os/rt/src/chschd.c ****   } while (cp->prio > tp->prio);
 256              		.loc 1 269 0 discriminator 1
 257 000a 1B68     		ldr	r3, [r3]
 258              	.LVL16:
 270:lib/chibios/os/rt/src/chschd.c ****   /* Insertion on prev.*/
 259              		.loc 1 270 0 discriminator 1
 260 000c 9968     		ldr	r1, [r3, #8]
 261 000e 9142     		cmp	r1, r2
 262 0010 FBD8     		bhi	.L19
 273:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 263              		.loc 1 273 0
 264 0012 5A68     		ldr	r2, [r3, #4]
 272:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev             = cp->queue.prev;
 265              		.loc 1 272 0
 266 0014 0360     		str	r3, [r0]
 273:lib/chibios/os/rt/src/chschd.c ****   tp->queue.prev->queue.next = tp;
 267              		.loc 1 273 0
 268 0016 4260     		str	r2, [r0, #4]
 274:lib/chibios/os/rt/src/chschd.c ****   cp->queue.prev             = tp;
 269              		.loc 1 274 0
 270 0018 1060     		str	r0, [r2]
 275:lib/chibios/os/rt/src/chschd.c **** 
 271              		.loc 1 275 0
 272 001a 5860     		str	r0, [r3, #4]
 278:lib/chibios/os/rt/src/chschd.c **** 
 273              		.loc 1 278 0
 274 001c 7047     		bx	lr
 275              	.L22:
 276 001e 00BF     		.align	2
 277              	.L21:
 278 0020 00000000 		.word	.LANCHOR0
 279              		.cfi_endproc
 280              	.LFE250:
 282              		.section	.text.chSchGoSleepS,"ax",%progbits
 283              		.align	1
 284              		.global	chSchGoSleepS
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 288              		.fpu softvfp
 290              	chSchGoSleepS:
 291              	.LFB251:
 289:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 292              		.loc 1 289 0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              	.LVL17:
 297 0000 38B5     		push	{r3, r4, r5, lr}
 298              		.cfi_def_cfa_offset 16
 299              		.cfi_offset 3, -16
 300              		.cfi_offset 4, -12
 301              		.cfi_offset 5, -8
 302              		.cfi_offset 14, -4
 290:lib/chibios/os/rt/src/chschd.c **** 
 303              		.loc 1 290 0
 304 0002 0D4C     		ldr	r4, .L25
 305 0004 A569     		ldr	r5, [r4, #24]
 306              	.LVL18:
 307              	.LBB121:
 308              	.LBB122:
 618:./lib/chibios/os/rt/include/chschd.h **** 
 309              		.loc 2 618 0
 310 0006 2268     		ldr	r2, [r4]
 311              	.LBE122:
 312              	.LBE121:
 295:lib/chibios/os/rt/src/chschd.c **** 
 313              		.loc 1 295 0
 314 0008 85F82000 		strb	r0, [r5, #32]
 315              	.LVL19:
 316              	.LBB124:
 317              	.LBB123:
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 318              		.loc 2 620 0
 319 000c 1168     		ldr	r1, [r2]
 320 000e 2160     		str	r1, [r4]
 621:./lib/chibios/os/rt/include/chschd.h **** 
 321              		.loc 2 621 0
 322 0010 4C60     		str	r4, [r1, #4]
 323              	.LVL20:
 324              	.LBE123:
 325              	.LBE124:
 305:lib/chibios/os/rt/src/chschd.c **** 
 326              		.loc 1 305 0
 327 0012 0121     		movs	r1, #1
 304:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 328              		.loc 1 304 0
 329 0014 A261     		str	r2, [r4, #24]
 305:lib/chibios/os/rt/src/chschd.c **** 
 330              		.loc 1 305 0
 331 0016 82F82010 		strb	r1, [r2, #32]
 332              	.LBB125:
 333              	.LBB126:
 334              	.LBB127:
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 335              		.loc 3 152 0
 336              		.syntax unified
 337              	@ 152 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 338 001a EFF30982 		MRS r2, psp
 339              	
 340              	@ 0 "" 2
 341              	.LVL21:
 342              		.thumb
 343              		.syntax unified
 344              	.LBE127:
 345              	.LBE126:
 313:lib/chibios/os/rt/src/chschd.c **** }
 346              		.loc 1 313 0
 347 001e E969     		ldr	r1, [r5, #28]
 348 0020 643A     		subs	r2, r2, #100
 349              	.LVL22:
 350 0022 9142     		cmp	r1, r2
 351 0024 02D9     		bls	.L24
 313:lib/chibios/os/rt/src/chschd.c **** }
 352              		.loc 1 313 0 is_stmt 0 discriminator 1
 353 0026 0548     		ldr	r0, .L25+4
 354              	.LVL23:
 355 0028 FFF7FEFF 		bl	chSysHalt
 356              	.LVL24:
 357              	.L24:
 313:lib/chibios/os/rt/src/chschd.c **** }
 358              		.loc 1 313 0 discriminator 3
 359 002c 2946     		mov	r1, r5
 360 002e A069     		ldr	r0, [r4, #24]
 361              	.LBE125:
 314:lib/chibios/os/rt/src/chschd.c **** 
 362              		.loc 1 314 0 is_stmt 1 discriminator 3
 363 0030 BDE83840 		pop	{r3, r4, r5, lr}
 364              		.cfi_restore 14
 365              		.cfi_restore 5
 366              		.cfi_restore 4
 367              		.cfi_restore 3
 368              		.cfi_def_cfa_offset 0
 369              	.LVL25:
 370              	.LBB128:
 313:lib/chibios/os/rt/src/chschd.c **** }
 371              		.loc 1 313 0 discriminator 3
 372 0034 FFF7FEBF 		b	_port_switch
 373              	.LVL26:
 374              	.L26:
 375              		.align	2
 376              	.L25:
 377 0038 00000000 		.word	.LANCHOR0
 378 003c 00000000 		.word	.LC0
 379              	.LBE128:
 380              		.cfi_endproc
 381              	.LFE251:
 383              		.section	.text.chSchGoSleepTimeoutS,"ax",%progbits
 384              		.align	1
 385              		.global	chSchGoSleepTimeoutS
 386              		.syntax unified
 387              		.thumb
 388              		.thumb_func
 389              		.fpu softvfp
 391              	chSchGoSleepTimeoutS:
 392              	.LFB253:
 352:lib/chibios/os/rt/src/chschd.c **** 
 353:lib/chibios/os/rt/src/chschd.c **** /**
 354:lib/chibios/os/rt/src/chschd.c ****  * @brief   Puts the current thread to sleep into the specified state with
 355:lib/chibios/os/rt/src/chschd.c ****  *          timeout specification.
 356:lib/chibios/os/rt/src/chschd.c ****  * @details The thread goes into a sleeping state, if it is not awakened
 357:lib/chibios/os/rt/src/chschd.c ****  *          explicitly within the specified timeout then it is forcibly
 358:lib/chibios/os/rt/src/chschd.c ****  *          awakened with a @p MSG_TIMEOUT low level message. The possible
 359:lib/chibios/os/rt/src/chschd.c ****  *          @ref thread_states are defined into @p threads.h.
 360:lib/chibios/os/rt/src/chschd.c ****  *
 361:lib/chibios/os/rt/src/chschd.c ****  * @param[in] newstate  the new thread state
 362:lib/chibios/os/rt/src/chschd.c ****  * @param[in] time      the number of ticks before the operation timeouts, the
 363:lib/chibios/os/rt/src/chschd.c ****  *                      special values are handled as follow:
 364:lib/chibios/os/rt/src/chschd.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 365:lib/chibios/os/rt/src/chschd.c ****  *                        state, this is equivalent to invoking
 366:lib/chibios/os/rt/src/chschd.c ****  *                        @p chSchGoSleepS() but, of course, less efficient.
 367:lib/chibios/os/rt/src/chschd.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 368:lib/chibios/os/rt/src/chschd.c ****  *                      .
 369:lib/chibios/os/rt/src/chschd.c ****  * @return              The wakeup message.
 370:lib/chibios/os/rt/src/chschd.c ****  * @retval MSG_TIMEOUT  if a timeout occurs.
 371:lib/chibios/os/rt/src/chschd.c ****  *
 372:lib/chibios/os/rt/src/chschd.c ****  * @sclass
 373:lib/chibios/os/rt/src/chschd.c ****  */
 374:lib/chibios/os/rt/src/chschd.c **** msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 393              		.loc 1 374 0
 394              		.cfi_startproc
 395              		@ args = 0, pretend = 0, frame = 24
 396              		@ frame_needed = 0, uses_anonymous_args = 0
 397              	.LVL27:
 398 0000 30B5     		push	{r4, r5, lr}
 399              		.cfi_def_cfa_offset 12
 400              		.cfi_offset 4, -12
 401              		.cfi_offset 5, -8
 402              		.cfi_offset 14, -4
 375:lib/chibios/os/rt/src/chschd.c **** 
 376:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassS();
 377:lib/chibios/os/rt/src/chschd.c **** 
 378:lib/chibios/os/rt/src/chschd.c ****   if (TIME_INFINITE != time) {
 403              		.loc 1 378 0
 404 0002 4B1C     		adds	r3, r1, #1
 374:lib/chibios/os/rt/src/chschd.c **** 
 405              		.loc 1 374 0
 406 0004 87B0     		sub	sp, sp, #28
 407              		.cfi_def_cfa_offset 40
 374:lib/chibios/os/rt/src/chschd.c **** 
 408              		.loc 1 374 0
 409 0006 0546     		mov	r5, r0
 410 0008 0A4C     		ldr	r4, .L34
 411              		.loc 1 378 0
 412 000a 10D0     		beq	.L28
 413              	.LBB129:
 379:lib/chibios/os/rt/src/chschd.c ****     virtual_timer_t vt;
 380:lib/chibios/os/rt/src/chschd.c **** 
 381:lib/chibios/os/rt/src/chschd.c ****     chVTDoSetI(&vt, time, wakeup, currp);
 414              		.loc 1 381 0
 415 000c A369     		ldr	r3, [r4, #24]
 416 000e 0A4A     		ldr	r2, .L34+4
 417 0010 01A8     		add	r0, sp, #4
 418              	.LVL28:
 419 0012 FFF7FEFF 		bl	chVTDoSetI
 420              	.LVL29:
 382:lib/chibios/os/rt/src/chschd.c ****     chSchGoSleepS(newstate);
 421              		.loc 1 382 0
 422 0016 2846     		mov	r0, r5
 423 0018 FFF7FEFF 		bl	chSchGoSleepS
 424              	.LVL30:
 383:lib/chibios/os/rt/src/chschd.c ****     if (chVTIsArmedI(&vt)) {
 425              		.loc 1 383 0
 426 001c 049B     		ldr	r3, [sp, #16]
 427 001e 13B1     		cbz	r3, .L30
 384:lib/chibios/os/rt/src/chschd.c ****       chVTDoResetI(&vt);
 428              		.loc 1 384 0
 429 0020 01A8     		add	r0, sp, #4
 430              	.LVL31:
 431 0022 FFF7FEFF 		bl	chVTDoResetI
 432              	.LVL32:
 433              	.L30:
 434              	.LBE129:
 385:lib/chibios/os/rt/src/chschd.c ****     }
 386:lib/chibios/os/rt/src/chschd.c ****   }
 387:lib/chibios/os/rt/src/chschd.c ****   else {
 388:lib/chibios/os/rt/src/chschd.c ****     chSchGoSleepS(newstate);
 389:lib/chibios/os/rt/src/chschd.c ****   }
 390:lib/chibios/os/rt/src/chschd.c **** 
 391:lib/chibios/os/rt/src/chschd.c ****   return currp->u.rdymsg;
 435              		.loc 1 391 0
 436 0026 A369     		ldr	r3, [r4, #24]
 392:lib/chibios/os/rt/src/chschd.c **** }
 437              		.loc 1 392 0
 438 0028 586A     		ldr	r0, [r3, #36]
 439 002a 07B0     		add	sp, sp, #28
 440              		.cfi_remember_state
 441              		.cfi_def_cfa_offset 12
 442              		@ sp needed
 443 002c 30BD     		pop	{r4, r5, pc}
 444              	.LVL33:
 445              	.L28:
 446              		.cfi_restore_state
 388:lib/chibios/os/rt/src/chschd.c ****   }
 447              		.loc 1 388 0
 448 002e FFF7FEFF 		bl	chSchGoSleepS
 449              	.LVL34:
 450 0032 F8E7     		b	.L30
 451              	.L35:
 452              		.align	2
 453              	.L34:
 454 0034 00000000 		.word	.LANCHOR0
 455 0038 00000000 		.word	wakeup
 456              		.cfi_endproc
 457              	.LFE253:
 459              		.section	.text.chSchWakeupS,"ax",%progbits
 460              		.align	1
 461              		.global	chSchWakeupS
 462              		.syntax unified
 463              		.thumb
 464              		.thumb_func
 465              		.fpu softvfp
 467              	chSchWakeupS:
 468              	.LFB254:
 393:lib/chibios/os/rt/src/chschd.c **** 
 394:lib/chibios/os/rt/src/chschd.c **** /**
 395:lib/chibios/os/rt/src/chschd.c ****  * @brief   Wakes up a thread.
 396:lib/chibios/os/rt/src/chschd.c ****  * @details The thread is inserted into the ready list or immediately made
 397:lib/chibios/os/rt/src/chschd.c ****  *          running depending on its relative priority compared to the current
 398:lib/chibios/os/rt/src/chschd.c ****  *          thread.
 399:lib/chibios/os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
 400:lib/chibios/os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
 401:lib/chibios/os/rt/src/chschd.c ****  * @note    It is equivalent to a @p chSchReadyI() followed by a
 402:lib/chibios/os/rt/src/chschd.c ****  *          @p chSchRescheduleS() but much more efficient.
 403:lib/chibios/os/rt/src/chschd.c ****  * @note    The function assumes that the current thread has the highest
 404:lib/chibios/os/rt/src/chschd.c ****  *          priority.
 405:lib/chibios/os/rt/src/chschd.c ****  *
 406:lib/chibios/os/rt/src/chschd.c ****  * @param[in] ntp       the thread to be made ready
 407:lib/chibios/os/rt/src/chschd.c ****  * @param[in] msg       the wakeup message
 408:lib/chibios/os/rt/src/chschd.c ****  *
 409:lib/chibios/os/rt/src/chschd.c ****  * @sclass
 410:lib/chibios/os/rt/src/chschd.c ****  */
 411:lib/chibios/os/rt/src/chschd.c **** void chSchWakeupS(thread_t *ntp, msg_t msg) {
 469              		.loc 1 411 0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 0
 472              		@ frame_needed = 0, uses_anonymous_args = 0
 473              	.LVL35:
 474 0000 70B5     		push	{r4, r5, r6, lr}
 475              		.cfi_def_cfa_offset 16
 476              		.cfi_offset 4, -16
 477              		.cfi_offset 5, -12
 478              		.cfi_offset 6, -8
 479              		.cfi_offset 14, -4
 412:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 480              		.loc 1 412 0
 481 0002 114E     		ldr	r6, .L39
 413:lib/chibios/os/rt/src/chschd.c **** 
 414:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassS();
 415:lib/chibios/os/rt/src/chschd.c **** 
 416:lib/chibios/os/rt/src/chschd.c ****   chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 417:lib/chibios/os/rt/src/chschd.c ****               (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
 418:lib/chibios/os/rt/src/chschd.c ****               "priority order violation");
 419:lib/chibios/os/rt/src/chschd.c **** 
 420:lib/chibios/os/rt/src/chschd.c ****   /* Storing the message to be retrieved by the target thread when it will
 421:lib/chibios/os/rt/src/chschd.c ****      restart execution.*/
 422:lib/chibios/os/rt/src/chschd.c ****   ntp->u.rdymsg = msg;
 482              		.loc 1 422 0
 483 0004 4162     		str	r1, [r0, #36]
 412:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 484              		.loc 1 412 0
 485 0006 B369     		ldr	r3, [r6, #24]
 486              	.LVL36:
 423:lib/chibios/os/rt/src/chschd.c **** 
 424:lib/chibios/os/rt/src/chschd.c ****   /* If the waken thread has a not-greater priority than the current
 425:lib/chibios/os/rt/src/chschd.c ****      one then it is just inserted in the ready list else it made
 426:lib/chibios/os/rt/src/chschd.c ****      running immediately and the invoking thread goes in the ready
 427:lib/chibios/os/rt/src/chschd.c ****      list instead.*/
 428:lib/chibios/os/rt/src/chschd.c ****   if (ntp->prio <= otp->prio) {
 487              		.loc 1 428 0
 488 0008 8168     		ldr	r1, [r0, #8]
 489              	.LVL37:
 490 000a 9A68     		ldr	r2, [r3, #8]
 491 000c 9142     		cmp	r1, r2
 411:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 492              		.loc 1 411 0
 493 000e 0446     		mov	r4, r0
 494              		.loc 1 428 0
 495 0010 03D8     		bhi	.L37
 429:lib/chibios/os/rt/src/chschd.c ****     (void) chSchReadyI(ntp);
 430:lib/chibios/os/rt/src/chschd.c ****   }
 431:lib/chibios/os/rt/src/chschd.c ****   else {
 432:lib/chibios/os/rt/src/chschd.c ****     otp = chSchReadyI(otp);
 433:lib/chibios/os/rt/src/chschd.c **** 
 434:lib/chibios/os/rt/src/chschd.c ****     /* Handling idle-leave hook.*/
 435:lib/chibios/os/rt/src/chschd.c ****     if (otp->prio == IDLEPRIO) {
 436:lib/chibios/os/rt/src/chschd.c ****       CH_CFG_IDLE_LEAVE_HOOK();
 437:lib/chibios/os/rt/src/chschd.c ****     }
 438:lib/chibios/os/rt/src/chschd.c **** 
 439:lib/chibios/os/rt/src/chschd.c ****     /* The extracted thread is marked as current.*/
 440:lib/chibios/os/rt/src/chschd.c ****     currp = ntp;
 441:lib/chibios/os/rt/src/chschd.c ****     ntp->state = CH_STATE_CURRENT;
 442:lib/chibios/os/rt/src/chschd.c **** 
 443:lib/chibios/os/rt/src/chschd.c ****     /* Swap operation as tail call.*/
 444:lib/chibios/os/rt/src/chschd.c ****     chSysSwitch(ntp, otp);
 445:lib/chibios/os/rt/src/chschd.c ****   }
 446:lib/chibios/os/rt/src/chschd.c **** }
 496              		.loc 1 446 0
 497 0012 BDE87040 		pop	{r4, r5, r6, lr}
 498              		.cfi_remember_state
 499              		.cfi_restore 14
 500              		.cfi_restore 6
 501              		.cfi_restore 5
 502              		.cfi_restore 4
 503              		.cfi_def_cfa_offset 0
 429:lib/chibios/os/rt/src/chschd.c ****     (void) chSchReadyI(ntp);
 504              		.loc 1 429 0
 505 0016 FFF7FEBF 		b	chSchReadyI
 506              	.LVL38:
 507              	.L37:
 508              		.cfi_restore_state
 432:lib/chibios/os/rt/src/chschd.c **** 
 509              		.loc 1 432 0
 510 001a 1846     		mov	r0, r3
 511              	.LVL39:
 512 001c FFF7FEFF 		bl	chSchReadyI
 513              	.LVL40:
 441:lib/chibios/os/rt/src/chschd.c **** 
 514              		.loc 1 441 0
 515 0020 0123     		movs	r3, #1
 432:lib/chibios/os/rt/src/chschd.c **** 
 516              		.loc 1 432 0
 517 0022 0546     		mov	r5, r0
 518              	.LVL41:
 440:lib/chibios/os/rt/src/chschd.c ****     ntp->state = CH_STATE_CURRENT;
 519              		.loc 1 440 0
 520 0024 B461     		str	r4, [r6, #24]
 441:lib/chibios/os/rt/src/chschd.c **** 
 521              		.loc 1 441 0
 522 0026 84F82030 		strb	r3, [r4, #32]
 523              	.LBB130:
 524              	.LBB131:
 525              	.LBB132:
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 526              		.loc 3 152 0
 527              		.syntax unified
 528              	@ 152 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 529 002a EFF30983 		MRS r3, psp
 530              	
 531              	@ 0 "" 2
 532              	.LVL42:
 533              		.thumb
 534              		.syntax unified
 535              	.LBE132:
 536              	.LBE131:
 444:lib/chibios/os/rt/src/chschd.c ****   }
 537              		.loc 1 444 0
 538 002e C269     		ldr	r2, [r0, #28]
 539 0030 643B     		subs	r3, r3, #100
 540              	.LVL43:
 541 0032 9A42     		cmp	r2, r3
 542 0034 02D9     		bls	.L38
 444:lib/chibios/os/rt/src/chschd.c ****   }
 543              		.loc 1 444 0 is_stmt 0 discriminator 1
 544 0036 0548     		ldr	r0, .L39+4
 545              	.LVL44:
 546 0038 FFF7FEFF 		bl	chSysHalt
 547              	.LVL45:
 548              	.L38:
 444:lib/chibios/os/rt/src/chschd.c ****   }
 549              		.loc 1 444 0 discriminator 3
 550 003c 2946     		mov	r1, r5
 551 003e 2046     		mov	r0, r4
 552              	.LBE130:
 553              		.loc 1 446 0 is_stmt 1 discriminator 3
 554 0040 BDE87040 		pop	{r4, r5, r6, lr}
 555              		.cfi_restore 14
 556              		.cfi_restore 6
 557              		.cfi_restore 5
 558              		.cfi_restore 4
 559              		.cfi_def_cfa_offset 0
 560              	.LVL46:
 561              	.LBB133:
 444:lib/chibios/os/rt/src/chschd.c ****   }
 562              		.loc 1 444 0 discriminator 3
 563 0044 FFF7FEBF 		b	_port_switch
 564              	.LVL47:
 565              	.L40:
 566              		.align	2
 567              	.L39:
 568 0048 00000000 		.word	.LANCHOR0
 569 004c 00000000 		.word	.LC0
 570              	.LBE133:
 571              		.cfi_endproc
 572              	.LFE254:
 574              		.section	.text.chSchIsPreemptionRequired,"ax",%progbits
 575              		.align	1
 576              		.global	chSchIsPreemptionRequired
 577              		.syntax unified
 578              		.thumb
 579              		.thumb_func
 580              		.fpu softvfp
 582              	chSchIsPreemptionRequired:
 583              	.LFB256:
 447:lib/chibios/os/rt/src/chschd.c **** 
 448:lib/chibios/os/rt/src/chschd.c **** /**
 449:lib/chibios/os/rt/src/chschd.c ****  * @brief   Performs a reschedule if a higher priority thread is runnable.
 450:lib/chibios/os/rt/src/chschd.c ****  * @details If a thread with a higher priority than the current thread is in
 451:lib/chibios/os/rt/src/chschd.c ****  *          the ready list then make the higher priority thread running.
 452:lib/chibios/os/rt/src/chschd.c ****  *
 453:lib/chibios/os/rt/src/chschd.c ****  * @sclass
 454:lib/chibios/os/rt/src/chschd.c ****  */
 455:lib/chibios/os/rt/src/chschd.c **** void chSchRescheduleS(void) {
 456:lib/chibios/os/rt/src/chschd.c **** 
 457:lib/chibios/os/rt/src/chschd.c ****   chDbgCheckClassS();
 458:lib/chibios/os/rt/src/chschd.c **** 
 459:lib/chibios/os/rt/src/chschd.c ****   if (chSchIsRescRequiredI()) {
 460:lib/chibios/os/rt/src/chschd.c ****     chSchDoRescheduleAhead();
 461:lib/chibios/os/rt/src/chschd.c ****   }
 462:lib/chibios/os/rt/src/chschd.c **** }
 463:lib/chibios/os/rt/src/chschd.c **** 
 464:lib/chibios/os/rt/src/chschd.c **** /**
 465:lib/chibios/os/rt/src/chschd.c ****  * @brief   Evaluates if preemption is required.
 466:lib/chibios/os/rt/src/chschd.c ****  * @details The decision is taken by comparing the relative priorities and
 467:lib/chibios/os/rt/src/chschd.c ****  *          depending on the state of the round robin timeout counter.
 468:lib/chibios/os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 469:lib/chibios/os/rt/src/chschd.c ****  *          itself or from within the port layer.
 470:lib/chibios/os/rt/src/chschd.c ****  *
 471:lib/chibios/os/rt/src/chschd.c ****  * @retval true         if there is a thread that must go in running state
 472:lib/chibios/os/rt/src/chschd.c ****  *                      immediately.
 473:lib/chibios/os/rt/src/chschd.c ****  * @retval false        if preemption is not required.
 474:lib/chibios/os/rt/src/chschd.c ****  *
 475:lib/chibios/os/rt/src/chschd.c ****  * @special
 476:lib/chibios/os/rt/src/chschd.c ****  */
 477:lib/chibios/os/rt/src/chschd.c **** bool chSchIsPreemptionRequired(void) {
 584              		.loc 1 477 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588              		@ link register save eliminated.
 589              	.LVL48:
 478:lib/chibios/os/rt/src/chschd.c ****   tprio_t p1 = firstprio(&ch.rlist.queue);
 590              		.loc 1 478 0
 591 0000 044B     		ldr	r3, .L42
 592 0002 1A68     		ldr	r2, [r3]
 479:lib/chibios/os/rt/src/chschd.c ****   tprio_t p2 = currp->prio;
 593              		.loc 1 479 0
 594 0004 9B69     		ldr	r3, [r3, #24]
 480:lib/chibios/os/rt/src/chschd.c **** 
 481:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 482:lib/chibios/os/rt/src/chschd.c ****   /* If the running thread has not reached its time quantum, reschedule only
 483:lib/chibios/os/rt/src/chschd.c ****      if the first thread on the ready queue has a higher priority.
 484:lib/chibios/os/rt/src/chschd.c ****      Otherwise, if the running thread has used up its time quantum, reschedule
 485:lib/chibios/os/rt/src/chschd.c ****      if the first thread on the ready queue has equal or higher priority.*/
 486:lib/chibios/os/rt/src/chschd.c ****   return (currp->preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 487:lib/chibios/os/rt/src/chschd.c **** #else
 488:lib/chibios/os/rt/src/chschd.c ****   /* If the round robin preemption feature is not enabled then performs a
 489:lib/chibios/os/rt/src/chschd.c ****      simpler comparison.*/
 490:lib/chibios/os/rt/src/chschd.c ****   return p1 > p2;
 595              		.loc 1 490 0
 596 0006 9068     		ldr	r0, [r2, #8]
 597 0008 9B68     		ldr	r3, [r3, #8]
 491:lib/chibios/os/rt/src/chschd.c **** #endif
 492:lib/chibios/os/rt/src/chschd.c **** }
 598              		.loc 1 492 0
 599 000a 9842     		cmp	r0, r3
 600 000c 94BF     		ite	ls
 601 000e 0020     		movls	r0, #0
 602 0010 0120     		movhi	r0, #1
 603 0012 7047     		bx	lr
 604              	.L43:
 605              		.align	2
 606              	.L42:
 607 0014 00000000 		.word	.LANCHOR0
 608              		.cfi_endproc
 609              	.LFE256:
 611              		.thumb_set chSchIsRescRequiredI,chSchIsPreemptionRequired
 612              		.section	.text.chSchDoRescheduleBehind,"ax",%progbits
 613              		.align	1
 614              		.global	chSchDoRescheduleBehind
 615              		.syntax unified
 616              		.thumb
 617              		.thumb_func
 618              		.fpu softvfp
 620              	chSchDoRescheduleBehind:
 621              	.LFB257:
 493:lib/chibios/os/rt/src/chschd.c **** 
 494:lib/chibios/os/rt/src/chschd.c **** /**
 495:lib/chibios/os/rt/src/chschd.c ****  * @brief   Switches to the first thread on the runnable queue.
 496:lib/chibios/os/rt/src/chschd.c ****  * @details The current thread is positioned in the ready list behind all
 497:lib/chibios/os/rt/src/chschd.c ****  *          threads having the same priority. The thread regains its time
 498:lib/chibios/os/rt/src/chschd.c ****  *          quantum.
 499:lib/chibios/os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 500:lib/chibios/os/rt/src/chschd.c ****  *          itself.
 501:lib/chibios/os/rt/src/chschd.c ****  *
 502:lib/chibios/os/rt/src/chschd.c ****  * @special
 503:lib/chibios/os/rt/src/chschd.c ****  */
 504:lib/chibios/os/rt/src/chschd.c **** void chSchDoRescheduleBehind(void) {
 622              		.loc 1 504 0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 0
 625              		@ frame_needed = 0, uses_anonymous_args = 0
 626 0000 38B5     		push	{r3, r4, r5, lr}
 627              		.cfi_def_cfa_offset 16
 628              		.cfi_offset 3, -16
 629              		.cfi_offset 4, -12
 630              		.cfi_offset 5, -8
 631              		.cfi_offset 14, -4
 505:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 632              		.loc 1 505 0
 633 0002 0E4C     		ldr	r4, .L46
 634              	.LBB134:
 635              	.LBB135:
 618:./lib/chibios/os/rt/include/chschd.h **** 
 636              		.loc 2 618 0
 637 0004 2368     		ldr	r3, [r4]
 638              	.LBE135:
 639              	.LBE134:
 640              		.loc 1 505 0
 641 0006 A069     		ldr	r0, [r4, #24]
 642              	.LVL49:
 643              	.LBB137:
 644              	.LBB136:
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 645              		.loc 2 620 0
 646 0008 1A68     		ldr	r2, [r3]
 647 000a 2260     		str	r2, [r4]
 621:./lib/chibios/os/rt/include/chschd.h **** 
 648              		.loc 2 621 0
 649 000c 5460     		str	r4, [r2, #4]
 650              	.LVL50:
 651              	.LBE136:
 652              	.LBE137:
 506:lib/chibios/os/rt/src/chschd.c **** 
 507:lib/chibios/os/rt/src/chschd.c ****   /* Picks the first thread from the ready queue and makes it current.*/
 508:lib/chibios/os/rt/src/chschd.c ****   currp = queue_fifo_remove(&ch.rlist.queue);
 509:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 653              		.loc 1 509 0
 654 000e 0122     		movs	r2, #1
 655 0010 83F82020 		strb	r2, [r3, #32]
 508:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 656              		.loc 1 508 0
 657 0014 A361     		str	r3, [r4, #24]
 510:lib/chibios/os/rt/src/chschd.c **** 
 511:lib/chibios/os/rt/src/chschd.c ****   /* Handling idle-leave hook.*/
 512:lib/chibios/os/rt/src/chschd.c ****   if (otp->prio == IDLEPRIO) {
 513:lib/chibios/os/rt/src/chschd.c ****     CH_CFG_IDLE_LEAVE_HOOK();
 514:lib/chibios/os/rt/src/chschd.c ****   }
 515:lib/chibios/os/rt/src/chschd.c **** 
 516:lib/chibios/os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 517:lib/chibios/os/rt/src/chschd.c ****   /* It went behind peers so it gets a new time quantum.*/
 518:lib/chibios/os/rt/src/chschd.c ****   otp->preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 519:lib/chibios/os/rt/src/chschd.c **** #endif
 520:lib/chibios/os/rt/src/chschd.c **** 
 521:lib/chibios/os/rt/src/chschd.c ****   /* Placing in ready list behind peers.*/
 522:lib/chibios/os/rt/src/chschd.c ****   otp = chSchReadyI(otp);
 658              		.loc 1 522 0
 659 0016 FFF7FEFF 		bl	chSchReadyI
 660              	.LVL51:
 661 001a 0546     		mov	r5, r0
 662              	.LVL52:
 663              	.LBB138:
 664              	.LBB139:
 665              	.LBB140:
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 666              		.loc 3 152 0
 667              		.syntax unified
 668              	@ 152 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 669 001c EFF30983 		MRS r3, psp
 670              	
 671              	@ 0 "" 2
 672              	.LVL53:
 673              		.thumb
 674              		.syntax unified
 675              	.LBE140:
 676              	.LBE139:
 523:lib/chibios/os/rt/src/chschd.c **** 
 524:lib/chibios/os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 525:lib/chibios/os/rt/src/chschd.c ****   chSysSwitch(currp, otp);
 677              		.loc 1 525 0
 678 0020 C269     		ldr	r2, [r0, #28]
 679 0022 643B     		subs	r3, r3, #100
 680              	.LVL54:
 681 0024 9A42     		cmp	r2, r3
 682 0026 02D9     		bls	.L45
 683              		.loc 1 525 0 is_stmt 0 discriminator 1
 684 0028 0548     		ldr	r0, .L46+4
 685              	.LVL55:
 686 002a FFF7FEFF 		bl	chSysHalt
 687              	.LVL56:
 688              	.L45:
 689              		.loc 1 525 0 discriminator 3
 690 002e 2946     		mov	r1, r5
 691 0030 A069     		ldr	r0, [r4, #24]
 692              	.LBE138:
 526:lib/chibios/os/rt/src/chschd.c **** }
 693              		.loc 1 526 0 is_stmt 1 discriminator 3
 694 0032 BDE83840 		pop	{r3, r4, r5, lr}
 695              		.cfi_restore 14
 696              		.cfi_restore 5
 697              		.cfi_restore 4
 698              		.cfi_restore 3
 699              		.cfi_def_cfa_offset 0
 700              	.LVL57:
 701              	.LBB141:
 525:lib/chibios/os/rt/src/chschd.c **** }
 702              		.loc 1 525 0 discriminator 3
 703 0036 FFF7FEBF 		b	_port_switch
 704              	.LVL58:
 705              	.L47:
 706 003a 00BF     		.align	2
 707              	.L46:
 708 003c 00000000 		.word	.LANCHOR0
 709 0040 00000000 		.word	.LC0
 710              	.LBE141:
 711              		.cfi_endproc
 712              	.LFE257:
 714              		.section	.text.chSchDoRescheduleAhead,"ax",%progbits
 715              		.align	1
 716              		.global	chSchDoRescheduleAhead
 717              		.syntax unified
 718              		.thumb
 719              		.thumb_func
 720              		.fpu softvfp
 722              	chSchDoRescheduleAhead:
 723              	.LFB258:
 527:lib/chibios/os/rt/src/chschd.c **** 
 528:lib/chibios/os/rt/src/chschd.c **** /**
 529:lib/chibios/os/rt/src/chschd.c ****  * @brief   Switches to the first thread on the runnable queue.
 530:lib/chibios/os/rt/src/chschd.c ****  * @details The current thread is positioned in the ready list ahead of all
 531:lib/chibios/os/rt/src/chschd.c ****  *          threads having the same priority.
 532:lib/chibios/os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 533:lib/chibios/os/rt/src/chschd.c ****  *          itself.
 534:lib/chibios/os/rt/src/chschd.c ****  *
 535:lib/chibios/os/rt/src/chschd.c ****  * @special
 536:lib/chibios/os/rt/src/chschd.c ****  */
 537:lib/chibios/os/rt/src/chschd.c **** void chSchDoRescheduleAhead(void) {
 724              		.loc 1 537 0
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 0
 727              		@ frame_needed = 0, uses_anonymous_args = 0
 728 0000 38B5     		push	{r3, r4, r5, lr}
 729              		.cfi_def_cfa_offset 16
 730              		.cfi_offset 3, -16
 731              		.cfi_offset 4, -12
 732              		.cfi_offset 5, -8
 733              		.cfi_offset 14, -4
 538:lib/chibios/os/rt/src/chschd.c ****   thread_t *otp = currp;
 734              		.loc 1 538 0
 735 0002 0E4C     		ldr	r4, .L50
 736              	.LBB142:
 737              	.LBB143:
 618:./lib/chibios/os/rt/include/chschd.h **** 
 738              		.loc 2 618 0
 739 0004 2368     		ldr	r3, [r4]
 740              	.LBE143:
 741              	.LBE142:
 742              		.loc 1 538 0
 743 0006 A069     		ldr	r0, [r4, #24]
 744              	.LVL59:
 745              	.LBB145:
 746              	.LBB144:
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 747              		.loc 2 620 0
 748 0008 1A68     		ldr	r2, [r3]
 749 000a 2260     		str	r2, [r4]
 621:./lib/chibios/os/rt/include/chschd.h **** 
 750              		.loc 2 621 0
 751 000c 5460     		str	r4, [r2, #4]
 752              	.LVL60:
 753              	.LBE144:
 754              	.LBE145:
 539:lib/chibios/os/rt/src/chschd.c **** 
 540:lib/chibios/os/rt/src/chschd.c ****   /* Picks the first thread from the ready queue and makes it current.*/
 541:lib/chibios/os/rt/src/chschd.c ****   currp = queue_fifo_remove(&ch.rlist.queue);
 542:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 755              		.loc 1 542 0
 756 000e 0122     		movs	r2, #1
 757 0010 83F82020 		strb	r2, [r3, #32]
 541:lib/chibios/os/rt/src/chschd.c ****   currp->state = CH_STATE_CURRENT;
 758              		.loc 1 541 0
 759 0014 A361     		str	r3, [r4, #24]
 543:lib/chibios/os/rt/src/chschd.c **** 
 544:lib/chibios/os/rt/src/chschd.c ****   /* Handling idle-leave hook.*/
 545:lib/chibios/os/rt/src/chschd.c ****   if (otp->prio == IDLEPRIO) {
 546:lib/chibios/os/rt/src/chschd.c ****     CH_CFG_IDLE_LEAVE_HOOK();
 547:lib/chibios/os/rt/src/chschd.c ****   }
 548:lib/chibios/os/rt/src/chschd.c **** 
 549:lib/chibios/os/rt/src/chschd.c ****   /* Placing in ready list ahead of peers.*/
 550:lib/chibios/os/rt/src/chschd.c ****   otp = chSchReadyAheadI(otp);
 760              		.loc 1 550 0
 761 0016 FFF7FEFF 		bl	chSchReadyAheadI
 762              	.LVL61:
 763 001a 0546     		mov	r5, r0
 764              	.LVL62:
 765              	.LBB146:
 766              	.LBB147:
 767              	.LBB148:
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 768              		.loc 3 152 0
 769              		.syntax unified
 770              	@ 152 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 771 001c EFF30983 		MRS r3, psp
 772              	
 773              	@ 0 "" 2
 774              	.LVL63:
 775              		.thumb
 776              		.syntax unified
 777              	.LBE148:
 778              	.LBE147:
 551:lib/chibios/os/rt/src/chschd.c **** 
 552:lib/chibios/os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 553:lib/chibios/os/rt/src/chschd.c ****   chSysSwitch(currp, otp);
 779              		.loc 1 553 0
 780 0020 C269     		ldr	r2, [r0, #28]
 781 0022 643B     		subs	r3, r3, #100
 782              	.LVL64:
 783 0024 9A42     		cmp	r2, r3
 784 0026 02D9     		bls	.L49
 785              		.loc 1 553 0 is_stmt 0 discriminator 1
 786 0028 0548     		ldr	r0, .L50+4
 787              	.LVL65:
 788 002a FFF7FEFF 		bl	chSysHalt
 789              	.LVL66:
 790              	.L49:
 791              		.loc 1 553 0 discriminator 3
 792 002e 2946     		mov	r1, r5
 793 0030 A069     		ldr	r0, [r4, #24]
 794              	.LBE146:
 554:lib/chibios/os/rt/src/chschd.c **** }
 795              		.loc 1 554 0 is_stmt 1 discriminator 3
 796 0032 BDE83840 		pop	{r3, r4, r5, lr}
 797              		.cfi_restore 14
 798              		.cfi_restore 5
 799              		.cfi_restore 4
 800              		.cfi_restore 3
 801              		.cfi_def_cfa_offset 0
 802              	.LVL67:
 803              	.LBB149:
 553:lib/chibios/os/rt/src/chschd.c **** }
 804              		.loc 1 553 0 discriminator 3
 805 0036 FFF7FEBF 		b	_port_switch
 806              	.LVL68:
 807              	.L51:
 808 003a 00BF     		.align	2
 809              	.L50:
 810 003c 00000000 		.word	.LANCHOR0
 811 0040 00000000 		.word	.LC0
 812              	.LBE149:
 813              		.cfi_endproc
 814              	.LFE258:
 816              		.section	.text.chSchRescheduleS,"ax",%progbits
 817              		.align	1
 818              		.global	chSchRescheduleS
 819              		.syntax unified
 820              		.thumb
 821              		.thumb_func
 822              		.fpu softvfp
 824              	chSchRescheduleS:
 825              	.LFB255:
 455:lib/chibios/os/rt/src/chschd.c **** 
 826              		.loc 1 455 0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 0
 829              		@ frame_needed = 0, uses_anonymous_args = 0
 830 0000 08B5     		push	{r3, lr}
 831              		.cfi_def_cfa_offset 8
 832              		.cfi_offset 3, -8
 833              		.cfi_offset 14, -4
 459:lib/chibios/os/rt/src/chschd.c ****     chSchDoRescheduleAhead();
 834              		.loc 1 459 0
 835 0002 FFF7FEFF 		bl	chSchIsRescRequiredI
 836              	.LVL69:
 837 0006 18B1     		cbz	r0, .L52
 462:lib/chibios/os/rt/src/chschd.c **** 
 838              		.loc 1 462 0
 839 0008 BDE80840 		pop	{r3, lr}
 840              		.cfi_remember_state
 841              		.cfi_restore 14
 842              		.cfi_restore 3
 843              		.cfi_def_cfa_offset 0
 460:lib/chibios/os/rt/src/chschd.c ****   }
 844              		.loc 1 460 0
 845 000c FFF7FEBF 		b	chSchDoRescheduleAhead
 846              	.LVL70:
 847              	.L52:
 848              		.cfi_restore_state
 462:lib/chibios/os/rt/src/chschd.c **** 
 849              		.loc 1 462 0
 850 0010 08BD     		pop	{r3, pc}
 851              		.cfi_endproc
 852              	.LFE255:
 854              		.section	.text.chSchDoReschedule,"ax",%progbits
 855              		.align	1
 856              		.global	chSchDoReschedule
 857              		.syntax unified
 858              		.thumb
 859              		.thumb_func
 860              		.fpu softvfp
 862              	chSchDoReschedule:
 863              	.LFB263:
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 0
 866              		@ frame_needed = 0, uses_anonymous_args = 0
 867              		@ link register save eliminated.
 868 0000 FFF7FEBF 		b	chSchDoRescheduleAhead
 869              		.cfi_endproc
 870              	.LFE263:
 872              		.global	ch
 873              		.section	.bss.ch,"aw",%nobits
 874              		.align	2
 875              		.set	.LANCHOR0,. + 0
 878              	ch:
 879 0000 00000000 		.space	120
 879      00000000 
 879      00000000 
 879      00000000 
 879      00000000 
 880              		.section	.rodata.chSchGoSleepS.str1.1,"aMS",%progbits,1
 881              	.LC0:
 882 0000 73746163 		.ascii	"stack overflow\000"
 882      6B206F76 
 882      6572666C 
 882      6F7700
 883              		.text
 884              	.Letext0:
 885              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 886              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 887              		.file 7 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 888              		.file 8 "./lib/chibios/os/rt/include/chsystypes.h"
 889              		.file 9 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 890              		.file 10 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 891              		.file 11 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 892              		.file 12 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 893              		.file 13 "./lib/chibios/os/rt/include/chtm.h"
 894              		.file 14 "./lib/chibios/os/rt/include/chmtx.h"
 895              		.file 15 "./lib/chibios/os/rt/include/chsys.h"
 896              		.file 16 "./lib/chibios/os/rt/include/chregistry.h"
 897              		.file 17 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 898              		.file 18 "./lib/chibios/os/rt/include/chvt.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chschd.c
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:16     .text._scheduler_init:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:23     .text._scheduler_init:0000000000000000 _scheduler_init
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:57     .text._scheduler_init:0000000000000010 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:62     .text.chSchReadyI:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:69     .text.chSchReadyI:0000000000000000 chSchReadyI
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:109    .text.chSchReadyI:0000000000000020 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:114    .text.wakeup:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:120    .text.wakeup:0000000000000000 wakeup
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:158    .text.wakeup:0000000000000016 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:166    .text.wakeup:000000000000001e $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:231    .text.chSchReadyAheadI:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:238    .text.chSchReadyAheadI:0000000000000000 chSchReadyAheadI
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:278    .text.chSchReadyAheadI:0000000000000020 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:283    .text.chSchGoSleepS:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:290    .text.chSchGoSleepS:0000000000000000 chSchGoSleepS
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:377    .text.chSchGoSleepS:0000000000000038 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:384    .text.chSchGoSleepTimeoutS:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:391    .text.chSchGoSleepTimeoutS:0000000000000000 chSchGoSleepTimeoutS
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:454    .text.chSchGoSleepTimeoutS:0000000000000034 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:460    .text.chSchWakeupS:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:467    .text.chSchWakeupS:0000000000000000 chSchWakeupS
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:568    .text.chSchWakeupS:0000000000000048 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:575    .text.chSchIsPreemptionRequired:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:582    .text.chSchIsPreemptionRequired:0000000000000000 chSchIsPreemptionRequired
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:607    .text.chSchIsPreemptionRequired:0000000000000014 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:582    .text.chSchIsPreemptionRequired:0000000000000000 chSchIsRescRequiredI
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:613    .text.chSchDoRescheduleBehind:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:620    .text.chSchDoRescheduleBehind:0000000000000000 chSchDoRescheduleBehind
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:708    .text.chSchDoRescheduleBehind:000000000000003c $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:715    .text.chSchDoRescheduleAhead:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:722    .text.chSchDoRescheduleAhead:0000000000000000 chSchDoRescheduleAhead
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:810    .text.chSchDoRescheduleAhead:000000000000003c $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:817    .text.chSchRescheduleS:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:824    .text.chSchRescheduleS:0000000000000000 chSchRescheduleS
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:855    .text.chSchDoReschedule:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:862    .text.chSchDoReschedule:0000000000000000 chSchDoReschedule
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:878    .bss.ch:0000000000000000 ch
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//cc2MPZ0I.s:874    .bss.ch:0000000000000000 $d

UNDEFINED SYMBOLS
chSysHalt
_port_switch
chVTDoSetI
chVTDoResetI
