   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"chsem.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.chSemObjectInit,"ax",%progbits
  16              		.align	1
  17              		.global	chSemObjectInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	chSemObjectInit:
  24              	.LFB248:
  25              		.file 1 "lib/chibios/os/rt/src/chsem.c"
   1:lib/chibios/os/rt/src/chsem.c **** /*
   2:lib/chibios/os/rt/src/chsem.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:lib/chibios/os/rt/src/chsem.c **** 
   4:lib/chibios/os/rt/src/chsem.c ****     This file is part of ChibiOS.
   5:lib/chibios/os/rt/src/chsem.c **** 
   6:lib/chibios/os/rt/src/chsem.c ****     ChibiOS is free software; you can redistribute it and/or modify
   7:lib/chibios/os/rt/src/chsem.c ****     it under the terms of the GNU General Public License as published by
   8:lib/chibios/os/rt/src/chsem.c ****     the Free Software Foundation; either version 3 of the License, or
   9:lib/chibios/os/rt/src/chsem.c ****     (at your option) any later version.
  10:lib/chibios/os/rt/src/chsem.c **** 
  11:lib/chibios/os/rt/src/chsem.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:lib/chibios/os/rt/src/chsem.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:lib/chibios/os/rt/src/chsem.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:lib/chibios/os/rt/src/chsem.c ****     GNU General Public License for more details.
  15:lib/chibios/os/rt/src/chsem.c **** 
  16:lib/chibios/os/rt/src/chsem.c ****     You should have received a copy of the GNU General Public License
  17:lib/chibios/os/rt/src/chsem.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:lib/chibios/os/rt/src/chsem.c **** */
  19:lib/chibios/os/rt/src/chsem.c **** 
  20:lib/chibios/os/rt/src/chsem.c **** /**
  21:lib/chibios/os/rt/src/chsem.c ****  * @file    chsem.c
  22:lib/chibios/os/rt/src/chsem.c ****  * @brief   Semaphores code.
  23:lib/chibios/os/rt/src/chsem.c ****  *
  24:lib/chibios/os/rt/src/chsem.c ****  * @addtogroup semaphores
  25:lib/chibios/os/rt/src/chsem.c ****  * @details Semaphores related APIs and services.
  26:lib/chibios/os/rt/src/chsem.c ****  *          <h2>Operation mode</h2>
  27:lib/chibios/os/rt/src/chsem.c ****  *          Semaphores are a flexible synchronization primitive, ChibiOS/RT
  28:lib/chibios/os/rt/src/chsem.c ****  *          implements semaphores in their "counting semaphores" variant as
  29:lib/chibios/os/rt/src/chsem.c ****  *          defined by Edsger Dijkstra plus several enhancements like:
  30:lib/chibios/os/rt/src/chsem.c ****  *          - Wait operation with timeout.
  31:lib/chibios/os/rt/src/chsem.c ****  *          - Reset operation.
  32:lib/chibios/os/rt/src/chsem.c ****  *          - Atomic wait+signal operation.
  33:lib/chibios/os/rt/src/chsem.c ****  *          - Return message from the wait operation (OK, RESET, TIMEOUT).
  34:lib/chibios/os/rt/src/chsem.c ****  *          .
  35:lib/chibios/os/rt/src/chsem.c ****  *          The binary semaphores variant can be easily implemented using
  36:lib/chibios/os/rt/src/chsem.c ****  *          counting semaphores.<br>
  37:lib/chibios/os/rt/src/chsem.c ****  *          Operations defined for semaphores:
  38:lib/chibios/os/rt/src/chsem.c ****  *          - <b>Signal</b>: The semaphore counter is increased and if the
  39:lib/chibios/os/rt/src/chsem.c ****  *            result is non-positive then a waiting thread is removed from
  40:lib/chibios/os/rt/src/chsem.c ****  *            the semaphore queue and made ready for execution.
  41:lib/chibios/os/rt/src/chsem.c ****  *          - <b>Wait</b>: The semaphore counter is decreased and if the result
  42:lib/chibios/os/rt/src/chsem.c ****  *            becomes negative the thread is queued in the semaphore and
  43:lib/chibios/os/rt/src/chsem.c ****  *            suspended.
  44:lib/chibios/os/rt/src/chsem.c ****  *          - <b>Reset</b>: The semaphore counter is reset to a non-negative
  45:lib/chibios/os/rt/src/chsem.c ****  *            value and all the threads in the queue are released.
  46:lib/chibios/os/rt/src/chsem.c ****  *          .
  47:lib/chibios/os/rt/src/chsem.c ****  *          Semaphores can be used as guards for mutual exclusion zones
  48:lib/chibios/os/rt/src/chsem.c ****  *          (note that mutexes are recommended for this kind of use) but
  49:lib/chibios/os/rt/src/chsem.c ****  *          also have other uses, queues guards and counters for example.<br>
  50:lib/chibios/os/rt/src/chsem.c ****  *          Semaphores usually use a FIFO queuing strategy but it is possible
  51:lib/chibios/os/rt/src/chsem.c ****  *          to make them order threads by priority by enabling
  52:lib/chibios/os/rt/src/chsem.c ****  *          @p CH_CFG_USE_SEMAPHORES_PRIORITY in @p chconf.h.
  53:lib/chibios/os/rt/src/chsem.c ****  * @pre     In order to use the semaphore APIs the @p CH_CFG_USE_SEMAPHORES
  54:lib/chibios/os/rt/src/chsem.c ****  *          option must be enabled in @p chconf.h.
  55:lib/chibios/os/rt/src/chsem.c ****  * @{
  56:lib/chibios/os/rt/src/chsem.c ****  */
  57:lib/chibios/os/rt/src/chsem.c **** 
  58:lib/chibios/os/rt/src/chsem.c **** #include "ch.h"
  59:lib/chibios/os/rt/src/chsem.c **** 
  60:lib/chibios/os/rt/src/chsem.c **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
  61:lib/chibios/os/rt/src/chsem.c **** 
  62:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  63:lib/chibios/os/rt/src/chsem.c **** /* Module exported variables.                                                */
  64:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  65:lib/chibios/os/rt/src/chsem.c **** 
  66:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  67:lib/chibios/os/rt/src/chsem.c **** /* Module local types.                                                       */
  68:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  69:lib/chibios/os/rt/src/chsem.c **** 
  70:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  71:lib/chibios/os/rt/src/chsem.c **** /* Module local variables.                                                   */
  72:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  73:lib/chibios/os/rt/src/chsem.c **** 
  74:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  75:lib/chibios/os/rt/src/chsem.c **** /* Module local functions.                                                   */
  76:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  77:lib/chibios/os/rt/src/chsem.c **** 
  78:lib/chibios/os/rt/src/chsem.c **** #if CH_CFG_USE_SEMAPHORES_PRIORITY == TRUE
  79:lib/chibios/os/rt/src/chsem.c **** #define sem_insert(tp, qp) queue_prio_insert(tp, qp)
  80:lib/chibios/os/rt/src/chsem.c **** #else
  81:lib/chibios/os/rt/src/chsem.c **** #define sem_insert(tp, qp) queue_insert(tp, qp)
  82:lib/chibios/os/rt/src/chsem.c **** #endif
  83:lib/chibios/os/rt/src/chsem.c **** 
  84:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  85:lib/chibios/os/rt/src/chsem.c **** /* Module exported functions.                                                */
  86:lib/chibios/os/rt/src/chsem.c **** /*===========================================================================*/
  87:lib/chibios/os/rt/src/chsem.c **** 
  88:lib/chibios/os/rt/src/chsem.c **** /**
  89:lib/chibios/os/rt/src/chsem.c ****  * @brief   Initializes a semaphore with the specified counter value.
  90:lib/chibios/os/rt/src/chsem.c ****  *
  91:lib/chibios/os/rt/src/chsem.c ****  * @param[out] sp       pointer to a @p semaphore_t structure
  92:lib/chibios/os/rt/src/chsem.c ****  * @param[in] n         initial value of the semaphore counter. Must be
  93:lib/chibios/os/rt/src/chsem.c ****  *                      non-negative.
  94:lib/chibios/os/rt/src/chsem.c ****  *
  95:lib/chibios/os/rt/src/chsem.c ****  * @init
  96:lib/chibios/os/rt/src/chsem.c ****  */
  97:lib/chibios/os/rt/src/chsem.c **** void chSemObjectInit(semaphore_t *sp, cnt_t n) {
  26              		.loc 1 97 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
  32              	.LBB88:
  33              	.LBB89:
  34              		.file 2 "./lib/chibios/os/rt/include/chschd.h"
   1:./lib/chibios/os/rt/include/chschd.h **** /*
   2:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chschd.h **** 
   4:./lib/chibios/os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chschd.h **** 
   6:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chschd.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chschd.h **** 
  11:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chschd.h **** 
  16:./lib/chibios/os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chschd.h **** */
  19:./lib/chibios/os/rt/include/chschd.h **** 
  20:./lib/chibios/os/rt/include/chschd.h **** /**
  21:./lib/chibios/os/rt/include/chschd.h ****  * @file    chschd.h
  22:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:./lib/chibios/os/rt/include/chschd.h ****  *
  24:./lib/chibios/os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:./lib/chibios/os/rt/include/chschd.h ****  * @{
  26:./lib/chibios/os/rt/include/chschd.h ****  */
  27:./lib/chibios/os/rt/include/chschd.h **** 
  28:./lib/chibios/os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:./lib/chibios/os/rt/include/chschd.h **** #define CHSCHD_H
  30:./lib/chibios/os/rt/include/chschd.h **** 
  31:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chschd.h **** 
  35:./lib/chibios/os/rt/include/chschd.h **** /**
  36:./lib/chibios/os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:./lib/chibios/os/rt/include/chschd.h ****  * @{
  38:./lib/chibios/os/rt/include/chschd.h ****  */
  39:./lib/chibios/os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:./lib/chibios/os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  42:./lib/chibios/os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  44:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  45:./lib/chibios/os/rt/include/chschd.h **** 
  46:./lib/chibios/os/rt/include/chschd.h **** /**
  47:./lib/chibios/os/rt/include/chschd.h ****  * @name    Priority constants
  48:./lib/chibios/os/rt/include/chschd.h ****  * @{
  49:./lib/chibios/os/rt/include/chschd.h ****  */
  50:./lib/chibios/os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:./lib/chibios/os/rt/include/chschd.h ****                                                  priority.                  */
  52:./lib/chibios/os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:./lib/chibios/os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:./lib/chibios/os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:./lib/chibios/os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  57:./lib/chibios/os/rt/include/chschd.h **** 
  58:./lib/chibios/os/rt/include/chschd.h **** /**
  59:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread states
  60:./lib/chibios/os/rt/include/chschd.h ****  * @{
  61:./lib/chibios/os/rt/include/chschd.h ****  */
  62:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:./lib/chibios/os/rt/include/chschd.h ****                                                   ready list.               */
  64:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:./lib/chibios/os/rt/include/chschd.h ****                                                   in queue.                 */
  77:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:./lib/chibios/os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:./lib/chibios/os/rt/include/chschd.h ****                                                   message.                  */
  81:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:./lib/chibios/os/rt/include/chschd.h **** 
  83:./lib/chibios/os/rt/include/chschd.h **** /**
  84:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:./lib/chibios/os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:./lib/chibios/os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:./lib/chibios/os/rt/include/chschd.h ****  */
  88:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:./lib/chibios/os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:./lib/chibios/os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:./lib/chibios/os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  93:./lib/chibios/os/rt/include/chschd.h **** 
  94:./lib/chibios/os/rt/include/chschd.h **** /**
  95:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:./lib/chibios/os/rt/include/chschd.h ****  * @{
  97:./lib/chibios/os/rt/include/chschd.h ****  */
  98:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:./lib/chibios/os/rt/include/chschd.h ****                                                  mask.                      */
 100:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:./lib/chibios/os/rt/include/chschd.h ****                                                  flag.                      */
 107:./lib/chibios/os/rt/include/chschd.h **** /** @} */
 108:./lib/chibios/os/rt/include/chschd.h **** 
 109:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 110:./lib/chibios/os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 112:./lib/chibios/os/rt/include/chschd.h **** 
 113:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 114:./lib/chibios/os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 116:./lib/chibios/os/rt/include/chschd.h **** 
 117:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_ENTER_HOOK)
 118:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_ENTER_HOOK not defined in chconf.h"
 119:./lib/chibios/os/rt/include/chschd.h **** #endif
 120:./lib/chibios/os/rt/include/chschd.h **** 
 121:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LEAVE_HOOK)
 122:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LEAVE_HOOK not defined in chconf.h"
 123:./lib/chibios/os/rt/include/chschd.h **** #endif
 124:./lib/chibios/os/rt/include/chschd.h **** 
 125:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LOOP_HOOK)
 126:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LOOP_HOOK not defined in chconf.h"
 127:./lib/chibios/os/rt/include/chschd.h **** #endif
 128:./lib/chibios/os/rt/include/chschd.h **** 
 129:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 130:./lib/chibios/os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 131:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 132:./lib/chibios/os/rt/include/chschd.h **** 
 133:./lib/chibios/os/rt/include/chschd.h **** /**
 134:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 135:./lib/chibios/os/rt/include/chschd.h ****  */
 136:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_list {
 137:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 138:./lib/chibios/os/rt/include/chschd.h **** };
 139:./lib/chibios/os/rt/include/chschd.h **** 
 140:./lib/chibios/os/rt/include/chschd.h **** /**
 141:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 142:./lib/chibios/os/rt/include/chschd.h ****  */
 143:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_queue {
 144:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 145:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 146:./lib/chibios/os/rt/include/chschd.h **** };
 147:./lib/chibios/os/rt/include/chschd.h **** 
 148:./lib/chibios/os/rt/include/chschd.h **** /**
 149:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 150:./lib/chibios/os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 151:./lib/chibios/os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 152:./lib/chibios/os/rt/include/chschd.h ****  *          by shrinking this structure.
 153:./lib/chibios/os/rt/include/chschd.h ****  */
 154:./lib/chibios/os/rt/include/chschd.h **** struct ch_thread {
 155:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 156:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 157:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 158:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 159:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 160:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 161:./lib/chibios/os/rt/include/chschd.h **** #endif
 162:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 163:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 164:./lib/chibios/os/rt/include/chschd.h ****   /**
 165:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 166:./lib/chibios/os/rt/include/chschd.h ****    */
 167:./lib/chibios/os/rt/include/chschd.h ****   const char            *name;
 168:./lib/chibios/os/rt/include/chschd.h **** #endif
 169:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 170:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 171:./lib/chibios/os/rt/include/chschd.h ****   /**
 172:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Working area base address.
 173:./lib/chibios/os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 174:./lib/chibios/os/rt/include/chschd.h ****    *          dynamic threading.
 175:./lib/chibios/os/rt/include/chschd.h ****    */
 176:./lib/chibios/os/rt/include/chschd.h ****   stkalign_t            *wabase;
 177:./lib/chibios/os/rt/include/chschd.h **** #endif
 178:./lib/chibios/os/rt/include/chschd.h ****   /**
 179:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Current thread state.
 180:./lib/chibios/os/rt/include/chschd.h ****    */
 181:./lib/chibios/os/rt/include/chschd.h ****   tstate_t              state;
 182:./lib/chibios/os/rt/include/chschd.h ****   /**
 183:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Various thread flags.
 184:./lib/chibios/os/rt/include/chschd.h ****    */
 185:./lib/chibios/os/rt/include/chschd.h ****   tmode_t               flags;
 186:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 187:./lib/chibios/os/rt/include/chschd.h ****   /**
 188:./lib/chibios/os/rt/include/chschd.h ****    * @brief   References to this thread.
 189:./lib/chibios/os/rt/include/chschd.h ****    */
 190:./lib/chibios/os/rt/include/chschd.h ****   trefs_t               refs;
 191:./lib/chibios/os/rt/include/chschd.h **** #endif
 192:./lib/chibios/os/rt/include/chschd.h ****   /**
 193:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 194:./lib/chibios/os/rt/include/chschd.h ****    */
 195:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 196:./lib/chibios/os/rt/include/chschd.h ****   tslices_t             preempt;
 197:./lib/chibios/os/rt/include/chschd.h **** #endif
 198:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 199:./lib/chibios/os/rt/include/chschd.h ****   /**
 200:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 201:./lib/chibios/os/rt/include/chschd.h ****    * @note    This field can overflow.
 202:./lib/chibios/os/rt/include/chschd.h ****    */
 203:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    time;
 204:./lib/chibios/os/rt/include/chschd.h **** #endif
 205:./lib/chibios/os/rt/include/chschd.h ****   /**
 206:./lib/chibios/os/rt/include/chschd.h ****    * @brief   State-specific fields.
 207:./lib/chibios/os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 208:./lib/chibios/os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 209:./lib/chibios/os/rt/include/chschd.h ****    */
 210:./lib/chibios/os/rt/include/chschd.h ****   union {
 211:./lib/chibios/os/rt/include/chschd.h ****     /**
 212:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 213:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 214:./lib/chibios/os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 215:./lib/chibios/os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 216:./lib/chibios/os/rt/include/chschd.h ****      */
 217:./lib/chibios/os/rt/include/chschd.h ****     msg_t               rdymsg;
 218:./lib/chibios/os/rt/include/chschd.h ****     /**
 219:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread exit code.
 220:./lib/chibios/os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 221:./lib/chibios/os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 222:./lib/chibios/os/rt/include/chschd.h ****      *          this thread.
 223:./lib/chibios/os/rt/include/chschd.h ****      */
 224:./lib/chibios/os/rt/include/chschd.h ****     msg_t               exitcode;
 225:./lib/chibios/os/rt/include/chschd.h ****     /**
 226:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 227:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 228:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 229:./lib/chibios/os/rt/include/chschd.h ****      *          states.
 230:./lib/chibios/os/rt/include/chschd.h ****      */
 231:./lib/chibios/os/rt/include/chschd.h ****     void                *wtobjp;
 232:./lib/chibios/os/rt/include/chschd.h ****     /**
 233:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 234:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 235:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 236:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 237:./lib/chibios/os/rt/include/chschd.h ****      */
 238:./lib/chibios/os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 239:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 240:./lib/chibios/os/rt/include/chschd.h ****     /**
 241:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread sent message.
 242:./lib/chibios/os/rt/include/chschd.h ****      */
 243:./lib/chibios/os/rt/include/chschd.h ****     msg_t               sentmsg;
 244:./lib/chibios/os/rt/include/chschd.h **** #endif
 245:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 246:./lib/chibios/os/rt/include/chschd.h ****     /**
 247:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 248:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 249:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 250:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 251:./lib/chibios/os/rt/include/chschd.h ****      */
 252:./lib/chibios/os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 253:./lib/chibios/os/rt/include/chschd.h **** #endif
 254:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 255:./lib/chibios/os/rt/include/chschd.h ****     /**
 256:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 257:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 258:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 259:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 260:./lib/chibios/os/rt/include/chschd.h ****      */
 261:./lib/chibios/os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 262:./lib/chibios/os/rt/include/chschd.h **** #endif
 263:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 264:./lib/chibios/os/rt/include/chschd.h ****     /**
 265:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 266:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 267:./lib/chibios/os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 268:./lib/chibios/os/rt/include/chschd.h ****      */
 269:./lib/chibios/os/rt/include/chschd.h ****     eventmask_t         ewmask;
 270:./lib/chibios/os/rt/include/chschd.h **** #endif
 271:./lib/chibios/os/rt/include/chschd.h ****   }                     u;
 272:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 273:./lib/chibios/os/rt/include/chschd.h ****   /**
 274:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 275:./lib/chibios/os/rt/include/chschd.h ****    */
 276:./lib/chibios/os/rt/include/chschd.h ****   threads_list_t        waiting;
 277:./lib/chibios/os/rt/include/chschd.h **** #endif
 278:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chschd.h ****   /**
 280:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Messages queue.
 281:./lib/chibios/os/rt/include/chschd.h ****    */
 282:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 283:./lib/chibios/os/rt/include/chschd.h **** #endif
 284:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 285:./lib/chibios/os/rt/include/chschd.h ****   /**
 286:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pending events mask.
 287:./lib/chibios/os/rt/include/chschd.h ****    */
 288:./lib/chibios/os/rt/include/chschd.h ****   eventmask_t           epending;
 289:./lib/chibios/os/rt/include/chschd.h **** #endif
 290:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 291:./lib/chibios/os/rt/include/chschd.h ****   /**
 292:./lib/chibios/os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 293:./lib/chibios/os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 294:./lib/chibios/os/rt/include/chschd.h ****    */
 295:./lib/chibios/os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 296:./lib/chibios/os/rt/include/chschd.h ****   /**
 297:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 298:./lib/chibios/os/rt/include/chschd.h ****    */
 299:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               realprio;
 300:./lib/chibios/os/rt/include/chschd.h **** #endif
 301:./lib/chibios/os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 302:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 303:./lib/chibios/os/rt/include/chschd.h ****   /**
 304:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 305:./lib/chibios/os/rt/include/chschd.h ****    */
 306:./lib/chibios/os/rt/include/chschd.h ****   void                  *mpool;
 307:./lib/chibios/os/rt/include/chschd.h **** #endif
 308:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 309:./lib/chibios/os/rt/include/chschd.h ****   /**
 310:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread statistics.
 311:./lib/chibios/os/rt/include/chschd.h ****    */
 312:./lib/chibios/os/rt/include/chschd.h ****   time_measurement_t    stats;
 313:./lib/chibios/os/rt/include/chschd.h **** #endif
 314:./lib/chibios/os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 315:./lib/chibios/os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 316:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 317:./lib/chibios/os/rt/include/chschd.h **** #endif
 318:./lib/chibios/os/rt/include/chschd.h **** };
 319:./lib/chibios/os/rt/include/chschd.h **** 
 320:./lib/chibios/os/rt/include/chschd.h **** /**
 321:./lib/chibios/os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 322:./lib/chibios/os/rt/include/chschd.h ****  *
 323:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 324:./lib/chibios/os/rt/include/chschd.h ****  */
 325:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timer {
 326:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 327:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 328:./lib/chibios/os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Time delta before timeout.  */
 329:./lib/chibios/os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 330:./lib/chibios/os/rt/include/chschd.h ****                                                 pointer.                    */
 331:./lib/chibios/os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 332:./lib/chibios/os/rt/include/chschd.h ****                                                 parameter.                  */
 333:./lib/chibios/os/rt/include/chschd.h **** };
 334:./lib/chibios/os/rt/include/chschd.h **** 
 335:./lib/chibios/os/rt/include/chschd.h **** /**
 336:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 337:./lib/chibios/os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 338:./lib/chibios/os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 339:./lib/chibios/os/rt/include/chschd.h ****  *          timer is often used in the code.
 340:./lib/chibios/os/rt/include/chschd.h ****  */
 341:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 342:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 343:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 344:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 345:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 346:./lib/chibios/os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Must be initialized to -1.  */
 347:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 348:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 349:./lib/chibios/os/rt/include/chschd.h **** #endif
 350:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 351:./lib/chibios/os/rt/include/chschd.h ****   /**
 352:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 353:./lib/chibios/os/rt/include/chschd.h ****    */
 354:./lib/chibios/os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 355:./lib/chibios/os/rt/include/chschd.h ****                                                 tick event.                 */
 356:./lib/chibios/os/rt/include/chschd.h **** #endif
 357:./lib/chibios/os/rt/include/chschd.h **** };
 358:./lib/chibios/os/rt/include/chschd.h **** 
 359:./lib/chibios/os/rt/include/chschd.h **** /**
 360:./lib/chibios/os/rt/include/chschd.h ****  * @extends threads_queue_t
 361:./lib/chibios/os/rt/include/chschd.h ****  */
 362:./lib/chibios/os/rt/include/chschd.h **** struct ch_ready_list {
 363:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 364:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 365:./lib/chibios/os/rt/include/chschd.h ****                                                 initialized to zero.        */
 366:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 367:./lib/chibios/os/rt/include/chschd.h ****                                                 offsets.                    */
 368:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 369:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 370:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 371:./lib/chibios/os/rt/include/chschd.h **** #endif
 372:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 373:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 374:./lib/chibios/os/rt/include/chschd.h ****                                                 thread.                     */
 375:./lib/chibios/os/rt/include/chschd.h **** };
 376:./lib/chibios/os/rt/include/chschd.h **** 
 377:./lib/chibios/os/rt/include/chschd.h **** /**
 378:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System debug data structure.
 379:./lib/chibios/os/rt/include/chschd.h ****  */
 380:./lib/chibios/os/rt/include/chschd.h **** struct ch_system_debug {
 381:./lib/chibios/os/rt/include/chschd.h ****   /**
 382:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 383:./lib/chibios/os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 384:./lib/chibios/os/rt/include/chschd.h ****    *          written once and then the system is halted.
 385:./lib/chibios/os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 386:./lib/chibios/os/rt/include/chschd.h ****    *          field itself is declared volatile.
 387:./lib/chibios/os/rt/include/chschd.h ****    */
 388:./lib/chibios/os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 389:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 390:./lib/chibios/os/rt/include/chschd.h ****   /**
 391:./lib/chibios/os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 392:./lib/chibios/os/rt/include/chschd.h ****    */
 393:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 394:./lib/chibios/os/rt/include/chschd.h ****   /**
 395:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 396:./lib/chibios/os/rt/include/chschd.h ****    */
 397:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 398:./lib/chibios/os/rt/include/chschd.h **** #endif
 399:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 400:./lib/chibios/os/rt/include/chschd.h ****   /**
 401:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 402:./lib/chibios/os/rt/include/chschd.h ****    */
 403:./lib/chibios/os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 404:./lib/chibios/os/rt/include/chschd.h **** #endif
 405:./lib/chibios/os/rt/include/chschd.h **** };
 406:./lib/chibios/os/rt/include/chschd.h **** 
 407:./lib/chibios/os/rt/include/chschd.h **** /**
 408:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System data structure.
 409:./lib/chibios/os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 410:./lib/chibios/os/rt/include/chschd.h ****  *          stacks.
 411:./lib/chibios/os/rt/include/chschd.h ****  */
 412:./lib/chibios/os/rt/include/chschd.h **** struct ch_system {
 413:./lib/chibios/os/rt/include/chschd.h ****   /**
 414:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Ready list header.
 415:./lib/chibios/os/rt/include/chschd.h ****    */
 416:./lib/chibios/os/rt/include/chschd.h ****   ready_list_t          rlist;
 417:./lib/chibios/os/rt/include/chschd.h ****   /**
 418:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 419:./lib/chibios/os/rt/include/chschd.h ****    */
 420:./lib/chibios/os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 421:./lib/chibios/os/rt/include/chschd.h ****   /**
 422:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System debug.
 423:./lib/chibios/os/rt/include/chschd.h ****    */
 424:./lib/chibios/os/rt/include/chschd.h ****   system_debug_t        dbg;
 425:./lib/chibios/os/rt/include/chschd.h ****   /**
 426:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 427:./lib/chibios/os/rt/include/chschd.h ****    */
 428:./lib/chibios/os/rt/include/chschd.h ****   thread_t              mainthread;
 429:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 430:./lib/chibios/os/rt/include/chschd.h ****   /**
 431:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 432:./lib/chibios/os/rt/include/chschd.h ****    */
 433:./lib/chibios/os/rt/include/chschd.h ****   tm_calibration_t      tm;
 434:./lib/chibios/os/rt/include/chschd.h **** #endif
 435:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 436:./lib/chibios/os/rt/include/chschd.h ****   /**
 437:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 438:./lib/chibios/os/rt/include/chschd.h ****    */
 439:./lib/chibios/os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 440:./lib/chibios/os/rt/include/chschd.h **** #endif
 441:./lib/chibios/os/rt/include/chschd.h **** };
 442:./lib/chibios/os/rt/include/chschd.h **** 
 443:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 444:./lib/chibios/os/rt/include/chschd.h **** /* Module macros.                                                            */
 445:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 446:./lib/chibios/os/rt/include/chschd.h **** 
 447:./lib/chibios/os/rt/include/chschd.h **** /**
 448:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 449:./lib/chibios/os/rt/include/chschd.h ****  *
 450:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 451:./lib/chibios/os/rt/include/chschd.h ****  */
 452:./lib/chibios/os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 453:./lib/chibios/os/rt/include/chschd.h **** 
 454:./lib/chibios/os/rt/include/chschd.h **** /**
 455:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 456:./lib/chibios/os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 457:./lib/chibios/os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 458:./lib/chibios/os/rt/include/chschd.h ****  */
 459:./lib/chibios/os/rt/include/chschd.h **** #define currp ch.rlist.current
 460:./lib/chibios/os/rt/include/chschd.h **** 
 461:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 462:./lib/chibios/os/rt/include/chschd.h **** /* External declarations.                                                    */
 463:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 464:./lib/chibios/os/rt/include/chschd.h **** 
 465:./lib/chibios/os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 466:./lib/chibios/os/rt/include/chschd.h **** extern ch_system_t ch;
 467:./lib/chibios/os/rt/include/chschd.h **** #endif
 468:./lib/chibios/os/rt/include/chschd.h **** 
 469:./lib/chibios/os/rt/include/chschd.h **** /*
 470:./lib/chibios/os/rt/include/chschd.h ****  * Scheduler APIs.
 471:./lib/chibios/os/rt/include/chschd.h ****  */
 472:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 473:./lib/chibios/os/rt/include/chschd.h **** extern "C" {
 474:./lib/chibios/os/rt/include/chschd.h **** #endif
 475:./lib/chibios/os/rt/include/chschd.h ****   void _scheduler_init(void);
 476:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 477:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 478:./lib/chibios/os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 479:./lib/chibios/os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time);
 480:./lib/chibios/os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 481:./lib/chibios/os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 482:./lib/chibios/os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 483:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 484:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 485:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 486:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 487:./lib/chibios/os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 488:./lib/chibios/os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 489:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 490:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 491:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 492:./lib/chibios/os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 493:./lib/chibios/os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 494:./lib/chibios/os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 495:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 496:./lib/chibios/os/rt/include/chschd.h **** }
 497:./lib/chibios/os/rt/include/chschd.h **** #endif
 498:./lib/chibios/os/rt/include/chschd.h **** 
 499:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 500:./lib/chibios/os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 501:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 502:./lib/chibios/os/rt/include/chschd.h **** 
 503:./lib/chibios/os/rt/include/chschd.h **** /**
 504:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 505:./lib/chibios/os/rt/include/chschd.h ****  *
 506:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 507:./lib/chibios/os/rt/include/chschd.h ****  *
 508:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 509:./lib/chibios/os/rt/include/chschd.h ****  */
 510:./lib/chibios/os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 511:./lib/chibios/os/rt/include/chschd.h **** 
 512:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 513:./lib/chibios/os/rt/include/chschd.h **** }
 514:./lib/chibios/os/rt/include/chschd.h **** 
 515:./lib/chibios/os/rt/include/chschd.h **** /**
 516:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 517:./lib/chibios/os/rt/include/chschd.h ****  *
 518:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 519:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 520:./lib/chibios/os/rt/include/chschd.h ****  *
 521:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 522:./lib/chibios/os/rt/include/chschd.h ****  */
 523:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 524:./lib/chibios/os/rt/include/chschd.h **** 
 525:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 526:./lib/chibios/os/rt/include/chschd.h **** }
 527:./lib/chibios/os/rt/include/chschd.h **** 
 528:./lib/chibios/os/rt/include/chschd.h **** /**
 529:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 530:./lib/chibios/os/rt/include/chschd.h ****  *
 531:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 532:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 533:./lib/chibios/os/rt/include/chschd.h ****  *
 534:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 535:./lib/chibios/os/rt/include/chschd.h ****  */
 536:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 537:./lib/chibios/os/rt/include/chschd.h **** 
 538:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 539:./lib/chibios/os/rt/include/chschd.h **** }
 540:./lib/chibios/os/rt/include/chschd.h **** 
 541:./lib/chibios/os/rt/include/chschd.h **** /**
 542:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 543:./lib/chibios/os/rt/include/chschd.h ****  *
 544:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 545:./lib/chibios/os/rt/include/chschd.h ****  *
 546:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 547:./lib/chibios/os/rt/include/chschd.h ****  */
 548:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 549:./lib/chibios/os/rt/include/chschd.h **** 
 550:./lib/chibios/os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
 551:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  35              		.loc 2 551 0
  36 0000 C0E90000 		strd	r0, r0, [r0]
  37              	.LVL1:
  38              	.LBE89:
  39              	.LBE88:
  98:lib/chibios/os/rt/src/chsem.c **** 
  99:lib/chibios/os/rt/src/chsem.c ****   chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
 100:lib/chibios/os/rt/src/chsem.c **** 
 101:lib/chibios/os/rt/src/chsem.c ****   queue_init(&sp->queue);
 102:lib/chibios/os/rt/src/chsem.c ****   sp->cnt = n;
  40              		.loc 1 102 0
  41 0004 8160     		str	r1, [r0, #8]
 103:lib/chibios/os/rt/src/chsem.c **** }
  42              		.loc 1 103 0
  43 0006 7047     		bx	lr
  44              		.cfi_endproc
  45              	.LFE248:
  47              		.section	.text.chSemResetI,"ax",%progbits
  48              		.align	1
  49              		.global	chSemResetI
  50              		.syntax unified
  51              		.thumb
  52              		.thumb_func
  53              		.fpu softvfp
  55              	chSemResetI:
  56              	.LFB250:
 104:lib/chibios/os/rt/src/chsem.c **** 
 105:lib/chibios/os/rt/src/chsem.c **** /**
 106:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs a reset operation on the semaphore.
 107:lib/chibios/os/rt/src/chsem.c ****  * @post    After invoking this function all the threads waiting on the
 108:lib/chibios/os/rt/src/chsem.c ****  *          semaphore, if any, are released and the semaphore counter is set
 109:lib/chibios/os/rt/src/chsem.c ****  *          to the specified, non negative, value.
 110:lib/chibios/os/rt/src/chsem.c ****  * @note    The released threads can recognize they were waked up by a reset
 111:lib/chibios/os/rt/src/chsem.c ****  *          rather than a signal because the @p chSemWait() will return
 112:lib/chibios/os/rt/src/chsem.c ****  *          @p MSG_RESET instead of @p MSG_OK.
 113:lib/chibios/os/rt/src/chsem.c ****  *
 114:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 115:lib/chibios/os/rt/src/chsem.c ****  * @param[in] n         the new value of the semaphore counter. The value must
 116:lib/chibios/os/rt/src/chsem.c ****  *                      be non-negative.
 117:lib/chibios/os/rt/src/chsem.c ****  *
 118:lib/chibios/os/rt/src/chsem.c ****  * @api
 119:lib/chibios/os/rt/src/chsem.c ****  */
 120:lib/chibios/os/rt/src/chsem.c **** void chSemReset(semaphore_t *sp, cnt_t n) {
 121:lib/chibios/os/rt/src/chsem.c **** 
 122:lib/chibios/os/rt/src/chsem.c ****   chSysLock();
 123:lib/chibios/os/rt/src/chsem.c ****   chSemResetI(sp, n);
 124:lib/chibios/os/rt/src/chsem.c ****   chSchRescheduleS();
 125:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 126:lib/chibios/os/rt/src/chsem.c **** }
 127:lib/chibios/os/rt/src/chsem.c **** 
 128:lib/chibios/os/rt/src/chsem.c **** /**
 129:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs a reset operation on the semaphore.
 130:lib/chibios/os/rt/src/chsem.c ****  * @post    After invoking this function all the threads waiting on the
 131:lib/chibios/os/rt/src/chsem.c ****  *          semaphore, if any, are released and the semaphore counter is set
 132:lib/chibios/os/rt/src/chsem.c ****  *          to the specified, non negative, value.
 133:lib/chibios/os/rt/src/chsem.c ****  * @post    This function does not reschedule so a call to a rescheduling
 134:lib/chibios/os/rt/src/chsem.c ****  *          function must be performed before unlocking the kernel. Note that
 135:lib/chibios/os/rt/src/chsem.c ****  *          interrupt handlers always reschedule on exit so an explicit
 136:lib/chibios/os/rt/src/chsem.c ****  *          reschedule must not be performed in ISRs.
 137:lib/chibios/os/rt/src/chsem.c ****  * @note    The released threads can recognize they were waked up by a reset
 138:lib/chibios/os/rt/src/chsem.c ****  *          rather than a signal because the @p chSemWait() will return
 139:lib/chibios/os/rt/src/chsem.c ****  *          @p MSG_RESET instead of @p MSG_OK.
 140:lib/chibios/os/rt/src/chsem.c ****  *
 141:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 142:lib/chibios/os/rt/src/chsem.c ****  * @param[in] n         the new value of the semaphore counter. The value must
 143:lib/chibios/os/rt/src/chsem.c ****  *                      be non-negative.
 144:lib/chibios/os/rt/src/chsem.c ****  *
 145:lib/chibios/os/rt/src/chsem.c ****  * @iclass
 146:lib/chibios/os/rt/src/chsem.c ****  */
 147:lib/chibios/os/rt/src/chsem.c **** void chSemResetI(semaphore_t *sp, cnt_t n) {
  57              		.loc 1 147 0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 0, uses_anonymous_args = 0
  61              	.LVL2:
  62 0000 70B5     		push	{r4, r5, r6, lr}
  63              		.cfi_def_cfa_offset 16
  64              		.cfi_offset 4, -16
  65              		.cfi_offset 5, -12
  66              		.cfi_offset 6, -8
  67              		.cfi_offset 14, -4
 148:lib/chibios/os/rt/src/chsem.c ****   cnt_t cnt;
 149:lib/chibios/os/rt/src/chsem.c **** 
 150:lib/chibios/os/rt/src/chsem.c ****   chDbgCheckClassI();
 151:lib/chibios/os/rt/src/chsem.c ****   chDbgCheck((sp != NULL) && (n >= (cnt_t)0));
 152:lib/chibios/os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 153:lib/chibios/os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
 154:lib/chibios/os/rt/src/chsem.c ****               "inconsistent semaphore");
 155:lib/chibios/os/rt/src/chsem.c **** 
 156:lib/chibios/os/rt/src/chsem.c ****   cnt = sp->cnt;
  68              		.loc 1 156 0
  69 0002 8568     		ldr	r5, [r0, #8]
  70              	.LVL3:
 157:lib/chibios/os/rt/src/chsem.c ****   sp->cnt = n;
  71              		.loc 1 157 0
  72 0004 8160     		str	r1, [r0, #8]
 147:lib/chibios/os/rt/src/chsem.c ****   cnt_t cnt;
  73              		.loc 1 147 0
  74 0006 0446     		mov	r4, r0
 158:lib/chibios/os/rt/src/chsem.c ****   while (++cnt <= (cnt_t)0) {
 159:lib/chibios/os/rt/src/chsem.c ****     chSchReadyI(queue_lifo_remove(&sp->queue))->u.rdymsg = MSG_RESET;
  75              		.loc 1 159 0
  76 0008 6FF00106 		mvn	r6, #1
  77              	.LVL4:
  78              	.L3:
 158:lib/chibios/os/rt/src/chsem.c ****   while (++cnt <= (cnt_t)0) {
  79              		.loc 1 158 0
  80 000c 0135     		adds	r5, r5, #1
  81              	.LVL5:
  82 000e 002D     		cmp	r5, #0
  83 0010 00DD     		ble	.L4
 160:lib/chibios/os/rt/src/chsem.c ****   }
 161:lib/chibios/os/rt/src/chsem.c **** }
  84              		.loc 1 161 0
  85 0012 70BD     		pop	{r4, r5, r6, pc}
  86              	.LVL6:
  87              	.L4:
  88              	.LBB90:
  89              	.LBB91:
 552:./lib/chibios/os/rt/include/chschd.h **** }
 553:./lib/chibios/os/rt/include/chschd.h **** 
 554:./lib/chibios/os/rt/include/chschd.h **** /**
 555:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is empty.
 556:./lib/chibios/os/rt/include/chschd.h ****  *
 557:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 558:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the queue.
 559:./lib/chibios/os/rt/include/chschd.h ****  *
 560:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 561:./lib/chibios/os/rt/include/chschd.h ****  */
 562:./lib/chibios/os/rt/include/chschd.h **** static inline bool queue_isempty(const threads_queue_t *tqp) {
 563:./lib/chibios/os/rt/include/chschd.h **** 
 564:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tqp->next == (const thread_t *)tqp);
 565:./lib/chibios/os/rt/include/chschd.h **** }
 566:./lib/chibios/os/rt/include/chschd.h **** 
 567:./lib/chibios/os/rt/include/chschd.h **** /**
 568:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads queue is not empty.
 569:./lib/chibios/os/rt/include/chschd.h ****  *
 570:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 571:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the queue.
 572:./lib/chibios/os/rt/include/chschd.h ****  *
 573:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 574:./lib/chibios/os/rt/include/chschd.h ****  */
 575:./lib/chibios/os/rt/include/chschd.h **** static inline bool queue_notempty(const threads_queue_t *tqp) {
 576:./lib/chibios/os/rt/include/chschd.h **** 
 577:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tqp->next != (const thread_t *)tqp);
 578:./lib/chibios/os/rt/include/chschd.h **** }
 579:./lib/chibios/os/rt/include/chschd.h **** 
 580:./lib/chibios/os/rt/include/chschd.h **** /* If the performance code path has been chosen then all the following
 581:./lib/chibios/os/rt/include/chschd.h ****    functions are inlined into the various kernel modules.*/
 582:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == TRUE
 583:./lib/chibios/os/rt/include/chschd.h **** static inline void list_insert(thread_t *tp, threads_list_t *tlp) {
 584:./lib/chibios/os/rt/include/chschd.h **** 
 585:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next = tlp->next;
 586:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = tp;
 587:./lib/chibios/os/rt/include/chschd.h **** }
 588:./lib/chibios/os/rt/include/chschd.h **** 
 589:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *list_remove(threads_list_t *tlp) {
 590:./lib/chibios/os/rt/include/chschd.h **** 
 591:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tlp->next;
 592:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = tp->queue.next;
 593:./lib/chibios/os/rt/include/chschd.h **** 
 594:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 595:./lib/chibios/os/rt/include/chschd.h **** }
 596:./lib/chibios/os/rt/include/chschd.h **** 
 597:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {
 598:./lib/chibios/os/rt/include/chschd.h **** 
 599:./lib/chibios/os/rt/include/chschd.h ****   thread_t *cp = (thread_t *)tqp;
 600:./lib/chibios/os/rt/include/chschd.h ****   do {
 601:./lib/chibios/os/rt/include/chschd.h ****     cp = cp->queue.next;
 602:./lib/chibios/os/rt/include/chschd.h ****   } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 603:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next             = cp;
 604:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = cp->queue.prev;
 605:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 606:./lib/chibios/os/rt/include/chschd.h ****   cp->queue.prev             = tp;
 607:./lib/chibios/os/rt/include/chschd.h **** }
 608:./lib/chibios/os/rt/include/chschd.h **** 
 609:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {
 610:./lib/chibios/os/rt/include/chschd.h **** 
 611:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.next             = (thread_t *)tqp;
 612:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 613:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 614:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev                  = tp;
 615:./lib/chibios/os/rt/include/chschd.h **** }
 616:./lib/chibios/os/rt/include/chschd.h **** 
 617:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
 618:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->next;
 619:./lib/chibios/os/rt/include/chschd.h **** 
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next             = tp->queue.next;
 621:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 622:./lib/chibios/os/rt/include/chschd.h **** 
 623:./lib/chibios/os/rt/include/chschd.h ****   return tp;
 624:./lib/chibios/os/rt/include/chschd.h **** }
 625:./lib/chibios/os/rt/include/chschd.h **** 
 626:./lib/chibios/os/rt/include/chschd.h **** static inline thread_t *queue_lifo_remove(threads_queue_t *tqp) {
 627:./lib/chibios/os/rt/include/chschd.h ****   thread_t *tp = tqp->prev;
  90              		.loc 2 627 0
  91 0014 6068     		ldr	r0, [r4, #4]
  92              	.LVL7:
 628:./lib/chibios/os/rt/include/chschd.h **** 
 629:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev             = tp->queue.prev;
  93              		.loc 2 629 0
  94 0016 4368     		ldr	r3, [r0, #4]
  95 0018 6360     		str	r3, [r4, #4]
 630:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev->queue.next = (thread_t *)tqp;
  96              		.loc 2 630 0
  97 001a 1C60     		str	r4, [r3]
  98              	.LVL8:
  99              	.LBE91:
 100              	.LBE90:
 159:lib/chibios/os/rt/src/chsem.c ****   }
 101              		.loc 1 159 0
 102 001c FFF7FEFF 		bl	chSchReadyI
 103              	.LVL9:
 104 0020 4662     		str	r6, [r0, #36]
 105 0022 F3E7     		b	.L3
 106              		.cfi_endproc
 107              	.LFE250:
 109              		.section	.text.chSemReset,"ax",%progbits
 110              		.align	1
 111              		.global	chSemReset
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 115              		.fpu softvfp
 117              	chSemReset:
 118              	.LFB249:
 120:lib/chibios/os/rt/src/chsem.c **** 
 119              		.loc 1 120 0
 120              		.cfi_startproc
 121              		@ args = 0, pretend = 0, frame = 0
 122              		@ frame_needed = 0, uses_anonymous_args = 0
 123              	.LVL10:
 124 0000 08B5     		push	{r3, lr}
 125              		.cfi_def_cfa_offset 8
 126              		.cfi_offset 3, -8
 127              		.cfi_offset 14, -4
 128              	.LBB92:
 129              	.LBB93:
 130              	.LBB94:
 131              	.LBB95:
 132              		.file 3 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @version  V4.30
   5:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
   9:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    All rights reserved.
  10:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      specific prior written permission.
  20:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    *
  21:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  35:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  38:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #endif
  45:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  46:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  47:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   @{
  51:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  52:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  53:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  54:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  58:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  60:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  62:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  63:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  64:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  65:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  69:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  71:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  73:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  74:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  75:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  76:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Control Register value
  79:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  80:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  82:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
  83:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  84:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
  86:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  87:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  88:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  89:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  90:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  94:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  96:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  98:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  99:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 100:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 101:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 105:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 107:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 108:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 109:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 111:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 112:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 113:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 114:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 115:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               APSR Register value
 118:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 119:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 121:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 122:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 123:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 125:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 126:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 127:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 128:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 129:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 132:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 134:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 136:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 137:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 138:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 140:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 141:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 142:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 143:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 144:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               PSP Register value
 147:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 148:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 150:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 151:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 154:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 155:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 156:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 157:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 158:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 162:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 164:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 166:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 167:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 168:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 169:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               MSP Register value
 172:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 173:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 175:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 176:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 177:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 179:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 180:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 181:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 182:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 183:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 188:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 190:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 192:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 193:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 194:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 195:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 199:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 201:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 202:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 203:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 205:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 206:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 207:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 208:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 209:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 213:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 215:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 217:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 218:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 219:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 221:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 222:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 226:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 228:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 230:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 231:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 232:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 233:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 237:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 239:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 241:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 243:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 244:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 248:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 250:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 251:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 252:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 254:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 255:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 257:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 133              		.loc 3 264 0
 134 0002 2023     		movs	r3, #32
 135              		.syntax unified
 136              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 137 0004 83F31188 		MSR basepri, r3
 138              	@ 0 "" 2
 139              	.LVL11:
 140              		.thumb
 141              		.syntax unified
 142              	.LBE95:
 143              	.LBE94:
 144              	.LBE93:
 145              	.LBE92:
 123:lib/chibios/os/rt/src/chsem.c ****   chSchRescheduleS();
 146              		.loc 1 123 0
 147 0008 FFF7FEFF 		bl	chSemResetI
 148              	.LVL12:
 124:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 149              		.loc 1 124 0
 150 000c FFF7FEFF 		bl	chSchRescheduleS
 151              	.LVL13:
 152              	.LBB96:
 153              	.LBB97:
 154              	.LBB98:
 155              	.LBB99:
 156              	.LBB100:
 157              		.loc 3 264 0
 158 0010 0023     		movs	r3, #0
 159              		.syntax unified
 160              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 161 0012 83F31188 		MSR basepri, r3
 162              	@ 0 "" 2
 163              	.LVL14:
 164              		.thumb
 165              		.syntax unified
 166              	.LBE100:
 167              	.LBE99:
 168              	.LBE98:
 169              	.LBE97:
 170              	.LBE96:
 126:lib/chibios/os/rt/src/chsem.c **** 
 171              		.loc 1 126 0
 172 0016 08BD     		pop	{r3, pc}
 173              		.cfi_endproc
 174              	.LFE249:
 176              		.section	.text.chSemWaitS,"ax",%progbits
 177              		.align	1
 178              		.global	chSemWaitS
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu softvfp
 184              	chSemWaitS:
 185              	.LFB252:
 162:lib/chibios/os/rt/src/chsem.c **** 
 163:lib/chibios/os/rt/src/chsem.c **** /**
 164:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs a wait operation on a semaphore.
 165:lib/chibios/os/rt/src/chsem.c ****  *
 166:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 167:lib/chibios/os/rt/src/chsem.c ****  * @return              A message specifying how the invoking thread has been
 168:lib/chibios/os/rt/src/chsem.c ****  *                      released from the semaphore.
 169:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_OK       if the thread has not stopped on the semaphore or the
 170:lib/chibios/os/rt/src/chsem.c ****  *                      semaphore has been signaled.
 171:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 172:lib/chibios/os/rt/src/chsem.c ****  *
 173:lib/chibios/os/rt/src/chsem.c ****  * @api
 174:lib/chibios/os/rt/src/chsem.c ****  */
 175:lib/chibios/os/rt/src/chsem.c **** msg_t chSemWait(semaphore_t *sp) {
 176:lib/chibios/os/rt/src/chsem.c ****   msg_t msg;
 177:lib/chibios/os/rt/src/chsem.c **** 
 178:lib/chibios/os/rt/src/chsem.c ****   chSysLock();
 179:lib/chibios/os/rt/src/chsem.c ****   msg = chSemWaitS(sp);
 180:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 181:lib/chibios/os/rt/src/chsem.c **** 
 182:lib/chibios/os/rt/src/chsem.c ****   return msg;
 183:lib/chibios/os/rt/src/chsem.c **** }
 184:lib/chibios/os/rt/src/chsem.c **** 
 185:lib/chibios/os/rt/src/chsem.c **** /**
 186:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs a wait operation on a semaphore.
 187:lib/chibios/os/rt/src/chsem.c ****  *
 188:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 189:lib/chibios/os/rt/src/chsem.c ****  * @return              A message specifying how the invoking thread has been
 190:lib/chibios/os/rt/src/chsem.c ****  *                      released from the semaphore.
 191:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_OK       if the thread has not stopped on the semaphore or the
 192:lib/chibios/os/rt/src/chsem.c ****  *                      semaphore has been signaled.
 193:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 194:lib/chibios/os/rt/src/chsem.c ****  *
 195:lib/chibios/os/rt/src/chsem.c ****  * @sclass
 196:lib/chibios/os/rt/src/chsem.c ****  */
 197:lib/chibios/os/rt/src/chsem.c **** msg_t chSemWaitS(semaphore_t *sp) {
 186              		.loc 1 197 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              	.LVL15:
 198:lib/chibios/os/rt/src/chsem.c **** 
 199:lib/chibios/os/rt/src/chsem.c ****   chDbgCheckClassS();
 200:lib/chibios/os/rt/src/chsem.c ****   chDbgCheck(sp != NULL);
 201:lib/chibios/os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 202:lib/chibios/os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
 203:lib/chibios/os/rt/src/chsem.c ****               "inconsistent semaphore");
 204:lib/chibios/os/rt/src/chsem.c **** 
 205:lib/chibios/os/rt/src/chsem.c ****   if (--sp->cnt < (cnt_t)0) {
 191              		.loc 1 205 0
 192 0000 8368     		ldr	r3, [r0, #8]
 193 0002 013B     		subs	r3, r3, #1
 194 0004 002B     		cmp	r3, #0
 197:lib/chibios/os/rt/src/chsem.c **** 
 195              		.loc 1 197 0
 196 0006 10B5     		push	{r4, lr}
 197              		.cfi_def_cfa_offset 8
 198              		.cfi_offset 4, -8
 199              		.cfi_offset 14, -4
 200              		.loc 1 205 0
 201 0008 8360     		str	r3, [r0, #8]
 202 000a 0DDA     		bge	.L8
 203              	.LVL16:
 204              	.LBB105:
 205              	.LBB106:
 206:lib/chibios/os/rt/src/chsem.c ****     currp->u.wtsemp = sp;
 206              		.loc 1 206 0
 207 000c 074C     		ldr	r4, .L9
 208              	.LBB107:
 209              	.LBB108:
 612:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 210              		.loc 2 612 0
 211 000e 4268     		ldr	r2, [r0, #4]
 212              	.LBE108:
 213              	.LBE107:
 214              		.loc 1 206 0
 215 0010 A369     		ldr	r3, [r4, #24]
 216 0012 5862     		str	r0, [r3, #36]
 217              	.LVL17:
 218              	.LBB110:
 219              	.LBB109:
 611:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 220              		.loc 2 611 0
 221 0014 1860     		str	r0, [r3]
 612:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 222              		.loc 2 612 0
 223 0016 5A60     		str	r2, [r3, #4]
 613:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev                  = tp;
 224              		.loc 2 613 0
 225 0018 1360     		str	r3, [r2]
 614:./lib/chibios/os/rt/include/chschd.h **** }
 226              		.loc 2 614 0
 227 001a 4360     		str	r3, [r0, #4]
 228              	.LVL18:
 229              	.LBE109:
 230              	.LBE110:
 207:lib/chibios/os/rt/src/chsem.c ****     sem_insert(currp, &sp->queue);
 208:lib/chibios/os/rt/src/chsem.c ****     chSchGoSleepS(CH_STATE_WTSEM);
 231              		.loc 1 208 0
 232 001c 0520     		movs	r0, #5
 233              	.LVL19:
 234 001e FFF7FEFF 		bl	chSchGoSleepS
 235              	.LVL20:
 209:lib/chibios/os/rt/src/chsem.c **** 
 210:lib/chibios/os/rt/src/chsem.c ****     return currp->u.rdymsg;
 236              		.loc 1 210 0
 237 0022 A369     		ldr	r3, [r4, #24]
 238 0024 586A     		ldr	r0, [r3, #36]
 239              	.LVL21:
 240              	.L6:
 241              	.LBE106:
 242              	.LBE105:
 211:lib/chibios/os/rt/src/chsem.c ****   }
 212:lib/chibios/os/rt/src/chsem.c **** 
 213:lib/chibios/os/rt/src/chsem.c ****   return MSG_OK;
 214:lib/chibios/os/rt/src/chsem.c **** }
 243              		.loc 1 214 0
 244 0026 10BD     		pop	{r4, pc}
 245              	.LVL22:
 246              	.L8:
 213:lib/chibios/os/rt/src/chsem.c **** }
 247              		.loc 1 213 0
 248 0028 0020     		movs	r0, #0
 249              	.LVL23:
 250 002a FCE7     		b	.L6
 251              	.L10:
 252              		.align	2
 253              	.L9:
 254 002c 00000000 		.word	ch
 255              		.cfi_endproc
 256              	.LFE252:
 258              		.section	.text.chSemWait,"ax",%progbits
 259              		.align	1
 260              		.global	chSemWait
 261              		.syntax unified
 262              		.thumb
 263              		.thumb_func
 264              		.fpu softvfp
 266              	chSemWait:
 267              	.LFB251:
 175:lib/chibios/os/rt/src/chsem.c ****   msg_t msg;
 268              		.loc 1 175 0
 269              		.cfi_startproc
 270              		@ args = 0, pretend = 0, frame = 0
 271              		@ frame_needed = 0, uses_anonymous_args = 0
 272              	.LVL24:
 273 0000 08B5     		push	{r3, lr}
 274              		.cfi_def_cfa_offset 8
 275              		.cfi_offset 3, -8
 276              		.cfi_offset 14, -4
 277              	.LBB111:
 278              	.LBB112:
 279              	.LBB113:
 280              	.LBB114:
 281              		.loc 3 264 0
 282 0002 2023     		movs	r3, #32
 283              		.syntax unified
 284              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 285 0004 83F31188 		MSR basepri, r3
 286              	@ 0 "" 2
 287              	.LVL25:
 288              		.thumb
 289              		.syntax unified
 290              	.LBE114:
 291              	.LBE113:
 292              	.LBE112:
 293              	.LBE111:
 179:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 294              		.loc 1 179 0
 295 0008 FFF7FEFF 		bl	chSemWaitS
 296              	.LVL26:
 297              	.LBB115:
 298              	.LBB116:
 299              	.LBB117:
 300              	.LBB118:
 301              	.LBB119:
 302              		.loc 3 264 0
 303 000c 0023     		movs	r3, #0
 304              		.syntax unified
 305              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 306 000e 83F31188 		MSR basepri, r3
 307              	@ 0 "" 2
 308              	.LVL27:
 309              		.thumb
 310              		.syntax unified
 311              	.LBE119:
 312              	.LBE118:
 313              	.LBE117:
 314              	.LBE116:
 315              	.LBE115:
 183:lib/chibios/os/rt/src/chsem.c **** 
 316              		.loc 1 183 0
 317 0012 08BD     		pop	{r3, pc}
 318              		.cfi_endproc
 319              	.LFE251:
 321              		.section	.text.chSemWaitTimeoutS,"ax",%progbits
 322              		.align	1
 323              		.global	chSemWaitTimeoutS
 324              		.syntax unified
 325              		.thumb
 326              		.thumb_func
 327              		.fpu softvfp
 329              	chSemWaitTimeoutS:
 330              	.LFB254:
 215:lib/chibios/os/rt/src/chsem.c **** 
 216:lib/chibios/os/rt/src/chsem.c **** /**
 217:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs a wait operation on a semaphore with timeout specification.
 218:lib/chibios/os/rt/src/chsem.c ****  *
 219:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 220:lib/chibios/os/rt/src/chsem.c ****  * @param[in] time      the number of ticks before the operation timeouts,
 221:lib/chibios/os/rt/src/chsem.c ****  *                      the following special values are allowed:
 222:lib/chibios/os/rt/src/chsem.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 223:lib/chibios/os/rt/src/chsem.c ****  *                      - @a TIME_INFINITE no timeout.
 224:lib/chibios/os/rt/src/chsem.c ****  *                      .
 225:lib/chibios/os/rt/src/chsem.c ****  * @return              A message specifying how the invoking thread has been
 226:lib/chibios/os/rt/src/chsem.c ****  *                      released from the semaphore.
 227:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_OK       if the thread has not stopped on the semaphore or the
 228:lib/chibios/os/rt/src/chsem.c ****  *                      semaphore has been signaled.
 229:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 230:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 231:lib/chibios/os/rt/src/chsem.c ****  *                      the specified timeout.
 232:lib/chibios/os/rt/src/chsem.c ****  *
 233:lib/chibios/os/rt/src/chsem.c ****  * @api
 234:lib/chibios/os/rt/src/chsem.c ****  */
 235:lib/chibios/os/rt/src/chsem.c **** msg_t chSemWaitTimeout(semaphore_t *sp, systime_t time) {
 236:lib/chibios/os/rt/src/chsem.c ****   msg_t msg;
 237:lib/chibios/os/rt/src/chsem.c **** 
 238:lib/chibios/os/rt/src/chsem.c ****   chSysLock();
 239:lib/chibios/os/rt/src/chsem.c ****   msg = chSemWaitTimeoutS(sp, time);
 240:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 241:lib/chibios/os/rt/src/chsem.c **** 
 242:lib/chibios/os/rt/src/chsem.c ****   return msg;
 243:lib/chibios/os/rt/src/chsem.c **** }
 244:lib/chibios/os/rt/src/chsem.c **** 
 245:lib/chibios/os/rt/src/chsem.c **** /**
 246:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs a wait operation on a semaphore with timeout specification.
 247:lib/chibios/os/rt/src/chsem.c ****  *
 248:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 249:lib/chibios/os/rt/src/chsem.c ****  * @param[in] time      the number of ticks before the operation timeouts,
 250:lib/chibios/os/rt/src/chsem.c ****  *                      the following special values are allowed:
 251:lib/chibios/os/rt/src/chsem.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 252:lib/chibios/os/rt/src/chsem.c ****  *                      - @a TIME_INFINITE no timeout.
 253:lib/chibios/os/rt/src/chsem.c ****  *                      .
 254:lib/chibios/os/rt/src/chsem.c ****  * @return              A message specifying how the invoking thread has been
 255:lib/chibios/os/rt/src/chsem.c ****  *                      released from the semaphore.
 256:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_OK       if the thread has not stopped on the semaphore or the
 257:lib/chibios/os/rt/src/chsem.c ****  *                      semaphore has been signaled.
 258:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 259:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 260:lib/chibios/os/rt/src/chsem.c ****  *                      the specified timeout.
 261:lib/chibios/os/rt/src/chsem.c ****  *
 262:lib/chibios/os/rt/src/chsem.c ****  * @sclass
 263:lib/chibios/os/rt/src/chsem.c ****  */
 264:lib/chibios/os/rt/src/chsem.c **** msg_t chSemWaitTimeoutS(semaphore_t *sp, systime_t time) {
 331              		.loc 1 264 0
 332              		.cfi_startproc
 333              		@ args = 0, pretend = 0, frame = 0
 334              		@ frame_needed = 0, uses_anonymous_args = 0
 335              		@ link register save eliminated.
 336              	.LVL28:
 265:lib/chibios/os/rt/src/chsem.c **** 
 266:lib/chibios/os/rt/src/chsem.c ****   chDbgCheckClassS();
 267:lib/chibios/os/rt/src/chsem.c ****   chDbgCheck(sp != NULL);
 268:lib/chibios/os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 269:lib/chibios/os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
 270:lib/chibios/os/rt/src/chsem.c ****               "inconsistent semaphore");
 271:lib/chibios/os/rt/src/chsem.c **** 
 272:lib/chibios/os/rt/src/chsem.c ****   if (--sp->cnt < (cnt_t)0) {
 337              		.loc 1 272 0
 338 0000 8368     		ldr	r3, [r0, #8]
 339 0002 5A1E     		subs	r2, r3, #1
 340 0004 002A     		cmp	r2, #0
 264:lib/chibios/os/rt/src/chsem.c **** 
 341              		.loc 1 264 0
 342 0006 10B4     		push	{r4}
 343              		.cfi_def_cfa_offset 4
 344              		.cfi_offset 4, -4
 345              		.loc 1 272 0
 346 0008 8260     		str	r2, [r0, #8]
 347 000a 11DA     		bge	.L15
 273:lib/chibios/os/rt/src/chsem.c ****     if (TIME_IMMEDIATE == time) {
 348              		.loc 1 273 0
 349 000c 21B9     		cbnz	r1, .L14
 274:lib/chibios/os/rt/src/chsem.c ****       sp->cnt++;
 350              		.loc 1 274 0
 351 000e 8360     		str	r3, [r0, #8]
 275:lib/chibios/os/rt/src/chsem.c **** 
 276:lib/chibios/os/rt/src/chsem.c ****       return MSG_TIMEOUT;
 352              		.loc 1 276 0
 353 0010 4FF0FF30 		mov	r0, #-1
 354              	.LVL29:
 355              	.L12:
 277:lib/chibios/os/rt/src/chsem.c ****     }
 278:lib/chibios/os/rt/src/chsem.c ****     currp->u.wtsemp = sp;
 279:lib/chibios/os/rt/src/chsem.c ****     sem_insert(currp, &sp->queue);
 280:lib/chibios/os/rt/src/chsem.c **** 
 281:lib/chibios/os/rt/src/chsem.c ****     return chSchGoSleepTimeoutS(CH_STATE_WTSEM, time);
 282:lib/chibios/os/rt/src/chsem.c ****   }
 283:lib/chibios/os/rt/src/chsem.c **** 
 284:lib/chibios/os/rt/src/chsem.c ****   return MSG_OK;
 285:lib/chibios/os/rt/src/chsem.c **** }
 356              		.loc 1 285 0
 357 0014 10BC     		pop	{r4}
 358              		.cfi_remember_state
 359              		.cfi_restore 4
 360              		.cfi_def_cfa_offset 0
 361 0016 7047     		bx	lr
 362              	.LVL30:
 363              	.L14:
 364              		.cfi_restore_state
 365              	.LBB124:
 366              	.LBB125:
 278:lib/chibios/os/rt/src/chsem.c ****     sem_insert(currp, &sp->queue);
 367              		.loc 1 278 0
 368 0018 064B     		ldr	r3, .L16
 369              	.LBB126:
 370              	.LBB127:
 612:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 371              		.loc 2 612 0
 372 001a 4268     		ldr	r2, [r0, #4]
 373              	.LBE127:
 374              	.LBE126:
 278:lib/chibios/os/rt/src/chsem.c ****     sem_insert(currp, &sp->queue);
 375              		.loc 1 278 0
 376 001c 9B69     		ldr	r3, [r3, #24]
 377              	.LBE125:
 378              	.LBE124:
 379              		.loc 1 285 0
 380 001e 10BC     		pop	{r4}
 381              		.cfi_remember_state
 382              		.cfi_restore 4
 383              		.cfi_def_cfa_offset 0
 384              	.LBB131:
 385              	.LBB130:
 278:lib/chibios/os/rt/src/chsem.c ****     sem_insert(currp, &sp->queue);
 386              		.loc 1 278 0
 387 0020 5862     		str	r0, [r3, #36]
 388              	.LVL31:
 389              	.LBB129:
 390              	.LBB128:
 611:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 391              		.loc 2 611 0
 392 0022 1860     		str	r0, [r3]
 612:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 393              		.loc 2 612 0
 394 0024 5A60     		str	r2, [r3, #4]
 613:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev                  = tp;
 395              		.loc 2 613 0
 396 0026 1360     		str	r3, [r2]
 614:./lib/chibios/os/rt/include/chschd.h **** }
 397              		.loc 2 614 0
 398 0028 4360     		str	r3, [r0, #4]
 399              	.LVL32:
 400              	.LBE128:
 401              	.LBE129:
 281:lib/chibios/os/rt/src/chsem.c ****   }
 402              		.loc 1 281 0
 403 002a 0520     		movs	r0, #5
 404              	.LVL33:
 405 002c FFF7FEBF 		b	chSchGoSleepTimeoutS
 406              	.LVL34:
 407              	.L15:
 408              		.cfi_restore_state
 409              	.LBE130:
 410              	.LBE131:
 284:lib/chibios/os/rt/src/chsem.c **** }
 411              		.loc 1 284 0
 412 0030 0020     		movs	r0, #0
 413              	.LVL35:
 414 0032 EFE7     		b	.L12
 415              	.L17:
 416              		.align	2
 417              	.L16:
 418 0034 00000000 		.word	ch
 419              		.cfi_endproc
 420              	.LFE254:
 422              		.section	.text.chSemWaitTimeout,"ax",%progbits
 423              		.align	1
 424              		.global	chSemWaitTimeout
 425              		.syntax unified
 426              		.thumb
 427              		.thumb_func
 428              		.fpu softvfp
 430              	chSemWaitTimeout:
 431              	.LFB253:
 235:lib/chibios/os/rt/src/chsem.c ****   msg_t msg;
 432              		.loc 1 235 0
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 0
 435              		@ frame_needed = 0, uses_anonymous_args = 0
 436              	.LVL36:
 437 0000 08B5     		push	{r3, lr}
 438              		.cfi_def_cfa_offset 8
 439              		.cfi_offset 3, -8
 440              		.cfi_offset 14, -4
 441              	.LBB132:
 442              	.LBB133:
 443              	.LBB134:
 444              	.LBB135:
 445              		.loc 3 264 0
 446 0002 2023     		movs	r3, #32
 447              		.syntax unified
 448              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 449 0004 83F31188 		MSR basepri, r3
 450              	@ 0 "" 2
 451              	.LVL37:
 452              		.thumb
 453              		.syntax unified
 454              	.LBE135:
 455              	.LBE134:
 456              	.LBE133:
 457              	.LBE132:
 239:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 458              		.loc 1 239 0
 459 0008 FFF7FEFF 		bl	chSemWaitTimeoutS
 460              	.LVL38:
 461              	.LBB136:
 462              	.LBB137:
 463              	.LBB138:
 464              	.LBB139:
 465              	.LBB140:
 466              		.loc 3 264 0
 467 000c 0023     		movs	r3, #0
 468              		.syntax unified
 469              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 470 000e 83F31188 		MSR basepri, r3
 471              	@ 0 "" 2
 472              	.LVL39:
 473              		.thumb
 474              		.syntax unified
 475              	.LBE140:
 476              	.LBE139:
 477              	.LBE138:
 478              	.LBE137:
 479              	.LBE136:
 243:lib/chibios/os/rt/src/chsem.c **** 
 480              		.loc 1 243 0
 481 0012 08BD     		pop	{r3, pc}
 482              		.cfi_endproc
 483              	.LFE253:
 485              		.section	.text.chSemSignal,"ax",%progbits
 486              		.align	1
 487              		.global	chSemSignal
 488              		.syntax unified
 489              		.thumb
 490              		.thumb_func
 491              		.fpu softvfp
 493              	chSemSignal:
 494              	.LFB255:
 286:lib/chibios/os/rt/src/chsem.c **** 
 287:lib/chibios/os/rt/src/chsem.c **** /**
 288:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs a signal operation on a semaphore.
 289:lib/chibios/os/rt/src/chsem.c ****  *
 290:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 291:lib/chibios/os/rt/src/chsem.c ****  *
 292:lib/chibios/os/rt/src/chsem.c ****  * @api
 293:lib/chibios/os/rt/src/chsem.c ****  */
 294:lib/chibios/os/rt/src/chsem.c **** void chSemSignal(semaphore_t *sp) {
 495              		.loc 1 294 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 0
 498              		@ frame_needed = 0, uses_anonymous_args = 0
 499              	.LVL40:
 500 0000 08B5     		push	{r3, lr}
 501              		.cfi_def_cfa_offset 8
 502              		.cfi_offset 3, -8
 503              		.cfi_offset 14, -4
 504              	.LBB141:
 505              	.LBB142:
 506              	.LBB143:
 507              	.LBB144:
 508              		.loc 3 264 0
 509 0002 2022     		movs	r2, #32
 510              	.LBE144:
 511              	.LBE143:
 512              	.LBE142:
 513              	.LBE141:
 514              		.loc 1 294 0
 515 0004 0346     		mov	r3, r0
 516              	.LBB148:
 517              	.LBB147:
 518              	.LBB146:
 519              	.LBB145:
 520              		.loc 3 264 0
 521              		.syntax unified
 522              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 523 0006 82F31188 		MSR basepri, r2
 524              	@ 0 "" 2
 525              	.LVL41:
 526              		.thumb
 527              		.syntax unified
 528              	.LBE145:
 529              	.LBE146:
 530              	.LBE147:
 531              	.LBE148:
 295:lib/chibios/os/rt/src/chsem.c **** 
 296:lib/chibios/os/rt/src/chsem.c ****   chDbgCheck(sp != NULL);
 297:lib/chibios/os/rt/src/chsem.c **** 
 298:lib/chibios/os/rt/src/chsem.c ****   chSysLock();
 299:lib/chibios/os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 300:lib/chibios/os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
 301:lib/chibios/os/rt/src/chsem.c ****               "inconsistent semaphore");
 302:lib/chibios/os/rt/src/chsem.c ****   if (++sp->cnt <= (cnt_t)0) {
 532              		.loc 1 302 0
 533 000a 8268     		ldr	r2, [r0, #8]
 534 000c 0132     		adds	r2, r2, #1
 535 000e 002A     		cmp	r2, #0
 536 0010 8260     		str	r2, [r0, #8]
 537 0012 06DC     		bgt	.L20
 538              	.LVL42:
 539              	.LBB149:
 540              	.LBB150:
 618:./lib/chibios/os/rt/include/chschd.h **** 
 541              		.loc 2 618 0
 542 0014 0068     		ldr	r0, [r0]
 543              	.LVL43:
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 544              		.loc 2 620 0
 545 0016 0268     		ldr	r2, [r0]
 546 0018 1A60     		str	r2, [r3]
 547              	.LBE150:
 548              	.LBE149:
 303:lib/chibios/os/rt/src/chsem.c ****     chSchWakeupS(queue_fifo_remove(&sp->queue), MSG_OK);
 549              		.loc 1 303 0
 550 001a 0021     		movs	r1, #0
 551              	.LBB152:
 552              	.LBB151:
 621:./lib/chibios/os/rt/include/chschd.h **** 
 553              		.loc 2 621 0
 554 001c 5360     		str	r3, [r2, #4]
 555              	.LVL44:
 556              	.LBE151:
 557              	.LBE152:
 558              		.loc 1 303 0
 559 001e FFF7FEFF 		bl	chSchWakeupS
 560              	.LVL45:
 561              	.L20:
 562              	.LBB153:
 563              	.LBB154:
 564              	.LBB155:
 565              	.LBB156:
 566              	.LBB157:
 567              		.loc 3 264 0
 568 0022 0023     		movs	r3, #0
 569              		.syntax unified
 570              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 571 0024 83F31188 		MSR basepri, r3
 572              	@ 0 "" 2
 573              	.LVL46:
 574              		.thumb
 575              		.syntax unified
 576              	.LBE157:
 577              	.LBE156:
 578              	.LBE155:
 579              	.LBE154:
 580              	.LBE153:
 304:lib/chibios/os/rt/src/chsem.c ****   }
 305:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 306:lib/chibios/os/rt/src/chsem.c **** }
 581              		.loc 1 306 0
 582 0028 08BD     		pop	{r3, pc}
 583              		.cfi_endproc
 584              	.LFE255:
 586              		.section	.text.chSemSignalI,"ax",%progbits
 587              		.align	1
 588              		.global	chSemSignalI
 589              		.syntax unified
 590              		.thumb
 591              		.thumb_func
 592              		.fpu softvfp
 594              	chSemSignalI:
 595              	.LFB256:
 307:lib/chibios/os/rt/src/chsem.c **** 
 308:lib/chibios/os/rt/src/chsem.c **** /**
 309:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs a signal operation on a semaphore.
 310:lib/chibios/os/rt/src/chsem.c ****  * @post    This function does not reschedule so a call to a rescheduling
 311:lib/chibios/os/rt/src/chsem.c ****  *          function must be performed before unlocking the kernel. Note that
 312:lib/chibios/os/rt/src/chsem.c ****  *          interrupt handlers always reschedule on exit so an explicit
 313:lib/chibios/os/rt/src/chsem.c ****  *          reschedule must not be performed in ISRs.
 314:lib/chibios/os/rt/src/chsem.c ****  *
 315:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp    pointer to a @p semaphore_t structure
 316:lib/chibios/os/rt/src/chsem.c ****  *
 317:lib/chibios/os/rt/src/chsem.c ****  * @iclass
 318:lib/chibios/os/rt/src/chsem.c ****  */
 319:lib/chibios/os/rt/src/chsem.c **** void chSemSignalI(semaphore_t *sp) {
 596              		.loc 1 319 0
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 0
 599              		@ frame_needed = 0, uses_anonymous_args = 0
 600              		@ link register save eliminated.
 601              	.LVL47:
 320:lib/chibios/os/rt/src/chsem.c **** 
 321:lib/chibios/os/rt/src/chsem.c ****   chDbgCheckClassI();
 322:lib/chibios/os/rt/src/chsem.c ****   chDbgCheck(sp != NULL);
 323:lib/chibios/os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 324:lib/chibios/os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
 325:lib/chibios/os/rt/src/chsem.c ****               "inconsistent semaphore");
 326:lib/chibios/os/rt/src/chsem.c **** 
 327:lib/chibios/os/rt/src/chsem.c ****   if (++sp->cnt <= (cnt_t)0) {
 602              		.loc 1 327 0
 603 0000 8268     		ldr	r2, [r0, #8]
 604 0002 0132     		adds	r2, r2, #1
 605 0004 002A     		cmp	r2, #0
 319:lib/chibios/os/rt/src/chsem.c **** 
 606              		.loc 1 319 0
 607 0006 0346     		mov	r3, r0
 608              		.loc 1 327 0
 609 0008 8260     		str	r2, [r0, #8]
 610 000a 07DC     		bgt	.L21
 611              	.LVL48:
 612              	.LBB158:
 613              	.LBB159:
 614              	.LBB160:
 618:./lib/chibios/os/rt/include/chschd.h **** 
 615              		.loc 2 618 0
 616 000c 0068     		ldr	r0, [r0]
 617              	.LVL49:
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 618              		.loc 2 620 0
 619 000e 0268     		ldr	r2, [r0]
 620 0010 1A60     		str	r2, [r3]
 621:./lib/chibios/os/rt/include/chschd.h **** 
 621              		.loc 2 621 0
 622 0012 5360     		str	r3, [r2, #4]
 623              	.LVL50:
 624              	.LBE160:
 625              	.LBE159:
 328:lib/chibios/os/rt/src/chsem.c ****     /* Note, it is done this way in order to allow a tail call on
 329:lib/chibios/os/rt/src/chsem.c ****              chSchReadyI().*/
 330:lib/chibios/os/rt/src/chsem.c ****     thread_t *tp = queue_fifo_remove(&sp->queue);
 331:lib/chibios/os/rt/src/chsem.c ****     tp->u.rdymsg = MSG_OK;
 626              		.loc 1 331 0
 627 0014 0023     		movs	r3, #0
 628              	.LVL51:
 629 0016 4362     		str	r3, [r0, #36]
 332:lib/chibios/os/rt/src/chsem.c ****     (void) chSchReadyI(tp);
 630              		.loc 1 332 0
 631 0018 FFF7FEBF 		b	chSchReadyI
 632              	.LVL52:
 633              	.L21:
 634              	.LBE158:
 333:lib/chibios/os/rt/src/chsem.c ****   }
 334:lib/chibios/os/rt/src/chsem.c **** }
 635              		.loc 1 334 0
 636 001c 7047     		bx	lr
 637              		.cfi_endproc
 638              	.LFE256:
 640              		.section	.text.chSemAddCounterI,"ax",%progbits
 641              		.align	1
 642              		.global	chSemAddCounterI
 643              		.syntax unified
 644              		.thumb
 645              		.thumb_func
 646              		.fpu softvfp
 648              	chSemAddCounterI:
 649              	.LFB257:
 335:lib/chibios/os/rt/src/chsem.c **** 
 336:lib/chibios/os/rt/src/chsem.c **** /**
 337:lib/chibios/os/rt/src/chsem.c ****  * @brief   Adds the specified value to the semaphore counter.
 338:lib/chibios/os/rt/src/chsem.c ****  * @post    This function does not reschedule so a call to a rescheduling
 339:lib/chibios/os/rt/src/chsem.c ****  *          function must be performed before unlocking the kernel. Note that
 340:lib/chibios/os/rt/src/chsem.c ****  *          interrupt handlers always reschedule on exit so an explicit
 341:lib/chibios/os/rt/src/chsem.c ****  *          reschedule must not be performed in ISRs.
 342:lib/chibios/os/rt/src/chsem.c ****  *
 343:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sp        pointer to a @p semaphore_t structure
 344:lib/chibios/os/rt/src/chsem.c ****  * @param[in] n         value to be added to the semaphore counter. The value
 345:lib/chibios/os/rt/src/chsem.c ****  *                      must be positive.
 346:lib/chibios/os/rt/src/chsem.c ****  *
 347:lib/chibios/os/rt/src/chsem.c ****  * @iclass
 348:lib/chibios/os/rt/src/chsem.c ****  */
 349:lib/chibios/os/rt/src/chsem.c **** void chSemAddCounterI(semaphore_t *sp, cnt_t n) {
 650              		.loc 1 349 0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
 654              	.LVL53:
 655 0000 70B5     		push	{r4, r5, r6, lr}
 656              		.cfi_def_cfa_offset 16
 657              		.cfi_offset 4, -16
 658              		.cfi_offset 5, -12
 659              		.cfi_offset 6, -8
 660              		.cfi_offset 14, -4
 661              		.loc 1 349 0
 662 0002 0446     		mov	r4, r0
 663 0004 0D46     		mov	r5, r1
 350:lib/chibios/os/rt/src/chsem.c **** 
 351:lib/chibios/os/rt/src/chsem.c ****   chDbgCheckClassI();
 352:lib/chibios/os/rt/src/chsem.c ****   chDbgCheck((sp != NULL) && (n > (cnt_t)0));
 353:lib/chibios/os/rt/src/chsem.c ****   chDbgAssert(((sp->cnt >= (cnt_t)0) && queue_isempty(&sp->queue)) ||
 354:lib/chibios/os/rt/src/chsem.c ****               ((sp->cnt < (cnt_t)0) && queue_notempty(&sp->queue)),
 355:lib/chibios/os/rt/src/chsem.c ****               "inconsistent semaphore");
 356:lib/chibios/os/rt/src/chsem.c **** 
 357:lib/chibios/os/rt/src/chsem.c ****   while (n > (cnt_t)0) {
 358:lib/chibios/os/rt/src/chsem.c ****     if (++sp->cnt <= (cnt_t)0) {
 359:lib/chibios/os/rt/src/chsem.c ****       chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 664              		.loc 1 359 0
 665 0006 0026     		movs	r6, #0
 666              	.LVL54:
 667              	.L24:
 357:lib/chibios/os/rt/src/chsem.c ****     if (++sp->cnt <= (cnt_t)0) {
 668              		.loc 1 357 0
 669 0008 002D     		cmp	r5, #0
 670 000a 00DC     		bgt	.L26
 360:lib/chibios/os/rt/src/chsem.c ****     }
 361:lib/chibios/os/rt/src/chsem.c ****     n--;
 362:lib/chibios/os/rt/src/chsem.c ****   }
 363:lib/chibios/os/rt/src/chsem.c **** }
 671              		.loc 1 363 0
 672 000c 70BD     		pop	{r4, r5, r6, pc}
 673              	.LVL55:
 674              	.L26:
 358:lib/chibios/os/rt/src/chsem.c ****       chSchReadyI(queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 675              		.loc 1 358 0
 676 000e A368     		ldr	r3, [r4, #8]
 677 0010 0133     		adds	r3, r3, #1
 678 0012 002B     		cmp	r3, #0
 679 0014 A360     		str	r3, [r4, #8]
 680 0016 06DC     		bgt	.L25
 681              	.LVL56:
 682              	.LBB161:
 683              	.LBB162:
 618:./lib/chibios/os/rt/include/chschd.h **** 
 684              		.loc 2 618 0
 685 0018 2068     		ldr	r0, [r4]
 686              	.LVL57:
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 687              		.loc 2 620 0
 688 001a 0368     		ldr	r3, [r0]
 689 001c 2360     		str	r3, [r4]
 621:./lib/chibios/os/rt/include/chschd.h **** 
 690              		.loc 2 621 0
 691 001e 5C60     		str	r4, [r3, #4]
 692              	.LVL58:
 693              	.LBE162:
 694              	.LBE161:
 359:lib/chibios/os/rt/src/chsem.c ****     }
 695              		.loc 1 359 0
 696 0020 FFF7FEFF 		bl	chSchReadyI
 697              	.LVL59:
 698 0024 4662     		str	r6, [r0, #36]
 699              	.L25:
 361:lib/chibios/os/rt/src/chsem.c ****   }
 700              		.loc 1 361 0
 701 0026 013D     		subs	r5, r5, #1
 702              	.LVL60:
 703 0028 EEE7     		b	.L24
 704              		.cfi_endproc
 705              	.LFE257:
 707              		.section	.text.chSemSignalWait,"ax",%progbits
 708              		.align	1
 709              		.global	chSemSignalWait
 710              		.syntax unified
 711              		.thumb
 712              		.thumb_func
 713              		.fpu softvfp
 715              	chSemSignalWait:
 716              	.LFB258:
 364:lib/chibios/os/rt/src/chsem.c **** 
 365:lib/chibios/os/rt/src/chsem.c **** /**
 366:lib/chibios/os/rt/src/chsem.c ****  * @brief   Performs atomic signal and wait operations on two semaphores.
 367:lib/chibios/os/rt/src/chsem.c ****  *
 368:lib/chibios/os/rt/src/chsem.c ****  * @param[in] sps       pointer to a @p semaphore_t structure to be signaled
 369:lib/chibios/os/rt/src/chsem.c ****  * @param[in] spw       pointer to a @p semaphore_t structure to wait on
 370:lib/chibios/os/rt/src/chsem.c ****  * @return              A message specifying how the invoking thread has been
 371:lib/chibios/os/rt/src/chsem.c ****  *                      released from the semaphore.
 372:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_OK       if the thread has not stopped on the semaphore or the
 373:lib/chibios/os/rt/src/chsem.c ****  *                      semaphore has been signaled.
 374:lib/chibios/os/rt/src/chsem.c ****  * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 375:lib/chibios/os/rt/src/chsem.c ****  *
 376:lib/chibios/os/rt/src/chsem.c ****  * @api
 377:lib/chibios/os/rt/src/chsem.c ****  */
 378:lib/chibios/os/rt/src/chsem.c **** msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 717              		.loc 1 378 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 0
 720              		@ frame_needed = 0, uses_anonymous_args = 0
 721              	.LVL61:
 722 0000 38B5     		push	{r3, r4, r5, lr}
 723              		.cfi_def_cfa_offset 16
 724              		.cfi_offset 3, -16
 725              		.cfi_offset 4, -12
 726              		.cfi_offset 5, -8
 727              		.cfi_offset 14, -4
 728              	.LBB163:
 729              	.LBB164:
 730              	.LBB165:
 731              	.LBB166:
 732              		.loc 3 264 0
 733 0002 2022     		movs	r2, #32
 734              	.LBE166:
 735              	.LBE165:
 736              	.LBE164:
 737              	.LBE163:
 738              		.loc 1 378 0
 739 0004 0346     		mov	r3, r0
 740 0006 0D46     		mov	r5, r1
 741              	.LBB170:
 742              	.LBB169:
 743              	.LBB168:
 744              	.LBB167:
 745              		.loc 3 264 0
 746              		.syntax unified
 747              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 748 0008 82F31188 		MSR basepri, r2
 749              	@ 0 "" 2
 750              	.LVL62:
 751              		.thumb
 752              		.syntax unified
 753              	.LBE167:
 754              	.LBE168:
 755              	.LBE169:
 756              	.LBE170:
 379:lib/chibios/os/rt/src/chsem.c ****   msg_t msg;
 380:lib/chibios/os/rt/src/chsem.c **** 
 381:lib/chibios/os/rt/src/chsem.c ****   chDbgCheck((sps != NULL) && (spw != NULL));
 382:lib/chibios/os/rt/src/chsem.c **** 
 383:lib/chibios/os/rt/src/chsem.c ****   chSysLock();
 384:lib/chibios/os/rt/src/chsem.c ****   chDbgAssert(((sps->cnt >= (cnt_t)0) && queue_isempty(&sps->queue)) ||
 385:lib/chibios/os/rt/src/chsem.c ****               ((sps->cnt < (cnt_t)0) && queue_notempty(&sps->queue)),
 386:lib/chibios/os/rt/src/chsem.c ****               "inconsistent semaphore");
 387:lib/chibios/os/rt/src/chsem.c ****   chDbgAssert(((spw->cnt >= (cnt_t)0) && queue_isempty(&spw->queue)) ||
 388:lib/chibios/os/rt/src/chsem.c ****               ((spw->cnt < (cnt_t)0) && queue_notempty(&spw->queue)),
 389:lib/chibios/os/rt/src/chsem.c ****               "inconsistent semaphore");
 390:lib/chibios/os/rt/src/chsem.c ****   if (++sps->cnt <= (cnt_t)0) {
 757              		.loc 1 390 0
 758 000c 8268     		ldr	r2, [r0, #8]
 759 000e 0132     		adds	r2, r2, #1
 760 0010 002A     		cmp	r2, #0
 761 0012 8260     		str	r2, [r0, #8]
 762 0014 07DC     		bgt	.L28
 763              	.LVL63:
 764              	.LBB171:
 765              	.LBB172:
 618:./lib/chibios/os/rt/include/chschd.h **** 
 766              		.loc 2 618 0
 767 0016 0068     		ldr	r0, [r0]
 768              	.LVL64:
 620:./lib/chibios/os/rt/include/chschd.h ****   tqp->next->queue.prev = (thread_t *)tqp;
 769              		.loc 2 620 0
 770 0018 0268     		ldr	r2, [r0]
 771 001a 1A60     		str	r2, [r3]
 621:./lib/chibios/os/rt/include/chschd.h **** 
 772              		.loc 2 621 0
 773 001c 5360     		str	r3, [r2, #4]
 774              	.LVL65:
 775              	.LBE172:
 776              	.LBE171:
 391:lib/chibios/os/rt/src/chsem.c ****     chSchReadyI(queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 777              		.loc 1 391 0
 778 001e FFF7FEFF 		bl	chSchReadyI
 779              	.LVL66:
 780 0022 0023     		movs	r3, #0
 781 0024 4362     		str	r3, [r0, #36]
 782              	.L28:
 392:lib/chibios/os/rt/src/chsem.c ****   }
 393:lib/chibios/os/rt/src/chsem.c ****   if (--spw->cnt < (cnt_t)0) {
 783              		.loc 1 393 0
 784 0026 AB68     		ldr	r3, [r5, #8]
 785 0028 013B     		subs	r3, r3, #1
 786 002a 002B     		cmp	r3, #0
 787 002c AB60     		str	r3, [r5, #8]
 788 002e 0FDA     		bge	.L29
 789              	.LBB173:
 394:lib/chibios/os/rt/src/chsem.c ****     thread_t *ctp = currp;
 790              		.loc 1 394 0
 791 0030 094B     		ldr	r3, .L31
 792 0032 9C69     		ldr	r4, [r3, #24]
 793              	.LVL67:
 794              	.LBB174:
 795              	.LBB175:
 612:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 796              		.loc 2 612 0
 797 0034 6B68     		ldr	r3, [r5, #4]
 611:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev             = tqp->prev;
 798              		.loc 2 611 0
 799 0036 2560     		str	r5, [r4]
 612:./lib/chibios/os/rt/include/chschd.h ****   tp->queue.prev->queue.next = tp;
 800              		.loc 2 612 0
 801 0038 6360     		str	r3, [r4, #4]
 802              	.LBE175:
 803              	.LBE174:
 395:lib/chibios/os/rt/src/chsem.c ****     sem_insert(ctp, &spw->queue);
 396:lib/chibios/os/rt/src/chsem.c ****     ctp->u.wtsemp = spw;
 397:lib/chibios/os/rt/src/chsem.c ****     chSchGoSleepS(CH_STATE_WTSEM);
 804              		.loc 1 397 0
 805 003a 0520     		movs	r0, #5
 806              	.LBB177:
 807              	.LBB176:
 613:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev                  = tp;
 808              		.loc 2 613 0
 809 003c 1C60     		str	r4, [r3]
 614:./lib/chibios/os/rt/include/chschd.h **** }
 810              		.loc 2 614 0
 811 003e 6C60     		str	r4, [r5, #4]
 812              	.LVL68:
 813              	.LBE176:
 814              	.LBE177:
 396:lib/chibios/os/rt/src/chsem.c ****     chSchGoSleepS(CH_STATE_WTSEM);
 815              		.loc 1 396 0
 816 0040 6562     		str	r5, [r4, #36]
 817              		.loc 1 397 0
 818 0042 FFF7FEFF 		bl	chSchGoSleepS
 819              	.LVL69:
 398:lib/chibios/os/rt/src/chsem.c ****     msg = ctp->u.rdymsg;
 820              		.loc 1 398 0
 821 0046 606A     		ldr	r0, [r4, #36]
 822              	.LVL70:
 823              	.L30:
 824              	.LBE173:
 825              	.LBB178:
 826              	.LBB179:
 827              	.LBB180:
 828              	.LBB181:
 829              	.LBB182:
 830              		.loc 3 264 0
 831 0048 0023     		movs	r3, #0
 832              		.syntax unified
 833              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 834 004a 83F31188 		MSR basepri, r3
 835              	@ 0 "" 2
 836              	.LVL71:
 837              		.thumb
 838              		.syntax unified
 839              	.LBE182:
 840              	.LBE181:
 841              	.LBE180:
 842              	.LBE179:
 843              	.LBE178:
 399:lib/chibios/os/rt/src/chsem.c ****   }
 400:lib/chibios/os/rt/src/chsem.c ****   else {
 401:lib/chibios/os/rt/src/chsem.c ****     chSchRescheduleS();
 402:lib/chibios/os/rt/src/chsem.c ****     msg = MSG_OK;
 403:lib/chibios/os/rt/src/chsem.c ****   }
 404:lib/chibios/os/rt/src/chsem.c ****   chSysUnlock();
 405:lib/chibios/os/rt/src/chsem.c **** 
 406:lib/chibios/os/rt/src/chsem.c ****   return msg;
 407:lib/chibios/os/rt/src/chsem.c **** }
 844              		.loc 1 407 0
 845 004e 38BD     		pop	{r3, r4, r5, pc}
 846              	.LVL72:
 847              	.L29:
 401:lib/chibios/os/rt/src/chsem.c ****     msg = MSG_OK;
 848              		.loc 1 401 0
 849 0050 FFF7FEFF 		bl	chSchRescheduleS
 850              	.LVL73:
 402:lib/chibios/os/rt/src/chsem.c ****   }
 851              		.loc 1 402 0
 852 0054 0020     		movs	r0, #0
 853 0056 F7E7     		b	.L30
 854              	.L32:
 855              		.align	2
 856              	.L31:
 857 0058 00000000 		.word	ch
 858              		.cfi_endproc
 859              	.LFE258:
 861              		.text
 862              	.Letext0:
 863              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 864              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 865              		.file 6 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 866              		.file 7 "./lib/chibios/os/rt/include/chsystypes.h"
 867              		.file 8 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 868              		.file 9 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 869              		.file 10 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 870              		.file 11 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 871              		.file 12 "./lib/chibios/os/rt/include/chtm.h"
 872              		.file 13 "./lib/chibios/os/rt/include/chsem.h"
 873              		.file 14 "./lib/chibios/os/rt/include/chmtx.h"
 874              		.file 15 "./lib/chibios/os/rt/include/chsys.h"
 875              		.file 16 "./lib/chibios/os/rt/include/chregistry.h"
 876              		.file 17 "./lib/chibios/os/common/oslib/include/chmemcore.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chsem.c
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:16     .text.chSemObjectInit:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:23     .text.chSemObjectInit:0000000000000000 chSemObjectInit
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:48     .text.chSemResetI:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:55     .text.chSemResetI:0000000000000000 chSemResetI
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:110    .text.chSemReset:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:117    .text.chSemReset:0000000000000000 chSemReset
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:177    .text.chSemWaitS:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:184    .text.chSemWaitS:0000000000000000 chSemWaitS
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:254    .text.chSemWaitS:000000000000002c $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:259    .text.chSemWait:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:266    .text.chSemWait:0000000000000000 chSemWait
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:322    .text.chSemWaitTimeoutS:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:329    .text.chSemWaitTimeoutS:0000000000000000 chSemWaitTimeoutS
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:418    .text.chSemWaitTimeoutS:0000000000000034 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:423    .text.chSemWaitTimeout:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:430    .text.chSemWaitTimeout:0000000000000000 chSemWaitTimeout
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:486    .text.chSemSignal:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:493    .text.chSemSignal:0000000000000000 chSemSignal
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:587    .text.chSemSignalI:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:594    .text.chSemSignalI:0000000000000000 chSemSignalI
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:641    .text.chSemAddCounterI:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:648    .text.chSemAddCounterI:0000000000000000 chSemAddCounterI
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:708    .text.chSemSignalWait:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:715    .text.chSemSignalWait:0000000000000000 chSemSignalWait
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccZ1Pf3n.s:857    .text.chSemSignalWait:0000000000000058 $d

UNDEFINED SYMBOLS
chSchReadyI
chSchRescheduleS
chSchGoSleepS
ch
chSchGoSleepTimeoutS
chSchWakeupS
