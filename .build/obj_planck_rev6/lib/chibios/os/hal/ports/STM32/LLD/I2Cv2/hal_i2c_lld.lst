   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"hal_i2c_lld.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.i2c_lld_setup_rx_transfer,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	i2c_lld_setup_rx_transfer:
  23              	.LFB280:
  24              		.file 1 "lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c"
   1:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /*
   2:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
   4:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     you may not use this file except in compliance with the License.
   6:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     You may obtain a copy of the License at
   7:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
   8:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  10:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     Unless required by applicable law or agreed to in writing, software
  11:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     See the License for the specific language governing permissions and
  14:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     limitations under the License.
  15:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** */
  16:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  17:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /**
  18:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @file    I2Cv2/hal_i2c_lld.c
  19:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @brief   STM32 I2C subsystem low level driver source.
  20:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
  21:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @addtogroup I2C
  22:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @{
  23:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  */
  24:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  25:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #include "hal.h"
  26:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  27:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if HAL_USE_I2C || defined(__DOXYGEN__)
  28:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  29:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /*===========================================================================*/
  30:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /* Driver local definitions.                                                 */
  31:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /*===========================================================================*/
  32:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  33:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
  34:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #define DMAMODE_COMMON                                                      \
  35:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   (STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |                      \
  36:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE      |                      \
  37:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE)
  38:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  39:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #define I2C1_RX_DMA_CHANNEL                                                 \
  40:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   STM32_DMA_GETCHANNEL(STM32_I2C_I2C1_RX_DMA_STREAM,                        \
  41:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                        STM32_I2C1_RX_DMA_CHN)
  42:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  43:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #define I2C1_TX_DMA_CHANNEL                                                 \
  44:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   STM32_DMA_GETCHANNEL(STM32_I2C_I2C1_TX_DMA_STREAM,                        \
  45:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                        STM32_I2C1_TX_DMA_CHN)
  46:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  47:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #define I2C2_RX_DMA_CHANNEL                                                 \
  48:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   STM32_DMA_GETCHANNEL(STM32_I2C_I2C2_RX_DMA_STREAM,                        \
  49:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                        STM32_I2C2_RX_DMA_CHN)
  50:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  51:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #define I2C2_TX_DMA_CHANNEL                                                 \
  52:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   STM32_DMA_GETCHANNEL(STM32_I2C_I2C2_TX_DMA_STREAM,                        \
  53:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                        STM32_I2C2_TX_DMA_CHN)
  54:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  55:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #define I2C3_RX_DMA_CHANNEL                                                 \
  56:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   STM32_DMA_GETCHANNEL(STM32_I2C_I2C3_RX_DMA_STREAM,                        \
  57:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                        STM32_I2C3_RX_DMA_CHN)
  58:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  59:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #define I2C3_TX_DMA_CHANNEL                                                 \
  60:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   STM32_DMA_GETCHANNEL(STM32_I2C_I2C3_TX_DMA_STREAM,                        \
  61:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                        STM32_I2C3_TX_DMA_CHN)
  62:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  63:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #define I2C4_RX_DMA_CHANNEL                                                 \
  64:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   STM32_DMA_GETCHANNEL(STM32_I2C_I2C4_RX_DMA_STREAM,                        \
  65:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                        STM32_I2C4_RX_DMA_CHN)
  66:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  67:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #define I2C4_TX_DMA_CHANNEL                                                 \
  68:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   STM32_DMA_GETCHANNEL(STM32_I2C_I2C4_TX_DMA_STREAM,                        \
  69:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                        STM32_I2C4_TX_DMA_CHN)
  70:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif /* STM32_I2C_USE_DMA == TRUE */
  71:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  72:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
  73:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #define i2c_lld_get_rxbytes(i2cp) dmaStreamGetTransactionSize((i2cp)->dmarx)
  74:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #define i2c_lld_get_txbytes(i2cp) dmaStreamGetTransactionSize((i2cp)->dmatx)
  75:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
  76:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #define i2c_lld_get_rxbytes(i2cp) (i2cp)->rxbytes
  77:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #define i2c_lld_get_txbytes(i2cp) (i2cp)->txbytes
  78:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
  79:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  80:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /*===========================================================================*/
  81:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /* Driver constants.                                                         */
  82:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /*===========================================================================*/
  83:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  84:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #define I2C_ERROR_MASK                                                      \
  85:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   ((uint32_t)(I2C_ISR_BERR | I2C_ISR_ARLO | I2C_ISR_OVR | I2C_ISR_PECERR |  \
  86:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****               I2C_ISR_TIMEOUT | I2C_ISR_ALERT))
  87:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  88:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #define I2C_INT_MASK                                                        \
  89:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   ((uint32_t)(I2C_ISR_TCR | I2C_ISR_TC | I2C_ISR_STOPF | I2C_ISR_NACKF |    \
  90:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****               I2C_ISR_ADDR | I2C_ISR_RXNE | I2C_ISR_TXIS))
  91:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  92:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /*===========================================================================*/
  93:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /* Driver exported variables.                                                */
  94:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /*===========================================================================*/
  95:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
  96:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /** @brief I2C1 driver identifier.*/
  97:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C1 || defined(__DOXYGEN__)
  98:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** I2CDriver I2CD1;
  99:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 100:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 101:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /** @brief I2C2 driver identifier.*/
 102:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C2 || defined(__DOXYGEN__)
 103:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** I2CDriver I2CD2;
 104:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 105:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 106:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /** @brief I2C3 driver identifier.*/
 107:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C3 || defined(__DOXYGEN__)
 108:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** I2CDriver I2CD3;
 109:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 110:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 111:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /** @brief I2C4 driver identifier.*/
 112:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C4 || defined(__DOXYGEN__)
 113:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** I2CDriver I2CD4;
 114:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 115:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 116:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /*===========================================================================*/
 117:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /* Driver local variables and types.                                         */
 118:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /*===========================================================================*/
 119:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 120:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /*===========================================================================*/
 121:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /* Driver local functions.                                                   */
 122:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /*===========================================================================*/
 123:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 124:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /**
 125:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @brief   Slave address setup.
 126:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @note    The RW bit is set to zero internally.
 127:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 128:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] i2cp      pointer to the @p I2CDriver object
 129:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] addr      slave device address
 130:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 131:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @notapi
 132:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  */
 133:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** static void i2c_lld_set_address(I2CDriver *i2cp, i2caddr_t addr) {
 134:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2C_TypeDef *dp = i2cp->i2c;
 135:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 136:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Address alignment depends on the addressing mode selected.*/
 137:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if ((i2cp->config->cr2 & I2C_CR2_ADD10) == 0U)
 138:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dp->CR2 = (uint32_t)addr << 1U;
 139:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   else
 140:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dp->CR2 = (uint32_t)addr;
 141:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 142:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 143:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /**
 144:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @brief   I2C RX transfer setup.
 145:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 146:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] i2cp      pointer to the @p I2CDriver object
 147:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 148:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @notapi
 149:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  */
 150:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** static void i2c_lld_setup_rx_transfer(I2CDriver *i2cp) {
  25              		.loc 1 150 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              	.LVL0:
 151:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2C_TypeDef *dp = i2cp->i2c;
 152:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   uint32_t reload;
 153:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   size_t n;
 154:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 155:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* The unit can transfer 255 bytes maximum in a single operation.*/
 156:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   n = i2c_lld_get_rxbytes(i2cp);
  30              		.loc 1 156 0
  31 0000 836A     		ldr	r3, [r0, #40]
  32 0002 5B68     		ldr	r3, [r3, #4]
 150:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2C_TypeDef *dp = i2cp->i2c;
  33              		.loc 1 150 0
  34 0004 30B5     		push	{r4, r5, lr}
  35              		.cfi_def_cfa_offset 12
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
 151:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2C_TypeDef *dp = i2cp->i2c;
  39              		.loc 1 151 0
  40 0006 046B     		ldr	r4, [r0, #48]
  41              	.LVL1:
  42              		.loc 1 156 0
  43 0008 5968     		ldr	r1, [r3, #4]
  44              	.LVL2:
 157:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (n > 255U) {
 158:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     n = 255U;
 159:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     reload = I2C_CR2_RELOAD;
 160:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
 161:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   else {
 162:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     reload = 0U;
 163:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
 164:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 165:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Configures the CR2 registers with both the calculated and static
 166:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****      settings.*/
 167:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
  45              		.loc 1 167 0
  46 000a 4368     		ldr	r3, [r0, #4]
  47 000c 6268     		ldr	r2, [r4, #4]
 168:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****             I2C_CR2_RD_WRN | (n << 16U) | reload;
  48              		.loc 1 168 0
  49 000e 9B68     		ldr	r3, [r3, #8]
 167:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****             I2C_CR2_RD_WRN | (n << 16U) | reload;
  50              		.loc 1 167 0
  51 0010 22F0FF72 		bic	r2, r2, #33423360
 157:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (n > 255U) {
  52              		.loc 1 157 0
  53 0014 FF29     		cmp	r1, #255
  54              		.loc 1 168 0
  55 0016 43F48063 		orr	r3, r3, #1024
 167:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****             I2C_CR2_RD_WRN | (n << 16U) | reload;
  56              		.loc 1 167 0
  57 001a 22F48032 		bic	r2, r2, #65536
 162:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
  58              		.loc 1 162 0
  59 001e 94BF     		ite	ls
  60 0020 0025     		movls	r5, #0
 159:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
  61              		.loc 1 159 0
  62 0022 4FF08075 		movhi	r5, #16777216
  63              		.loc 1 168 0
  64 0026 43EA0203 		orr	r3, r3, r2
 158:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     reload = I2C_CR2_RELOAD;
  65              		.loc 1 158 0
  66 002a 88BF     		it	hi
  67 002c FF21     		movhi	r1, #255
  68              	.LVL3:
  69              		.loc 1 168 0
  70 002e 2B43     		orrs	r3, r3, r5
  71 0030 43EA0143 		orr	r3, r3, r1, lsl #16
 167:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****             I2C_CR2_RD_WRN | (n << 16U) | reload;
  72              		.loc 1 167 0
  73 0034 6360     		str	r3, [r4, #4]
 169:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
  74              		.loc 1 169 0
  75 0036 30BD     		pop	{r4, r5, pc}
  76              		.cfi_endproc
  77              	.LFE280:
  79              		.section	.text.i2c_lld_setup_tx_transfer,"ax",%progbits
  80              		.align	1
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu softvfp
  86              	i2c_lld_setup_tx_transfer:
  87              	.LFB281:
 170:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 171:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /**
 172:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @brief   I2C TX transfer setup.
 173:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 174:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] i2cp      pointer to the @p I2CDriver object
 175:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 176:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @notapi
 177:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  */
 178:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** static void i2c_lld_setup_tx_transfer(I2CDriver *i2cp) {
  88              		.loc 1 178 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              	.LVL4:
 179:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2C_TypeDef *dp = i2cp->i2c;
 180:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   uint32_t reload;
 181:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   size_t n;
 182:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 183:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* The unit can transfer 255 bytes maximum in a single operation.*/
 184:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   n = i2c_lld_get_txbytes(i2cp);
  93              		.loc 1 184 0
  94 0000 D0E90B31 		ldrd	r3, r1, [r0, #44]
  95 0004 5B68     		ldr	r3, [r3, #4]
 185:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (n > 255U) {
 186:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     n = 255U;
 187:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     reload = I2C_CR2_RELOAD;
 188:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
 189:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   else {
 190:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     reload = 0U;
 191:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
 192:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 193:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Configures the CR2 registers with both the calculated and static
 194:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****      settings.*/
 195:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dp->CR2 = (dp->CR2 & ~(I2C_CR2_NBYTES | I2C_CR2_RELOAD)) | i2cp->config->cr2 |
  96              		.loc 1 195 0
  97 0006 4068     		ldr	r0, [r0, #4]
  98              	.LVL5:
 184:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (n > 255U) {
  99              		.loc 1 184 0
 100 0008 5A68     		ldr	r2, [r3, #4]
 101              	.LVL6:
 102              		.loc 1 195 0
 103 000a 4B68     		ldr	r3, [r1, #4]
 104 000c 8068     		ldr	r0, [r0, #8]
 178:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2C_TypeDef *dp = i2cp->i2c;
 105              		.loc 1 178 0
 106 000e 10B5     		push	{r4, lr}
 107              		.cfi_def_cfa_offset 8
 108              		.cfi_offset 4, -8
 109              		.cfi_offset 14, -4
 110              		.loc 1 195 0
 111 0010 23F0FF73 		bic	r3, r3, #33423360
 185:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (n > 255U) {
 112              		.loc 1 185 0
 113 0014 FF2A     		cmp	r2, #255
 114              		.loc 1 195 0
 115 0016 23F48033 		bic	r3, r3, #65536
 190:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
 116              		.loc 1 190 0
 117 001a 94BF     		ite	ls
 118 001c 0024     		movls	r4, #0
 187:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
 119              		.loc 1 187 0
 120 001e 4FF08074 		movhi	r4, #16777216
 121              		.loc 1 195 0
 122 0022 43EA0003 		orr	r3, r3, r0
 186:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     reload = I2C_CR2_RELOAD;
 123              		.loc 1 186 0
 124 0026 88BF     		it	hi
 125 0028 FF22     		movhi	r2, #255
 126              	.LVL7:
 196:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****             (n << 16U) | reload;
 127              		.loc 1 196 0
 128 002a 2343     		orrs	r3, r3, r4
 129 002c 43EA0243 		orr	r3, r3, r2, lsl #16
 195:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****             (n << 16U) | reload;
 130              		.loc 1 195 0
 131 0030 4B60     		str	r3, [r1, #4]
 197:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 132              		.loc 1 197 0
 133 0032 10BD     		pop	{r4, pc}
 134              		.cfi_endproc
 135              	.LFE281:
 137              		.section	.text.VectorBC,"ax",%progbits
 138              		.align	1
 139              		.global	VectorBC
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 143              		.fpu softvfp
 145              	VectorBC:
 146              	.LFB285:
 198:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 199:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /**
 200:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @brief   Aborts an I2C transaction.
 201:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 202:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] i2cp      pointer to the @p I2CDriver object
 203:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 204:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @notapi
 205:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  */
 206:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** static void i2c_lld_abort_operation(I2CDriver *i2cp) {
 207:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2C_TypeDef *dp = i2cp->i2c;
 208:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 209:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (dp->CR1 & I2C_CR1_PE) {
 210:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     /* Stops the I2C peripheral.*/
 211:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dp->CR1 &= ~I2C_CR1_PE;
 212:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     while (dp->CR1 & I2C_CR1_PE)
 213:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       dp->CR1 &= ~I2C_CR1_PE;
 214:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dp->CR1 |= I2C_CR1_PE;
 215:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
 216:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 217:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 218:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Stops the associated DMA streams.*/
 219:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamDisable(i2cp->dmatx);
 220:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamDisable(i2cp->dmarx);
 221:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 222:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dp->CR1 &= ~(I2C_CR1_TXIE | I2C_CR1_RXIE);
 223:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 224:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 225:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 226:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /**
 227:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @brief   I2C shared ISR code.
 228:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 229:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] i2cp      pointer to the @p I2CDriver object
 230:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] isr       content of the ISR register to be decoded
 231:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 232:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @notapi
 233:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  */
 234:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** static void i2c_lld_serve_interrupt(I2CDriver *i2cp, uint32_t isr) {
 235:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2C_TypeDef *dp = i2cp->i2c;
 236:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 237:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Special case of a received NACK, the transfer is aborted.*/
 238:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if ((isr & I2C_ISR_NACKF) != 0U) {
 239:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 240:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     /* Stops the associated DMA streams.*/
 241:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dmaStreamDisable(i2cp->dmatx);
 242:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dmaStreamDisable(i2cp->dmarx);
 243:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 244:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 245:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     /* Error flag.*/
 246:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2cp->errors |= I2C_ACK_FAILURE;
 247:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 248:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     /* Transaction finished sending the STOP.*/
 249:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dp->CR2 |= I2C_CR2_STOP;
 250:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 251:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     /* Make sure no more interrupts.*/
 252:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dp->CR1 &= ~(I2C_CR1_TCIE | I2C_CR1_TXIE | I2C_CR1_RXIE);
 253:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 254:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     /* Errors are signaled to the upper layer.*/
 255:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     _i2c_wakeup_error_isr(i2cp);
 256:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 257:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     return;
 258:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
 259:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 260:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == FALSE
 261:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Handling of data transfer if the DMA mode is disabled.*/
 262:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   {
 263:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     uint32_t cr1 = dp->CR1;
 264:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 265:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     if (i2cp->state == I2C_ACTIVE_TX) {
 266:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       /* Transmission phase.*/
 267:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       if (((cr1 &I2C_CR1_TXIE) != 0U) && ((isr & I2C_ISR_TXIS) != 0U)) {
 268:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         dp->TXDR = (uint32_t)*i2cp->txptr;
 269:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         i2cp->txptr++;
 270:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         i2cp->txbytes--;
 271:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         if (i2cp->txbytes == 0U) {
 272:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****           dp->CR1 &= ~I2C_CR1_TXIE;
 273:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         }
 274:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       }
 275:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 276:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     else {
 277:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       /* Receive phase.*/
 278:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       if (((cr1 & I2C_CR1_RXIE) != 0U) && ((isr & I2C_ISR_RXNE) != 0U)) {
 279:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         *i2cp->rxptr = (uint8_t)dp->RXDR;
 280:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         i2cp->rxptr++;
 281:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         i2cp->rxbytes--;
 282:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         if (i2cp->rxbytes == 0U) {
 283:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****           dp->CR1 &= ~I2C_CR1_RXIE;
 284:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         }
 285:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       }
 286:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 287:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
 288:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 289:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 290:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Partial transfer handling, restarting the transfer and returning.*/
 291:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if ((isr & I2C_ISR_TCR) != 0U) {
 292:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     if (i2cp->state == I2C_ACTIVE_TX) {
 293:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       i2c_lld_setup_tx_transfer(i2cp);
 294:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 295:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     else {
 296:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       i2c_lld_setup_rx_transfer(i2cp);
 297:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 298:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     return;
 299:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
 300:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 301:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* The following condition is true if a transfer phase has been completed.*/
 302:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if ((isr & I2C_ISR_TC) != 0U) {
 303:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     if (i2cp->state == I2C_ACTIVE_TX) {
 304:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       /* End of the transmit phase.*/
 305:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 306:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 307:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       /* Disabling TX DMA channel.*/
 308:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       dmaStreamDisable(i2cp->dmatx);
 309:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 310:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 311:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       /* Starting receive phase if necessary.*/
 312:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       if (i2c_lld_get_rxbytes(i2cp) > 0U) {
 313:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         /* Setting up the peripheral.*/
 314:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         i2c_lld_setup_rx_transfer(i2cp);
 315:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 316:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 317:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         /* Enabling RX DMA.*/
 318:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         dmaStreamEnable(i2cp->dmarx);
 319:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 320:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         /* RX interrupt enabled.*/
 321:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         dp->CR1 |= I2C_CR1_RXIE;
 322:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 323:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 324:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         /* Starts the read operation.*/
 325:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         dp->CR2 |= I2C_CR2_START;
 326:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 327:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         /* State change.*/
 328:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         i2cp->state = I2C_ACTIVE_RX;
 329:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 330:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         /* Note, returning because the transaction is not over yet.*/
 331:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         return;
 332:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       }
 333:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 334:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     else {
 335:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       /* End of the receive phase.*/
 336:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 337:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       /* Disabling RX DMA channel.*/
 338:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       dmaStreamDisable(i2cp->dmarx);
 339:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 340:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 341:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 342:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     /* Transaction finished sending the STOP.*/
 343:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dp->CR2 |= I2C_CR2_STOP;
 344:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 345:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     /* Make sure no more 'Transfer Complete' interrupts.*/
 346:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dp->CR1 &= ~I2C_CR1_TCIE;
 347:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 348:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     /* Normal transaction end.*/
 349:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     _i2c_wakeup_isr(i2cp);
 350:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
 351:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 352:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 353:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /**
 354:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @brief   I2C error handler.
 355:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 356:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] i2cp      pointer to the @p I2CDriver object
 357:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] isr       content of the ISR register to be decoded
 358:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 359:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @notapi
 360:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  */
 361:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint32_t isr) {
 362:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 363:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 364:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Clears DMA interrupt flags just to be safe.*/
 365:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamDisable(i2cp->dmatx);
 366:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamDisable(i2cp->dmarx);
 367:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 368:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Disabling RX and TX interrupts.*/
 369:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2cp->i2c->CR1 &= ~(I2C_CR1_TXIE | I2C_CR1_RXIE);
 370:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 371:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 372:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (isr & I2C_ISR_BERR)
 373:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2cp->errors |= I2C_BUS_ERROR;
 374:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 375:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (isr & I2C_ISR_ARLO)
 376:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2cp->errors |= I2C_ARBITRATION_LOST;
 377:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 378:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (isr & I2C_ISR_OVR)
 379:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2cp->errors |= I2C_OVERRUN;
 380:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 381:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (isr & I2C_ISR_TIMEOUT)
 382:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2cp->errors |= I2C_TIMEOUT;
 383:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 384:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* If some error has been identified then sends wakes the waiting thread.*/
 385:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (i2cp->errors != I2C_NO_ERROR)
 386:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     _i2c_wakeup_error_isr(i2cp);
 387:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 388:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 389:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /*===========================================================================*/
 390:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /* Driver interrupt handlers.                                                */
 391:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /*===========================================================================*/
 392:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 393:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C1 || defined(__DOXYGEN__)
 394:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if defined(STM32_I2C1_GLOBAL_HANDLER) || defined(__DOXYGEN__)
 395:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /**
 396:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @brief   I2C1 event interrupt handler.
 397:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 398:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @notapi
 399:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  */
 400:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** OSAL_IRQ_HANDLER(STM32_I2C1_GLOBAL_HANDLER) {
 401:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   uint32_t isr = I2CD1.i2c->ISR;
 402:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 403:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_PROLOGUE();
 404:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 405:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Clearing IRQ bits.*/
 406:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD1.i2c->ICR = isr;
 407:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 408:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (isr & I2C_ERROR_MASK)
 409:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2c_lld_serve_error_interrupt(&I2CD1, isr);
 410:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   else if (isr & I2C_INT_MASK)
 411:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2c_lld_serve_interrupt(&I2CD1, isr);
 412:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 413:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_EPILOGUE();
 414:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 415:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 416:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #elif defined(STM32_I2C1_EVENT_HANDLER) && defined(STM32_I2C1_ERROR_HANDLER)
 417:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 147              		.loc 1 417 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151 0000 38B5     		push	{r3, r4, r5, lr}
 152              		.cfi_def_cfa_offset 16
 153              		.cfi_offset 3, -16
 154              		.cfi_offset 4, -12
 155              		.cfi_offset 5, -8
 156              		.cfi_offset 14, -4
 418:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   uint32_t isr = I2CD1.i2c->ISR;
 157              		.loc 1 418 0
 158 0002 404C     		ldr	r4, .L21
 159 0004 256B     		ldr	r5, [r4, #48]
 160 0006 AB69     		ldr	r3, [r5, #24]
 161              	.LVL8:
 419:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 420:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_PROLOGUE();
 421:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 422:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Clearing IRQ bits.*/
 423:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD1.i2c->ICR = isr & I2C_INT_MASK;
 162              		.loc 1 423 0
 163 0008 03F0FE02 		and	r2, r3, #254
 164              	.LBB263:
 165              	.LBB264:
 238:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 166              		.loc 1 238 0
 167 000c D906     		lsls	r1, r3, #27
 168              	.LBE264:
 169              	.LBE263:
 170              		.loc 1 423 0
 171 000e EA61     		str	r2, [r5, #28]
 172              	.LVL9:
 173              	.LBB291:
 174              	.LBB289:
 238:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 175              		.loc 1 238 0
 176 0010 2ED5     		bpl	.L8
 241:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dmaStreamDisable(i2cp->dmarx);
 177              		.loc 1 241 0
 178 0012 E36A     		ldr	r3, [r4, #44]
 179              	.LVL10:
 180 0014 5968     		ldr	r1, [r3, #4]
 181 0016 0A68     		ldr	r2, [r1]
 182 0018 22F00F02 		bic	r2, r2, #15
 183 001c 0A60     		str	r2, [r1]
 184 001e 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
 185 0020 1968     		ldr	r1, [r3]
 186 0022 0E23     		movs	r3, #14
 187 0024 03FA02F2 		lsl	r2, r3, r2
 188 0028 4A60     		str	r2, [r1, #4]
 242:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 189              		.loc 1 242 0
 190 002a A26A     		ldr	r2, [r4, #40]
 191 002c 5068     		ldr	r0, [r2, #4]
 192 002e 0168     		ldr	r1, [r0]
 193 0030 21F00F01 		bic	r1, r1, #15
 194 0034 0160     		str	r1, [r0]
 195 0036 1168     		ldr	r1, [r2]
 196 0038 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
 197 003a 9340     		lsls	r3, r3, r2
 198 003c 4B60     		str	r3, [r1, #4]
 246:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 199              		.loc 1 246 0
 200 003e A368     		ldr	r3, [r4, #8]
 201 0040 43F00403 		orr	r3, r3, #4
 202 0044 A360     		str	r3, [r4, #8]
 249:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 203              		.loc 1 249 0
 204 0046 6B68     		ldr	r3, [r5, #4]
 205 0048 43F48043 		orr	r3, r3, #16384
 206 004c 6B60     		str	r3, [r5, #4]
 252:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 207              		.loc 1 252 0
 208 004e 2B68     		ldr	r3, [r5]
 209 0050 23F04603 		bic	r3, r3, #70
 210 0054 2B60     		str	r3, [r5]
 211              	.LVL11:
 212              	.LBB265:
 213              	.LBB266:
 214              	.LBB267:
 215              	.LBB268:
 216              	.LBB269:
 217              	.LBB270:
 218              		.file 2 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @version  V4.30
   5:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
   9:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    All rights reserved.
  10:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      specific prior written permission.
  20:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    *
  21:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  35:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  38:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #endif
  45:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  46:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  47:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   @{
  51:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  52:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  53:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  54:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  58:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  60:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  62:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  63:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  64:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  65:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  69:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  71:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  73:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  74:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  75:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  76:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Control Register value
  79:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  80:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  82:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
  83:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  84:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
  86:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  87:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  88:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  89:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  90:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  94:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  96:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  98:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  99:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 100:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 101:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 105:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 107:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 108:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 109:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 111:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 112:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 113:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 114:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 115:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               APSR Register value
 118:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 119:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 121:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 122:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 123:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 125:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 126:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 127:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 128:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 129:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 132:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 134:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 136:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 137:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 138:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 140:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 141:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 142:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 143:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 144:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               PSP Register value
 147:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 148:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 150:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 151:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 154:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 155:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 156:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 157:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 158:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 162:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 164:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 166:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 167:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 168:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 169:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               MSP Register value
 172:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 173:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 175:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 176:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 177:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 179:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 180:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 181:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 182:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 183:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 188:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 190:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 192:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 193:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 194:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 195:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 199:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 201:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 202:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 203:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 205:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 206:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 207:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 208:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 209:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 213:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 215:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 217:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 218:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 219:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 221:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 222:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 226:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 228:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 230:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 231:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 232:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 233:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 237:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 239:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 241:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 243:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 244:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 248:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 250:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 251:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 252:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 254:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 255:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 257:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 219              		.loc 2 264 0
 220 0056 2023     		movs	r3, #32
 221              		.syntax unified
 222              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 223 0058 83F31188 		MSR basepri, r3
 224              	@ 0 "" 2
 225              	.LVL12:
 226              		.thumb
 227              		.syntax unified
 228              	.LBE270:
 229              	.LBE269:
 230              	.LBE268:
 231              	.LBE267:
 232              	.LBE266:
 233              	.LBE265:
 234              	.LBB271:
 235              	.LBB272:
 236              		.file 3 "./lib/chibios/os/hal/osal/rt/osal.h"
   1:./lib/chibios/os/hal/osal/rt/osal.h **** /*
   2:./lib/chibios/os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:./lib/chibios/os/hal/osal/rt/osal.h **** 
   4:./lib/chibios/os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:./lib/chibios/os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:./lib/chibios/os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:./lib/chibios/os/hal/osal/rt/osal.h **** 
   8:./lib/chibios/os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:./lib/chibios/os/hal/osal/rt/osal.h **** 
  10:./lib/chibios/os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:./lib/chibios/os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:./lib/chibios/os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:./lib/chibios/os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:./lib/chibios/os/hal/osal/rt/osal.h ****     limitations under the License.
  15:./lib/chibios/os/hal/osal/rt/osal.h **** */
  16:./lib/chibios/os/hal/osal/rt/osal.h **** 
  17:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  18:./lib/chibios/os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:./lib/chibios/os/hal/osal/rt/osal.h ****  *
  21:./lib/chibios/os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  23:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  24:./lib/chibios/os/hal/osal/rt/osal.h **** 
  25:./lib/chibios/os/hal/osal/rt/osal.h **** #ifndef _OSAL_H_
  26:./lib/chibios/os/hal/osal/rt/osal.h **** #define _OSAL_H_
  27:./lib/chibios/os/hal/osal/rt/osal.h **** 
  28:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:./lib/chibios/os/hal/osal/rt/osal.h **** 
  32:./lib/chibios/os/hal/osal/rt/osal.h **** #include "ch.h"
  33:./lib/chibios/os/hal/osal/rt/osal.h **** 
  34:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:./lib/chibios/os/hal/osal/rt/osal.h **** 
  38:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  39:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  41:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  42:./lib/chibios/os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:./lib/chibios/os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  45:./lib/chibios/os/hal/osal/rt/osal.h **** 
  46:./lib/chibios/os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:./lib/chibios/os/hal/osal/rt/osal.h **** #define TRUE                                (!FALSE)
  48:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  49:./lib/chibios/os/hal/osal/rt/osal.h **** 
  50:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        FALSE
  51:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         TRUE
  52:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  53:./lib/chibios/os/hal/osal/rt/osal.h **** 
  54:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
  55:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  56:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Messages
  57:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  58:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  59:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_OK                              RDY_OK
  60:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_RESET                           RDY_RESET
  61:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         RDY_TIMEOUT
  62:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  63:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  64:./lib/chibios/os/hal/osal/rt/osal.h **** 
  65:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
  66:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  67:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  69:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  70:./lib/chibios/os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((systime_t)0)
  71:./lib/chibios/os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((systime_t)-1)
  72:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  73:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  74:./lib/chibios/os/hal/osal/rt/osal.h **** 
  75:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  76:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  78:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  79:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  83:./lib/chibios/os/hal/osal/rt/osal.h **** 
  84:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  85:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  87:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  88:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  89:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  91:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:./lib/chibios/os/hal/osal/rt/osal.h **** 
  93:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  94:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  96:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:./lib/chibios/os/hal/osal/rt/osal.h **** 
  98:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  99:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 101:./lib/chibios/os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 104:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 106:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 107:./lib/chibios/os/hal/osal/rt/osal.h **** 
 108:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:./lib/chibios/os/hal/osal/rt/osal.h **** 
 112:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:./lib/chibios/os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:./lib/chibios/os/hal/osal/rt/osal.h **** 
 116:./lib/chibios/os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:./lib/chibios/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:./lib/chibios/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:./lib/chibios/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 121:./lib/chibios/os/hal/osal/rt/osal.h **** 
 122:./lib/chibios/os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:./lib/chibios/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 125:./lib/chibios/os/hal/osal/rt/osal.h **** 
 126:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:./lib/chibios/os/hal/osal/rt/osal.h **** 
 130:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 131:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 132:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 134:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 136:./lib/chibios/os/hal/osal/rt/osal.h **** 
 137:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 138:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 139:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 141:./lib/chibios/os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 143:./lib/chibios/os/hal/osal/rt/osal.h **** 
 144:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 145:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 146:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 148:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 150:./lib/chibios/os/hal/osal/rt/osal.h **** 
 151:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 152:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 153:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 154:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 155:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 156:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 157:./lib/chibios/os/hal/osal/rt/osal.h **** 
 158:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 159:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 160:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 161:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 162:./lib/chibios/os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 163:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 164:./lib/chibios/os/hal/osal/rt/osal.h **** 
 165:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 166:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 167:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 168:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 169:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 170:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 171:./lib/chibios/os/hal/osal/rt/osal.h **** 
 172:./lib/chibios/os/hal/osal/rt/osal.h **** #if !CH_CFG_USE_EVENTS
 173:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 174:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 175:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 176:./lib/chibios/os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 177:./lib/chibios/os/hal/osal/rt/osal.h ****  *          an entirely different way.
 178:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 179:./lib/chibios/os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 180:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 181:./lib/chibios/os/hal/osal/rt/osal.h **** typedef struct {
 182:./lib/chibios/os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Flags stored into the
 183:./lib/chibios/os/hal/osal/rt/osal.h ****                                                 object.                     */
 184:./lib/chibios/os/hal/osal/rt/osal.h **** } event_source_t;
 185:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 186:./lib/chibios/os/hal/osal/rt/osal.h **** 
 187:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 188:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 189:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then them
 190:./lib/chibios/os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 191:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 192:./lib/chibios/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 193:./lib/chibios/os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 194:./lib/chibios/os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 195:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 196:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 197:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 198:./lib/chibios/os/hal/osal/rt/osal.h **** 
 199:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 200:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 201:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 202:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 203:./lib/chibios/os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 204:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 205:./lib/chibios/os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 206:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 207:./lib/chibios/os/hal/osal/rt/osal.h **** typedef struct {
 208:./lib/chibios/os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 209:./lib/chibios/os/hal/osal/rt/osal.h **** } threads_queue_t;
 210:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 211:./lib/chibios/os/hal/osal/rt/osal.h **** 
 212:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 213:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 214:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 215:./lib/chibios/os/hal/osal/rt/osal.h **** 
 216:./lib/chibios/os/hal/osal/rt/osal.h **** /* Temporary names provided for ChibiOS 2.x compatibility.*/
 217:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueInit osalThreadQueueObjectInit
 218:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueWakeupAllI osalThreadDequeueAllI
 219:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueWakeupOneI osalThreadDequeueNextI
 220:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueGoSleepTimeoutS osalThreadEnqueueTimeoutS
 221:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalEventInit osalEventObjectInit
 222:./lib/chibios/os/hal/osal/rt/osal.h **** 
 223:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 224:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 225:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 226:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 227:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 228:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 229:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 230:./lib/chibios/os/hal/osal/rt/osal.h ****  *          message and halts.
 231:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 232:./lib/chibios/os/hal/osal/rt/osal.h ****  *          switch is enabled.
 233:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 234:./lib/chibios/os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 235:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 236:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 237:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 238:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 239:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 240:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 241:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 242:./lib/chibios/os/hal/osal/rt/osal.h **** 
 243:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 244:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 245:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 246:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 247:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is enabled.
 248:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 249:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 250:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 251:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 252:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 253:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 254:./lib/chibios/os/hal/osal/rt/osal.h **** 
 255:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 256:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 257:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 258:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 259:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 260:./lib/chibios/os/hal/osal/rt/osal.h **** 
 261:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 262:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 263:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 264:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 265:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 266:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 267:./lib/chibios/os/hal/osal/rt/osal.h **** 
 268:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 269:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 270:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 271:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 272:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 273:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 274:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 275:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 276:./lib/chibios/os/hal/osal/rt/osal.h **** 
 277:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 278:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 279:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 280:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 281:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 282:./lib/chibios/os/hal/osal/rt/osal.h **** 
 283:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 284:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 285:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 286:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 287:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 288:./lib/chibios/os/hal/osal/rt/osal.h **** 
 289:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 290:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 291:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 292:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 293:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 294:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 295:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 296:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 297:./lib/chibios/os/hal/osal/rt/osal.h **** 
 298:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 299:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 300:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 301:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 302:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 303:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 304:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 305:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 306:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 307:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 308:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 309:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 310:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 311:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 312:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_S2ST(sec) S2ST(sec)
 313:./lib/chibios/os/hal/osal/rt/osal.h **** 
 314:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 315:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 316:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 317:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 318:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 319:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 320:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 321:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 322:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 323:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 324:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_MS2ST(msec) MS2ST(msec)
 325:./lib/chibios/os/hal/osal/rt/osal.h **** 
 326:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 327:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 328:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 329:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 330:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 331:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 332:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 333:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 334:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 335:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 336:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_US2ST(usec) US2ST(usec)
 337:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 338:./lib/chibios/os/hal/osal/rt/osal.h **** 
 339:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 340:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 341:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 342:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 343:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 344:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 345:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 346:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 347:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 348:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 349:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 350:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 351:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 352:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 353:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 354:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 355:./lib/chibios/os/hal/osal/rt/osal.h **** 
 356:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 357:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 358:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 359:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 360:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 361:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 362:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 363:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 364:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 365:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 366:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 367:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 368:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 369:./lib/chibios/os/hal/osal/rt/osal.h **** 
 370:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 371:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 372:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 373:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 374:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 375:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 376:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 377:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 378:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 379:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 380:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 381:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 382:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 383:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 384:./lib/chibios/os/hal/osal/rt/osal.h **** 
 385:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 386:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 387:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 388:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 389:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 390:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 391:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 392:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 393:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 394:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 395:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       time in seconds, must be different from zero
 396:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 397:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 398:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 399:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(sec) osalThreadSleep(OSAL_S2ST(sec))
 400:./lib/chibios/os/hal/osal/rt/osal.h **** 
 401:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 402:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 403:./lib/chibios/os/hal/osal/rt/osal.h ****  *          milliseconds.
 404:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 405:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 406:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 407:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 408:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 409:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 410:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 411:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 412:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msec) osalThreadSleep(OSAL_MS2ST(msec))
 413:./lib/chibios/os/hal/osal/rt/osal.h **** 
 414:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 415:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 416:./lib/chibios/os/hal/osal/rt/osal.h ****  *          microseconds.
 417:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 418:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 419:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 420:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 421:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      time in microseconds, must be different from zero
 422:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 423:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 424:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 425:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usec) osalThreadSleep(OSAL_US2ST(usec))
 426:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 427:./lib/chibios/os/hal/osal/rt/osal.h **** 
 428:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 429:./lib/chibios/os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 430:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 431:./lib/chibios/os/hal/osal/rt/osal.h **** 
 432:./lib/chibios/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 433:./lib/chibios/os/hal/osal/rt/osal.h **** extern "C" {
 434:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 435:./lib/chibios/os/hal/osal/rt/osal.h **** 
 436:./lib/chibios/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 437:./lib/chibios/os/hal/osal/rt/osal.h **** }
 438:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 439:./lib/chibios/os/hal/osal/rt/osal.h **** 
 440:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 441:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 442:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 443:./lib/chibios/os/hal/osal/rt/osal.h **** 
 444:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 445:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 446:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 447:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 448:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 449:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 450:./lib/chibios/os/hal/osal/rt/osal.h **** 
 451:./lib/chibios/os/hal/osal/rt/osal.h **** }
 452:./lib/chibios/os/hal/osal/rt/osal.h **** 
 453:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 454:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 455:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 456:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 457:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 458:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 459:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 460:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 461:./lib/chibios/os/hal/osal/rt/osal.h **** 
 462:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 463:./lib/chibios/os/hal/osal/rt/osal.h **** }
 464:./lib/chibios/os/hal/osal/rt/osal.h **** 
 465:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 466:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 467:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 468:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 469:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 470:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 471:./lib/chibios/os/hal/osal/rt/osal.h **** 
 472:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysDisable();
 473:./lib/chibios/os/hal/osal/rt/osal.h **** }
 474:./lib/chibios/os/hal/osal/rt/osal.h **** 
 475:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 476:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 477:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 478:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 479:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 480:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 481:./lib/chibios/os/hal/osal/rt/osal.h **** 
 482:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysEnable();
 483:./lib/chibios/os/hal/osal/rt/osal.h **** }
 484:./lib/chibios/os/hal/osal/rt/osal.h **** 
 485:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 486:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 487:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 488:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 489:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 490:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 491:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 492:./lib/chibios/os/hal/osal/rt/osal.h **** 
 493:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysLock();
 494:./lib/chibios/os/hal/osal/rt/osal.h **** }
 495:./lib/chibios/os/hal/osal/rt/osal.h **** 
 496:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 497:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 498:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 499:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 500:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 501:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 502:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 503:./lib/chibios/os/hal/osal/rt/osal.h **** 
 504:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysUnlock();
 505:./lib/chibios/os/hal/osal/rt/osal.h **** }
 506:./lib/chibios/os/hal/osal/rt/osal.h **** 
 507:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 508:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 509:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 510:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 511:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 512:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 513:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 514:./lib/chibios/os/hal/osal/rt/osal.h **** 
 515:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 516:./lib/chibios/os/hal/osal/rt/osal.h **** }
 517:./lib/chibios/os/hal/osal/rt/osal.h **** 
 518:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 519:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 520:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 521:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 522:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 523:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 524:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 525:./lib/chibios/os/hal/osal/rt/osal.h **** 
 526:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 527:./lib/chibios/os/hal/osal/rt/osal.h **** }
 528:./lib/chibios/os/hal/osal/rt/osal.h **** 
 529:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 530:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 531:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 532:./lib/chibios/os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 533:./lib/chibios/os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 534:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is known.
 535:./lib/chibios/os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 536:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 537:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 538:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 539:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 540:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 541:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 542:./lib/chibios/os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 543:./lib/chibios/os/hal/osal/rt/osal.h **** 
 544:./lib/chibios/os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 545:./lib/chibios/os/hal/osal/rt/osal.h **** }
 546:./lib/chibios/os/hal/osal/rt/osal.h **** 
 547:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 548:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 549:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 550:./lib/chibios/os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 551:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 552:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 553:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 554:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 555:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 556:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 557:./lib/chibios/os/hal/osal/rt/osal.h **** 
 558:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 559:./lib/chibios/os/hal/osal/rt/osal.h **** }
 560:./lib/chibios/os/hal/osal/rt/osal.h **** 
 561:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 562:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 563:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 564:./lib/chibios/os/hal/osal/rt/osal.h ****  *          value.
 565:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 566:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 567:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 568:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 569:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 570:./lib/chibios/os/hal/osal/rt/osal.h **** #if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
 571:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 572:./lib/chibios/os/hal/osal/rt/osal.h **** 
 573:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 574:./lib/chibios/os/hal/osal/rt/osal.h **** }
 575:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 576:./lib/chibios/os/hal/osal/rt/osal.h **** 
 577:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 578:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 579:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 580:./lib/chibios/os/hal/osal/rt/osal.h ****  *          service from the HAL.
 581:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 582:./lib/chibios/os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 583:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 584:./lib/chibios/os/hal/osal/rt/osal.h **** 
 585:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 586:./lib/chibios/os/hal/osal/rt/osal.h **** }
 587:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 588:./lib/chibios/os/hal/osal/rt/osal.h **** 
 589:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 590:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 591:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 592:./lib/chibios/os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 593:./lib/chibios/os/hal/osal/rt/osal.h ****  *          required in this scenario.
 594:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 595:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 596:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 597:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 598:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 599:./lib/chibios/os/hal/osal/rt/osal.h **** 
 600:./lib/chibios/os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 601:./lib/chibios/os/hal/osal/rt/osal.h **** }
 602:./lib/chibios/os/hal/osal/rt/osal.h **** 
 603:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 604:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 605:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 606:./lib/chibios/os/hal/osal/rt/osal.h ****  *          invocation.
 607:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 608:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 609:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 610:./lib/chibios/os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 611:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 612:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 613:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 614:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 615:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 616:./lib/chibios/os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 617:./lib/chibios/os/hal/osal/rt/osal.h **** 
 618:./lib/chibios/os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 619:./lib/chibios/os/hal/osal/rt/osal.h **** }
 620:./lib/chibios/os/hal/osal/rt/osal.h **** 
 621:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 622:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 623:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 624:./lib/chibios/os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 625:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 626:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 627:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 628:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 629:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 630:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 631:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 632:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 633:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 634:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 635:./lib/chibios/os/hal/osal/rt/osal.h **** static inline bool osalOsIsTimeWithinX(systime_t time,
 636:./lib/chibios/os/hal/osal/rt/osal.h ****                                        systime_t start,
 637:./lib/chibios/os/hal/osal/rt/osal.h ****                                        systime_t end) {
 638:./lib/chibios/os/hal/osal/rt/osal.h **** 
 639:./lib/chibios/os/hal/osal/rt/osal.h ****   return chVTIsTimeWithinX(time, start, end);
 640:./lib/chibios/os/hal/osal/rt/osal.h **** }
 641:./lib/chibios/os/hal/osal/rt/osal.h **** 
 642:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 643:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 644:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 645:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 646:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 647:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 648:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        normal time specification.
 649:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 650:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 651:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 652:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 653:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 654:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(systime_t time) {
 655:./lib/chibios/os/hal/osal/rt/osal.h **** 
 656:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdSleepS(time);
 657:./lib/chibios/os/hal/osal/rt/osal.h **** }
 658:./lib/chibios/os/hal/osal/rt/osal.h **** 
 659:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 660:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 661:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 662:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 663:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 664:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 665:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        normal time specification.
 666:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 667:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 668:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 669:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 670:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 671:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(systime_t time) {
 672:./lib/chibios/os/hal/osal/rt/osal.h **** 
 673:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdSleep(time);
 674:./lib/chibios/os/hal/osal/rt/osal.h **** }
 675:./lib/chibios/os/hal/osal/rt/osal.h **** 
 676:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 677:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 678:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 679:./lib/chibios/os/hal/osal/rt/osal.h ****  *          context.
 680:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 681:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 682:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 683:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 684:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 685:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 686:./lib/chibios/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 687:./lib/chibios/os/hal/osal/rt/osal.h **** 
 688:./lib/chibios/os/hal/osal/rt/osal.h ****   return chThdSuspendS(trp);
 689:./lib/chibios/os/hal/osal/rt/osal.h **** }
 690:./lib/chibios/os/hal/osal/rt/osal.h **** 
 691:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 692:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 693:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 694:./lib/chibios/os/hal/osal/rt/osal.h ****  *          context.
 695:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 696:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 697:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 698:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 699:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 700:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        state.
 701:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 702:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 703:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        occurred.
 704:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 705:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 706:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 707:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 708:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 709:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 710:./lib/chibios/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 711:./lib/chibios/os/hal/osal/rt/osal.h ****                                               systime_t timeout) {
 712:./lib/chibios/os/hal/osal/rt/osal.h **** 
 713:./lib/chibios/os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 714:./lib/chibios/os/hal/osal/rt/osal.h **** }
 715:./lib/chibios/os/hal/osal/rt/osal.h **** 
 716:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 717:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 718:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must not reschedule because it can be called from
 719:./lib/chibios/os/hal/osal/rt/osal.h ****  *          ISR context.
 720:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 721:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 722:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 723:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 724:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 725:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 726:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 727:./lib/chibios/os/hal/osal/rt/osal.h **** 
 728:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdResumeI(trp, msg);
 237              		.loc 3 728 0
 238 005c 6FF00101 		mvn	r1, #1
 239 0060 04F11C00 		add	r0, r4, #28
 240              	.LVL13:
 241              	.L20:
 242              	.LBE272:
 243              	.LBE271:
 244              	.LBB273:
 245              	.LBB274:
 246 0064 FFF7FEFF 		bl	chThdResumeI
 247              	.LVL14:
 248              	.LBE274:
 249              	.LBE273:
 250              	.LBB276:
 251              	.LBB277:
 252              	.LBB278:
 253              	.LBB279:
 254              	.LBB280:
 255              	.LBB281:
 256              		.loc 2 264 0
 257 0068 0023     		movs	r3, #0
 258              		.syntax unified
 259              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 260 006a 83F31188 		MSR basepri, r3
 261              	@ 0 "" 2
 262              	.LVL15:
 263              		.thumb
 264              		.syntax unified
 265 006e 07E0     		b	.L9
 266              	.LVL16:
 267              	.L8:
 268              	.LBE281:
 269              	.LBE280:
 270              	.LBE279:
 271              	.LBE278:
 272              	.LBE277:
 273              	.LBE276:
 291:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     if (i2cp->state == I2C_ACTIVE_TX) {
 274              		.loc 1 291 0
 275 0070 1A06     		lsls	r2, r3, #24
 276 0072 0CD5     		bpl	.L10
 292:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       i2c_lld_setup_tx_transfer(i2cp);
 277              		.loc 1 292 0
 278 0074 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 279              	.LVL17:
 280 0076 032B     		cmp	r3, #3
 293:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 281              		.loc 1 293 0
 282 0078 2046     		mov	r0, r4
 292:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       i2c_lld_setup_tx_transfer(i2cp);
 283              		.loc 1 292 0
 284 007a 05D1     		bne	.L11
 293:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 285              		.loc 1 293 0
 286 007c FFF7FEFF 		bl	i2c_lld_setup_tx_transfer
 287              	.LVL18:
 288              	.L9:
 289              	.LBE289:
 290              	.LBE291:
 424:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 425:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2c_lld_serve_interrupt(&I2CD1, isr);
 426:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 427:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_EPILOGUE();
 428:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 291              		.loc 1 428 0
 292 0080 BDE83840 		pop	{r3, r4, r5, lr}
 293              		.cfi_remember_state
 294              		.cfi_restore 14
 295              		.cfi_restore 5
 296              		.cfi_restore 4
 297              		.cfi_restore 3
 298              		.cfi_def_cfa_offset 0
 427:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 299              		.loc 1 427 0
 300 0084 FFF7FEBF 		b	_port_irq_epilogue
 301              	.LVL19:
 302              	.L11:
 303              		.cfi_restore_state
 304              	.LBB292:
 305              	.LBB290:
 296:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 306              		.loc 1 296 0
 307 0088 FFF7FEFF 		bl	i2c_lld_setup_rx_transfer
 308              	.LVL20:
 309 008c F8E7     		b	.L9
 310              	.LVL21:
 311              	.L10:
 302:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     if (i2cp->state == I2C_ACTIVE_TX) {
 312              		.loc 1 302 0
 313 008e 5B06     		lsls	r3, r3, #25
 314              	.LVL22:
 315 0090 F6D5     		bpl	.L9
 303:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       /* End of the transmit phase.*/
 316              		.loc 1 303 0
 317 0092 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 318 0094 A36A     		ldr	r3, [r4, #40]
 319 0096 0329     		cmp	r1, #3
 320 0098 5A68     		ldr	r2, [r3, #4]
 321 009a 1CD1     		bne	.L12
 308:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 322              		.loc 1 308 0
 323 009c E36A     		ldr	r3, [r4, #44]
 324 009e 5868     		ldr	r0, [r3, #4]
 325 00a0 0168     		ldr	r1, [r0]
 326 00a2 21F00F01 		bic	r1, r1, #15
 327 00a6 0160     		str	r1, [r0]
 328 00a8 187C     		ldrb	r0, [r3, #16]	@ zero_extendqisi2
 329 00aa 1968     		ldr	r1, [r3]
 330 00ac 0E23     		movs	r3, #14
 331 00ae 8340     		lsls	r3, r3, r0
 332 00b0 4B60     		str	r3, [r1, #4]
 312:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         /* Setting up the peripheral.*/
 333              		.loc 1 312 0
 334 00b2 5368     		ldr	r3, [r2, #4]
 335 00b4 C3B1     		cbz	r3, .L13
 314:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 336              		.loc 1 314 0
 337 00b6 2046     		mov	r0, r4
 338 00b8 FFF7FEFF 		bl	i2c_lld_setup_rx_transfer
 339              	.LVL23:
 318:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 340              		.loc 1 318 0
 341 00bc A36A     		ldr	r3, [r4, #40]
 342 00be 5A68     		ldr	r2, [r3, #4]
 343 00c0 1368     		ldr	r3, [r2]
 344 00c2 43F00103 		orr	r3, r3, #1
 345 00c6 1360     		str	r3, [r2]
 325:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 346              		.loc 1 325 0
 347 00c8 6B68     		ldr	r3, [r5, #4]
 348 00ca 43F40053 		orr	r3, r3, #8192
 349 00ce 6B60     		str	r3, [r5, #4]
 328:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 350              		.loc 1 328 0
 351 00d0 0423     		movs	r3, #4
 352 00d2 2370     		strb	r3, [r4]
 353 00d4 D4E7     		b	.L9
 354              	.L12:
 338:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 355              		.loc 1 338 0
 356 00d6 1168     		ldr	r1, [r2]
 357 00d8 21F00F01 		bic	r1, r1, #15
 358 00dc 1160     		str	r1, [r2]
 359 00de 197C     		ldrb	r1, [r3, #16]	@ zero_extendqisi2
 360 00e0 1A68     		ldr	r2, [r3]
 361 00e2 0E23     		movs	r3, #14
 362 00e4 8B40     		lsls	r3, r3, r1
 363 00e6 5360     		str	r3, [r2, #4]
 364              	.L13:
 343:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 365              		.loc 1 343 0
 366 00e8 6B68     		ldr	r3, [r5, #4]
 367 00ea 43F48043 		orr	r3, r3, #16384
 368 00ee 6B60     		str	r3, [r5, #4]
 346:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 369              		.loc 1 346 0
 370 00f0 2B68     		ldr	r3, [r5]
 371 00f2 23F04003 		bic	r3, r3, #64
 372 00f6 2B60     		str	r3, [r5]
 373              	.LVL24:
 374              	.LBB282:
 375              	.LBB283:
 376              	.LBB284:
 377              	.LBB285:
 378              	.LBB286:
 379              	.LBB287:
 380              		.loc 2 264 0
 381 00f8 2023     		movs	r3, #32
 382              		.syntax unified
 383              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 384 00fa 83F31188 		MSR basepri, r3
 385              	@ 0 "" 2
 386              	.LVL25:
 387              		.thumb
 388              		.syntax unified
 389              	.LBE287:
 390              	.LBE286:
 391              	.LBE285:
 392              	.LBE284:
 393              	.LBE283:
 394              	.LBE282:
 395              	.LBB288:
 396              	.LBB275:
 397              		.loc 3 728 0
 398 00fe 0021     		movs	r1, #0
 399 0100 0148     		ldr	r0, .L21+4
 400 0102 AFE7     		b	.L20
 401              	.L22:
 402              		.align	2
 403              	.L21:
 404 0104 00000000 		.word	.LANCHOR0
 405 0108 1C000000 		.word	.LANCHOR0+28
 406              	.LBE275:
 407              	.LBE288:
 408              	.LBE290:
 409              	.LBE292:
 410              		.cfi_endproc
 411              	.LFE285:
 413              		.section	.text.VectorC0,"ax",%progbits
 414              		.align	1
 415              		.global	VectorC0
 416              		.syntax unified
 417              		.thumb
 418              		.thumb_func
 419              		.fpu softvfp
 421              	VectorC0:
 422              	.LFB286:
 429:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 430:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 423              		.loc 1 430 0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 427 0000 38B5     		push	{r3, r4, r5, lr}
 428              		.cfi_def_cfa_offset 16
 429              		.cfi_offset 3, -16
 430              		.cfi_offset 4, -12
 431              		.cfi_offset 5, -8
 432              		.cfi_offset 14, -4
 431:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   uint32_t isr = I2CD1.i2c->ISR;
 433              		.loc 1 431 0
 434 0002 224B     		ldr	r3, .L44
 435 0004 196B     		ldr	r1, [r3, #48]
 436 0006 8A69     		ldr	r2, [r1, #24]
 437              	.LVL26:
 432:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 433:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_PROLOGUE();
 434:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 435:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Clearing IRQ bits.*/
 436:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD1.i2c->ICR = isr & I2C_ERROR_MASK;
 438              		.loc 1 436 0
 439 0008 02F47C50 		and	r0, r2, #16128
 440 000c C861     		str	r0, [r1, #28]
 441              	.LVL27:
 442              	.LBB309:
 443              	.LBB310:
 365:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamDisable(i2cp->dmarx);
 444              		.loc 1 365 0
 445 000e D96A     		ldr	r1, [r3, #44]
 446 0010 4C68     		ldr	r4, [r1, #4]
 447 0012 2068     		ldr	r0, [r4]
 448 0014 20F00F00 		bic	r0, r0, #15
 449 0018 2060     		str	r0, [r4]
 450 001a 087C     		ldrb	r0, [r1, #16]	@ zero_extendqisi2
 451 001c 0C68     		ldr	r4, [r1]
 452 001e 0E21     		movs	r1, #14
 453 0020 01FA00F0 		lsl	r0, r1, r0
 454 0024 6060     		str	r0, [r4, #4]
 366:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 455              		.loc 1 366 0
 456 0026 986A     		ldr	r0, [r3, #40]
 457 0028 4568     		ldr	r5, [r0, #4]
 458 002a 2C68     		ldr	r4, [r5]
 459 002c 24F00F04 		bic	r4, r4, #15
 460 0030 2C60     		str	r4, [r5]
 461 0032 0468     		ldr	r4, [r0]
 462 0034 007C     		ldrb	r0, [r0, #16]	@ zero_extendqisi2
 463 0036 8140     		lsls	r1, r1, r0
 464 0038 6160     		str	r1, [r4, #4]
 372:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2cp->errors |= I2C_BUS_ERROR;
 465              		.loc 1 372 0
 466 003a D405     		lsls	r4, r2, #23
 373:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 467              		.loc 1 373 0
 468 003c 42BF     		ittt	mi
 469 003e 9968     		ldrmi	r1, [r3, #8]
 470 0040 41F00101 		orrmi	r1, r1, #1
 471 0044 9960     		strmi	r1, [r3, #8]
 375:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2cp->errors |= I2C_ARBITRATION_LOST;
 472              		.loc 1 375 0
 473 0046 9005     		lsls	r0, r2, #22
 376:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 474              		.loc 1 376 0
 475 0048 42BF     		ittt	mi
 476 004a 9968     		ldrmi	r1, [r3, #8]
 477 004c 41F00201 		orrmi	r1, r1, #2
 478 0050 9960     		strmi	r1, [r3, #8]
 378:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2cp->errors |= I2C_OVERRUN;
 479              		.loc 1 378 0
 480 0052 5105     		lsls	r1, r2, #21
 379:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 481              		.loc 1 379 0
 482 0054 42BF     		ittt	mi
 483 0056 9968     		ldrmi	r1, [r3, #8]
 484 0058 41F00801 		orrmi	r1, r1, #8
 485 005c 9960     		strmi	r1, [r3, #8]
 381:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2cp->errors |= I2C_TIMEOUT;
 486              		.loc 1 381 0
 487 005e D204     		lsls	r2, r2, #19
 488              	.LVL28:
 382:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 489              		.loc 1 382 0
 490 0060 42BF     		ittt	mi
 491 0062 9A68     		ldrmi	r2, [r3, #8]
 492 0064 42F02002 		orrmi	r2, r2, #32
 493 0068 9A60     		strmi	r2, [r3, #8]
 385:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     _i2c_wakeup_error_isr(i2cp);
 494              		.loc 1 385 0
 495 006a 9B68     		ldr	r3, [r3, #8]
 496 006c 53B1     		cbz	r3, .L28
 497              	.LVL29:
 498              	.LBB311:
 499              	.LBB312:
 500              	.LBB313:
 501              	.LBB314:
 502              	.LBB315:
 503              	.LBB316:
 504              		.loc 2 264 0
 505 006e 2023     		movs	r3, #32
 506              		.syntax unified
 507              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 508 0070 83F31188 		MSR basepri, r3
 509              	@ 0 "" 2
 510              	.LVL30:
 511              		.thumb
 512              		.syntax unified
 513              	.LBE316:
 514              	.LBE315:
 515              	.LBE314:
 516              	.LBE313:
 517              	.LBE312:
 518              	.LBE311:
 519              	.LBB317:
 520              	.LBB318:
 521              		.loc 3 728 0
 522 0074 6FF00101 		mvn	r1, #1
 523 0078 0548     		ldr	r0, .L44+4
 524 007a FFF7FEFF 		bl	chThdResumeI
 525              	.LVL31:
 526              	.LBE318:
 527              	.LBE317:
 528              	.LBB319:
 529              	.LBB320:
 530              	.LBB321:
 531              	.LBB322:
 532              	.LBB323:
 533              	.LBB324:
 534              		.loc 2 264 0
 535 007e 0023     		movs	r3, #0
 536              		.syntax unified
 537              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 538 0080 83F31188 		MSR basepri, r3
 539              	@ 0 "" 2
 540              	.LVL32:
 541              		.thumb
 542              		.syntax unified
 543              	.L28:
 544              	.LBE324:
 545              	.LBE323:
 546              	.LBE322:
 547              	.LBE321:
 548              	.LBE320:
 549              	.LBE319:
 550              	.LBE310:
 551              	.LBE309:
 437:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 438:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2c_lld_serve_error_interrupt(&I2CD1, isr);
 439:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 440:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_EPILOGUE();
 441:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 552              		.loc 1 441 0
 553 0084 BDE83840 		pop	{r3, r4, r5, lr}
 554              		.cfi_restore 14
 555              		.cfi_restore 5
 556              		.cfi_restore 4
 557              		.cfi_restore 3
 558              		.cfi_def_cfa_offset 0
 440:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 559              		.loc 1 440 0
 560 0088 FFF7FEBF 		b	_port_irq_epilogue
 561              	.LVL33:
 562              	.L45:
 563              		.align	2
 564              	.L44:
 565 008c 00000000 		.word	.LANCHOR0
 566 0090 1C000000 		.word	.LANCHOR0+28
 567              		.cfi_endproc
 568              	.LFE286:
 570              		.section	.text.i2c_lld_init,"ax",%progbits
 571              		.align	1
 572              		.global	i2c_lld_init
 573              		.syntax unified
 574              		.thumb
 575              		.thumb_func
 576              		.fpu softvfp
 578              	i2c_lld_init:
 579              	.LFB287:
 442:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 443:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 444:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #error "I2C1 interrupt handlers not defined"
 445:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 446:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif /* STM32_I2C_USE_I2C1 */
 447:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 448:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C2 || defined(__DOXYGEN__)
 449:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if defined(STM32_I2C2_GLOBAL_HANDLER) || defined(__DOXYGEN__)
 450:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /**
 451:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @brief   I2C2 event interrupt handler.
 452:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 453:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @notapi
 454:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  */
 455:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** OSAL_IRQ_HANDLER(STM32_I2C2_GLOBAL_HANDLER) {
 456:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   uint32_t isr = I2CD2.i2c->ISR;
 457:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 458:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_PROLOGUE();
 459:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 460:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Clearing IRQ bits.*/
 461:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD2.i2c->ICR = isr;
 462:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 463:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (isr & I2C_ERROR_MASK)
 464:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2c_lld_serve_error_interrupt(&I2CD2, isr);
 465:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   else if (isr & I2C_INT_MASK)
 466:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2c_lld_serve_interrupt(&I2CD2, isr);
 467:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 468:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_EPILOGUE();
 469:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 470:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 471:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #elif defined(STM32_I2C2_EVENT_HANDLER) && defined(STM32_I2C2_ERROR_HANDLER)
 472:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 473:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   uint32_t isr = I2CD2.i2c->ISR;
 474:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 475:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_PROLOGUE();
 476:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 477:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Clearing IRQ bits.*/
 478:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD2.i2c->ICR = isr & I2C_INT_MASK;
 479:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 480:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2c_lld_serve_interrupt(&I2CD2, isr);
 481:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 482:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_EPILOGUE();
 483:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 484:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 485:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 486:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   uint32_t isr = I2CD2.i2c->ISR;
 487:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 488:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_PROLOGUE();
 489:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 490:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Clearing IRQ bits.*/
 491:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD2.i2c->ICR = isr & I2C_ERROR_MASK;
 492:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 493:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2c_lld_serve_error_interrupt(&I2CD2, isr);
 494:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 495:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_EPILOGUE();
 496:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 497:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 498:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 499:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #error "I2C2 interrupt handlers not defined"
 500:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 501:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif /* STM32_I2C_USE_I2C2 */
 502:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 503:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C3 || defined(__DOXYGEN__)
 504:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if defined(STM32_I2C3_GLOBAL_HANDLER) || defined(__DOXYGEN__)
 505:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /**
 506:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @brief   I2C3 event interrupt handler.
 507:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 508:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @notapi
 509:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  */
 510:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** OSAL_IRQ_HANDLER(STM32_I2C3_GLOBAL_HANDLER) {
 511:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   uint32_t isr = I2CD3.i2c->ISR;
 512:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 513:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_PROLOGUE();
 514:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 515:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Clearing IRQ bits.*/
 516:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD3.i2c->ICR = isr;
 517:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 518:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (isr & I2C_ERROR_MASK)
 519:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2c_lld_serve_error_interrupt(&I2CD3, isr);
 520:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   else if (isr & I2C_INT_MASK)
 521:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2c_lld_serve_interrupt(&I2CD3, isr);
 522:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 523:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_EPILOGUE();
 524:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 525:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 526:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #elif defined(STM32_I2C3_EVENT_HANDLER) && defined(STM32_I2C3_ERROR_HANDLER)
 527:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** OSAL_IRQ_HANDLER(STM32_I2C3_EVENT_HANDLER) {
 528:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   uint32_t isr = I2CD3.i2c->ISR;
 529:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 530:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_PROLOGUE();
 531:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 532:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Clearing IRQ bits.*/
 533:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD3.i2c->ICR = isr & I2C_INT_MASK;
 534:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 535:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2c_lld_serve_interrupt(&I2CD3, isr);
 536:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 537:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_EPILOGUE();
 538:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 539:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 540:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** OSAL_IRQ_HANDLER(STM32_I2C3_ERROR_HANDLER) {
 541:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   uint32_t isr = I2CD3.i2c->ISR;
 542:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 543:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_PROLOGUE();
 544:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 545:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Clearing IRQ bits.*/
 546:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD3.i2c->ICR = isr & I2C_ERROR_MASK;
 547:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 548:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2c_lld_serve_error_interrupt(&I2CD3, isr);
 549:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 550:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_EPILOGUE();
 551:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 552:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 553:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 554:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #error "I2C3 interrupt handlers not defined"
 555:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 556:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif /* STM32_I2C_USE_I2C3 */
 557:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 558:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C4 || defined(__DOXYGEN__)
 559:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if defined(STM32_I2C4_GLOBAL_HANDLER) || defined(__DOXYGEN__)
 560:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /**
 561:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @brief   I2C4 event interrupt handler.
 562:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 563:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @notapi
 564:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  */
 565:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** OSAL_IRQ_HANDLER(STM32_I2C4_GLOBAL_HANDLER) {
 566:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   uint32_t isr = I2CD4.i2c->ISR;
 567:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 568:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_PROLOGUE();
 569:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 570:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Clearing IRQ bits.*/
 571:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD4.i2c->ICR = isr;
 572:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 573:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (isr & I2C_ERROR_MASK)
 574:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2c_lld_serve_error_interrupt(&I2CD4, isr);
 575:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   else if (isr & I2C_INT_MASK)
 576:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2c_lld_serve_interrupt(&I2CD4, isr);
 577:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 578:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_EPILOGUE();
 579:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 580:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 581:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #elif defined(STM32_I2C4_EVENT_HANDLER) && defined(STM32_I2C4_ERROR_HANDLER)
 582:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** OSAL_IRQ_HANDLER(STM32_I2C4_EVENT_HANDLER) {
 583:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   uint32_t isr = I2CD4.i2c->ISR;
 584:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 585:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_PROLOGUE();
 586:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 587:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Clearing IRQ bits.*/
 588:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD4.i2c->ICR = isr & I2C_INT_MASK;
 589:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 590:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2c_lld_serve_interrupt(&I2CD4, isr);
 591:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 592:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_EPILOGUE();
 593:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 594:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 595:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** OSAL_IRQ_HANDLER(STM32_I2C4_ERROR_HANDLER) {
 596:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   uint32_t isr = I2CD4.i2c->ISR;
 597:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 598:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_PROLOGUE();
 599:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 600:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Clearing IRQ bits.*/
 601:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD4.i2c->ICR = isr & I2C_ERROR_MASK;
 602:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 603:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2c_lld_serve_error_interrupt(&I2CD4, isr);
 604:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 605:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   OSAL_IRQ_EPILOGUE();
 606:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 607:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 608:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 609:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #error "I2C4 interrupt handlers not defined"
 610:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 611:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif /* STM32_I2C_USE_I2C4 */
 612:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 613:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /*===========================================================================*/
 614:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /* Driver exported functions.                                                */
 615:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /*===========================================================================*/
 616:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 617:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /**
 618:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @brief   Low level I2C driver initialization.
 619:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 620:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @notapi
 621:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  */
 622:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** void i2c_lld_init(void) {
 580              		.loc 1 622 0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 0
 583              		@ frame_needed = 0, uses_anonymous_args = 0
 584 0000 10B5     		push	{r4, lr}
 585              		.cfi_def_cfa_offset 8
 586              		.cfi_offset 4, -8
 587              		.cfi_offset 14, -4
 623:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 624:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C1
 625:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2cObjectInit(&I2CD1);
 588              		.loc 1 625 0
 589 0002 064C     		ldr	r4, .L47
 590 0004 2046     		mov	r0, r4
 591 0006 FFF7FEFF 		bl	i2cObjectInit
 592              	.LVL34:
 626:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD1.thread = NULL;
 593              		.loc 1 626 0
 594 000a 0023     		movs	r3, #0
 595 000c E361     		str	r3, [r4, #28]
 627:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD1.i2c    = I2C1;
 596              		.loc 1 627 0
 597 000e 044B     		ldr	r3, .L47+4
 598 0010 2363     		str	r3, [r4, #48]
 628:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 629:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 599              		.loc 1 629 0
 600 0012 044B     		ldr	r3, .L47+8
 601 0014 A362     		str	r3, [r4, #40]
 630:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 602              		.loc 1 630 0
 603 0016 143B     		subs	r3, r3, #20
 604 0018 E362     		str	r3, [r4, #44]
 631:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 632:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif /* STM32_I2C_USE_I2C1 */
 633:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 634:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C2
 635:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2cObjectInit(&I2CD2);
 636:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD2.thread = NULL;
 637:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD2.i2c    = I2C2;
 638:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 639:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
 640:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD2.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C2_TX_DMA_STREAM);
 641:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 642:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif /* STM32_I2C_USE_I2C2 */
 643:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 644:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C3
 645:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2cObjectInit(&I2CD3);
 646:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD3.thread = NULL;
 647:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD3.i2c    = I2C3;
 648:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 649:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD3.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C3_RX_DMA_STREAM);
 650:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD3.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C3_TX_DMA_STREAM);
 651:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 652:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif /* STM32_I2C_USE_I2C3 */
 653:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 654:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C4
 655:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2cObjectInit(&I2CD4);
 656:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD4.thread = NULL;
 657:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD4.i2c    = I2C4;
 658:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 659:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD4.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C4_RX_DMA_STREAM);
 660:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2CD4.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C4_TX_DMA_STREAM);
 661:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 662:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif /* STM32_I2C_USE_I2C4 */
 663:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 605              		.loc 1 663 0
 606 001a 10BD     		pop	{r4, pc}
 607              	.L48:
 608              		.align	2
 609              	.L47:
 610 001c 00000000 		.word	.LANCHOR0
 611 0020 00540040 		.word	1073763328
 612 0024 78000000 		.word	_stm32_dma_streams+120
 613              		.cfi_endproc
 614              	.LFE287:
 616              		.section	.text.i2c_lld_start,"ax",%progbits
 617              		.align	1
 618              		.global	i2c_lld_start
 619              		.syntax unified
 620              		.thumb
 621              		.thumb_func
 622              		.fpu softvfp
 624              	i2c_lld_start:
 625              	.LFB288:
 664:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 665:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /**
 666:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @brief   Configures and activates the I2C peripheral.
 667:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 668:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] i2cp      pointer to the @p I2CDriver object
 669:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 670:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @notapi
 671:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  */
 672:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** void i2c_lld_start(I2CDriver *i2cp) {
 626              		.loc 1 672 0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 0
 629              		@ frame_needed = 0, uses_anonymous_args = 0
 630              	.LVL35:
 631 0000 70B5     		push	{r4, r5, r6, lr}
 632              		.cfi_def_cfa_offset 16
 633              		.cfi_offset 4, -16
 634              		.cfi_offset 5, -12
 635              		.cfi_offset 6, -8
 636              		.cfi_offset 14, -4
 673:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2C_TypeDef *dp = i2cp->i2c;
 637              		.loc 1 673 0
 638 0002 056B     		ldr	r5, [r0, #48]
 639              	.LVL36:
 674:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 675:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Make sure I2C peripheral is disabled */
 676:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dp->CR1 &= ~I2C_CR1_PE;
 640              		.loc 1 676 0
 641 0004 2B68     		ldr	r3, [r5]
 642 0006 23F00103 		bic	r3, r3, #1
 643 000a 2B60     		str	r3, [r5]
 677:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 678:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* If in stopped state then enables the I2C and DMA clocks.*/
 679:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (i2cp->state == I2C_STOP) {
 644              		.loc 1 679 0
 645 000c 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 646 000e 012B     		cmp	r3, #1
 672:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2C_TypeDef *dp = i2cp->i2c;
 647              		.loc 1 672 0
 648 0010 0446     		mov	r4, r0
 649              		.loc 1 679 0
 650 0012 2DD1     		bne	.L51
 680:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 681:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 682:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     /* Common DMA modes.*/
 683:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2cp->txdmamode = DMAMODE_COMMON | STM32_DMA_CR_DIR_M2P;
 684:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2cp->rxdmamode = DMAMODE_COMMON | STM32_DMA_CR_DIR_P2M;
 651              		.loc 1 684 0
 652 0014 8A23     		movs	r3, #138
 653 0016 9A22     		movs	r2, #154
 654 0018 C0E90832 		strd	r3, r2, [r0, #32]
 685:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 686:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 687:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C1
 688:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     if (&I2CD1 == i2cp) {
 655              		.loc 1 688 0
 656 001c 204B     		ldr	r3, .L53
 657 001e 9842     		cmp	r0, r3
 658 0020 26D1     		bne	.L51
 689:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 690:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       rccResetI2C1();
 659              		.loc 1 690 0
 660 0022 204B     		ldr	r3, .L53+4
 661 0024 1A69     		ldr	r2, [r3, #16]
 662 0026 0026     		movs	r6, #0
 663 0028 42F40012 		orr	r2, r2, #2097152
 664 002c 1A61     		str	r2, [r3, #16]
 665 002e 1E61     		str	r6, [r3, #16]
 691:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       rccEnableI2C1(FALSE);
 666              		.loc 1 691 0
 667 0030 DA69     		ldr	r2, [r3, #28]
 668 0032 42F40012 		orr	r2, r2, #2097152
 669 0036 DA61     		str	r2, [r3, #28]
 670              	.LBB325:
 692:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 693:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       {
 694:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         bool b;
 695:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 696:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         b = dmaStreamAllocate(i2cp->dmarx,
 671              		.loc 1 696 0
 672 0038 0A21     		movs	r1, #10
 673 003a 0346     		mov	r3, r0
 674 003c 3246     		mov	r2, r6
 675 003e 806A     		ldr	r0, [r0, #40]
 676              	.LVL37:
 677 0040 FFF7FEFF 		bl	dmaStreamAllocate
 678              	.LVL38:
 697:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               STM32_I2C_I2C1_IRQ_PRIORITY,
 698:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               NULL,
 699:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               (void *)i2cp);
 700:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         osalDbgAssert(!b, "stream already allocated");
 701:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         b = dmaStreamAllocate(i2cp->dmatx,
 679              		.loc 1 701 0
 680 0044 2346     		mov	r3, r4
 681 0046 3246     		mov	r2, r6
 682 0048 0A21     		movs	r1, #10
 683 004a E06A     		ldr	r0, [r4, #44]
 684 004c FFF7FEFF 		bl	dmaStreamAllocate
 685              	.LVL39:
 702:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               STM32_I2C_I2C1_IRQ_PRIORITY,
 703:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               NULL,
 704:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               (void *)i2cp);
 705:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         osalDbgAssert(!b, "stream already allocated");
 706:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 707:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 686              		.loc 1 707 0
 687 0050 236A     		ldr	r3, [r4, #32]
 688 0052 43F48053 		orr	r3, r3, #4096
 689 0056 2362     		str	r3, [r4, #32]
 708:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                            STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
 709:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 690              		.loc 1 709 0
 691 0058 636A     		ldr	r3, [r4, #36]
 692              	.LBE325:
 710:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                            STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
 711:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       }
 712:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif /* STM32_I2C_USE_DMA == TRUE */
 713:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 714:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if defined(STM32_I2C1_GLOBAL_NUMBER) || defined(__DOXYGEN__)
 715:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicEnableVector(STM32_I2C1_GLOBAL_NUMBER, STM32_I2C_I2C1_IRQ_PRIORITY);
 716:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #elif defined(STM32_I2C1_EVENT_NUMBER) && defined(STM32_I2C1_ERROR_NUMBER)
 717:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicEnableVector(STM32_I2C1_EVENT_NUMBER, STM32_I2C_I2C1_IRQ_PRIORITY);
 693              		.loc 1 717 0
 694 005a 0A21     		movs	r1, #10
 695              	.LBB326:
 709:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                            STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
 696              		.loc 1 709 0
 697 005c 43F48053 		orr	r3, r3, #4096
 698              	.LBE326:
 699              		.loc 1 717 0
 700 0060 1F20     		movs	r0, #31
 701              	.LBB327:
 709:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                            STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
 702              		.loc 1 709 0
 703 0062 6362     		str	r3, [r4, #36]
 704              	.LBE327:
 705              		.loc 1 717 0
 706 0064 FFF7FEFF 		bl	nvicEnableVector
 707              	.LVL40:
 718:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicEnableVector(STM32_I2C1_ERROR_NUMBER, STM32_I2C_I2C1_IRQ_PRIORITY);
 708              		.loc 1 718 0
 709 0068 0A21     		movs	r1, #10
 710 006a 2020     		movs	r0, #32
 711 006c FFF7FEFF 		bl	nvicEnableVector
 712              	.LVL41:
 713              	.L51:
 719:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 720:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #error "I2C1 interrupt numbers not defined"
 721:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 722:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 723:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif /* STM32_I2C_USE_I2C1 */
 724:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 725:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C2
 726:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     if (&I2CD2 == i2cp) {
 727:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 728:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       rccResetI2C2();
 729:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       rccEnableI2C2(FALSE);
 730:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 731:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       {
 732:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         bool b;
 733:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 734:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         b = dmaStreamAllocate(i2cp->dmarx,
 735:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               STM32_I2C_I2C2_IRQ_PRIORITY,
 736:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               NULL,
 737:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               (void *)i2cp);
 738:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         osalDbgAssert(!b, "stream already allocated");
 739:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         b = dmaStreamAllocate(i2cp->dmatx,
 740:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               STM32_I2C_I2C2_IRQ_PRIORITY,
 741:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               NULL,
 742:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               (void *)i2cp);
 743:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         osalDbgAssert(!b, "stream already allocated");
 744:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 745:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C2_RX_DMA_CHANNEL) |
 746:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                            STM32_DMA_CR_PL(STM32_I2C_I2C2_DMA_PRIORITY);
 747:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C2_TX_DMA_CHANNEL) |
 748:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                            STM32_DMA_CR_PL(STM32_I2C_I2C2_DMA_PRIORITY);
 749:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       }
 750:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif /*STM32_I2C_USE_DMA == TRUE */
 751:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 752:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if defined(STM32_I2C2_GLOBAL_NUMBER) || defined(__DOXYGEN__)
 753:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicEnableVector(STM32_I2C2_GLOBAL_NUMBER, STM32_I2C_I2C2_IRQ_PRIORITY);
 754:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #elif defined(STM32_I2C2_EVENT_NUMBER) && defined(STM32_I2C2_ERROR_NUMBER)
 755:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicEnableVector(STM32_I2C2_EVENT_NUMBER, STM32_I2C_I2C2_IRQ_PRIORITY);
 756:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicEnableVector(STM32_I2C2_ERROR_NUMBER, STM32_I2C_I2C2_IRQ_PRIORITY);
 757:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 758:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #error "I2C2 interrupt numbers not defined"
 759:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 760:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 761:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif /* STM32_I2C_USE_I2C2 */
 762:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 763:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C3
 764:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     if (&I2CD3 == i2cp) {
 765:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 766:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       rccResetI2C3();
 767:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       rccEnableI2C3(FALSE);
 768:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 769:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       {
 770:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         bool b;
 771:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 772:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         b = dmaStreamAllocate(i2cp->dmarx,
 773:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               STM32_I2C_I2C3_IRQ_PRIORITY,
 774:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               NULL,
 775:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               (void *)i2cp);
 776:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         osalDbgAssert(!b, "stream already allocated");
 777:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         b = dmaStreamAllocate(i2cp->dmatx,
 778:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               STM32_I2C_I2C3_IRQ_PRIORITY,
 779:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               NULL,
 780:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               (void *)i2cp);
 781:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         osalDbgAssert(!b, "stream already allocated");
 782:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 783:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C3_RX_DMA_CHANNEL) |
 784:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                            STM32_DMA_CR_PL(STM32_I2C_I2C3_DMA_PRIORITY);
 785:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C3_TX_DMA_CHANNEL) |
 786:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                            STM32_DMA_CR_PL(STM32_I2C_I2C3_DMA_PRIORITY);
 787:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       }
 788:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif /*STM32_I2C_USE_DMA == TRUE */
 789:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 790:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if defined(STM32_I2C3_GLOBAL_NUMBER) || defined(__DOXYGEN__)
 791:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicEnableVector(STM32_I2C3_GLOBAL_NUMBER, STM32_I2C_I2C3_IRQ_PRIORITY);
 792:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #elif defined(STM32_I2C3_EVENT_NUMBER) && defined(STM32_I2C3_ERROR_NUMBER)
 793:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicEnableVector(STM32_I2C3_EVENT_NUMBER, STM32_I2C_I2C3_IRQ_PRIORITY);
 794:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicEnableVector(STM32_I2C3_ERROR_NUMBER, STM32_I2C_I2C3_IRQ_PRIORITY);
 795:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 796:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #error "I2C3 interrupt numbers not defined"
 797:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 798:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 799:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif /* STM32_I2C_USE_I2C3 */
 800:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 801:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C4
 802:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     if (&I2CD4 == i2cp) {
 803:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 804:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       rccResetI2C4();
 805:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       rccEnableI2C4(FALSE);
 806:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 807:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       {
 808:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         bool b;
 809:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 810:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         b = dmaStreamAllocate(i2cp->dmarx,
 811:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               STM32_I2C_I2C4_IRQ_PRIORITY,
 812:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               NULL,
 813:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               (void *)i2cp);
 814:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         osalDbgAssert(!b, "stream already allocated");
 815:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         b = dmaStreamAllocate(i2cp->dmatx,
 816:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               STM32_I2C_I2C4_IRQ_PRIORITY,
 817:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               NULL,
 818:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                               (void *)i2cp);
 819:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         osalDbgAssert(!b, "stream already allocated");
 820:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 821:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C4_RX_DMA_CHANNEL) |
 822:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                            STM32_DMA_CR_PL(STM32_I2C_I2C4_DMA_PRIORITY);
 823:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****         i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C4_TX_DMA_CHANNEL) |
 824:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                            STM32_DMA_CR_PL(STM32_I2C_I2C4_DMA_PRIORITY);
 825:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       }
 826:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif /*STM32_I2C_USE_DMA == TRUE */
 827:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 828:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if defined(STM32_I2C4_GLOBAL_NUMBER) || defined(__DOXYGEN__)
 829:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicEnableVector(STM32_I2C4_GLOBAL_NUMBER, STM32_I2C_I2C4_IRQ_PRIORITY);
 830:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #elif defined(STM32_I2C4_EVENT_NUMBER) && defined(STM32_I2C4_ERROR_NUMBER)
 831:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicEnableVector(STM32_I2C4_EVENT_NUMBER, STM32_I2C_I2C4_IRQ_PRIORITY);
 832:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicEnableVector(STM32_I2C4_ERROR_NUMBER, STM32_I2C_I2C4_IRQ_PRIORITY);
 833:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 834:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #error "I2C4 interrupt numbers not defined"
 835:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 836:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 837:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif /* STM32_I2C_USE_I2C4 */
 838:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
 839:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 840:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 841:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* I2C registers pointed by the DMA.*/
 842:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamSetPeripheral(i2cp->dmarx, &dp->RXDR);
 714              		.loc 1 842 0
 715 0070 A36A     		ldr	r3, [r4, #40]
 716 0072 5B68     		ldr	r3, [r3, #4]
 717 0074 05F12402 		add	r2, r5, #36
 718 0078 9A60     		str	r2, [r3, #8]
 843:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamSetPeripheral(i2cp->dmatx, &dp->TXDR);
 719              		.loc 1 843 0
 720 007a E36A     		ldr	r3, [r4, #44]
 721 007c 5B68     		ldr	r3, [r3, #4]
 722 007e 05F12802 		add	r2, r5, #40
 723 0082 9A60     		str	r2, [r3, #8]
 844:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 845:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 846:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Reset i2c peripheral, the TCIE bit will be handled separately.*/
 847:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dp->CR1 = i2cp->config->cr1 |
 724              		.loc 1 847 0
 725 0084 6268     		ldr	r2, [r4, #4]
 848:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 849:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****             I2C_CR1_TXDMAEN | I2C_CR1_RXDMAEN | /* Enable only if using DMA */
 850:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 851:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****             I2C_CR1_ERRIE | I2C_CR1_NACKIE;
 726              		.loc 1 851 0
 727 0086 5368     		ldr	r3, [r2, #4]
 728 0088 43F44043 		orr	r3, r3, #49152
 729 008c 43F09003 		orr	r3, r3, #144
 847:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 730              		.loc 1 847 0
 731 0090 2B60     		str	r3, [r5]
 852:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 853:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Setup I2C parameters.*/
 854:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dp->TIMINGR = i2cp->config->timingr;
 732              		.loc 1 854 0
 733 0092 1368     		ldr	r3, [r2]
 734 0094 2B61     		str	r3, [r5, #16]
 855:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 856:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Ready to go.*/
 857:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dp->CR1 |= I2C_CR1_PE;
 735              		.loc 1 857 0
 736 0096 2B68     		ldr	r3, [r5]
 737 0098 43F00103 		orr	r3, r3, #1
 738 009c 2B60     		str	r3, [r5]
 858:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 739              		.loc 1 858 0
 740 009e 70BD     		pop	{r4, r5, r6, pc}
 741              	.LVL42:
 742              	.L54:
 743              		.align	2
 744              	.L53:
 745 00a0 00000000 		.word	.LANCHOR0
 746 00a4 00100240 		.word	1073876992
 747              		.cfi_endproc
 748              	.LFE288:
 750              		.section	.text.i2c_lld_stop,"ax",%progbits
 751              		.align	1
 752              		.global	i2c_lld_stop
 753              		.syntax unified
 754              		.thumb
 755              		.thumb_func
 756              		.fpu softvfp
 758              	i2c_lld_stop:
 759              	.LFB289:
 859:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 860:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /**
 861:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @brief   Deactivates the I2C peripheral.
 862:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 863:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] i2cp      pointer to the @p I2CDriver object
 864:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 865:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @notapi
 866:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  */
 867:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** void i2c_lld_stop(I2CDriver *i2cp) {
 760              		.loc 1 867 0
 761              		.cfi_startproc
 762              		@ args = 0, pretend = 0, frame = 0
 763              		@ frame_needed = 0, uses_anonymous_args = 0
 764              	.LVL43:
 765 0000 38B5     		push	{r3, r4, r5, lr}
 766              		.cfi_def_cfa_offset 16
 767              		.cfi_offset 3, -16
 768              		.cfi_offset 4, -12
 769              		.cfi_offset 5, -8
 770              		.cfi_offset 14, -4
 868:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 869:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* If not in stopped state then disables the I2C clock.*/
 870:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (i2cp->state != I2C_STOP) {
 771              		.loc 1 870 0
 772 0002 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 773 0004 012B     		cmp	r3, #1
 867:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 774              		.loc 1 867 0
 775 0006 0446     		mov	r4, r0
 776              		.loc 1 870 0
 777 0008 37D0     		beq	.L55
 778              	.LVL44:
 779              	.LBB330:
 780              	.LBB331:
 207:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 781              		.loc 1 207 0
 782 000a 036B     		ldr	r3, [r0, #48]
 783              	.LVL45:
 209:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     /* Stops the I2C peripheral.*/
 784              		.loc 1 209 0
 785 000c 1A68     		ldr	r2, [r3]
 786 000e D107     		lsls	r1, r2, #31
 787 0010 0AD5     		bpl	.L58
 788              	.L60:
 213:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dp->CR1 |= I2C_CR1_PE;
 789              		.loc 1 213 0
 790 0012 1A68     		ldr	r2, [r3]
 791 0014 22F00102 		bic	r2, r2, #1
 792 0018 1A60     		str	r2, [r3]
 212:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       dp->CR1 &= ~I2C_CR1_PE;
 793              		.loc 1 212 0
 794 001a 1A68     		ldr	r2, [r3]
 795 001c D207     		lsls	r2, r2, #31
 796 001e F8D4     		bmi	.L60
 214:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
 797              		.loc 1 214 0
 798 0020 1A68     		ldr	r2, [r3]
 799 0022 42F00102 		orr	r2, r2, #1
 800 0026 1A60     		str	r2, [r3]
 801              	.L58:
 219:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamDisable(i2cp->dmarx);
 802              		.loc 1 219 0
 803 0028 E06A     		ldr	r0, [r4, #44]
 804              	.LVL46:
 805 002a 4268     		ldr	r2, [r0, #4]
 806 002c 0168     		ldr	r1, [r0]
 807 002e 1368     		ldr	r3, [r2]
 808              	.LVL47:
 809 0030 23F00F03 		bic	r3, r3, #15
 810 0034 1360     		str	r3, [r2]
 811 0036 027C     		ldrb	r2, [r0, #16]	@ zero_extendqisi2
 812 0038 0E23     		movs	r3, #14
 813 003a 03FA02F2 		lsl	r2, r3, r2
 814 003e 4A60     		str	r2, [r1, #4]
 220:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 815              		.loc 1 220 0
 816 0040 A26A     		ldr	r2, [r4, #40]
 817 0042 5568     		ldr	r5, [r2, #4]
 818 0044 2968     		ldr	r1, [r5]
 819 0046 21F00F01 		bic	r1, r1, #15
 820 004a 2960     		str	r1, [r5]
 821 004c 1168     		ldr	r1, [r2]
 822 004e 127C     		ldrb	r2, [r2, #16]	@ zero_extendqisi2
 823 0050 9340     		lsls	r3, r3, r2
 824 0052 4B60     		str	r3, [r1, #4]
 825              	.LVL48:
 826              	.LBE331:
 827              	.LBE330:
 871:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 872:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     /* I2C disable.*/
 873:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     i2c_lld_abort_operation(i2cp);
 874:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 875:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dmaStreamRelease(i2cp->dmatx);
 828              		.loc 1 875 0
 829 0054 FFF7FEFF 		bl	dmaStreamRelease
 830              	.LVL49:
 876:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dmaStreamRelease(i2cp->dmarx);
 831              		.loc 1 876 0
 832 0058 A06A     		ldr	r0, [r4, #40]
 833 005a FFF7FEFF 		bl	dmaStreamRelease
 834              	.LVL50:
 877:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 878:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 879:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C1
 880:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     if (&I2CD1 == i2cp) {
 835              		.loc 1 880 0
 836 005e 074B     		ldr	r3, .L65
 837 0060 9C42     		cmp	r4, r3
 838 0062 0AD1     		bne	.L55
 881:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if defined(STM32_I2C1_GLOBAL_NUMBER) || defined(__DOXYGEN__)
 882:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicDisableVector(STM32_I2C1_GLOBAL_NUMBER);
 883:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #elif defined(STM32_I2C1_EVENT_NUMBER) && defined(STM32_I2C1_ERROR_NUMBER)
 884:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicDisableVector(STM32_I2C1_EVENT_NUMBER);
 839              		.loc 1 884 0
 840 0064 1F20     		movs	r0, #31
 841 0066 FFF7FEFF 		bl	nvicDisableVector
 842              	.LVL51:
 885:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicDisableVector(STM32_I2C1_ERROR_NUMBER);
 843              		.loc 1 885 0
 844 006a 2020     		movs	r0, #32
 845 006c FFF7FEFF 		bl	nvicDisableVector
 846              	.LVL52:
 886:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 887:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #error "I2C1 interrupt numbers not defined"
 888:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 889:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 890:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       rccDisableI2C1(FALSE);
 847              		.loc 1 890 0
 848 0070 034A     		ldr	r2, .L65+4
 849 0072 D369     		ldr	r3, [r2, #28]
 850 0074 23F40013 		bic	r3, r3, #2097152
 851 0078 D361     		str	r3, [r2, #28]
 852              	.L55:
 891:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 892:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 893:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 894:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C2
 895:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     if (&I2CD2 == i2cp) {
 896:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if defined(STM32_I2C2_GLOBAL_NUMBER) || defined(__DOXYGEN__)
 897:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicDisableVector(STM32_I2C2_GLOBAL_NUMBER);
 898:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #elif defined(STM32_I2C2_EVENT_NUMBER) && defined(STM32_I2C2_ERROR_NUMBER)
 899:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicDisableVector(STM32_I2C2_EVENT_NUMBER);
 900:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicDisableVector(STM32_I2C2_ERROR_NUMBER);
 901:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 902:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #error "I2C2 interrupt numbers not defined"
 903:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 904:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 905:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       rccDisableI2C2(FALSE);
 906:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 907:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 908:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 909:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C3
 910:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     if (&I2CD3 == i2cp) {
 911:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if defined(STM32_I2C3_GLOBAL_NUMBER) || defined(__DOXYGEN__)
 912:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicDisableVector(STM32_I2C3_GLOBAL_NUMBER);
 913:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #elif defined(STM32_I2C3_EVENT_NUMBER) && defined(STM32_I2C3_ERROR_NUMBER)
 914:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicDisableVector(STM32_I2C3_EVENT_NUMBER);
 915:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicDisableVector(STM32_I2C3_ERROR_NUMBER);
 916:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 917:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #error "I2C3 interrupt numbers not defined"
 918:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 919:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 920:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       rccDisableI2C3(FALSE);
 921:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 922:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 923:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 924:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_I2C4
 925:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     if (&I2CD4 == i2cp) {
 926:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if defined(STM32_I2C4_GLOBAL_NUMBER) || defined(__DOXYGEN__)
 927:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicDisableVector(STM32_I2C4_GLOBAL_NUMBER);
 928:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #elif defined(STM32_I2C4_EVENT_NUMBER) && defined(STM32_I2C4_ERROR_NUMBER)
 929:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicDisableVector(STM32_I2C4_EVENT_NUMBER);
 930:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       nvicDisableVector(STM32_I2C4_ERROR_NUMBER);
 931:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 932:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #error "I2C4 interrupt numbers not defined"
 933:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 934:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 935:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       rccDisableI2C4(FALSE);
 936:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 937:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 938:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
 939:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 853              		.loc 1 939 0
 854 007a 38BD     		pop	{r3, r4, r5, pc}
 855              	.LVL53:
 856              	.L66:
 857              		.align	2
 858              	.L65:
 859 007c 00000000 		.word	.LANCHOR0
 860 0080 00100240 		.word	1073876992
 861              		.cfi_endproc
 862              	.LFE289:
 864              		.section	.text.i2c_lld_master_receive_timeout,"ax",%progbits
 865              		.align	1
 866              		.global	i2c_lld_master_receive_timeout
 867              		.syntax unified
 868              		.thumb
 869              		.thumb_func
 870              		.fpu softvfp
 872              	i2c_lld_master_receive_timeout:
 873              	.LFB290:
 940:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 941:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /**
 942:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @brief   Receives data via the I2C bus as master.
 943:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 944:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] i2cp      pointer to the @p I2CDriver object
 945:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] addr      slave device address
 946:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[out] rxbuf    pointer to the receive buffer
 947:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] rxbytes   number of bytes to be received
 948:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 949:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *                      the following special values are allowed:
 950:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *                      - @a TIME_INFINITE no timeout.
 951:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *                      .
 952:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @return              The operation status.
 953:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @retval MSG_OK       if the function succeeded.
 954:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @retval MSG_RESET    if one or more I2C errors occurred, the errors can
 955:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *                      be retrieved using @p i2cGetErrors().
 956:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @retval MSG_TIMEOUT  if a timeout occurred before operation end. <b>After a
 957:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *                      timeout the driver must be stopped and restarted
 958:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *                      because the bus is in an uncertain state</b>.
 959:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
 960:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @notapi
 961:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  */
 962:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** msg_t i2c_lld_master_receive_timeout(I2CDriver *i2cp, i2caddr_t addr,
 963:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                                      uint8_t *rxbuf, size_t rxbytes,
 964:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                                      systime_t timeout) {
 874              		.loc 1 964 0
 875              		.cfi_startproc
 876              		@ args = 4, pretend = 0, frame = 0
 877              		@ frame_needed = 0, uses_anonymous_args = 0
 878              	.LVL54:
 879 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 880              		.cfi_def_cfa_offset 24
 881              		.cfi_offset 3, -24
 882              		.cfi_offset 4, -20
 883              		.cfi_offset 5, -16
 884              		.cfi_offset 6, -12
 885              		.cfi_offset 7, -8
 886              		.cfi_offset 14, -4
 887              		.loc 1 964 0
 888 0002 0446     		mov	r4, r0
 965:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   msg_t msg;
 966:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2C_TypeDef *dp = i2cp->i2c;
 889              		.loc 1 966 0
 890 0004 056B     		ldr	r5, [r0, #48]
 891              	.LVL55:
 967:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   systime_t start, end;
 968:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 969:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Resetting error flags for this transfer.*/
 970:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2cp->errors = I2C_NO_ERROR;
 892              		.loc 1 970 0
 893 0006 0020     		movs	r0, #0
 894              	.LVL56:
 895 0008 A060     		str	r0, [r4, #8]
 896              	.LVL57:
 897              	.LBB366:
 898              	.LBB367:
 899              	.LBB368:
 900              	.LBB369:
 901              	.LBB370:
 902              	.LBB371:
 903              		.loc 2 264 0
 904              		.syntax unified
 905              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 906 000a 80F31188 		MSR basepri, r0
 907              	@ 0 "" 2
 908              	.LVL58:
 909              		.thumb
 910              		.syntax unified
 911              	.LBE371:
 912              	.LBE370:
 913              	.LBE369:
 914              	.LBE368:
 915              	.LBE367:
 916              	.LBE366:
 971:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 972:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Releases the lock from high level driver.*/
 973:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   osalSysUnlock();
 974:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 975:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
 976:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* RX DMA setup.*/
 977:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 917              		.loc 1 977 0
 918 000e A66A     		ldr	r6, [r4, #40]
 919 0010 276A     		ldr	r7, [r4, #32]
 920 0012 7668     		ldr	r6, [r6, #4]
 921 0014 3760     		str	r7, [r6]
 978:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 922              		.loc 1 978 0
 923 0016 F260     		str	r2, [r6, #12]
 979:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 924              		.loc 1 979 0
 925 0018 7360     		str	r3, [r6, #4]
 926              	.LBB372:
 927              	.LBB373:
 928              	.LBB374:
 929              	.LBB375:
 930              	.LBB376:
 931              		.file 4 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h"
   1:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*
   2:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
   4:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     you may not use this file except in compliance with the License.
   6:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     You may obtain a copy of the License at
   7:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
   8:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  10:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     Unless required by applicable law or agreed to in writing, software
  11:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     See the License for the specific language governing permissions and
  14:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     limitations under the License.
  15:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** */
  16:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  17:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  18:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @file    TIMv1/hal_st_lld.h
  19:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   ST Driver subsystem low level driver header.
  20:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @details This header is designed to be include-able without having to
  21:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *          include other files from the HAL.
  22:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *
  23:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @addtogroup ST
  24:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @{
  25:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  26:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  27:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #ifndef HAL_ST_LLD_H
  28:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define HAL_ST_LLD_H
  29:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  30:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #include "mcuconf.h"
  31:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #include "stm32_registry.h"
  32:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #include "stm32_tim.h"
  33:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  34:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  35:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver constants.                                                         */
  36:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  37:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  38:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  39:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver pre-compile time settings.                                         */
  40:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  41:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  42:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  43:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @name    Configuration options
  44:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @{
  45:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  46:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  47:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   SysTick timer IRQ priority.
  48:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  49:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !defined(STM32_ST_IRQ_PRIORITY) || defined(__DOXYGEN__)
  50:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_IRQ_PRIORITY               8
  51:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  52:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  53:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  54:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   TIMx unit (by number) to be used for free running operations.
  55:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @note    You must select a 32 bits timer if a 32 bits @p systick_t type
  56:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *          is required.
  57:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @note    Timers 2, 3, 4 and 5 are supported.
  58:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  59:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !defined(STM32_ST_USE_TIMER) || defined(__DOXYGEN__)
  60:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_USE_TIMER                  2
  61:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  62:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /** @} */
  63:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  64:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  65:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Derived constants and error checks.                                       */
  66:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  67:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  68:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if STM32_ST_USE_TIMER == 2
  69:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM2
  70:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM2 not present"
  71:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  72:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM2
  73:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  74:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 3
  75:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM3
  76:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM3 not present"
  77:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  78:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM3
  79:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  80:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 4
  81:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM4
  82:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM4 not present"
  83:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  84:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM4
  85:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  86:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 5
  87:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM5
  88:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM5 not present"
  89:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  90:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM5
  91:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  92:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 21
  93:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM21
  94:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM21 not present"
  95:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  96:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM21
  97:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  98:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 22
  99:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM22
 100:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM22 not present"
 101:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 102:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM22
 103:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 104:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #else
 105:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "STM32_ST_USE_TIMER specifies an unsupported timer"
 106:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 107:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 108:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 109:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver data structures and types.                                         */
 110:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 111:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 112:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 113:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver macros.                                                            */
 114:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 115:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 116:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 117:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* External declarations.                                                    */
 118:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 119:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 120:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
 121:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** extern "C" {
 122:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 123:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****   void st_lld_init(void);
 124:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
 125:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** }
 126:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 127:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 128:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 129:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver inline functions.                                                  */
 130:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 131:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 132:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
 133:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   Returns the time counter value.
 134:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *
 135:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @return              The counter value.
 136:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *
 137:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @notapi
 138:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
 139:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** static inline systime_t st_lld_get_counter(void) {
 140:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 141:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****   return (systime_t)STM32_ST_TIM->CNT;
 932              		.loc 4 141 0
 933 001a 4FF08043 		mov	r3, #1073741824
 934              	.LVL59:
 935              	.LBE376:
 936              	.LBE375:
 937              	.LBE374:
 938              	.LBE373:
 939              	.LBE372:
 940              	.LBB381:
 941              	.LBB382:
 942              	.LBB383:
 943              	.LBB384:
 944              	.LBB385:
 945              		.loc 2 264 0
 946 001e 2027     		movs	r7, #32
 947              	.LBE385:
 948              	.LBE384:
 949              	.LBE383:
 950              	.LBE382:
 951              	.LBE381:
 952              	.LBB390:
 953              	.LBB380:
 954              	.LBB379:
 955              	.LBB378:
 956              	.LBB377:
 957              		.loc 4 141 0
 958 0020 5E6A     		ldr	r6, [r3, #36]
 959              	.LVL60:
 960              	.LBE377:
 961              	.LBE378:
 962              	.LBE379:
 963              	.LBE380:
 964              	.LBE390:
 980:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
 981:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2cp->rxptr   = rxbuf;
 982:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2cp->rxbytes = rxbytes;
 983:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
 984:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 985:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Calculating the time window for the timeout on the busy bus condition.*/
 986:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   start = osalOsGetSystemTimeX();
 987:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   end = start + OSAL_MS2ST(STM32_I2C_BUSY_TIMEOUT);
 988:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 989:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Waits until BUSY flag is reset or, alternatively, for a timeout
 990:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****      condition.*/
 991:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   while (true) {
 992:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     osalSysLock();
 993:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 994:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     /* If the bus is not busy then the operation can continue, note, the
 995:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****        loop is exited in the locked state.*/
 996:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     if ((dp->ISR & I2C_ISR_BUSY) == 0)
 997:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       break;
 998:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 999:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     /* If the system time went outside the allowed window then a timeout
1000:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****        condition is returned.*/
1001:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end)) {
 965              		.loc 1 1001 0
 966 0022 41F2873C 		movw	ip, #4999
 967              	.LVL61:
 968              	.L70:
 969              	.LBB391:
 970              	.LBB389:
 971              	.LBB388:
 972              	.LBB387:
 973              	.LBB386:
 974              		.loc 2 264 0
 975              		.syntax unified
 976              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 977 0026 87F31188 		MSR basepri, r7
 978              	@ 0 "" 2
 979              	.LVL62:
 980              		.thumb
 981              		.syntax unified
 982              	.LBE386:
 983              	.LBE387:
 984              	.LBE388:
 985              	.LBE389:
 986              	.LBE391:
 996:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       break;
 987              		.loc 1 996 0
 988 002a AA69     		ldr	r2, [r5, #24]
 989 002c 1204     		lsls	r2, r2, #16
 990 002e 06D5     		bpl	.L68
 991              	.LBB392:
 992              	.LBB393:
 993              	.LBB394:
 994              	.LBB395:
 995              	.LBB396:
 996              		.loc 4 141 0
 997 0030 5A6A     		ldr	r2, [r3, #36]
 998              	.LBE396:
 999              	.LBE395:
 1000              	.LBE394:
 1001              	.LBE393:
 1002              	.LBE392:
 1003              	.LBB397:
 1004              	.LBB398:
 1005              	.LBB399:
 1006              		.file 5 "./lib/chibios/os/rt/include/chvt.h"
   1:./lib/chibios/os/rt/include/chvt.h **** /*
   2:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chvt.h **** 
   4:./lib/chibios/os/rt/include/chvt.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chvt.h **** 
   6:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chvt.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chvt.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chvt.h **** 
  11:./lib/chibios/os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chvt.h **** 
  16:./lib/chibios/os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chvt.h **** */
  19:./lib/chibios/os/rt/include/chvt.h **** 
  20:./lib/chibios/os/rt/include/chvt.h **** /**
  21:./lib/chibios/os/rt/include/chvt.h ****  * @file    chvt.h
  22:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:./lib/chibios/os/rt/include/chvt.h ****  *
  24:./lib/chibios/os/rt/include/chvt.h ****  * @addtogroup time
  25:./lib/chibios/os/rt/include/chvt.h ****  * @{
  26:./lib/chibios/os/rt/include/chvt.h ****  */
  27:./lib/chibios/os/rt/include/chvt.h **** 
  28:./lib/chibios/os/rt/include/chvt.h **** #ifndef CHVT_H
  29:./lib/chibios/os/rt/include/chvt.h **** #define CHVT_H
  30:./lib/chibios/os/rt/include/chvt.h **** 
  31:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chvt.h **** 
  35:./lib/chibios/os/rt/include/chvt.h **** /**
  36:./lib/chibios/os/rt/include/chvt.h ****  * @name    Special time constants
  37:./lib/chibios/os/rt/include/chvt.h ****  * @{
  38:./lib/chibios/os/rt/include/chvt.h ****  */
  39:./lib/chibios/os/rt/include/chvt.h **** /**
  40:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Zero time specification for some functions with a timeout
  41:./lib/chibios/os/rt/include/chvt.h ****  *          specification.
  42:./lib/chibios/os/rt/include/chvt.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  43:./lib/chibios/os/rt/include/chvt.h ****  *          see the specific function documentation.
  44:./lib/chibios/os/rt/include/chvt.h ****  */
  45:./lib/chibios/os/rt/include/chvt.h **** #define TIME_IMMEDIATE  ((systime_t)0)
  46:./lib/chibios/os/rt/include/chvt.h **** 
  47:./lib/chibios/os/rt/include/chvt.h **** /**
  48:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Infinite time specification for all functions with a timeout
  49:./lib/chibios/os/rt/include/chvt.h ****  *          specification.
  50:./lib/chibios/os/rt/include/chvt.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  51:./lib/chibios/os/rt/include/chvt.h ****  *          see the specific function documentation.
  52:./lib/chibios/os/rt/include/chvt.h ****  */
  53:./lib/chibios/os/rt/include/chvt.h **** #define TIME_INFINITE   ((systime_t)-1)
  54:./lib/chibios/os/rt/include/chvt.h **** 
  55:./lib/chibios/os/rt/include/chvt.h **** /**
  56:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Maximum time constant.
  57:./lib/chibios/os/rt/include/chvt.h ****  */
  58:./lib/chibios/os/rt/include/chvt.h **** #define TIME_MAXIMUM    ((systime_t)-2)
  59:./lib/chibios/os/rt/include/chvt.h **** /** @} */
  60:./lib/chibios/os/rt/include/chvt.h **** 
  61:./lib/chibios/os/rt/include/chvt.h **** /**
  62:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Maximum unsigned integer.
  63:./lib/chibios/os/rt/include/chvt.h ****  */
  64:./lib/chibios/os/rt/include/chvt.h **** #define __UINT_MAX      ((unsigned int)-1)
  65:./lib/chibios/os/rt/include/chvt.h **** 
  66:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  67:./lib/chibios/os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  68:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  69:./lib/chibios/os/rt/include/chvt.h **** 
  70:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  71:./lib/chibios/os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  72:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  73:./lib/chibios/os/rt/include/chvt.h **** 
  74:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32)
  75:./lib/chibios/os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16 or 32"
  76:./lib/chibios/os/rt/include/chvt.h **** #endif
  77:./lib/chibios/os/rt/include/chvt.h **** 
  78:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_FREQUENCY <= 0
  79:./lib/chibios/os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be greater than zero"
  80:./lib/chibios/os/rt/include/chvt.h **** #endif
  81:./lib/chibios/os/rt/include/chvt.h **** 
  82:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  83:./lib/chibios/os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  84:./lib/chibios/os/rt/include/chvt.h ****        "be zero or greater than one"
  85:./lib/chibios/os/rt/include/chvt.h **** #endif
  86:./lib/chibios/os/rt/include/chvt.h **** 
  87:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  88:./lib/chibios/os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  89:./lib/chibios/os/rt/include/chvt.h **** #endif
  90:./lib/chibios/os/rt/include/chvt.h **** 
  91:./lib/chibios/os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  92:./lib/chibios/os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  93:./lib/chibios/os/rt/include/chvt.h **** #endif
  94:./lib/chibios/os/rt/include/chvt.h **** 
  95:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  96:./lib/chibios/os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  97:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
  98:./lib/chibios/os/rt/include/chvt.h **** 
  99:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 100:./lib/chibios/os/rt/include/chvt.h **** /* Module macros.                                                            */
 101:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 102:./lib/chibios/os/rt/include/chvt.h **** 
 103:./lib/chibios/os/rt/include/chvt.h **** /**
 104:./lib/chibios/os/rt/include/chvt.h ****  * @name    Fast time conversion utilities
 105:./lib/chibios/os/rt/include/chvt.h ****  * @{
 106:./lib/chibios/os/rt/include/chvt.h ****  */
 107:./lib/chibios/os/rt/include/chvt.h **** /**
 108:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Seconds to system ticks.
 109:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from seconds to system ticks number.
 110:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 111:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 112:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 113:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 114:./lib/chibios/os/rt/include/chvt.h ****  *
 115:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] sec       number of seconds
 116:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 117:./lib/chibios/os/rt/include/chvt.h ****  *
 118:./lib/chibios/os/rt/include/chvt.h ****  * @api
 119:./lib/chibios/os/rt/include/chvt.h ****  */
 120:./lib/chibios/os/rt/include/chvt.h **** #define S2ST(sec)                                                           \
 121:./lib/chibios/os/rt/include/chvt.h ****   ((systime_t)((uint32_t)(sec) * (uint32_t)CH_CFG_ST_FREQUENCY))
 122:./lib/chibios/os/rt/include/chvt.h **** 
 123:./lib/chibios/os/rt/include/chvt.h **** /**
 124:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Milliseconds to system ticks.
 125:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from milliseconds to system ticks number.
 126:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 127:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 128:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 129:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 130:./lib/chibios/os/rt/include/chvt.h ****  *
 131:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] msec      number of milliseconds
 132:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 133:./lib/chibios/os/rt/include/chvt.h ****  *
 134:./lib/chibios/os/rt/include/chvt.h ****  * @api
 135:./lib/chibios/os/rt/include/chvt.h ****  */
 136:./lib/chibios/os/rt/include/chvt.h **** #define MS2ST(msec)                                                         \
 137:./lib/chibios/os/rt/include/chvt.h ****   ((systime_t)(((((uint32_t)(msec)) *                                       \
 138:./lib/chibios/os/rt/include/chvt.h ****                  ((uint32_t)CH_CFG_ST_FREQUENCY)) + 999UL) / 1000UL))
 139:./lib/chibios/os/rt/include/chvt.h **** 
 140:./lib/chibios/os/rt/include/chvt.h **** /**
 141:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Microseconds to system ticks.
 142:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from microseconds to system ticks number.
 143:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 144:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 145:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 146:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 147:./lib/chibios/os/rt/include/chvt.h ****  *
 148:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] usec      number of microseconds
 149:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 150:./lib/chibios/os/rt/include/chvt.h ****  *
 151:./lib/chibios/os/rt/include/chvt.h ****  * @api
 152:./lib/chibios/os/rt/include/chvt.h ****  */
 153:./lib/chibios/os/rt/include/chvt.h **** #define US2ST(usec)                                                         \
 154:./lib/chibios/os/rt/include/chvt.h ****   ((systime_t)(((((uint32_t)(usec)) *                                       \
 155:./lib/chibios/os/rt/include/chvt.h ****                  ((uint32_t)CH_CFG_ST_FREQUENCY)) + 999999UL) / 1000000UL))
 156:./lib/chibios/os/rt/include/chvt.h **** 
 157:./lib/chibios/os/rt/include/chvt.h **** /**
 158:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to seconds.
 159:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to seconds.
 160:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next second boundary.
 161:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 162:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 163:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 164:./lib/chibios/os/rt/include/chvt.h ****  *
 165:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 166:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of seconds.
 167:./lib/chibios/os/rt/include/chvt.h ****  *
 168:./lib/chibios/os/rt/include/chvt.h ****  * @api
 169:./lib/chibios/os/rt/include/chvt.h ****  */
 170:./lib/chibios/os/rt/include/chvt.h **** #define ST2S(n) (((n) + CH_CFG_ST_FREQUENCY - 1UL) / CH_CFG_ST_FREQUENCY)
 171:./lib/chibios/os/rt/include/chvt.h **** 
 172:./lib/chibios/os/rt/include/chvt.h **** /**
 173:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to milliseconds.
 174:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to milliseconds.
 175:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next millisecond boundary.
 176:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 177:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 178:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 179:./lib/chibios/os/rt/include/chvt.h ****  *
 180:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 181:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of milliseconds.
 182:./lib/chibios/os/rt/include/chvt.h ****  *
 183:./lib/chibios/os/rt/include/chvt.h ****  * @api
 184:./lib/chibios/os/rt/include/chvt.h ****  */
 185:./lib/chibios/os/rt/include/chvt.h **** #define ST2MS(n) (((n) * 1000UL + CH_CFG_ST_FREQUENCY - 1UL) /              \
 186:./lib/chibios/os/rt/include/chvt.h ****                   CH_CFG_ST_FREQUENCY)
 187:./lib/chibios/os/rt/include/chvt.h **** 
 188:./lib/chibios/os/rt/include/chvt.h **** /**
 189:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to microseconds.
 190:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to microseconds.
 191:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next microsecond boundary.
 192:./lib/chibios/os/rt/include/chvt.h ****  * @note    Use of this macro for large values is not secure because
 193:./lib/chibios/os/rt/include/chvt.h ****  *          integer overflows, make sure your value can be correctly
 194:./lib/chibios/os/rt/include/chvt.h ****  *          converted.
 195:./lib/chibios/os/rt/include/chvt.h ****  *
 196:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 197:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of microseconds.
 198:./lib/chibios/os/rt/include/chvt.h ****  *
 199:./lib/chibios/os/rt/include/chvt.h ****  * @api
 200:./lib/chibios/os/rt/include/chvt.h ****  */
 201:./lib/chibios/os/rt/include/chvt.h **** #define ST2US(n) (((n) * 1000000UL + CH_CFG_ST_FREQUENCY - 1UL) /           \
 202:./lib/chibios/os/rt/include/chvt.h ****                   CH_CFG_ST_FREQUENCY)
 203:./lib/chibios/os/rt/include/chvt.h **** /** @} */
 204:./lib/chibios/os/rt/include/chvt.h **** 
 205:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 206:./lib/chibios/os/rt/include/chvt.h **** /* External declarations.                                                    */
 207:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 208:./lib/chibios/os/rt/include/chvt.h **** 
 209:./lib/chibios/os/rt/include/chvt.h **** /*
 210:./lib/chibios/os/rt/include/chvt.h ****  * Virtual Timers APIs.
 211:./lib/chibios/os/rt/include/chvt.h ****  */
 212:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
 213:./lib/chibios/os/rt/include/chvt.h **** extern "C" {
 214:./lib/chibios/os/rt/include/chvt.h **** #endif
 215:./lib/chibios/os/rt/include/chvt.h ****   void _vt_init(void);
 216:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
 217:./lib/chibios/os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
 218:./lib/chibios/os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
 219:./lib/chibios/os/rt/include/chvt.h **** #ifdef __cplusplus
 220:./lib/chibios/os/rt/include/chvt.h **** }
 221:./lib/chibios/os/rt/include/chvt.h **** #endif
 222:./lib/chibios/os/rt/include/chvt.h **** 
 223:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 224:./lib/chibios/os/rt/include/chvt.h **** /* Module inline functions.                                                  */
 225:./lib/chibios/os/rt/include/chvt.h **** /*===========================================================================*/
 226:./lib/chibios/os/rt/include/chvt.h **** 
 227:./lib/chibios/os/rt/include/chvt.h **** /**
 228:./lib/chibios/os/rt/include/chvt.h ****  * @name    Secure time conversion utilities
 229:./lib/chibios/os/rt/include/chvt.h ****  * @{
 230:./lib/chibios/os/rt/include/chvt.h ****  */
 231:./lib/chibios/os/rt/include/chvt.h **** /**
 232:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Seconds to system ticks.
 233:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from seconds to system ticks number.
 234:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 235:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 236:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 237:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 238:./lib/chibios/os/rt/include/chvt.h ****  *
 239:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] sec       number of seconds
 240:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 241:./lib/chibios/os/rt/include/chvt.h ****  *
 242:./lib/chibios/os/rt/include/chvt.h ****  * @api
 243:./lib/chibios/os/rt/include/chvt.h ****  */
 244:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t LL_S2ST(unsigned int sec) {
 245:./lib/chibios/os/rt/include/chvt.h ****   uint64_t ticks = (uint64_t)sec * (uint64_t)CH_CFG_ST_FREQUENCY;
 246:./lib/chibios/os/rt/include/chvt.h **** 
 247:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(ticks <= (uint64_t)TIME_MAXIMUM, "conversion overflow");
 248:./lib/chibios/os/rt/include/chvt.h **** 
 249:./lib/chibios/os/rt/include/chvt.h ****   return (systime_t)ticks;
 250:./lib/chibios/os/rt/include/chvt.h **** }
 251:./lib/chibios/os/rt/include/chvt.h **** 
 252:./lib/chibios/os/rt/include/chvt.h **** /**
 253:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Milliseconds to system ticks.
 254:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from milliseconds to system ticks number.
 255:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 256:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 257:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 258:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 259:./lib/chibios/os/rt/include/chvt.h ****  *
 260:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] msec      number of milliseconds
 261:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 262:./lib/chibios/os/rt/include/chvt.h ****  *
 263:./lib/chibios/os/rt/include/chvt.h ****  * @api
 264:./lib/chibios/os/rt/include/chvt.h ****  */
 265:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t LL_MS2ST(unsigned int msec) {
 266:./lib/chibios/os/rt/include/chvt.h ****   uint64_t ticks = (((uint64_t)msec * (uint64_t)CH_CFG_ST_FREQUENCY) + 999ULL)
 267:./lib/chibios/os/rt/include/chvt.h ****                    / 1000ULL;
 268:./lib/chibios/os/rt/include/chvt.h **** 
 269:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(ticks <= (uint64_t)TIME_MAXIMUM, "conversion overflow");
 270:./lib/chibios/os/rt/include/chvt.h **** 
 271:./lib/chibios/os/rt/include/chvt.h ****   return (systime_t)ticks;
 272:./lib/chibios/os/rt/include/chvt.h **** }
 273:./lib/chibios/os/rt/include/chvt.h **** 
 274:./lib/chibios/os/rt/include/chvt.h **** /**
 275:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Microseconds to system ticks.
 276:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from microseconds to system ticks number.
 277:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded upward to the next tick boundary.
 278:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 279:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 280:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 281:./lib/chibios/os/rt/include/chvt.h ****  *
 282:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] usec      number of microseconds
 283:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of ticks.
 284:./lib/chibios/os/rt/include/chvt.h ****  *
 285:./lib/chibios/os/rt/include/chvt.h ****  * @api
 286:./lib/chibios/os/rt/include/chvt.h ****  */
 287:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t LL_US2ST(unsigned int usec) {
 288:./lib/chibios/os/rt/include/chvt.h ****   uint64_t ticks = (((uint64_t)usec * (uint64_t)CH_CFG_ST_FREQUENCY) + 999999ULL)
 289:./lib/chibios/os/rt/include/chvt.h ****                    / 1000000ULL;
 290:./lib/chibios/os/rt/include/chvt.h **** 
 291:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(ticks <= (uint64_t)TIME_MAXIMUM, "conversion overflow");
 292:./lib/chibios/os/rt/include/chvt.h **** 
 293:./lib/chibios/os/rt/include/chvt.h ****   return (systime_t)ticks;
 294:./lib/chibios/os/rt/include/chvt.h **** }
 295:./lib/chibios/os/rt/include/chvt.h **** 
 296:./lib/chibios/os/rt/include/chvt.h **** /**
 297:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to seconds.
 298:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to seconds.
 299:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next second boundary.
 300:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 301:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 302:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 303:./lib/chibios/os/rt/include/chvt.h ****  *
 304:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 305:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of seconds.
 306:./lib/chibios/os/rt/include/chvt.h ****  *
 307:./lib/chibios/os/rt/include/chvt.h ****  * @api
 308:./lib/chibios/os/rt/include/chvt.h ****  */
 309:./lib/chibios/os/rt/include/chvt.h **** static inline unsigned int LL_ST2S(systime_t n) {
 310:./lib/chibios/os/rt/include/chvt.h ****   uint64_t sec = ((uint64_t)n + (uint64_t)CH_CFG_ST_FREQUENCY - 1ULL)
 311:./lib/chibios/os/rt/include/chvt.h ****                  / (uint64_t)CH_CFG_ST_FREQUENCY;
 312:./lib/chibios/os/rt/include/chvt.h **** 
 313:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(sec < (uint64_t)__UINT_MAX, "conversion overflow");
 314:./lib/chibios/os/rt/include/chvt.h **** 
 315:./lib/chibios/os/rt/include/chvt.h ****   return (unsigned int)sec;
 316:./lib/chibios/os/rt/include/chvt.h **** }
 317:./lib/chibios/os/rt/include/chvt.h **** 
 318:./lib/chibios/os/rt/include/chvt.h **** /**
 319:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to milliseconds.
 320:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to milliseconds.
 321:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next millisecond boundary.
 322:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 323:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 324:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 325:./lib/chibios/os/rt/include/chvt.h ****  *
 326:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 327:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of milliseconds.
 328:./lib/chibios/os/rt/include/chvt.h ****  *
 329:./lib/chibios/os/rt/include/chvt.h ****  * @api
 330:./lib/chibios/os/rt/include/chvt.h ****  */
 331:./lib/chibios/os/rt/include/chvt.h **** static inline unsigned int LL_ST2MS(systime_t n) {
 332:./lib/chibios/os/rt/include/chvt.h ****   uint64_t msec = (((uint64_t)n * 1000ULL) + (uint64_t)CH_CFG_ST_FREQUENCY - 1ULL)
 333:./lib/chibios/os/rt/include/chvt.h ****                    / (uint64_t)CH_CFG_ST_FREQUENCY;
 334:./lib/chibios/os/rt/include/chvt.h **** 
 335:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(msec < (uint64_t)__UINT_MAX, "conversion overflow");
 336:./lib/chibios/os/rt/include/chvt.h **** 
 337:./lib/chibios/os/rt/include/chvt.h ****   return (unsigned int)msec;
 338:./lib/chibios/os/rt/include/chvt.h **** }
 339:./lib/chibios/os/rt/include/chvt.h **** 
 340:./lib/chibios/os/rt/include/chvt.h **** /**
 341:./lib/chibios/os/rt/include/chvt.h ****  * @brief   System ticks to microseconds.
 342:./lib/chibios/os/rt/include/chvt.h ****  * @details Converts from system ticks number to microseconds.
 343:./lib/chibios/os/rt/include/chvt.h ****  * @note    The result is rounded up to the next microsecond boundary.
 344:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function uses a 64 bits internal representation,
 345:./lib/chibios/os/rt/include/chvt.h ****  *          use with non-constant parameters can lead to inefficient
 346:./lib/chibios/os/rt/include/chvt.h ****  *          code because 64 bits arithmetic would be used at runtime.
 347:./lib/chibios/os/rt/include/chvt.h ****  *
 348:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] n         number of system ticks
 349:./lib/chibios/os/rt/include/chvt.h ****  * @return              The number of microseconds.
 350:./lib/chibios/os/rt/include/chvt.h ****  *
 351:./lib/chibios/os/rt/include/chvt.h ****  * @api
 352:./lib/chibios/os/rt/include/chvt.h ****  */
 353:./lib/chibios/os/rt/include/chvt.h **** static inline unsigned int LL_ST2US(systime_t n) {
 354:./lib/chibios/os/rt/include/chvt.h ****   uint64_t usec = (((uint64_t)n * 1000000ULL) + (uint64_t)CH_CFG_ST_FREQUENCY - 1ULL)
 355:./lib/chibios/os/rt/include/chvt.h ****                    / (uint64_t)CH_CFG_ST_FREQUENCY;
 356:./lib/chibios/os/rt/include/chvt.h **** 
 357:./lib/chibios/os/rt/include/chvt.h ****   chDbgAssert(usec < (uint64_t)__UINT_MAX, "conversion overflow");
 358:./lib/chibios/os/rt/include/chvt.h **** 
 359:./lib/chibios/os/rt/include/chvt.h ****   return (unsigned int)usec;
 360:./lib/chibios/os/rt/include/chvt.h **** }
 361:./lib/chibios/os/rt/include/chvt.h **** /** @} */
 362:./lib/chibios/os/rt/include/chvt.h **** 
 363:./lib/chibios/os/rt/include/chvt.h **** /**
 364:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Initializes a @p virtual_timer_t object.
 365:./lib/chibios/os/rt/include/chvt.h ****  * @note    Initializing a timer object is not strictly required because
 366:./lib/chibios/os/rt/include/chvt.h ****  *          the function @p chVTSetI() initializes the object too. This
 367:./lib/chibios/os/rt/include/chvt.h ****  *          function is only useful if you need to perform a @p chVTIsArmed()
 368:./lib/chibios/os/rt/include/chvt.h ****  *          check before calling @p chVTSetI().
 369:./lib/chibios/os/rt/include/chvt.h ****  *
 370:./lib/chibios/os/rt/include/chvt.h ****  * @param[out] vtp      the @p virtual_timer_t structure pointer
 371:./lib/chibios/os/rt/include/chvt.h ****  *
 372:./lib/chibios/os/rt/include/chvt.h ****  * @init
 373:./lib/chibios/os/rt/include/chvt.h ****  */
 374:./lib/chibios/os/rt/include/chvt.h **** static inline void chVTObjectInit(virtual_timer_t *vtp) {
 375:./lib/chibios/os/rt/include/chvt.h **** 
 376:./lib/chibios/os/rt/include/chvt.h ****   vtp->func = NULL;
 377:./lib/chibios/os/rt/include/chvt.h **** }
 378:./lib/chibios/os/rt/include/chvt.h **** 
 379:./lib/chibios/os/rt/include/chvt.h **** /**
 380:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Current system time.
 381:./lib/chibios/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 382:./lib/chibios/os/rt/include/chvt.h ****  *          invocation.
 383:./lib/chibios/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 384:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 385:./lib/chibios/os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 386:./lib/chibios/os/rt/include/chvt.h ****  *          @p systime_t size.
 387:./lib/chibios/os/rt/include/chvt.h ****  *
 388:./lib/chibios/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 389:./lib/chibios/os/rt/include/chvt.h ****  *
 390:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 391:./lib/chibios/os/rt/include/chvt.h ****  */
 392:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 393:./lib/chibios/os/rt/include/chvt.h **** 
 394:./lib/chibios/os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 395:./lib/chibios/os/rt/include/chvt.h ****   return ch.vtlist.systime;
 396:./lib/chibios/os/rt/include/chvt.h **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 397:./lib/chibios/os/rt/include/chvt.h ****   return port_timer_get_time();
 398:./lib/chibios/os/rt/include/chvt.h **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 399:./lib/chibios/os/rt/include/chvt.h **** }
 400:./lib/chibios/os/rt/include/chvt.h **** 
 401:./lib/chibios/os/rt/include/chvt.h **** /**
 402:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Current system time.
 403:./lib/chibios/os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 404:./lib/chibios/os/rt/include/chvt.h ****  *          invocation.
 405:./lib/chibios/os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 406:./lib/chibios/os/rt/include/chvt.h ****  *
 407:./lib/chibios/os/rt/include/chvt.h ****  * @return              The system time in ticks.
 408:./lib/chibios/os/rt/include/chvt.h ****  *
 409:./lib/chibios/os/rt/include/chvt.h ****  * @api
 410:./lib/chibios/os/rt/include/chvt.h ****  */
 411:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTime(void) {
 412:./lib/chibios/os/rt/include/chvt.h ****   systime_t systime;
 413:./lib/chibios/os/rt/include/chvt.h **** 
 414:./lib/chibios/os/rt/include/chvt.h ****   chSysLock();
 415:./lib/chibios/os/rt/include/chvt.h ****   systime = chVTGetSystemTimeX();
 416:./lib/chibios/os/rt/include/chvt.h ****   chSysUnlock();
 417:./lib/chibios/os/rt/include/chvt.h **** 
 418:./lib/chibios/os/rt/include/chvt.h ****   return systime;
 419:./lib/chibios/os/rt/include/chvt.h **** }
 420:./lib/chibios/os/rt/include/chvt.h **** 
 421:./lib/chibios/os/rt/include/chvt.h **** /**
 422:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Returns the elapsed time since the specified start time.
 423:./lib/chibios/os/rt/include/chvt.h ****  *
 424:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     start time
 425:./lib/chibios/os/rt/include/chvt.h ****  * @return              The elapsed time.
 426:./lib/chibios/os/rt/include/chvt.h ****  *
 427:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 428:./lib/chibios/os/rt/include/chvt.h ****  */
 429:./lib/chibios/os/rt/include/chvt.h **** static inline systime_t chVTTimeElapsedSinceX(systime_t start) {
 430:./lib/chibios/os/rt/include/chvt.h **** 
 431:./lib/chibios/os/rt/include/chvt.h ****   return chVTGetSystemTimeX() - start;
 432:./lib/chibios/os/rt/include/chvt.h **** }
 433:./lib/chibios/os/rt/include/chvt.h **** 
 434:./lib/chibios/os/rt/include/chvt.h **** /**
 435:./lib/chibios/os/rt/include/chvt.h ****  * @brief   Checks if the specified time is within the specified time window.
 436:./lib/chibios/os/rt/include/chvt.h ****  * @note    When start==end then the function returns always true because the
 437:./lib/chibios/os/rt/include/chvt.h ****  *          whole time range is specified.
 438:./lib/chibios/os/rt/include/chvt.h ****  * @note    This function can be called from any context.
 439:./lib/chibios/os/rt/include/chvt.h ****  *
 440:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] time      the time to be verified
 441:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] start     the start of the time window (inclusive)
 442:./lib/chibios/os/rt/include/chvt.h ****  * @param[in] end       the end of the time window (non inclusive)
 443:./lib/chibios/os/rt/include/chvt.h ****  * @retval true         current time within the specified time window.
 444:./lib/chibios/os/rt/include/chvt.h ****  * @retval false        current time not within the specified time window.
 445:./lib/chibios/os/rt/include/chvt.h ****  *
 446:./lib/chibios/os/rt/include/chvt.h ****  * @xclass
 447:./lib/chibios/os/rt/include/chvt.h ****  */
 448:./lib/chibios/os/rt/include/chvt.h **** static inline bool chVTIsTimeWithinX(systime_t time,
 449:./lib/chibios/os/rt/include/chvt.h ****                                      systime_t start,
 450:./lib/chibios/os/rt/include/chvt.h ****                                      systime_t end) {
 451:./lib/chibios/os/rt/include/chvt.h **** 
 452:./lib/chibios/os/rt/include/chvt.h ****   return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 1007              		.loc 5 452 0
 1008 0032 921B     		subs	r2, r2, r6
 1009              	.LBE399:
 1010              	.LBE398:
 1011              	.LBE397:
 1012              		.loc 1 1001 0
 1013 0034 6245     		cmp	r2, ip
 1014 0036 26D8     		bhi	.L73
 1015              	.LVL63:
 1016              	.LBB400:
 1017              	.LBB401:
 1018              	.LBB402:
 1019              	.LBB403:
 1020              	.LBB404:
 1021              	.LBB405:
 1022              		.loc 2 264 0
 1023              		.syntax unified
 1024              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1025 0038 80F31188 		MSR basepri, r0
 1026              	@ 0 "" 2
 1027              	.LVL64:
 1028              		.thumb
 1029              		.syntax unified
 1030 003c F3E7     		b	.L70
 1031              	.L68:
 1032              	.LVL65:
 1033              	.LBE405:
 1034              	.LBE404:
 1035              	.LBE403:
 1036              	.LBE402:
 1037              	.LBE401:
 1038              	.LBE400:
 1039              	.LBB406:
 1040              	.LBB407:
 137:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dp->CR2 = (uint32_t)addr << 1U;
 1041              		.loc 1 137 0
 1042 003e 6268     		ldr	r2, [r4, #4]
 134:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 1043              		.loc 1 134 0
 1044 0040 236B     		ldr	r3, [r4, #48]
 1045              	.LVL66:
 137:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dp->CR2 = (uint32_t)addr << 1U;
 1046              		.loc 1 137 0
 1047 0042 9268     		ldr	r2, [r2, #8]
 1048 0044 1205     		lsls	r2, r2, #20
 138:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   else
 1049              		.loc 1 138 0
 1050 0046 58BF     		it	pl
 1051 0048 4900     		lslpl	r1, r1, #1
 1052              	.LVL67:
 140:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 1053              		.loc 1 140 0
 1054 004a 5960     		str	r1, [r3, #4]
 1055              	.LVL68:
 1056              	.LBE407:
 1057              	.LBE406:
1002:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       return MSG_TIMEOUT;
1003:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
1004:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1005:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     osalSysUnlock();
1006:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
1007:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1008:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Setting up the slave address.*/
1009:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2c_lld_set_address(i2cp, addr);
1010:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1011:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Setting up the peripheral.*/
1012:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2c_lld_setup_rx_transfer(i2cp);
 1058              		.loc 1 1012 0
 1059 004c 2046     		mov	r0, r4
 1060 004e FFF7FEFF 		bl	i2c_lld_setup_rx_transfer
 1061              	.LVL69:
1013:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1014:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
1015:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Enabling RX DMA.*/
1016:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamEnable(i2cp->dmarx);
 1062              		.loc 1 1016 0
 1063 0052 A36A     		ldr	r3, [r4, #40]
 1064              	.LBB408:
 1065              	.LBB409:
 713:./lib/chibios/os/hal/osal/rt/osal.h **** }
 1066              		.loc 3 713 0
 1067 0054 0699     		ldr	r1, [sp, #24]
 1068              	.LBE409:
 1069              	.LBE408:
 1070              		.loc 1 1016 0
 1071 0056 5A68     		ldr	r2, [r3, #4]
 1072 0058 1368     		ldr	r3, [r2]
 1073 005a 43F00103 		orr	r3, r3, #1
 1074 005e 1360     		str	r3, [r2]
1017:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1018:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Transfer complete interrupt enabled.*/
1019:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dp->CR1 |= I2C_CR1_TCIE;
 1075              		.loc 1 1019 0
 1076 0060 2B68     		ldr	r3, [r5]
 1077 0062 43F04003 		orr	r3, r3, #64
 1078 0066 2B60     		str	r3, [r5]
1020:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
1021:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1022:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Transfer complete and RX interrupts enabled.*/
1023:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dp->CR1 |= I2C_CR1_TCIE | I2C_CR1_RXIE;
1024:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
1025:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1026:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Starts the operation.*/
1027:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dp->CR2 |= I2C_CR2_START;
 1079              		.loc 1 1027 0
 1080 0068 6B68     		ldr	r3, [r5, #4]
 1081 006a 43F40053 		orr	r3, r3, #8192
 1082 006e 6B60     		str	r3, [r5, #4]
 1083              	.LVL70:
 1084              	.LBB411:
 1085              	.LBB410:
 713:./lib/chibios/os/hal/osal/rt/osal.h **** }
 1086              		.loc 3 713 0
 1087 0070 04F11C00 		add	r0, r4, #28
 1088              	.LVL71:
 1089 0074 FFF7FEFF 		bl	chThdSuspendTimeoutS
 1090              	.LVL72:
 1091              	.LBE410:
 1092              	.LBE411:
1028:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1029:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Waits for the operation completion or a timeout.*/
1030:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   msg = osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
1031:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1032:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* In case of a software timeout a STOP is sent as an extreme attempt
1033:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****      to release the bus.*/
1034:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (msg == MSG_TIMEOUT) {
 1093              		.loc 1 1034 0
 1094 0078 431C     		adds	r3, r0, #1
 1095 007a 03D1     		bne	.L67
1035:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dp->CR2 |= I2C_CR2_STOP;
 1096              		.loc 1 1035 0
 1097 007c 6B68     		ldr	r3, [r5, #4]
 1098 007e 43F48043 		orr	r3, r3, #16384
 1099 0082 6B60     		str	r3, [r5, #4]
 1100              	.L67:
1036:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
1037:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1038:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   return msg;
1039:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 1101              		.loc 1 1039 0
 1102 0084 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1103              	.LVL73:
 1104              	.L73:
1002:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 1105              		.loc 1 1002 0
 1106 0086 4FF0FF30 		mov	r0, #-1
 1107 008a FBE7     		b	.L67
 1108              		.cfi_endproc
 1109              	.LFE290:
 1111              		.section	.text.i2c_lld_master_transmit_timeout,"ax",%progbits
 1112              		.align	1
 1113              		.global	i2c_lld_master_transmit_timeout
 1114              		.syntax unified
 1115              		.thumb
 1116              		.thumb_func
 1117              		.fpu softvfp
 1119              	i2c_lld_master_transmit_timeout:
 1120              	.LFB291:
1040:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1041:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** /**
1042:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @brief   Transmits data via the I2C bus as master.
1043:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
1044:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] i2cp      pointer to the @p I2CDriver object
1045:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] addr      slave device address
1046:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] txbuf     pointer to the transmit buffer
1047:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] txbytes   number of bytes to be transmitted
1048:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[out] rxbuf    pointer to the receive buffer
1049:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] rxbytes   number of bytes to be received
1050:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
1051:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *                      the following special values are allowed:
1052:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *                      - @a TIME_INFINITE no timeout.
1053:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *                      .
1054:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @return              The operation status.
1055:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @retval MSG_OK       if the function succeeded.
1056:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @retval MSG_RESET    if one or more I2C errors occurred, the errors can
1057:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *                      be retrieved using @p i2cGetErrors().
1058:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @retval MSG_TIMEOUT  if a timeout occurred before operation end. <b>After a
1059:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *                      timeout the driver must be stopped and restarted
1060:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *                      because the bus is in an uncertain state</b>.
1061:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  *
1062:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  * @notapi
1063:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****  */
1064:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
1065:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                                       const uint8_t *txbuf, size_t txbytes,
1066:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                                       uint8_t *rxbuf, size_t rxbytes,
1067:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****                                       systime_t timeout) {
 1121              		.loc 1 1067 0
 1122              		.cfi_startproc
 1123              		@ args = 12, pretend = 0, frame = 0
 1124              		@ frame_needed = 0, uses_anonymous_args = 0
 1125              	.LVL74:
 1126 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1127              		.cfi_def_cfa_offset 24
 1128              		.cfi_offset 3, -24
 1129              		.cfi_offset 4, -20
 1130              		.cfi_offset 5, -16
 1131              		.cfi_offset 6, -12
 1132              		.cfi_offset 7, -8
 1133              		.cfi_offset 14, -4
 1134              		.loc 1 1067 0
 1135 0002 0446     		mov	r4, r0
1068:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   msg_t msg;
1069:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   I2C_TypeDef *dp = i2cp->i2c;
 1136              		.loc 1 1069 0
 1137 0004 056B     		ldr	r5, [r0, #48]
 1138              	.LVL75:
1070:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   systime_t start, end;
1071:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1072:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Resetting error flags for this transfer.*/
1073:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2cp->errors = I2C_NO_ERROR;
 1139              		.loc 1 1073 0
 1140 0006 0020     		movs	r0, #0
 1141              	.LVL76:
 1142 0008 A060     		str	r0, [r4, #8]
 1143              	.LVL77:
 1144              	.LBB446:
 1145              	.LBB447:
 1146              	.LBB448:
 1147              	.LBB449:
 1148              	.LBB450:
 1149              	.LBB451:
 1150              		.loc 2 264 0
 1151              		.syntax unified
 1152              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1153 000a 80F31188 		MSR basepri, r0
 1154              	@ 0 "" 2
 1155              	.LVL78:
 1156              		.thumb
 1157              		.syntax unified
 1158              	.LBE451:
 1159              	.LBE450:
 1160              	.LBE449:
 1161              	.LBE448:
 1162              	.LBE447:
 1163              	.LBE446:
1074:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1075:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Releases the lock from high level driver.*/
1076:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   osalSysUnlock();
1077:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1078:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
1079:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* TX DMA setup.*/
1080:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 1164              		.loc 1 1080 0
 1165 000e E66A     		ldr	r6, [r4, #44]
 1166 0010 676A     		ldr	r7, [r4, #36]
 1167 0012 7668     		ldr	r6, [r6, #4]
 1168 0014 3760     		str	r7, [r6]
1081:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 1169              		.loc 1 1081 0
 1170 0016 F260     		str	r2, [r6, #12]
1082:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 1171              		.loc 1 1082 0
 1172 0018 7360     		str	r3, [r6, #4]
1083:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1084:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* RX DMA setup, note, rxbytes can be zero but we write the value anyway.*/
1085:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 1173              		.loc 1 1085 0
 1174 001a A36A     		ldr	r3, [r4, #40]
 1175              	.LVL79:
 1176 001c 226A     		ldr	r2, [r4, #32]
 1177              	.LVL80:
 1178 001e 5B68     		ldr	r3, [r3, #4]
 1179 0020 1A60     		str	r2, [r3]
 1180              	.LVL81:
1086:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 1181              		.loc 1 1086 0
 1182 0022 069A     		ldr	r2, [sp, #24]
 1183 0024 DA60     		str	r2, [r3, #12]
1087:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 1184              		.loc 1 1087 0
 1185 0026 079A     		ldr	r2, [sp, #28]
 1186 0028 5A60     		str	r2, [r3, #4]
 1187              	.LBB452:
 1188              	.LBB453:
 1189              	.LBB454:
 1190              	.LBB455:
 1191              	.LBB456:
 1192              		.loc 4 141 0
 1193 002a 4FF08043 		mov	r3, #1073741824
 1194              	.LBE456:
 1195              	.LBE455:
 1196              	.LBE454:
 1197              	.LBE453:
 1198              	.LBE452:
 1199              	.LBB461:
 1200              	.LBB462:
 1201              	.LBB463:
 1202              	.LBB464:
 1203              	.LBB465:
 1204              		.loc 2 264 0
 1205 002e 2027     		movs	r7, #32
 1206              	.LBE465:
 1207              	.LBE464:
 1208              	.LBE463:
 1209              	.LBE462:
 1210              	.LBE461:
 1211              	.LBB470:
 1212              	.LBB460:
 1213              	.LBB459:
 1214              	.LBB458:
 1215              	.LBB457:
 1216              		.loc 4 141 0
 1217 0030 5E6A     		ldr	r6, [r3, #36]
 1218              	.LVL82:
 1219              	.LBE457:
 1220              	.LBE458:
 1221              	.LBE459:
 1222              	.LBE460:
 1223              	.LBE470:
1088:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
1089:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2cp->txptr   = txbuf;
1090:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2cp->txbytes = txbytes;
1091:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2cp->rxptr   = rxbuf;
1092:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2cp->rxbytes = rxbytes;
1093:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
1094:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1095:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Calculating the time window for the timeout on the busy bus condition.*/
1096:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   start = osalOsGetSystemTimeX();
1097:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   end = start + OSAL_MS2ST(STM32_I2C_BUSY_TIMEOUT);
1098:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1099:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Waits until BUSY flag is reset or, alternatively, for a timeout
1100:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****      condition.*/
1101:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   while (true) {
1102:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     osalSysLock();
1103:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1104:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     /* If the bus is not busy then the operation can continue, note, the
1105:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****        loop is exited in the locked state.*/
1106:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     if ((dp->ISR & I2C_ISR_BUSY) == 0)
1107:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       break;
1108:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1109:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     /* If the system time went outside the allowed window then a timeout
1110:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****        condition is returned.*/
1111:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end)) {
 1224              		.loc 1 1111 0
 1225 0032 41F2873C 		movw	ip, #4999
 1226              	.L77:
 1227              	.LVL83:
 1228              	.LBB471:
 1229              	.LBB469:
 1230              	.LBB468:
 1231              	.LBB467:
 1232              	.LBB466:
 1233              		.loc 2 264 0
 1234              		.syntax unified
 1235              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1236 0036 87F31188 		MSR basepri, r7
 1237              	@ 0 "" 2
 1238              	.LVL84:
 1239              		.thumb
 1240              		.syntax unified
 1241              	.LBE466:
 1242              	.LBE467:
 1243              	.LBE468:
 1244              	.LBE469:
 1245              	.LBE471:
1106:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       break;
 1246              		.loc 1 1106 0
 1247 003a AA69     		ldr	r2, [r5, #24]
 1248 003c 1204     		lsls	r2, r2, #16
 1249 003e 06D5     		bpl	.L75
 1250              	.LBB472:
 1251              	.LBB473:
 1252              	.LBB474:
 1253              	.LBB475:
 1254              	.LBB476:
 1255              		.loc 4 141 0
 1256 0040 5A6A     		ldr	r2, [r3, #36]
 1257              	.LBE476:
 1258              	.LBE475:
 1259              	.LBE474:
 1260              	.LBE473:
 1261              	.LBE472:
 1262              	.LBB477:
 1263              	.LBB478:
 1264              	.LBB479:
 1265              		.loc 5 452 0
 1266 0042 921B     		subs	r2, r2, r6
 1267              	.LBE479:
 1268              	.LBE478:
 1269              	.LBE477:
 1270              		.loc 1 1111 0
 1271 0044 6245     		cmp	r2, ip
 1272 0046 26D8     		bhi	.L80
 1273              	.LVL85:
 1274              	.LBB480:
 1275              	.LBB481:
 1276              	.LBB482:
 1277              	.LBB483:
 1278              	.LBB484:
 1279              	.LBB485:
 1280              		.loc 2 264 0
 1281              		.syntax unified
 1282              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1283 0048 80F31188 		MSR basepri, r0
 1284              	@ 0 "" 2
 1285              	.LVL86:
 1286              		.thumb
 1287              		.syntax unified
 1288 004c F3E7     		b	.L77
 1289              	.L75:
 1290              	.LVL87:
 1291              	.LBE485:
 1292              	.LBE484:
 1293              	.LBE483:
 1294              	.LBE482:
 1295              	.LBE481:
 1296              	.LBE480:
 1297              	.LBB486:
 1298              	.LBB487:
 137:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dp->CR2 = (uint32_t)addr << 1U;
 1299              		.loc 1 137 0
 1300 004e 6268     		ldr	r2, [r4, #4]
 134:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
 1301              		.loc 1 134 0
 1302 0050 236B     		ldr	r3, [r4, #48]
 1303              	.LVL88:
 137:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dp->CR2 = (uint32_t)addr << 1U;
 1304              		.loc 1 137 0
 1305 0052 9268     		ldr	r2, [r2, #8]
 1306 0054 1205     		lsls	r2, r2, #20
 138:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   else
 1307              		.loc 1 138 0
 1308 0056 58BF     		it	pl
 1309 0058 4900     		lslpl	r1, r1, #1
 1310              	.LVL89:
 140:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 1311              		.loc 1 140 0
 1312 005a 5960     		str	r1, [r3, #4]
 1313              	.LVL90:
 1314              	.LBE487:
 1315              	.LBE486:
1112:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****       return MSG_TIMEOUT;
1113:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
1114:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1115:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     osalSysUnlock();
1116:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
1117:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1118:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Setting up the slave address.*/
1119:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2c_lld_set_address(i2cp, addr);
1120:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1121:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Preparing the transfer.*/
1122:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   i2c_lld_setup_tx_transfer(i2cp);
 1316              		.loc 1 1122 0
 1317 005c 2046     		mov	r0, r4
 1318 005e FFF7FEFF 		bl	i2c_lld_setup_tx_transfer
 1319              	.LVL91:
1123:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1124:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #if STM32_I2C_USE_DMA == TRUE
1125:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Enabling TX DMA.*/
1126:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dmaStreamEnable(i2cp->dmatx);
 1320              		.loc 1 1126 0
 1321 0062 E36A     		ldr	r3, [r4, #44]
 1322              	.LBB488:
 1323              	.LBB489:
 713:./lib/chibios/os/hal/osal/rt/osal.h **** }
 1324              		.loc 3 713 0
 1325 0064 0899     		ldr	r1, [sp, #32]
 1326              	.LBE489:
 1327              	.LBE488:
 1328              		.loc 1 1126 0
 1329 0066 5A68     		ldr	r2, [r3, #4]
 1330 0068 1368     		ldr	r3, [r2]
 1331 006a 43F00103 		orr	r3, r3, #1
 1332 006e 1360     		str	r3, [r2]
1127:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1128:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Transfer complete interrupt enabled.*/
1129:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dp->CR1 |= I2C_CR1_TCIE;
 1333              		.loc 1 1129 0
 1334 0070 2B68     		ldr	r3, [r5]
 1335 0072 43F04003 		orr	r3, r3, #64
 1336 0076 2B60     		str	r3, [r5]
1130:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #else
1131:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Transfer complete and TX interrupts enabled.*/
1132:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dp->CR1 |= I2C_CR1_TCIE | I2C_CR1_TXIE;
1133:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** #endif
1134:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1135:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Starts the operation.*/
1136:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   dp->CR2 |= I2C_CR2_START;
 1337              		.loc 1 1136 0
 1338 0078 6B68     		ldr	r3, [r5, #4]
 1339 007a 43F40053 		orr	r3, r3, #8192
 1340 007e 6B60     		str	r3, [r5, #4]
 1341              	.LVL92:
 1342              	.LBB491:
 1343              	.LBB490:
 713:./lib/chibios/os/hal/osal/rt/osal.h **** }
 1344              		.loc 3 713 0
 1345 0080 04F11C00 		add	r0, r4, #28
 1346              	.LVL93:
 1347 0084 FFF7FEFF 		bl	chThdSuspendTimeoutS
 1348              	.LVL94:
 1349              	.LBE490:
 1350              	.LBE491:
1137:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1138:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* Waits for the operation completion or a timeout.*/
1139:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   msg = osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
1140:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1141:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   /* In case of a software timeout a STOP is sent as an extreme attempt
1142:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****      to release the bus.*/
1143:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   if (msg == MSG_TIMEOUT) {
 1351              		.loc 1 1143 0
 1352 0088 431C     		adds	r3, r0, #1
 1353 008a 03D1     		bne	.L74
1144:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     dp->CR2 |= I2C_CR2_STOP;
 1354              		.loc 1 1144 0
 1355 008c 6B68     		ldr	r3, [r5, #4]
 1356 008e 43F48043 		orr	r3, r3, #16384
 1357 0092 6B60     		str	r3, [r5, #4]
 1358              	.L74:
1145:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   }
1146:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** 
1147:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****   return msg;
1148:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c **** }
 1359              		.loc 1 1148 0
 1360 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1361              	.LVL95:
 1362              	.L80:
1112:lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.c ****     }
 1363              		.loc 1 1112 0
 1364 0096 4FF0FF30 		mov	r0, #-1
 1365 009a FBE7     		b	.L74
 1366              		.cfi_endproc
 1367              	.LFE291:
 1369              		.global	I2CD1
 1370              		.section	.bss.I2CD1,"aw",%nobits
 1371              		.align	2
 1372              		.set	.LANCHOR0,. + 0
 1375              	I2CD1:
 1376 0000 00000000 		.space	52
 1376      00000000 
 1376      00000000 
 1376      00000000 
 1376      00000000 
 1377              		.text
 1378              	.Letext0:
 1379              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 1380              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 1381              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 1382              		.file 9 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 1383              		.file 10 "./lib/chibios/os/rt/include/chsystypes.h"
 1384              		.file 11 "./lib/chibios/os/rt/include/chschd.h"
 1385              		.file 12 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 1386              		.file 13 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 1387              		.file 14 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/stm32f303xc.h"
 1388              		.file 15 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 1389              		.file 16 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 1390              		.file 17 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 1391              		.file 18 "./lib/chibios/os/rt/include/chtm.h"
 1392              		.file 19 "./lib/chibios/os/rt/include/chsem.h"
 1393              		.file 20 "./lib/chibios/os/rt/include/chmtx.h"
 1394              		.file 21 "./lib/chibios/os/rt/include/chsys.h"
 1395              		.file 22 "./lib/chibios/os/rt/include/chregistry.h"
 1396              		.file 23 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 1397              		.file 24 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 1398              		.file 25 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 1399              		.file 26 "./lib/chibios/os/hal/include/hal_dac.h"
 1400              		.file 27 "./lib/chibios/os/hal/ports/STM32/LLD/DACv1/hal_dac_lld.h"
 1401              		.file 28 "./lib/chibios/os/hal/include/hal_gpt.h"
 1402              		.file 29 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_gpt_lld.h"
 1403              		.file 30 "./lib/chibios/os/hal/include/hal_i2c.h"
 1404              		.file 31 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 1405              		.file 32 "./lib/chibios/os/hal/include/hal_pwm.h"
 1406              		.file 33 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 1407              		.file 34 "./lib/chibios/os/hal/include/hal_usb.h"
 1408              		.file 35 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 1409              		.file 36 "./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h"
 1410              		.file 37 "./lib/chibios/os/rt/include/chthreads.h"
 1411              		.file 38 "./lib/chibios/os/hal/ports/common/ARMCMx/nvic.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_i2c_lld.c
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:16     .text.i2c_lld_setup_rx_transfer:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:22     .text.i2c_lld_setup_rx_transfer:0000000000000000 i2c_lld_setup_rx_transfer
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:80     .text.i2c_lld_setup_tx_transfer:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:86     .text.i2c_lld_setup_tx_transfer:0000000000000000 i2c_lld_setup_tx_transfer
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:138    .text.VectorBC:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:145    .text.VectorBC:0000000000000000 VectorBC
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:404    .text.VectorBC:0000000000000104 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:414    .text.VectorC0:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:421    .text.VectorC0:0000000000000000 VectorC0
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:565    .text.VectorC0:000000000000008c $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:571    .text.i2c_lld_init:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:578    .text.i2c_lld_init:0000000000000000 i2c_lld_init
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:610    .text.i2c_lld_init:000000000000001c $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:617    .text.i2c_lld_start:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:624    .text.i2c_lld_start:0000000000000000 i2c_lld_start
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:745    .text.i2c_lld_start:00000000000000a0 $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:751    .text.i2c_lld_stop:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:758    .text.i2c_lld_stop:0000000000000000 i2c_lld_stop
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:859    .text.i2c_lld_stop:000000000000007c $d
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:865    .text.i2c_lld_master_receive_timeout:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:872    .text.i2c_lld_master_receive_timeout:0000000000000000 i2c_lld_master_receive_timeout
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:1112   .text.i2c_lld_master_transmit_timeout:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:1119   .text.i2c_lld_master_transmit_timeout:0000000000000000 i2c_lld_master_transmit_timeout
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:1375   .bss.I2CD1:0000000000000000 I2CD1
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccWK8k4R.s:1371   .bss.I2CD1:0000000000000000 $d

UNDEFINED SYMBOLS
chThdResumeI
_port_irq_epilogue
i2cObjectInit
_stm32_dma_streams
dmaStreamAllocate
nvicEnableVector
dmaStreamRelease
nvicDisableVector
chThdSuspendTimeoutS
