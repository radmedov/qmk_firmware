   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"hal_i2c.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.i2cInit,"ax",%progbits
  16              		.align	1
  17              		.global	i2cInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	i2cInit:
  24              	.LFB279:
  25              		.file 1 "lib/chibios/os/hal/src/hal_i2c.c"
   1:lib/chibios/os/hal/src/hal_i2c.c **** /*
   2:lib/chibios/os/hal/src/hal_i2c.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:lib/chibios/os/hal/src/hal_i2c.c **** 
   4:lib/chibios/os/hal/src/hal_i2c.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:lib/chibios/os/hal/src/hal_i2c.c ****     you may not use this file except in compliance with the License.
   6:lib/chibios/os/hal/src/hal_i2c.c ****     You may obtain a copy of the License at
   7:lib/chibios/os/hal/src/hal_i2c.c **** 
   8:lib/chibios/os/hal/src/hal_i2c.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:lib/chibios/os/hal/src/hal_i2c.c **** 
  10:lib/chibios/os/hal/src/hal_i2c.c ****     Unless required by applicable law or agreed to in writing, software
  11:lib/chibios/os/hal/src/hal_i2c.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:lib/chibios/os/hal/src/hal_i2c.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:lib/chibios/os/hal/src/hal_i2c.c ****     See the License for the specific language governing permissions and
  14:lib/chibios/os/hal/src/hal_i2c.c ****     limitations under the License.
  15:lib/chibios/os/hal/src/hal_i2c.c **** */
  16:lib/chibios/os/hal/src/hal_i2c.c **** /*
  17:lib/chibios/os/hal/src/hal_i2c.c ****    Concepts and parts of this file have been contributed by Uladzimir Pylinsky
  18:lib/chibios/os/hal/src/hal_i2c.c ****    aka barthess.
  19:lib/chibios/os/hal/src/hal_i2c.c ****  */
  20:lib/chibios/os/hal/src/hal_i2c.c **** 
  21:lib/chibios/os/hal/src/hal_i2c.c **** /**
  22:lib/chibios/os/hal/src/hal_i2c.c ****  * @file    hal_i2c.c
  23:lib/chibios/os/hal/src/hal_i2c.c ****  * @brief   I2C Driver code.
  24:lib/chibios/os/hal/src/hal_i2c.c ****  *
  25:lib/chibios/os/hal/src/hal_i2c.c ****  * @addtogroup I2C
  26:lib/chibios/os/hal/src/hal_i2c.c ****  * @{
  27:lib/chibios/os/hal/src/hal_i2c.c ****  */
  28:lib/chibios/os/hal/src/hal_i2c.c **** #include "hal.h"
  29:lib/chibios/os/hal/src/hal_i2c.c **** 
  30:lib/chibios/os/hal/src/hal_i2c.c **** #if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  31:lib/chibios/os/hal/src/hal_i2c.c **** 
  32:lib/chibios/os/hal/src/hal_i2c.c **** /*===========================================================================*/
  33:lib/chibios/os/hal/src/hal_i2c.c **** /* Driver local definitions.                                                 */
  34:lib/chibios/os/hal/src/hal_i2c.c **** /*===========================================================================*/
  35:lib/chibios/os/hal/src/hal_i2c.c **** 
  36:lib/chibios/os/hal/src/hal_i2c.c **** /*===========================================================================*/
  37:lib/chibios/os/hal/src/hal_i2c.c **** /* Driver exported variables.                                                */
  38:lib/chibios/os/hal/src/hal_i2c.c **** /*===========================================================================*/
  39:lib/chibios/os/hal/src/hal_i2c.c **** 
  40:lib/chibios/os/hal/src/hal_i2c.c **** /*===========================================================================*/
  41:lib/chibios/os/hal/src/hal_i2c.c **** /* Driver local variables and types.                                         */
  42:lib/chibios/os/hal/src/hal_i2c.c **** /*===========================================================================*/
  43:lib/chibios/os/hal/src/hal_i2c.c **** 
  44:lib/chibios/os/hal/src/hal_i2c.c **** /*===========================================================================*/
  45:lib/chibios/os/hal/src/hal_i2c.c **** /* Driver local functions.                                                   */
  46:lib/chibios/os/hal/src/hal_i2c.c **** /*===========================================================================*/
  47:lib/chibios/os/hal/src/hal_i2c.c **** 
  48:lib/chibios/os/hal/src/hal_i2c.c **** /*===========================================================================*/
  49:lib/chibios/os/hal/src/hal_i2c.c **** /* Driver exported functions.                                                */
  50:lib/chibios/os/hal/src/hal_i2c.c **** /*===========================================================================*/
  51:lib/chibios/os/hal/src/hal_i2c.c **** 
  52:lib/chibios/os/hal/src/hal_i2c.c **** /**
  53:lib/chibios/os/hal/src/hal_i2c.c ****  * @brief   I2C Driver initialization.
  54:lib/chibios/os/hal/src/hal_i2c.c ****  * @note    This function is implicitly invoked by @p halInit(), there is
  55:lib/chibios/os/hal/src/hal_i2c.c ****  *          no need to explicitly initialize the driver.
  56:lib/chibios/os/hal/src/hal_i2c.c ****  *
  57:lib/chibios/os/hal/src/hal_i2c.c ****  * @init
  58:lib/chibios/os/hal/src/hal_i2c.c ****  */
  59:lib/chibios/os/hal/src/hal_i2c.c **** void i2cInit(void) {
  26              		.loc 1 59 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  60:lib/chibios/os/hal/src/hal_i2c.c **** 
  61:lib/chibios/os/hal/src/hal_i2c.c ****   i2c_lld_init();
  31              		.loc 1 61 0
  32 0000 FFF7FEBF 		b	i2c_lld_init
  33              	.LVL0:
  34              		.cfi_endproc
  35              	.LFE279:
  37              		.section	.text.i2cObjectInit,"ax",%progbits
  38              		.align	1
  39              		.global	i2cObjectInit
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu softvfp
  45              	i2cObjectInit:
  46              	.LFB280:
  62:lib/chibios/os/hal/src/hal_i2c.c **** }
  63:lib/chibios/os/hal/src/hal_i2c.c **** 
  64:lib/chibios/os/hal/src/hal_i2c.c **** /**
  65:lib/chibios/os/hal/src/hal_i2c.c ****  * @brief   Initializes the standard part of a @p I2CDriver structure.
  66:lib/chibios/os/hal/src/hal_i2c.c ****  *
  67:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[out] i2cp     pointer to the @p I2CDriver object
  68:lib/chibios/os/hal/src/hal_i2c.c ****  *
  69:lib/chibios/os/hal/src/hal_i2c.c ****  * @init
  70:lib/chibios/os/hal/src/hal_i2c.c ****  */
  71:lib/chibios/os/hal/src/hal_i2c.c **** void i2cObjectInit(I2CDriver *i2cp) {
  47              		.loc 1 71 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52              	.LVL1:
  72:lib/chibios/os/hal/src/hal_i2c.c **** 
  73:lib/chibios/os/hal/src/hal_i2c.c ****   i2cp->state  = I2C_STOP;
  53              		.loc 1 73 0
  54 0000 0123     		movs	r3, #1
  55 0002 0370     		strb	r3, [r0]
  74:lib/chibios/os/hal/src/hal_i2c.c ****   i2cp->config = NULL;
  56              		.loc 1 74 0
  57 0004 0023     		movs	r3, #0
  58 0006 4360     		str	r3, [r0, #4]
  59              	.LVL2:
  60              	.LBB82:
  61              	.LBB83:
  62              		.file 2 "./lib/chibios/os/hal/osal/rt/osal.h"
   1:./lib/chibios/os/hal/osal/rt/osal.h **** /*
   2:./lib/chibios/os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:./lib/chibios/os/hal/osal/rt/osal.h **** 
   4:./lib/chibios/os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:./lib/chibios/os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:./lib/chibios/os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:./lib/chibios/os/hal/osal/rt/osal.h **** 
   8:./lib/chibios/os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:./lib/chibios/os/hal/osal/rt/osal.h **** 
  10:./lib/chibios/os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:./lib/chibios/os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:./lib/chibios/os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:./lib/chibios/os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:./lib/chibios/os/hal/osal/rt/osal.h ****     limitations under the License.
  15:./lib/chibios/os/hal/osal/rt/osal.h **** */
  16:./lib/chibios/os/hal/osal/rt/osal.h **** 
  17:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  18:./lib/chibios/os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:./lib/chibios/os/hal/osal/rt/osal.h ****  *
  21:./lib/chibios/os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  23:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  24:./lib/chibios/os/hal/osal/rt/osal.h **** 
  25:./lib/chibios/os/hal/osal/rt/osal.h **** #ifndef _OSAL_H_
  26:./lib/chibios/os/hal/osal/rt/osal.h **** #define _OSAL_H_
  27:./lib/chibios/os/hal/osal/rt/osal.h **** 
  28:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:./lib/chibios/os/hal/osal/rt/osal.h **** 
  32:./lib/chibios/os/hal/osal/rt/osal.h **** #include "ch.h"
  33:./lib/chibios/os/hal/osal/rt/osal.h **** 
  34:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:./lib/chibios/os/hal/osal/rt/osal.h **** 
  38:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  39:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  41:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  42:./lib/chibios/os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:./lib/chibios/os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  45:./lib/chibios/os/hal/osal/rt/osal.h **** 
  46:./lib/chibios/os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:./lib/chibios/os/hal/osal/rt/osal.h **** #define TRUE                                (!FALSE)
  48:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  49:./lib/chibios/os/hal/osal/rt/osal.h **** 
  50:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        FALSE
  51:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         TRUE
  52:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  53:./lib/chibios/os/hal/osal/rt/osal.h **** 
  54:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
  55:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  56:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Messages
  57:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  58:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  59:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_OK                              RDY_OK
  60:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_RESET                           RDY_RESET
  61:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         RDY_TIMEOUT
  62:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  63:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  64:./lib/chibios/os/hal/osal/rt/osal.h **** 
  65:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
  66:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  67:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  69:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  70:./lib/chibios/os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((systime_t)0)
  71:./lib/chibios/os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((systime_t)-1)
  72:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  73:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  74:./lib/chibios/os/hal/osal/rt/osal.h **** 
  75:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  76:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  78:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  79:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  83:./lib/chibios/os/hal/osal/rt/osal.h **** 
  84:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  85:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  87:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  88:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  89:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  91:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:./lib/chibios/os/hal/osal/rt/osal.h **** 
  93:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  94:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  96:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:./lib/chibios/os/hal/osal/rt/osal.h **** 
  98:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  99:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 101:./lib/chibios/os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 104:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 106:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 107:./lib/chibios/os/hal/osal/rt/osal.h **** 
 108:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:./lib/chibios/os/hal/osal/rt/osal.h **** 
 112:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:./lib/chibios/os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:./lib/chibios/os/hal/osal/rt/osal.h **** 
 116:./lib/chibios/os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:./lib/chibios/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:./lib/chibios/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:./lib/chibios/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 121:./lib/chibios/os/hal/osal/rt/osal.h **** 
 122:./lib/chibios/os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:./lib/chibios/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 125:./lib/chibios/os/hal/osal/rt/osal.h **** 
 126:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:./lib/chibios/os/hal/osal/rt/osal.h **** 
 130:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 131:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 132:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 134:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 136:./lib/chibios/os/hal/osal/rt/osal.h **** 
 137:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 138:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 139:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 141:./lib/chibios/os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 143:./lib/chibios/os/hal/osal/rt/osal.h **** 
 144:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 145:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 146:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 148:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 150:./lib/chibios/os/hal/osal/rt/osal.h **** 
 151:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 152:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 153:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 154:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 155:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 156:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 157:./lib/chibios/os/hal/osal/rt/osal.h **** 
 158:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 159:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 160:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 161:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 162:./lib/chibios/os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 163:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 164:./lib/chibios/os/hal/osal/rt/osal.h **** 
 165:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 166:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 167:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 168:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 169:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 170:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 171:./lib/chibios/os/hal/osal/rt/osal.h **** 
 172:./lib/chibios/os/hal/osal/rt/osal.h **** #if !CH_CFG_USE_EVENTS
 173:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 174:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 175:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 176:./lib/chibios/os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 177:./lib/chibios/os/hal/osal/rt/osal.h ****  *          an entirely different way.
 178:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 179:./lib/chibios/os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 180:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 181:./lib/chibios/os/hal/osal/rt/osal.h **** typedef struct {
 182:./lib/chibios/os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Flags stored into the
 183:./lib/chibios/os/hal/osal/rt/osal.h ****                                                 object.                     */
 184:./lib/chibios/os/hal/osal/rt/osal.h **** } event_source_t;
 185:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 186:./lib/chibios/os/hal/osal/rt/osal.h **** 
 187:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 188:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 189:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then them
 190:./lib/chibios/os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 191:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 192:./lib/chibios/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 193:./lib/chibios/os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 194:./lib/chibios/os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 195:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 196:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 197:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 198:./lib/chibios/os/hal/osal/rt/osal.h **** 
 199:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 200:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 201:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 202:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 203:./lib/chibios/os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 204:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 205:./lib/chibios/os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 206:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 207:./lib/chibios/os/hal/osal/rt/osal.h **** typedef struct {
 208:./lib/chibios/os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 209:./lib/chibios/os/hal/osal/rt/osal.h **** } threads_queue_t;
 210:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 211:./lib/chibios/os/hal/osal/rt/osal.h **** 
 212:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 213:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 214:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 215:./lib/chibios/os/hal/osal/rt/osal.h **** 
 216:./lib/chibios/os/hal/osal/rt/osal.h **** /* Temporary names provided for ChibiOS 2.x compatibility.*/
 217:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueInit osalThreadQueueObjectInit
 218:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueWakeupAllI osalThreadDequeueAllI
 219:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueWakeupOneI osalThreadDequeueNextI
 220:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueGoSleepTimeoutS osalThreadEnqueueTimeoutS
 221:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalEventInit osalEventObjectInit
 222:./lib/chibios/os/hal/osal/rt/osal.h **** 
 223:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 224:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 225:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 226:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 227:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 228:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 229:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 230:./lib/chibios/os/hal/osal/rt/osal.h ****  *          message and halts.
 231:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 232:./lib/chibios/os/hal/osal/rt/osal.h ****  *          switch is enabled.
 233:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 234:./lib/chibios/os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 235:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 236:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 237:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 238:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 239:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 240:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 241:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 242:./lib/chibios/os/hal/osal/rt/osal.h **** 
 243:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 244:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 245:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 246:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 247:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is enabled.
 248:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 249:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 250:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 251:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 252:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 253:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 254:./lib/chibios/os/hal/osal/rt/osal.h **** 
 255:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 256:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 257:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 258:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 259:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 260:./lib/chibios/os/hal/osal/rt/osal.h **** 
 261:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 262:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 263:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 264:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 265:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 266:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 267:./lib/chibios/os/hal/osal/rt/osal.h **** 
 268:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 269:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 270:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 271:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 272:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 273:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 274:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 275:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 276:./lib/chibios/os/hal/osal/rt/osal.h **** 
 277:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 278:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 279:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 280:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 281:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 282:./lib/chibios/os/hal/osal/rt/osal.h **** 
 283:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 284:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 285:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 286:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 287:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 288:./lib/chibios/os/hal/osal/rt/osal.h **** 
 289:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 290:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 291:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 292:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 293:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 294:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 295:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 296:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 297:./lib/chibios/os/hal/osal/rt/osal.h **** 
 298:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 299:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 300:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 301:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 302:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 303:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 304:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 305:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 306:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 307:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 308:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 309:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 310:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 311:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 312:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_S2ST(sec) S2ST(sec)
 313:./lib/chibios/os/hal/osal/rt/osal.h **** 
 314:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 315:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 316:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 317:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 318:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 319:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 320:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 321:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 322:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 323:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 324:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_MS2ST(msec) MS2ST(msec)
 325:./lib/chibios/os/hal/osal/rt/osal.h **** 
 326:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 327:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 328:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 329:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 330:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 331:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 332:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 333:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 334:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 335:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 336:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_US2ST(usec) US2ST(usec)
 337:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 338:./lib/chibios/os/hal/osal/rt/osal.h **** 
 339:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 340:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 341:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 342:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 343:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 344:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 345:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 346:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 347:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 348:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 349:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 350:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 351:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 352:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 353:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 354:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 355:./lib/chibios/os/hal/osal/rt/osal.h **** 
 356:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 357:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 358:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 359:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 360:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 361:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 362:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 363:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 364:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 365:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 366:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 367:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 368:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 369:./lib/chibios/os/hal/osal/rt/osal.h **** 
 370:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 371:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 372:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 373:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 374:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 375:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 376:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 377:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 378:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 379:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 380:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 381:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 382:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 383:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 384:./lib/chibios/os/hal/osal/rt/osal.h **** 
 385:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 386:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 387:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 388:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 389:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 390:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 391:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 392:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 393:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 394:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 395:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       time in seconds, must be different from zero
 396:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 397:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 398:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 399:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(sec) osalThreadSleep(OSAL_S2ST(sec))
 400:./lib/chibios/os/hal/osal/rt/osal.h **** 
 401:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 402:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 403:./lib/chibios/os/hal/osal/rt/osal.h ****  *          milliseconds.
 404:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 405:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 406:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 407:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 408:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 409:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 410:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 411:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 412:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msec) osalThreadSleep(OSAL_MS2ST(msec))
 413:./lib/chibios/os/hal/osal/rt/osal.h **** 
 414:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 415:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 416:./lib/chibios/os/hal/osal/rt/osal.h ****  *          microseconds.
 417:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 418:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 419:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 420:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 421:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      time in microseconds, must be different from zero
 422:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 423:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 424:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 425:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usec) osalThreadSleep(OSAL_US2ST(usec))
 426:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 427:./lib/chibios/os/hal/osal/rt/osal.h **** 
 428:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 429:./lib/chibios/os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 430:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 431:./lib/chibios/os/hal/osal/rt/osal.h **** 
 432:./lib/chibios/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 433:./lib/chibios/os/hal/osal/rt/osal.h **** extern "C" {
 434:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 435:./lib/chibios/os/hal/osal/rt/osal.h **** 
 436:./lib/chibios/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 437:./lib/chibios/os/hal/osal/rt/osal.h **** }
 438:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 439:./lib/chibios/os/hal/osal/rt/osal.h **** 
 440:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 441:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 442:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 443:./lib/chibios/os/hal/osal/rt/osal.h **** 
 444:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 445:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 446:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 447:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 448:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 449:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 450:./lib/chibios/os/hal/osal/rt/osal.h **** 
 451:./lib/chibios/os/hal/osal/rt/osal.h **** }
 452:./lib/chibios/os/hal/osal/rt/osal.h **** 
 453:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 454:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 455:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 456:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 457:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 458:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 459:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 460:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 461:./lib/chibios/os/hal/osal/rt/osal.h **** 
 462:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 463:./lib/chibios/os/hal/osal/rt/osal.h **** }
 464:./lib/chibios/os/hal/osal/rt/osal.h **** 
 465:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 466:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 467:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 468:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 469:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 470:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 471:./lib/chibios/os/hal/osal/rt/osal.h **** 
 472:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysDisable();
 473:./lib/chibios/os/hal/osal/rt/osal.h **** }
 474:./lib/chibios/os/hal/osal/rt/osal.h **** 
 475:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 476:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 477:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 478:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 479:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 480:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 481:./lib/chibios/os/hal/osal/rt/osal.h **** 
 482:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysEnable();
 483:./lib/chibios/os/hal/osal/rt/osal.h **** }
 484:./lib/chibios/os/hal/osal/rt/osal.h **** 
 485:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 486:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 487:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 488:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 489:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 490:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 491:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 492:./lib/chibios/os/hal/osal/rt/osal.h **** 
 493:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysLock();
 494:./lib/chibios/os/hal/osal/rt/osal.h **** }
 495:./lib/chibios/os/hal/osal/rt/osal.h **** 
 496:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 497:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 498:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 499:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 500:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 501:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 502:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 503:./lib/chibios/os/hal/osal/rt/osal.h **** 
 504:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysUnlock();
 505:./lib/chibios/os/hal/osal/rt/osal.h **** }
 506:./lib/chibios/os/hal/osal/rt/osal.h **** 
 507:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 508:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 509:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 510:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 511:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 512:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 513:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 514:./lib/chibios/os/hal/osal/rt/osal.h **** 
 515:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 516:./lib/chibios/os/hal/osal/rt/osal.h **** }
 517:./lib/chibios/os/hal/osal/rt/osal.h **** 
 518:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 519:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 520:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 521:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 522:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 523:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 524:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 525:./lib/chibios/os/hal/osal/rt/osal.h **** 
 526:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 527:./lib/chibios/os/hal/osal/rt/osal.h **** }
 528:./lib/chibios/os/hal/osal/rt/osal.h **** 
 529:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 530:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 531:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 532:./lib/chibios/os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 533:./lib/chibios/os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 534:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is known.
 535:./lib/chibios/os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 536:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 537:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 538:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 539:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 540:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 541:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 542:./lib/chibios/os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 543:./lib/chibios/os/hal/osal/rt/osal.h **** 
 544:./lib/chibios/os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 545:./lib/chibios/os/hal/osal/rt/osal.h **** }
 546:./lib/chibios/os/hal/osal/rt/osal.h **** 
 547:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 548:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 549:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 550:./lib/chibios/os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 551:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 552:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 553:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 554:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 555:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 556:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 557:./lib/chibios/os/hal/osal/rt/osal.h **** 
 558:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 559:./lib/chibios/os/hal/osal/rt/osal.h **** }
 560:./lib/chibios/os/hal/osal/rt/osal.h **** 
 561:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 562:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 563:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 564:./lib/chibios/os/hal/osal/rt/osal.h ****  *          value.
 565:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 566:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 567:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 568:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 569:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 570:./lib/chibios/os/hal/osal/rt/osal.h **** #if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
 571:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 572:./lib/chibios/os/hal/osal/rt/osal.h **** 
 573:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 574:./lib/chibios/os/hal/osal/rt/osal.h **** }
 575:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 576:./lib/chibios/os/hal/osal/rt/osal.h **** 
 577:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 578:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 579:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 580:./lib/chibios/os/hal/osal/rt/osal.h ****  *          service from the HAL.
 581:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 582:./lib/chibios/os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 583:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 584:./lib/chibios/os/hal/osal/rt/osal.h **** 
 585:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 586:./lib/chibios/os/hal/osal/rt/osal.h **** }
 587:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 588:./lib/chibios/os/hal/osal/rt/osal.h **** 
 589:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 590:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 591:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 592:./lib/chibios/os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 593:./lib/chibios/os/hal/osal/rt/osal.h ****  *          required in this scenario.
 594:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 595:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 596:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 597:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 598:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 599:./lib/chibios/os/hal/osal/rt/osal.h **** 
 600:./lib/chibios/os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 601:./lib/chibios/os/hal/osal/rt/osal.h **** }
 602:./lib/chibios/os/hal/osal/rt/osal.h **** 
 603:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 604:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 605:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 606:./lib/chibios/os/hal/osal/rt/osal.h ****  *          invocation.
 607:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 608:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 609:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 610:./lib/chibios/os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 611:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 612:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 613:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 614:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 615:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 616:./lib/chibios/os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 617:./lib/chibios/os/hal/osal/rt/osal.h **** 
 618:./lib/chibios/os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 619:./lib/chibios/os/hal/osal/rt/osal.h **** }
 620:./lib/chibios/os/hal/osal/rt/osal.h **** 
 621:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 622:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 623:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 624:./lib/chibios/os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 625:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 626:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 627:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 628:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 629:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 630:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 631:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 632:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 633:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 634:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 635:./lib/chibios/os/hal/osal/rt/osal.h **** static inline bool osalOsIsTimeWithinX(systime_t time,
 636:./lib/chibios/os/hal/osal/rt/osal.h ****                                        systime_t start,
 637:./lib/chibios/os/hal/osal/rt/osal.h ****                                        systime_t end) {
 638:./lib/chibios/os/hal/osal/rt/osal.h **** 
 639:./lib/chibios/os/hal/osal/rt/osal.h ****   return chVTIsTimeWithinX(time, start, end);
 640:./lib/chibios/os/hal/osal/rt/osal.h **** }
 641:./lib/chibios/os/hal/osal/rt/osal.h **** 
 642:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 643:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 644:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 645:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 646:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 647:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 648:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        normal time specification.
 649:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 650:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 651:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 652:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 653:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 654:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(systime_t time) {
 655:./lib/chibios/os/hal/osal/rt/osal.h **** 
 656:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdSleepS(time);
 657:./lib/chibios/os/hal/osal/rt/osal.h **** }
 658:./lib/chibios/os/hal/osal/rt/osal.h **** 
 659:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 660:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 661:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 662:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 663:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 664:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 665:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        normal time specification.
 666:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 667:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 668:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 669:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 670:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 671:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(systime_t time) {
 672:./lib/chibios/os/hal/osal/rt/osal.h **** 
 673:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdSleep(time);
 674:./lib/chibios/os/hal/osal/rt/osal.h **** }
 675:./lib/chibios/os/hal/osal/rt/osal.h **** 
 676:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 677:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 678:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 679:./lib/chibios/os/hal/osal/rt/osal.h ****  *          context.
 680:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 681:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 682:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 683:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 684:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 685:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 686:./lib/chibios/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 687:./lib/chibios/os/hal/osal/rt/osal.h **** 
 688:./lib/chibios/os/hal/osal/rt/osal.h ****   return chThdSuspendS(trp);
 689:./lib/chibios/os/hal/osal/rt/osal.h **** }
 690:./lib/chibios/os/hal/osal/rt/osal.h **** 
 691:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 692:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 693:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 694:./lib/chibios/os/hal/osal/rt/osal.h ****  *          context.
 695:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 696:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 697:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 698:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 699:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 700:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        state.
 701:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 702:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 703:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        occurred.
 704:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 705:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 706:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 707:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 708:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 709:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 710:./lib/chibios/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 711:./lib/chibios/os/hal/osal/rt/osal.h ****                                               systime_t timeout) {
 712:./lib/chibios/os/hal/osal/rt/osal.h **** 
 713:./lib/chibios/os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 714:./lib/chibios/os/hal/osal/rt/osal.h **** }
 715:./lib/chibios/os/hal/osal/rt/osal.h **** 
 716:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 717:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 718:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must not reschedule because it can be called from
 719:./lib/chibios/os/hal/osal/rt/osal.h ****  *          ISR context.
 720:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 721:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 722:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 723:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 724:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 725:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 726:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 727:./lib/chibios/os/hal/osal/rt/osal.h **** 
 728:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdResumeI(trp, msg);
 729:./lib/chibios/os/hal/osal/rt/osal.h **** }
 730:./lib/chibios/os/hal/osal/rt/osal.h **** 
 731:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 732:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 733:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 734:./lib/chibios/os/hal/osal/rt/osal.h ****  *          context.
 735:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 736:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 737:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 738:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 739:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 740:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 741:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 742:./lib/chibios/os/hal/osal/rt/osal.h **** 
 743:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdResumeS(trp, msg);
 744:./lib/chibios/os/hal/osal/rt/osal.h **** }
 745:./lib/chibios/os/hal/osal/rt/osal.h **** 
 746:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 747:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Initializes a threads queue object.
 748:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 749:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 750:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 751:./lib/chibios/os/hal/osal/rt/osal.h ****  * @init
 752:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 753:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 754:./lib/chibios/os/hal/osal/rt/osal.h **** 
 755:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdQueueObjectInit(tqp);
 756:./lib/chibios/os/hal/osal/rt/osal.h **** }
 757:./lib/chibios/os/hal/osal/rt/osal.h **** 
 758:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 759:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enqueues the caller thread.
 760:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 761:./lib/chibios/os/hal/osal/rt/osal.h ****  *          dequeued or the specified timeouts expires.
 762:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 763:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 764:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the timeout in system ticks, the special values are
 765:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 766:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 767:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        state.
 768:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 769:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 770:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        occurred.
 771:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 772:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 773:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 774:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 775:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      specified timeout or if the function has been
 776:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 777:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      specification.
 778:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 779:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 780:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 781:./lib/chibios/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 782:./lib/chibios/os/hal/osal/rt/osal.h ****                                               systime_t time) {
 783:./lib/chibios/os/hal/osal/rt/osal.h **** 
 784:./lib/chibios/os/hal/osal/rt/osal.h ****   return chThdEnqueueTimeoutS(tqp, time);
 785:./lib/chibios/os/hal/osal/rt/osal.h **** }
 786:./lib/chibios/os/hal/osal/rt/osal.h **** 
 787:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 788:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 789:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 790:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 791:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 792:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 793:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 794:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 795:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 796:./lib/chibios/os/hal/osal/rt/osal.h **** 
 797:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdDequeueNextI(tqp, msg);
 798:./lib/chibios/os/hal/osal/rt/osal.h **** }
 799:./lib/chibios/os/hal/osal/rt/osal.h **** 
 800:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 801:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 802:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 803:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 804:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 805:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 806:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 807:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 808:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 809:./lib/chibios/os/hal/osal/rt/osal.h **** 
 810:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdDequeueAllI(tqp, msg);
 811:./lib/chibios/os/hal/osal/rt/osal.h **** }
 812:./lib/chibios/os/hal/osal/rt/osal.h **** 
 813:./lib/chibios/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
 814:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 815:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Initializes an event flags object.
 816:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 817:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[out] esp      pointer to the event flags object
 818:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 819:./lib/chibios/os/hal/osal/rt/osal.h ****  * @init
 820:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 821:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalEventObjectInit(event_source_t *esp) {
 822:./lib/chibios/os/hal/osal/rt/osal.h **** 
 823:./lib/chibios/os/hal/osal/rt/osal.h ****   chEvtObjectInit(esp);
 824:./lib/chibios/os/hal/osal/rt/osal.h **** }
 825:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 826:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalEventObjectInit(event_source_t *esp) {
 827:./lib/chibios/os/hal/osal/rt/osal.h **** 
 828:./lib/chibios/os/hal/osal/rt/osal.h ****   esp->flags = 0;
 829:./lib/chibios/os/hal/osal/rt/osal.h **** }
 830:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 831:./lib/chibios/os/hal/osal/rt/osal.h **** 
 832:./lib/chibios/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
 833:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 834:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Add flags to an event source object.
 835:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 836:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] esp       pointer to the event flags object
 837:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] flags     flags to be ORed to the flags mask
 838:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 839:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 840:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 841:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalEventBroadcastFlagsI(event_source_t *esp,
 842:./lib/chibios/os/hal/osal/rt/osal.h ****                                             eventflags_t flags) {
 843:./lib/chibios/os/hal/osal/rt/osal.h **** 
 844:./lib/chibios/os/hal/osal/rt/osal.h ****   chEvtBroadcastFlagsI(esp, flags);
 845:./lib/chibios/os/hal/osal/rt/osal.h **** }
 846:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 847:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalEventBroadcastFlagsI(event_source_t *esp,
 848:./lib/chibios/os/hal/osal/rt/osal.h ****                                             eventflags_t flags) {
 849:./lib/chibios/os/hal/osal/rt/osal.h **** 
 850:./lib/chibios/os/hal/osal/rt/osal.h ****   esp->flags |= flags;
 851:./lib/chibios/os/hal/osal/rt/osal.h **** }
 852:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 853:./lib/chibios/os/hal/osal/rt/osal.h **** 
 854:./lib/chibios/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
 855:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 856:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Add flags to an event source object.
 857:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 858:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] esp       pointer to the event flags object
 859:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] flags     flags to be ORed to the flags mask
 860:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 861:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 862:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 863:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalEventBroadcastFlags(event_source_t *esp,
 864:./lib/chibios/os/hal/osal/rt/osal.h ****                                            eventflags_t flags) {
 865:./lib/chibios/os/hal/osal/rt/osal.h **** 
 866:./lib/chibios/os/hal/osal/rt/osal.h ****   chEvtBroadcastFlags(esp, flags);
 867:./lib/chibios/os/hal/osal/rt/osal.h **** }
 868:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 869:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalEventBroadcastFlags(event_source_t *esp,
 870:./lib/chibios/os/hal/osal/rt/osal.h ****                                             eventflags_t flags) {
 871:./lib/chibios/os/hal/osal/rt/osal.h ****   osalSysLock();
 872:./lib/chibios/os/hal/osal/rt/osal.h ****   esp->flags |= flags;
 873:./lib/chibios/os/hal/osal/rt/osal.h ****   osalSysUnlock();
 874:./lib/chibios/os/hal/osal/rt/osal.h **** }
 875:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 876:./lib/chibios/os/hal/osal/rt/osal.h **** 
 877:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 878:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Initializes s @p mutex_t object.
 879:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 880:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[out] mp       pointer to the @p mutex_t object
 881:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 882:./lib/chibios/os/hal/osal/rt/osal.h ****  * @init
 883:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 884:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalMutexObjectInit(mutex_t *mp) {
 885:./lib/chibios/os/hal/osal/rt/osal.h **** 
 886:./lib/chibios/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES
 887:./lib/chibios/os/hal/osal/rt/osal.h ****   chMtxObjectInit(mp);
  63              		.loc 2 887 0
  64 0008 0C30     		adds	r0, r0, #12
  65              	.LVL3:
  66 000a FFF7FEBF 		b	chMtxObjectInit
  67              	.LVL4:
  68              	.LBE83:
  69              	.LBE82:
  70              		.cfi_endproc
  71              	.LFE280:
  73              		.section	.text.i2cStart,"ax",%progbits
  74              		.align	1
  75              		.global	i2cStart
  76              		.syntax unified
  77              		.thumb
  78              		.thumb_func
  79              		.fpu softvfp
  81              	i2cStart:
  82              	.LFB281:
  75:lib/chibios/os/hal/src/hal_i2c.c **** 
  76:lib/chibios/os/hal/src/hal_i2c.c **** #if I2C_USE_MUTUAL_EXCLUSION == TRUE
  77:lib/chibios/os/hal/src/hal_i2c.c ****   osalMutexObjectInit(&i2cp->mutex);
  78:lib/chibios/os/hal/src/hal_i2c.c **** #endif
  79:lib/chibios/os/hal/src/hal_i2c.c **** 
  80:lib/chibios/os/hal/src/hal_i2c.c **** #if defined(I2C_DRIVER_EXT_INIT_HOOK)
  81:lib/chibios/os/hal/src/hal_i2c.c ****   I2C_DRIVER_EXT_INIT_HOOK(i2cp);
  82:lib/chibios/os/hal/src/hal_i2c.c **** #endif
  83:lib/chibios/os/hal/src/hal_i2c.c **** }
  84:lib/chibios/os/hal/src/hal_i2c.c **** 
  85:lib/chibios/os/hal/src/hal_i2c.c **** /**
  86:lib/chibios/os/hal/src/hal_i2c.c ****  * @brief   Configures and activates the I2C peripheral.
  87:lib/chibios/os/hal/src/hal_i2c.c ****  *
  88:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[in] i2cp      pointer to the @p I2CDriver object
  89:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[in] config    pointer to the @p I2CConfig object
  90:lib/chibios/os/hal/src/hal_i2c.c ****  *
  91:lib/chibios/os/hal/src/hal_i2c.c ****  * @api
  92:lib/chibios/os/hal/src/hal_i2c.c ****  */
  93:lib/chibios/os/hal/src/hal_i2c.c **** void i2cStart(I2CDriver *i2cp, const I2CConfig *config) {
  83              		.loc 1 93 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              	.LVL5:
  88 0000 10B5     		push	{r4, lr}
  89              		.cfi_def_cfa_offset 8
  90              		.cfi_offset 4, -8
  91              		.cfi_offset 14, -4
  92              	.LBB84:
  93              	.LBB85:
  94              	.LBB86:
  95              	.LBB87:
  96              	.LBB88:
  97              		.file 3 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @version  V4.30
   5:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
   9:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    All rights reserved.
  10:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      specific prior written permission.
  20:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    *
  21:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  35:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  38:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #endif
  45:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  46:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  47:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   @{
  51:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  52:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  53:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  54:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  58:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  60:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  62:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  63:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  64:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  65:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  69:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  71:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  73:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  74:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  75:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  76:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Control Register value
  79:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  80:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  82:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
  83:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  84:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
  86:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  87:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  88:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  89:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  90:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  94:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  96:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  98:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  99:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 100:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 101:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 105:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 107:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 108:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 109:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 111:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 112:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 113:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 114:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 115:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               APSR Register value
 118:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 119:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 121:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 122:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 123:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 125:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 126:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 127:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 128:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 129:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 132:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 134:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 136:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 137:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 138:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 140:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 141:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 142:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 143:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 144:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               PSP Register value
 147:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 148:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 150:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 151:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 154:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 155:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 156:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 157:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 158:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 162:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 164:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 166:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 167:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 168:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 169:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               MSP Register value
 172:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 173:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 175:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 176:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 177:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 179:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 180:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 181:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 182:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 183:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 188:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 190:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 192:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 193:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 194:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 195:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 199:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 201:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 202:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 203:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 205:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 206:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 207:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 208:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 209:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 213:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 215:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 217:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 218:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 219:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 221:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 222:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 226:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 228:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 230:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 231:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 232:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 233:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 237:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 239:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 241:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 243:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 244:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 248:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 250:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 251:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 252:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 254:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 255:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 257:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
  98              		.loc 3 264 0
  99 0002 2023     		movs	r3, #32
 100              	.LBE88:
 101              	.LBE87:
 102              	.LBE86:
 103              	.LBE85:
 104              	.LBE84:
 105              		.loc 1 93 0
 106 0004 0446     		mov	r4, r0
 107              	.LBB93:
 108              	.LBB92:
 109              	.LBB91:
 110              	.LBB90:
 111              	.LBB89:
 112              		.loc 3 264 0
 113              		.syntax unified
 114              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 115 0006 83F31188 		MSR basepri, r3
 116              	@ 0 "" 2
 117              	.LVL6:
 118              		.thumb
 119              		.syntax unified
 120              	.LBE89:
 121              	.LBE90:
 122              	.LBE91:
 123              	.LBE92:
 124              	.LBE93:
  94:lib/chibios/os/hal/src/hal_i2c.c **** 
  95:lib/chibios/os/hal/src/hal_i2c.c ****   osalDbgCheck((i2cp != NULL) && (config != NULL));
  96:lib/chibios/os/hal/src/hal_i2c.c ****   osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
  97:lib/chibios/os/hal/src/hal_i2c.c ****                 (i2cp->state == I2C_LOCKED), "invalid state");
  98:lib/chibios/os/hal/src/hal_i2c.c **** 
  99:lib/chibios/os/hal/src/hal_i2c.c ****   osalSysLock();
 100:lib/chibios/os/hal/src/hal_i2c.c ****   i2cp->config = config;
 125              		.loc 1 100 0
 126 000a 4160     		str	r1, [r0, #4]
 101:lib/chibios/os/hal/src/hal_i2c.c ****   i2c_lld_start(i2cp);
 127              		.loc 1 101 0
 128 000c FFF7FEFF 		bl	i2c_lld_start
 129              	.LVL7:
 102:lib/chibios/os/hal/src/hal_i2c.c ****   i2cp->state = I2C_READY;
 130              		.loc 1 102 0
 131 0010 0223     		movs	r3, #2
 132 0012 2370     		strb	r3, [r4]
 133              	.LVL8:
 134              	.LBB94:
 135              	.LBB95:
 136              	.LBB96:
 137              	.LBB97:
 138              	.LBB98:
 139              	.LBB99:
 140              		.loc 3 264 0
 141 0014 0023     		movs	r3, #0
 142              		.syntax unified
 143              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 144 0016 83F31188 		MSR basepri, r3
 145              	@ 0 "" 2
 146              	.LVL9:
 147              		.thumb
 148              		.syntax unified
 149              	.LBE99:
 150              	.LBE98:
 151              	.LBE97:
 152              	.LBE96:
 153              	.LBE95:
 154              	.LBE94:
 103:lib/chibios/os/hal/src/hal_i2c.c ****   osalSysUnlock();
 104:lib/chibios/os/hal/src/hal_i2c.c **** }
 155              		.loc 1 104 0
 156 001a 10BD     		pop	{r4, pc}
 157              		.cfi_endproc
 158              	.LFE281:
 160              		.section	.text.i2cStop,"ax",%progbits
 161              		.align	1
 162              		.global	i2cStop
 163              		.syntax unified
 164              		.thumb
 165              		.thumb_func
 166              		.fpu softvfp
 168              	i2cStop:
 169              	.LFB282:
 105:lib/chibios/os/hal/src/hal_i2c.c **** 
 106:lib/chibios/os/hal/src/hal_i2c.c **** /**
 107:lib/chibios/os/hal/src/hal_i2c.c ****  * @brief   Deactivates the I2C peripheral.
 108:lib/chibios/os/hal/src/hal_i2c.c ****  *
 109:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[in] i2cp      pointer to the @p I2CDriver object
 110:lib/chibios/os/hal/src/hal_i2c.c ****  *
 111:lib/chibios/os/hal/src/hal_i2c.c ****  * @api
 112:lib/chibios/os/hal/src/hal_i2c.c ****  */
 113:lib/chibios/os/hal/src/hal_i2c.c **** void i2cStop(I2CDriver *i2cp) {
 170              		.loc 1 113 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              	.LVL10:
 175 0000 10B5     		push	{r4, lr}
 176              		.cfi_def_cfa_offset 8
 177              		.cfi_offset 4, -8
 178              		.cfi_offset 14, -4
 179              	.LBB100:
 180              	.LBB101:
 181              	.LBB102:
 182              	.LBB103:
 183              	.LBB104:
 184              		.loc 3 264 0
 185 0002 2023     		movs	r3, #32
 186              	.LBE104:
 187              	.LBE103:
 188              	.LBE102:
 189              	.LBE101:
 190              	.LBE100:
 191              		.loc 1 113 0
 192 0004 0446     		mov	r4, r0
 193              	.LBB109:
 194              	.LBB108:
 195              	.LBB107:
 196              	.LBB106:
 197              	.LBB105:
 198              		.loc 3 264 0
 199              		.syntax unified
 200              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 201 0006 83F31188 		MSR basepri, r3
 202              	@ 0 "" 2
 203              	.LVL11:
 204              		.thumb
 205              		.syntax unified
 206              	.LBE105:
 207              	.LBE106:
 208              	.LBE107:
 209              	.LBE108:
 210              	.LBE109:
 114:lib/chibios/os/hal/src/hal_i2c.c **** 
 115:lib/chibios/os/hal/src/hal_i2c.c ****   osalDbgCheck(i2cp != NULL);
 116:lib/chibios/os/hal/src/hal_i2c.c **** 
 117:lib/chibios/os/hal/src/hal_i2c.c ****   osalSysLock();
 118:lib/chibios/os/hal/src/hal_i2c.c **** 
 119:lib/chibios/os/hal/src/hal_i2c.c ****   osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
 120:lib/chibios/os/hal/src/hal_i2c.c ****                 (i2cp->state == I2C_LOCKED), "invalid state");
 121:lib/chibios/os/hal/src/hal_i2c.c **** 
 122:lib/chibios/os/hal/src/hal_i2c.c ****   i2c_lld_stop(i2cp);
 211              		.loc 1 122 0
 212 000a FFF7FEFF 		bl	i2c_lld_stop
 213              	.LVL12:
 123:lib/chibios/os/hal/src/hal_i2c.c ****   i2cp->config = NULL;
 214              		.loc 1 123 0
 215 000e 0023     		movs	r3, #0
 124:lib/chibios/os/hal/src/hal_i2c.c ****   i2cp->state  = I2C_STOP;
 216              		.loc 1 124 0
 217 0010 0122     		movs	r2, #1
 123:lib/chibios/os/hal/src/hal_i2c.c ****   i2cp->config = NULL;
 218              		.loc 1 123 0
 219 0012 6360     		str	r3, [r4, #4]
 220              		.loc 1 124 0
 221 0014 2270     		strb	r2, [r4]
 222              	.LVL13:
 223              	.LBB110:
 224              	.LBB111:
 225              	.LBB112:
 226              	.LBB113:
 227              	.LBB114:
 228              	.LBB115:
 229              		.loc 3 264 0
 230              		.syntax unified
 231              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 232 0016 83F31188 		MSR basepri, r3
 233              	@ 0 "" 2
 234              	.LVL14:
 235              		.thumb
 236              		.syntax unified
 237              	.LBE115:
 238              	.LBE114:
 239              	.LBE113:
 240              	.LBE112:
 241              	.LBE111:
 242              	.LBE110:
 125:lib/chibios/os/hal/src/hal_i2c.c **** 
 126:lib/chibios/os/hal/src/hal_i2c.c ****   osalSysUnlock();
 127:lib/chibios/os/hal/src/hal_i2c.c **** }
 243              		.loc 1 127 0
 244 001a 10BD     		pop	{r4, pc}
 245              		.cfi_endproc
 246              	.LFE282:
 248              		.section	.text.i2cGetErrors,"ax",%progbits
 249              		.align	1
 250              		.global	i2cGetErrors
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 254              		.fpu softvfp
 256              	i2cGetErrors:
 257              	.LFB283:
 128:lib/chibios/os/hal/src/hal_i2c.c **** 
 129:lib/chibios/os/hal/src/hal_i2c.c **** /**
 130:lib/chibios/os/hal/src/hal_i2c.c ****  * @brief   Returns the errors mask associated to the previous operation.
 131:lib/chibios/os/hal/src/hal_i2c.c ****  *
 132:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[in] i2cp      pointer to the @p I2CDriver object
 133:lib/chibios/os/hal/src/hal_i2c.c ****  * @return              The errors mask.
 134:lib/chibios/os/hal/src/hal_i2c.c ****  *
 135:lib/chibios/os/hal/src/hal_i2c.c ****  * @api
 136:lib/chibios/os/hal/src/hal_i2c.c ****  */
 137:lib/chibios/os/hal/src/hal_i2c.c **** i2cflags_t i2cGetErrors(I2CDriver *i2cp) {
 258              		.loc 1 137 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              		@ link register save eliminated.
 263              	.LVL15:
 138:lib/chibios/os/hal/src/hal_i2c.c **** 
 139:lib/chibios/os/hal/src/hal_i2c.c ****   osalDbgCheck(i2cp != NULL);
 140:lib/chibios/os/hal/src/hal_i2c.c **** 
 141:lib/chibios/os/hal/src/hal_i2c.c ****   return i2c_lld_get_errors(i2cp);
 142:lib/chibios/os/hal/src/hal_i2c.c **** }
 264              		.loc 1 142 0
 265 0000 8068     		ldr	r0, [r0, #8]
 266              	.LVL16:
 267 0002 7047     		bx	lr
 268              		.cfi_endproc
 269              	.LFE283:
 271              		.section	.text.i2cMasterTransmitTimeout,"ax",%progbits
 272              		.align	1
 273              		.global	i2cMasterTransmitTimeout
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 277              		.fpu softvfp
 279              	i2cMasterTransmitTimeout:
 280              	.LFB284:
 143:lib/chibios/os/hal/src/hal_i2c.c **** 
 144:lib/chibios/os/hal/src/hal_i2c.c **** /**
 145:lib/chibios/os/hal/src/hal_i2c.c ****  * @brief   Sends data via the I2C bus.
 146:lib/chibios/os/hal/src/hal_i2c.c ****  * @details Function designed to realize "read-through-write" transfer
 147:lib/chibios/os/hal/src/hal_i2c.c ****  *          paradigm. If you want transmit data without any further read,
 148:lib/chibios/os/hal/src/hal_i2c.c ****  *          than set @b rxbytes field to 0.
 149:lib/chibios/os/hal/src/hal_i2c.c ****  *
 150:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[in] i2cp      pointer to the @p I2CDriver object
 151:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[in] addr      slave device address (7 bits) without R/W bit
 152:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[in] txbuf     pointer to transmit buffer
 153:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[in] txbytes   number of bytes to be transmitted
 154:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[out] rxbuf    pointer to receive buffer
 155:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[in] rxbytes   number of bytes to be received, set it to 0 if
 156:lib/chibios/os/hal/src/hal_i2c.c ****  *                      you want transmit only
 157:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 158:lib/chibios/os/hal/src/hal_i2c.c ****  *                      the following special values are allowed:
 159:lib/chibios/os/hal/src/hal_i2c.c ****  *                      - @a TIME_INFINITE no timeout.
 160:lib/chibios/os/hal/src/hal_i2c.c ****  *                      .
 161:lib/chibios/os/hal/src/hal_i2c.c ****  *
 162:lib/chibios/os/hal/src/hal_i2c.c ****  * @return              The operation status.
 163:lib/chibios/os/hal/src/hal_i2c.c ****  * @retval MSG_OK       if the function succeeded.
 164:lib/chibios/os/hal/src/hal_i2c.c ****  * @retval MSG_RESET    if one or more I2C errors occurred, the errors can
 165:lib/chibios/os/hal/src/hal_i2c.c ****  *                      be retrieved using @p i2cGetErrors().
 166:lib/chibios/os/hal/src/hal_i2c.c ****  * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 167:lib/chibios/os/hal/src/hal_i2c.c ****  *
 168:lib/chibios/os/hal/src/hal_i2c.c ****  * @api
 169:lib/chibios/os/hal/src/hal_i2c.c ****  */
 170:lib/chibios/os/hal/src/hal_i2c.c **** msg_t i2cMasterTransmitTimeout(I2CDriver *i2cp,
 171:lib/chibios/os/hal/src/hal_i2c.c ****                                i2caddr_t addr,
 172:lib/chibios/os/hal/src/hal_i2c.c ****                                const uint8_t *txbuf,
 173:lib/chibios/os/hal/src/hal_i2c.c ****                                size_t txbytes,
 174:lib/chibios/os/hal/src/hal_i2c.c ****                                uint8_t *rxbuf,
 175:lib/chibios/os/hal/src/hal_i2c.c ****                                size_t rxbytes,
 176:lib/chibios/os/hal/src/hal_i2c.c ****                                systime_t timeout) {
 281              		.loc 1 176 0
 282              		.cfi_startproc
 283              		@ args = 12, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              	.LVL17:
 286 0000 7FB5     		push	{r0, r1, r2, r3, r4, r5, r6, lr}
 287              		.cfi_def_cfa_offset 32
 288              		.cfi_offset 4, -16
 289              		.cfi_offset 5, -12
 290              		.cfi_offset 6, -8
 291              		.cfi_offset 14, -4
 292              		.loc 1 176 0
 293 0002 0546     		mov	r5, r0
 294              	.LBB116:
 295              	.LBB117:
 296              	.LBB118:
 297              	.LBB119:
 298              	.LBB120:
 299              		.loc 3 264 0
 300 0004 2024     		movs	r4, #32
 301              		.syntax unified
 302              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 303 0006 84F31188 		MSR basepri, r4
 304              	@ 0 "" 2
 305              	.LVL18:
 306              		.thumb
 307              		.syntax unified
 308              	.LBE120:
 309              	.LBE119:
 310              	.LBE118:
 311              	.LBE117:
 312              	.LBE116:
 177:lib/chibios/os/hal/src/hal_i2c.c ****   msg_t rdymsg;
 178:lib/chibios/os/hal/src/hal_i2c.c **** 
 179:lib/chibios/os/hal/src/hal_i2c.c ****   osalDbgCheck((i2cp != NULL) && (addr != 0U) &&
 180:lib/chibios/os/hal/src/hal_i2c.c ****                (txbytes > 0U) && (txbuf != NULL) &&
 181:lib/chibios/os/hal/src/hal_i2c.c ****                ((rxbytes == 0U) || ((rxbytes > 0U) && (rxbuf != NULL))) &&
 182:lib/chibios/os/hal/src/hal_i2c.c ****                (timeout != TIME_IMMEDIATE));
 183:lib/chibios/os/hal/src/hal_i2c.c **** 
 184:lib/chibios/os/hal/src/hal_i2c.c ****   osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 185:lib/chibios/os/hal/src/hal_i2c.c **** 
 186:lib/chibios/os/hal/src/hal_i2c.c ****   osalSysLock();
 187:lib/chibios/os/hal/src/hal_i2c.c ****   i2cp->errors = I2C_NO_ERROR;
 188:lib/chibios/os/hal/src/hal_i2c.c ****   i2cp->state = I2C_ACTIVE_TX;
 313              		.loc 1 188 0
 314 000a 0326     		movs	r6, #3
 315 000c 0670     		strb	r6, [r0]
 187:lib/chibios/os/hal/src/hal_i2c.c ****   i2cp->state = I2C_ACTIVE_TX;
 316              		.loc 1 187 0
 317 000e 0024     		movs	r4, #0
 189:lib/chibios/os/hal/src/hal_i2c.c ****   rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 318              		.loc 1 189 0
 319 0010 0A9E     		ldr	r6, [sp, #40]
 187:lib/chibios/os/hal/src/hal_i2c.c ****   i2cp->state = I2C_ACTIVE_TX;
 320              		.loc 1 187 0
 321 0012 8460     		str	r4, [r0, #8]
 322              		.loc 1 189 0
 323 0014 0296     		str	r6, [sp, #8]
 324 0016 099E     		ldr	r6, [sp, #36]
 325 0018 0196     		str	r6, [sp, #4]
 326 001a 089E     		ldr	r6, [sp, #32]
 327 001c 0096     		str	r6, [sp]
 328 001e FFF7FEFF 		bl	i2c_lld_master_transmit_timeout
 329              	.LVL19:
 190:lib/chibios/os/hal/src/hal_i2c.c ****                                            rxbuf, rxbytes, timeout);
 191:lib/chibios/os/hal/src/hal_i2c.c ****   if (rdymsg == MSG_TIMEOUT) {
 330              		.loc 1 191 0
 331 0022 431C     		adds	r3, r0, #1
 192:lib/chibios/os/hal/src/hal_i2c.c ****     i2cp->state = I2C_LOCKED;
 332              		.loc 1 192 0
 333 0024 0CBF     		ite	eq
 334 0026 0523     		moveq	r3, #5
 193:lib/chibios/os/hal/src/hal_i2c.c ****   }
 194:lib/chibios/os/hal/src/hal_i2c.c ****   else {
 195:lib/chibios/os/hal/src/hal_i2c.c ****     i2cp->state = I2C_READY;
 335              		.loc 1 195 0
 336 0028 0223     		movne	r3, #2
 337 002a 2B70     		strb	r3, [r5]
 338              	.LVL20:
 339              	.LBB121:
 340              	.LBB122:
 341              	.LBB123:
 342              	.LBB124:
 343              	.LBB125:
 344              	.LBB126:
 345              		.loc 3 264 0
 346              		.syntax unified
 347              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 348 002c 84F31188 		MSR basepri, r4
 349              	@ 0 "" 2
 350              	.LVL21:
 351              		.thumb
 352              		.syntax unified
 353              	.LBE126:
 354              	.LBE125:
 355              	.LBE124:
 356              	.LBE123:
 357              	.LBE122:
 358              	.LBE121:
 196:lib/chibios/os/hal/src/hal_i2c.c ****   }
 197:lib/chibios/os/hal/src/hal_i2c.c ****   osalSysUnlock();
 198:lib/chibios/os/hal/src/hal_i2c.c ****   return rdymsg;
 199:lib/chibios/os/hal/src/hal_i2c.c **** }
 359              		.loc 1 199 0
 360 0030 04B0     		add	sp, sp, #16
 361              		.cfi_def_cfa_offset 16
 362              		@ sp needed
 363 0032 70BD     		pop	{r4, r5, r6, pc}
 364              		.cfi_endproc
 365              	.LFE284:
 367              		.section	.text.i2cMasterReceiveTimeout,"ax",%progbits
 368              		.align	1
 369              		.global	i2cMasterReceiveTimeout
 370              		.syntax unified
 371              		.thumb
 372              		.thumb_func
 373              		.fpu softvfp
 375              	i2cMasterReceiveTimeout:
 376              	.LFB285:
 200:lib/chibios/os/hal/src/hal_i2c.c **** 
 201:lib/chibios/os/hal/src/hal_i2c.c **** /**
 202:lib/chibios/os/hal/src/hal_i2c.c ****  * @brief   Receives data from the I2C bus.
 203:lib/chibios/os/hal/src/hal_i2c.c ****  *
 204:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[in] i2cp      pointer to the @p I2CDriver object
 205:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[in] addr      slave device address (7 bits) without R/W bit
 206:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[out] rxbuf    pointer to receive buffer
 207:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[in] rxbytes   number of bytes to be received
 208:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 209:lib/chibios/os/hal/src/hal_i2c.c ****  *                      the following special values are allowed:
 210:lib/chibios/os/hal/src/hal_i2c.c ****  *                      - @a TIME_INFINITE no timeout.
 211:lib/chibios/os/hal/src/hal_i2c.c ****  *                      .
 212:lib/chibios/os/hal/src/hal_i2c.c ****  *
 213:lib/chibios/os/hal/src/hal_i2c.c ****  * @return              The operation status.
 214:lib/chibios/os/hal/src/hal_i2c.c ****  * @retval MSG_OK       if the function succeeded.
 215:lib/chibios/os/hal/src/hal_i2c.c ****  * @retval MSG_RESET    if one or more I2C errors occurred, the errors can
 216:lib/chibios/os/hal/src/hal_i2c.c ****  *                      be retrieved using @p i2cGetErrors().
 217:lib/chibios/os/hal/src/hal_i2c.c ****  * @retval MSG_TIMEOUT  if a timeout occurred before operation end.
 218:lib/chibios/os/hal/src/hal_i2c.c ****  *
 219:lib/chibios/os/hal/src/hal_i2c.c ****  * @api
 220:lib/chibios/os/hal/src/hal_i2c.c ****  */
 221:lib/chibios/os/hal/src/hal_i2c.c **** msg_t i2cMasterReceiveTimeout(I2CDriver *i2cp,
 222:lib/chibios/os/hal/src/hal_i2c.c ****                               i2caddr_t addr,
 223:lib/chibios/os/hal/src/hal_i2c.c ****                               uint8_t *rxbuf,
 224:lib/chibios/os/hal/src/hal_i2c.c ****                               size_t rxbytes,
 225:lib/chibios/os/hal/src/hal_i2c.c ****                               systime_t timeout){
 377              		.loc 1 225 0
 378              		.cfi_startproc
 379              		@ args = 4, pretend = 0, frame = 0
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381              	.LVL22:
 382 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
 383              		.cfi_def_cfa_offset 24
 384              		.cfi_offset 4, -16
 385              		.cfi_offset 5, -12
 386              		.cfi_offset 6, -8
 387              		.cfi_offset 14, -4
 388              		.loc 1 225 0
 389 0002 0546     		mov	r5, r0
 390              	.LBB127:
 391              	.LBB128:
 392              	.LBB129:
 393              	.LBB130:
 394              	.LBB131:
 395              		.loc 3 264 0
 396 0004 2024     		movs	r4, #32
 397              		.syntax unified
 398              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 399 0006 84F31188 		MSR basepri, r4
 400              	@ 0 "" 2
 401              	.LVL23:
 402              		.thumb
 403              		.syntax unified
 404              	.LBE131:
 405              	.LBE130:
 406              	.LBE129:
 407              	.LBE128:
 408              	.LBE127:
 226:lib/chibios/os/hal/src/hal_i2c.c **** 
 227:lib/chibios/os/hal/src/hal_i2c.c ****   msg_t rdymsg;
 228:lib/chibios/os/hal/src/hal_i2c.c **** 
 229:lib/chibios/os/hal/src/hal_i2c.c ****   osalDbgCheck((i2cp != NULL) && (addr != 0U) &&
 230:lib/chibios/os/hal/src/hal_i2c.c ****                (rxbytes > 0U) && (rxbuf != NULL) &&
 231:lib/chibios/os/hal/src/hal_i2c.c ****                (timeout != TIME_IMMEDIATE));
 232:lib/chibios/os/hal/src/hal_i2c.c **** 
 233:lib/chibios/os/hal/src/hal_i2c.c ****   osalDbgAssert(i2cp->state == I2C_READY, "not ready");
 234:lib/chibios/os/hal/src/hal_i2c.c **** 
 235:lib/chibios/os/hal/src/hal_i2c.c ****   osalSysLock();
 236:lib/chibios/os/hal/src/hal_i2c.c ****   i2cp->errors = I2C_NO_ERROR;
 237:lib/chibios/os/hal/src/hal_i2c.c ****   i2cp->state = I2C_ACTIVE_RX;
 409              		.loc 1 237 0
 410 000a 0426     		movs	r6, #4
 411 000c 0670     		strb	r6, [r0]
 236:lib/chibios/os/hal/src/hal_i2c.c ****   i2cp->state = I2C_ACTIVE_RX;
 412              		.loc 1 236 0
 413 000e 0024     		movs	r4, #0
 238:lib/chibios/os/hal/src/hal_i2c.c ****   rdymsg = i2c_lld_master_receive_timeout(i2cp, addr, rxbuf, rxbytes, timeout);
 414              		.loc 1 238 0
 415 0010 069E     		ldr	r6, [sp, #24]
 236:lib/chibios/os/hal/src/hal_i2c.c ****   i2cp->state = I2C_ACTIVE_RX;
 416              		.loc 1 236 0
 417 0012 8460     		str	r4, [r0, #8]
 418              		.loc 1 238 0
 419 0014 0096     		str	r6, [sp]
 420 0016 FFF7FEFF 		bl	i2c_lld_master_receive_timeout
 421              	.LVL24:
 239:lib/chibios/os/hal/src/hal_i2c.c ****   if (rdymsg == MSG_TIMEOUT) {
 422              		.loc 1 239 0
 423 001a 431C     		adds	r3, r0, #1
 240:lib/chibios/os/hal/src/hal_i2c.c ****     i2cp->state = I2C_LOCKED;
 424              		.loc 1 240 0
 425 001c 0CBF     		ite	eq
 426 001e 0523     		moveq	r3, #5
 241:lib/chibios/os/hal/src/hal_i2c.c ****   }
 242:lib/chibios/os/hal/src/hal_i2c.c ****   else {
 243:lib/chibios/os/hal/src/hal_i2c.c ****     i2cp->state = I2C_READY;
 427              		.loc 1 243 0
 428 0020 0223     		movne	r3, #2
 429 0022 2B70     		strb	r3, [r5]
 430              	.LVL25:
 431              	.LBB132:
 432              	.LBB133:
 433              	.LBB134:
 434              	.LBB135:
 435              	.LBB136:
 436              	.LBB137:
 437              		.loc 3 264 0
 438              		.syntax unified
 439              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 440 0024 84F31188 		MSR basepri, r4
 441              	@ 0 "" 2
 442              	.LVL26:
 443              		.thumb
 444              		.syntax unified
 445              	.LBE137:
 446              	.LBE136:
 447              	.LBE135:
 448              	.LBE134:
 449              	.LBE133:
 450              	.LBE132:
 244:lib/chibios/os/hal/src/hal_i2c.c ****   }
 245:lib/chibios/os/hal/src/hal_i2c.c ****   osalSysUnlock();
 246:lib/chibios/os/hal/src/hal_i2c.c ****   return rdymsg;
 247:lib/chibios/os/hal/src/hal_i2c.c **** }
 451              		.loc 1 247 0
 452 0028 02B0     		add	sp, sp, #8
 453              		.cfi_def_cfa_offset 16
 454              		@ sp needed
 455 002a 70BD     		pop	{r4, r5, r6, pc}
 456              		.cfi_endproc
 457              	.LFE285:
 459              		.section	.text.i2cAcquireBus,"ax",%progbits
 460              		.align	1
 461              		.global	i2cAcquireBus
 462              		.syntax unified
 463              		.thumb
 464              		.thumb_func
 465              		.fpu softvfp
 467              	i2cAcquireBus:
 468              	.LFB286:
 248:lib/chibios/os/hal/src/hal_i2c.c **** 
 249:lib/chibios/os/hal/src/hal_i2c.c **** #if (I2C_USE_MUTUAL_EXCLUSION == TRUE) || defined(__DOXYGEN__)
 250:lib/chibios/os/hal/src/hal_i2c.c **** /**
 251:lib/chibios/os/hal/src/hal_i2c.c ****  * @brief   Gains exclusive access to the I2C bus.
 252:lib/chibios/os/hal/src/hal_i2c.c ****  * @details This function tries to gain ownership to the I2C bus, if the bus
 253:lib/chibios/os/hal/src/hal_i2c.c ****  *          is already being used then the invoking thread is queued.
 254:lib/chibios/os/hal/src/hal_i2c.c ****  * @pre     In order to use this function the option @p I2C_USE_MUTUAL_EXCLUSION
 255:lib/chibios/os/hal/src/hal_i2c.c ****  *          must be enabled.
 256:lib/chibios/os/hal/src/hal_i2c.c ****  *
 257:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[in] i2cp      pointer to the @p I2CDriver object
 258:lib/chibios/os/hal/src/hal_i2c.c ****  *
 259:lib/chibios/os/hal/src/hal_i2c.c ****  * @api
 260:lib/chibios/os/hal/src/hal_i2c.c ****  */
 261:lib/chibios/os/hal/src/hal_i2c.c **** void i2cAcquireBus(I2CDriver *i2cp) {
 469              		.loc 1 261 0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 0
 472              		@ frame_needed = 0, uses_anonymous_args = 0
 473              		@ link register save eliminated.
 474              	.LVL27:
 475              	.LBB138:
 476              	.LBB139:
 888:./lib/chibios/os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 889:./lib/chibios/os/hal/osal/rt/osal.h ****   chSemObjectInit((semaphore_t *)mp, 1);
 890:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 891:./lib/chibios/os/hal/osal/rt/osal.h ****  *mp = 0;
 892:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 893:./lib/chibios/os/hal/osal/rt/osal.h **** }
 894:./lib/chibios/os/hal/osal/rt/osal.h **** 
 895:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 896:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Locks the specified mutex.
 897:./lib/chibios/os/hal/osal/rt/osal.h ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 898:./lib/chibios/os/hal/osal/rt/osal.h ****  *          mutexes.
 899:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 900:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in,out] mp    pointer to the @p mutex_t object
 901:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 902:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 903:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 904:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalMutexLock(mutex_t *mp) {
 905:./lib/chibios/os/hal/osal/rt/osal.h **** 
 906:./lib/chibios/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES
 907:./lib/chibios/os/hal/osal/rt/osal.h ****   chMtxLock(mp);
 477              		.loc 2 907 0
 478 0000 0C30     		adds	r0, r0, #12
 479              	.LVL28:
 480 0002 FFF7FEBF 		b	chMtxLock
 481              	.LVL29:
 482              	.LBE139:
 483              	.LBE138:
 484              		.cfi_endproc
 485              	.LFE286:
 487              		.section	.text.i2cReleaseBus,"ax",%progbits
 488              		.align	1
 489              		.global	i2cReleaseBus
 490              		.syntax unified
 491              		.thumb
 492              		.thumb_func
 493              		.fpu softvfp
 495              	i2cReleaseBus:
 496              	.LFB287:
 262:lib/chibios/os/hal/src/hal_i2c.c **** 
 263:lib/chibios/os/hal/src/hal_i2c.c ****   osalDbgCheck(i2cp != NULL);
 264:lib/chibios/os/hal/src/hal_i2c.c **** 
 265:lib/chibios/os/hal/src/hal_i2c.c ****   osalMutexLock(&i2cp->mutex);
 266:lib/chibios/os/hal/src/hal_i2c.c **** }
 267:lib/chibios/os/hal/src/hal_i2c.c **** 
 268:lib/chibios/os/hal/src/hal_i2c.c **** /**
 269:lib/chibios/os/hal/src/hal_i2c.c ****  * @brief   Releases exclusive access to the I2C bus.
 270:lib/chibios/os/hal/src/hal_i2c.c ****  * @pre     In order to use this function the option @p I2C_USE_MUTUAL_EXCLUSION
 271:lib/chibios/os/hal/src/hal_i2c.c ****  *          must be enabled.
 272:lib/chibios/os/hal/src/hal_i2c.c ****  *
 273:lib/chibios/os/hal/src/hal_i2c.c ****  * @param[in] i2cp      pointer to the @p I2CDriver object
 274:lib/chibios/os/hal/src/hal_i2c.c ****  *
 275:lib/chibios/os/hal/src/hal_i2c.c ****  * @api
 276:lib/chibios/os/hal/src/hal_i2c.c ****  */
 277:lib/chibios/os/hal/src/hal_i2c.c **** void i2cReleaseBus(I2CDriver *i2cp) {
 497              		.loc 1 277 0
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 0
 500              		@ frame_needed = 0, uses_anonymous_args = 0
 501              		@ link register save eliminated.
 502              	.LVL30:
 503              	.LBB140:
 504              	.LBB141:
 908:./lib/chibios/os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 909:./lib/chibios/os/hal/osal/rt/osal.h ****   chSemWait((semaphore_t *)mp);
 910:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 911:./lib/chibios/os/hal/osal/rt/osal.h ****   *mp = 1;
 912:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 913:./lib/chibios/os/hal/osal/rt/osal.h **** }
 914:./lib/chibios/os/hal/osal/rt/osal.h **** 
 915:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 916:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Unlocks the specified mutex.
 917:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The HAL guarantees to release mutex in reverse lock order. The
 918:./lib/chibios/os/hal/osal/rt/osal.h ****  *          mutex being unlocked is guaranteed to be the last locked mutex
 919:./lib/chibios/os/hal/osal/rt/osal.h ****  *          by the invoking thread.
 920:./lib/chibios/os/hal/osal/rt/osal.h ****  *          The implementation can rely on this behavior and eventually
 921:./lib/chibios/os/hal/osal/rt/osal.h ****  *          ignore the @p mp parameter which is supplied in order to support
 922:./lib/chibios/os/hal/osal/rt/osal.h ****  *          those OSes not supporting a stack of the owned mutexes.
 923:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 924:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in,out] mp    pointer to the @p mutex_t object
 925:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 926:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 927:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 928:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalMutexUnlock(mutex_t *mp) {
 929:./lib/chibios/os/hal/osal/rt/osal.h **** 
 930:./lib/chibios/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES
 931:./lib/chibios/os/hal/osal/rt/osal.h ****   chMtxUnlock(mp);
 505              		.loc 2 931 0
 506 0000 0C30     		adds	r0, r0, #12
 507              	.LVL31:
 508 0002 FFF7FEBF 		b	chMtxUnlock
 509              	.LVL32:
 510              	.LBE141:
 511              	.LBE140:
 512              		.cfi_endproc
 513              	.LFE287:
 515              		.text
 516              	.Letext0:
 517              		.file 4 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 518              		.file 5 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 519              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 520              		.file 7 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 521              		.file 8 "./lib/chibios/os/rt/include/chsystypes.h"
 522              		.file 9 "./lib/chibios/os/rt/include/chschd.h"
 523              		.file 10 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 524              		.file 11 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 525              		.file 12 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/stm32f303xc.h"
 526              		.file 13 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 527              		.file 14 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 528              		.file 15 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 529              		.file 16 "./lib/chibios/os/rt/include/chtm.h"
 530              		.file 17 "./lib/chibios/os/rt/include/chsem.h"
 531              		.file 18 "./lib/chibios/os/rt/include/chmtx.h"
 532              		.file 19 "./lib/chibios/os/rt/include/chsys.h"
 533              		.file 20 "./lib/chibios/os/rt/include/chregistry.h"
 534              		.file 21 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 535              		.file 22 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 536              		.file 23 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 537              		.file 24 "./lib/chibios/os/hal/include/hal_dac.h"
 538              		.file 25 "./lib/chibios/os/hal/ports/STM32/LLD/DACv1/hal_dac_lld.h"
 539              		.file 26 "./lib/chibios/os/hal/include/hal_gpt.h"
 540              		.file 27 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_gpt_lld.h"
 541              		.file 28 "./lib/chibios/os/hal/include/hal_i2c.h"
 542              		.file 29 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 543              		.file 30 "./lib/chibios/os/hal/include/hal_pwm.h"
 544              		.file 31 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 545              		.file 32 "./lib/chibios/os/hal/include/hal_usb.h"
 546              		.file 33 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_i2c.c
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:16     .text.i2cInit:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:23     .text.i2cInit:0000000000000000 i2cInit
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:38     .text.i2cObjectInit:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:45     .text.i2cObjectInit:0000000000000000 i2cObjectInit
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:74     .text.i2cStart:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:81     .text.i2cStart:0000000000000000 i2cStart
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:161    .text.i2cStop:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:168    .text.i2cStop:0000000000000000 i2cStop
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:249    .text.i2cGetErrors:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:256    .text.i2cGetErrors:0000000000000000 i2cGetErrors
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:272    .text.i2cMasterTransmitTimeout:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:279    .text.i2cMasterTransmitTimeout:0000000000000000 i2cMasterTransmitTimeout
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:368    .text.i2cMasterReceiveTimeout:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:375    .text.i2cMasterReceiveTimeout:0000000000000000 i2cMasterReceiveTimeout
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:460    .text.i2cAcquireBus:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:467    .text.i2cAcquireBus:0000000000000000 i2cAcquireBus
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:488    .text.i2cReleaseBus:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccCVtXTL.s:495    .text.i2cReleaseBus:0000000000000000 i2cReleaseBus

UNDEFINED SYMBOLS
i2c_lld_init
chMtxObjectInit
i2c_lld_start
i2c_lld_stop
i2c_lld_master_transmit_timeout
i2c_lld_master_receive_timeout
chMtxLock
chMtxUnlock
