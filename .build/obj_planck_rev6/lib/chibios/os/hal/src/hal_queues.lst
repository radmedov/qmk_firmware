   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 2
  11              		.file	"hal_queues.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.iqObjectInit,"ax",%progbits
  16              		.align	1
  17              		.global	iqObjectInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	iqObjectInit:
  24              	.LFB279:
  25              		.file 1 "lib/chibios/os/hal/src/hal_queues.c"
   1:lib/chibios/os/hal/src/hal_queues.c **** /*
   2:lib/chibios/os/hal/src/hal_queues.c ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:lib/chibios/os/hal/src/hal_queues.c **** 
   4:lib/chibios/os/hal/src/hal_queues.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:lib/chibios/os/hal/src/hal_queues.c ****     you may not use this file except in compliance with the License.
   6:lib/chibios/os/hal/src/hal_queues.c ****     You may obtain a copy of the License at
   7:lib/chibios/os/hal/src/hal_queues.c **** 
   8:lib/chibios/os/hal/src/hal_queues.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:lib/chibios/os/hal/src/hal_queues.c **** 
  10:lib/chibios/os/hal/src/hal_queues.c ****     Unless required by applicable law or agreed to in writing, software
  11:lib/chibios/os/hal/src/hal_queues.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:lib/chibios/os/hal/src/hal_queues.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:lib/chibios/os/hal/src/hal_queues.c ****     See the License for the specific language governing permissions and
  14:lib/chibios/os/hal/src/hal_queues.c ****     limitations under the License.
  15:lib/chibios/os/hal/src/hal_queues.c **** */
  16:lib/chibios/os/hal/src/hal_queues.c **** 
  17:lib/chibios/os/hal/src/hal_queues.c **** /**
  18:lib/chibios/os/hal/src/hal_queues.c ****  * @file    hal_queues.c
  19:lib/chibios/os/hal/src/hal_queues.c ****  * @brief   I/O Queues code.
  20:lib/chibios/os/hal/src/hal_queues.c ****  *
  21:lib/chibios/os/hal/src/hal_queues.c ****  * @addtogroup HAL_QUEUES
  22:lib/chibios/os/hal/src/hal_queues.c ****  * @details Queues are mostly used in serial-like device drivers.
  23:lib/chibios/os/hal/src/hal_queues.c ****  *          Serial device drivers are usually designed to have a lower side
  24:lib/chibios/os/hal/src/hal_queues.c ****  *          (lower driver, it is usually an interrupt service routine) and an
  25:lib/chibios/os/hal/src/hal_queues.c ****  *          upper side (upper driver, accessed by the application threads).<br>
  26:lib/chibios/os/hal/src/hal_queues.c ****  *          There are several kind of queues:<br>
  27:lib/chibios/os/hal/src/hal_queues.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  28:lib/chibios/os/hal/src/hal_queues.c ****  *            lower side and the reader is the upper side.
  29:lib/chibios/os/hal/src/hal_queues.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  30:lib/chibios/os/hal/src/hal_queues.c ****  *            upper side and the reader is the lower side.
  31:lib/chibios/os/hal/src/hal_queues.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  32:lib/chibios/os/hal/src/hal_queues.c ****  *            are implemented by pairing an input queue and an output queue
  33:lib/chibios/os/hal/src/hal_queues.c ****  *            together.
  34:lib/chibios/os/hal/src/hal_queues.c ****  *          .
  35:lib/chibios/os/hal/src/hal_queues.c ****  * @{
  36:lib/chibios/os/hal/src/hal_queues.c ****  */
  37:lib/chibios/os/hal/src/hal_queues.c **** 
  38:lib/chibios/os/hal/src/hal_queues.c **** #include "hal.h"
  39:lib/chibios/os/hal/src/hal_queues.c **** 
  40:lib/chibios/os/hal/src/hal_queues.c **** /**
  41:lib/chibios/os/hal/src/hal_queues.c ****  * @brief   Initializes an input queue.
  42:lib/chibios/os/hal/src/hal_queues.c ****  * @details A Semaphore is internally initialized and works as a counter of
  43:lib/chibios/os/hal/src/hal_queues.c ****  *          the bytes contained in the queue.
  44:lib/chibios/os/hal/src/hal_queues.c ****  * @note    The callback is invoked from within the S-Locked system state.
  45:lib/chibios/os/hal/src/hal_queues.c ****  *
  46:lib/chibios/os/hal/src/hal_queues.c ****  * @param[out] iqp      pointer to an @p input_queue_t structure
  47:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to a memory area allocated as queue buffer
  48:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] size      size of the queue buffer
  49:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] infy      pointer to a callback function that is invoked when
  50:lib/chibios/os/hal/src/hal_queues.c ****  *                      data is read from the queue. The value can be @p NULL.
  51:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] link      application defined pointer
  52:lib/chibios/os/hal/src/hal_queues.c ****  *
  53:lib/chibios/os/hal/src/hal_queues.c ****  * @init
  54:lib/chibios/os/hal/src/hal_queues.c ****  */
  55:lib/chibios/os/hal/src/hal_queues.c **** void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
  56:lib/chibios/os/hal/src/hal_queues.c ****                   qnotify_t infy, void *link) {
  26              		.loc 1 56 0
  27              		.cfi_startproc
  28              		@ args = 4, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 10B5     		push	{r4, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  57:lib/chibios/os/hal/src/hal_queues.c **** 
  58:lib/chibios/os/hal/src/hal_queues.c ****   osalThreadQueueObjectInit(&iqp->q_waiting);
  59:lib/chibios/os/hal/src/hal_queues.c ****   iqp->q_counter = 0;
  60:lib/chibios/os/hal/src/hal_queues.c ****   iqp->q_buffer  = bp;
  61:lib/chibios/os/hal/src/hal_queues.c ****   iqp->q_rdptr   = bp;
  62:lib/chibios/os/hal/src/hal_queues.c ****   iqp->q_wrptr   = bp;
  63:lib/chibios/os/hal/src/hal_queues.c ****   iqp->q_top     = bp + size;
  35              		.loc 1 63 0
  36 0002 0A44     		add	r2, r2, r1
  37              	.LVL1:
  59:lib/chibios/os/hal/src/hal_queues.c ****   iqp->q_buffer  = bp;
  38              		.loc 1 59 0
  39 0004 0024     		movs	r4, #0
  64:lib/chibios/os/hal/src/hal_queues.c ****   iqp->q_notify  = infy;
  40              		.loc 1 64 0
  41 0006 C361     		str	r3, [r0, #28]
  65:lib/chibios/os/hal/src/hal_queues.c ****   iqp->q_link    = link;
  42              		.loc 1 65 0
  43 0008 029B     		ldr	r3, [sp, #8]
  44              	.LVL2:
  59:lib/chibios/os/hal/src/hal_queues.c ****   iqp->q_buffer  = bp;
  45              		.loc 1 59 0
  46 000a 8460     		str	r4, [r0, #8]
  47              	.LBB207:
  48              	.LBB208:
  49              	.LBB209:
  50              	.LBB210:
  51              		.file 2 "./lib/chibios/os/rt/include/chschd.h"
   1:./lib/chibios/os/rt/include/chschd.h **** /*
   2:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio.
   3:./lib/chibios/os/rt/include/chschd.h **** 
   4:./lib/chibios/os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:./lib/chibios/os/rt/include/chschd.h **** 
   6:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./lib/chibios/os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:./lib/chibios/os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./lib/chibios/os/rt/include/chschd.h ****     (at your option) any later version.
  10:./lib/chibios/os/rt/include/chschd.h **** 
  11:./lib/chibios/os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./lib/chibios/os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./lib/chibios/os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./lib/chibios/os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:./lib/chibios/os/rt/include/chschd.h **** 
  16:./lib/chibios/os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:./lib/chibios/os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./lib/chibios/os/rt/include/chschd.h **** */
  19:./lib/chibios/os/rt/include/chschd.h **** 
  20:./lib/chibios/os/rt/include/chschd.h **** /**
  21:./lib/chibios/os/rt/include/chschd.h ****  * @file    chschd.h
  22:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:./lib/chibios/os/rt/include/chschd.h ****  *
  24:./lib/chibios/os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:./lib/chibios/os/rt/include/chschd.h ****  * @{
  26:./lib/chibios/os/rt/include/chschd.h ****  */
  27:./lib/chibios/os/rt/include/chschd.h **** 
  28:./lib/chibios/os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:./lib/chibios/os/rt/include/chschd.h **** #define CHSCHD_H
  30:./lib/chibios/os/rt/include/chschd.h **** 
  31:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  32:./lib/chibios/os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
  34:./lib/chibios/os/rt/include/chschd.h **** 
  35:./lib/chibios/os/rt/include/chschd.h **** /**
  36:./lib/chibios/os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:./lib/chibios/os/rt/include/chschd.h ****  * @{
  38:./lib/chibios/os/rt/include/chschd.h ****  */
  39:./lib/chibios/os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:./lib/chibios/os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  42:./lib/chibios/os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:./lib/chibios/os/rt/include/chschd.h ****                                              condition.                     */
  44:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  45:./lib/chibios/os/rt/include/chschd.h **** 
  46:./lib/chibios/os/rt/include/chschd.h **** /**
  47:./lib/chibios/os/rt/include/chschd.h ****  * @name    Priority constants
  48:./lib/chibios/os/rt/include/chschd.h ****  * @{
  49:./lib/chibios/os/rt/include/chschd.h ****  */
  50:./lib/chibios/os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:./lib/chibios/os/rt/include/chschd.h ****                                                  priority.                  */
  52:./lib/chibios/os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:./lib/chibios/os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:./lib/chibios/os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:./lib/chibios/os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  57:./lib/chibios/os/rt/include/chschd.h **** 
  58:./lib/chibios/os/rt/include/chschd.h **** /**
  59:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread states
  60:./lib/chibios/os/rt/include/chschd.h ****  * @{
  61:./lib/chibios/os/rt/include/chschd.h ****  */
  62:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:./lib/chibios/os/rt/include/chschd.h ****                                                   ready list.               */
  64:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  68:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:./lib/chibios/os/rt/include/chschd.h ****                                                   in queue.                 */
  77:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:./lib/chibios/os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:./lib/chibios/os/rt/include/chschd.h ****                                                   message.                  */
  81:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:./lib/chibios/os/rt/include/chschd.h **** 
  83:./lib/chibios/os/rt/include/chschd.h **** /**
  84:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:./lib/chibios/os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:./lib/chibios/os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:./lib/chibios/os/rt/include/chschd.h ****  */
  88:./lib/chibios/os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:./lib/chibios/os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:./lib/chibios/os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:./lib/chibios/os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:./lib/chibios/os/rt/include/chschd.h **** /** @} */
  93:./lib/chibios/os/rt/include/chschd.h **** 
  94:./lib/chibios/os/rt/include/chschd.h **** /**
  95:./lib/chibios/os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:./lib/chibios/os/rt/include/chschd.h ****  * @{
  97:./lib/chibios/os/rt/include/chschd.h ****  */
  98:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:./lib/chibios/os/rt/include/chschd.h ****                                                  mask.                      */
 100:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:./lib/chibios/os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:./lib/chibios/os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:./lib/chibios/os/rt/include/chschd.h ****                                                  flag.                      */
 107:./lib/chibios/os/rt/include/chschd.h **** /** @} */
 108:./lib/chibios/os/rt/include/chschd.h **** 
 109:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 110:./lib/chibios/os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 112:./lib/chibios/os/rt/include/chschd.h **** 
 113:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 114:./lib/chibios/os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 116:./lib/chibios/os/rt/include/chschd.h **** 
 117:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_ENTER_HOOK)
 118:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_ENTER_HOOK not defined in chconf.h"
 119:./lib/chibios/os/rt/include/chschd.h **** #endif
 120:./lib/chibios/os/rt/include/chschd.h **** 
 121:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LEAVE_HOOK)
 122:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LEAVE_HOOK not defined in chconf.h"
 123:./lib/chibios/os/rt/include/chschd.h **** #endif
 124:./lib/chibios/os/rt/include/chschd.h **** 
 125:./lib/chibios/os/rt/include/chschd.h **** #if !defined(CH_CFG_IDLE_LOOP_HOOK)
 126:./lib/chibios/os/rt/include/chschd.h **** #error "CH_CFG_IDLE_LOOP_HOOK not defined in chconf.h"
 127:./lib/chibios/os/rt/include/chschd.h **** #endif
 128:./lib/chibios/os/rt/include/chschd.h **** 
 129:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 130:./lib/chibios/os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 131:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 132:./lib/chibios/os/rt/include/chschd.h **** 
 133:./lib/chibios/os/rt/include/chschd.h **** /**
 134:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 135:./lib/chibios/os/rt/include/chschd.h ****  */
 136:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_list {
 137:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 138:./lib/chibios/os/rt/include/chschd.h **** };
 139:./lib/chibios/os/rt/include/chschd.h **** 
 140:./lib/chibios/os/rt/include/chschd.h **** /**
 141:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 142:./lib/chibios/os/rt/include/chschd.h ****  */
 143:./lib/chibios/os/rt/include/chschd.h **** struct ch_threads_queue {
 144:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *next;      /**< @brief Next in the list/queue.     */
 145:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *prev;      /**< @brief Previous in the queue.      */
 146:./lib/chibios/os/rt/include/chschd.h **** };
 147:./lib/chibios/os/rt/include/chschd.h **** 
 148:./lib/chibios/os/rt/include/chschd.h **** /**
 149:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 150:./lib/chibios/os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 151:./lib/chibios/os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 152:./lib/chibios/os/rt/include/chschd.h ****  *          by shrinking this structure.
 153:./lib/chibios/os/rt/include/chschd.h ****  */
 154:./lib/chibios/os/rt/include/chschd.h **** struct ch_thread {
 155:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue header.       */
 156:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief Thread priority.            */
 157:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Processor context.          */
 158:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 159:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 160:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 161:./lib/chibios/os/rt/include/chschd.h **** #endif
 162:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 163:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 164:./lib/chibios/os/rt/include/chschd.h ****   /**
 165:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread name or @p NULL.
 166:./lib/chibios/os/rt/include/chschd.h ****    */
 167:./lib/chibios/os/rt/include/chschd.h ****   const char            *name;
 168:./lib/chibios/os/rt/include/chschd.h **** #endif
 169:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 170:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 171:./lib/chibios/os/rt/include/chschd.h ****   /**
 172:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Working area base address.
 173:./lib/chibios/os/rt/include/chschd.h ****    * @note    This pointer is used for stack overflow checks and for
 174:./lib/chibios/os/rt/include/chschd.h ****    *          dynamic threading.
 175:./lib/chibios/os/rt/include/chschd.h ****    */
 176:./lib/chibios/os/rt/include/chschd.h ****   stkalign_t            *wabase;
 177:./lib/chibios/os/rt/include/chschd.h **** #endif
 178:./lib/chibios/os/rt/include/chschd.h ****   /**
 179:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Current thread state.
 180:./lib/chibios/os/rt/include/chschd.h ****    */
 181:./lib/chibios/os/rt/include/chschd.h ****   tstate_t              state;
 182:./lib/chibios/os/rt/include/chschd.h ****   /**
 183:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Various thread flags.
 184:./lib/chibios/os/rt/include/chschd.h ****    */
 185:./lib/chibios/os/rt/include/chschd.h ****   tmode_t               flags;
 186:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 187:./lib/chibios/os/rt/include/chschd.h ****   /**
 188:./lib/chibios/os/rt/include/chschd.h ****    * @brief   References to this thread.
 189:./lib/chibios/os/rt/include/chschd.h ****    */
 190:./lib/chibios/os/rt/include/chschd.h ****   trefs_t               refs;
 191:./lib/chibios/os/rt/include/chschd.h **** #endif
 192:./lib/chibios/os/rt/include/chschd.h ****   /**
 193:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Number of ticks remaining to this thread.
 194:./lib/chibios/os/rt/include/chschd.h ****    */
 195:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 196:./lib/chibios/os/rt/include/chschd.h ****   tslices_t             preempt;
 197:./lib/chibios/os/rt/include/chschd.h **** #endif
 198:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 199:./lib/chibios/os/rt/include/chschd.h ****   /**
 200:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread consumed time in ticks.
 201:./lib/chibios/os/rt/include/chschd.h ****    * @note    This field can overflow.
 202:./lib/chibios/os/rt/include/chschd.h ****    */
 203:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    time;
 204:./lib/chibios/os/rt/include/chschd.h **** #endif
 205:./lib/chibios/os/rt/include/chschd.h ****   /**
 206:./lib/chibios/os/rt/include/chschd.h ****    * @brief   State-specific fields.
 207:./lib/chibios/os/rt/include/chschd.h ****    * @note    All the fields declared in this union are only valid in the
 208:./lib/chibios/os/rt/include/chschd.h ****    *          specified state or condition and are thus volatile.
 209:./lib/chibios/os/rt/include/chschd.h ****    */
 210:./lib/chibios/os/rt/include/chschd.h ****   union {
 211:./lib/chibios/os/rt/include/chschd.h ****     /**
 212:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread wakeup code.
 213:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field contains the low level message sent to the thread
 214:./lib/chibios/os/rt/include/chschd.h ****      *          by the waking thread or interrupt handler. The value is valid
 215:./lib/chibios/os/rt/include/chschd.h ****      *          after exiting the @p chSchWakeupS() function.
 216:./lib/chibios/os/rt/include/chschd.h ****      */
 217:./lib/chibios/os/rt/include/chschd.h ****     msg_t               rdymsg;
 218:./lib/chibios/os/rt/include/chschd.h ****     /**
 219:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread exit code.
 220:./lib/chibios/os/rt/include/chschd.h ****      * @note    The thread termination code is stored in this field in order
 221:./lib/chibios/os/rt/include/chschd.h ****      *          to be retrieved by the thread performing a @p chThdWait() on
 222:./lib/chibios/os/rt/include/chschd.h ****      *          this thread.
 223:./lib/chibios/os/rt/include/chschd.h ****      */
 224:./lib/chibios/os/rt/include/chschd.h ****     msg_t               exitcode;
 225:./lib/chibios/os/rt/include/chschd.h ****     /**
 226:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic "wait" object.
 227:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a generic pointer to a synchronization
 228:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in one of the wait
 229:./lib/chibios/os/rt/include/chschd.h ****      *          states.
 230:./lib/chibios/os/rt/include/chschd.h ****      */
 231:./lib/chibios/os/rt/include/chschd.h ****     void                *wtobjp;
 232:./lib/chibios/os/rt/include/chschd.h ****     /**
 233:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic thread reference object.
 234:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 235:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_SUSPENDED
 236:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 237:./lib/chibios/os/rt/include/chschd.h ****      */
 238:./lib/chibios/os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 239:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 240:./lib/chibios/os/rt/include/chschd.h ****     /**
 241:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Thread sent message.
 242:./lib/chibios/os/rt/include/chschd.h ****      */
 243:./lib/chibios/os/rt/include/chschd.h ****     msg_t               sentmsg;
 244:./lib/chibios/os/rt/include/chschd.h **** #endif
 245:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 246:./lib/chibios/os/rt/include/chschd.h ****     /**
 247:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic semaphore object.
 248:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 249:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTSEM
 250:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 251:./lib/chibios/os/rt/include/chschd.h ****      */
 252:./lib/chibios/os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 253:./lib/chibios/os/rt/include/chschd.h **** #endif
 254:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 255:./lib/chibios/os/rt/include/chschd.h ****     /**
 256:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Pointer to a generic mutex object.
 257:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is used to get a pointer to a synchronization
 258:./lib/chibios/os/rt/include/chschd.h ****      *          object and is valid when the thread is in @p CH_STATE_WTMTX
 259:./lib/chibios/os/rt/include/chschd.h ****      *          state.
 260:./lib/chibios/os/rt/include/chschd.h ****      */
 261:./lib/chibios/os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 262:./lib/chibios/os/rt/include/chschd.h **** #endif
 263:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 264:./lib/chibios/os/rt/include/chschd.h ****     /**
 265:./lib/chibios/os/rt/include/chschd.h ****      * @brief   Enabled events mask.
 266:./lib/chibios/os/rt/include/chschd.h ****      * @note    This field is only valid while the thread is in the
 267:./lib/chibios/os/rt/include/chschd.h ****      *          @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 268:./lib/chibios/os/rt/include/chschd.h ****      */
 269:./lib/chibios/os/rt/include/chschd.h ****     eventmask_t         ewmask;
 270:./lib/chibios/os/rt/include/chschd.h **** #endif
 271:./lib/chibios/os/rt/include/chschd.h ****   }                     u;
 272:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 273:./lib/chibios/os/rt/include/chschd.h ****   /**
 274:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Termination waiting list.
 275:./lib/chibios/os/rt/include/chschd.h ****    */
 276:./lib/chibios/os/rt/include/chschd.h ****   threads_list_t        waiting;
 277:./lib/chibios/os/rt/include/chschd.h **** #endif
 278:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 279:./lib/chibios/os/rt/include/chschd.h ****   /**
 280:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Messages queue.
 281:./lib/chibios/os/rt/include/chschd.h ****    */
 282:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       msgqueue;
 283:./lib/chibios/os/rt/include/chschd.h **** #endif
 284:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 285:./lib/chibios/os/rt/include/chschd.h ****   /**
 286:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pending events mask.
 287:./lib/chibios/os/rt/include/chschd.h ****    */
 288:./lib/chibios/os/rt/include/chschd.h ****   eventmask_t           epending;
 289:./lib/chibios/os/rt/include/chschd.h **** #endif
 290:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 291:./lib/chibios/os/rt/include/chschd.h ****   /**
 292:./lib/chibios/os/rt/include/chschd.h ****    * @brief   List of the mutexes owned by this thread.
 293:./lib/chibios/os/rt/include/chschd.h ****    * @note    The list is terminated by a @p NULL in this field.
 294:./lib/chibios/os/rt/include/chschd.h ****    */
 295:./lib/chibios/os/rt/include/chschd.h ****   struct ch_mutex       *mtxlist;
 296:./lib/chibios/os/rt/include/chschd.h ****   /**
 297:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread's own, non-inherited, priority.
 298:./lib/chibios/os/rt/include/chschd.h ****    */
 299:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               realprio;
 300:./lib/chibios/os/rt/include/chschd.h **** #endif
 301:./lib/chibios/os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 302:./lib/chibios/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 303:./lib/chibios/os/rt/include/chschd.h ****   /**
 304:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Memory Pool where the thread workspace is returned.
 305:./lib/chibios/os/rt/include/chschd.h ****    */
 306:./lib/chibios/os/rt/include/chschd.h ****   void                  *mpool;
 307:./lib/chibios/os/rt/include/chschd.h **** #endif
 308:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 309:./lib/chibios/os/rt/include/chschd.h ****   /**
 310:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Thread statistics.
 311:./lib/chibios/os/rt/include/chschd.h ****    */
 312:./lib/chibios/os/rt/include/chschd.h ****   time_measurement_t    stats;
 313:./lib/chibios/os/rt/include/chschd.h **** #endif
 314:./lib/chibios/os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 315:./lib/chibios/os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 316:./lib/chibios/os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 317:./lib/chibios/os/rt/include/chschd.h **** #endif
 318:./lib/chibios/os/rt/include/chschd.h **** };
 319:./lib/chibios/os/rt/include/chschd.h **** 
 320:./lib/chibios/os/rt/include/chschd.h **** /**
 321:./lib/chibios/os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 322:./lib/chibios/os/rt/include/chschd.h ****  *
 323:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 324:./lib/chibios/os/rt/include/chschd.h ****  */
 325:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timer {
 326:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the list.     */
 327:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Previous timer in the list. */
 328:./lib/chibios/os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Time delta before timeout.  */
 329:./lib/chibios/os/rt/include/chschd.h ****   vtfunc_t              func;       /**< @brief Timer callback function
 330:./lib/chibios/os/rt/include/chschd.h ****                                                 pointer.                    */
 331:./lib/chibios/os/rt/include/chschd.h ****   void                  *par;       /**< @brief Timer callback function
 332:./lib/chibios/os/rt/include/chschd.h ****                                                 parameter.                  */
 333:./lib/chibios/os/rt/include/chschd.h **** };
 334:./lib/chibios/os/rt/include/chschd.h **** 
 335:./lib/chibios/os/rt/include/chschd.h **** /**
 336:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 337:./lib/chibios/os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 338:./lib/chibios/os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 339:./lib/chibios/os/rt/include/chschd.h ****  *          timer is often used in the code.
 340:./lib/chibios/os/rt/include/chschd.h ****  */
 341:./lib/chibios/os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 342:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *next;      /**< @brief Next timer in the delta
 343:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 344:./lib/chibios/os/rt/include/chschd.h ****   virtual_timer_t       *prev;      /**< @brief Last timer in the delta
 345:./lib/chibios/os/rt/include/chschd.h ****                                                 list.                       */
 346:./lib/chibios/os/rt/include/chschd.h ****   systime_t             delta;      /**< @brief Must be initialized to -1.  */
 347:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 348:./lib/chibios/os/rt/include/chschd.h ****   volatile systime_t    systime;    /**< @brief System Time counter.        */
 349:./lib/chibios/os/rt/include/chschd.h **** #endif
 350:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 351:./lib/chibios/os/rt/include/chschd.h ****   /**
 352:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 353:./lib/chibios/os/rt/include/chschd.h ****    */
 354:./lib/chibios/os/rt/include/chschd.h ****   systime_t             lasttime;   /**< @brief System time of the last
 355:./lib/chibios/os/rt/include/chschd.h ****                                                 tick event.                 */
 356:./lib/chibios/os/rt/include/chschd.h **** #endif
 357:./lib/chibios/os/rt/include/chschd.h **** };
 358:./lib/chibios/os/rt/include/chschd.h **** 
 359:./lib/chibios/os/rt/include/chschd.h **** /**
 360:./lib/chibios/os/rt/include/chschd.h ****  * @extends threads_queue_t
 361:./lib/chibios/os/rt/include/chschd.h ****  */
 362:./lib/chibios/os/rt/include/chschd.h **** struct ch_ready_list {
 363:./lib/chibios/os/rt/include/chschd.h ****   threads_queue_t       queue;      /**< @brief Threads queue.              */
 364:./lib/chibios/os/rt/include/chschd.h ****   tprio_t               prio;       /**< @brief This field must be
 365:./lib/chibios/os/rt/include/chschd.h ****                                                 initialized to zero.        */
 366:./lib/chibios/os/rt/include/chschd.h ****   struct port_context   ctx;        /**< @brief Not used, present because
 367:./lib/chibios/os/rt/include/chschd.h ****                                                 offsets.                    */
 368:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 369:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *newer;     /**< @brief Newer registry element.     */
 370:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *older;     /**< @brief Older registry element.     */
 371:./lib/chibios/os/rt/include/chschd.h **** #endif
 372:./lib/chibios/os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 373:./lib/chibios/os/rt/include/chschd.h ****   thread_t              *current;   /**< @brief The currently running
 374:./lib/chibios/os/rt/include/chschd.h ****                                                 thread.                     */
 375:./lib/chibios/os/rt/include/chschd.h **** };
 376:./lib/chibios/os/rt/include/chschd.h **** 
 377:./lib/chibios/os/rt/include/chschd.h **** /**
 378:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System debug data structure.
 379:./lib/chibios/os/rt/include/chschd.h ****  */
 380:./lib/chibios/os/rt/include/chschd.h **** struct ch_system_debug {
 381:./lib/chibios/os/rt/include/chschd.h ****   /**
 382:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 383:./lib/chibios/os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 384:./lib/chibios/os/rt/include/chschd.h ****    *          written once and then the system is halted.
 385:./lib/chibios/os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 386:./lib/chibios/os/rt/include/chschd.h ****    *          field itself is declared volatile.
 387:./lib/chibios/os/rt/include/chschd.h ****    */
 388:./lib/chibios/os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 389:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 390:./lib/chibios/os/rt/include/chschd.h ****   /**
 391:./lib/chibios/os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 392:./lib/chibios/os/rt/include/chschd.h ****    */
 393:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 394:./lib/chibios/os/rt/include/chschd.h ****   /**
 395:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 396:./lib/chibios/os/rt/include/chschd.h ****    */
 397:./lib/chibios/os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 398:./lib/chibios/os/rt/include/chschd.h **** #endif
 399:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED) || defined(__DOXYGEN__)
 400:./lib/chibios/os/rt/include/chschd.h ****   /**
 401:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 402:./lib/chibios/os/rt/include/chschd.h ****    */
 403:./lib/chibios/os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 404:./lib/chibios/os/rt/include/chschd.h **** #endif
 405:./lib/chibios/os/rt/include/chschd.h **** };
 406:./lib/chibios/os/rt/include/chschd.h **** 
 407:./lib/chibios/os/rt/include/chschd.h **** /**
 408:./lib/chibios/os/rt/include/chschd.h ****  * @brief   System data structure.
 409:./lib/chibios/os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 410:./lib/chibios/os/rt/include/chschd.h ****  *          stacks.
 411:./lib/chibios/os/rt/include/chschd.h ****  */
 412:./lib/chibios/os/rt/include/chschd.h **** struct ch_system {
 413:./lib/chibios/os/rt/include/chschd.h ****   /**
 414:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Ready list header.
 415:./lib/chibios/os/rt/include/chschd.h ****    */
 416:./lib/chibios/os/rt/include/chschd.h ****   ready_list_t          rlist;
 417:./lib/chibios/os/rt/include/chschd.h ****   /**
 418:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 419:./lib/chibios/os/rt/include/chschd.h ****    */
 420:./lib/chibios/os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 421:./lib/chibios/os/rt/include/chschd.h ****   /**
 422:./lib/chibios/os/rt/include/chschd.h ****    * @brief   System debug.
 423:./lib/chibios/os/rt/include/chschd.h ****    */
 424:./lib/chibios/os/rt/include/chschd.h ****   system_debug_t        dbg;
 425:./lib/chibios/os/rt/include/chschd.h ****   /**
 426:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 427:./lib/chibios/os/rt/include/chschd.h ****    */
 428:./lib/chibios/os/rt/include/chschd.h ****   thread_t              mainthread;
 429:./lib/chibios/os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 430:./lib/chibios/os/rt/include/chschd.h ****   /**
 431:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 432:./lib/chibios/os/rt/include/chschd.h ****    */
 433:./lib/chibios/os/rt/include/chschd.h ****   tm_calibration_t      tm;
 434:./lib/chibios/os/rt/include/chschd.h **** #endif
 435:./lib/chibios/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 436:./lib/chibios/os/rt/include/chschd.h ****   /**
 437:./lib/chibios/os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 438:./lib/chibios/os/rt/include/chschd.h ****    */
 439:./lib/chibios/os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 440:./lib/chibios/os/rt/include/chschd.h **** #endif
 441:./lib/chibios/os/rt/include/chschd.h **** };
 442:./lib/chibios/os/rt/include/chschd.h **** 
 443:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 444:./lib/chibios/os/rt/include/chschd.h **** /* Module macros.                                                            */
 445:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 446:./lib/chibios/os/rt/include/chschd.h **** 
 447:./lib/chibios/os/rt/include/chschd.h **** /**
 448:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 449:./lib/chibios/os/rt/include/chschd.h ****  *
 450:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 451:./lib/chibios/os/rt/include/chschd.h ****  */
 452:./lib/chibios/os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->next->prio)
 453:./lib/chibios/os/rt/include/chschd.h **** 
 454:./lib/chibios/os/rt/include/chschd.h **** /**
 455:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 456:./lib/chibios/os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 457:./lib/chibios/os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 458:./lib/chibios/os/rt/include/chschd.h ****  */
 459:./lib/chibios/os/rt/include/chschd.h **** #define currp ch.rlist.current
 460:./lib/chibios/os/rt/include/chschd.h **** 
 461:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 462:./lib/chibios/os/rt/include/chschd.h **** /* External declarations.                                                    */
 463:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 464:./lib/chibios/os/rt/include/chschd.h **** 
 465:./lib/chibios/os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 466:./lib/chibios/os/rt/include/chschd.h **** extern ch_system_t ch;
 467:./lib/chibios/os/rt/include/chschd.h **** #endif
 468:./lib/chibios/os/rt/include/chschd.h **** 
 469:./lib/chibios/os/rt/include/chschd.h **** /*
 470:./lib/chibios/os/rt/include/chschd.h ****  * Scheduler APIs.
 471:./lib/chibios/os/rt/include/chschd.h ****  */
 472:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 473:./lib/chibios/os/rt/include/chschd.h **** extern "C" {
 474:./lib/chibios/os/rt/include/chschd.h **** #endif
 475:./lib/chibios/os/rt/include/chschd.h ****   void _scheduler_init(void);
 476:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 477:./lib/chibios/os/rt/include/chschd.h ****   thread_t *chSchReadyAheadI(thread_t *tp);
 478:./lib/chibios/os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 479:./lib/chibios/os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time);
 480:./lib/chibios/os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 481:./lib/chibios/os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 482:./lib/chibios/os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 483:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 484:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 485:./lib/chibios/os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 486:./lib/chibios/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 487:./lib/chibios/os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 488:./lib/chibios/os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 489:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 490:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 491:./lib/chibios/os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 492:./lib/chibios/os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 493:./lib/chibios/os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 494:./lib/chibios/os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 495:./lib/chibios/os/rt/include/chschd.h **** #ifdef __cplusplus
 496:./lib/chibios/os/rt/include/chschd.h **** }
 497:./lib/chibios/os/rt/include/chschd.h **** #endif
 498:./lib/chibios/os/rt/include/chschd.h **** 
 499:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 500:./lib/chibios/os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 501:./lib/chibios/os/rt/include/chschd.h **** /*===========================================================================*/
 502:./lib/chibios/os/rt/include/chschd.h **** 
 503:./lib/chibios/os/rt/include/chschd.h **** /**
 504:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 505:./lib/chibios/os/rt/include/chschd.h ****  *
 506:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 507:./lib/chibios/os/rt/include/chschd.h ****  *
 508:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 509:./lib/chibios/os/rt/include/chschd.h ****  */
 510:./lib/chibios/os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 511:./lib/chibios/os/rt/include/chschd.h **** 
 512:./lib/chibios/os/rt/include/chschd.h ****   tlp->next = (thread_t *)tlp;
 513:./lib/chibios/os/rt/include/chschd.h **** }
 514:./lib/chibios/os/rt/include/chschd.h **** 
 515:./lib/chibios/os/rt/include/chschd.h **** /**
 516:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 517:./lib/chibios/os/rt/include/chschd.h ****  *
 518:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 519:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 520:./lib/chibios/os/rt/include/chschd.h ****  *
 521:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 522:./lib/chibios/os/rt/include/chschd.h ****  */
 523:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 524:./lib/chibios/os/rt/include/chschd.h **** 
 525:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next == (thread_t *)tlp);
 526:./lib/chibios/os/rt/include/chschd.h **** }
 527:./lib/chibios/os/rt/include/chschd.h **** 
 528:./lib/chibios/os/rt/include/chschd.h **** /**
 529:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 530:./lib/chibios/os/rt/include/chschd.h ****  *
 531:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 532:./lib/chibios/os/rt/include/chschd.h ****  * @return              The status of the list.
 533:./lib/chibios/os/rt/include/chschd.h ****  *
 534:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 535:./lib/chibios/os/rt/include/chschd.h ****  */
 536:./lib/chibios/os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 537:./lib/chibios/os/rt/include/chschd.h **** 
 538:./lib/chibios/os/rt/include/chschd.h ****   return (bool)(tlp->next != (thread_t *)tlp);
 539:./lib/chibios/os/rt/include/chschd.h **** }
 540:./lib/chibios/os/rt/include/chschd.h **** 
 541:./lib/chibios/os/rt/include/chschd.h **** /**
 542:./lib/chibios/os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 543:./lib/chibios/os/rt/include/chschd.h ****  *
 544:./lib/chibios/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 545:./lib/chibios/os/rt/include/chschd.h ****  *
 546:./lib/chibios/os/rt/include/chschd.h ****  * @notapi
 547:./lib/chibios/os/rt/include/chschd.h ****  */
 548:./lib/chibios/os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 549:./lib/chibios/os/rt/include/chschd.h **** 
 550:./lib/chibios/os/rt/include/chschd.h ****   tqp->next = (thread_t *)tqp;
 551:./lib/chibios/os/rt/include/chschd.h ****   tqp->prev = (thread_t *)tqp;
  52              		.loc 2 551 0
  53 000c C0E90000 		strd	r0, r0, [r0]
  54              	.LVL3:
  55              	.LBE210:
  56              	.LBE209:
  57              	.LBE208:
  58              	.LBE207:
  60:lib/chibios/os/hal/src/hal_queues.c ****   iqp->q_rdptr   = bp;
  59              		.loc 1 60 0
  60 0010 C160     		str	r1, [r0, #12]
  62:lib/chibios/os/hal/src/hal_queues.c ****   iqp->q_top     = bp + size;
  61              		.loc 1 62 0
  62 0012 C0E90511 		strd	r1, r1, [r0, #20]
  63:lib/chibios/os/hal/src/hal_queues.c ****   iqp->q_notify  = infy;
  63              		.loc 1 63 0
  64 0016 0261     		str	r2, [r0, #16]
  65              		.loc 1 65 0
  66 0018 0362     		str	r3, [r0, #32]
  66:lib/chibios/os/hal/src/hal_queues.c **** }
  67              		.loc 1 66 0
  68 001a 10BD     		pop	{r4, pc}
  69              		.cfi_endproc
  70              	.LFE279:
  72              		.section	.text.iqResetI,"ax",%progbits
  73              		.align	1
  74              		.global	iqResetI
  75              		.syntax unified
  76              		.thumb
  77              		.thumb_func
  78              		.fpu softvfp
  80              	iqResetI:
  81              	.LFB280:
  67:lib/chibios/os/hal/src/hal_queues.c **** 
  68:lib/chibios/os/hal/src/hal_queues.c **** /**
  69:lib/chibios/os/hal/src/hal_queues.c ****  * @brief   Resets an input queue.
  70:lib/chibios/os/hal/src/hal_queues.c ****  * @details All the data in the input queue is erased and lost, any waiting
  71:lib/chibios/os/hal/src/hal_queues.c ****  *          thread is resumed with status @p MSG_RESET.
  72:lib/chibios/os/hal/src/hal_queues.c ****  * @note    A reset operation can be used by a low level driver in order to
  73:lib/chibios/os/hal/src/hal_queues.c ****  *          obtain immediate attention from the high level layers.
  74:lib/chibios/os/hal/src/hal_queues.c ****  *
  75:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
  76:lib/chibios/os/hal/src/hal_queues.c ****  *
  77:lib/chibios/os/hal/src/hal_queues.c ****  * @iclass
  78:lib/chibios/os/hal/src/hal_queues.c ****  */
  79:lib/chibios/os/hal/src/hal_queues.c **** void iqResetI(input_queue_t *iqp) {
  82              		.loc 1 79 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86              		@ link register save eliminated.
  87              	.LVL4:
  80:lib/chibios/os/hal/src/hal_queues.c **** 
  81:lib/chibios/os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
  82:lib/chibios/os/hal/src/hal_queues.c **** 
  83:lib/chibios/os/hal/src/hal_queues.c ****   iqp->q_rdptr = iqp->q_buffer;
  88              		.loc 1 83 0
  89 0000 C268     		ldr	r2, [r0, #12]
  84:lib/chibios/os/hal/src/hal_queues.c ****   iqp->q_wrptr = iqp->q_buffer;
  90              		.loc 1 84 0
  91 0002 C0E90522 		strd	r2, r2, [r0, #20]
  85:lib/chibios/os/hal/src/hal_queues.c ****   iqp->q_counter = 0;
  92              		.loc 1 85 0
  93 0006 0022     		movs	r2, #0
  94 0008 8260     		str	r2, [r0, #8]
  95              	.LVL5:
  96              	.LBB211:
  97              	.LBB212:
  98              		.file 3 "./lib/chibios/os/hal/osal/rt/osal.h"
   1:./lib/chibios/os/hal/osal/rt/osal.h **** /*
   2:./lib/chibios/os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:./lib/chibios/os/hal/osal/rt/osal.h **** 
   4:./lib/chibios/os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:./lib/chibios/os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:./lib/chibios/os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:./lib/chibios/os/hal/osal/rt/osal.h **** 
   8:./lib/chibios/os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:./lib/chibios/os/hal/osal/rt/osal.h **** 
  10:./lib/chibios/os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:./lib/chibios/os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:./lib/chibios/os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:./lib/chibios/os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:./lib/chibios/os/hal/osal/rt/osal.h ****     limitations under the License.
  15:./lib/chibios/os/hal/osal/rt/osal.h **** */
  16:./lib/chibios/os/hal/osal/rt/osal.h **** 
  17:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  18:./lib/chibios/os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:./lib/chibios/os/hal/osal/rt/osal.h ****  *
  21:./lib/chibios/os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  23:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  24:./lib/chibios/os/hal/osal/rt/osal.h **** 
  25:./lib/chibios/os/hal/osal/rt/osal.h **** #ifndef _OSAL_H_
  26:./lib/chibios/os/hal/osal/rt/osal.h **** #define _OSAL_H_
  27:./lib/chibios/os/hal/osal/rt/osal.h **** 
  28:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:./lib/chibios/os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:./lib/chibios/os/hal/osal/rt/osal.h **** 
  32:./lib/chibios/os/hal/osal/rt/osal.h **** #include "ch.h"
  33:./lib/chibios/os/hal/osal/rt/osal.h **** 
  34:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:./lib/chibios/os/hal/osal/rt/osal.h **** 
  38:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  39:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  41:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  42:./lib/chibios/os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:./lib/chibios/os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  45:./lib/chibios/os/hal/osal/rt/osal.h **** 
  46:./lib/chibios/os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:./lib/chibios/os/hal/osal/rt/osal.h **** #define TRUE                                (!FALSE)
  48:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  49:./lib/chibios/os/hal/osal/rt/osal.h **** 
  50:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        FALSE
  51:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         TRUE
  52:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  53:./lib/chibios/os/hal/osal/rt/osal.h **** 
  54:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
  55:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  56:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Messages
  57:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  58:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  59:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_OK                              RDY_OK
  60:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_RESET                           RDY_RESET
  61:./lib/chibios/os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         RDY_TIMEOUT
  62:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  63:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  64:./lib/chibios/os/hal/osal/rt/osal.h **** 
  65:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
  66:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  67:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  69:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  70:./lib/chibios/os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((systime_t)0)
  71:./lib/chibios/os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((systime_t)-1)
  72:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  73:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
  74:./lib/chibios/os/hal/osal/rt/osal.h **** 
  75:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  76:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  78:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  79:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
  83:./lib/chibios/os/hal/osal/rt/osal.h **** 
  84:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  85:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
  87:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  88:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  89:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  91:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:./lib/chibios/os/hal/osal/rt/osal.h **** 
  93:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  94:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:./lib/chibios/os/hal/osal/rt/osal.h ****  */
  96:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:./lib/chibios/os/hal/osal/rt/osal.h **** 
  98:./lib/chibios/os/hal/osal/rt/osal.h **** /**
  99:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 101:./lib/chibios/os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 104:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 106:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 107:./lib/chibios/os/hal/osal/rt/osal.h **** 
 108:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:./lib/chibios/os/hal/osal/rt/osal.h **** 
 112:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:./lib/chibios/os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:./lib/chibios/os/hal/osal/rt/osal.h **** 
 116:./lib/chibios/os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:./lib/chibios/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:./lib/chibios/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:./lib/chibios/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 121:./lib/chibios/os/hal/osal/rt/osal.h **** 
 122:./lib/chibios/os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:./lib/chibios/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 125:./lib/chibios/os/hal/osal/rt/osal.h **** 
 126:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:./lib/chibios/os/hal/osal/rt/osal.h **** 
 130:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 131:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 132:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 134:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 136:./lib/chibios/os/hal/osal/rt/osal.h **** 
 137:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 138:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 139:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 141:./lib/chibios/os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 143:./lib/chibios/os/hal/osal/rt/osal.h **** 
 144:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 145:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 146:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 148:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 150:./lib/chibios/os/hal/osal/rt/osal.h **** 
 151:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 152:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 153:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 154:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 155:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 156:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 157:./lib/chibios/os/hal/osal/rt/osal.h **** 
 158:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 159:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 160:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 161:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 162:./lib/chibios/os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 163:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 164:./lib/chibios/os/hal/osal/rt/osal.h **** 
 165:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 166:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 167:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 168:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 169:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 170:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 171:./lib/chibios/os/hal/osal/rt/osal.h **** 
 172:./lib/chibios/os/hal/osal/rt/osal.h **** #if !CH_CFG_USE_EVENTS
 173:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 174:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 175:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 176:./lib/chibios/os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 177:./lib/chibios/os/hal/osal/rt/osal.h ****  *          an entirely different way.
 178:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 179:./lib/chibios/os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 180:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 181:./lib/chibios/os/hal/osal/rt/osal.h **** typedef struct {
 182:./lib/chibios/os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Flags stored into the
 183:./lib/chibios/os/hal/osal/rt/osal.h ****                                                 object.                     */
 184:./lib/chibios/os/hal/osal/rt/osal.h **** } event_source_t;
 185:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 186:./lib/chibios/os/hal/osal/rt/osal.h **** 
 187:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 188:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 189:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then them
 190:./lib/chibios/os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 191:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 192:./lib/chibios/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 193:./lib/chibios/os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 194:./lib/chibios/os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 195:./lib/chibios/os/hal/osal/rt/osal.h **** #else
 196:./lib/chibios/os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 197:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 198:./lib/chibios/os/hal/osal/rt/osal.h **** 
 199:./lib/chibios/os/hal/osal/rt/osal.h **** #if 0
 200:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 201:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 202:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 203:./lib/chibios/os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 204:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 205:./lib/chibios/os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 206:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 207:./lib/chibios/os/hal/osal/rt/osal.h **** typedef struct {
 208:./lib/chibios/os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 209:./lib/chibios/os/hal/osal/rt/osal.h **** } threads_queue_t;
 210:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 211:./lib/chibios/os/hal/osal/rt/osal.h **** 
 212:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 213:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 214:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 215:./lib/chibios/os/hal/osal/rt/osal.h **** 
 216:./lib/chibios/os/hal/osal/rt/osal.h **** /* Temporary names provided for ChibiOS 2.x compatibility.*/
 217:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueInit osalThreadQueueObjectInit
 218:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueWakeupAllI osalThreadDequeueAllI
 219:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueWakeupOneI osalThreadDequeueNextI
 220:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalQueueGoSleepTimeoutS osalThreadEnqueueTimeoutS
 221:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalEventInit osalEventObjectInit
 222:./lib/chibios/os/hal/osal/rt/osal.h **** 
 223:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 224:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 225:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 226:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 227:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 228:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 229:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 230:./lib/chibios/os/hal/osal/rt/osal.h ****  *          message and halts.
 231:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 232:./lib/chibios/os/hal/osal/rt/osal.h ****  *          switch is enabled.
 233:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 234:./lib/chibios/os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 235:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 236:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 237:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 238:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 239:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 240:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 241:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 242:./lib/chibios/os/hal/osal/rt/osal.h **** 
 243:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 244:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 245:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 246:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 247:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is enabled.
 248:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 249:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 250:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 251:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 252:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 253:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 254:./lib/chibios/os/hal/osal/rt/osal.h **** 
 255:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 256:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 257:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 258:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 259:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 260:./lib/chibios/os/hal/osal/rt/osal.h **** 
 261:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 262:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 263:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 264:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 265:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 266:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 267:./lib/chibios/os/hal/osal/rt/osal.h **** 
 268:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 269:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 270:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 271:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 272:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 273:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 274:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 275:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 276:./lib/chibios/os/hal/osal/rt/osal.h **** 
 277:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 278:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 279:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 280:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 281:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 282:./lib/chibios/os/hal/osal/rt/osal.h **** 
 283:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 284:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 285:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 286:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 287:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 288:./lib/chibios/os/hal/osal/rt/osal.h **** 
 289:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 290:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 291:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 292:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 293:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 294:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 295:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 296:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 297:./lib/chibios/os/hal/osal/rt/osal.h **** 
 298:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 299:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 300:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 301:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 302:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 303:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 304:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 305:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 306:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 307:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 308:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 309:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 310:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 311:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 312:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_S2ST(sec) S2ST(sec)
 313:./lib/chibios/os/hal/osal/rt/osal.h **** 
 314:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 315:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 316:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 317:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 318:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 319:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 320:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 321:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 322:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 323:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 324:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_MS2ST(msec) MS2ST(msec)
 325:./lib/chibios/os/hal/osal/rt/osal.h **** 
 326:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 327:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 328:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 329:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 330:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 331:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 332:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 333:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 334:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 335:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 336:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_US2ST(usec) US2ST(usec)
 337:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 338:./lib/chibios/os/hal/osal/rt/osal.h **** 
 339:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 340:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 341:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 342:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 343:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 344:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 345:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 346:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 347:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 348:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 349:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 350:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 351:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 352:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 353:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 354:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 355:./lib/chibios/os/hal/osal/rt/osal.h **** 
 356:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 357:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 358:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 359:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 360:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 361:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 362:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 363:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 364:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 365:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 366:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 367:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 368:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 369:./lib/chibios/os/hal/osal/rt/osal.h **** 
 370:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 371:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 372:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 373:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 374:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 375:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 376:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 377:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 378:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 379:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 380:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 381:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 382:./lib/chibios/os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 383:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 384:./lib/chibios/os/hal/osal/rt/osal.h **** 
 385:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 386:./lib/chibios/os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 387:./lib/chibios/os/hal/osal/rt/osal.h ****  * @{
 388:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 389:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 390:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 391:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 392:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 393:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 394:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 395:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sec       time in seconds, must be different from zero
 396:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 397:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 398:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 399:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(sec) osalThreadSleep(OSAL_S2ST(sec))
 400:./lib/chibios/os/hal/osal/rt/osal.h **** 
 401:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 402:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 403:./lib/chibios/os/hal/osal/rt/osal.h ****  *          milliseconds.
 404:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 405:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 406:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 407:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 408:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 409:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 410:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 411:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 412:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msec) osalThreadSleep(OSAL_MS2ST(msec))
 413:./lib/chibios/os/hal/osal/rt/osal.h **** 
 414:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 415:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 416:./lib/chibios/os/hal/osal/rt/osal.h ****  *          microseconds.
 417:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 418:./lib/chibios/os/hal/osal/rt/osal.h ****  *          system tick clock.
 419:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 420:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 421:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] usec      time in microseconds, must be different from zero
 422:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 423:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 424:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 425:./lib/chibios/os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usec) osalThreadSleep(OSAL_US2ST(usec))
 426:./lib/chibios/os/hal/osal/rt/osal.h **** /** @} */
 427:./lib/chibios/os/hal/osal/rt/osal.h **** 
 428:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 429:./lib/chibios/os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 430:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 431:./lib/chibios/os/hal/osal/rt/osal.h **** 
 432:./lib/chibios/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 433:./lib/chibios/os/hal/osal/rt/osal.h **** extern "C" {
 434:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 435:./lib/chibios/os/hal/osal/rt/osal.h **** 
 436:./lib/chibios/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 437:./lib/chibios/os/hal/osal/rt/osal.h **** }
 438:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 439:./lib/chibios/os/hal/osal/rt/osal.h **** 
 440:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 441:./lib/chibios/os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 442:./lib/chibios/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 443:./lib/chibios/os/hal/osal/rt/osal.h **** 
 444:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 445:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 446:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 447:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 448:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 449:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 450:./lib/chibios/os/hal/osal/rt/osal.h **** 
 451:./lib/chibios/os/hal/osal/rt/osal.h **** }
 452:./lib/chibios/os/hal/osal/rt/osal.h **** 
 453:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 454:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 455:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 456:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 457:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 458:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 459:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 460:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 461:./lib/chibios/os/hal/osal/rt/osal.h **** 
 462:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 463:./lib/chibios/os/hal/osal/rt/osal.h **** }
 464:./lib/chibios/os/hal/osal/rt/osal.h **** 
 465:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 466:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 467:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 468:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 469:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 470:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 471:./lib/chibios/os/hal/osal/rt/osal.h **** 
 472:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysDisable();
 473:./lib/chibios/os/hal/osal/rt/osal.h **** }
 474:./lib/chibios/os/hal/osal/rt/osal.h **** 
 475:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 476:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 477:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 478:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 479:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 480:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 481:./lib/chibios/os/hal/osal/rt/osal.h **** 
 482:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysEnable();
 483:./lib/chibios/os/hal/osal/rt/osal.h **** }
 484:./lib/chibios/os/hal/osal/rt/osal.h **** 
 485:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 486:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 487:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 488:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 489:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 490:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 491:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 492:./lib/chibios/os/hal/osal/rt/osal.h **** 
 493:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysLock();
 494:./lib/chibios/os/hal/osal/rt/osal.h **** }
 495:./lib/chibios/os/hal/osal/rt/osal.h **** 
 496:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 497:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 498:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 499:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 500:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 501:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 502:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 503:./lib/chibios/os/hal/osal/rt/osal.h **** 
 504:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysUnlock();
 505:./lib/chibios/os/hal/osal/rt/osal.h **** }
 506:./lib/chibios/os/hal/osal/rt/osal.h **** 
 507:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 508:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 509:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 510:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 511:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 512:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 513:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 514:./lib/chibios/os/hal/osal/rt/osal.h **** 
 515:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 516:./lib/chibios/os/hal/osal/rt/osal.h **** }
 517:./lib/chibios/os/hal/osal/rt/osal.h **** 
 518:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 519:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 520:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 521:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 522:./lib/chibios/os/hal/osal/rt/osal.h ****  * @special
 523:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 524:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 525:./lib/chibios/os/hal/osal/rt/osal.h **** 
 526:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 527:./lib/chibios/os/hal/osal/rt/osal.h **** }
 528:./lib/chibios/os/hal/osal/rt/osal.h **** 
 529:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 530:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 531:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 532:./lib/chibios/os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 533:./lib/chibios/os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 534:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is known.
 535:./lib/chibios/os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 536:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 537:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 538:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 539:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 540:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 541:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 542:./lib/chibios/os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 543:./lib/chibios/os/hal/osal/rt/osal.h **** 
 544:./lib/chibios/os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 545:./lib/chibios/os/hal/osal/rt/osal.h **** }
 546:./lib/chibios/os/hal/osal/rt/osal.h **** 
 547:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 548:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 549:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 550:./lib/chibios/os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 551:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 552:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 553:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 554:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 555:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 556:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 557:./lib/chibios/os/hal/osal/rt/osal.h **** 
 558:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 559:./lib/chibios/os/hal/osal/rt/osal.h **** }
 560:./lib/chibios/os/hal/osal/rt/osal.h **** 
 561:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 562:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 563:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 564:./lib/chibios/os/hal/osal/rt/osal.h ****  *          value.
 565:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 566:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 567:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 568:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 569:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 570:./lib/chibios/os/hal/osal/rt/osal.h **** #if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
 571:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 572:./lib/chibios/os/hal/osal/rt/osal.h **** 
 573:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 574:./lib/chibios/os/hal/osal/rt/osal.h **** }
 575:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 576:./lib/chibios/os/hal/osal/rt/osal.h **** 
 577:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 578:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 579:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 580:./lib/chibios/os/hal/osal/rt/osal.h ****  *          service from the HAL.
 581:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 582:./lib/chibios/os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 583:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 584:./lib/chibios/os/hal/osal/rt/osal.h **** 
 585:./lib/chibios/os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 586:./lib/chibios/os/hal/osal/rt/osal.h **** }
 587:./lib/chibios/os/hal/osal/rt/osal.h **** #endif
 588:./lib/chibios/os/hal/osal/rt/osal.h **** 
 589:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 590:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 591:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 592:./lib/chibios/os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 593:./lib/chibios/os/hal/osal/rt/osal.h ****  *          required in this scenario.
 594:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 595:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 596:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 597:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 598:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 599:./lib/chibios/os/hal/osal/rt/osal.h **** 
 600:./lib/chibios/os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 601:./lib/chibios/os/hal/osal/rt/osal.h **** }
 602:./lib/chibios/os/hal/osal/rt/osal.h **** 
 603:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 604:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 605:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 606:./lib/chibios/os/hal/osal/rt/osal.h ****  *          invocation.
 607:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 608:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 609:./lib/chibios/os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 610:./lib/chibios/os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 611:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 612:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 613:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 614:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 615:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 616:./lib/chibios/os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 617:./lib/chibios/os/hal/osal/rt/osal.h **** 
 618:./lib/chibios/os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 619:./lib/chibios/os/hal/osal/rt/osal.h **** }
 620:./lib/chibios/os/hal/osal/rt/osal.h **** 
 621:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 622:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 623:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 624:./lib/chibios/os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 625:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 626:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 627:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 628:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 629:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 630:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 631:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 632:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 633:./lib/chibios/os/hal/osal/rt/osal.h ****  * @xclass
 634:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 635:./lib/chibios/os/hal/osal/rt/osal.h **** static inline bool osalOsIsTimeWithinX(systime_t time,
 636:./lib/chibios/os/hal/osal/rt/osal.h ****                                        systime_t start,
 637:./lib/chibios/os/hal/osal/rt/osal.h ****                                        systime_t end) {
 638:./lib/chibios/os/hal/osal/rt/osal.h **** 
 639:./lib/chibios/os/hal/osal/rt/osal.h ****   return chVTIsTimeWithinX(time, start, end);
 640:./lib/chibios/os/hal/osal/rt/osal.h **** }
 641:./lib/chibios/os/hal/osal/rt/osal.h **** 
 642:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 643:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 644:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 645:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 646:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 647:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 648:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        normal time specification.
 649:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 650:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 651:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 652:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 653:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 654:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(systime_t time) {
 655:./lib/chibios/os/hal/osal/rt/osal.h **** 
 656:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdSleepS(time);
 657:./lib/chibios/os/hal/osal/rt/osal.h **** }
 658:./lib/chibios/os/hal/osal/rt/osal.h **** 
 659:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 660:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 661:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 662:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 663:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 664:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 665:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        normal time specification.
 666:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 667:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 668:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 669:./lib/chibios/os/hal/osal/rt/osal.h ****  * @api
 670:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 671:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(systime_t time) {
 672:./lib/chibios/os/hal/osal/rt/osal.h **** 
 673:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdSleep(time);
 674:./lib/chibios/os/hal/osal/rt/osal.h **** }
 675:./lib/chibios/os/hal/osal/rt/osal.h **** 
 676:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 677:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 678:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 679:./lib/chibios/os/hal/osal/rt/osal.h ****  *          context.
 680:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 681:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 682:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 683:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 684:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 685:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 686:./lib/chibios/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 687:./lib/chibios/os/hal/osal/rt/osal.h **** 
 688:./lib/chibios/os/hal/osal/rt/osal.h ****   return chThdSuspendS(trp);
 689:./lib/chibios/os/hal/osal/rt/osal.h **** }
 690:./lib/chibios/os/hal/osal/rt/osal.h **** 
 691:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 692:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 693:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 694:./lib/chibios/os/hal/osal/rt/osal.h ****  *          context.
 695:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 696:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 697:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 698:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 699:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 700:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        state.
 701:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 702:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 703:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        occurred.
 704:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 705:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 706:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 707:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 708:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 709:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 710:./lib/chibios/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 711:./lib/chibios/os/hal/osal/rt/osal.h ****                                               systime_t timeout) {
 712:./lib/chibios/os/hal/osal/rt/osal.h **** 
 713:./lib/chibios/os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 714:./lib/chibios/os/hal/osal/rt/osal.h **** }
 715:./lib/chibios/os/hal/osal/rt/osal.h **** 
 716:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 717:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 718:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must not reschedule because it can be called from
 719:./lib/chibios/os/hal/osal/rt/osal.h ****  *          ISR context.
 720:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 721:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 722:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 723:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 724:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 725:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 726:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 727:./lib/chibios/os/hal/osal/rt/osal.h **** 
 728:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdResumeI(trp, msg);
 729:./lib/chibios/os/hal/osal/rt/osal.h **** }
 730:./lib/chibios/os/hal/osal/rt/osal.h **** 
 731:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 732:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 733:./lib/chibios/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 734:./lib/chibios/os/hal/osal/rt/osal.h ****  *          context.
 735:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 736:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 737:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 738:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 739:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 740:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 741:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 742:./lib/chibios/os/hal/osal/rt/osal.h **** 
 743:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdResumeS(trp, msg);
 744:./lib/chibios/os/hal/osal/rt/osal.h **** }
 745:./lib/chibios/os/hal/osal/rt/osal.h **** 
 746:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 747:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Initializes a threads queue object.
 748:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 749:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 750:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 751:./lib/chibios/os/hal/osal/rt/osal.h ****  * @init
 752:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 753:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 754:./lib/chibios/os/hal/osal/rt/osal.h **** 
 755:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdQueueObjectInit(tqp);
 756:./lib/chibios/os/hal/osal/rt/osal.h **** }
 757:./lib/chibios/os/hal/osal/rt/osal.h **** 
 758:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 759:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Enqueues the caller thread.
 760:./lib/chibios/os/hal/osal/rt/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 761:./lib/chibios/os/hal/osal/rt/osal.h ****  *          dequeued or the specified timeouts expires.
 762:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 763:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 764:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] time      the timeout in system ticks, the special values are
 765:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 766:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 767:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        state.
 768:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 769:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 770:./lib/chibios/os/hal/osal/rt/osal.h ****  *                        occurred.
 771:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      .
 772:./lib/chibios/os/hal/osal/rt/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 773:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 774:./lib/chibios/os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 775:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      specified timeout or if the function has been
 776:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 777:./lib/chibios/os/hal/osal/rt/osal.h ****  *                      specification.
 778:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 779:./lib/chibios/os/hal/osal/rt/osal.h ****  * @sclass
 780:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 781:./lib/chibios/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 782:./lib/chibios/os/hal/osal/rt/osal.h ****                                               systime_t time) {
 783:./lib/chibios/os/hal/osal/rt/osal.h **** 
 784:./lib/chibios/os/hal/osal/rt/osal.h ****   return chThdEnqueueTimeoutS(tqp, time);
 785:./lib/chibios/os/hal/osal/rt/osal.h **** }
 786:./lib/chibios/os/hal/osal/rt/osal.h **** 
 787:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 788:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 789:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 790:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 791:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 792:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 793:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 794:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 795:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 796:./lib/chibios/os/hal/osal/rt/osal.h **** 
 797:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdDequeueNextI(tqp, msg);
 798:./lib/chibios/os/hal/osal/rt/osal.h **** }
 799:./lib/chibios/os/hal/osal/rt/osal.h **** 
 800:./lib/chibios/os/hal/osal/rt/osal.h **** /**
 801:./lib/chibios/os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 802:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 803:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 804:./lib/chibios/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 805:./lib/chibios/os/hal/osal/rt/osal.h ****  *
 806:./lib/chibios/os/hal/osal/rt/osal.h ****  * @iclass
 807:./lib/chibios/os/hal/osal/rt/osal.h ****  */
 808:./lib/chibios/os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 809:./lib/chibios/os/hal/osal/rt/osal.h **** 
 810:./lib/chibios/os/hal/osal/rt/osal.h ****   chThdDequeueAllI(tqp, msg);
  99              		.loc 3 810 0
 100 000a 6FF00101 		mvn	r1, #1
 101 000e FFF7FEBF 		b	chThdDequeueAllI
 102              	.LVL6:
 103              	.LBE212:
 104              	.LBE211:
 105              		.cfi_endproc
 106              	.LFE280:
 108              		.section	.text.iqPutI,"ax",%progbits
 109              		.align	1
 110              		.global	iqPutI
 111              		.syntax unified
 112              		.thumb
 113              		.thumb_func
 114              		.fpu softvfp
 116              	iqPutI:
 117              	.LFB281:
  86:lib/chibios/os/hal/src/hal_queues.c ****   osalThreadDequeueAllI(&iqp->q_waiting, MSG_RESET);
  87:lib/chibios/os/hal/src/hal_queues.c **** }
  88:lib/chibios/os/hal/src/hal_queues.c **** 
  89:lib/chibios/os/hal/src/hal_queues.c **** /**
  90:lib/chibios/os/hal/src/hal_queues.c ****  * @brief   Input queue write.
  91:lib/chibios/os/hal/src/hal_queues.c ****  * @details A byte value is written into the low end of an input queue.
  92:lib/chibios/os/hal/src/hal_queues.c ****  *
  93:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
  94:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
  95:lib/chibios/os/hal/src/hal_queues.c ****  * @return              The operation status.
  96:lib/chibios/os/hal/src/hal_queues.c ****  * @retval MSG_OK       if the operation has been completed with success.
  97:lib/chibios/os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is full and the operation cannot be
  98:lib/chibios/os/hal/src/hal_queues.c ****  *                      completed.
  99:lib/chibios/os/hal/src/hal_queues.c ****  *
 100:lib/chibios/os/hal/src/hal_queues.c ****  * @iclass
 101:lib/chibios/os/hal/src/hal_queues.c ****  */
 102:lib/chibios/os/hal/src/hal_queues.c **** msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 118              		.loc 1 102 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              	.LVL7:
 123 0000 08B5     		push	{r3, lr}
 124              		.cfi_def_cfa_offset 8
 125              		.cfi_offset 3, -8
 126              		.cfi_offset 14, -4
 103:lib/chibios/os/hal/src/hal_queues.c **** 
 104:lib/chibios/os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 105:lib/chibios/os/hal/src/hal_queues.c **** 
 106:lib/chibios/os/hal/src/hal_queues.c ****   if (iqIsFullI(iqp)) {
 127              		.loc 1 106 0
 128 0002 D0E90532 		ldrd	r3, r2, [r0, #20]
 129 0006 9342     		cmp	r3, r2
 130 0008 01D1     		bne	.L4
 131              		.loc 1 106 0 is_stmt 0 discriminator 1
 132 000a 8268     		ldr	r2, [r0, #8]
 133 000c 82B9     		cbnz	r2, .L7
 134              	.L4:
 107:lib/chibios/os/hal/src/hal_queues.c ****     return MSG_TIMEOUT;
 108:lib/chibios/os/hal/src/hal_queues.c ****   }
 109:lib/chibios/os/hal/src/hal_queues.c **** 
 110:lib/chibios/os/hal/src/hal_queues.c ****   iqp->q_counter++;
 135              		.loc 1 110 0 is_stmt 1
 136 000e 8268     		ldr	r2, [r0, #8]
 137 0010 0132     		adds	r2, r2, #1
 138 0012 8260     		str	r2, [r0, #8]
 111:lib/chibios/os/hal/src/hal_queues.c ****   *iqp->q_wrptr++ = b;
 139              		.loc 1 111 0
 140 0014 5A1C     		adds	r2, r3, #1
 141 0016 4261     		str	r2, [r0, #20]
 142 0018 1970     		strb	r1, [r3]
 112:lib/chibios/os/hal/src/hal_queues.c ****   if (iqp->q_wrptr >= iqp->q_top) {
 143              		.loc 1 112 0
 144 001a D0E90432 		ldrd	r3, r2, [r0, #16]
 145 001e 9A42     		cmp	r2, r3
 113:lib/chibios/os/hal/src/hal_queues.c ****     iqp->q_wrptr = iqp->q_buffer;
 146              		.loc 1 113 0
 147 0020 24BF     		itt	cs
 148 0022 C368     		ldrcs	r3, [r0, #12]
 149 0024 4361     		strcs	r3, [r0, #20]
 150              	.LVL8:
 151              	.LBB213:
 152              	.LBB214:
 797:./lib/chibios/os/hal/osal/rt/osal.h **** }
 153              		.loc 3 797 0
 154 0026 0021     		movs	r1, #0
 155              	.LVL9:
 156 0028 FFF7FEFF 		bl	chThdDequeueNextI
 157              	.LVL10:
 158              	.LBE214:
 159              	.LBE213:
 114:lib/chibios/os/hal/src/hal_queues.c ****   }
 115:lib/chibios/os/hal/src/hal_queues.c **** 
 116:lib/chibios/os/hal/src/hal_queues.c ****   osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 117:lib/chibios/os/hal/src/hal_queues.c **** 
 118:lib/chibios/os/hal/src/hal_queues.c ****   return MSG_OK;
 160              		.loc 1 118 0
 161 002c 0020     		movs	r0, #0
 162              	.L3:
 119:lib/chibios/os/hal/src/hal_queues.c **** }
 163              		.loc 1 119 0
 164 002e 08BD     		pop	{r3, pc}
 165              	.LVL11:
 166              	.L7:
 107:lib/chibios/os/hal/src/hal_queues.c ****   }
 167              		.loc 1 107 0
 168 0030 4FF0FF30 		mov	r0, #-1
 169              	.LVL12:
 170 0034 FBE7     		b	.L3
 171              		.cfi_endproc
 172              	.LFE281:
 174              		.section	.text.iqGetTimeout,"ax",%progbits
 175              		.align	1
 176              		.global	iqGetTimeout
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 180              		.fpu softvfp
 182              	iqGetTimeout:
 183              	.LFB282:
 120:lib/chibios/os/hal/src/hal_queues.c **** 
 121:lib/chibios/os/hal/src/hal_queues.c **** /**
 122:lib/chibios/os/hal/src/hal_queues.c ****  * @brief   Input queue read with timeout.
 123:lib/chibios/os/hal/src/hal_queues.c ****  * @details This function reads a byte value from an input queue. If the queue
 124:lib/chibios/os/hal/src/hal_queues.c ****  *          is empty then the calling thread is suspended until a byte arrives
 125:lib/chibios/os/hal/src/hal_queues.c ****  *          in the queue or a timeout occurs.
 126:lib/chibios/os/hal/src/hal_queues.c ****  * @note    The callback is invoked after removing a character from the
 127:lib/chibios/os/hal/src/hal_queues.c ****  *          queue.
 128:lib/chibios/os/hal/src/hal_queues.c ****  *
 129:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 130:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 131:lib/chibios/os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 132:lib/chibios/os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 133:lib/chibios/os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 134:lib/chibios/os/hal/src/hal_queues.c ****  *                      .
 135:lib/chibios/os/hal/src/hal_queues.c ****  * @return              A byte value from the queue.
 136:lib/chibios/os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 137:lib/chibios/os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 138:lib/chibios/os/hal/src/hal_queues.c ****  *
 139:lib/chibios/os/hal/src/hal_queues.c ****  * @api
 140:lib/chibios/os/hal/src/hal_queues.c ****  */
 141:lib/chibios/os/hal/src/hal_queues.c **** msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 184              		.loc 1 141 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              	.LVL13:
 189 0000 70B5     		push	{r4, r5, r6, lr}
 190              		.cfi_def_cfa_offset 16
 191              		.cfi_offset 4, -16
 192              		.cfi_offset 5, -12
 193              		.cfi_offset 6, -8
 194              		.cfi_offset 14, -4
 195              	.LBB215:
 196              	.LBB216:
 197              	.LBB217:
 198              	.LBB218:
 199              	.LBB219:
 200              		.file 4 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h"
   1:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**************************************************************************//**
   2:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @version  V4.30
   5:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  ******************************************************************************/
   7:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
   9:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    All rights reserved.
  10:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****      specific prior written permission.
  20:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    *
  21:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  34:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  35:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  38:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #endif
  45:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  46:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  47:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   @{
  51:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  52:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  53:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  54:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  58:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  60:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  62:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  63:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  64:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  65:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  69:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  71:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  73:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  74:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  75:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  76:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Control Register value
  79:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  80:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  82:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
  83:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  84:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
  86:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  87:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  88:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  89:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
  90:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
  94:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
  96:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
  98:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
  99:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 100:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 101:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 105:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 107:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 108:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 109:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 111:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 112:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 113:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 114:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 115:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               APSR Register value
 118:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 119:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 121:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 122:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 123:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 125:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 126:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 127:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 128:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 129:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 132:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 134:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 136:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 137:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 138:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 140:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 141:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 142:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 143:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 144:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               PSP Register value
 147:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 148:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 150:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 151:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 152:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 154:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 155:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 156:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 157:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 158:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 162:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 164:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 166:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 167:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 168:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 169:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               MSP Register value
 172:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 173:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 175:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   register uint32_t result;
 176:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 177:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 179:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 180:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 181:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 182:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 183:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 186:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 188:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 190:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 192:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 193:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 194:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 195:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 199:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 201:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 202:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 203:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 205:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 206:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 207:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 208:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 209:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 213:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 215:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 217:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 218:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 219:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 221:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 222:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 226:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 228:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 230:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 231:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 232:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 233:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 237:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 239:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 241:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 242:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 243:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 244:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 248:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 250:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   uint32_t result;
 251:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 252:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   return(result);
 254:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** }
 255:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 256:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** 
 257:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** /**
 258:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****  */
 262:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h **** {
 264:./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 201              		.loc 4 264 0
 202 0002 2023     		movs	r3, #32
 203              	.LBE219:
 204              	.LBE218:
 205              	.LBE217:
 206              	.LBE216:
 207              	.LBE215:
 208              		.loc 1 141 0
 209 0004 0446     		mov	r4, r0
 210 0006 0E46     		mov	r6, r1
 211              	.LBB224:
 212              	.LBB223:
 213              	.LBB222:
 214              	.LBB221:
 215              	.LBB220:
 216              		.loc 4 264 0
 217              		.syntax unified
 218              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 219 0008 83F31188 		MSR basepri, r3
 220              	@ 0 "" 2
 221              	.LVL14:
 222              		.thumb
 223              		.syntax unified
 224              	.L9:
 225              	.LBE220:
 226              	.LBE221:
 227              	.LBE222:
 228              	.LBE223:
 229              	.LBE224:
 142:lib/chibios/os/hal/src/hal_queues.c ****   uint8_t b;
 143:lib/chibios/os/hal/src/hal_queues.c **** 
 144:lib/chibios/os/hal/src/hal_queues.c ****   osalSysLock();
 145:lib/chibios/os/hal/src/hal_queues.c **** 
 146:lib/chibios/os/hal/src/hal_queues.c ****   /* Waiting until there is a character available or a timeout occurs.*/
 147:lib/chibios/os/hal/src/hal_queues.c ****   while (iqIsEmptyI(iqp)) {
 230              		.loc 1 147 0
 231 000c A568     		ldr	r5, [r4, #8]
 232 000e A5B1     		cbz	r5, .L11
 148:lib/chibios/os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 149:lib/chibios/os/hal/src/hal_queues.c ****     if (msg < MSG_OK) {
 150:lib/chibios/os/hal/src/hal_queues.c ****       osalSysUnlock();
 151:lib/chibios/os/hal/src/hal_queues.c ****       return msg;
 152:lib/chibios/os/hal/src/hal_queues.c ****     }
 153:lib/chibios/os/hal/src/hal_queues.c ****   }
 154:lib/chibios/os/hal/src/hal_queues.c **** 
 155:lib/chibios/os/hal/src/hal_queues.c ****   /* Getting the character from the queue.*/
 156:lib/chibios/os/hal/src/hal_queues.c ****   iqp->q_counter--;
 233              		.loc 1 156 0
 234 0010 A368     		ldr	r3, [r4, #8]
 157:lib/chibios/os/hal/src/hal_queues.c ****   b = *iqp->q_rdptr++;
 235              		.loc 1 157 0
 236 0012 A269     		ldr	r2, [r4, #24]
 156:lib/chibios/os/hal/src/hal_queues.c ****   b = *iqp->q_rdptr++;
 237              		.loc 1 156 0
 238 0014 013B     		subs	r3, r3, #1
 239 0016 A360     		str	r3, [r4, #8]
 240              		.loc 1 157 0
 241 0018 531C     		adds	r3, r2, #1
 242 001a A361     		str	r3, [r4, #24]
 243 001c 1578     		ldrb	r5, [r2]	@ zero_extendqisi2
 244              	.LVL15:
 158:lib/chibios/os/hal/src/hal_queues.c ****   if (iqp->q_rdptr >= iqp->q_top) {
 245              		.loc 1 158 0
 246 001e 2269     		ldr	r2, [r4, #16]
 247 0020 9342     		cmp	r3, r2
 159:lib/chibios/os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer;
 248              		.loc 1 159 0
 249 0022 24BF     		itt	cs
 250 0024 E368     		ldrcs	r3, [r4, #12]
 251 0026 A361     		strcs	r3, [r4, #24]
 160:lib/chibios/os/hal/src/hal_queues.c ****   }
 161:lib/chibios/os/hal/src/hal_queues.c **** 
 162:lib/chibios/os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one slot available.*/
 163:lib/chibios/os/hal/src/hal_queues.c ****   if (iqp->q_notify != NULL) {
 252              		.loc 1 163 0
 253 0028 E369     		ldr	r3, [r4, #28]
 254 002a 0BB1     		cbz	r3, .L13
 164:lib/chibios/os/hal/src/hal_queues.c ****     iqp->q_notify(iqp);
 255              		.loc 1 164 0
 256 002c 2046     		mov	r0, r4
 257 002e 9847     		blx	r3
 258              	.LVL16:
 259              	.L13:
 260              	.LBB225:
 261              	.LBB226:
 262              	.LBB227:
 263              	.LBB228:
 264              	.LBB229:
 265              	.LBB230:
 266              		.loc 4 264 0
 267 0030 0023     		movs	r3, #0
 268              		.syntax unified
 269              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 270 0032 83F31188 		MSR basepri, r3
 271              	@ 0 "" 2
 272              	.LVL17:
 273              		.thumb
 274              		.syntax unified
 275              	.LBE230:
 276              	.LBE229:
 277              	.LBE228:
 278              	.LBE227:
 279              	.LBE226:
 280              	.LBE225:
 165:lib/chibios/os/hal/src/hal_queues.c ****   }
 166:lib/chibios/os/hal/src/hal_queues.c **** 
 167:lib/chibios/os/hal/src/hal_queues.c ****   osalSysUnlock();
 168:lib/chibios/os/hal/src/hal_queues.c **** 
 169:lib/chibios/os/hal/src/hal_queues.c ****   return (msg_t)b;
 281              		.loc 1 169 0
 282 0036 2846     		mov	r0, r5
 283 0038 07E0     		b	.L8
 284              	.LVL18:
 285              	.L11:
 286              	.LBB231:
 287              	.LBB232:
 288              	.LBB233:
 784:./lib/chibios/os/hal/osal/rt/osal.h **** }
 289              		.loc 3 784 0
 290 003a 3146     		mov	r1, r6
 291 003c 2046     		mov	r0, r4
 292 003e FFF7FEFF 		bl	chThdEnqueueTimeoutS
 293              	.LVL19:
 294              	.LBE233:
 295              	.LBE232:
 149:lib/chibios/os/hal/src/hal_queues.c ****       osalSysUnlock();
 296              		.loc 1 149 0
 297 0042 0028     		cmp	r0, #0
 298 0044 E2DA     		bge	.L9
 299              	.LVL20:
 300              	.LBB234:
 301              	.LBB235:
 302              	.LBB236:
 303              	.LBB237:
 304              	.LBB238:
 305              	.LBB239:
 306              		.loc 4 264 0
 307              		.syntax unified
 308              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 309 0046 85F31188 		MSR basepri, r5
 310              	@ 0 "" 2
 311              	.LVL21:
 312              		.thumb
 313              		.syntax unified
 314              	.L8:
 315              	.LBE239:
 316              	.LBE238:
 317              	.LBE237:
 318              	.LBE236:
 319              	.LBE235:
 320              	.LBE234:
 321              	.LBE231:
 170:lib/chibios/os/hal/src/hal_queues.c **** }
 322              		.loc 1 170 0
 323 004a 70BD     		pop	{r4, r5, r6, pc}
 324              		.cfi_endproc
 325              	.LFE282:
 327              		.section	.text.iqReadTimeout,"ax",%progbits
 328              		.align	1
 329              		.global	iqReadTimeout
 330              		.syntax unified
 331              		.thumb
 332              		.thumb_func
 333              		.fpu softvfp
 335              	iqReadTimeout:
 336              	.LFB283:
 171:lib/chibios/os/hal/src/hal_queues.c **** 
 172:lib/chibios/os/hal/src/hal_queues.c **** /**
 173:lib/chibios/os/hal/src/hal_queues.c ****  * @brief   Input queue read with timeout.
 174:lib/chibios/os/hal/src/hal_queues.c ****  * @details The function reads data from an input queue into a buffer. The
 175:lib/chibios/os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
 176:lib/chibios/os/hal/src/hal_queues.c ****  *          transferred or after the specified timeout or if the queue has
 177:lib/chibios/os/hal/src/hal_queues.c ****  *          been reset.
 178:lib/chibios/os/hal/src/hal_queues.c ****  * @note    The function is not atomic, if you need atomicity it is suggested
 179:lib/chibios/os/hal/src/hal_queues.c ****  *          to use a semaphore or a mutex for mutual exclusion.
 180:lib/chibios/os/hal/src/hal_queues.c ****  * @note    The callback is invoked after removing each character from the
 181:lib/chibios/os/hal/src/hal_queues.c ****  *          queue.
 182:lib/chibios/os/hal/src/hal_queues.c ****  *
 183:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 184:lib/chibios/os/hal/src/hal_queues.c ****  * @param[out] bp       pointer to the data buffer
 185:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 186:lib/chibios/os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 187:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 188:lib/chibios/os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 189:lib/chibios/os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 190:lib/chibios/os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 191:lib/chibios/os/hal/src/hal_queues.c ****  *                      .
 192:lib/chibios/os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 193:lib/chibios/os/hal/src/hal_queues.c ****  *
 194:lib/chibios/os/hal/src/hal_queues.c ****  * @api
 195:lib/chibios/os/hal/src/hal_queues.c ****  */
 196:lib/chibios/os/hal/src/hal_queues.c **** size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
 197:lib/chibios/os/hal/src/hal_queues.c ****                      size_t n, systime_t timeout) {
 337              		.loc 1 197 0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 16
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341              	.LVL22:
 342 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 343              		.cfi_def_cfa_offset 36
 344              		.cfi_offset 4, -36
 345              		.cfi_offset 5, -32
 346              		.cfi_offset 6, -28
 347              		.cfi_offset 7, -24
 348              		.cfi_offset 8, -20
 349              		.cfi_offset 9, -16
 350              		.cfi_offset 10, -12
 351              		.cfi_offset 11, -8
 352              		.cfi_offset 14, -4
 353 0004 1E46     		mov	r6, r3
 354 0006 85B0     		sub	sp, sp, #20
 355              		.cfi_def_cfa_offset 56
 356              		.loc 1 197 0
 357 0008 0446     		mov	r4, r0
 358 000a 0F46     		mov	r7, r1
 359 000c 9046     		mov	r8, r2
 198:lib/chibios/os/hal/src/hal_queues.c ****   systime_t deadline;
 199:lib/chibios/os/hal/src/hal_queues.c ****   qnotify_t nfy = iqp->q_notify;
 360              		.loc 1 199 0
 361 000e D0F81C90 		ldr	r9, [r0, #28]
 362              	.LVL23:
 363              	.LBB240:
 364              	.LBB241:
 365              	.LBB242:
 366              	.LBB243:
 367              	.LBB244:
 368              		.loc 4 264 0
 369 0012 2023     		movs	r3, #32
 370              	.LVL24:
 371              		.syntax unified
 372              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 373 0014 83F31188 		MSR basepri, r3
 374              	@ 0 "" 2
 375              	.LVL25:
 376              		.thumb
 377              		.syntax unified
 378              	.LBE244:
 379              	.LBE243:
 380              	.LBE242:
 381              	.LBE241:
 382              	.LBE240:
 383              	.LBB245:
 384              	.LBB246:
 385              	.LBB247:
 386              	.LBB248:
 387              	.LBB249:
 388              		.file 5 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h"
   1:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*
   2:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     ChibiOS - Copyright (C) 2006..2016 Giovanni Di Sirio
   3:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
   4:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     you may not use this file except in compliance with the License.
   6:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     You may obtain a copy of the License at
   7:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
   8:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  10:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     Unless required by applicable law or agreed to in writing, software
  11:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     See the License for the specific language governing permissions and
  14:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****     limitations under the License.
  15:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** */
  16:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  17:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  18:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @file    TIMv1/hal_st_lld.h
  19:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   ST Driver subsystem low level driver header.
  20:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @details This header is designed to be include-able without having to
  21:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *          include other files from the HAL.
  22:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *
  23:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @addtogroup ST
  24:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @{
  25:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  26:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  27:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #ifndef HAL_ST_LLD_H
  28:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define HAL_ST_LLD_H
  29:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  30:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #include "mcuconf.h"
  31:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #include "stm32_registry.h"
  32:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #include "stm32_tim.h"
  33:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  34:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  35:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver constants.                                                         */
  36:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  37:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  38:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  39:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver pre-compile time settings.                                         */
  40:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  41:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  42:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  43:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @name    Configuration options
  44:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @{
  45:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  46:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  47:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   SysTick timer IRQ priority.
  48:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  49:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !defined(STM32_ST_IRQ_PRIORITY) || defined(__DOXYGEN__)
  50:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_IRQ_PRIORITY               8
  51:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  52:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  53:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
  54:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   TIMx unit (by number) to be used for free running operations.
  55:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @note    You must select a 32 bits timer if a 32 bits @p systick_t type
  56:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *          is required.
  57:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @note    Timers 2, 3, 4 and 5 are supported.
  58:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
  59:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !defined(STM32_ST_USE_TIMER) || defined(__DOXYGEN__)
  60:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_USE_TIMER                  2
  61:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  62:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /** @} */
  63:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  64:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  65:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Derived constants and error checks.                                       */
  66:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
  67:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  68:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if STM32_ST_USE_TIMER == 2
  69:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM2
  70:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM2 not present"
  71:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  72:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM2
  73:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  74:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 3
  75:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM3
  76:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM3 not present"
  77:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  78:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM3
  79:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  80:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 4
  81:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM4
  82:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM4 not present"
  83:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  84:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM4
  85:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  86:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 5
  87:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM5
  88:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM5 not present"
  89:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  90:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM5
  91:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  92:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 21
  93:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM21
  94:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM21 not present"
  95:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
  96:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM21
  97:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
  98:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #elif STM32_ST_USE_TIMER == 22
  99:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #if !STM32_HAS_TIM22
 100:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "TIM22 not present"
 101:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 102:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #define STM32_ST_TIM                              STM32_TIM22
 103:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 104:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #else
 105:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #error "STM32_ST_USE_TIMER specifies an unsupported timer"
 106:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 107:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 108:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 109:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver data structures and types.                                         */
 110:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 111:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 112:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 113:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver macros.                                                            */
 114:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 115:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 116:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 117:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* External declarations.                                                    */
 118:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 119:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 120:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
 121:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** extern "C" {
 122:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 123:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****   void st_lld_init(void);
 124:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #ifdef __cplusplus
 125:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** }
 126:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** #endif
 127:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 128:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 129:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /* Driver inline functions.                                                  */
 130:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /*===========================================================================*/
 131:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 132:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** /**
 133:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @brief   Returns the time counter value.
 134:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *
 135:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @return              The counter value.
 136:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  *
 137:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  * @notapi
 138:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****  */
 139:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** static inline systime_t st_lld_get_counter(void) {
 140:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h **** 
 141:./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_st_lld.h ****   return (systime_t)STM32_ST_TIM->CNT;
 389              		.loc 5 141 0
 390 0018 4FF08042 		mov	r2, #1073741824
 391              	.LVL26:
 392              	.LBE249:
 393              	.LBE248:
 394              	.LBE247:
 395              	.LBE246:
 396              	.LBE245:
 200:lib/chibios/os/hal/src/hal_queues.c ****   size_t r = 0;
 397              		.loc 1 200 0
 398 001c 0025     		movs	r5, #0
 399              	.LBB254:
 400              	.LBB253:
 401              	.LBB252:
 402              	.LBB251:
 403              	.LBB250:
 404              		.loc 5 141 0
 405 001e 526A     		ldr	r2, [r2, #36]
 406              	.LBE250:
 407              	.LBE251:
 408              	.LBE252:
 409              	.LBE253:
 410              	.LBE254:
 411              	.LBB255:
 412              	.LBB256:
 413              	.LBB257:
 414              	.LBB258:
 415              	.LBB259:
 416              		.loc 4 264 0
 417 0020 0293     		str	r3, [sp, #8]
 418              	.LBE259:
 419              	.LBE258:
 420              	.LBE257:
 421              	.LBE256:
 422              	.LBE255:
 201:lib/chibios/os/hal/src/hal_queues.c **** 
 202:lib/chibios/os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 203:lib/chibios/os/hal/src/hal_queues.c **** 
 204:lib/chibios/os/hal/src/hal_queues.c ****   osalSysLock();
 205:lib/chibios/os/hal/src/hal_queues.c **** 
 206:lib/chibios/os/hal/src/hal_queues.c ****   /* Time deadline for the whole operation, note the result is invalid
 207:lib/chibios/os/hal/src/hal_queues.c ****      when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
 208:lib/chibios/os/hal/src/hal_queues.c ****      the deadline is not used.*/
 209:lib/chibios/os/hal/src/hal_queues.c ****   deadline = osalOsGetSystemTimeX() + timeout;
 423              		.loc 1 209 0
 424 0022 B218     		adds	r2, r6, r2
 425 0024 0192     		str	r2, [sp, #4]
 426              	.LVL27:
 427              	.LBB264:
 428              	.LBB265:
 429              	.LBB266:
 430              	.LBB267:
 431              	.LBB268:
 432              	.LBB269:
 433              		.loc 4 264 0
 434 0026 AA46     		mov	r10, r5
 435              	.LBE269:
 436              	.LBE268:
 437              	.LBE267:
 438              	.LBE266:
 439              	.LBE265:
 440              	.LBE264:
 441              	.LBB275:
 210:lib/chibios/os/hal/src/hal_queues.c **** 
 211:lib/chibios/os/hal/src/hal_queues.c ****   while (true) {
 212:lib/chibios/os/hal/src/hal_queues.c ****     /* Waiting until there is a character available or a timeout occurs.*/
 213:lib/chibios/os/hal/src/hal_queues.c ****     while (iqIsEmptyI(iqp)) {
 214:lib/chibios/os/hal/src/hal_queues.c ****       msg_t msg;
 215:lib/chibios/os/hal/src/hal_queues.c **** 
 216:lib/chibios/os/hal/src/hal_queues.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 217:lib/chibios/os/hal/src/hal_queues.c ****          deadline.*/
 218:lib/chibios/os/hal/src/hal_queues.c ****       if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 442              		.loc 1 218 0
 443 0028 06F1FF3B 		add	fp, r6, #-1
 444              	.LVL28:
 445              	.L19:
 446              	.LBE275:
 213:lib/chibios/os/hal/src/hal_queues.c ****       msg_t msg;
 447              		.loc 1 213 0
 448 002c A368     		ldr	r3, [r4, #8]
 449 002e 0BB3     		cbz	r3, .L25
 219:lib/chibios/os/hal/src/hal_queues.c ****         msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 220:lib/chibios/os/hal/src/hal_queues.c ****       }
 221:lib/chibios/os/hal/src/hal_queues.c ****       else {
 222:lib/chibios/os/hal/src/hal_queues.c ****         systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 223:lib/chibios/os/hal/src/hal_queues.c **** 
 224:lib/chibios/os/hal/src/hal_queues.c ****         /* Handling the case where the system time went past the deadline,
 225:lib/chibios/os/hal/src/hal_queues.c ****            in this case next becomes a very high number because the system
 226:lib/chibios/os/hal/src/hal_queues.c ****            time is an unsigned type.*/
 227:lib/chibios/os/hal/src/hal_queues.c ****         if (next_timeout > timeout) {
 228:lib/chibios/os/hal/src/hal_queues.c ****           osalSysUnlock();
 229:lib/chibios/os/hal/src/hal_queues.c ****           return r;
 230:lib/chibios/os/hal/src/hal_queues.c ****         }
 231:lib/chibios/os/hal/src/hal_queues.c **** 
 232:lib/chibios/os/hal/src/hal_queues.c ****         msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, next_timeout);
 233:lib/chibios/os/hal/src/hal_queues.c ****       }
 234:lib/chibios/os/hal/src/hal_queues.c **** 
 235:lib/chibios/os/hal/src/hal_queues.c ****       /* Anything except MSG_OK causes the operation to stop.*/
 236:lib/chibios/os/hal/src/hal_queues.c ****       if (msg != MSG_OK) {
 237:lib/chibios/os/hal/src/hal_queues.c ****         osalSysUnlock();
 238:lib/chibios/os/hal/src/hal_queues.c ****         return r;
 239:lib/chibios/os/hal/src/hal_queues.c ****       }
 240:lib/chibios/os/hal/src/hal_queues.c ****     }
 241:lib/chibios/os/hal/src/hal_queues.c **** 
 242:lib/chibios/os/hal/src/hal_queues.c ****     /* Getting the character from the queue.*/
 243:lib/chibios/os/hal/src/hal_queues.c ****     iqp->q_counter--;
 450              		.loc 1 243 0
 451 0030 A368     		ldr	r3, [r4, #8]
 452 0032 013B     		subs	r3, r3, #1
 453 0034 A360     		str	r3, [r4, #8]
 244:lib/chibios/os/hal/src/hal_queues.c ****     *bp++ = *iqp->q_rdptr++;
 454              		.loc 1 244 0
 455 0036 A369     		ldr	r3, [r4, #24]
 456 0038 5A1C     		adds	r2, r3, #1
 457 003a A261     		str	r2, [r4, #24]
 458 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 459 003e 3B70     		strb	r3, [r7]
 245:lib/chibios/os/hal/src/hal_queues.c ****     if (iqp->q_rdptr >= iqp->q_top) {
 460              		.loc 1 245 0
 461 0040 2369     		ldr	r3, [r4, #16]
 462 0042 A169     		ldr	r1, [r4, #24]
 463 0044 9942     		cmp	r1, r3
 246:lib/chibios/os/hal/src/hal_queues.c ****       iqp->q_rdptr = iqp->q_buffer;
 464              		.loc 1 246 0
 465 0046 24BF     		itt	cs
 466 0048 E368     		ldrcs	r3, [r4, #12]
 467 004a A361     		strcs	r3, [r4, #24]
 244:lib/chibios/os/hal/src/hal_queues.c ****     *bp++ = *iqp->q_rdptr++;
 468              		.loc 1 244 0
 469 004c 7A1C     		adds	r2, r7, #1
 470              	.LVL29:
 247:lib/chibios/os/hal/src/hal_queues.c ****     }
 248:lib/chibios/os/hal/src/hal_queues.c **** 
 249:lib/chibios/os/hal/src/hal_queues.c ****     /* Inform the low side that the queue has at least one slot available.*/
 250:lib/chibios/os/hal/src/hal_queues.c ****     if (nfy != NULL) {
 471              		.loc 1 250 0
 472 004e B9F1000F 		cmp	r9, #0
 473 0052 03D0     		beq	.L27
 474 0054 0392     		str	r2, [sp, #12]
 251:lib/chibios/os/hal/src/hal_queues.c ****       nfy(iqp);
 475              		.loc 1 251 0
 476 0056 2046     		mov	r0, r4
 477 0058 C847     		blx	r9
 478              	.LVL30:
 479 005a 039A     		ldr	r2, [sp, #12]
 480              	.LVL31:
 481              	.L27:
 482              	.LBB299:
 483              	.LBB274:
 484              	.LBB273:
 485              	.LBB272:
 486              	.LBB271:
 487              	.LBB270:
 488              		.loc 4 264 0
 489              		.syntax unified
 490              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 491 005c 8AF31188 		MSR basepri, r10
 492              	@ 0 "" 2
 493              	.LVL32:
 494              		.thumb
 495              		.syntax unified
 496              	.LBE270:
 497              	.LBE271:
 498              	.LBE272:
 499              	.LBE273:
 500              	.LBE274:
 501              	.LBE299:
 252:lib/chibios/os/hal/src/hal_queues.c ****     }
 253:lib/chibios/os/hal/src/hal_queues.c **** 
 254:lib/chibios/os/hal/src/hal_queues.c ****     /* Giving a preemption chance in a controlled point.*/
 255:lib/chibios/os/hal/src/hal_queues.c ****     osalSysUnlock();
 256:lib/chibios/os/hal/src/hal_queues.c **** 
 257:lib/chibios/os/hal/src/hal_queues.c ****     r++;
 258:lib/chibios/os/hal/src/hal_queues.c ****     if (--n == 0U) {
 502              		.loc 1 258 0
 503 0060 B8F10108 		subs	r8, r8, #1
 504              	.LVL33:
 257:lib/chibios/os/hal/src/hal_queues.c ****     if (--n == 0U) {
 505              		.loc 1 257 0
 506 0064 05F10105 		add	r5, r5, #1
 507              	.LVL34:
 508              		.loc 1 258 0
 509 0068 18D0     		beq	.L18
 510              	.LVL35:
 511              	.LBB300:
 512              	.LBB263:
 513              	.LBB262:
 514              	.LBB261:
 515              	.LBB260:
 516              		.loc 4 264 0
 517 006a 029B     		ldr	r3, [sp, #8]
 518              		.syntax unified
 519              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 520 006c 83F31188 		MSR basepri, r3
 521              	@ 0 "" 2
 522              	.LVL36:
 523              		.thumb
 524              		.syntax unified
 525              	.LBE260:
 526              	.LBE261:
 527              	.LBE262:
 528              	.LBE263:
 529              	.LBE300:
 244:lib/chibios/os/hal/src/hal_queues.c ****     if (iqp->q_rdptr >= iqp->q_top) {
 530              		.loc 1 244 0
 531 0070 1746     		mov	r7, r2
 532              	.LVL37:
 533 0072 DBE7     		b	.L19
 534              	.LVL38:
 535              	.L25:
 536              	.LBB301:
 218:lib/chibios/os/hal/src/hal_queues.c ****         msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 537              		.loc 1 218 0
 538 0074 1BF1030F 		cmn	fp, #3
 539 0078 07D9     		bls	.L20
 540              	.LVL39:
 541              	.LBB276:
 542              	.LBB277:
 784:./lib/chibios/os/hal/osal/rt/osal.h **** }
 543              		.loc 3 784 0
 544 007a 3146     		mov	r1, r6
 545              	.LVL40:
 546              	.L22:
 547              	.LBE277:
 548              	.LBE276:
 549              	.LBB278:
 550              	.LBB279:
 551              	.LBB280:
 552 007c 2046     		mov	r0, r4
 553 007e FFF7FEFF 		bl	chThdEnqueueTimeoutS
 554              	.LVL41:
 555              	.LBE280:
 556              	.LBE279:
 557              	.LBE278:
 236:lib/chibios/os/hal/src/hal_queues.c ****         osalSysUnlock();
 558              		.loc 1 236 0
 559 0082 0028     		cmp	r0, #0
 560 0084 D2D0     		beq	.L19
 561              	.LVL42:
 562              	.LBB286:
 563              	.LBB287:
 564              	.LBB288:
 565              	.LBB289:
 566              	.LBB290:
 567              	.LBB291:
 568              		.loc 4 264 0
 569 0086 0023     		movs	r3, #0
 570 0088 06E0     		b	.L37
 571              	.LVL43:
 572              	.L20:
 573              	.LBE291:
 574              	.LBE290:
 575              	.LBE289:
 576              	.LBE288:
 577              	.LBE287:
 578              	.LBE286:
 579              	.LBB297:
 580              	.LBB281:
 581              	.LBB282:
 582              	.LBB283:
 583              	.LBB284:
 584              	.LBB285:
 585              		.loc 5 141 0
 586 008a 4FF08042 		mov	r2, #1073741824
 587 008e 516A     		ldr	r1, [r2, #36]
 588              	.LBE285:
 589              	.LBE284:
 590              	.LBE283:
 591              	.LBE282:
 592              	.LBE281:
 222:lib/chibios/os/hal/src/hal_queues.c **** 
 593              		.loc 1 222 0
 594 0090 019A     		ldr	r2, [sp, #4]
 595 0092 511A     		subs	r1, r2, r1
 596              	.LVL44:
 227:lib/chibios/os/hal/src/hal_queues.c ****           osalSysUnlock();
 597              		.loc 1 227 0
 598 0094 8E42     		cmp	r6, r1
 599 0096 F1D2     		bcs	.L22
 600              	.LVL45:
 601              	.L37:
 602              	.LBE297:
 603              	.LBB298:
 604              	.LBB296:
 605              	.LBB295:
 606              	.LBB294:
 607              	.LBB293:
 608              	.LBB292:
 609              		.loc 4 264 0
 610              		.syntax unified
 611              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 612 0098 83F31188 		MSR basepri, r3
 613              	@ 0 "" 2
 614              	.LVL46:
 615              		.thumb
 616              		.syntax unified
 617              	.L18:
 618              	.LBE292:
 619              	.LBE293:
 620              	.LBE294:
 621              	.LBE295:
 622              	.LBE296:
 623              	.LBE298:
 624              	.LBE301:
 259:lib/chibios/os/hal/src/hal_queues.c ****       return r;
 260:lib/chibios/os/hal/src/hal_queues.c ****     }
 261:lib/chibios/os/hal/src/hal_queues.c **** 
 262:lib/chibios/os/hal/src/hal_queues.c ****     osalSysLock();
 263:lib/chibios/os/hal/src/hal_queues.c ****   }
 264:lib/chibios/os/hal/src/hal_queues.c **** }
 625              		.loc 1 264 0
 626 009c 2846     		mov	r0, r5
 627 009e 05B0     		add	sp, sp, #20
 628              		.cfi_def_cfa_offset 36
 629              		@ sp needed
 630 00a0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 631              		.cfi_endproc
 632              	.LFE283:
 634              		.section	.text.oqObjectInit,"ax",%progbits
 635              		.align	1
 636              		.global	oqObjectInit
 637              		.syntax unified
 638              		.thumb
 639              		.thumb_func
 640              		.fpu softvfp
 642              	oqObjectInit:
 643              	.LFB284:
 265:lib/chibios/os/hal/src/hal_queues.c **** 
 266:lib/chibios/os/hal/src/hal_queues.c **** /**
 267:lib/chibios/os/hal/src/hal_queues.c ****  * @brief   Initializes an output queue.
 268:lib/chibios/os/hal/src/hal_queues.c ****  * @details A Semaphore is internally initialized and works as a counter of
 269:lib/chibios/os/hal/src/hal_queues.c ****  *          the free bytes in the queue.
 270:lib/chibios/os/hal/src/hal_queues.c ****  * @note    The callback is invoked from within the S-Locked system state.
 271:lib/chibios/os/hal/src/hal_queues.c ****  *
 272:lib/chibios/os/hal/src/hal_queues.c ****  * @param[out] oqp      pointer to an @p output_queue_t structure
 273:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to a memory area allocated as queue buffer
 274:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] size      size of the queue buffer
 275:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] onfy      pointer to a callback function that is invoked when
 276:lib/chibios/os/hal/src/hal_queues.c ****  *                      data is written to the queue. The value can be @p NULL.
 277:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] link      application defined pointer
 278:lib/chibios/os/hal/src/hal_queues.c ****  *
 279:lib/chibios/os/hal/src/hal_queues.c ****  * @init
 280:lib/chibios/os/hal/src/hal_queues.c ****  */
 281:lib/chibios/os/hal/src/hal_queues.c **** void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
 282:lib/chibios/os/hal/src/hal_queues.c ****                   qnotify_t onfy, void *link) {
 644              		.loc 1 282 0
 645              		.cfi_startproc
 646              		@ args = 4, pretend = 0, frame = 0
 647              		@ frame_needed = 0, uses_anonymous_args = 0
 648              		@ link register save eliminated.
 649              	.LVL47:
 283:lib/chibios/os/hal/src/hal_queues.c **** 
 284:lib/chibios/os/hal/src/hal_queues.c ****   osalThreadQueueObjectInit(&oqp->q_waiting);
 285:lib/chibios/os/hal/src/hal_queues.c ****   oqp->q_counter = size;
 286:lib/chibios/os/hal/src/hal_queues.c ****   oqp->q_buffer  = bp;
 650              		.loc 1 286 0
 651 0000 C160     		str	r1, [r0, #12]
 287:lib/chibios/os/hal/src/hal_queues.c ****   oqp->q_rdptr   = bp;
 288:lib/chibios/os/hal/src/hal_queues.c ****   oqp->q_wrptr   = bp;
 652              		.loc 1 288 0
 653 0002 C0E90511 		strd	r1, r1, [r0, #20]
 289:lib/chibios/os/hal/src/hal_queues.c ****   oqp->q_top     = bp + size;
 290:lib/chibios/os/hal/src/hal_queues.c ****   oqp->q_notify  = onfy;
 654              		.loc 1 290 0
 655 0006 C361     		str	r3, [r0, #28]
 289:lib/chibios/os/hal/src/hal_queues.c ****   oqp->q_top     = bp + size;
 656              		.loc 1 289 0
 657 0008 1144     		add	r1, r1, r2
 658              	.LVL48:
 291:lib/chibios/os/hal/src/hal_queues.c ****   oqp->q_link    = link;
 659              		.loc 1 291 0
 660 000a 009B     		ldr	r3, [sp]
 661              	.LVL49:
 285:lib/chibios/os/hal/src/hal_queues.c ****   oqp->q_buffer  = bp;
 662              		.loc 1 285 0
 663 000c 8260     		str	r2, [r0, #8]
 664              	.LBB302:
 665              	.LBB303:
 666              	.LBB304:
 667              	.LBB305:
 668              		.loc 2 551 0
 669 000e C0E90000 		strd	r0, r0, [r0]
 670              	.LVL50:
 671              	.LBE305:
 672              	.LBE304:
 673              	.LBE303:
 674              	.LBE302:
 289:lib/chibios/os/hal/src/hal_queues.c ****   oqp->q_top     = bp + size;
 675              		.loc 1 289 0
 676 0012 0161     		str	r1, [r0, #16]
 677              		.loc 1 291 0
 678 0014 0362     		str	r3, [r0, #32]
 292:lib/chibios/os/hal/src/hal_queues.c **** }
 679              		.loc 1 292 0
 680 0016 7047     		bx	lr
 681              		.cfi_endproc
 682              	.LFE284:
 684              		.section	.text.oqResetI,"ax",%progbits
 685              		.align	1
 686              		.global	oqResetI
 687              		.syntax unified
 688              		.thumb
 689              		.thumb_func
 690              		.fpu softvfp
 692              	oqResetI:
 693              	.LFB285:
 293:lib/chibios/os/hal/src/hal_queues.c **** 
 294:lib/chibios/os/hal/src/hal_queues.c **** /**
 295:lib/chibios/os/hal/src/hal_queues.c ****  * @brief   Resets an output queue.
 296:lib/chibios/os/hal/src/hal_queues.c ****  * @details All the data in the output queue is erased and lost, any waiting
 297:lib/chibios/os/hal/src/hal_queues.c ****  *          thread is resumed with status @p MSG_RESET.
 298:lib/chibios/os/hal/src/hal_queues.c ****  * @note    A reset operation can be used by a low level driver in order to
 299:lib/chibios/os/hal/src/hal_queues.c ****  *          obtain immediate attention from the high level layers.
 300:lib/chibios/os/hal/src/hal_queues.c ****  *
 301:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 302:lib/chibios/os/hal/src/hal_queues.c ****  *
 303:lib/chibios/os/hal/src/hal_queues.c ****  * @iclass
 304:lib/chibios/os/hal/src/hal_queues.c ****  */
 305:lib/chibios/os/hal/src/hal_queues.c **** void oqResetI(output_queue_t *oqp) {
 694              		.loc 1 305 0
 695              		.cfi_startproc
 696              		@ args = 0, pretend = 0, frame = 0
 697              		@ frame_needed = 0, uses_anonymous_args = 0
 698              		@ link register save eliminated.
 699              	.LVL51:
 306:lib/chibios/os/hal/src/hal_queues.c **** 
 307:lib/chibios/os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 308:lib/chibios/os/hal/src/hal_queues.c **** 
 309:lib/chibios/os/hal/src/hal_queues.c ****   oqp->q_rdptr = oqp->q_buffer;
 700              		.loc 1 309 0
 701 0000 C168     		ldr	r1, [r0, #12]
 310:lib/chibios/os/hal/src/hal_queues.c ****   oqp->q_wrptr = oqp->q_buffer;
 311:lib/chibios/os/hal/src/hal_queues.c ****   oqp->q_counter = qSizeX(oqp);
 702              		.loc 1 311 0
 703 0002 0269     		ldr	r2, [r0, #16]
 704 0004 521A     		subs	r2, r2, r1
 310:lib/chibios/os/hal/src/hal_queues.c ****   oqp->q_wrptr = oqp->q_buffer;
 705              		.loc 1 310 0
 706 0006 C0E90511 		strd	r1, r1, [r0, #20]
 707              		.loc 1 311 0
 708 000a 8260     		str	r2, [r0, #8]
 709              	.LVL52:
 710              	.LBB306:
 711              	.LBB307:
 712              		.loc 3 810 0
 713 000c 6FF00101 		mvn	r1, #1
 714 0010 FFF7FEBF 		b	chThdDequeueAllI
 715              	.LVL53:
 716              	.LBE307:
 717              	.LBE306:
 718              		.cfi_endproc
 719              	.LFE285:
 721              		.section	.text.oqPutTimeout,"ax",%progbits
 722              		.align	1
 723              		.global	oqPutTimeout
 724              		.syntax unified
 725              		.thumb
 726              		.thumb_func
 727              		.fpu softvfp
 729              	oqPutTimeout:
 730              	.LFB286:
 312:lib/chibios/os/hal/src/hal_queues.c ****   osalThreadDequeueAllI(&oqp->q_waiting, MSG_RESET);
 313:lib/chibios/os/hal/src/hal_queues.c **** }
 314:lib/chibios/os/hal/src/hal_queues.c **** 
 315:lib/chibios/os/hal/src/hal_queues.c **** /**
 316:lib/chibios/os/hal/src/hal_queues.c ****  * @brief   Output queue write with timeout.
 317:lib/chibios/os/hal/src/hal_queues.c ****  * @details This function writes a byte value to an output queue. If the queue
 318:lib/chibios/os/hal/src/hal_queues.c ****  *          is full then the calling thread is suspended until there is space
 319:lib/chibios/os/hal/src/hal_queues.c ****  *          in the queue or a timeout occurs.
 320:lib/chibios/os/hal/src/hal_queues.c ****  * @note    The callback is invoked after putting the character into the
 321:lib/chibios/os/hal/src/hal_queues.c ****  *          queue.
 322:lib/chibios/os/hal/src/hal_queues.c ****  *
 323:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 324:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
 325:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 326:lib/chibios/os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 327:lib/chibios/os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 328:lib/chibios/os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 329:lib/chibios/os/hal/src/hal_queues.c ****  *                      .
 330:lib/chibios/os/hal/src/hal_queues.c ****  * @return              The operation status.
 331:lib/chibios/os/hal/src/hal_queues.c ****  * @retval MSG_OK       if the operation succeeded.
 332:lib/chibios/os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 333:lib/chibios/os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 334:lib/chibios/os/hal/src/hal_queues.c ****  *
 335:lib/chibios/os/hal/src/hal_queues.c ****  * @api
 336:lib/chibios/os/hal/src/hal_queues.c ****  */
 337:lib/chibios/os/hal/src/hal_queues.c **** msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 731              		.loc 1 337 0
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 0
 734              		@ frame_needed = 0, uses_anonymous_args = 0
 735              	.LVL54:
 736 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 737              		.cfi_def_cfa_offset 24
 738              		.cfi_offset 3, -24
 739              		.cfi_offset 4, -20
 740              		.cfi_offset 5, -16
 741              		.cfi_offset 6, -12
 742              		.cfi_offset 7, -8
 743              		.cfi_offset 14, -4
 744              		.loc 1 337 0
 745 0002 0446     		mov	r4, r0
 746 0004 0E46     		mov	r6, r1
 747 0006 1746     		mov	r7, r2
 748              	.LBB308:
 749              	.LBB309:
 750              	.LBB310:
 751              	.LBB311:
 752              	.LBB312:
 753              		.loc 4 264 0
 754 0008 2023     		movs	r3, #32
 755              		.syntax unified
 756              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 757 000a 83F31188 		MSR basepri, r3
 758              	@ 0 "" 2
 759              	.LVL55:
 760              		.thumb
 761              		.syntax unified
 762              	.L41:
 763              	.LBE312:
 764              	.LBE311:
 765              	.LBE310:
 766              	.LBE309:
 767              	.LBE308:
 338:lib/chibios/os/hal/src/hal_queues.c **** 
 339:lib/chibios/os/hal/src/hal_queues.c ****   osalSysLock();
 340:lib/chibios/os/hal/src/hal_queues.c **** 
 341:lib/chibios/os/hal/src/hal_queues.c ****   /* Waiting until there is a slot available or a timeout occurs.*/
 342:lib/chibios/os/hal/src/hal_queues.c ****   while (oqIsFullI(oqp)) {
 768              		.loc 1 342 0
 769 000e A568     		ldr	r5, [r4, #8]
 770 0010 A5B1     		cbz	r5, .L43
 343:lib/chibios/os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 344:lib/chibios/os/hal/src/hal_queues.c ****     if (msg < MSG_OK) {
 345:lib/chibios/os/hal/src/hal_queues.c ****       osalSysUnlock();
 346:lib/chibios/os/hal/src/hal_queues.c ****       return msg;
 347:lib/chibios/os/hal/src/hal_queues.c ****     }
 348:lib/chibios/os/hal/src/hal_queues.c ****   }
 349:lib/chibios/os/hal/src/hal_queues.c **** 
 350:lib/chibios/os/hal/src/hal_queues.c ****   /* Putting the character into the queue.*/
 351:lib/chibios/os/hal/src/hal_queues.c ****   oqp->q_counter--;
 771              		.loc 1 351 0
 772 0012 A368     		ldr	r3, [r4, #8]
 773 0014 013B     		subs	r3, r3, #1
 774 0016 A360     		str	r3, [r4, #8]
 352:lib/chibios/os/hal/src/hal_queues.c ****   *oqp->q_wrptr++ = b;
 775              		.loc 1 352 0
 776 0018 6369     		ldr	r3, [r4, #20]
 777 001a 5A1C     		adds	r2, r3, #1
 778 001c 6261     		str	r2, [r4, #20]
 779 001e 1E70     		strb	r6, [r3]
 353:lib/chibios/os/hal/src/hal_queues.c ****   if (oqp->q_wrptr >= oqp->q_top) {
 780              		.loc 1 353 0
 781 0020 D4E90432 		ldrd	r3, r2, [r4, #16]
 782 0024 9A42     		cmp	r2, r3
 354:lib/chibios/os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer;
 783              		.loc 1 354 0
 784 0026 24BF     		itt	cs
 785 0028 E368     		ldrcs	r3, [r4, #12]
 786 002a 6361     		strcs	r3, [r4, #20]
 355:lib/chibios/os/hal/src/hal_queues.c ****   }
 356:lib/chibios/os/hal/src/hal_queues.c **** 
 357:lib/chibios/os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one character available.*/
 358:lib/chibios/os/hal/src/hal_queues.c ****   if (oqp->q_notify != NULL) {
 787              		.loc 1 358 0
 788 002c E369     		ldr	r3, [r4, #28]
 789 002e 0BB1     		cbz	r3, .L45
 359:lib/chibios/os/hal/src/hal_queues.c ****     oqp->q_notify(oqp);
 790              		.loc 1 359 0
 791 0030 2046     		mov	r0, r4
 792 0032 9847     		blx	r3
 793              	.LVL56:
 794              	.L45:
 795              	.LBB313:
 796              	.LBB314:
 797              	.LBB315:
 798              	.LBB316:
 799              	.LBB317:
 800              	.LBB318:
 801              		.loc 4 264 0
 802 0034 0020     		movs	r0, #0
 803              		.syntax unified
 804              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 805 0036 80F31188 		MSR basepri, r0
 806              	@ 0 "" 2
 807              	.LVL57:
 808              		.thumb
 809              		.syntax unified
 810              	.LBE318:
 811              	.LBE317:
 812              	.LBE316:
 813              	.LBE315:
 814              	.LBE314:
 815              	.LBE313:
 360:lib/chibios/os/hal/src/hal_queues.c ****   }
 361:lib/chibios/os/hal/src/hal_queues.c **** 
 362:lib/chibios/os/hal/src/hal_queues.c ****   osalSysUnlock();
 363:lib/chibios/os/hal/src/hal_queues.c **** 
 364:lib/chibios/os/hal/src/hal_queues.c ****   return MSG_OK;
 816              		.loc 1 364 0
 817 003a 07E0     		b	.L40
 818              	.L43:
 819              	.LVL58:
 820              	.LBB319:
 821              	.LBB320:
 822              	.LBB321:
 784:./lib/chibios/os/hal/osal/rt/osal.h **** }
 823              		.loc 3 784 0
 824 003c 3946     		mov	r1, r7
 825 003e 2046     		mov	r0, r4
 826 0040 FFF7FEFF 		bl	chThdEnqueueTimeoutS
 827              	.LVL59:
 828              	.LBE321:
 829              	.LBE320:
 344:lib/chibios/os/hal/src/hal_queues.c ****       osalSysUnlock();
 830              		.loc 1 344 0
 831 0044 0028     		cmp	r0, #0
 832 0046 E2DA     		bge	.L41
 833              	.LVL60:
 834              	.LBB322:
 835              	.LBB323:
 836              	.LBB324:
 837              	.LBB325:
 838              	.LBB326:
 839              	.LBB327:
 840              		.loc 4 264 0
 841              		.syntax unified
 842              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 843 0048 85F31188 		MSR basepri, r5
 844              	@ 0 "" 2
 845              	.LVL61:
 846              		.thumb
 847              		.syntax unified
 848              	.L40:
 849              	.LBE327:
 850              	.LBE326:
 851              	.LBE325:
 852              	.LBE324:
 853              	.LBE323:
 854              	.LBE322:
 855              	.LBE319:
 365:lib/chibios/os/hal/src/hal_queues.c **** }
 856              		.loc 1 365 0
 857 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 858              		.cfi_endproc
 859              	.LFE286:
 861              		.section	.text.oqGetI,"ax",%progbits
 862              		.align	1
 863              		.global	oqGetI
 864              		.syntax unified
 865              		.thumb
 866              		.thumb_func
 867              		.fpu softvfp
 869              	oqGetI:
 870              	.LFB287:
 366:lib/chibios/os/hal/src/hal_queues.c **** 
 367:lib/chibios/os/hal/src/hal_queues.c **** /**
 368:lib/chibios/os/hal/src/hal_queues.c ****  * @brief   Output queue read.
 369:lib/chibios/os/hal/src/hal_queues.c ****  * @details A byte value is read from the low end of an output queue.
 370:lib/chibios/os/hal/src/hal_queues.c ****  *
 371:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 372:lib/chibios/os/hal/src/hal_queues.c ****  * @return              The byte value from the queue.
 373:lib/chibios/os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is empty.
 374:lib/chibios/os/hal/src/hal_queues.c ****  *
 375:lib/chibios/os/hal/src/hal_queues.c ****  * @iclass
 376:lib/chibios/os/hal/src/hal_queues.c ****  */
 377:lib/chibios/os/hal/src/hal_queues.c **** msg_t oqGetI(output_queue_t *oqp) {
 871              		.loc 1 377 0
 872              		.cfi_startproc
 873              		@ args = 0, pretend = 0, frame = 0
 874              		@ frame_needed = 0, uses_anonymous_args = 0
 875              	.LVL62:
 378:lib/chibios/os/hal/src/hal_queues.c ****   uint8_t b;
 379:lib/chibios/os/hal/src/hal_queues.c **** 
 380:lib/chibios/os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 381:lib/chibios/os/hal/src/hal_queues.c **** 
 382:lib/chibios/os/hal/src/hal_queues.c ****   if (oqIsEmptyI(oqp)) {
 876              		.loc 1 382 0
 877 0000 D0E90523 		ldrd	r2, r3, [r0, #20]
 878 0004 9A42     		cmp	r2, r3
 377:lib/chibios/os/hal/src/hal_queues.c ****   uint8_t b;
 879              		.loc 1 377 0
 880 0006 10B5     		push	{r4, lr}
 881              		.cfi_def_cfa_offset 8
 882              		.cfi_offset 4, -8
 883              		.cfi_offset 14, -4
 884              		.loc 1 382 0
 885 0008 01D1     		bne	.L51
 886              		.loc 1 382 0 is_stmt 0 discriminator 1
 887 000a 8268     		ldr	r2, [r0, #8]
 888 000c 7AB9     		cbnz	r2, .L54
 889              	.L51:
 383:lib/chibios/os/hal/src/hal_queues.c ****     return MSG_TIMEOUT;
 384:lib/chibios/os/hal/src/hal_queues.c ****   }
 385:lib/chibios/os/hal/src/hal_queues.c **** 
 386:lib/chibios/os/hal/src/hal_queues.c ****   oqp->q_counter++;
 890              		.loc 1 386 0 is_stmt 1
 891 000e 8268     		ldr	r2, [r0, #8]
 892 0010 0132     		adds	r2, r2, #1
 893 0012 8260     		str	r2, [r0, #8]
 387:lib/chibios/os/hal/src/hal_queues.c ****   b = *oqp->q_rdptr++;
 894              		.loc 1 387 0
 895 0014 5A1C     		adds	r2, r3, #1
 896 0016 8261     		str	r2, [r0, #24]
 897 0018 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 898              	.LVL63:
 388:lib/chibios/os/hal/src/hal_queues.c ****   if (oqp->q_rdptr >= oqp->q_top) {
 899              		.loc 1 388 0
 900 001a 0369     		ldr	r3, [r0, #16]
 901 001c 9A42     		cmp	r2, r3
 389:lib/chibios/os/hal/src/hal_queues.c ****     oqp->q_rdptr = oqp->q_buffer;
 902              		.loc 1 389 0
 903 001e 24BF     		itt	cs
 904 0020 C368     		ldrcs	r3, [r0, #12]
 905 0022 8361     		strcs	r3, [r0, #24]
 906              	.LVL64:
 907              	.LBB328:
 908              	.LBB329:
 797:./lib/chibios/os/hal/osal/rt/osal.h **** }
 909              		.loc 3 797 0
 910 0024 0021     		movs	r1, #0
 911 0026 FFF7FEFF 		bl	chThdDequeueNextI
 912              	.LVL65:
 913              	.LBE329:
 914              	.LBE328:
 390:lib/chibios/os/hal/src/hal_queues.c ****   }
 391:lib/chibios/os/hal/src/hal_queues.c **** 
 392:lib/chibios/os/hal/src/hal_queues.c ****   osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 393:lib/chibios/os/hal/src/hal_queues.c **** 
 394:lib/chibios/os/hal/src/hal_queues.c ****   return (msg_t)b;
 915              		.loc 1 394 0
 916 002a 2046     		mov	r0, r4
 917              	.LVL66:
 918              	.L50:
 395:lib/chibios/os/hal/src/hal_queues.c **** }
 919              		.loc 1 395 0
 920 002c 10BD     		pop	{r4, pc}
 921              	.LVL67:
 922              	.L54:
 383:lib/chibios/os/hal/src/hal_queues.c ****   }
 923              		.loc 1 383 0
 924 002e 4FF0FF30 		mov	r0, #-1
 925              	.LVL68:
 926 0032 FBE7     		b	.L50
 927              		.cfi_endproc
 928              	.LFE287:
 930              		.section	.text.oqWriteTimeout,"ax",%progbits
 931              		.align	1
 932              		.global	oqWriteTimeout
 933              		.syntax unified
 934              		.thumb
 935              		.thumb_func
 936              		.fpu softvfp
 938              	oqWriteTimeout:
 939              	.LFB288:
 396:lib/chibios/os/hal/src/hal_queues.c **** 
 397:lib/chibios/os/hal/src/hal_queues.c **** /**
 398:lib/chibios/os/hal/src/hal_queues.c ****  * @brief   Output queue write with timeout.
 399:lib/chibios/os/hal/src/hal_queues.c ****  * @details The function writes data from a buffer to an output queue. The
 400:lib/chibios/os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
 401:lib/chibios/os/hal/src/hal_queues.c ****  *          transferred or after the specified timeout or if the queue has
 402:lib/chibios/os/hal/src/hal_queues.c ****  *          been reset.
 403:lib/chibios/os/hal/src/hal_queues.c ****  * @note    The function is not atomic, if you need atomicity it is suggested
 404:lib/chibios/os/hal/src/hal_queues.c ****  *          to use a semaphore or a mutex for mutual exclusion.
 405:lib/chibios/os/hal/src/hal_queues.c ****  * @note    The callback is invoked after putting each character into the
 406:lib/chibios/os/hal/src/hal_queues.c ****  *          queue.
 407:lib/chibios/os/hal/src/hal_queues.c ****  *
 408:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 409:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to the data buffer
 410:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 411:lib/chibios/os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 412:lib/chibios/os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 413:lib/chibios/os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 414:lib/chibios/os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 415:lib/chibios/os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 416:lib/chibios/os/hal/src/hal_queues.c ****  *                      .
 417:lib/chibios/os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 418:lib/chibios/os/hal/src/hal_queues.c ****  *
 419:lib/chibios/os/hal/src/hal_queues.c ****  * @api
 420:lib/chibios/os/hal/src/hal_queues.c ****  */
 421:lib/chibios/os/hal/src/hal_queues.c **** size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
 422:lib/chibios/os/hal/src/hal_queues.c ****                       size_t n, systime_t timeout) {
 940              		.loc 1 422 0
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 16
 943              		@ frame_needed = 0, uses_anonymous_args = 0
 944              	.LVL69:
 945 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 946              		.cfi_def_cfa_offset 36
 947              		.cfi_offset 4, -36
 948              		.cfi_offset 5, -32
 949              		.cfi_offset 6, -28
 950              		.cfi_offset 7, -24
 951              		.cfi_offset 8, -20
 952              		.cfi_offset 9, -16
 953              		.cfi_offset 10, -12
 954              		.cfi_offset 11, -8
 955              		.cfi_offset 14, -4
 956 0004 1E46     		mov	r6, r3
 957 0006 85B0     		sub	sp, sp, #20
 958              		.cfi_def_cfa_offset 56
 959              		.loc 1 422 0
 960 0008 0446     		mov	r4, r0
 961 000a 0F46     		mov	r7, r1
 962 000c 9046     		mov	r8, r2
 423:lib/chibios/os/hal/src/hal_queues.c ****   systime_t deadline;
 424:lib/chibios/os/hal/src/hal_queues.c ****   qnotify_t nfy = oqp->q_notify;
 963              		.loc 1 424 0
 964 000e D0F81C90 		ldr	r9, [r0, #28]
 965              	.LVL70:
 966              	.LBB330:
 967              	.LBB331:
 968              	.LBB332:
 969              	.LBB333:
 970              	.LBB334:
 971              		.loc 4 264 0
 972 0012 2023     		movs	r3, #32
 973              	.LVL71:
 974              		.syntax unified
 975              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 976 0014 83F31188 		MSR basepri, r3
 977              	@ 0 "" 2
 978              	.LVL72:
 979              		.thumb
 980              		.syntax unified
 981              	.LBE334:
 982              	.LBE333:
 983              	.LBE332:
 984              	.LBE331:
 985              	.LBE330:
 986              	.LBB335:
 987              	.LBB336:
 988              	.LBB337:
 989              	.LBB338:
 990              	.LBB339:
 991              		.loc 5 141 0
 992 0018 4FF08042 		mov	r2, #1073741824
 993              	.LVL73:
 994              	.LBE339:
 995              	.LBE338:
 996              	.LBE337:
 997              	.LBE336:
 998              	.LBE335:
 425:lib/chibios/os/hal/src/hal_queues.c ****   size_t w = 0;
 999              		.loc 1 425 0
 1000 001c 0025     		movs	r5, #0
 1001              	.LBB344:
 1002              	.LBB343:
 1003              	.LBB342:
 1004              	.LBB341:
 1005              	.LBB340:
 1006              		.loc 5 141 0
 1007 001e 526A     		ldr	r2, [r2, #36]
 1008              	.LBE340:
 1009              	.LBE341:
 1010              	.LBE342:
 1011              	.LBE343:
 1012              	.LBE344:
 1013              	.LBB345:
 1014              	.LBB346:
 1015              	.LBB347:
 1016              	.LBB348:
 1017              	.LBB349:
 1018              	.LBB350:
 1019              		.loc 4 264 0
 1020 0020 0293     		str	r3, [sp, #8]
 1021              	.LBE350:
 1022              	.LBE349:
 1023              	.LBE348:
 1024              	.LBE347:
 1025              	.LBE346:
 1026              	.LBE345:
 426:lib/chibios/os/hal/src/hal_queues.c **** 
 427:lib/chibios/os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 428:lib/chibios/os/hal/src/hal_queues.c **** 
 429:lib/chibios/os/hal/src/hal_queues.c ****   osalSysLock();
 430:lib/chibios/os/hal/src/hal_queues.c **** 
 431:lib/chibios/os/hal/src/hal_queues.c ****   /* Time deadline for the whole operation, note the result is invalid
 432:lib/chibios/os/hal/src/hal_queues.c ****      when timeout is TIME_INFINITE or TIME_IMMEDIATE but in that case
 433:lib/chibios/os/hal/src/hal_queues.c ****      the deadline is not used.*/
 434:lib/chibios/os/hal/src/hal_queues.c ****   deadline = osalOsGetSystemTimeX() + timeout;
 1027              		.loc 1 434 0
 1028 0022 B218     		adds	r2, r6, r2
 1029 0024 0192     		str	r2, [sp, #4]
 1030              	.LVL74:
 1031              	.LBB391:
 1032              	.LBB355:
 1033              	.LBB356:
 1034              	.LBB357:
 1035              	.LBB358:
 1036              	.LBB359:
 1037              	.LBB360:
 1038              		.loc 4 264 0
 1039 0026 AA46     		mov	r10, r5
 1040              	.LBE360:
 1041              	.LBE359:
 1042              	.LBE358:
 1043              	.LBE357:
 1044              	.LBE356:
 1045              	.LBE355:
 435:lib/chibios/os/hal/src/hal_queues.c **** 
 436:lib/chibios/os/hal/src/hal_queues.c ****   while (true) {
 437:lib/chibios/os/hal/src/hal_queues.c ****     msg_t msg;
 438:lib/chibios/os/hal/src/hal_queues.c **** 
 439:lib/chibios/os/hal/src/hal_queues.c ****     while (oqIsFullI(oqp)) {
 440:lib/chibios/os/hal/src/hal_queues.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 441:lib/chibios/os/hal/src/hal_queues.c ****          deadline.*/
 442:lib/chibios/os/hal/src/hal_queues.c ****       if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 1046              		.loc 1 442 0
 1047 0028 06F1FF3B 		add	fp, r6, #-1
 1048              	.LVL75:
 1049              	.L56:
 439:lib/chibios/os/hal/src/hal_queues.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 1050              		.loc 1 439 0
 1051 002c A368     		ldr	r3, [r4, #8]
 1052 002e 0BB3     		cbz	r3, .L62
 443:lib/chibios/os/hal/src/hal_queues.c ****         msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 444:lib/chibios/os/hal/src/hal_queues.c ****       }
 445:lib/chibios/os/hal/src/hal_queues.c ****       else {
 446:lib/chibios/os/hal/src/hal_queues.c ****         systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 447:lib/chibios/os/hal/src/hal_queues.c **** 
 448:lib/chibios/os/hal/src/hal_queues.c ****         /* Handling the case where the system time went past the deadline,
 449:lib/chibios/os/hal/src/hal_queues.c ****            in this case next becomes a very high number because the system
 450:lib/chibios/os/hal/src/hal_queues.c ****            time is an unsigned type.*/
 451:lib/chibios/os/hal/src/hal_queues.c ****         if (next_timeout > timeout) {
 452:lib/chibios/os/hal/src/hal_queues.c ****           osalSysUnlock();
 453:lib/chibios/os/hal/src/hal_queues.c ****           return w;
 454:lib/chibios/os/hal/src/hal_queues.c ****         }
 455:lib/chibios/os/hal/src/hal_queues.c **** 
 456:lib/chibios/os/hal/src/hal_queues.c ****         msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, next_timeout);
 457:lib/chibios/os/hal/src/hal_queues.c ****       }
 458:lib/chibios/os/hal/src/hal_queues.c **** 
 459:lib/chibios/os/hal/src/hal_queues.c ****       /* Anything except MSG_OK causes the operation to stop.*/
 460:lib/chibios/os/hal/src/hal_queues.c ****       if (msg != MSG_OK) {
 461:lib/chibios/os/hal/src/hal_queues.c ****         osalSysUnlock();
 462:lib/chibios/os/hal/src/hal_queues.c ****         return w;
 463:lib/chibios/os/hal/src/hal_queues.c ****       }
 464:lib/chibios/os/hal/src/hal_queues.c ****     }
 465:lib/chibios/os/hal/src/hal_queues.c **** 
 466:lib/chibios/os/hal/src/hal_queues.c ****     /* Putting the character into the queue.*/
 467:lib/chibios/os/hal/src/hal_queues.c ****     oqp->q_counter--;
 1053              		.loc 1 467 0
 1054 0030 A368     		ldr	r3, [r4, #8]
 1055 0032 013B     		subs	r3, r3, #1
 1056 0034 A360     		str	r3, [r4, #8]
 468:lib/chibios/os/hal/src/hal_queues.c ****     *oqp->q_wrptr++ = *bp++;
 1057              		.loc 1 468 0
 1058 0036 6369     		ldr	r3, [r4, #20]
 1059 0038 591C     		adds	r1, r3, #1
 1060 003a 6161     		str	r1, [r4, #20]
 1061 003c 3978     		ldrb	r1, [r7]	@ zero_extendqisi2
 1062 003e 1970     		strb	r1, [r3]
 469:lib/chibios/os/hal/src/hal_queues.c ****     if (oqp->q_wrptr >= oqp->q_top) {
 1063              		.loc 1 469 0
 1064 0040 D4E90431 		ldrd	r3, r1, [r4, #16]
 1065 0044 9942     		cmp	r1, r3
 470:lib/chibios/os/hal/src/hal_queues.c ****       oqp->q_wrptr = oqp->q_buffer;
 1066              		.loc 1 470 0
 1067 0046 24BF     		itt	cs
 1068 0048 E368     		ldrcs	r3, [r4, #12]
 1069 004a 6361     		strcs	r3, [r4, #20]
 468:lib/chibios/os/hal/src/hal_queues.c ****     *oqp->q_wrptr++ = *bp++;
 1070              		.loc 1 468 0
 1071 004c 7A1C     		adds	r2, r7, #1
 1072              	.LVL76:
 471:lib/chibios/os/hal/src/hal_queues.c ****     }
 472:lib/chibios/os/hal/src/hal_queues.c **** 
 473:lib/chibios/os/hal/src/hal_queues.c ****     /* Inform the low side that the queue has at least one character available.*/
 474:lib/chibios/os/hal/src/hal_queues.c ****     if (nfy != NULL) {
 1073              		.loc 1 474 0
 1074 004e B9F1000F 		cmp	r9, #0
 1075 0052 03D0     		beq	.L64
 1076 0054 0392     		str	r2, [sp, #12]
 475:lib/chibios/os/hal/src/hal_queues.c ****       nfy(oqp);
 1077              		.loc 1 475 0
 1078 0056 2046     		mov	r0, r4
 1079 0058 C847     		blx	r9
 1080              	.LVL77:
 1081 005a 039A     		ldr	r2, [sp, #12]
 1082              	.LVL78:
 1083              	.L64:
 1084              	.LBB366:
 1085              	.LBB365:
 1086              	.LBB364:
 1087              	.LBB363:
 1088              	.LBB362:
 1089              	.LBB361:
 1090              		.loc 4 264 0
 1091              		.syntax unified
 1092              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1093 005c 8AF31188 		MSR basepri, r10
 1094              	@ 0 "" 2
 1095              	.LVL79:
 1096              		.thumb
 1097              		.syntax unified
 1098              	.LBE361:
 1099              	.LBE362:
 1100              	.LBE363:
 1101              	.LBE364:
 1102              	.LBE365:
 1103              	.LBE366:
 476:lib/chibios/os/hal/src/hal_queues.c ****     }
 477:lib/chibios/os/hal/src/hal_queues.c **** 
 478:lib/chibios/os/hal/src/hal_queues.c ****     /* Giving a preemption chance in a controlled point.*/
 479:lib/chibios/os/hal/src/hal_queues.c ****     osalSysUnlock();
 480:lib/chibios/os/hal/src/hal_queues.c **** 
 481:lib/chibios/os/hal/src/hal_queues.c ****     w++;
 482:lib/chibios/os/hal/src/hal_queues.c ****     if (--n == 0U) {
 1104              		.loc 1 482 0
 1105 0060 B8F10108 		subs	r8, r8, #1
 1106              	.LVL80:
 481:lib/chibios/os/hal/src/hal_queues.c ****     if (--n == 0U) {
 1107              		.loc 1 481 0
 1108 0064 05F10105 		add	r5, r5, #1
 1109              	.LVL81:
 1110              		.loc 1 482 0
 1111 0068 18D0     		beq	.L55
 1112              	.LVL82:
 1113              	.LBB367:
 1114              	.LBB354:
 1115              	.LBB353:
 1116              	.LBB352:
 1117              	.LBB351:
 1118              		.loc 4 264 0
 1119 006a 029B     		ldr	r3, [sp, #8]
 1120              		.syntax unified
 1121              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1122 006c 83F31188 		MSR basepri, r3
 1123              	@ 0 "" 2
 1124              	.LVL83:
 1125              		.thumb
 1126              		.syntax unified
 1127              	.LBE351:
 1128              	.LBE352:
 1129              	.LBE353:
 1130              	.LBE354:
 1131              	.LBE367:
 468:lib/chibios/os/hal/src/hal_queues.c ****     if (oqp->q_wrptr >= oqp->q_top) {
 1132              		.loc 1 468 0
 1133 0070 1746     		mov	r7, r2
 1134              	.LVL84:
 1135 0072 DBE7     		b	.L56
 1136              	.LVL85:
 1137              	.L62:
 442:lib/chibios/os/hal/src/hal_queues.c ****         msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 1138              		.loc 1 442 0
 1139 0074 1BF1030F 		cmn	fp, #3
 1140 0078 07D9     		bls	.L57
 1141              	.LVL86:
 1142              	.LBB368:
 1143              	.LBB369:
 784:./lib/chibios/os/hal/osal/rt/osal.h **** }
 1144              		.loc 3 784 0
 1145 007a 3146     		mov	r1, r6
 1146              	.LVL87:
 1147              	.L59:
 1148              	.LBE369:
 1149              	.LBE368:
 1150              	.LBB370:
 1151              	.LBB371:
 1152              	.LBB372:
 1153 007c 2046     		mov	r0, r4
 1154 007e FFF7FEFF 		bl	chThdEnqueueTimeoutS
 1155              	.LVL88:
 1156              	.LBE372:
 1157              	.LBE371:
 1158              	.LBE370:
 460:lib/chibios/os/hal/src/hal_queues.c ****         osalSysUnlock();
 1159              		.loc 1 460 0
 1160 0082 0028     		cmp	r0, #0
 1161 0084 D2D0     		beq	.L56
 1162              	.LVL89:
 1163              	.LBB378:
 1164              	.LBB379:
 1165              	.LBB380:
 1166              	.LBB381:
 1167              	.LBB382:
 1168              	.LBB383:
 1169              		.loc 4 264 0
 1170 0086 0023     		movs	r3, #0
 1171 0088 06E0     		b	.L74
 1172              	.LVL90:
 1173              	.L57:
 1174              	.LBE383:
 1175              	.LBE382:
 1176              	.LBE381:
 1177              	.LBE380:
 1178              	.LBE379:
 1179              	.LBE378:
 1180              	.LBB389:
 1181              	.LBB373:
 1182              	.LBB374:
 1183              	.LBB375:
 1184              	.LBB376:
 1185              	.LBB377:
 1186              		.loc 5 141 0
 1187 008a 4FF08042 		mov	r2, #1073741824
 1188 008e 516A     		ldr	r1, [r2, #36]
 1189              	.LBE377:
 1190              	.LBE376:
 1191              	.LBE375:
 1192              	.LBE374:
 1193              	.LBE373:
 446:lib/chibios/os/hal/src/hal_queues.c **** 
 1194              		.loc 1 446 0
 1195 0090 019A     		ldr	r2, [sp, #4]
 1196 0092 511A     		subs	r1, r2, r1
 1197              	.LVL91:
 451:lib/chibios/os/hal/src/hal_queues.c ****           osalSysUnlock();
 1198              		.loc 1 451 0
 1199 0094 8E42     		cmp	r6, r1
 1200 0096 F1D2     		bcs	.L59
 1201              	.LVL92:
 1202              	.L74:
 1203              	.LBE389:
 1204              	.LBB390:
 1205              	.LBB388:
 1206              	.LBB387:
 1207              	.LBB386:
 1208              	.LBB385:
 1209              	.LBB384:
 1210              		.loc 4 264 0
 1211              		.syntax unified
 1212              	@ 264 "./lib/chibios/os/common/ext/CMSIS/include/cmsis_gcc.h" 1
 1213 0098 83F31188 		MSR basepri, r3
 1214              	@ 0 "" 2
 1215              	.LVL93:
 1216              		.thumb
 1217              		.syntax unified
 1218              	.L55:
 1219              	.LBE384:
 1220              	.LBE385:
 1221              	.LBE386:
 1222              	.LBE387:
 1223              	.LBE388:
 1224              	.LBE390:
 1225              	.LBE391:
 483:lib/chibios/os/hal/src/hal_queues.c ****       return w;
 484:lib/chibios/os/hal/src/hal_queues.c ****     }
 485:lib/chibios/os/hal/src/hal_queues.c **** 
 486:lib/chibios/os/hal/src/hal_queues.c ****     osalSysLock();
 487:lib/chibios/os/hal/src/hal_queues.c ****   }
 488:lib/chibios/os/hal/src/hal_queues.c **** }
 1226              		.loc 1 488 0
 1227 009c 2846     		mov	r0, r5
 1228 009e 05B0     		add	sp, sp, #20
 1229              		.cfi_def_cfa_offset 36
 1230              		@ sp needed
 1231 00a0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1232              		.cfi_endproc
 1233              	.LFE288:
 1235              		.text
 1236              	.Letext0:
 1237              		.file 6 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 1238              		.file 7 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/machine/_default_types
 1239              		.file 8 "/usr/local/Cellar/gcc-arm-none-eabi/20180627/arm-none-eabi/include/sys/_stdint.h"
 1240              		.file 9 "./lib/chibios/os/common/ports/ARMCMx/compilers/GCC/chtypes.h"
 1241              		.file 10 "./lib/chibios/os/rt/include/chsystypes.h"
 1242              		.file 11 "./lib/chibios/os/common/ext/CMSIS/include/core_cm4.h"
 1243              		.file 12 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/system_stm32f3xx.h"
 1244              		.file 13 "./lib/chibios/os/common/ext/CMSIS/ST/STM32F3xx/stm32f303xc.h"
 1245              		.file 14 "./lib/chibios/os/common/ports/ARMCMx/chcore.h"
 1246              		.file 15 "./lib/chibios/os/common/ports/ARMCMx/chcore_v7m.h"
 1247              		.file 16 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/stm32_tim.h"
 1248              		.file 17 "./lib/chibios/os/rt/include/chtm.h"
 1249              		.file 18 "./lib/chibios/os/rt/include/chsem.h"
 1250              		.file 19 "./lib/chibios/os/rt/include/chmtx.h"
 1251              		.file 20 "./lib/chibios/os/rt/include/chsys.h"
 1252              		.file 21 "./lib/chibios/os/rt/include/chregistry.h"
 1253              		.file 22 "./lib/chibios/os/common/oslib/include/chmemcore.h"
 1254              		.file 23 "./lib/chibios/os/hal/ports/STM32/LLD/DMAv1/stm32_dma.h"
 1255              		.file 24 "./lib/chibios/os/hal/include/hal_queues.h"
 1256              		.file 25 "./lib/chibios/os/hal/ports/STM32/LLD/GPIOv2/hal_pal_lld.h"
 1257              		.file 26 "./lib/chibios/os/hal/include/hal_dac.h"
 1258              		.file 27 "./lib/chibios/os/hal/ports/STM32/LLD/DACv1/hal_dac_lld.h"
 1259              		.file 28 "./lib/chibios/os/hal/include/hal_gpt.h"
 1260              		.file 29 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_gpt_lld.h"
 1261              		.file 30 "./lib/chibios/os/hal/include/hal_i2c.h"
 1262              		.file 31 "./lib/chibios/os/hal/ports/STM32/LLD/I2Cv2/hal_i2c_lld.h"
 1263              		.file 32 "./lib/chibios/os/hal/include/hal_pwm.h"
 1264              		.file 33 "./lib/chibios/os/hal/ports/STM32/LLD/TIMv1/hal_pwm_lld.h"
 1265              		.file 34 "./lib/chibios/os/hal/include/hal_usb.h"
 1266              		.file 35 "./lib/chibios/os/hal/ports/STM32/LLD/USBv1/hal_usb_lld.h"
 1267              		.file 36 "./lib/chibios/os/rt/include/chvt.h"
 1268              		.file 37 "./lib/chibios/os/rt/include/chthreads.h"
 1269              		.file 38 "./lib/chibios/os/common/ports/ARMCMx/chcore_timer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_queues.c
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:16     .text.iqObjectInit:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:23     .text.iqObjectInit:0000000000000000 iqObjectInit
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:73     .text.iqResetI:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:80     .text.iqResetI:0000000000000000 iqResetI
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:109    .text.iqPutI:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:116    .text.iqPutI:0000000000000000 iqPutI
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:175    .text.iqGetTimeout:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:182    .text.iqGetTimeout:0000000000000000 iqGetTimeout
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:328    .text.iqReadTimeout:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:335    .text.iqReadTimeout:0000000000000000 iqReadTimeout
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:635    .text.oqObjectInit:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:642    .text.oqObjectInit:0000000000000000 oqObjectInit
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:685    .text.oqResetI:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:692    .text.oqResetI:0000000000000000 oqResetI
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:722    .text.oqPutTimeout:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:729    .text.oqPutTimeout:0000000000000000 oqPutTimeout
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:862    .text.oqGetI:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:869    .text.oqGetI:0000000000000000 oqGetI
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:931    .text.oqWriteTimeout:0000000000000000 $t
/var/folders/qs/3p__ddh573j_6k2216pg8mv40000gn/T//ccLJVb7v.s:938    .text.oqWriteTimeout:0000000000000000 oqWriteTimeout

UNDEFINED SYMBOLS
chThdDequeueAllI
chThdDequeueNextI
chThdEnqueueTimeoutS
